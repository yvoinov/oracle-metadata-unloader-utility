rem Views unloaded by package UTL_UNLD Version 1.0.0.6
rem Written by Y.Voinov (C) 2002-2005

rem Must be run from (i)SQL*Plus from existing account

rem Found 2647 in target schema.

prompt Loading views started...

set termout off
rem set echo on

spool views.log

CREATE OR REPLACE FORCE VIEW "ALL_ALL_TABLES"("OWNER","TABLE_NAME","TABLESPACE_NAME","CLUSTER_NAME","IOT_NAME","PCT_FREE","PCT_USED","INI_TRANS","MAX_TRANS","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENTS","MAX_EXTENTS","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","LOGGING","BACKED_UP","NUM_ROWS","BLOCKS","EMPTY_BLOCKS","AVG_SPACE","CHAIN_CNT","AVG_ROW_LEN","AVG_SPACE_FREELIST_BLOCKS","NUM_FREELIST_BLOCKS","DEGREE","INSTANCES","CACHE","TABLE_LOCK","SAMPLE_SIZE","LAST_ANALYZED","PARTITIONED","IOT_TYPE","OBJECT_ID_TYPE","TABLE_TYPE_OWNER","TABLE_TYPE","TEMPORARY","SECONDARY","NESTED","BUFFER_POOL","ROW_MOVEMENT","GLOBAL_STATS","USER_STATS","DURATION","SKIP_CORRUPT","MONITORING","CLUSTER_OWNER","DEPENDENCIES","COMPRESSION","DROPPED") AS 
select OWNER, TABLE_NAME, TABLESPACE_NAME, CLUSTER_NAME, IOT_NAME,
     PCT_FREE, PCT_USED,
     INI_TRANS, MAX_TRANS,
     INITIAL_EXTENT, NEXT_EXTENT,
     MIN_EXTENTS, MAX_EXTENTS, PCT_INCREASE,
     FREELISTS, FREELIST_GROUPS, LOGGING,
     BACKED_UP, NUM_ROWS, BLOCKS, EMPTY_BLOCKS,
     AVG_SPACE, CHAIN_CNT, AVG_ROW_LEN,
     AVG_SPACE_FREELIST_BLOCKS, NUM_FREELIST_BLOCKS,
     DEGREE, INSTANCES, CACHE, TABLE_LOCK,
     SAMPLE_SIZE, LAST_ANALYZED, PARTITIONED,
     IOT_TYPE, NULL, NULL, NULL, TEMPORARY, SECONDARY, NESTED,
     BUFFER_POOL, ROW_MOVEMENT,
     GLOBAL_STATS, USER_STATS, DURATION, SKIP_CORRUPT, MONITORING,
     CLUSTER_OWNER, DEPENDENCIES, COMPRESSION, DROPPED
from all_tables
union all
select OWNER, TABLE_NAME, TABLESPACE_NAME, CLUSTER_NAME, IOT_NAME,
     PCT_FREE, PCT_USED,
     INI_TRANS, MAX_TRANS,
     INITIAL_EXTENT, NEXT_EXTENT,
     MIN_EXTENTS, MAX_EXTENTS, PCT_INCREASE,
     FREELISTS, FREELIST_GROUPS, LOGGING,
     BACKED_UP, NUM_ROWS, BLOCKS, EMPTY_BLOCKS,
     AVG_SPACE, CHAIN_CNT, AVG_ROW_LEN,
     AVG_SPACE_FREELIST_BLOCKS, NUM_FREELIST_BLOCKS,
     DEGREE, INSTANCES, CACHE, TABLE_LOCK,
     SAMPLE_SIZE, LAST_ANALYZED, PARTITIONED,
     IOT_TYPE, OBJECT_ID_TYPE,
     TABLE_TYPE_OWNER, TABLE_TYPE, TEMPORARY, SECONDARY, NESTED,
     BUFFER_POOL, ROW_MOVEMENT,
     GLOBAL_STATS, USER_STATS, DURATION, SKIP_CORRUPT, MONITORING,
     CLUSTER_OWNER, DEPENDENCIES, COMPRESSION, DROPPED
from all_object_tables;

CREATE OR REPLACE FORCE VIEW "ALL_APPLY"("APPLY_NAME","QUEUE_NAME","QUEUE_OWNER","APPLY_CAPTURED","RULE_SET_NAME","RULE_SET_OWNER","APPLY_USER","APPLY_DATABASE_LINK","APPLY_TAG","DDL_HANDLER","PRECOMMIT_HANDLER","MESSAGE_HANDLER","STATUS","MAX_APPLIED_MESSAGE_NUMBER","NEGATIVE_RULE_SET_NAME","NEGATIVE_RULE_SET_OWNER","STATUS_CHANGE_TIME","ERROR_NUMBER","ERROR_MESSAGE") AS 
select a."APPLY_NAME",a."QUEUE_NAME",a."QUEUE_OWNER",a."APPLY_CAPTURED",a."RULE_SET_NAME",a."RULE_SET_OWNER",a."APPLY_USER",a."APPLY_DATABASE_LINK",a."APPLY_TAG",a."DDL_HANDLER",a."PRECOMMIT_HANDLER",a."MESSAGE_HANDLER",a."STATUS",a."MAX_APPLIED_MESSAGE_NUMBER",a."NEGATIVE_RULE_SET_NAME",a."NEGATIVE_RULE_SET_OWNER",a."STATUS_CHANGE_TIME",a."ERROR_NUMBER",a."ERROR_MESSAGE"
  from dba_apply a, all_queues q
 where a.queue_name = q.name
   and a.queue_owner = q.owner
   and ((a.rule_set_owner is null and a.rule_set_name is null) or
        ((a.rule_set_owner, a.rule_set_name) in
          (select r.rule_set_owner, r.rule_set_name
             from all_rule_sets r)))
   and ((a.negative_rule_set_owner is null and
         a.negative_rule_set_name is null) or
        ((a.negative_rule_set_owner, a.negative_rule_set_name) in
          (select r.rule_set_owner, r.rule_set_name
             from all_rule_sets r)));

CREATE OR REPLACE FORCE VIEW "ALL_APPLY_CONFLICT_COLUMNS"("OBJECT_OWNER","OBJECT_NAME","METHOD_NAME","RESOLUTION_COLUMN","COLUMN_NAME","APPLY_DATABASE_LINK") AS 
select c.object_owner, c.object_name, c.method_name,
       c.resolution_column, c.column_name, c.apply_database_link
  from all_tab_columns o, dba_apply_conflict_columns c
 where c.object_owner = o.owner
   and c.object_name = o.table_name
   and c.column_name = o.column_name;

CREATE OR REPLACE FORCE VIEW "ALL_APPLY_DML_HANDLERS"("OBJECT_OWNER","OBJECT_NAME","OPERATION_NAME","USER_PROCEDURE","ERROR_HANDLER","APPLY_DATABASE_LINK","APPLY_NAME") AS 
select h.object_owner, h.object_name, h.operation_name,
       h.user_procedure, h.error_handler, h.apply_database_link, h.apply_name
  from all_tables o, dba_apply_dml_handlers h
 where h.object_owner = o.owner
   and h.object_name = o.table_name;

CREATE OR REPLACE FORCE VIEW "ALL_APPLY_ENQUEUE"("RULE_OWNER","RULE_NAME","DESTINATION_QUEUE_NAME") AS 
select e."RULE_OWNER",e."RULE_NAME",e."DESTINATION_QUEUE_NAME"
from dba_apply_enqueue e, ALL_RULES r, ALL_QUEUES aq
where e.rule_owner = r.rule_owner and e.rule_name = r.rule_name
  and e.destination_queue_name = '"'||aq.owner||'"' ||'.'|| '"'||aq.name||'"';

CREATE OR REPLACE FORCE VIEW "ALL_APPLY_ERROR"("APPLY_NAME","QUEUE_NAME","QUEUE_OWNER","LOCAL_TRANSACTION_ID","SOURCE_DATABASE","SOURCE_TRANSACTION_ID","SOURCE_COMMIT_SCN","MESSAGE_NUMBER","ERROR_NUMBER","ERROR_MESSAGE","RECIPIENT_ID","RECIPIENT_NAME","MESSAGE_COUNT") AS 
(
select e.apply_name, e.queue_name, e.queue_owner, e.local_transaction_id,
       e.source_database, e.source_transaction_id,
       e.source_commit_scn, e.message_number, e.error_number,
       e.error_message, e.recipient_id, e.recipient_name, e.message_count
  from dba_apply_error e, all_users u, all_queues q
 where e.recipient_id = u.user_id
   and q.name = e.queue_name
   and q.owner = e.queue_owner
union all
select e.apply_name, e.queue_name, e.queue_owner, e.local_transaction_id,
       e.source_database, e.source_transaction_id,
       e.source_commit_scn, e.message_number, e.error_number,
       e.error_message, e.recipient_id, e.recipient_name, e.message_count
  from dba_apply_error e
 where e.recipient_id NOT IN (select user_id from dba_users));

CREATE OR REPLACE FORCE VIEW "ALL_APPLY_EXECUTE"("RULE_OWNER","RULE_NAME","EXECUTE_EVENT") AS 
select e."RULE_OWNER",e."RULE_NAME",e."EXECUTE_EVENT"
from dba_apply_execute e, ALL_RULES r
where e.rule_owner = r.rule_owner and e.rule_name = r.rule_name;

CREATE OR REPLACE FORCE VIEW "ALL_APPLY_KEY_COLUMNS"("OBJECT_OWNER","OBJECT_NAME","COLUMN_NAME","APPLY_DATABASE_LINK") AS 
select k.object_owner, k.object_name, k.column_name, k.apply_database_link
  from all_tab_columns a, dba_apply_key_columns k
 where k.object_owner = a.owner
   and k.object_name = a.table_name
   and k.column_name = a.column_name;

CREATE OR REPLACE FORCE VIEW "ALL_APPLY_PARAMETERS"("APPLY_NAME","PARAMETER","VALUE","SET_BY_USER") AS 
select pa.apply_name, pa.parameter, pa.value, pa.set_by_user
  from dba_apply_parameters pa, all_apply aa
 where pa.apply_name = aa.apply_name;

CREATE OR REPLACE FORCE VIEW "ALL_APPLY_PROGRESS"("APPLY_NAME","SOURCE_DATABASE","APPLIED_MESSAGE_NUMBER","OLDEST_MESSAGE_NUMBER","APPLY_TIME","APPLIED_MESSAGE_CREATE_TIME") AS 
select ap.apply_name, ap.source_database, ap.applied_message_number,
       ap.oldest_message_number, ap.apply_time, ap.applied_message_create_time
  from dba_apply_progress ap, all_apply a
 where ap.apply_name = a.apply_name;

CREATE OR REPLACE FORCE VIEW "ALL_APPLY_TABLE_COLUMNS"("OBJECT_OWNER","OBJECT_NAME","COLUMN_NAME","COMPARE_OLD_ON_DELETE","COMPARE_OLD_ON_UPDATE","APPLY_DATABASE_LINK") AS 
select do."OBJECT_OWNER",do."OBJECT_NAME",do."COLUMN_NAME",do."COMPARE_OLD_ON_DELETE",do."COMPARE_OLD_ON_UPDATE",do."APPLY_DATABASE_LINK"
  from all_tab_columns a, dba_apply_table_columns do
 where do.object_owner = a.owner
   and do.object_name = a.table_name
   and do.column_name = a.column_name;

CREATE OR REPLACE FORCE VIEW "ALL_ARGUMENTS"("OWNER","OBJECT_NAME","PACKAGE_NAME","OBJECT_ID","OVERLOAD","ARGUMENT_NAME","POSITION","SEQUENCE","DATA_LEVEL","DATA_TYPE","DEFAULT_VALUE","DEFAULT_LENGTH","IN_OUT","DATA_LENGTH","DATA_PRECISION","DATA_SCALE","RADIX","CHARACTER_SET_NAME","TYPE_OWNER","TYPE_NAME","TYPE_SUBNAME","TYPE_LINK","PLS_TYPE","CHAR_LENGTH","CHAR_USED") AS 
select
u.name, /* OWNER */
nvl(a.procedure$,o.name), /* OBJECT_NAME */
decode(a.procedure$,null,null, o.name), /* PACKAGE_NAME */
o.obj#, /* OBJECT_ID */
decode(a.overload#,0,null,a.overload#), /* OVERLOAD */
a.argument, /* ARGUMENT_NAME */
a.position#, /* POSITION */
a.sequence#, /* SEQUENCE */
a.level#, /* DATA_LEVEL */
decode(a.type#,  /* DATA_TYPE */
0, null,
1, decode(a.charsetform, 2, 'NVARCHAR2', 'VARCHAR2'),
2, decode(a.scale, -127, 'FLOAT', 'NUMBER'),
3, 'NATIVE INTEGER',
8, 'LONG',
9, decode(a.charsetform, 2, 'NCHAR VARYING', 'VARCHAR'),
11, 'ROWID',
12, 'DATE',
23, 'RAW',
24, 'LONG RAW',
29, 'BINARY_INTEGER',
69, 'ROWID',
96, decode(a.charsetform, 2, 'NCHAR', 'CHAR'),
100, 'BINARY_FLOAT',
101, 'BINARY_DOUBLE',
102, 'REF CURSOR',
104, 'UROWID',
105, 'MLSLABEL',
106, 'MLSLABEL',
110, 'REF',
111, 'REF',
112, decode(a.charsetform, 2, 'NCLOB', 'CLOB'),
113, 'BLOB', 114, 'BFILE', 115, 'CFILE',
121, 'OBJECT',
122, 'TABLE',
123, 'VARRAY',
178, 'TIME',
179, 'TIME WITH TIME ZONE',
180, 'TIMESTAMP',
181, 'TIMESTAMP WITH TIME ZONE',
231, 'TIMESTAMP WITH LOCAL TIME ZONE',
182, 'INTERVAL YEAR TO MONTH',
183, 'INTERVAL DAY TO SECOND',
250, 'PL/SQL RECORD',
251, 'PL/SQL TABLE',
252, 'PL/SQL BOOLEAN',
'UNDEFINED'),
default$, /* DEFAULT_VALUE */
deflength, /* DEFAULT_LENGTH */
decode(in_out,null,'IN',1,'OUT',2,'IN/OUT','Undefined'), /* IN_OUT */
length, /* DATA_LENGTH */
precision#, /* DATA_PRECISION */
decode(a.type#, 2, scale, 1, null, 96, null, scale), /* DATA_SCALE */
radix, /* RADIX */
decode(a.charsetform, 1, 'CHAR_CS',           /* CHARACTER_SET_NAME */
                      2, 'NCHAR_CS',
                      3, NLS_CHARSET_NAME(a.charsetid),
                      4, 'ARG:'||a.charsetid),
a.type_owner, /* TYPE_OWNER */
a.type_name, /* TYPE_NAME */
a.type_subname, /* TYPE_SUBNAME */
a.type_linkname, /* TYPE_LINK */
a.pls_type, /* PLS_TYPE */
decode(a.type#, 1, a.scale, 96, a.scale, 0), /* CHAR_LENGTH */
decode(a.type#,
        1, decode(bitand(a.properties, 128), 128, 'C', 'B'),
       96, decode(bitand(a.properties, 128), 128, 'C', 'B'), 0) /* CHAR_USED */
from obj$ o,argument$ a,user$ u
where o.obj# = a.obj#
and o.owner# = u.user#
and (owner# = userenv('SCHEMAID')
or exists
  (select null from v$enabledprivs where priv_number in (-144,-141))
or o.obj# in (select obj# from sys.objauth$ where grantee# in
  (select kzsrorol from x$kzsro) and privilege# = 12));

CREATE OR REPLACE FORCE VIEW "ALL_ASSOCIATIONS"("OBJECT_OWNER","OBJECT_NAME","COLUMN_NAME","OBJECT_TYPE","STATSTYPE_SCHEMA","STATSTYPE_NAME","DEF_SELECTIVITY","DEF_CPU_COST","DEF_IO_COST","DEF_NET_COST","INTERFACE_VERSION") AS 
select u.name, o.name, c.name,
         decode(a.property, 1, 'COLUMN', 2, 'TYPE', 3, 'PACKAGE', 4,
                'FUNCTION', 5, 'INDEX', 6, 'INDEXTYPE', 'INVALID'),
         u1.name, o1.name,a.default_selectivity,
         a.default_cpu_cost, a.default_io_cost, a.default_net_cost,
         a.interface_version#
   from  sys.association$ a, sys.obj$ o, sys.user$ u,
         sys.obj$ o1, sys.user$ u1, sys.col$ c
   where a.obj#=o.obj# and o.owner#=u.user#
   AND   a.statstype#=o1.obj# (+) and o1.owner#=u1.user# (+)
   AND   a.obj# = c.obj#  (+)  and a.intcol# = c.intcol# (+)
   and (o.owner# = userenv('SCHEMAID')
        or
        o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or
       ( o.type# in (2)  /* table */
         and
         exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */,
                                        -42 /* ALTER ANY TABLE */)
                 )
       )
       or
       ( o.type# in (8, 9)   /* package or function */
         and
         exists (select null from v$enabledprivs
                  where priv_number in (-140 /* CREATE PROCEDURE */,
                                        -141 /* CREATE ANY PROCEDURE */,
                                        -142 /* ALTER ANY PROCEDURE */,
                                        -143 /* DROP ANY PROCEDURE */,
                                        -144 /* EXECUTE ANY PROCEDURE */)
                 )
       )
       or
       ( o.type# in (13)     /* type */
         and
         exists (select null from v$enabledprivs
                  where priv_number in (-180 /* CREATE TYPE */,
                                        -181 /* CREATE ANY TYPE */,
                                        -182 /* ALTER ANY TYPE */,
                                        -183 /* DROP ANY TYPE */,
                                        -184 /* EXECUTE ANY TYPE */)
                 )
       )
       or
       ( o.type# in (1)     /* index */
         and
         exists (select null from v$enabledprivs
                  where priv_number in (-71 /* CREATE ANY INDEX */,
                                        -72 /* ALTER ANY INDEX */,
                                        -73 /* DROP ANY INDEX */)
                 )
       )
       or
       ( o.type# in (32)     /* indextype */
         and
         exists (select null from v$enabledprivs
                  where priv_number in (-205 /* CREATE INDEXTYPE */,
                                        -206 /* CREATE ANY INDEXTYPE */,
                                        -207 /* ALTER ANY INDEXTYPE */,
                                        -208 /* DROP ANY INDEXTYPE */)
                 )
       )
    );

CREATE OR REPLACE FORCE VIEW "ALL_AUDIT_POLICIES"("OBJECT_SCHEMA","OBJECT_NAME","POLICY_NAME","POLICY_TEXT","POLICY_COLUMN","PF_SCHEMA","PF_PACKAGE","PF_FUNCTION","ENABLED","SEL","INS","UPD","DEL","AUDIT_TRAIL","POLICY_COLUMN_OPTIONS") AS 
SELECT OBJECT_SCHEMA, OBJECT_NAME, POLICY_NAME, POLICY_TEXT,  POLICY_COLUMN,
       PF_SCHEMA, PF_PACKAGE, PF_FUNCTION, ENABLED,
       SEL, INS, UPD, DEL, AUDIT_TRAIL, POLICY_COLUMN_OPTIONS
FROM DBA_AUDIT_POLICIES, ALL_TABLES t
WHERE
(OBJECT_SCHEMA = t.OWNER AND OBJECT_NAME = t.TABLE_NAME)
union
SELECT OBJECT_SCHEMA, OBJECT_NAME, POLICY_NAME, POLICY_TEXT,  POLICY_COLUMN,
       PF_SCHEMA, PF_PACKAGE, PF_FUNCTION, ENABLED,
       SEL, INS, UPD, DEL, AUDIT_TRAIL, POLICY_COLUMN_OPTIONS
FROM DBA_AUDIT_POLICIES, ALL_VIEWS v
WHERE
(OBJECT_SCHEMA = v.OWNER AND OBJECT_NAME = v.VIEW_NAME);

CREATE OR REPLACE FORCE VIEW "ALL_AUDIT_POLICY_COLUMNS"("OBJECT_SCHEMA","OBJECT_NAME","POLICY_NAME","POLICY_COLUMN") AS 
(select d.OBJECT_SCHEMA, d.OBJECT_NAME,
          d.POLICY_NAME, d.POLICY_COLUMN
from DBA_AUDIT_POLICY_COLUMNS d, ALL_TABLES t
where d.OBJECT_SCHEMA = t.OWNER AND d.OBJECT_NAME = t.TABLE_NAME)
union
(select d.OBJECT_SCHEMA, d.OBJECT_NAME,
          d.POLICY_NAME, d.POLICY_COLUMN
from DBA_AUDIT_POLICY_COLUMNS d, ALL_VIEWS v
where d.OBJECT_SCHEMA = v.OWNER AND d.OBJECT_NAME = v.VIEW_NAME);

CREATE OR REPLACE FORCE VIEW "ALL_AWS"("OWNER","AW_NUMBER","AW_NAME","AW_VERSION","PAGESPACES","GENERATIONS") AS 
SELECT u.name, a.awseq#, a.awname,
       max(decode(a.version, 0, '9.1', 1, '10.1', NULL)),
       count(unique(p.psnumber)), count(unique(p.psgen))
FROM aw$ a, ps$ p, sys.obj$ o, sys.user$ u
WHERE  a.owner#=u.user#
       and o.owner# = a.owner#
       and o.name = 'AW$' || a.awname and o.type#= 2 /* type for table */
       and a.awseq#=p.awseq#
       and (a.owner# in (userenv('SCHEMAID'), 1)   /* public objects */
            or
            o.obj# in ( select obj#  /* directly granted privileges */
                        from sys.objauth$
                        where grantee# in ( select kzsrorol from x$kzsro )
                      )
            or   /* user has system privilages */
              ( exists (select null from v$enabledprivs
                        where priv_number in (-45 /* LOCK ANY TABLE */,
                                              -47 /* SELECT ANY TABLE */,
                                              -48 /* INSERT ANY TABLE */,
                                              -49 /* UPDATE ANY TABLE */,
                                              -50 /* DELETE ANY TABLE */)
                        )
              )
            )
group by a.awseq#, a.awname, u.name;

CREATE OR REPLACE FORCE VIEW "ALL_AW_PS"("OWNER","AW_NUMBER","AW_NAME","PSNUMBER","GENERATIONS","MAXPAGES") AS 
SELECT u.name, a.awseq#, a.awname, p.psnumber, count(unique(p.psgen)), max(p.maxpages)
FROM aw$ a, ps$ p, user$ u, sys.obj$ o
WHERE  a.owner#=u.user#
       and o.owner# = a.owner#
       and o.name = 'AW$' || a.awname and o.type#= 2 /* type for table */
       and a.awseq#=p.awseq#
       and (a.owner# in (userenv('SCHEMAID'), 1)   /* public objects */
            or
            o.obj# in ( select obj#  /* directly granted privileges */
                        from sys.objauth$
                        where grantee# in ( select kzsrorol from x$kzsro )
                      )
            or   /* user has system privilages */
              ( exists (select null from v$enabledprivs
                        where priv_number in (-45 /* LOCK ANY TABLE */,
                                              -47 /* SELECT ANY TABLE */,
                                              -48 /* INSERT ANY TABLE */,
                                              -49 /* UPDATE ANY TABLE */,
                                              -50 /* DELETE ANY TABLE */)
                        )
              )
            )
group by a.awseq#, a.awname, u.name, p.psnumber;

CREATE OR REPLACE FORCE VIEW "ALL_BASE_TABLE_MVIEWS"("OWNER","MASTER","MVIEW_LAST_REFRESH_TIME","MVIEW_ID") AS 
select s."OWNER",s."MASTER",s."MVIEW_LAST_REFRESH_TIME",s."MVIEW_ID" from dba_base_table_mviews s, all_mview_logs a
where a.log_owner = s.owner
  and a.master = s.master;

CREATE OR REPLACE FORCE VIEW "ALL_CAPTURE"("CAPTURE_NAME","QUEUE_NAME","QUEUE_OWNER","RULE_SET_NAME","RULE_SET_OWNER","CAPTURE_USER","START_SCN","STATUS","CAPTURED_SCN","APPLIED_SCN","USE_DATABASE_LINK","FIRST_SCN","SOURCE_DATABASE","SOURCE_DBID","SOURCE_RESETLOGS_SCN","SOURCE_RESETLOGS_TIME","LOGMINER_ID","NEGATIVE_RULE_SET_NAME","NEGATIVE_RULE_SET_OWNER","MAX_CHECKPOINT_SCN","REQUIRED_CHECKPOINT_SCN","LOGFILE_ASSIGNMENT","STATUS_CHANGE_TIME","ERROR_NUMBER","ERROR_MESSAGE","VERSION","CAPTURE_TYPE") AS 
select c."CAPTURE_NAME",c."QUEUE_NAME",c."QUEUE_OWNER",c."RULE_SET_NAME",c."RULE_SET_OWNER",c."CAPTURE_USER",c."START_SCN",c."STATUS",c."CAPTURED_SCN",c."APPLIED_SCN",c."USE_DATABASE_LINK",c."FIRST_SCN",c."SOURCE_DATABASE",c."SOURCE_DBID",c."SOURCE_RESETLOGS_SCN",c."SOURCE_RESETLOGS_TIME",c."LOGMINER_ID",c."NEGATIVE_RULE_SET_NAME",c."NEGATIVE_RULE_SET_OWNER",c."MAX_CHECKPOINT_SCN",c."REQUIRED_CHECKPOINT_SCN",c."LOGFILE_ASSIGNMENT",c."STATUS_CHANGE_TIME",c."ERROR_NUMBER",c."ERROR_MESSAGE",c."VERSION",c."CAPTURE_TYPE"
  from dba_capture c, all_queues q
 where c.queue_name = q.name
   and c.queue_owner = q.owner
   and ((c.rule_set_owner is null and c.rule_set_name is null) or
        ((c.rule_set_owner, c.rule_set_name) in
          (select r.rule_set_owner, r.rule_set_name
             from all_rule_sets r)))
   and ((c.negative_rule_set_owner is null and
         c.negative_rule_set_name is null) or
        ((c.negative_rule_set_owner, c.negative_rule_set_name) in
          (select r.rule_set_owner, r.rule_set_name
             from all_rule_sets r)));

CREATE OR REPLACE FORCE VIEW "ALL_CAPTURE_EXTRA_ATTRIBUTES"("CAPTURE_NAME","ATTRIBUTE_NAME","INCLUDE","ROW_ATTRIBUTE","DDL_ATTRIBUTE") AS 
select e."CAPTURE_NAME",e."ATTRIBUTE_NAME",e."INCLUDE",e."ROW_ATTRIBUTE",e."DDL_ATTRIBUTE"
  from dba_capture_extra_attributes e, all_capture c
 where e.capture_name = c.capture_name;

CREATE OR REPLACE FORCE VIEW "ALL_CAPTURE_PARAMETERS"("CAPTURE_NAME","PARAMETER","VALUE","SET_BY_USER") AS 
select cp.capture_name, cp.parameter, cp.value, cp.set_by_user
  from dba_capture_parameters cp, all_capture ac
 where cp.capture_name = ac.capture_name;

CREATE OR REPLACE FORCE VIEW "ALL_CAPTURE_PREPARED_DATABASE"("TIMESTAMP") AS 
select "TIMESTAMP" from DBA_CAPTURE_PREPARED_DATABASE;

CREATE OR REPLACE FORCE VIEW "ALL_CAPTURE_PREPARED_SCHEMAS"("SCHEMA_NAME","TIMESTAMP") AS 
select s.schema_name, s.timestamp
  from dba_capture_prepared_schemas s, all_users u
 where s.schema_name = u.username;

CREATE OR REPLACE FORCE VIEW "ALL_CAPTURE_PREPARED_TABLES"("TABLE_OWNER","TABLE_NAME","SCN","TIMESTAMP") AS 
select pt.table_owner, pt.table_name, pt.scn, pt.timestamp
  from all_tables at, dba_capture_prepared_tables pt
  where pt.table_name = at.table_name
    and pt.table_owner = at.owner;

CREATE OR REPLACE FORCE VIEW "ALL_CATALOG"("OWNER","TABLE_NAME","TABLE_TYPE") AS 
select u.name, o.name,
       decode(o.type#, 0, 'NEXT OBJECT', 1, 'INDEX', 2, 'TABLE', 3, 'CLUSTER',
                      4, 'VIEW', 5, 'SYNONYM', 6, 'SEQUENCE', 'UNDEFINED')
from sys.user$ u, sys.obj$ o
where o.owner# = u.user#
  and ((o.type# in (4, 5, 6))
       or
       (o.type# = 2     /* tables, excluding iot - overflow and nested tables */
        and
        not exists (select null
                      from sys.tab$ t
                     where t.obj# = o.obj#
                       and (bitand(t.property, 512) = 512 or
                            bitand(t.property, 8192) = 8192))))
  and o.linkname is null
  and (o.owner# in (userenv('SCHEMAID'), 1)   /* public objects */
       or
       obj# in ( select obj#  /* directly granted privileges */
                 from sys.objauth$
                 where grantee# in ( select kzsrorol
                                      from x$kzsro
                                    )
                )
       or
       (
          o.type# in (2, 4, 5) /* table, view, synonym */
          and
          exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */))
       )
       or
       ( o.type# = 6 /* sequence */
         and
         exists (select null from v$enabledprivs
                 where priv_number = -109 /* SELECT ANY SEQUENCE */)));

CREATE OR REPLACE FORCE VIEW "ALL_CLUSTERS"("OWNER","CLUSTER_NAME","TABLESPACE_NAME","PCT_FREE","PCT_USED","KEY_SIZE","INI_TRANS","MAX_TRANS","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENTS","MAX_EXTENTS","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","AVG_BLOCKS_PER_KEY","CLUSTER_TYPE","FUNCTION","HASHKEYS","DEGREE","INSTANCES","CACHE","BUFFER_POOL","SINGLE_TABLE","DEPENDENCIES") AS 
select u.name, o.name, ts.name,
          mod(c.pctfree$, 100),
          decode(bitand(ts.flags, 32), 32, to_number(NULL), c.pctused$),
          c.size$,c.initrans,c.maxtrans,
          s.iniexts * ts.blocksize,
          decode(bitand(ts.flags, 3), 1, to_number(NULL),
                               s.extsize * ts.blocksize),
          s.minexts, s.maxexts,
          decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extpct),
          decode(bitand(ts.flags, 32), 32, to_number(NULL),
           decode(s.lists, 0, 1, s.lists)),
          decode(bitand(ts.flags, 32), 32, to_number(NULL),
           decode(s.groups, 0, 1, s.groups)),
          c.avgchn, decode(c.hashkeys, 0, 'INDEX', 'HASH'),
          decode(c.hashkeys, 0, NULL,
                 decode(c.func, 0, 'COLUMN', 1, 'DEFAULT',
                                2, 'HASH EXPRESSION', 3, 'DEFAULT2', NULL)),
          c.hashkeys,
          lpad(decode(c.degree, 32767, 'DEFAULT', nvl(c.degree,1)),10),
          lpad(decode(c.instances, 32767, 'DEFAULT', nvl(c.instances,1)),10),
          lpad(decode(bitand(c.flags, 8), 8, 'Y', 'N'), 5),
          decode(s.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL),
          lpad(decode(bitand(c.flags, 65536), 65536, 'Y', 'N'), 5),
          decode(bitand(c.flags, 8388608), 8388608, 'ENABLED', 'DISABLED')
from sys.user$ u, sys.ts$ ts, sys.seg$ s, sys.clu$ c, sys.obj$ o
where o.owner# = u.user#
  and o.obj#   = c.obj#
  and c.ts#    = ts.ts#
  and c.ts#    = s.ts#
  and c.file#  = s.file#
  and c.block# = s.block#
  and (o.owner# = userenv('SCHEMAID')
       or  /* user has system privilages */
         exists (select null from v$enabledprivs
                 where priv_number in (-61 /* CREATE ANY CLUSTER */,
                                       -62 /* ALTER ANY CLUSTER */,
                                       -63 /* DROP ANY CLUSTER */ )
                )
      );

CREATE OR REPLACE FORCE VIEW "ALL_CLUSTER_HASH_EXPRESSIONS"("OWNER","CLUSTER_NAME","HASH_EXPRESSION") AS 
select us.name, o.name, c.condition
from sys.cdef$ c, sys.user$ us, sys.obj$ o
where c.type#   = 8
and   c.obj#   = o.obj#
and   us.user# = o.owner#
and   ( us.user# = userenv('SCHEMAID')
        or  /* user has system privilages */
           exists (select null from v$enabledprivs
               where priv_number in (-61 /* CREATE ANY CLUSTER */,
                                     -62 /* ALTER ANY CLUSTER */,
                                     -63 /* DROP ANY CLUSTER */ )
                  )
      );

CREATE OR REPLACE FORCE VIEW "ALL_COLL_TYPES"("OWNER","TYPE_NAME","COLL_TYPE","UPPER_BOUND","ELEM_TYPE_MOD","ELEM_TYPE_OWNER","ELEM_TYPE_NAME","LENGTH","PRECISION","SCALE","CHARACTER_SET_NAME","ELEM_STORAGE","NULLS_STORED") AS 
select u.name, o.name, co.name, c.upper_bound,
       decode(bitand(c.properties, 32768), 32768, 'REF',
              decode(bitand(c.properties, 16384), 16384, 'POINTER')),
       nvl2(c.synobj#, (select u.name from user$ u, obj$ o
            where o.owner#=u.user# and o.obj#=c.synobj#),
            decode(bitand(et.properties, 64), 64, null, eu.name)),
       nvl2(c.synobj#, (select o.name from obj$ o where o.obj#=c.synobj#),
            decode(et.typecode,
                   52, decode(c.charsetform, 2, 'NVARCHAR2', eo.name),
                   53, decode(c.charsetform, 2, 'NCHAR', eo.name),
                   54, decode(c.charsetform, 2, 'NCHAR VARYING', eo.name),
                   61, decode(c.charsetform, 2, 'NCLOB', eo.name),
                   eo.name)),
       c.length, c.precision, c.scale,
       decode(c.charsetform, 1, 'CHAR_CS',
                             2, 'NCHAR_CS',
                             3, NLS_CHARSET_NAME(c.charsetid),
                             4, 'ARG:'||c.charsetid),
       decode(bitand(c.properties, 131072), 131072, 'FIXED',
              decode(bitand(c.properties, 262144), 262144, 'VARYING')),
       decode(bitand(c.properties, 65536), 65536, 'NO', 'YES')
from sys.user$ u, sys.obj$ o, sys.collection$ c, sys.obj$ co,
     sys.obj$ eo, sys.user$ eu, sys.type$ et
where o.owner# = u.user#
  and o.type# <> 10 -- must not be invalid
  and o.oid$ = c.toid
  and o.subname IS NULL -- only the most recent version
  and c.coll_toid = co.oid$
  and c.elem_toid = eo.oid$
  and eo.owner# = eu.user#
  and c.elem_toid = et.tvoid
  and (o.owner# = userenv('SCHEMAID')
       or
       o.obj# in (select oa.obj#
                  from sys.objauth$ oa
                  where grantee# in (select kzsrorol
                                     from x$kzsro))
       or /* user has system privileges */
       exists (select null from v$enabledprivs
               where priv_number in (-184 /* EXECUTE ANY TYPE */,
                                     -181 /* CREATE ANY TYPE */)));

CREATE OR REPLACE FORCE VIEW "ALL_COL_COMMENTS"("OWNER","TABLE_NAME","COLUMN_NAME","COMMENTS") AS 
select /*+ rule */ u.name, o.name, c.name, co.comment$
from sys.obj$ o, sys.col$ c, sys.user$ u, sys.com$ co
where o.owner# = u.user#
  and o.type# in (2, 4, 5)
  and o.obj# = c.obj#
  and c.obj# = co.obj#(+)
  and c.intcol# = co.col#(+)
  and bitand(c.property, 32) = 0 /* not hidden column */
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
         (select obj#
          from sys.objauth$
          where grantee# in ( select kzsrorol
                              from x$kzsro
                            )
          )
       or
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */))
      );

CREATE OR REPLACE FORCE VIEW "ALL_COL_PRIVS"("GRANTOR","GRANTEE","TABLE_SCHEMA","TABLE_NAME","COLUMN_NAME","PRIVILEGE","GRANTABLE") AS 
select ur.name, ue.name, u.name, o.name, c.name, tpm.name,
       decode(mod(oa.option$,2), 1, 'YES', 'NO')
from sys.objauth$ oa, sys.obj$ o, sys.user$ u, sys.user$ ur, sys.user$ ue,
     sys.col$ c, table_privilege_map tpm
where oa.obj# = o.obj#
  and oa.grantor# = ur.user#
  and oa.grantee# = ue.user#
  and u.user# = o.owner#
  and oa.obj# = c.obj#
  and oa.col# = c.col#
  and bitand(c.property, 32) = 0 /* not hidden column */
  and oa.col# is not null
  and oa.privilege# = tpm.privilege
  and (oa.grantor# = userenv('SCHEMAID') or
       oa.grantee# in (select kzsrorol from x$kzsro) or
       o.owner# = userenv('SCHEMAID'));

CREATE OR REPLACE FORCE VIEW "ALL_COL_PRIVS_MADE"("GRANTEE","OWNER","TABLE_NAME","COLUMN_NAME","GRANTOR","PRIVILEGE","GRANTABLE") AS 
select ue.name, u.name, o.name, c.name, ur.name, tpm.name,
       decode(mod(oa.option$,2), 1, 'YES', 'NO')
from sys.objauth$ oa, sys.obj$ o, sys.user$ u, sys.user$ ur, sys.user$ ue,
     sys.col$ c, table_privilege_map tpm
where oa.obj# = o.obj#
  and oa.grantor# = ur.user#
  and oa.grantee# = ue.user#
  and u.user# = o.owner#
  and oa.obj# = c.obj#
  and oa.col# = c.col#
  and bitand(c.property, 32) = 0 /* not hidden column */
  and oa.col# is not null
  and oa.privilege# = tpm.privilege
  and userenv('SCHEMAID') in (o.owner#, oa.grantor#);

CREATE OR REPLACE FORCE VIEW "ALL_COL_PRIVS_RECD"("GRANTEE","OWNER","TABLE_NAME","COLUMN_NAME","GRANTOR","PRIVILEGE","GRANTABLE") AS 
select ue.name, u.name, o.name, c.name, ur.name, tpm.name,
       decode(mod(oa.option$,2), 1, 'YES', 'NO')
from sys.objauth$ oa, sys.obj$ o, sys.user$ u, sys.user$ ur, sys.user$ ue,
     sys.col$ c, table_privilege_map tpm
where oa.obj# = o.obj#
  and oa.grantor# = ur.user#
  and oa.grantee# = ue.user#
  and u.user# = o.owner#
  and oa.obj# = c.obj#
  and oa.col# = c.col#
  and bitand(c.property, 32) = 0 /* not hidden column */
  and oa.col# is not null
  and oa.privilege# = tpm.privilege
  and oa.grantee# in (select kzsrorol from x$kzsro);

CREATE OR REPLACE FORCE VIEW "ALL_CONSTRAINTS"("OWNER","CONSTRAINT_NAME","CONSTRAINT_TYPE","TABLE_NAME","SEARCH_CONDITION","R_OWNER","R_CONSTRAINT_NAME","DELETE_RULE","STATUS","DEFERRABLE","DEFERRED","VALIDATED","GENERATED","BAD","RELY","LAST_CHANGE","INDEX_OWNER","INDEX_NAME","INVALID","VIEW_RELATED") AS 
select ou.name, oc.name,
       decode(c.type#, 1, 'C', 2, 'P', 3, 'U',
              4, 'R', 5, 'V', 6, 'O', 7,'C', '?'),
       o.name, c.condition, ru.name, rc.name,
       decode(c.type#, 4,
              decode(c.refact, 1, 'CASCADE', 2, 'SET NULL', 'NO ACTION'),
              NULL),
       decode(c.type#, 5, 'ENABLED',
              decode(c.enabled, NULL, 'DISABLED', 'ENABLED')),
       decode(bitand(c.defer, 1), 1, 'DEFERRABLE', 'NOT DEFERRABLE'),
       decode(bitand(c.defer, 2), 2, 'DEFERRED', 'IMMEDIATE'),
       decode(bitand(c.defer, 4), 4, 'VALIDATED', 'NOT VALIDATED'),
       decode(bitand(c.defer, 8), 8, 'GENERATED NAME', 'USER NAME'),
       decode(bitand(c.defer,16),16, 'BAD', null),
       decode(bitand(c.defer,32),32, 'RELY', null),
       c.mtime,
       decode(c.type#, 2, ui.name, 3, ui.name, null),
       decode(c.type#, 2, oi.name, 3, oi.name, null),
       decode(bitand(c.defer, 256), 256,
              decode(c.type#, 4,
                     case when (bitand(c.defer, 128) = 128
                                or o.status in (3, 5)
                                or ro.status in (3, 5)) then 'INVALID'
                          else null end,
                     case when (bitand(c.defer, 128) = 128
                                or o.status in (3, 5)) then 'INVALID'
                          else null end
                    ),
              null),
       decode(bitand(c.defer, 256), 256, 'DEPEND ON VIEW', null)
from sys.con$ oc, sys.con$ rc, sys.user$ ou, sys.user$ ru, sys.obj$ ro,
     sys.obj$ o, sys.cdef$ c, sys.obj$ oi, sys.user$ ui
where oc.owner# = ou.user#
  and oc.con# = c.con#
  and c.obj# = o.obj#
  and c.type# != 8
  and c.type# != 12       /* don't include log groups */
  and c.rcon# = rc.con#(+)
  and c.enabled = oi.obj#(+)
  and oi.obj# = ui.user#(+)
  and rc.owner# = ru.user#(+)
  and c.robj# = ro.obj#(+)
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in (select obj#
                     from sys.objauth$
                     where grantee# in ( select kzsrorol
                                         from x$kzsro
                                       )
                    )
        or /* user has system privileges */
          exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                  )
      );

CREATE OR REPLACE FORCE VIEW "ALL_CONS_COLUMNS"("OWNER","CONSTRAINT_NAME","TABLE_NAME","COLUMN_NAME","POSITION") AS 
select u.name, c.name, o.name,
       decode(ac.name, null, col.name, ac.name), cc.pos#
from sys.user$ u, sys.con$ c, sys.col$ col, sys.ccol$ cc, sys.cdef$ cd,
     sys.obj$ o, sys.attrcol$ ac
where c.owner# = u.user#
  and c.con# = cd.con#
  and cd.type# != 12       /* don't include log groups */
  and cd.con# = cc.con#
  and cc.obj# = col.obj#
  and cc.intcol# = col.intcol#
  and cc.obj# = o.obj#
  and (c.owner# = userenv('SCHEMAID')
       or cd.obj# in (select obj#
                      from sys.objauth$
                      where grantee# in ( select kzsrorol
                                         from x$kzsro
                                       )
                     )
        or /* user has system privileges */
          exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                  )
      )
  and col.obj# = ac.obj#(+)
  and col.intcol# = ac.intcol#(+);

CREATE OR REPLACE FORCE VIEW "ALL_CONS_OBJ_COLUMNS"("OWNER","TABLE_NAME","COLUMN_NAME","CONS_TYPE_OWNER","CONS_TYPE_NAME","CONS_TYPE_ONLY") AS 
select uc.name, oc.name, c.name, ut.name, ot.name,
       lpad(decode(bitand(sc.flags, 2), 2, 'Y', 'N'), 15)
from sys.user$ uc, sys.obj$ oc, sys.col$ c, sys.user$ ut, sys.obj$ ot,
     sys.subcoltype$ sc
where oc.owner# = uc.user#
  and bitand(sc.flags, 1) = 1      /* Type is specified in the IS OF clause */
  and oc.obj#=sc.obj#
  and oc.obj#=c.obj#
  and c.intcol#=sc.intcol#
  and sc.toid=ot.oid$
  and ot.owner#=ut.user#
  and bitand(c.property,32768) != 32768                /* not unused column */
  and not exists (select null                  /* Doesn't exist in attrcol$ */
                  from sys.attrcol$ ac
                  where ac.intcol#=sc.intcol#
                        and ac.obj#=sc.obj#)
  and (oc.owner# = userenv('SCHEMAID')
       or oc.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      )
union all
select uc.name, oc.name, ac.name, ut.name, ot.name,
       lpad(decode(bitand(sc.flags, 2), 2, 'Y', 'N'), 15)
from sys.user$ uc, sys.obj$ oc, sys.col$ c, sys.user$ ut, sys.obj$ ot,
     sys.subcoltype$ sc, sys.attrcol$ ac
where oc.owner# = uc.user#
  and bitand(sc.flags, 1) = 1      /* Type is specified in the IS OF clause */
  and oc.obj#=sc.obj#
  and oc.obj#=c.obj#
  and oc.obj#=ac.obj#
  and c.intcol#=sc.intcol#
  and ac.intcol#=sc.intcol#
  and sc.toid=ot.oid$
  and ot.owner#=ut.user#
  and bitand(c.property,32768) != 32768                /* not unused column */
  and (oc.owner# = userenv('SCHEMAID')
       or oc.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_CONTEXT"("NAMESPACE","SCHEMA","PACKAGE") AS 
select o.name, c.schema, c.package
from  context$ c, obj$ o
where exists ( select null
               from v$context  v
               where v.namespace = o.name
               and o.obj# = c.obj#
               and o.type# = 44
             );

CREATE OR REPLACE FORCE VIEW "ALL_DB_LINKS"("OWNER","DB_LINK","USERNAME","HOST","CREATED") AS 
select u.name, l.name, l.userid, l.host, l.ctime
from sys.link$ l, sys.user$ u
where l.owner# in ( select kzsrorol from x$kzsro )
  and l.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "ALL_DEF_AUDIT_OPTS"("ALT","AUD","COM","DEL","GRA","IND","INS","LOC","REN","SEL","UPD","REF","EXE","FBK") AS 
select substr(t.audit$, 1, 1) || '/' || substr(t.audit$, 2, 1),
       substr(t.audit$, 3, 1) || '/' || substr(t.audit$, 4, 1),
       substr(t.audit$, 5, 1) || '/' || substr(t.audit$, 6, 1),
       substr(t.audit$, 7, 1) || '/' || substr(t.audit$, 8, 1),
       substr(t.audit$, 9, 1) || '/' || substr(t.audit$, 10, 1),
       substr(t.audit$, 11, 1) || '/' || substr(t.audit$, 12, 1),
       substr(t.audit$, 13, 1) || '/' || substr(t.audit$, 14, 1),
       substr(t.audit$, 15, 1) || '/' || substr(t.audit$, 16, 1),
       substr(t.audit$, 17, 1) || '/' || substr(t.audit$, 18, 1),
       substr(t.audit$, 19, 1) || '/' || substr(t.audit$, 20, 1),
       substr(t.audit$, 21, 1) || '/' || substr(t.audit$, 22, 1),
       '-/-',                                            /* dummy REF column */
       substr(t.audit$, 25, 1) || '/' || substr(t.audit$, 26, 1),
       substr(t.audit$, 23, 1) || '/' || substr(t.audit$, 24, 1)
from sys.obj$ o, sys.tab$ t
where o.obj# = t.obj#
  and o.owner# = 0
  and o.name = '_default_auditing_options_';

CREATE OR REPLACE FORCE VIEW "ALL_DEPENDENCIES"("OWNER","NAME","TYPE","REFERENCED_OWNER","REFERENCED_NAME","REFERENCED_TYPE","REFERENCED_LINK_NAME","DEPENDENCY_TYPE") AS 
select u.name, o.name,
       decode(o.type#, 0, 'NEXT OBJECT', 1, 'INDEX', 2, 'TABLE', 3, 'CLUSTER',
                      4, 'VIEW', 5, 'SYNONYM', 6, 'SEQUENCE', 7, 'PROCEDURE',
                      8, 'FUNCTION', 9, 'PACKAGE', 10, 'NON-EXISTENT',
                      11, 'PACKAGE BODY', 12, 'TRIGGER',
                      13, 'TYPE', 14, 'TYPE BODY', 22, 'LIBRARY',
                      28, 'JAVA SOURCE', 29, 'JAVA CLASS',
                      32, 'INDEXTYPE', 33, 'OPERATOR',
                      42, 'MATERIALIZED VIEW', 43, 'DIMENSION',
                      46, 'RULE SET', 55, 'XML SCHEMA', 56, 'JAVA DATA',
                      59, 'RULE', 62, 'EVALUATION CONTXT',
                      'UNDEFINED'),
       decode(po.linkname, null, pu.name, po.remoteowner), po.name,
       decode(po.type#, 0, 'NEXT OBJECT', 1, 'INDEX', 2, 'TABLE', 3, 'CLUSTER',
                      4, 'VIEW', 5, 'SYNONYM', 6, 'SEQUENCE', 7, 'PROCEDURE',
                      8, 'FUNCTION', 9, 'PACKAGE', 10, 'NON-EXISTENT',
                      11, 'PACKAGE BODY', 12, 'TRIGGER',
                      13, 'TYPE', 14, 'TYPE BODY', 22, 'LIBRARY',
                      28, 'JAVA SOURCE', 29, 'JAVA CLASS',
                      32, 'INDEXTYPE', 33, 'OPERATOR',
                      42, 'MATERIALIZED VIEW', 43, 'DIMENSION',
                      46, 'RULE SET', 55, 'XML SCHEMA', 56, 'JAVA DATA',
                      59, 'RULE', 62, 'EVALUATION CONTXT',
                      'UNDEFINED'),
       po.linkname,
       decode(bitand(d.property, 3), 2, 'REF', 'HARD')
from sys.obj$ o, sys.disk_and_fixed_objects po, sys.dependency$ d, sys.user$ u,
  sys.user$ pu
where o.obj# = d.d_obj#
  and o.owner# = u.user#
  and po.obj# = d.p_obj#
  and po.owner# = pu.user#
  and
  (
    o.owner# in (userenv('SCHEMAID'), 1 /* PUBLIC */)
    or
    (
      (
         (
          (o.type# = 7 or o.type# = 8 or o.type# = 9 or
           o.type# = 28 or o.type# = 29 or o.type# = 56)
          and
          o.obj# in (select obj# from sys.objauth$
                     where grantee# in (select kzsrorol from x$kzsro)
                       and privilege#  = 12 /* EXECUTE */)
        )
        or
        (
          o.type# = 4
          and
          o.obj# in (select obj# from sys.objauth$
                     where grantee# in (select kzsrorol from x$kzsro)
                       and privilege# in (3 /* DELETE */,   6 /* INSERT */,
                                                7 /* LOCK */,     9 /* SELECT */,
                                          10 /* UPDATE */))
        )
        or
        exists
        (
          select null from sys.sysauth$
          where grantee# in (select kzsrorol from x$kzsro)
          and
          (
            (
              /* procedure */
              (o.type# = 7 or o.type# = 8 or o.type# = 9 or
               o.type# = 28 or o.type# = 29 or o.type# = 56)
              and
              (
                privilege# = -144 /* EXECUTE ANY PROCEDURE */
                or
                privilege# = -141 /* CREATE ANY PROCEDURE */
              )
            )
            or
            (
              /* trigger */
              o.type# = 12 and
              privilege# = -152 /* CREATE ANY TRIGGER */
            )
            or
            (
              /* package body */
              o.type# = 11 and
              privilege# = -141 /* CREATE ANY PROCEDURE */
            )
            or
            (
              /* view */
              o.type# = 4
              and
              (
                privilege# in     ( -91 /* CREATE ANY VIEW */,
                                    -45 /* LOCK ANY TABLE */,
                                    -47 /* SELECT ANY TABLE */,
                                    -48 /* INSERT ANY TABLE */,
                                    -49 /* UPDATE ANY TABLE */,
                                    -50 /* DELETE ANY TABLE */)
              )
            )
            or
            (
              /* type */
              o.type# = 13
              and
              (
                privilege# = -184 /* EXECUTE ANY TYPE */
                or
                privilege# = -181 /* CREATE ANY TYPE */
              )
            )
            or
            (
              /* type body */
              o.type# = 14 and
              privilege# = -181 /* CREATE ANY TYPE */
            )
          )
        )
      )
    )
    /* don't worry about tables, sequences, synonyms since they cannot */
    /* depend on anything */
  );

CREATE OR REPLACE FORCE VIEW "ALL_DIMENSIONS"("OWNER","DIMENSION_NAME","INVALID","COMPILE_STATE","REVISION") AS 
select u.name, o.name,
       decode(o.status, 5, 'Y', 'N'),
       decode(o.status, 1, 'VALID', 5, 'NEEDS_COMPILE', 'ERROR'),
       1                  /* Metadata revision number */
from sys.dim$ d, sys.obj$ o, sys.user$ u
where o.owner# = u.user#
  and o.obj# = d.obj#
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-215 /* CREATE ANY DIMENSION */,
                                       -216 /* ALTER ANY DIMENSION */,
                                       -217 /* DROP ANY DIMENSION */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_DIM_ATTRIBUTES"("OWNER","DIMENSION_NAME","ATTRIBUTE_NAME","LEVEL_NAME","COLUMN_NAME","INFERRED") AS 
select u.name, o.name, da.attname, dl.levelname, c.name, 'N'
from sys.dimattr$ da, sys.obj$ o, sys.user$ u, sys.dimlevel$ dl, sys.col$ c
where da.dimobj# = o.obj#
  and o.owner# = u.user#
  and da.dimobj# = dl.dimobj#
  and da.levelid# = dl.levelid#
  and da.detailobj# = c.obj#
  and da.col# = c.intcol#
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-215 /* CREATE ANY DIMENSION */,
                                       -216 /* ALTER ANY DIMENSION */,
                                       -217 /* DROP ANY DIMENSION */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_DIM_CHILD_OF"("OWNER","DIMENSION_NAME","HIERARCHY_NAME","POSITION","CHILD_LEVEL_NAME","JOIN_KEY_ID","PARENT_LEVEL_NAME") AS 
select u.name, o.name, h.hiername, chl.pos#,
       cdl.levelname,
       decode(phl.joinkeyid#, 0, NULL, phl.joinkeyid#),
       pdl.levelname
from sys.obj$ o, sys.user$ u, sys.hier$ h,
     sys.hierlevel$ phl, sys.hierlevel$ chl,
     sys.dimlevel$ pdl,  sys.dimlevel$ cdl
where phl.dimobj# = o.obj#
  and o.owner# = u.user#
  and phl.dimobj# = h.dimobj#
  and phl.hierid# = h.hierid#
  and phl.dimobj# = pdl.dimobj#
  and phl.levelid# = pdl.levelid#
  and phl.dimobj# = chl.dimobj#
  and phl.hierid# = chl.hierid#
  and phl.pos# = chl.pos# + 1
  and chl.dimobj# = cdl.dimobj#
  and chl.levelid# = cdl.levelid#
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-215 /* CREATE ANY DIMENSION */,
                                       -216 /* ALTER ANY DIMENSION */,
                                       -217 /* DROP ANY DIMENSION */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_DIM_HIERARCHIES"("OWNER","DIMENSION_NAME","HIERARCHY_NAME") AS 
select u.name, o.name, h.hiername
from sys.hier$ h, sys.obj$ o, sys.user$ u
where h.dimobj# = o.obj#
  and o.owner# = u.user#
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-215 /* CREATE ANY DIMENSION */,
                                       -216 /* ALTER ANY DIMENSION */,
                                       -217 /* DROP ANY DIMENSION */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_DIM_JOIN_KEY"("OWNER","DIMENSION_NAME","DIM_KEY_ID","LEVEL_NAME","KEY_POSITION","HIERARCHY_NAME","CHILD_JOIN_COLUMN") AS 
select u.name, o.name, djk.joinkeyid#, dl.levelname,
       djk.keypos#, h.hiername, c.name
from sys.dimjoinkey$ djk, sys.obj$ o, sys.user$ u,
     sys.dimlevel$ dl, sys.hier$ h, sys.col$ c
where djk.dimobj# = o.obj#
  and o.owner# = u.user#
  and djk.dimobj# = dl.dimobj#
  and djk.levelid# = dl.levelid#
  and djk.dimobj# = h.dimobj#
  and djk.hierid# = h.hierid#
  and djk.detailobj# = c.obj#
  and djk.col# = c.intcol#
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-215 /* CREATE ANY DIMENSION */,
                                       -216 /* ALTER ANY DIMENSION */,
                                       -217 /* DROP ANY DIMENSION */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_DIM_LEVELS"("OWNER","DIMENSION_NAME","LEVEL_NAME","NUM_COLUMNS","DETAILOBJ_OWNER","DETAILOBJ_NAME") AS 
select u.name, o.name, dl.levelname,
       temp.num_col,
       u1.name, o1.name
from (select dlk.dimobj#, dlk.levelid#, dlk.detailobj#,
             COUNT(*) as num_col
      from sys.dimlevelkey$ dlk
      group by dlk.dimobj#, dlk.levelid#, dlk.detailobj#) temp,
      sys.dimlevel$ dl, sys.obj$ o, sys.user$ u,
      sys.obj$ o1, sys.user$ u1
where dl.dimobj# = o.obj#   and
      o.owner# = u.user#    and
      dl.dimobj# = temp.dimobj# and
      dl.levelid# = temp.levelid# and
      temp.detailobj# = o1.obj# and
      o1.owner# = u1.user# and
      (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-215 /* CREATE ANY DIMENSION */,
                                       -216 /* ALTER ANY DIMENSION */,
                                       -217 /* DROP ANY DIMENSION */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_DIM_LEVEL_KEY"("OWNER","DIMENSION_NAME","LEVEL_NAME","KEY_POSITION","COLUMN_NAME") AS 
select u.name, o.name, dl.levelname, dlk.keypos#, c.name
from sys.dimlevelkey$ dlk, sys.obj$ o, sys.user$ u, sys.dimlevel$ dl,
     sys.col$ c
where dlk.dimobj# = o.obj#
  and o.owner# = u.user#
  and dlk.dimobj# = dl.dimobj#
  and dlk.levelid# = dl.levelid#
  and dlk.detailobj# = c.obj#
  and dlk.col# = c.intcol#
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-215 /* CREATE ANY DIMENSION */,
                                       -216 /* ALTER ANY DIMENSION */,
                                       -217 /* DROP ANY DIMENSION */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_DIRECTORIES"("OWNER","DIRECTORY_NAME","DIRECTORY_PATH") AS 
select u.name, o.name, d.os_path
from sys.user$ u, sys.obj$ o, sys.dir$ d
where u.user# = o.owner#
  and o.obj# = d.obj#
  and ( o.owner# =  userenv('SCHEMAID')
        or o.obj# in
           (select oa.obj#
            from sys.objauth$ oa
            where grantee# in (select kzsrorol
                               from x$kzsro
                              )
           )
        or exists (select null from v$enabledprivs
                   where priv_number in (-177, /* CREATE ANY DIRECTORY */
                                         -178  /* DROP ANY DIRECTORY */)
                  )
      );

CREATE OR REPLACE FORCE VIEW "ALL_ERRORS"("OWNER","NAME","TYPE","SEQUENCE","LINE","POSITION","TEXT","ATTRIBUTE","MESSAGE_NUMBER") AS 
select u.name, o.name,
decode(o.type#, 4, 'VIEW', 7, 'PROCEDURE', 8, 'FUNCTION', 9, 'PACKAGE',
               11, 'PACKAGE BODY', 12, 'TRIGGER', 13, 'TYPE', 14, 'TYPE BODY',
               22, 'LIBRARY', 28, 'JAVA SOURCE', 29, 'JAVA CLASS',
               43, 'DIMENSION', 'UNDEFINED'),
  e.sequence#, e.line, e.position#, e.text,
   decode(e.property, 0,'ERROR', 1, 'WARNING', 'UNDEFINED'), e.error#
from sys.obj$ o, sys.error$ e, sys.user$ u
where o.obj# = e.obj#
  and o.owner# = u.user#
  and o.type# in (4, 7, 8, 9, 11, 12, 13, 14, 22, 28, 29, 43)
  and
  (
    o.owner# in (userenv('SCHEMAID'), 1 /* PUBLIC */)
    or
    (
      (
        (
          (o.type# = 7 or o.type# = 8 or o.type# = 9 or o.type# = 13 or
           o.type# = 28 or o.type# = 29)
          and
          o.obj# in (select obj# from sys.objauth$
                     where grantee# in (select kzsrorol from x$kzsro)
                       and privilege#  = 12 /* EXECUTE */)
        )
        or
        (
          o.type# = 4
          and
          o.obj# in (select obj# from sys.objauth$
                     where grantee# in (select kzsrorol from x$kzsro)
                       and privilege# in (3 /* DELETE */,   6 /* INSERT */,
                                          7 /* LOCK */,     9 /* SELECT */,
                                          10 /* UPDATE */))
        )
        or
        exists
        (
          select null from sys.sysauth$
          where grantee# in (select kzsrorol from x$kzsro)
          and
          (
            (
              /* procedure */
              (o.type# = 7 or o.type# = 8 or o.type# = 9 or
               o.type# = 28 or o.type# = 29)
              and
              (
                privilege# = -144 /* EXECUTE ANY PROCEDURE */
                or
                privilege# = -141 /* CREATE ANY PROCEDURE */
              )
            )
            or
            (
              /* trigger */
              o.type# = 12 and
              privilege# = -152 /* CREATE ANY TRIGGER */
            )
            or
            (
              /* package body */
              o.type# = 11 and
              privilege# = -141 /* CREATE ANY PROCEDURE */
            )
            or
            (
              /* dimension */
              o.type# = 11 and
              privilege# = -215 /* CREATE ANY DIMENSION */
            )
            or
            (
              /* view */
              o.type# = 4
              and
              (
                privilege# in     ( -91 /* CREATE ANY VIEW */,
                                    -45 /* LOCK ANY TABLE */,
                                    -47 /* SELECT ANY TABLE */,
                                    -48 /* INSERT ANY TABLE */,
                                    -49 /* UPDATE ANY TABLE */,
                                    -50 /* DELETE ANY TABLE */)
              )
            )
            or
            (
              /* type */
              o.type# = 13
              and
              (
                privilege# = -184 /* EXECUTE ANY TYPE */
                or
                privilege# = -181 /* CREATE ANY TYPE */
              )
            )
            or
            (
              /* type body */
              o.type# = 14 and
              privilege# = -181 /* CREATE ANY TYPE */
            )
          )
        )
      )
    )
  );

CREATE OR REPLACE FORCE VIEW "ALL_EVALUATION_CONTEXTS"("EVALUATION_CONTEXT_OWNER","EVALUATION_CONTEXT_NAME","EVALUATION_FUNCTION","EVALUATION_CONTEXT_COMMENT") AS 
SELECT /*+ all_rows */
       u.name, o.name, ec.eval_func, ec.ec_comment
FROM   rule_ec$ ec, obj$ o, user$ u
WHERE  ec.obj# = o.obj# and
       (o.owner# in (USERENV('SCHEMAID'), 1 /* PUBLIC */) or
        o.obj# in (select oa.obj# from sys.objauth$ oa
                   where grantee# in (select kzsrorol from x$kzsro)) or
        exists (select null from v$enabledprivs where priv_number in (
                 -246, /* create any evaluation context */
                 -247, /* alter any evaluation context */
                 -248, /* drop any evaluation context */
                 -249  /* execute any evaluation context */))) and
       o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "ALL_EVALUATION_CONTEXT_TABLES"("EVALUATION_CONTEXT_OWNER","EVALUATION_CONTEXT_NAME","TABLE_ALIAS","TABLE_NAME") AS 
SELECT /*+ all_rows */
       u.name, o.name, ect.tab_alias, ect.tab_name
FROM   rec_tab$ ect, obj$ o, user$ u
WHERE  ect.ec_obj# = o.obj# and
       (o.owner# in (USERENV('SCHEMAID'), 1 /* PUBLIC */) or
        o.obj# in (select oa.obj# from sys.objauth$ oa
                   where grantee# in (select kzsrorol from x$kzsro)) or
        exists (select null from v$enabledprivs where priv_number in (
                 -246, /* create any evaluation context */
                 -247, /* alter any evaluation context */
                 -248, /* drop any evaluation context */
                 -249  /* execute any evaluation context */))) and
       o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "ALL_EVALUATION_CONTEXT_VARS"("EVALUATION_CONTEXT_OWNER","EVALUATION_CONTEXT_NAME","VARIABLE_NAME","VARIABLE_TYPE","VARIABLE_VALUE_FUNCTION","VARIABLE_METHOD_FUNCTION") AS 
SELECT /*+ all_rows */
       u.name, o.name, ecv.var_name, ecv.var_type, ecv.var_val_func,
       ecv.var_mthd_func
FROM   rec_var$ ecv, obj$ o, user$ u
WHERE  ecv.ec_obj# = o.obj# and
       (o.owner# in (USERENV('SCHEMAID'), 1 /* PUBLIC */) or
        o.obj# in (select oa.obj# from sys.objauth$ oa
                   where grantee# in (select kzsrorol from x$kzsro)) or
        exists (select null from v$enabledprivs where priv_number in (
                 -246, /* create any evaluation context */
                 -247, /* alter any evaluation context */
                 -248, /* drop any evaluation context */
                 -249  /* execute any evaluation context */))) and
       o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "ALL_EXTERNAL_LOCATIONS"("OWNER","TABLE_NAME","LOCATION","DIRECTORY_OWNER","DIRECTORY_NAME") AS 
select u.name, o.name, xl.name, 'SYS', nvl(xl.dir, xt.default_dir)
from sys.external_location$ xl, sys.user$ u, sys.obj$ o, sys.external_tab$ xt
where o.owner# = u.user#
  and o.obj#   = xl.obj#
  and o.obj#   = xt.obj#
  and ( o.owner# = userenv('SCHEMAID')
        or o.obj# in
        ( select oa.obj# from sys.objauth$ oa
          where grantee# in (select kzsrorol from x$kzsro)
        )
        or    /* user has system privileges */
          exists ( select null from v$enabledprivs
                   where priv_number in (-45 /* LOCK ANY TABLE */,
                                         -47 /* SELECT ANY TABLE */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_EXTERNAL_TABLES"("OWNER","TABLE_NAME","TYPE_OWNER","TYPE_NAME","DEFAULT_DIRECTORY_OWNER","DEFAULT_DIRECTORY_NAME","REJECT_LIMIT","ACCESS_TYPE","ACCESS_PARAMETERS","PROPERTY") AS 
select u.name, o.name, 'SYS', xt.type$, 'SYS', xt.default_dir,
       decode(xt.reject_limit, 2147483647, 'UNLIMITED', xt.reject_limit),
       decode(xt.par_type, 1, 'BLOB', 2, 'CLOB',       'UNKNOWN'),
       decode(xt.par_type, 1, NULL,   2, xt.param_clob, NULL),
       decode(xt.property, 2, 'REFERENCED', 1, 'ALL',     'UNKNOWN')
from sys.external_tab$ xt, sys.obj$ o, sys.user$ u
where o.owner# = u.user#
  and o.obj#   = xt.obj#
  and ( o.owner# = userenv('SCHEMAID')
        or o.obj# in
            ( select oa.obj# from sys.objauth$ oa
              where grantee# in (select kzsrorol from x$kzsro)
            )
        or    /* user has system privileges */
          exists ( select null from v$enabledprivs
                   where priv_number in (-45 /* LOCK ANY TABLE */,
                                         -47 /* SELECT ANY TABLE */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_INDEXES"("OWNER","INDEX_NAME","INDEX_TYPE","TABLE_OWNER","TABLE_NAME","TABLE_TYPE","UNIQUENESS","COMPRESSION","PREFIX_LENGTH","TABLESPACE_NAME","INI_TRANS","MAX_TRANS","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENTS","MAX_EXTENTS","PCT_INCREASE","PCT_THRESHOLD","INCLUDE_COLUMN","FREELISTS","FREELIST_GROUPS","PCT_FREE","LOGGING","BLEVEL","LEAF_BLOCKS","DISTINCT_KEYS","AVG_LEAF_BLOCKS_PER_KEY","AVG_DATA_BLOCKS_PER_KEY","CLUSTERING_FACTOR","STATUS","NUM_ROWS","SAMPLE_SIZE","LAST_ANALYZED","DEGREE","INSTANCES","PARTITIONED","TEMPORARY","GENERATED","SECONDARY","BUFFER_POOL","USER_STATS","DURATION","PCT_DIRECT_ACCESS","ITYP_OWNER","ITYP_NAME","PARAMETERS","GLOBAL_STATS","DOMIDX_STATUS","DOMIDX_OPSTATUS","FUNCIDX_STATUS","JOIN_INDEX","IOT_REDUNDANT_PKEY_ELIM","DROPPED") AS 
select u.name, o.name,
       decode(bitand(i.property, 16), 0, '', 'FUNCTION-BASED ') ||
        decode(i.type#, 1, 'NORMAL'||
                          decode(bitand(i.property, 4), 0, '', 4, '/REV'),
                      2, 'BITMAP', 3, 'CLUSTER', 4, 'IOT - TOP',
                      5, 'IOT - NESTED', 6, 'SECONDARY', 7, 'ANSI', 8, 'LOB',
                      9, 'DOMAIN'),
       iu.name, io.name, 'TABLE',
       decode(bitand(i.property, 1), 0, 'NONUNIQUE', 1, 'UNIQUE', 'UNDEFINED'),
       decode(bitand(i.flags, 32), 0, 'DISABLED', 32, 'ENABLED', null),
       i.spare2,
       decode(bitand(i.property, 34), 0,
           decode(i.type#, 9, null, ts.name), null),
       decode(bitand(i.property, 2),0, i.initrans, null),
       decode(bitand(i.property, 2),0, i.maxtrans, null),
       s.iniexts * ts.blocksize,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                             s.extsize * ts.blocksize),
       s.minexts, s.maxexts,
        decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                     s.extpct),
       decode(i.type#, 4, mod(i.pctthres$,256), NULL), i.trunccnt,
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
         decode(bitand(o.flags, 2), 2, 1, decode(s.lists, 0, 1, s.lists))),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
         decode(bitand(o.flags, 2), 2, 1, decode(s.groups, 0, 1, s.groups))),
       decode(bitand(i.property, 2),0,i.pctfree$,null),
       decode(bitand(i.property, 2), 2, NULL,
                decode(bitand(i.flags, 4), 0, 'YES', 'NO')),
       i.blevel, i.leafcnt, i.distkey, i.lblkkey, i.dblkkey, i.clufac,
       decode(bitand(i.property, 2), 2,
                   decode(i.type#, 9, decode(bitand(i.flags, 8),
                                        8, 'INPROGRS', 'VALID'), 'N/A'),
                     decode(bitand(i.flags, 1), 1, 'UNUSABLE',
                            decode(bitand(i.flags, 8), 8, 'INRPOGRS',
                                                            'VALID'))),
       rowcnt, samplesize, analyzetime,
       decode(i.degree, 32767, 'DEFAULT', nvl(i.degree,1)),
       decode(i.instances, 32767, 'DEFAULT', nvl(i.instances,1)),
       decode(bitand(i.property, 2), 2, 'YES', 'NO'),
       decode(bitand(o.flags, 2), 0, 'N', 2, 'Y', 'N'),
       decode(bitand(o.flags, 4), 0, 'N', 4, 'Y', 'N'),
       decode(bitand(o.flags, 16), 0, 'N', 16, 'Y', 'N'),
       decode(bitand(o.flags, 2), 2, 'DEFAULT',
             decode(s.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL)),
       decode(bitand(i.flags, 64), 0, 'NO', 'YES'),
       decode(bitand(o.flags, 2), 0, NULL,
           decode(bitand(i.property, 64), 64, 'SYS$SESSION', 'SYS$TRANSACTION')),
       decode(bitand(i.flags, 128), 128, mod(trunc(i.pctthres$/256),256),
              decode(i.type#, 4, mod(trunc(i.pctthres$/256),256), NULL)),
       itu.name, ito.name, i.spare4,
       decode(bitand(i.flags, 2048), 0, 'NO', 'YES'),
       decode(i.type#, 9, decode(o.status, 5, 'IDXTYP_INVLD',
                                           1, 'VALID'),  ''),
       decode(i.type#, 9, decode(bitand(i.flags, 16), 16, 'FAILED', 'VALID'), ''),
       decode(bitand(i.property, 16), 0, '',
              decode(bitand(i.flags, 1024), 0, 'ENABLED', 'DISABLED')),
       decode(bitand(i.property, 1024), 1024, 'YES', 'NO'),
       decode(bitand(i.property, 16384), 16384, 'YES', 'NO'),
       decode(bitand(o.flags, 128), 128, 'YES', 'NO')
from sys.ts$ ts, sys.seg$ s, sys.user$ iu, sys.obj$ io,
     sys.user$ u, sys.ind$ i, sys.obj$ o, sys.user$ itu, sys.obj$ ito
where u.user# = o.owner#
  and o.obj# = i.obj#
  and i.bo# = io.obj#
  and io.owner# = iu.user#
  and io.type# = 2 /* tables */
  and bitand(i.flags, 4096) = 0
  and bitand(o.flags, 128) = 0
  and i.ts# = ts.ts# (+)
  and i.file# = s.file# (+)
  and i.block# = s.block# (+)
  and i.ts# = s.ts# (+)
  and i.type# in (1, 2, 3, 4, 6, 7, 9)
  and i.indmethod# = ito.obj# (+)
  and ito.owner# = itu.user# (+)
  and (io.owner# = userenv('SCHEMAID')
        or
       io.obj# in ( select obj#
                    from sys.objauth$
                    where grantee# in ( select kzsrorol
                                        from x$kzsro
                                      )
                   )
        or
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
       );

CREATE OR REPLACE FORCE VIEW "ALL_INDEXTYPES"("OWNER","INDEXTYPE_NAME","IMPLEMENTATION_SCHEMA","IMPLEMENTATION_NAME","INTERFACE_VERSION","IMPLEMENTATION_VERSION","NUMBER_OF_OPERATORS","PARTITIONING","ARRAY_DML") AS 
select u.name, o.name, u1.name, o1.name, i.interface_version#, t.version#,
io.opcount, decode(bitand(i.property, 48), 0, 'NONE', 16, 'RANGE', 32, 'HASH', 48, 'HASH,RANGE'),
decode(bitand(i.property, 2), 0, 'NO', 2, 'YES')
from sys.indtypes$ i, sys.user$ u, sys.obj$ o,
sys.user$ u1, (select it.obj#, count(*) opcount from
sys.indop$ io1, sys.indtypes$ it where
io1.obj# = it.obj# and bitand(io1.property, 4) != 4
group by it.obj#) io, sys.obj$ o1,
sys.type$ t
where i.obj# = o.obj# and o.owner# = u.user# and
u1.user# = o.owner# and io.obj# = i.obj# and
o1.obj# = i.implobj# and o1.oid$ = t.toid and
( o.owner# = userenv ('SCHEMAID')
    or
    o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or exists (select null from v$enabledprivs
                  where priv_number in (-205 /* CREATE INDEXTYPE */,
                                        -206 /* CREATE ANY INDEXTYPE */,
                                        -207 /* ALTER ANY INDEXTYPE */,
                                        -208 /* DROP ANY INDEXTYPE */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_INDEXTYPE_ARRAYTYPES"("OWNER","INDEXTYPE_NAME","BASE_TYPE_SCHEMA","BASE_TYPE_NAME","BASE_TYPE","ARRAY_TYPE_SCHEMA","ARRAY_TYPE_NAME") AS 
select indtypu.name, indtypo.name,
decode(i.type, 121, (select baseu.name from user$ baseu
       where baseo.owner#=baseu.user#), null),
decode(i.type, 121, baseo.name, null),
decode(i.type,  /* DATA_TYPE */
0, null,
1, 'VARCHAR2',
2, 'NUMBER',
3, 'NATIVE INTEGER',
8, 'LONG',
9, 'VARCHAR',
11, 'ROWID',
12, 'DATE',
23, 'RAW',
24, 'LONG RAW',
29, 'BINARY_INTEGER',
69, 'ROWID',
96, 'CHAR',
100, 'BINARY_FLOAT',
101, 'BINARY_DOUBLE',
102, 'REF CURSOR',
104, 'UROWID',
105, 'MLSLABEL',
106, 'MLSLABEL',
110, 'REF',
111, 'REF',
112, 'CLOB',
113, 'BLOB', 114, 'BFILE', 115, 'CFILE',
121, 'OBJECT',
122, 'TABLE',
123, 'VARRAY',
178, 'TIME',
179, 'TIME WITH TIME ZONE',
180, 'TIMESTAMP',
181, 'TIMESTAMP WITH TIME ZONE',
231, 'TIMESTAMP WITH LOCAL TIME ZONE',
182, 'INTERVAL YEAR TO MONTH',
183, 'INTERVAL DAY TO SECOND',
250, 'PL/SQL RECORD',
251, 'PL/SQL TABLE',
252, 'PL/SQL BOOLEAN',
'UNDEFINED'),
arrayu.name, arrayo.name
from sys.user$ indtypu, sys.indarraytype$ i, sys.obj$ indtypo,
sys.obj$ baseo, sys.obj$ arrayo, sys.user$ arrayu
where i.obj# = indtypo.obj# and  indtypu.user# = indtypo.owner# and
      i.basetypeobj# = baseo.obj#(+) and i.arraytypeobj# = arrayo.obj# and
      arrayu.user# = arrayo.owner# and
      ( indtypo.owner# = userenv ('SCHEMAID')
        or
        indtypo.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
        or exists (select null from v$enabledprivs
                   where priv_number in (-205 /* CREATE INDEXTYPE */,
                                        -206 /* CREATE ANY INDEXTYPE */,
                                        -207 /* ALTER ANY INDEXTYPE */,
                                        -208 /* DROP ANY INDEXTYPE */)
                  )
      );

CREATE OR REPLACE FORCE VIEW "ALL_INDEXTYPE_COMMENTS"("OWNER","INDEXTYPE_NAME","COMMENTS") AS 
select  u.name, o.name, c.comment$
from    sys.obj$ o, sys.user$ u, sys.indtypes$ i, sys.com$ c
where   o.obj# = i.obj# and u.user# = o.owner# and c.obj# = i.obj# and
( o.owner# = userenv ('SCHEMAID')
    or
    o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or exists (select null from v$enabledprivs
                  where priv_number in (-205 /* CREATE INDEXTYPE */,
                                        -206 /* CREATE ANY INDEXTYPE */,
                                        -207 /* ALTER ANY INDEXTYPE */,
                                        -208 /* DROP ANY INDEXTYPE */)
                 )
 );

CREATE OR REPLACE FORCE VIEW "ALL_INDEXTYPE_OPERATORS"("OWNER","INDEXTYPE_NAME","OPERATOR_SCHEMA","OPERATOR_NAME","BINDING#") AS 
select u.name, o.name, u1.name, op.name, i.bind#
from sys.user$ u, sys.indop$ i, sys.obj$ o,
sys.obj$ op, sys.user$ u1
where i.obj# = o.obj# and i.oper# = op.obj# and
      u.user# = o.owner# and bitand(i.property, 4) != 4 and u1.user#=op.owner# and
      ( o.owner# = userenv ('SCHEMAID')
      or
      o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or exists (select null from v$enabledprivs
                  where priv_number in (-205 /* CREATE INDEXTYPE */,
                                        -206 /* CREATE ANY INDEXTYPE */,
                                        -207 /* ALTER ANY INDEXTYPE */,
                                        -208 /* DROP ANY INDEXTYPE */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_IND_COLUMNS"("INDEX_OWNER","INDEX_NAME","TABLE_OWNER","TABLE_NAME","COLUMN_NAME","COLUMN_POSITION","COLUMN_LENGTH","CHAR_LENGTH","DESCEND") AS 
select io.name, idx.name, bo.name, base.name,
       decode(bitand(c.property, 1024), 1024,
              (select decode(bitand(tc.property, 1), 1, ac.name, tc.name)
              from sys.col$ tc, attrcol$ ac
              where tc.intcol# = c.intcol#-1
                and tc.obj# = c.obj#
                and tc.obj# = ac.obj#(+)
                and tc.intcol# = ac.intcol#(+)),
              decode(ac.name, null, c.name, ac.name)),
       ic.pos#, c.length, c.spare3,
       decode(bitand(c.property, 131072), 131072, 'DESC', 'ASC')
from sys.col$ c, sys.obj$ idx, sys.obj$ base, sys.icol$ ic,
     sys.user$ io, sys.user$ bo, sys.ind$ i, sys.attrcol$ ac
where ic.bo# = c.obj#
  and decode(bitand(i.property,1024),0,ic.intcol#,ic.spare2) = c.intcol#
  and ic.bo# = base.obj#
  and io.user# = idx.owner#
  and bo.user# = base.owner#
  and ic.obj# = idx.obj#
  and idx.obj# = i.obj#
  and i.type# in (1, 2, 3, 4, 6, 7, 9)
  and c.obj# = ac.obj#(+)
  and c.intcol# = ac.intcol#(+)
  and (idx.owner# = userenv('SCHEMAID') or
       base.owner# = userenv('SCHEMAID')
       or
       base.obj# in ( select obj#
                     from sys.objauth$
                     where grantee# in ( select kzsrorol
                                         from x$kzsro
                                       )
                   )
        or
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
       );

CREATE OR REPLACE FORCE VIEW "ALL_IND_EXPRESSIONS"("INDEX_OWNER","INDEX_NAME","TABLE_OWNER","TABLE_NAME","COLUMN_EXPRESSION","COLUMN_POSITION") AS 
select io.name, idx.name, bo.name, base.name, c.default$, ic.pos#
from sys.col$ c, sys.obj$ idx, sys.obj$ base, sys.icol$ ic,
     sys.user$ io, sys.user$ bo, sys.ind$ i
where bitand(ic.spare1,1) = 1       /* an expression */
  and (bitand(i.property,1024) = 0) /* not bmji */
  and ic.bo# = c.obj#
  and ic.intcol# = c.intcol#
  and ic.bo# = base.obj#
  and io.user# = idx.owner#
  and bo.user# = base.owner#
  and ic.obj# = idx.obj#
  and idx.obj# = i.obj#
  and i.type# in (1, 2, 3, 4, 6, 7, 9)
  and (idx.owner# = userenv('SCHEMAID') or
       base.owner# = userenv('SCHEMAID')
       or
       base.obj# in ( select obj#
                     from sys.objauth$
                     where grantee# in ( select kzsrorol
                                         from x$kzsro
                                       )
                   )
        or
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
       );

CREATE OR REPLACE FORCE VIEW "ALL_IND_PARTITIONS"("INDEX_OWNER","INDEX_NAME","COMPOSITE","PARTITION_NAME","SUBPARTITION_COUNT","HIGH_VALUE","HIGH_VALUE_LENGTH","PARTITION_POSITION","STATUS","TABLESPACE_NAME","PCT_FREE","INI_TRANS","MAX_TRANS","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENT","MAX_EXTENT","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","LOGGING","COMPRESSION","BLEVEL","LEAF_BLOCKS","DISTINCT_KEYS","AVG_LEAF_BLOCKS_PER_KEY","AVG_DATA_BLOCKS_PER_KEY","CLUSTERING_FACTOR","NUM_ROWS","SAMPLE_SIZE","LAST_ANALYZED","BUFFER_POOL","USER_STATS","PCT_DIRECT_ACCESS","GLOBAL_STATS","DOMIDX_OPSTATUS","PARAMETERS") AS 
select u.name, io.name, 'NO', io.subname, 0,
       ip.hiboundval, ip.hiboundlen, ip.part#,
       decode(bitand(ip.flags, 1), 1, 'UNUSABLE', 'USABLE'),ts.name,
       ip.pctfree$, ip.initrans, ip.maxtrans, s.iniexts * ts.blocksize,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                               s.extsize * ts.blocksize),
       s.minexts, s.maxexts,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extpct),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
          decode(s.lists, 0, 1, s.lists)),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
          decode(s.groups, 0, 1, s.groups)),
       decode(mod(trunc(ip.flags / 4), 2), 0, 'YES', 'NO'),
       decode(bitand(ip.flags, 1024), 0, 'DISABLED', 1024, 'ENABLED', null),
       ip.blevel, ip.leafcnt, ip.distkey, ip.lblkkey, ip.dblkkey,
       ip.clufac, ip.rowcnt, ip.samplesize, ip.analyzetime,
       decode(s.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL),
       decode(bitand(ip.flags, 8), 0, 'NO', 'YES'), ip.pctthres$,
       decode(bitand(ip.flags, 16), 0, 'NO', 'YES'), '',''
from obj$ io, indpartv$ ip, ts$ ts, sys.seg$ s, ind$ i, sys.user$ u
where io.obj# = ip.obj# and ts.ts# = ip.ts# and ip.file#=s.file# and
      ip.block#=s.block# and ip.ts#=s.ts# and io.owner# = u.user# and
      i.obj# = ip.bo# and
      i.type# != 8 and      /* not LOB index */
        (io.owner# = userenv('SCHEMAID')
        or
        i.bo# in (select obj#
                    from objauth$
                    where grantee# in ( select kzsrorol
                                        from x$kzsro
                                      )
                   )
        or
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
       )
union all
select u.name, io.name, 'YES', io.subname, icp.subpartcnt,
       icp.hiboundval, icp.hiboundlen, icp.part#, 'N/A', ts.name,
       icp.defpctfree, icp.definitrans, icp.defmaxtrans,
       icp.definiexts, icp.defextsize, icp.defminexts, icp.defmaxexts,
       icp.defextpct, icp.deflists, icp.defgroups,
       decode(icp.deflogging, 0, 'NONE', 1, 'YES', 2, 'NO', 'UNKNOWN'),
       decode(bitand(icp.flags, 1024), 0, 'DISABLED', 1024, 'ENABLED', null),
       icp.blevel, icp.leafcnt, icp.distkey, icp.lblkkey, icp.dblkkey,
       icp.clufac, icp.rowcnt, icp.samplesize, icp.analyzetime,
       decode(icp.defbufpool, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL),
       decode(bitand(icp.flags, 8), 0, 'NO', 'YES'), TO_NUMBER(NULL),
       decode(bitand(icp.flags, 16), 0, 'NO', 'YES'), '',''
from   obj$ io, indcompartv$ icp, ts$ ts, ind$ i, user$ u
where  io.obj# = icp.obj# and icp.defts# = ts.ts# (+) and io.owner# = u.user# and
       i.obj# = icp.bo# and
       i.type# != 8 and      /* not LOB index */
       (io.owner# = userenv('SCHEMAID')
        or
        i.bo# in (select oa.obj#
                 from sys.objauth$ oa
                    where grantee# in ( select kzsrorol
                                        from x$kzsro
                                      )
                   )
        or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      )
union all
select u.name, io.name, 'NO', io.subname, 0,
       ip.hiboundval, ip.hiboundlen, ip.part#,
       decode(bitand(ip.flags, 1), 1, 'UNUSABLE',
               decode(bitand(ip.flags, 4096), 4096, 'INPROGRS', 'USABLE')),
       null, ip.pctfree$, ip.initrans, ip.maxtrans,
       0, 0, 0, 0, 0, 0, 0,
       decode(mod(trunc(ip.flags / 4), 2), 0, 'YES', 'NO'),
       decode(bitand(ip.flags, 1024), 0, 'DISABLED', 1024, 'ENABLED', null),
       ip.blevel, ip.leafcnt, ip.distkey, ip.lblkkey, ip.dblkkey,
       ip.clufac, ip.rowcnt, ip.samplesize, ip.analyzetime,
       'DEFAULT',
       decode(bitand(ip.flags, 8), 0, 'NO', 'YES'), ip.pctthres$,
       decode(bitand(ip.flags, 16), 0, 'NO', 'YES'),
       decode(i.type#,
             9, decode(bitand(ip.flags, 8192), 8192, 'FAILED', 'VALID'),
             ''),
       ipp.parameters
from obj$ io, indpartv$ ip, ind$ i, sys.user$ u, indpart_param$ ipp
where io.obj# = ip.obj# and io.owner# = u.user# and
      i.obj# = ip.bo# and ip.obj# = ipp.obj# and
        (io.owner# = userenv('SCHEMAID')
        or
        i.bo# in (select obj#
                    from objauth$
                    where grantee# in ( select kzsrorol
                                        from x$kzsro
                                      )
                   )
        or
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
       );

CREATE OR REPLACE FORCE VIEW "ALL_IND_STATISTICS"("OWNER","INDEX_NAME","PARTITION_NAME","PARTITION_POSITION","SUBPARTITION_NAME","SUBPARTITION_POSITION","OBJECT_TYPE","BLEVEL","LEAF_BLOCKS","DISTINCT_KEYS","AVG_LEAF_BLOCKS_PER_KEY","AVG_DATA_BLOCKS_PER_KEY","CLUSTERING_FACTOR","NUM_ROWS","AVG_CACHED_BLOCKS","AVG_CACHE_HIT_RATIO","SAMPLE_SIZE","LAST_ANALYZED","GLOBAL_STATS","USER_STATS") AS 
SELECT
    u.name, o.name, NULL,NULL, NULL, NULL, 'INDEX',
    i.blevel, i.leafcnt, i.distkey, i.lblkkey, i.dblkkey, i.clufac, i.rowcnt,
    ins.cachedblk, ins.cachehit, i.samplesize, i.analyzetime,
    decode(bitand(i.flags, 2048), 0, 'NO', 'YES'),
    decode(bitand(i.flags, 64), 0, 'NO', 'YES')
  FROM
    sys.user$ u, sys.ind$ i, sys.obj$ o, sys.ind_stats$ ins
  WHERE
      u.user# = o.owner#
  and o.obj# = i.obj#
  and bitand(i.flags, 4096) = 0
  and i.type# in (1, 2, 3, 4, 6, 7, 8, 9)
  and i.obj# = ins.obj# (+)
  and (o.owner# = userenv('SCHEMAID')
        or
       o.obj# in ( select obj#
                    from sys.objauth$
                    where grantee# in ( select kzsrorol
                                        from x$kzsro
                                      )
                   )
        or
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
       )
  UNION ALL
  SELECT
    u.name, io.name, io.subname, ip.part#, NULL, NULL, 'PARTITION',
    ip.blevel, ip.leafcnt, ip.distkey, ip.lblkkey, ip.dblkkey,
    ip.clufac, ip.rowcnt, ins.cachedblk, ins.cachehit,
    ip.samplesize, ip.analyzetime,
    decode(bitand(ip.flags, 16), 0, 'NO', 'YES'),
    decode(bitand(ip.flags, 8), 0, 'NO', 'YES')
  FROM
    sys.obj$ io, sys.indpartv$ ip, sys.ind$ i,
    sys.user$ u, sys.ind_stats$ ins
  WHERE
      io.obj# = ip.obj#
  and ip.file# > 0
  and ip.block# > 0
  and ip.bo# = i.obj#
  and io.owner# = u.user#
  and ip.obj# = ins.obj# (+)
  and (io.owner# = userenv('SCHEMAID')
        or
        i.bo# in (select obj#
                    from objauth$
                    where grantee# in ( select kzsrorol
                                        from x$kzsro
                                      )
                   )
        or
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
       )
  UNION ALL
  SELECT
    u.name, io.name, io.subname, icp.part#, NULL, NULL, 'PARTITION',
    icp.blevel, icp.leafcnt, icp.distkey, icp.lblkkey, icp.dblkkey,
    icp.clufac, icp.rowcnt, ins.cachedblk, ins.cachehit,
    icp.samplesize, icp.analyzetime,
    decode(bitand(icp.flags, 16), 0, 'NO', 'YES'),
    decode(bitand(icp.flags, 8), 0, 'NO', 'YES')
  FROM
    obj$ io, indcompartv$ icp, ind$ i, user$ u, sys.ind_stats$ ins
  WHERE
      io.obj# = icp.obj#
  and io.owner# = u.user#
  and icp.obj# = ins.obj# (+)
  and i.obj# = icp.bo#
  and (io.owner# = userenv('SCHEMAID')
        or
        i.bo# in (select oa.obj#
                  from sys.objauth$ oa
                    where grantee# in ( select kzsrorol
                                        from x$kzsro
                                      )
                   )
        or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      )
  UNION ALL
  SELECT
    u.name, io.name, io.subname, ip.part#, NULL, NULL, 'PARTITION',
    ip.blevel, ip.leafcnt, ip.distkey, ip.lblkkey, ip.dblkkey,
    ip.clufac, ip.rowcnt, ins.cachedblk, ins.cachehit,
    ip.samplesize, ip.analyzetime,
    decode(bitand(ip.flags, 16), 0, 'NO', 'YES'),
    decode(bitand(ip.flags, 8), 0, 'NO', 'YES')
  FROM
    obj$ io, indpartv$ ip, sys.user$ u, indpart_param$ ipp, sys.ind$ i,
    sys.ind_stats$ ins
  WHERE
      io.obj# = ip.obj#
  and io.owner# = u.user#
  and ip.obj# = ipp.obj#
  and ip.bo# = i.obj#
  and ip.obj# = ins.obj# (+)
  and (io.owner# = userenv('SCHEMAID')
        or
        i.bo# in (select obj#
                    from objauth$
                    where grantee# in ( select kzsrorol
                                        from x$kzsro
                                      )
                   )
        or
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
       )
  UNION ALL
  SELECT
    u.name, po.name, po.subname, icp.part#, so.subname, isp.subpart#,
    'SUBPARTITION',
    isp.blevel, isp.leafcnt, isp.distkey, isp.lblkkey, isp.dblkkey,
    isp.clufac, isp.rowcnt, ins.cachedblk, ins.cachehit,
    isp.samplesize, isp.analyzetime,
    decode(bitand(isp.flags, 16), 0, 'NO', 'YES'),
    decode(bitand(isp.flags, 8), 0, 'NO', 'YES')
  FROM
    obj$ so, sys.obj$ po, ind$ i, indcompartv$ icp, indsubpartv$ isp,
    user$ u,  sys.ind_stats$ ins
  WHERE
      so.obj# = isp.obj#
  and po.obj# = icp.obj#
  and icp.obj# = isp.pobj#
  and icp.bo# = i.obj#
  and isp.file# > 0
  and isp.block# > 0
  and u.user# = po.owner#
  and isp.obj# = ins.obj# (+)
  and (po.owner# = userenv('SCHEMAID')
        or i.bo# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
        or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_IND_SUBPARTITIONS"("INDEX_OWNER","INDEX_NAME","PARTITION_NAME","SUBPARTITION_NAME","HIGH_VALUE","HIGH_VALUE_LENGTH","SUBPARTITION_POSITION","STATUS","TABLESPACE_NAME","PCT_FREE","INI_TRANS","MAX_TRANS","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENT","MAX_EXTENT","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","LOGGING","COMPRESSION","BLEVEL","LEAF_BLOCKS","DISTINCT_KEYS","AVG_LEAF_BLOCKS_PER_KEY","AVG_DATA_BLOCKS_PER_KEY","CLUSTERING_FACTOR","NUM_ROWS","SAMPLE_SIZE","LAST_ANALYZED","BUFFER_POOL","USER_STATS","GLOBAL_STATS") AS 
select u.name, po.name, po.subname, so.subname,
       isp.hiboundval, isp.hiboundlen, isp.subpart#,
       decode(bitand(isp.flags, 1), 1, 'UNUSABLE', 'USABLE'), ts.name,
       isp.pctfree$, isp.initrans, isp.maxtrans,
       s.iniexts * ts.blocksize,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extsize * ts.blocksize),
       s.minexts, s.maxexts,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extpct),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
          decode(s.lists, 0, 1, s.lists)),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
          decode(s.groups, 0, 1, s.groups)),
       decode(mod(trunc(isp.flags / 4), 2), 0, 'YES', 'NO'),
       decode(bitand(isp.flags, 1024), 0, 'DISABLED', 1024, 'ENABLED', null),
       isp.blevel, isp.leafcnt, isp.distkey, isp.lblkkey, isp.dblkkey,
       isp.clufac, isp.rowcnt, isp.samplesize, isp.analyzetime,
       decode(s.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL),
       decode(bitand(isp.flags, 8), 0, 'NO', 'YES'),
       decode(bitand(isp.flags, 16), 0, 'NO', 'YES')
from   obj$ so, sys.obj$ po, ind$ i, indcompartv$ icp, indsubpartv$ isp,
       ts$ ts, seg$ s, user$ u
where  so.obj# = isp.obj# and po.obj# = icp.obj# and icp.obj# = isp.pobj# and
       i.obj# = icp.bo# and ts.ts# = isp.ts# and isp.file# = s.file# and
       isp.block# = s.block# and isp.ts# = s.ts# and u.user# = po.owner# and
       i.type# != 8 and      /* not LOB index */
       (po.owner# = userenv('SCHEMAID')
        or i.bo# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
        or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_INTERNAL_TRIGGERS"("TABLE_NAME","INTERNAL_TRIGGER_TYPE") AS 
select o.name, 'DEFERRED RPC QUEUE'
from sys.tab$ t, sys.obj$ o
where t.obj# = o.obj#
      and bitand(t.trigflag,1) = 1
      and (o.owner# = userenv('SCHEMAID')
           or o.obj# in
                (select oa.obj#
                 from sys.objauth$ oa
                 where grantee# in ( select kzsrorol
                                     from x$kzsro
                                   )
                )
           or /* user has system privileges */
             exists (select null from v$enabledprivs
                     where priv_number in (-45 /* LOCK ANY TABLE */,
                                               -47 /* SELECT ANY TABLE */,
                                           -48 /* INSERT ANY TABLE */,
                                           -49 /* UPDATE ANY TABLE */,
                                           -50 /* DELETE ANY TABLE */)
                     )
          )
union
select o.name, 'MVIEW LOG'
from sys.tab$ t, sys.obj$ o
where t.obj# = o.obj#
      and bitand(t.trigflag,2) = 2
      and (o.owner# = userenv('SCHEMAID')
           or o.obj# in
                (select oa.obj#
                 from sys.objauth$ oa
                 where grantee# in ( select kzsrorol
                                     from x$kzsro
                                   )
                )
           or /* user has system privileges */
             exists (select null from v$enabledprivs
                     where priv_number in (-45 /* LOCK ANY TABLE */,
                                               -47 /* SELECT ANY TABLE */,
                                           -48 /* INSERT ANY TABLE */,
                                           -49 /* UPDATE ANY TABLE */,
                                           -50 /* DELETE ANY TABLE */)
                     )
          )
union
select o.name, 'UPDATABLE MVIEW LOG'
from sys.tab$ t, sys.obj$ o
where t.obj# = o.obj#
      and bitand(t.trigflag,4) = 4
      and (o.owner# = userenv('SCHEMAID')
           or o.obj# in
                (select oa.obj#
                 from sys.objauth$ oa
                 where grantee# in ( select kzsrorol
                                     from x$kzsro
                                   )
                )
           or /* user has system privileges */
             exists (select null from v$enabledprivs
                     where priv_number in (-45 /* LOCK ANY TABLE */,
                                               -47 /* SELECT ANY TABLE */,
                                           -48 /* INSERT ANY TABLE */,
                                           -49 /* UPDATE ANY TABLE */,
                                           -50 /* DELETE ANY TABLE */)
                     )
          )
union
select o.name, 'CONTEXT'
from sys.tab$ t, sys.obj$ o
where t.obj# = o.obj#
      and bitand(t.trigflag,8) = 8
      and (o.owner# = userenv('SCHEMAID')
           or o.obj# in
                (select oa.obj#
                 from sys.objauth$ oa
                 where grantee# in ( select kzsrorol
                                     from x$kzsro
                                   )
                )
           or /* user has system privileges */
             exists (select null from v$enabledprivs
                     where priv_number in (-45 /* LOCK ANY TABLE */,
                                               -47 /* SELECT ANY TABLE */,
                                           -48 /* INSERT ANY TABLE */,
                                           -49 /* UPDATE ANY TABLE */,
                                           -50 /* DELETE ANY TABLE */)
                     )
          );

CREATE OR REPLACE FORCE VIEW "ALL_JAVA_ARGUMENTS"("OWNER","NAME","METHOD_INDEX","METHOD_NAME","ARGUMENT_POSITION","ARRAY_DEPTH","BASE_TYPE","ARGUMENT_CLASS") AS 
select u.name, m.kln, m.mix, m.mnm, m.aix,
       m.aad,
       decode(m.abt, 10, 'int',
                     11, 'long',
                     6, 'float',
                     7, 'double',
                     4, 'boolean',
                     8, 'byte',
                     5, 'char',
                     9, 'short',
                     2, 'class',
                     NULL),
       m.aln
from sys.obj$ o, sys.x$joxfm m, sys.user$ u
where o.obj# = m.obn
  and o.type# = 29
  and o.owner# = u.user#
  and
  (
    o.owner# in (userenv('SCHEMAID'), 1 /* PUBLIC */)
    or
    (
      (
        (
          o.obj# in (select obj# from sys.objauth$
                     where grantee# in (select kzsrorol from x$kzsro)
                       and privilege#  = 12 /* EXECUTE */)
        )
        or
        exists
        (
          select null from sys.sysauth$
          where grantee# in (select kzsrorol from x$kzsro)
          and
          (
            (
              /* procedure */
              (
                privilege# = -144 /* EXECUTE ANY PROCEDURE */
                or
                privilege# = -141 /* CREATE ANY PROCEDURE */
              )
            )
          )
        )
      )
    )
  );

CREATE OR REPLACE FORCE VIEW "ALL_JAVA_CLASSES"("OWNER","NAME","MAJOR","MINOR","KIND","ACCESSIBILITY","IS_INNER","IS_ABSTRACT","IS_FINAL","IS_DEBUG","SOURCE","SUPER","OUTER") AS 
select u.name, m.kln, m.maj, m.min,
       decode(BITAND(m.acc, 512), 512, 'CLASS',
                                  0, 'INTERFACE'),
       decode(BITAND(m.acc, 1), 1, 'PUBLIC',
                                0, NULL),
       decode(BITAND(m.acc, 131072), 131072, 'YES',
                                     0, 'NO'),
       decode(BITAND(m.acc, 1024), 1024, 'YES',
                                   0, 'NO'),
       decode(BITAND(m.acc, 16), 16, 'YES',
                                 0, 'NO'),
       decode(m.dbg, 1, 'YES',
                     0, 'NO'),
       m.src, m.spl, m.oln
from sys.obj$ o, sys.x$joxfm m, sys.user$ u
where o.obj# = m.obn
  and o.type# = 29
  and o.owner# = u.user#
  and
  (
    o.owner# in (userenv('SCHEMAID'), 1 /* PUBLIC */)
    or
    (
      (
        (
          o.obj# in (select obj# from sys.objauth$
                     where grantee# in (select kzsrorol from x$kzsro)
                       and privilege#  = 12 /* EXECUTE */)
        )
        or
        exists
        (
          select null from sys.sysauth$
          where grantee# in (select kzsrorol from x$kzsro)
          and
          (
            (
              /* procedure */
              (
                privilege# = -144 /* EXECUTE ANY PROCEDURE */
                or
                privilege# = -141 /* CREATE ANY PROCEDURE */
              )
            )
          )
        )
      )
    )
  );

CREATE OR REPLACE FORCE VIEW "ALL_JAVA_DERIVATIONS"("OWNER","SOURCE_NAME","CLASS_INDEX","CLASS_NAME","RESOURCE_INDEX","RESOURCE_NAME") AS 
select u.name,
       dbms_java.longname(t.joxftderivedfrom),
       t.joxftderivedclassnumber,
       dbms_java.longname(t.joxftderivedclassname),
       t.joxftderivedresourcenumber,
       dbms_java.longname(t.joxftderivedresourcename)
from sys.obj$ o, sys.x$joxft t, sys.user$ u
where o.obj# = t.joxftobn
  and o.type# = 29
  and o.owner# = u.user#
  and t.joxftderivedfrom IS NOT NULL
  and
  (
    o.owner# in (userenv('SCHEMAID'), 1 /* PUBLIC */)
    or
    (
      (
        (
          o.obj# in (select obj# from sys.objauth$
                     where grantee# in (select kzsrorol from x$kzsro)
                       and privilege#  = 12 /* EXECUTE */)
        )
        or
        exists
        (
          select null from sys.sysauth$
          where grantee# in (select kzsrorol from x$kzsro)
          and
          (
            (
              /* procedure */
              (
                privilege# = -144 /* EXECUTE ANY PROCEDURE */
                or
                privilege# = -141 /* CREATE ANY PROCEDURE */
              )
            )
          )
        )
      )
    )
  );

CREATE OR REPLACE FORCE VIEW "ALL_JAVA_FIELDS"("OWNER","NAME","FIELD_INDEX","FIELD_NAME","ACCESSIBILITY","IS_STATIC","IS_FINAL","IS_VOLATILE","IS_TRANSIENT","ARRAY_DEPTH","BASE_TYPE","FIELD_CLASS") AS 
select u.name, m.kln, m.fix, m.fnm,
       decode(BITAND(m.fac, 7), 1, 'PUBLIC',
                                2, 'PRIVATE',
                                4, 'PROTECTED',
                                NULL),
       decode(BITAND(m.fac, 8), 8, 'YES',
                                0, 'NO'),
       decode(BITAND(m.fac, 16), 16, 'YES',
                                 0, 'NO'),
       decode(BITAND(m.fac, 64), 64, 'YES',
                                 0, 'NO'),
       decode(BITAND(m.fac, 128), 128, 'YES',
                                  0, 'NO'),
       m.fad,
       decode(m.fbt, 10, 'int',
                     11, 'long',
                     6, 'float',
                     7, 'double',
                     4, 'boolean',
                     8, 'byte',
                     5, 'char',
                     9, 'short',
                     2, 'class',
                     NULL),
       m.fln
from sys.obj$ o, sys.x$joxfm m, sys.user$ u
where o.obj# = m.obn
  and o.type# = 29
  and o.owner# = u.user#
  and
  (
    o.owner# in (userenv('SCHEMAID'), 1 /* PUBLIC */)
    or
    (
      (
        (
          o.obj# in (select obj# from sys.objauth$
                     where grantee# in (select kzsrorol from x$kzsro)
                       and privilege#  = 12 /* EXECUTE */)
        )
        or
        exists
        (
          select null from sys.sysauth$
          where grantee# in (select kzsrorol from x$kzsro)
          and
          (
            (
              /* procedure */
              (
                privilege# = -144 /* EXECUTE ANY PROCEDURE */
                or
                privilege# = -141 /* CREATE ANY PROCEDURE */
              )
            )
          )
        )
      )
    )
  );

CREATE OR REPLACE FORCE VIEW "ALL_JAVA_IMPLEMENTS"("OWNER","NAME","INTERFACE_INDEX","INTERFACE_NAME") AS 
select u.name, m.kln, m.ifx, m.iln
from sys.obj$ o, sys.x$joxfm m, sys.user$ u
where o.obj# = m.obn
  and o.type# = 29
  and o.owner# = u.user#
  and
  (
    o.owner# in (userenv('SCHEMAID'), 1 /* PUBLIC */)
    or
    (
      (
        (
          o.obj# in (select obj# from sys.objauth$
                     where grantee# in (select kzsrorol from x$kzsro)
                       and privilege#  = 12 /* EXECUTE */)
        )
        or
        exists
        (
          select null from sys.sysauth$
          where grantee# in (select kzsrorol from x$kzsro)
          and
          (
            (
              /* procedure */
              (
                privilege# = -144 /* EXECUTE ANY PROCEDURE */
                or
                privilege# = -141 /* CREATE ANY PROCEDURE */
              )
            )
          )
        )
      )
    )
  );

CREATE OR REPLACE FORCE VIEW "ALL_JAVA_INNERS"("OWNER","NAME","INNER_INDEX","SIMPLE_NAME","FULL_NAME","ACCESSIBILITY","IS_STATIC","IS_FINAL","IS_ABSTRACT","IS_INTERFACE") AS 
select u.name, m.kln, m.nix, m.nsm, m.nln,
       decode(BITAND(m.oac, 7), 1, 'PUBLIC',
                                2, 'PRIVATE',
                                4, 'PROTECTED',
                                NULL),
       decode(BITAND(m.acc, 8), 8, 'YES',
                                0, 'NO'),
       decode(BITAND(m.acc, 16), 16, 'YES',
                                 0, 'NO'),
       decode(BITAND(m.acc, 1024), 1024, 'YES',
                                   0, 'NO'),
       decode(BITAND(m.acc, 512), 512, 'YES',
                                  0, 'NO')
from sys.obj$ o, sys.x$joxfm m, sys.user$ u
where o.obj# = m.obn
  and o.type# = 29
  and o.owner# = u.user#
  and
  (
    o.owner# in (userenv('SCHEMAID'), 1 /* PUBLIC */)
    or
    (
      (
        (
          o.obj# in (select obj# from sys.objauth$
                     where grantee# in (select kzsrorol from x$kzsro)
                       and privilege#  = 12 /* EXECUTE */)
        )
        or
        exists
        (
          select null from sys.sysauth$
          where grantee# in (select kzsrorol from x$kzsro)
          and
          (
            (
              /* procedure */
              (
                privilege# = -144 /* EXECUTE ANY PROCEDURE */
                or
                privilege# = -141 /* CREATE ANY PROCEDURE */
              )
            )
          )
        )
      )
    )
  );

CREATE OR REPLACE FORCE VIEW "ALL_JAVA_LAYOUTS"("OWNER","NAME","INTERFACES","INNER_CLASSES","FIELDS","STATIC_FIELDS","METHODS","STATIC_METHODS","NATIVE_METHODS") AS 
select u.name, m.kln, m.lic, m.lnc,
              m.lfc, m.lsf,
              m.lmc, m.lsm, m.jnc
from sys.obj$ o, sys.x$joxfm m, sys.user$ u
where o.obj# = m.obn
  and o.type# = 29
  and o.owner# = u.user#
  and
  (
    o.owner# in (userenv('SCHEMAID'), 1 /* PUBLIC */)
    or
    (
      (
        (
          o.obj# in (select obj# from sys.objauth$
                     where grantee# in (select kzsrorol from x$kzsro)
                       and privilege#  = 12 /* EXECUTE */)
        )
        or
        exists
        (
          select null from sys.sysauth$
          where grantee# in (select kzsrorol from x$kzsro)
          and
          (
            (
              /* procedure */
              (
                privilege# = -144 /* EXECUTE ANY PROCEDURE */
                or
                privilege# = -141 /* CREATE ANY PROCEDURE */
              )
            )
          )
        )
      )
    )
  );

CREATE OR REPLACE FORCE VIEW "ALL_JAVA_METHODS"("OWNER","NAME","METHOD_INDEX","METHOD_NAME","ACCESSIBILITY","IS_STATIC","IS_FINAL","IS_SYNCHRONIZED","IS_NATIVE","IS_ABSTRACT","IS_STRICT","ARGUMENTS","THROWS","ARRAY_DEPTH","BASE_TYPE","RETURN_CLASS") AS 
select u.name, m.kln, m.mix, m.mnm,
       decode(BITAND(m.mac, 7), 1, 'PUBLIC',
                                2, 'PRIVATE',
                                4, 'PROTECTED',
                                NULL),
       decode(BITAND(m.mac, 8), 8, 'YES',
                                0, 'NO'),
       decode(BITAND(m.mac, 16), 16, 'YES',
                                 0, 'NO'),
       decode(BITAND(m.mac, 32), 32, 'YES',
                                 0, 'NO'),
       decode(BITAND(m.mac, 256), 256, 'YES',
                                  0, 'NO'),
       decode(BITAND(m.mac, 1024), 1024, 'YES',
                                   0, 'NO'),
       decode(BITAND(m.mac, 2048), 2048, 'YES',
                                   0, 'NO'),
       m.agc, m.exc, m.rad,
       decode(m.rbt, 10, 'int',
                     11, 'long',
                     6,  'float',
                     7,  'double',
                     4,  'boolean',
                     8,  'byte',
                     5,  'char',
                     9,  'short',
                     2,  'class',
                     12, 'void',
                     NULL),
       m.rln
from sys.obj$ o, sys.x$joxfm m, sys.user$ u
where o.obj# = m.obn
  and o.type# = 29
  and o.owner# = u.user#
  and
  (
    o.owner# in (userenv('SCHEMAID'), 1 /* PUBLIC */)
    or
    (
      (
        (
          o.obj# in (select obj# from sys.objauth$
                     where grantee# in (select kzsrorol from x$kzsro)
                       and privilege#  = 12 /* EXECUTE */)
        )
        or
        exists
        (
          select null from sys.sysauth$
          where grantee# in (select kzsrorol from x$kzsro)
          and
          (
            (
              /* procedure */
              (
                privilege# = -144 /* EXECUTE ANY PROCEDURE */
                or
                privilege# = -141 /* CREATE ANY PROCEDURE */
              )
            )
          )
        )
      )
    )
  );

CREATE OR REPLACE FORCE VIEW "ALL_JAVA_NCOMPS"("OWNER","NAME","SOURCE","INITIALIZER","LIBRARYFILE","LIBRARY") AS 
select u.name,
       dbms_java.longname(o.name),
       t.joxftncompsource,
       t.joxftncompinitializer,
       t.joxftncomplibraryfile,
       t.joxftncomplibrary
from sys.obj$ o, sys.x$joxft t, sys.user$ u
where o.obj# = t.joxftobn
  and o.type# = 29
  and o.owner# = u.user#
  and
  (
    o.owner# in (userenv('SCHEMAID'), 1 /* PUBLIC */)
    or
    (
      (
        (
          o.obj# in (select obj# from sys.objauth$
                     where grantee# in (select kzsrorol from x$kzsro)
                       and privilege#  = 12 /* EXECUTE */)
        )
        or
        exists
        (
          select null from sys.sysauth$
          where grantee# in (select kzsrorol from x$kzsro)
          and
          (
            (
              /* procedure */
              (
                privilege# = -144 /* EXECUTE ANY PROCEDURE */
                or
                privilege# = -141 /* CREATE ANY PROCEDURE */
              )
            )
          )
        )
      )
    )
  );

CREATE OR REPLACE FORCE VIEW "ALL_JAVA_RESOLVERS"("OWNER","NAME","TERM_INDEX","PATTERN","SCHEMA") AS 
select u.name,
       dbms_java.longname(o.name),
       t.joxftresolvertermnumber,
       t.joxftresolvertermpattern,
       t.joxftresolvertermschema
from sys.obj$ o, sys.x$joxft t, sys.user$ u
where o.obj# = t.joxftobn
  and o.type# = 29
  and o.owner# = u.user#
  and
  (
    o.owner# in (userenv('SCHEMAID'), 1 /* PUBLIC */)
    or
    (
      (
        (
          o.obj# in (select obj# from sys.objauth$
                     where grantee# in (select kzsrorol from x$kzsro)
                       and privilege#  = 12 /* EXECUTE */)
        )
        or
        exists
        (
          select null from sys.sysauth$
          where grantee# in (select kzsrorol from x$kzsro)
          and
          (
            (
              /* procedure */
              (
                privilege# = -144 /* EXECUTE ANY PROCEDURE */
                or
                privilege# = -141 /* CREATE ANY PROCEDURE */
              )
            )
          )
        )
      )
    )
  );

CREATE OR REPLACE FORCE VIEW "ALL_JAVA_THROWS"("OWNER","NAME","METHOD_INDEX","METHOD_NAME","EXCEPTION_INDEX","EXCEPTION_CLASS") AS 
select u.name, m.kln, m.mix, m.mnm, m.xix, m.xln
from sys.obj$ o, sys.x$joxfm m, sys.user$ u
where o.obj# = m.obn
  and o.type# = 29
  and o.owner# = u.user#
  and
  (
    o.owner# in (userenv('SCHEMAID'), 1 /* PUBLIC */)
    or
    (
      (
        (
          o.obj# in (select obj# from sys.objauth$
                     where grantee# in (select kzsrorol from x$kzsro)
                       and privilege#  = 12 /* EXECUTE */)
        )
        or
        exists
        (
          select null from sys.sysauth$
          where grantee# in (select kzsrorol from x$kzsro)
          and
          (
            (
              /* procedure */
              (
                privilege# = -144 /* EXECUTE ANY PROCEDURE */
                or
                privilege# = -141 /* CREATE ANY PROCEDURE */
              )
            )
          )
        )
      )
    )
  );

CREATE OR REPLACE FORCE VIEW "ALL_JOIN_IND_COLUMNS"("INDEX_OWNER","INDEX_NAME","INNER_TABLE_OWNER","INNER_TABLE_NAME","INNER_TABLE_COLUMN","OUTER_TABLE_OWNER","OUTER_TABLE_NAME","OUTER_TABLE_COLUMN") AS 
select
  ui.name, oi.name,
  uti.name, oti.name, ci.name,
  uto.name, oto.name, co.name
from
  sys.user$ ui, sys.user$ uti, sys.user$ uto,
  sys.obj$ oi, sys.obj$ oti, sys.obj$ oto,
  sys.col$ ci, sys.col$ co,
  sys.jijoin$ ji
where ji.obj# = oi.obj#
  and oi.owner# = ui.user#
  and ji.tab1obj# = oti.obj#
  and oti.owner# = uti.user#
  and ci.obj# = oti.obj#
  and ji.tab1col# = ci.intcol#
  and ji.tab2obj# = oto.obj#
  and oto.owner# = uto.user#
  and co.obj# = oto.obj#
  and ji.tab2col# = co.intcol#
  and (oi.owner# = userenv('SCHEMAID')
        or
       oti.owner# = userenv('SCHEMAID')
        or
       oto.owner# = userenv('SCHEMAID')
        or
       oti.obj# in ( select obj#
                    from sys.objauth$
                    where grantee# in ( select kzsrorol
                                        from x$kzsro
                                      )
                   )
        or
       oto.obj# in ( select obj#
                    from sys.objauth$
                    where grantee# in ( select kzsrorol
                                        from x$kzsro
                                      )
                   )
        or
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
       );

CREATE OR REPLACE FORCE VIEW "ALL_LIBRARIES"("OWNER","LIBRARY_NAME","FILE_SPEC","DYNAMIC","STATUS") AS 
select u.name,
       o.name,
       l.filespec,
       decode(bitand(l.property, 1), 0, 'Y', 1, 'N', NULL),
       decode(o.status, 0, 'N/A', 1, 'VALID', 'INVALID')
from sys.obj$ o, sys.library$ l, sys.user$ u
where o.owner# = u.user#
  and o.obj# = l.obj#
  and (o.owner# in (userenv('SCHEMAID'), 1 /* PUBLIC */)
       or o.obj# in
          ( select oa.obj#
            from sys.objauth$ oa
            where grantee# in (select kzsrorol from x$kzsro)
          )
       or (
            exists (select NULL from v$enabledprivs
                    where priv_number in (
                                      -189 /* CREATE ANY LIBRARY */,
                                      -190 /* ALTER ANY LIBRARY */,
                                      -191 /* DROP ANY LIBRARY */,
                                      -192 /* EXECUTE ANY LIBRARY */
                                         )
                   )
          )
      );

CREATE OR REPLACE FORCE VIEW "ALL_LOBS"("OWNER","TABLE_NAME","COLUMN_NAME","SEGMENT_NAME","TABLESPACE_NAME","INDEX_NAME","CHUNK","PCTVERSION","RETENTION","FREEPOOLS","CACHE","LOGGING","IN_ROW","FORMAT","PARTITIONED") AS 
select u.name, o.name,
       decode(bitand(c.property, 1), 1, ac.name, c.name), lo.name,
       decode(bitand(l.property, 8), 8, ts1.name, ts.name),
       io.name,
       l.chunk * decode(bitand(l.property, 8), 8, ts1.blocksize,
                        ts.blocksize),
       decode(l.pctversion$, 101, to_number(NULL), 102, to_number(NULL),
                                   l.pctversion$),
       decode(l.retention, -1, to_number(NULL), l.retention),
       decode(l.freepools, 0, to_number(NULL), 65534, to_number(NULL),
              65535, to_number(NULL), l.freepools),
       decode(bitand(l.flags, 27), 1, 'NO', 2, 'NO', 8, 'CACHEREADS',
                                   16, 'CACHEREADS', 'YES'),
       decode(bitand(l.flags, 18), 2, 'NO', 16, 'NO', 'YES'),
       decode(bitand(l.property, 2), 2, 'YES', 'NO'),
       decode(c.type#, 113, 'NOT APPLICABLE ',
              decode(bitand(l.property, 512), 512,
                     'ENDIAN SPECIFIC', 'ENDIAN NEUTRAL ')),
       decode(bitand(ta.property, 32), 32, 'YES', 'NO')
from sys.obj$ o, sys.col$ c, sys.attrcol$ ac, sys.tab$ ta, sys.lob$ l,
     sys.obj$ lo, sys.obj$ io, sys.user$ u, sys.ts$ ts, sys.ts$ ts1
where o.owner# = u.user#
  and o.obj# = c.obj#
  and c.obj# = l.obj#
  and c.intcol# = l.intcol#
  and l.lobj# = lo.obj#
  and l.ind# = io.obj#
  and l.ts# = ts.ts#(+)
  and u.tempts# = ts1.ts#
  and c.obj# = ac.obj#(+)
  and c.intcol# = ac.intcol#(+)
  and bitand(c.property,32768) != 32768           /* not unused column */
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                 )
      )
  and o.obj# = ta.obj#
  and bitand(ta.property, 32) != 32    /* not partitioned table */
union all
select u.name, o.name,
       decode(bitand(c.property, 1), 1, ac.name, c.name),
       lo.name,
       decode(null, plob.defts#, ts2.name, ts1.name),
       io.name,
       plob.defchunk * (decode(null, plob.defts#,
                               ts2.blocksize, ts1.blocksize)),
       decode(plob.defpctver$, 101, to_number(NULL), 102, to_number(NULL),
                               plob.defpctver$),
       decode(l.retention, -1, to_number(NULL), l.retention),
       decode(l.freepools, 0, to_number(NULL), 65534, to_number(NULL),
              65535, to_number(NULL), l.freepools),
       decode(bitand(plob.defflags, 27), 1, 'NO', 2, 'NO', 8, 'CACHEREADS',
                                         16, 'CACHEREADS', 'YES'),
       decode(bitand(plob.defflags,22), 0,'NONE', 4,'YES', 2,'NO',
                                        16,'NO', 'UNKNOWN'),
       decode(bitand(plob.defpro, 2), 2, 'YES', 'NO'),
       decode(c.type#, 113, 'NOT APPLICABLE ',
              decode(bitand(l.property, 512), 512,
                     'ENDIAN SPECIFIC', 'ENDIAN NEUTRAL ')),
       decode(bitand(ta.property, 32), 32, 'YES', 'NO')
from sys.obj$ o, sys.col$ c, sys.attrcol$ ac, sys.partlob$ plob,
     sys.lob$ l, sys.obj$ lo, sys.obj$ io, sys.ts$ ts1, sys.tab$ ta,
     sys.partobj$ po, sys.ts$ ts2, sys.user$ u
where o.owner# = u.user#
  and o.obj# = c.obj#
  and c.obj# = l.obj#
  and c.intcol# = l.intcol#
  and l.lobj# = lo.obj#
  and l.ind# = io.obj#
  and l.lobj# = plob.lobj#
  and plob.defts# = ts1.ts# (+)
  and c.obj# = ac.obj#(+)
  and c.intcol# = ac.intcol#(+)
  and bitand(c.property,32768) != 32768           /* not unused column */
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                 )
      )
  and o.obj# = ta.obj#
  and bitand(ta.property, 32) = 32         /* partitioned table */
  and o.obj# = po.obj#
  and po.defts# = ts2.ts#;

CREATE OR REPLACE FORCE VIEW "ALL_LOB_PARTITIONS"("TABLE_OWNER","TABLE_NAME","COLUMN_NAME","LOB_NAME","PARTITION_NAME","LOB_PARTITION_NAME","LOB_INDPART_NAME","PARTITION_POSITION","COMPOSITE","CHUNK","PCTVERSION","CACHE","IN_ROW","TABLESPACE_NAME","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENTS","MAX_EXTENTS","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","LOGGING","BUFFER_POOL") AS 
select u.name,
       o.name,
       decode(bitand(c.property, 1), 1, a.name, c.name),
       lo.name,
       po.subname,
       lpo.subname,
       lipo.subname,
       lf.frag#,
       'NO',
       lf.chunk * ts.blocksize,
       lf.pctversion$,
       decode(bitand(lf.fragflags,27), 1, 'NO', 2, 'NO', 8, 'CACHEREADS',
                                       16, 'CACHEREADS', 'YES'),
       decode(lf.fragpro, 0, 'NO', 'YES'),
       ts.name,
       to_char(s.iniexts * ts.blocksize),
       to_char(decode(bitand(ts.flags, 3), 1, to_number(NULL),
            s.extsize * ts.blocksize)),
       to_char(s.minexts),
       to_char(s.maxexts),
       to_char(decode(bitand(ts.flags, 3), 1, to_number(NULL),s.extpct)),
       to_char(decode(s.lists, 0, 1, s.lists)),
       to_char(decode(s.groups, 0, 1, s.groups)),
       decode(bitand(lf.fragflags, 18), 2, 'NO', 16, 'NO', 'YES'),
       decode(s.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL)
from   sys.obj$ o, sys.col$ c,
       sys.lob$ l, sys.obj$ lo,
       sys.lobfragv$ lf, sys.obj$ lpo,
       sys.obj$ po, sys.obj$ lipo,
       sys.partobj$ pobj,
       sys.ts$ ts, sys.seg$ s, sys.user$ u, attrcol$ a
where o.owner# = u.user#
  and pobj.obj# = o.obj#
  and mod(pobj.spare2, 256) = 0
  and o.obj# = c.obj#
  and c.obj# = l.obj#
  and c.intcol# = l.intcol#
  and l.lobj# = lo.obj#
  and l.lobj# = lf.parentobj#
  and lf.tabfragobj# = po.obj#
  and lf.fragobj# = lpo.obj#
  and lf.indfragobj# = lipo.obj#
  and lf.ts# = s.ts#
  and lf.file# = s.file#
  and lf.block# = s.block#
  and lf.ts# = ts.ts#
  and bitand(c.property,32768) != 32768           /* not unused column */
  and c.obj# = a.obj#(+) and c.intcol# = a.intcol#(+)
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                 )
      )
union all
select u.name,
       o.name,
       decode(bitand(c.property, 1), 1, a.name, c.name),
       lo.name,
       po.subname,
       lpo.subname,
       lipo.subname,
       lcp.part#,
       'YES',
       lcp.defchunk,
       lcp.defpctver$,
       decode(bitand(lcp.defflags, 27), 1, 'NO', 2, 'NO', 8, 'CACHEREADS',
                                       16, 'CACHEREADS', 'YES'),
       decode(lcp.defpro, 0, 'NO', 'YES'),
       ts.name,
       decode(lcp.definiexts, NULL, 'DEFAULT', lcp.definiexts),
       decode(lcp.defextsize, NULL, 'DEFAULT', lcp.defextsize),
       decode(lcp.defminexts, NULL, 'DEFAULT', lcp.defminexts),
       decode(lcp.defmaxexts, NULL, 'DEFAULT', lcp.defmaxexts),
       decode(lcp.defextpct,  NULL, 'DEFAULT', lcp.defextpct),
       decode(lcp.deflists,   NULL, 'DEFAULT', lcp.deflists),
       decode(lcp.defgroups,  NULL, 'DEFAULT', lcp.defgroups),
       decode(bitand(lcp.defflags,22), 0,'NONE', 4,'YES', 2,'NO', 16,'NO', 'UNKNOWN'),
       decode(lcp.defbufpool, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL)
from   sys.obj$ o, sys.col$ c,
       sys.lob$ l, sys.obj$ lo,
       sys.lobcomppartv$ lcp, sys.obj$ lpo,
       sys.obj$ po, sys.obj$ lipo,
       sys.ts$ ts, partobj$ pobj, sys.user$ u, attrcol$ a
where o.owner# = u.user#
  and pobj.obj# = o.obj#
  and mod(pobj.spare2, 256) != 0
  and o.obj# = c.obj#
  and c.obj# = l.obj#
  and c.intcol# = l.intcol#
  and l.lobj# = lo.obj#
  and l.lobj# = lcp.lobj#
  and lcp.tabpartobj# = po.obj#
  and lcp.partobj# = lpo.obj#
  and lcp.indpartobj# = lipo.obj#
  and lcp.defts# = ts.ts# (+)
  and bitand(c.property,32768) != 32768           /* not unused column */
  and c.obj# = a.obj#(+) and c.intcol# = a.intcol#(+)
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_LOB_SUBPARTITIONS"("TABLE_OWNER","TABLE_NAME","COLUMN_NAME","LOB_NAME","LOB_PARTITION_NAME","SUBPARTITION_NAME","LOB_SUBPARTITION_NAME","LOB_INDSUBPART_NAME","SUBPARTITION_POSITION","CHUNK","PCTVERSION","CACHE","IN_ROW","TABLESPACE_NAME","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENTS","MAX_EXTENTS","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","LOGGING","BUFFER_POOL") AS 
select u.name,
       o.name,
       decode(bitand(c.property, 1), 1, a.name, c.name),
       lo.name,
       lpo.subname,
       spo.subname,
       lspo.subname,
       lispo.subname,
       lf.frag#,
       lf.chunk * ts.blocksize,
       lf.pctversion$,
       decode(bitand(lf.fragflags,27), 1, 'NO', 2, 'NO', 8, 'CACHEREADS',
                                       16, 'CACHEREADS', 'YES'),
       decode(lf.fragpro, 0, 'NO', 'YES'),
       ts.name,
       s.iniexts * ts.blocksize,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
            s.extsize * ts.blocksize),
       s.minexts,
       s.maxexts,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),s.extpct),
       decode(s.lists, 0, 1, s.lists),
       decode(s.groups, 0, 1, s.groups),
       decode(bitand(lf.fragflags, 18), 2, 'NO', 16, 'NO', 'YES'),
       decode(s.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL)
from   sys.obj$ o, sys.col$ c,
       sys.lob$ l, sys.obj$ lo,
       sys.lobcomppartv$ lcp, sys.obj$ lpo,
       sys.lobfragv$ lf, sys.obj$ lspo,
       sys.obj$ spo, sys.obj$ lispo,
       sys.partobj$ pobj,
       sys.ts$ ts, sys.seg$ s, sys.user$ u, attrcol$ a
where o.owner# = u.user#
  and pobj.obj# = o.obj#
  and mod(pobj.spare2, 256) != 0
  and o.obj# = c.obj#
  and c.obj# = l.obj#
  and c.intcol# = l.intcol#
  and l.lobj# = lo.obj#
  and l.lobj# = lcp.lobj#
  and lcp.partobj# = lpo.obj#
  and lf.parentobj# = lcp.partobj#
  and lf.tabfragobj# = spo.obj#
  and lf.fragobj# = lspo.obj#
  and lf.indfragobj# = lispo.obj#
  and lf.ts# = s.ts#
  and lf.file# = s.file#
  and lf.block# = s.block#
  and lf.ts# = ts.ts#
  and bitand(c.property,32768) != 32768           /* not unused column */
  and c.obj# = a.obj#(+) and c.intcol# = a.intcol#(+)
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_LOB_TEMPLATES"("USER_NAME","TABLE_NAME","LOB_COL_NAME","SUBPARTITION_NAME","LOB_SEGMENT_NAME","TABLESPACE_NAME") AS 
select u.name, o.name, decode(bitand(c.property, 1), 1, ac.name, c.name),
       st.spart_name, lst.lob_spart_name, ts.name
from sys.obj$ o, sys.defsubpart$ st, sys.defsubpartlob$ lst, sys.ts$ ts,
     sys.col$ c, sys.attrcol$ ac, sys.user$ u
where o.obj# = lst.bo# and st.bo# = lst.bo# and
      st.spart_position =  lst.spart_position and
      lst.lob_spart_ts# = ts.ts#(+) and c.obj# = lst.bo# and
      c.intcol# = lst.intcol# and lst.intcol# = ac.intcol#(+) and
      o.owner# = u.user# and
      (o.owner# = userenv('SCHEMAID') or
       o.obj# in (select oa.obj# from sys.objauth$ oa
                  where grantee# in ( select kzsrorol from x$kzsro )) or
       exists (select null from v$enabledprivs
               where priv_number in (-45 /* LOCK ANY TABLE */,
                                     -47 /* SELECT ANY TABLE */,
                                     -48 /* INSERT ANY TABLE */,
                                     -49 /* UPDATE ANY TABLE */,
                                     -50 /* DELETE ANY TABLE */)));

CREATE OR REPLACE FORCE VIEW "ALL_LOG_GROUPS"("OWNER","LOG_GROUP_NAME","TABLE_NAME","LOG_GROUP_TYPE","ALWAYS","GENERATED") AS 
select ou.name, oc.name, o.name,
       case c.type# when 14 then 'PRIMARY KEY LOGGING'
                    when 15 then 'UNIQUE KEY LOGGING'
                    when 16 then 'FOREIGN KEY LOGGING'
                    when 17 then 'ALL COLUMN LOGGING'
                    else 'USER LOG GROUP'
       end,
       case bitand(c.defer,64) when 64 then 'ALWAYS'
                               else  'CONDITIONAL'
       end,
       case bitand(c.defer,8) when 8 then 'GENERATED NAME'
                              else  'USER NAME'
       end
from sys.con$ oc,  sys.user$ ou,
     sys.obj$ o, sys.cdef$ c
where oc.owner# = ou.user#
  and oc.con# = c.con#
  and c.obj# = o.obj#
  and
  (c.type# = 12 or c.type# = 14 or
   c.type# = 15 or c.type# = 16 or
   c.type# = 17)
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in (select obj#
                     from sys.objauth$
                     where grantee# in ( select kzsrorol
                                         from x$kzsro
                                       )
                    )
        or /* user has system privileges */
          exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                  )
      );

CREATE OR REPLACE FORCE VIEW "ALL_LOG_GROUP_COLUMNS"("OWNER","LOG_GROUP_NAME","TABLE_NAME","COLUMN_NAME","POSITION","LOGGING_PROPERTY") AS 
select u.name, c.name, o.name,
       decode(ac.name, null, col.name, ac.name), cc.pos#,
       decode(cc.spare1, 1, 'NO LOG', 'LOG')
from sys.user$ u, sys.con$ c, sys.col$ col, sys.ccol$ cc, sys.cdef$ cd,
     sys.obj$ o, sys.attrcol$ ac
where c.owner# = u.user#
  and c.con# = cd.con#
  and cd.type# = 12
  and cd.con# = cc.con#
  and cc.obj# = col.obj#
  and cc.intcol# = col.intcol#
  and cc.obj# = o.obj#
  and (c.owner# = userenv('SCHEMAID')
       or cd.obj# in (select obj#
                      from sys.objauth$
                      where grantee# in ( select kzsrorol
                                         from x$kzsro
                                       )
                     )
        or /* user has system privileges */
          exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                  )
      )
  and col.obj# = ac.obj#(+)
  and col.intcol# = ac.intcol#(+);

CREATE OR REPLACE FORCE VIEW "ALL_METHOD_PARAMS"("OWNER","TYPE_NAME","METHOD_NAME","METHOD_NO","PARAM_NAME","PARAM_NO","PARAM_MODE","PARAM_TYPE_MOD","PARAM_TYPE_OWNER","PARAM_TYPE_NAME","CHARACTER_SET_NAME") AS 
select u.name, o.name, m.name, m.method#,
       p.name, p.parameter#,
       decode(bitand(p.properties, 768), 768, 'IN OUT',
              decode(bitand(p.properties, 256), 256, 'IN',
                     decode(bitand(p.properties, 512), 512, 'OUT'))),
       decode(bitand(p.properties, 32768), 32768, 'REF',
              decode(bitand(p.properties, 16384), 16384, 'POINTER')),
       decode(bitand(pt.properties, 64), 64, null, pu.name),
       decode(pt.typecode,
              52, decode(p.charsetform, 2, 'NVARCHAR2', po.name),
              53, decode(p.charsetform, 2, 'NCHAR', po.name),
              54, decode(p.charsetform, 2, 'NCHAR VARYING', po.name),
              61, decode(p.charsetform, 2, 'NCLOB', po.name),
              po.name),
       decode(p.charsetform, 1, 'CHAR_CS',
                             2, 'NCHAR_CS',
                             3, NLS_CHARSET_NAME(p.charsetid),
                             4, 'ARG:'||p.charsetid)
from sys.user$ u, sys.obj$ o, sys.method$ m, sys.parameter$ p,
     sys.obj$ po, sys.user$ pu, sys.type$ pt
where o.owner# = u.user#
  and o.type# <> 10 -- must not be invalid
  and o.oid$ = m.toid
  and o.subname IS NULL -- get the latest version only
  and m.toid = p.toid
  and m.version# = p.version#
  and m.method# = p.method#
  and p.param_toid = po.oid$
  and po.owner# = pu.user#
  and p.param_toid = pt.toid
  and p.param_version# = pt.version#
  and (o.owner# = userenv('SCHEMAID')
       or
       o.obj# in (select oa.obj#
                  from sys.objauth$ oa
                  where grantee# in (select kzsrorol
                                     from x$kzsro))
       or /* user has system privileges */
       exists (select null from v$enabledprivs
               where priv_number in (-184 /* EXECUTE ANY TYPE */,
                                     -181 /* CREATE ANY TYPE */)));

CREATE OR REPLACE FORCE VIEW "ALL_METHOD_RESULTS"("OWNER","TYPE_NAME","METHOD_NAME","METHOD_NO","RESULT_TYPE_MOD","RESULT_TYPE_OWNER","RESULT_TYPE_NAME","CHARACTER_SET_NAME") AS 
select u.name, o.name, m.name, m.method#,
       decode(bitand(r.properties, 32768), 32768, 'REF',
              decode(bitand(r.properties, 16384), 16384, 'POINTER')),
       decode(bitand(rt.properties, 64), 64, null, ru.name),
       decode(rt.typecode,
              52, decode(r.charsetform, 2, 'NVARCHAR2', ro.name),
              53, decode(r.charsetform, 2, 'NCHAR', ro.name),
              54, decode(r.charsetform, 2, 'NCHAR VARYING', ro.name),
              61, decode(r.charsetform, 2, 'NCLOB', ro.name),
              ro.name),
       decode(r.charsetform, 1, 'CHAR_CS',
                             2, 'NCHAR_CS',
                             3, NLS_CHARSET_NAME(r.charsetid),
                             4, 'ARG:'||r.charsetid)
from sys.user$ u, sys.obj$ o, sys.method$ m, sys.result$ r,
     sys.obj$ ro, sys.user$ ru, sys.type$ rt
where o.owner# = u.user#
  and o.type# <> 10 -- must not be invalid
  and o.oid$ = m.toid
  and o.subname IS NULL -- get the latest version only
  and m.toid = r.toid
  and m.version# = r.version#
  and m.method# = r.method#
  and r.result_toid = ro.oid$
  and ro.owner# = ru.user#
  and r.result_toid = rt.toid
  and r.result_version# = rt.version#
  and (o.owner# = userenv('SCHEMAID')
       or
       o.obj# in (select oa.obj#
                  from sys.objauth$ oa
                  where grantee# in (select kzsrorol
                                     from x$kzsro))
       or /* user has system privileges */
       exists (select null from v$enabledprivs
               where priv_number in (-184 /* EXECUTE ANY TYPE */,
                                     -181 /* CREATE ANY TYPE */)));

CREATE OR REPLACE FORCE VIEW "ALL_MVIEWS"("OWNER","MVIEW_NAME","CONTAINER_NAME","QUERY","QUERY_LEN","UPDATABLE","UPDATE_LOG","MASTER_ROLLBACK_SEG","MASTER_LINK","REWRITE_ENABLED","REWRITE_CAPABILITY","REFRESH_MODE","REFRESH_METHOD","BUILD_MODE","FAST_REFRESHABLE","LAST_REFRESH_TYPE","LAST_REFRESH_DATE","STALENESS","AFTER_FAST_REFRESH","UNKNOWN_PREBUILT","UNKNOWN_PLSQL_FUNC","UNKNOWN_EXTERNAL_TABLE","UNKNOWN_CONSIDER_FRESH","UNKNOWN_IMPORT","UNKNOWN_TRUSTED_FD","COMPILE_STATE","USE_NO_INDEX","STALE_SINCE") AS 
select m."OWNER",m."MVIEW_NAME",m."CONTAINER_NAME",m."QUERY",m."QUERY_LEN",m."UPDATABLE",m."UPDATE_LOG",m."MASTER_ROLLBACK_SEG",m."MASTER_LINK",m."REWRITE_ENABLED",m."REWRITE_CAPABILITY",m."REFRESH_MODE",m."REFRESH_METHOD",m."BUILD_MODE",m."FAST_REFRESHABLE",m."LAST_REFRESH_TYPE",m."LAST_REFRESH_DATE",m."STALENESS",m."AFTER_FAST_REFRESH",m."UNKNOWN_PREBUILT",m."UNKNOWN_PLSQL_FUNC",m."UNKNOWN_EXTERNAL_TABLE",m."UNKNOWN_CONSIDER_FRESH",m."UNKNOWN_IMPORT",m."UNKNOWN_TRUSTED_FD",m."COMPILE_STATE",m."USE_NO_INDEX",m."STALE_SINCE" from dba_mviews m, sys.obj$ o, sys.user$ u
where o.owner#     = u.user#
  and m.mview_name = o.name
  and u.name       = m.owner
  and o.type#      = 2                     /* table */
  and ( u.user# in (userenv('SCHEMAID'), 1)
        or
        o.obj# in ( select obj#
                    from sys.objauth$
                    where grantee# in ( select kzsrorol
                                        from x$kzsro
                                      )
                  )
        or /* user has system privileges */
        exists ( select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
               )
      );

CREATE OR REPLACE FORCE VIEW "ALL_MVIEW_AGGREGATES"("OWNER","MVIEW_NAME","POSITION_IN_SELECT","CONTAINER_COLUMN","AGG_FUNCTION","DISTINCTFLAG","MEASURE") AS 
select u.name, o.name, sa.sumcolpos#, c.name,
       decode(sa.aggfunction, 15, 'AVG', 16, 'SUM', 17, 'COUNT',
                              18, 'MIN', 19, 'MAX',
                              97, 'VARIANCE', 98, 'STDDEV',
                              440, 'USER'),
       decode(sa.flags, 0, 'N', 'Y'),
       sa.aggtext
from sys.sumagg$ sa, sys.obj$ o, sys.user$ u, sys.sum$ s, sys.col$ c
where sa.sumobj# = o.obj#
  AND o.owner# = u.user#
  AND sa.sumobj# = s.obj#
  AND c.obj# = s.containerobj#
  AND c.col# = sa.containercol#
  AND (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      )
  AND bitand(s.xpflags, 8388608) = 0 /* NOT REWRITE EQUIVALENCE SUMMARY */;

CREATE OR REPLACE FORCE VIEW "ALL_MVIEW_ANALYSIS"("OWNER","MVIEW_NAME","MVIEW_TABLE_OWNER","CONTAINER_NAME","LAST_REFRESH_SCN","LAST_REFRESH_DATE","REFRESH_METHOD","SUMMARY","FULLREFRESHTIM","INCREFRESHTIM","CONTAINS_VIEWS","UNUSABLE","RESTRICTED_SYNTAX","INC_REFRESHABLE","KNOWN_STALE","INVALID","REWRITE_ENABLED","QUERY_LEN","QUERY","REVISION") AS 
select u.name, o.name, u.name, s.containernam,
       s.lastrefreshscn, s.lastrefreshdate,
       decode (s.refreshmode, 0, 'NEVER', 1, 'FORCE', 2, 'FAST', 3,'COMPLETE'),
       decode(bitand(s.pflags, 25165824), 25165824, 'N', 'Y'),
       s.fullrefreshtim, s.increfreshtim,
       decode(bitand(s.pflags, 48), 0, 'N', 'Y'),
       decode(bitand(s.mflags, 64), 0, 'N', 'Y'), /* QSMQSUM_UNUSABLE */
       decode(bitand(s.pflags, 1294319), 0, 'Y', 'N'),
       decode(bitand(s.pflags, 236879743), 0, 'Y', 'N'),
       decode(bitand(s.mflags, 1), 0, 'N', 'Y'), /* QSMQSUM_KNOWNSTL */
       decode(o.status, 5, 'Y', 'N'),
       decode(bitand(s.mflags, 4), 0, 'Y', 'N'), /* QSMQSUM_DISABLED */
       s.sumtextlen,s.sumtext,
       s.metaversion/* Metadata revision number */
from sys.user$ u, sys.sum$ s, sys.obj$ o
where o.owner# = u.user#
  and o.obj# = s.obj#
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      )
  and bitand(s.xpflags, 8388608) = 0 /* NOT REWRITE EQUIVALENCE SUMMARY */;

CREATE OR REPLACE FORCE VIEW "ALL_MVIEW_COMMENTS"("OWNER","MVIEW_NAME","COMMENTS") AS 
select u.name, o.name, c.comment$
from sys.obj$ o, sys.user$ u, sys.com$ c, sys.tab$ t
  where o.owner# = u.user# AND o.type# = 2
  and (bitand(t.property, 67108864) = 67108864)         /*mv container table */
  and o.obj# = c.obj#(+)
  and c.col#(+) is NULL
  and o.obj# = t.obj#
  and (o.owner# = userenv('SCHEMAID')
        or
        o.obj# in ( select obj#
                    from sys.objauth$
                    where grantee# in ( select kzsrorol
                                         from x$kzsro
                                       )
                  )
        or /* user has system privileges */
          exists (select null from v$enabledprivs
                  where priv_number in (-173 /* CREATE ANY MV */,
                                        -174 /* ALTER ANY MV */,
                                        -175 /* DROP ANY MV */)
                  )
      );

CREATE OR REPLACE FORCE VIEW "ALL_MVIEW_DETAIL_RELATIONS"("OWNER","MVIEW_NAME","DETAILOBJ_OWNER","DETAILOBJ_NAME","DETAILOBJ_TYPE","DETAILOBJ_ALIAS") AS 
select u.name, o.name, du.name,  do.name,
       decode (sd.detailobjtype, 1, 'TABLE', 2, 'VIEW',
                                3, 'SNAPSHOT', 4, 'CONTAINER', 'UNDEFINED'),
       sd.detailalias
from sys.user$ u, sys.sumdetail$ sd, sys.obj$ o, sys.obj$ do,
sys.user$ du, sys.sum$ s
where o.owner# = u.user#
  and o.obj# = sd.sumobj#
  and do.obj# = sd.detailobj#
  and do.owner# = du.user#
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      )
  AND s.obj# = sd.sumobj#
  AND bitand(s.xpflags, 8388608) = 0 /* NOT REWRITE EQUIVALENCE SUMMARY */;

CREATE OR REPLACE FORCE VIEW "ALL_MVIEW_JOINS"("OWNER","MVIEW_NAME","DETAILOBJ1_OWNER","DETAILOBJ1_RELATION","DETAILOBJ1_COLUMN","OPERATOR","OPERATOR_TYPE","DETAILOBJ2_OWNER","DETAILOBJ2_RELATION","DETAILOBJ2_COLUMN") AS 
select u.name, o.name,
       u1.name, o1.name, c1.name, '=',
       decode(sj.flags, 0, 'I', 1, 'L', 2, 'R'),
       u2.name, o2.name, c2.name
from sys.sumjoin$ sj, sys.obj$ o, sys.user$ u,
     sys.obj$ o1, sys.user$ u1, sys.col$ c1,
     sys.obj$ o2, sys.user$ u2, sys.col$ c2,
     sys.sum$ s
where sj.sumobj# = o.obj#
  AND o.owner# = u.user#
  AND sj.tab1obj# = o1.obj#
  AND o1.owner# = u1.user#
  AND sj.tab1obj# = c1.obj#
  AND sj.tab1col# = c1.intcol#
  AND sj.tab2obj# = o2.obj#
  AND o2.owner# = u2.user#
  AND sj.tab2obj# = c2.obj#
  AND sj.tab2col# = c2.intcol#
  AND (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      )
  AND s.obj# = sj.sumobj#
  AND bitand(s.xpflags, 8388608) = 0 /* NOT REWRITE EQUIVALENCE SUMMARY */;

CREATE OR REPLACE FORCE VIEW "ALL_MVIEW_KEYS"("OWNER","MVIEW_NAME","POSITION_IN_SELECT","CONTAINER_COLUMN","DETAILOBJ_OWNER","DETAILOBJ_NAME","DETAILOBJ_ALIAS","DETAILOBJ_TYPE","DETAILOBJ_COLUMN") AS 
select u1.name, o1.name, sk.sumcolpos#, c1.name,
       u2.name, o2.name, sd.detailalias,
       decode(sk.detailobjtype, 1, 'TABLE', 2, 'VIEW'), c2.name
from sys.sumkey$ sk, sys.obj$ o1, sys.user$ u1, sys.col$ c1, sys.sum$ s,
     sys.sumdetail$ sd, sys.obj$ o2, sys.user$ u2, sys.col$ c2
where sk.sumobj# = o1.obj#
  AND o1.owner# = u1.user#
  AND sk.sumobj# = s.obj#
  AND s.containerobj# = c1.obj#
  AND c1.col# = sk.containercol#
  AND sk.detailobj# = o2.obj#
  AND o2.owner# = u2.user#
  AND sk.sumobj# = sd.sumobj#
  AND sk.detailobj# = sd.detailobj#
  AND sk.detailobj# = c2.obj#
  AND sk.detailcol# = c2.intcol#
  AND (o1.owner# = userenv('SCHEMAID')
       or o1.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      )
  AND bitand(s.xpflags, 8388608) = 0 /* NOT REWRITE EQUIVALENCE SUMMARY */;

CREATE OR REPLACE FORCE VIEW "ALL_MVIEW_LOGS"("LOG_OWNER","MASTER","LOG_TABLE","LOG_TRIGGER","ROWIDS","PRIMARY_KEY","OBJECT_ID","FILTER_COLUMNS","SEQUENCE","INCLUDE_NEW_VALUES") AS 
select s."LOG_OWNER",s."MASTER",s."LOG_TABLE",s."LOG_TRIGGER",s."ROWIDS",s."PRIMARY_KEY",s."OBJECT_ID",s."FILTER_COLUMNS",s."SEQUENCE",s."INCLUDE_NEW_VALUES" from dba_mview_logs s, sys.obj$ o, sys.user$ u
where o.owner#     = u.user#
  and s.log_table = o.name
  and u.name       = s.log_owner
  and o.type#      = 2                     /* table */
  and ( u.user# in (userenv('SCHEMAID'), 1)
        or
        o.obj# in ( select obj#
                    from sys.objauth$
                    where grantee# in ( select kzsrorol
                                        from x$kzsro
                                      )
                  )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_MVIEW_REFRESH_TIMES"("OWNER","NAME","MASTER_OWNER","MASTER","LAST_REFRESH") AS 
select s."OWNER",s."NAME",s."MASTER_OWNER",s."MASTER",s."LAST_REFRESH" from dba_mview_refresh_times s, all_mviews a
where s.owner = a.owner
and   s.name  = a.mview_name;

CREATE OR REPLACE FORCE VIEW "ALL_NESTED_TABLES"("OWNER","TABLE_NAME","TABLE_TYPE_OWNER","TABLE_TYPE_NAME","PARENT_TABLE_NAME","PARENT_TABLE_COLUMN","STORAGE_SPEC","RETURN_TYPE","ELEMENT_SUBSTITUTABLE") AS 
select u.name, o.name,
       nvl2(ct.synobj#, (select u.name from user$ u, obj$ o
            where o.owner#=u.user# and o.obj#=ct.synobj#), ut.name),
       nvl2(ct.synobj#, (select o.name from obj$ o
            where o.obj#=ct.synobj#), ot.name),
       op.name, ac.name,
       lpad(decode(bitand(ct.flags, 64), 64, 'USER_SPECIFIED', 'DEFAULT'), 30),
       lpad(decode(bitand(ct.flags, 32), 32, 'LOCATOR', 'VALUE'), 20),
       lpad((case when bitand(ct.flags, 5120)=0 and bitand(t.properties, 8)= 8
       then 'Y' else 'N' end), 25)
from sys.ntab$ n, sys.obj$ o, sys.obj$ op, sys.obj$ ot,
  sys.col$ c, sys.coltype$ ct, sys.user$ u, sys.user$ ut, sys.attrcol$ ac,
  sys.type$ t, sys.collection$ cl
where o.owner# = u.user#
  and op.owner# = u.user#
  and n.obj# = op.obj#
  and n.ntab# = o.obj#
  and c.obj# = op.obj#
  and n.intcol# = c.intcol#
  and c.obj# = ac.obj#
  and c.intcol# = ac.intcol#
  and op.obj# = ct.obj#
  and ct.toid = ot.oid$
  and ct.intcol#=n.intcol#
  and ot.owner# = ut.user#
  and ct.toid=cl.toid
  and cl.elem_toid=t.tvoid
  and bitand(ct.flags,4)=4
  and bitand(c.property,32768) != 32768           /* not unused column */
  and (op.owner# = userenv('SCHEMAID')
       or op.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      )
union all
select u.name, o.name,
       nvl2(ct.synobj#, (select u.name from user$ u, obj$ o
            where o.owner#=u.user# and o.obj#=ct.synobj#), ut.name),
       nvl2(ct.synobj#, (select o.name from obj$ o
            where o.obj#=ct.synobj#), ot.name),
       op.name, c.name,
       lpad(decode(bitand(ct.flags, 64), 64, 'USER_SPECIFIED', 'DEFAULT'), 30),
       lpad(decode(bitand(ct.flags, 32), 32, 'LOCATOR', 'VALUE'), 20),
       lpad((case when bitand(ct.flags, 5120)=0 and bitand(t.properties, 8)= 8
       then 'Y' else 'N' end), 25)
from sys.ntab$ n, sys.obj$ o, sys.obj$ op, sys.obj$ ot, sys.col$ c,
  sys.coltype$ ct, sys.user$ u, sys.user$ ut, sys.type$ t, sys.collection$ cl
where o.owner# = u.user#
  and op.owner# = u.user#
  and n.obj# = op.obj#
  and n.ntab# = o.obj#
  and c.obj# = op.obj#
  and n.intcol# = c.intcol#
  and bitand(c.property,1)=0
  and op.obj# = ct.obj#
  and ct.toid = ot.oid$
  and ct.intcol#=n.intcol#
  and ot.owner# = ut.user#
  and ct.toid=cl.toid
  and cl.elem_toid=t.tvoid
  and bitand(ct.flags,4)=4
  and bitand(c.property,32768) != 32768           /* not unused column */
  and (op.owner# = userenv('SCHEMAID')
       or op.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_NESTED_TABLE_COLS"("OWNER","TABLE_NAME","COLUMN_NAME","DATA_TYPE","DATA_TYPE_MOD","DATA_TYPE_OWNER","DATA_LENGTH","DATA_PRECISION","DATA_SCALE","NULLABLE","COLUMN_ID","DEFAULT_LENGTH","DATA_DEFAULT","NUM_DISTINCT","LOW_VALUE","HIGH_VALUE","DENSITY","NUM_NULLS","NUM_BUCKETS","LAST_ANALYZED","SAMPLE_SIZE","CHARACTER_SET_NAME","CHAR_COL_DECL_LENGTH","GLOBAL_STATS","USER_STATS","AVG_COL_LEN","CHAR_LENGTH","CHAR_USED","V80_FMT_IMAGE","DATA_UPGRADED","HIDDEN_COLUMN","VIRTUAL_COLUMN","SEGMENT_COLUMN_ID","INTERNAL_COLUMN_ID","HISTOGRAM","QUALIFIED_COL_NAME") AS 
select u.name, o.name,
       c.name,
       decode(c.type#, 1, decode(c.charsetform, 2, 'NVARCHAR2', 'VARCHAR2'),
                       2, decode(c.scale, null,
                                 decode(c.precision#, null, 'NUMBER', 'FLOAT'),
                                 'NUMBER'),
                       8, 'LONG',
                       9, decode(c.charsetform, 2, 'NCHAR VARYING', 'VARCHAR'),
                       12, 'DATE',
                       23, 'RAW', 24, 'LONG RAW',
                       58, nvl2(ac.synobj#, (select o.name from obj$ o
                                where o.obj#=ac.synobj#), ot.name),
                       69, 'ROWID',
                       96, decode(c.charsetform, 2, 'NCHAR', 'CHAR'),
                       100, 'BINARY_FLOAT',
                       101, 'BINARY_DOUBLE',
                       105, 'MLSLABEL',
                       106, 'MLSLABEL',
                       111, nvl2(ac.synobj#, (select o.name from obj$ o
                                 where o.obj#=ac.synobj#), ot.name),
                       112, decode(c.charsetform, 2, 'NCLOB', 'CLOB'),
                       113, 'BLOB', 114, 'BFILE', 115, 'CFILE',
                       121, nvl2(ac.synobj#, (select o.name from obj$ o
                                 where o.obj#=ac.synobj#), ot.name),
                       122, nvl2(ac.synobj#, (select o.name from obj$ o
                                 where o.obj#=ac.synobj#), ot.name),
                       123, nvl2(ac.synobj#, (select o.name from obj$ o
                                 where o.obj#=ac.synobj#), ot.name),
                       178, 'TIME(' ||c.scale|| ')',
                       179, 'TIME(' ||c.scale|| ')' || ' WITH TIME ZONE',
                       180, 'TIMESTAMP(' ||c.scale|| ')',
                       181, 'TIMESTAMP(' ||c.scale|| ')' || ' WITH TIME ZONE',
                       231, 'TIMESTAMP(' ||c.scale|| ')' || ' WITH LOCAL TIME ZONE',
                       182, 'INTERVAL YEAR(' ||c.precision#||') TO MONTH',
                       183, 'INTERVAL DAY(' ||c.precision#||') TO SECOND(' ||
                             c.scale || ')',
                       208, 'UROWID',
                       'UNDEFINED'),
       decode(c.type#, 111, 'REF'),
       nvl2(ac.synobj#, (select u.name from user$ u, obj$ o
            where o.owner#=u.user# and o.obj#=ac.synobj#), ut.name),
       c.length, c.precision#, c.scale,
       decode(sign(c.null$),-1,'D', 0, 'Y', 'N'),
       decode(c.col#, 0, to_number(null), c.col#), c.deflength,
       c.default$, h.distcnt, h.lowval, h.hival, h.density, h.null_cnt,
       case when h.bucket_cnt > 255 then h.row_cnt else
         decode(h.row_cnt, h.distcnt, h.row_cnt, h.bucket_cnt)
       end,
       h.timestamp#, h.sample_size,
       decode(c.charsetform, 1, 'CHAR_CS',
                             2, 'NCHAR_CS',
                             3, NLS_CHARSET_NAME(c.charsetid),
                             4, 'ARG:'||c.charsetid),
       decode(c.charsetid, 0, to_number(NULL),
                           nls_charset_decl_len(c.length, c.charsetid)),
       decode(bitand(h.spare2, 2), 2, 'YES', 'NO'),
       decode(bitand(h.spare2, 1), 1, 'YES', 'NO'),
       h.avgcln,
       c.spare3,
       decode(c.type#, 1, decode(bitand(c.property, 8388608), 0, 'B', 'C'),
                      96, decode(bitand(c.property, 8388608), 0, 'B', 'C'),
                      null),
       decode(bitand(ac.flags, 128), 128, 'YES', 'NO'),
       decode(o.status, 1, decode(bitand(ac.flags, 256), 256, 'NO', 'YES'),
                        decode(bitand(ac.flags, 2), 2, 'NO',
                               decode(bitand(ac.flags, 4), 4, 'NO',
                                      decode(bitand(ac.flags, 8), 8, 'NO',
                                             'N/A')))),
       decode(c.property, 0, 'NO', decode(bitand(c.property, 32), 32, 'YES',
                                          'NO')),
       decode(c.property, 0, 'NO', decode(bitand(c.property, 8), 8, 'YES',
                                          'NO')),
       decode(c.segcol#, 0, to_number(null), c.segcol#), c.intcol#,
       case when h.bucket_cnt > 255 then 'FREQUENCY' else
         decode(nvl(h.row_cnt, 0), 0, 'NONE',
                                   h.distcnt, 'FREQUENCY', 'HEIGHT BALANCED')
       end,
       decode(bitand(c.property, 1024), 1024,
              (select decode(bitand(cl.property, 1), 1, rc.name, cl.name)
               from sys.col$ cl, attrcol$ rc where cl.intcol# = c.intcol#-1
               and cl.obj# = c.obj# and c.obj# = rc.obj#(+) and
               cl.intcol# = rc.intcol#(+)),
              decode(bitand(c.property, 1), 0, c.name,
                     (select tc.name from sys.attrcol$ tc
                      where c.obj# = tc.obj# and c.intcol# = tc.intcol#)))
from sys.col$ c, sys.obj$ o, sys.hist_head$ h, sys.user$ u,
     sys.coltype$ ac, sys.obj$ ot, sys.user$ ut, sys.tab$ t
where o.obj# = c.obj#
  and o.owner# = u.user#
  and c.obj# = h.obj#(+) and c.intcol# = h.intcol#(+)
  and c.obj# = ac.obj#(+) and c.intcol# = ac.intcol#(+)
  and ac.toid = ot.oid$(+)
  and ot.type#(+) = 13
  and ot.owner# = ut.user#(+)
  and o.obj# = t.obj#
  and bitand(t.property, 8192) = 8192        /* nested tables */
  and (o.owner# = userenv('SCHEMAID')
        or
        o.obj# in ( select obj#
                    from sys.objauth$
                    where grantee# in ( select kzsrorol
                                         from x$kzsro
                                       )
                  )
        or /* user has system privileges */
          exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                  )
       );

CREATE OR REPLACE FORCE VIEW "ALL_OBJECTS"("OWNER","OBJECT_NAME","SUBOBJECT_NAME","OBJECT_ID","DATA_OBJECT_ID","OBJECT_TYPE","CREATED","LAST_DDL_TIME","TIMESTAMP","STATUS","TEMPORARY","GENERATED","SECONDARY") AS 
select u.name, o.name, o.subname, o.obj#, o.dataobj#,
       decode(o.type#, 0, 'NEXT OBJECT', 1, 'INDEX', 2, 'TABLE', 3, 'CLUSTER',
                      4, 'VIEW', 5, 'SYNONYM', 6, 'SEQUENCE',
                      7, 'PROCEDURE', 8, 'FUNCTION', 9, 'PACKAGE',
                      11, 'PACKAGE BODY', 12, 'TRIGGER',
                      13, 'TYPE', 14, 'TYPE BODY',
                      19, 'TABLE PARTITION', 20, 'INDEX PARTITION', 21, 'LOB',
                      22, 'LIBRARY', 23, 'DIRECTORY', 24, 'QUEUE',
                      28, 'JAVA SOURCE', 29, 'JAVA CLASS', 30, 'JAVA RESOURCE',
                      32, 'INDEXTYPE', 33, 'OPERATOR',
                      34, 'TABLE SUBPARTITION', 35, 'INDEX SUBPARTITION',
                      40, 'LOB PARTITION', 41, 'LOB SUBPARTITION',
                      42, NVL((SELECT distinct 'REWRITE EQUIVALENCE'
                               FROM sum$ s
                               WHERE s.obj#=o.obj#
                                     and bitand(s.xpflags, 8388608) = 8388608),
                              'MATERIALIZED VIEW'),
                      43, 'DIMENSION',
                      44, 'CONTEXT', 46, 'RULE SET', 47, 'RESOURCE PLAN',
                      48, 'CONSUMER GROUP',
                      55, 'XML SCHEMA', 56, 'JAVA DATA',
                      57, 'SECURITY PROFILE', 59, 'RULE',
                      60, 'CAPTURE', 61, 'APPLY',
                      62, 'EVALUATION CONTEXT',
                      66, 'JOB', 67, 'PROGRAM', 68, 'JOB CLASS', 69, 'WINDOW',
                      72, 'WINDOW GROUP', 74, 'SCHEDULE',
                     'UNDEFINED'),
       o.ctime, o.mtime,
       to_char(o.stime, 'YYYY-MM-DD:HH24:MI:SS'),
       decode(o.status, 0, 'N/A', 1, 'VALID', 'INVALID'),
       decode(bitand(o.flags, 2), 0, 'N', 2, 'Y', 'N'),
       decode(bitand(o.flags, 4), 0, 'N', 4, 'Y', 'N'),
       decode(bitand(o.flags, 16), 0, 'N', 16, 'Y', 'N')
from sys.obj$ o, sys.user$ u
where o.owner# = u.user#
  and o.linkname is null
  and (o.type# not in (1  /* INDEX - handled below */,
                      10 /* NON-EXISTENT */)
       or
       (o.type# = 1 and 1 = (select 1
                             from sys.ind$ i
                            where i.obj# = o.obj#
                              and i.type# in (1, 2, 3, 4, 6, 7, 9))))
  and o.name != '_NEXT_OBJECT'
  and o.name != '_default_auditing_options_'
  and
  (
    o.owner# in (userenv('SCHEMAID'), 1 /* PUBLIC */)
    or
    (
      /* EXECUTE privilege does not let user see package/type body */
      o.type# != 11 and o.type# != 14
      and
      o.obj# in (select obj# from sys.objauth$
                 where grantee# in (select kzsrorol from x$kzsro)
                   and privilege# in (3 /* DELETE */,   6 /* INSERT */,
                                      7 /* LOCK */,     9 /* SELECT */,
                                      10 /* UPDATE */, 12 /* EXECUTE */,
                                      11 /* USAGE */,  16 /* CREATE */,
                                      17 /* READ */,   18 /* WRITE  */ ))
    )
    or
    (
       o.type# in (7, 8, 9, 28, 29, 30, 56) /* prc, fcn, pkg */
       and
       exists (select null from v$enabledprivs
               where priv_number in (
                                      -144 /* EXECUTE ANY PROCEDURE */,
                                      -141 /* CREATE ANY PROCEDURE */
                                    )
              )
    )
    or
    (
       o.type# in (12) /* trigger */
       and
       exists (select null from v$enabledprivs
               where priv_number in (
                                      -152 /* CREATE ANY TRIGGER */
                                    )
              )
    )
    or
    (
       o.type# = 11 /* pkg body */
       and
       exists (select null from v$enabledprivs
               where priv_number =   -141 /* CREATE ANY PROCEDURE */
              )
    )
    or
    (
       o.type# in (22) /* library */
       and
       exists (select null from v$enabledprivs
               where priv_number in (
                                      -189 /* CREATE ANY LIBRARY */,
                                      -190 /* ALTER ANY LIBRARY */,
                                      -191 /* DROP ANY LIBRARY */,
                                      -192 /* EXECUTE ANY LIBRARY */
                                    )
              )
    )
    or
    (
       /* index, table, view, synonym, table partn, indx partn, */
       /* table subpartn, index subpartn, cluster               */
       o.type# in (1, 2, 3, 4, 5, 19, 20, 34, 35)
       and
       exists (select null from v$enabledprivs
               where priv_number in (-45 /* LOCK ANY TABLE */,
                                     -47 /* SELECT ANY TABLE */,
                                     -48 /* INSERT ANY TABLE */,
                                     -49 /* UPDATE ANY TABLE */,
                                     -50 /* DELETE ANY TABLE */)
               )
    )
    or
    ( o.type# = 6 /* sequence */
      and
      exists (select null from v$enabledprivs
              where priv_number = -109 /* SELECT ANY SEQUENCE */)
    )
    or
    ( o.type# = 13 /* type */
      and
      exists (select null from v$enabledprivs
              where priv_number in (-184 /* EXECUTE ANY TYPE */,
                                    -181 /* CREATE ANY TYPE */))
    )
    or
    (
      o.type# = 14 /* type body */
      and
      exists (select null from v$enabledprivs
              where priv_number = -181 /* CREATE ANY TYPE */)
    )
    or
    (
       o.type# = 23 /* directory */
       and
       exists (select null from v$enabledprivs
               where priv_number in (
                                      -177 /* CREATE ANY DIRECTORY */,
                                      -178 /* DROP ANY DIRECTORY */
                                    )
              )
    )
    or
    (
       o.type# = 42 /* summary jjf table privs have to change to summary */
       and
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
    )
    or
    (
      o.type# = 32   /* indextype */
      and
      exists (select null from v$enabledprivs
               where priv_number in (
                                      -205  /* CREATE INDEXTYPE */ ,
                                      -206  /* CREATE ANY INDEXTYPE */ ,
                                      -207  /* ALTER ANY INDEXTYPE */ ,
                                      -208  /* DROP ANY INDEXTYPE */
                                    )
             )
    )
    or
    (
      o.type# = 33   /* operator */
      and
      exists (select null from v$enabledprivs
               where priv_number in (
                                      -200  /* CREATE OPERATOR */ ,
                                      -201  /* CREATE ANY OPERATOR */ ,
                                      -202  /* ALTER ANY OPERATOR */ ,
                                      -203  /* DROP ANY OPERATOR */ ,
                                      -204  /* EXECUTE OPERATOR */
                                    )
             )
    )
    or
    (
      o.type# = 44   /* context */
      and
      exists (select null from v$enabledprivs
               where priv_number in (
                                      -222  /* CREATE ANY CONTEXT */,
                                      -223  /* DROP ANY CONTEXT */
                                    )
             )
    )
    or
    (
      o.type# = 48  /* resource consumer group */
      and
      exists (select null from v$enabledprivs
              where priv_number in (12)  /* switch consumer group privilege */
             )
    )
    or
    (
      o.type# = 46 /* rule set */
      and
      exists (select null from v$enabledprivs
               where priv_number in (
                                      -251, /* create any rule set */
                                      -252, /* alter any rule set */
                                      -253, /* drop any rule set */
                                      -254  /* execute any rule set */
                                    )
             )
    )
    or
    (
      o.type# = 55 /* XML schema */
      and
      1 = (select /*+ NO_MERGE */ xml_schema_name_present.is_schema_present(o.name, u2.id2) id1 from (select /*+ NO_MERGE */ userenv('SCHEMAID') id2 from dual) u2)
      /* we need a sub-query instead of the directy invoking
       * xml_schema_name_present, because inside a view even the function
       * arguments are evaluated as definers rights.
       */
    )
    or
    (
      o.type# = 59 /* rule */
      and
      exists (select null from v$enabledprivs
               where priv_number in (
                                      -258, /* create any rule */
                                      -259, /* alter any rule */
                                      -260, /* drop any rule */
                                      -261  /* execute any rule */
                                    )
             )
    )
    or
    (
      o.type# = 62 /* evaluation context */
      and
      exists (select null from v$enabledprivs
               where priv_number in (
                                      -246, /* create any evaluation context */
                                      -247, /* alter any evaluation context */
                                      -248, /* drop any evaluation context */
                                      -249 /* execute any evaluation context */
                                    )
             )
    )
    or
    (
      o.type# = 66 /* scheduler job */
      and
      exists (select null from v$enabledprivs
               where priv_number = -265 /* create any job */
             )
    )
    or
    (
      o.type# = 67 /* scheduler program */
      and
      exists (select null from v$enabledprivs
               where priv_number in (
                                      -265, /* create any job */
                                      -266 /* execute any program */
                                    )
             )
    )
    or
    (
      o.type# = 68 /* scheduler job class */
      and
      exists (select null from v$enabledprivs
               where priv_number in (
                                      -268, /* manage scheduler */
                                      -267 /* execute any class */
                                    )
             )
    )
    or o.type# in (69, 72, 74)
    /* scheduler windows, window groups and schedules */
    /* no privileges are needed to view these objects */
  );

CREATE OR REPLACE FORCE VIEW "ALL_OBJECT_TABLES"("OWNER","TABLE_NAME","TABLESPACE_NAME","CLUSTER_NAME","IOT_NAME","PCT_FREE","PCT_USED","INI_TRANS","MAX_TRANS","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENTS","MAX_EXTENTS","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","LOGGING","BACKED_UP","NUM_ROWS","BLOCKS","EMPTY_BLOCKS","AVG_SPACE","CHAIN_CNT","AVG_ROW_LEN","AVG_SPACE_FREELIST_BLOCKS","NUM_FREELIST_BLOCKS","DEGREE","INSTANCES","CACHE","TABLE_LOCK","SAMPLE_SIZE","LAST_ANALYZED","PARTITIONED","IOT_TYPE","OBJECT_ID_TYPE","TABLE_TYPE_OWNER","TABLE_TYPE","TEMPORARY","SECONDARY","NESTED","BUFFER_POOL","ROW_MOVEMENT","GLOBAL_STATS","USER_STATS","DURATION","SKIP_CORRUPT","MONITORING","CLUSTER_OWNER","DEPENDENCIES","COMPRESSION","DROPPED") AS 
select u.name, o.name, decode(bitand(t.property, 2151678048), 0, ts.name, null),
       decode(bitand(t.property, 1024), 0, null, co.name),
       decode((bitand(t.property, 512)+bitand(t.flags, 536870912)),
              0, null, co.name),
       decode(bitand(t.property, 32+64), 0, mod(t.pctfree$, 100), 64, 0, null),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
          decode(bitand(t.property, 32+64), 0, t.pctused$, 64, 0, null)),
       decode(bitand(t.property, 32), 0, t.initrans, null),
       decode(bitand(t.property, 32), 0, t.maxtrans, null),
       s.iniexts * ts.blocksize,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extsize * ts.blocksize),
       s.minexts, s.maxexts,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extpct),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
         decode(bitand(o.flags, 2), 2, 1, decode(s.lists, 0, 1, s.lists))),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
         decode(bitand(o.flags, 2), 2, 1, decode(s.groups, 0, 1, s.groups))),
       decode(bitand(t.property, 32), 32, null,
                decode(bitand(t.flags, 32), 0, 'YES', 'NO')),
       decode(bitand(t.flags,1), 0, 'Y', 1, 'N', '?'),
       t.rowcnt,
       decode(bitand(t.property, 64), 0, t.blkcnt, null),
       decode(bitand(t.property, 64), 0, t.empcnt, null),
       t.avgspc, t.chncnt, t.avgrln, t.avgspc_flb,
       decode(bitand(t.property, 64), 0, t.flbcnt, null),
       lpad(decode(t.degree, 32767, 'DEFAULT', nvl(t.degree,1)),10),
       lpad(decode(t.instances, 32767, 'DEFAULT', nvl(t.instances,1)),10),
       lpad(decode(bitand(t.flags, 8), 8, 'Y', 'N'),5),
       decode(bitand(t.flags, 6), 0, 'ENABLED', 'DISABLED'),
       t.samplesize, t.analyzetime,
       decode(bitand(t.property, 32), 32, 'YES', 'NO'),
       decode(bitand(t.property, 64), 64, 'IOT',
               decode(bitand(t.property, 512), 512, 'IOT_OVERFLOW',
               decode(bitand(t.flags, 536870912), 536870912, 'IOT_MAPPING', null))),
       decode(bitand(t.property, 4096), 4096, 'USER-DEFINED',
                                              'SYSTEM GENERATED'),
       nvl2(ac.synobj#, su.name, tu.name),
       nvl2(ac.synobj#, so.name, ty.name),
       decode(bitand(o.flags, 2), 0, 'N', 2, 'Y', 'N'),
       decode(bitand(o.flags, 16), 0, 'N', 16, 'Y', 'N'),
       decode(bitand(t.property, 8192), 8192, 'YES', 'NO'),
       decode(bitand(o.flags, 2), 2, 'DEFAULT',
             decode(s.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL)),
       decode(bitand(t.flags, 131072), 131072, 'ENABLED', 'DISABLED'),
       decode(bitand(t.flags, 512), 0, 'NO', 'YES'),
       decode(bitand(t.flags, 256), 0, 'NO', 'YES'),
       decode(bitand(o.flags, 2), 0, NULL,
          decode(bitand(t.property, 8388608), 8388608,
                 'SYS$SESSION', 'SYS$TRANSACTION')),
       decode(bitand(t.flags, 1024), 1024, 'ENABLED', 'DISABLED'),
       decode(bitand(o.flags, 2), 2, 'NO',
           decode(bitand(t.property, 2147483648), 2147483648, 'NO',
              decode(ksppcv.ksppstvl, 'TRUE', 'YES', 'NO'))),
       decode(bitand(t.property, 1024), 0, null, cu.name),
       decode(bitand(t.flags, 8388608), 8388608, 'ENABLED', 'DISABLED'),
       decode(bitand(t.property, 32), 32, null,
                decode(bitand(s.spare1, 2048), 2048, 'ENABLED', 'DISABLED')),
       decode(bitand(o.flags, 128), 128, 'YES', 'NO')
from sys.user$ u, sys.ts$ ts, sys.seg$ s, sys.obj$ co, sys.tab$ t, sys.obj$ o,
     sys.coltype$ ac, sys.obj$ ty, sys.user$ tu, sys.col$ tc,
     sys.obj$ cx, sys.user$ cu, sys.obj$ so, sys.user$ su,
     x$ksppcv ksppcv, x$ksppi ksppi
where o.owner# = u.user#
  and o.obj# = t.obj#
  and bitand(t.property, 1) = 1
  and bitand(o.flags, 128) = 0
  and t.obj# = tc.obj#
  and tc.name = 'SYS_NC_ROWINFO$'
  and tc.obj# = ac.obj#
  and tc.intcol# = ac.intcol#
  and ac.toid = ty.oid$
  and ty.type# <> 10
  and ty.owner# = tu.user#
  and t.bobj# = co.obj# (+)
  and t.ts# = ts.ts#
  and t.file# = s.file# (+)
  and t.block# = s.block# (+)
  and t.ts# = s.ts# (+)
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      )
  and t.dataobj# = cx.obj# (+)
  and cx.owner# = cu.user# (+)
  and ac.synobj# = so.obj# (+)
  and so.owner# = su.user# (+)
  and ksppi.indx = ksppcv.indx
  and ksppi.ksppinm = '_dml_monitoring_enabled';

CREATE OR REPLACE FORCE VIEW "ALL_OBJ_COLATTRS"("OWNER","TABLE_NAME","COLUMN_NAME","SUBSTITUTABLE") AS 
select u.name, o.name, c.name,
  lpad(decode(bitand(ct.flags, 512), 512, 'Y', 'N'), 15)
from sys.coltype$ ct, sys.obj$ o, sys.col$ c, sys.user$ u
where o.owner# = u.user#
  and bitand(ct.flags, 2) = 2                                 /* ADT column */
  and o.obj#=ct.obj#
  and o.obj#=c.obj#
  and c.intcol#=ct.intcol#
  and bitand(c.property,32768) != 32768                 /* not unused column */
  and not exists (select null                   /* Doesn't exist in attrcol$ */
                  from sys.attrcol$ ac
                  where ac.intcol#=ct.intcol#
                        and ac.obj#=ct.obj#)
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      )
union all
select u.name, o.name, ac.name,
  lpad(decode(bitand(ct.flags, 512), 512, 'Y', 'N'), 15)
from sys.coltype$ ct, sys.obj$ o, sys.attrcol$ ac, sys.user$ u, col$ c
where o.owner# = u.user#
  and bitand(ct.flags, 2) = 2                                /* ADT column */
  and o.obj#=ct.obj#
  and o.obj#=c.obj#
  and o.obj#=ac.obj#
  and c.intcol#=ct.intcol#
  and c.intcol#=ac.intcol#
  and bitand(c.property,32768) != 32768               /* not unused column */
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_OPANCILLARY"("OWNER","OPERATOR_NAME","BINDING#","PRIMOP_OWNER","PRIMOP_NAME","PRIMOP_BIND#") AS 
select distinct u.name, o.name, a.bind#, u1.name, o1.name, a1.primbind#
from   sys.user$ u, sys.obj$ o, sys.opancillary$ a, sys.user$ u1, sys.obj$ o1,
       sys.opancillary$ a1
where  a.obj#=o.obj# and o.owner#=u.user#   AND
       a1.primop#=o1.obj# and o1.owner#=u1.user# and a.obj#=a1.obj#
  and ( o.owner# = userenv ('SCHEMAID')
    or
    o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or exists (select null from v$enabledprivs
                  where priv_number in (-200 /* CREATE OPERATOR */,
                                        -201 /* CREATE ANY OPERATOR */,
                                        -202 /* ALTER ANY OPERATOR */,
                                        -203 /* DROP ANY OPERATOR */,
                                        -204 /* EXECUTE OPERATOR */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_OPARGUMENTS"("OWNER","OPERATOR_NAME","BINDING#","POSITION","ARGUMENT_TYPE") AS 
select  c.name, b.name, a.bind#, a.position, a.type
  from  sys.oparg$ a, sys.obj$ b, sys.user$ c
  where a.obj# = b.obj# and b.owner# = c.user#
  and  (b.owner# = userenv ('SCHEMAID')
        or
        b.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
           or exists (select null from v$enabledprivs
                  where priv_number in (-200 /* CREATE OPERATOR */,
                                        -201 /* CREATE ANY OPERATOR */,
                                        -202 /* ALTER ANY OPERATOR */,
                                        -203 /* DROP ANY OPERATOR */,
                                        -204 /* EXECUTE OPERATOR */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_OPBINDINGS"("OWNER","OPERATOR_NAME","BINDING#","FUNCTION_NAME","RETURN_SCHEMA","RETURN_TYPE","IMPLEMENTATION_TYPE_SCHEMA","IMPLEMENTATION_TYPE","PROPERTY") AS 
select   c.name, b.name, a.bind#, a.functionname, a.returnschema,
         a.returntype, a.impschema, a.imptype,
        decode(bitand(a.property,31), 1, 'WITH INDEX CONTEXT',
               3 , 'COMPUTE ANCILLARY DATA', 4 , 'ANCILLARY TO' ,
               16 , 'WITH COLUMN CONTEXT' ,
               17,  'WITH INDEX, COLUMN CONTEXT',
               19, 'COMPUTE ANCILLARY DATA, WITH COLUMN CONTEXT')
   from  sys.opbinding$ a, sys.obj$ b, sys.user$ c where
  a.obj# = b.obj# and b.owner# = c.user#
  and ( b.owner# = userenv ('SCHEMAID')
    or
    b.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or exists (select null from v$enabledprivs
                  where priv_number in (-200 /* CREATE OPERATOR */,
                                        -201 /* CREATE ANY OPERATOR */,
                                        -202 /* ALTER ANY OPERATOR */,
                                        -203 /* DROP ANY OPERATOR */,
                                        -204 /* EXECUTE OPERATOR */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_OPERATORS"("OWNER","OPERATOR_NAME","NUMBER_OF_BINDS") AS 
select c.name, b.name, a.numbind from
  sys.operator$ a, sys.obj$ b, sys.user$ c where
  a.obj# = b.obj# and b.owner# = c.user# and
  ( b.owner# = userenv ('SCHEMAID')
    or
    b.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or exists (select null from v$enabledprivs
                  where priv_number in (-200 /* CREATE OPERATOR */,
                                        -201 /* CREATE ANY OPERATOR */,
                                        -202 /* ALTER ANY OPERATOR */,
                                        -203 /* DROP ANY OPERATOR */,
                                        -204 /* EXECUTE OPERATOR */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_OPERATOR_COMMENTS"("OWNER","OPERATOR_NAME","COMMENTS") AS 
select u.name, o.name, c.comment$
from   sys.obj$ o, sys.operator$ op, sys.com$ c, sys.user$ u
where  o.obj# = op.obj# and c.obj# = op.obj# and u.user# = o.owner#
       and
       ( o.owner# = userenv('SCHEMAID')
         or
         o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
         or exists (select null from v$enabledprivs
                    where priv_number in (-200 /* CREATE OPERATOR */,
                                        -201 /* CREATE ANY OPERATOR */,
                                        -202 /* ALTER ANY OPERATOR */,
                                        -203 /* DROP ANY OPERATOR */,
                                        -204 /* EXECUTE OPERATOR */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_PARTIAL_DROP_TABS"("OWNER","TABLE_NAME") AS 
select u.name, o.name
from sys.user$ u, sys.obj$ o, sys.tab$ t
where o.owner# = u.user#
  and o.obj# = t.obj#
  and bitand(t.flags,32768) = 32768
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                 )
      )
  group by u.name, o.name;

CREATE OR REPLACE FORCE VIEW "ALL_PART_COL_STATISTICS"("OWNER","TABLE_NAME","PARTITION_NAME","COLUMN_NAME","NUM_DISTINCT","LOW_VALUE","HIGH_VALUE","DENSITY","NUM_NULLS","NUM_BUCKETS","SAMPLE_SIZE","LAST_ANALYZED","GLOBAL_STATS","USER_STATS","AVG_COL_LEN","HISTOGRAM") AS 
select u.name, o.name, o.subname, tp.cname, h.distcnt, h.lowval, h.hival,
       h.density, h.null_cnt,
       case when h.bucket_cnt > 255 then h.row_cnt else
         decode(h.row_cnt, h.distcnt, h.row_cnt, h.bucket_cnt)
       end,
       h.sample_size, h.timestamp#,
       decode(bitand(h.spare2, 2), 2, 'YES', 'NO'),
       decode(bitand(h.spare2, 1), 1, 'YES', 'NO'),
       h.avgcln,
       case when h.bucket_cnt > 255 then 'FREQUENCY' else
         decode(nvl(h.row_cnt, 0), 0, 'NONE',
                                   h.distcnt, 'FREQUENCY', 'HEIGHT BALANCED')
       end
from sys.obj$ o, sys.hist_head$ h, tp$ tp, user$ u
where o.obj# = tp.obj# and o.owner# = u.user#
  and tp.obj# = h.obj#(+) and tp.intcol# = h.intcol#(+)
  and o.type# = 19 /* TABLE PARTITION */
  and (o.owner# = userenv('SCHEMAID')
        or tp.bo# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
        or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_PART_HISTOGRAMS"("OWNER","TABLE_NAME","PARTITION_NAME","COLUMN_NAME","BUCKET_NUMBER","ENDPOINT_VALUE","ENDPOINT_ACTUAL_VALUE") AS 
select u.name,
       o.name, o.subname,
       tp.cname,
       h.bucket,
       h.endpoint,
       h.epvalue
from sys.obj$ o, sys.histgrm$ h, sys.user$ u, tp$ tp
where o.obj# = tp.obj# and tp.obj# = h.obj#
      and tp.intcol# = h.intcol#
      and o.type# = 19 /* TABLE PARTITION */
      and o.owner# = u.user# and
      (o.owner# = userenv('SCHEMAID')
        or
        tp.bo# in ( select obj#
                    from sys.objauth$
                    where grantee# in ( select kzsrorol
                                         from x$kzsro
                                       )
                  )
        or /* user has system privileges */
          exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                  )
       )
union
select u.name,
       o.name, o.subname,
       tp.cname,
       0,
       h.minimum,
       null
from sys.obj$ o, sys.hist_head$ h, sys.user$ u, tp$ tp
where o.obj# = tp.obj# and tp.obj# = h.obj#
      and tp.intcol# = h.intcol#
      and o.type# = 19 /* TABLE PARTITION */
      and h.bucket_cnt = 1
      and o.owner# = u.user# and
      (o.owner# = userenv('SCHEMAID')
        or
        tp.bo# in ( select obj#
                    from sys.objauth$
                    where grantee# in ( select kzsrorol
                                         from x$kzsro
                                       )
                  )
        or /* user has system privileges */
          exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                  )
       )
union
select u.name,
       o.name, o.subname,
       tp.cname,
       1,
       h.maximum,
       null
from sys.obj$ o, sys.hist_head$ h, sys.user$ u, tp$ tp
where o.obj# = tp.obj# and tp.obj# = h.obj#
      and tp.intcol# = h.intcol#
      and o.type# = 19 /* TABLE PARTITION */
      and h.bucket_cnt = 1
      and o.owner# = u.user# and
      (o.owner# = userenv('SCHEMAID')
        or
        tp.bo# in ( select obj#
                    from sys.objauth$
                    where grantee# in ( select kzsrorol
                                         from x$kzsro
                                       )
                  )
        or /* user has system privileges */
          exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                  )
       );

CREATE OR REPLACE FORCE VIEW "ALL_PART_INDEXES"("OWNER","INDEX_NAME","TABLE_NAME","PARTITIONING_TYPE","SUBPARTITIONING_TYPE","PARTITION_COUNT","DEF_SUBPARTITION_COUNT","PARTITIONING_KEY_COUNT","SUBPARTITIONING_KEY_COUNT","LOCALITY","ALIGNMENT","DEF_TABLESPACE_NAME","DEF_PCT_FREE","DEF_INI_TRANS","DEF_MAX_TRANS","DEF_INITIAL_EXTENT","DEF_NEXT_EXTENT","DEF_MIN_EXTENTS","DEF_MAX_EXTENTS","DEF_PCT_INCREASE","DEF_FREELISTS","DEF_FREELIST_GROUPS","DEF_LOGGING","DEF_BUFFER_POOL","DEF_PARAMETERS") AS 
select u.name, io.name, o.name,
       decode(po.parttype, 1, 'RANGE', 2, 'HASH', 3, 'SYSTEM', 4, 'LIST',
                                                                  'UNKNOWN'),
       decode(mod(po.spare2, 256), 0, 'NONE', 2, 'HASH', 3, 'SYSTEM',
                                      4, 'LIST', 'UNKNOWN'),
       po.partcnt, mod(trunc(po.spare2/65536), 65536),
       po.partkeycols, mod(trunc(po.spare2/256), 256),
       decode(bitand(po.flags, 1), 1, 'LOCAL',    'GLOBAL'),
       decode(po.partkeycols, 0, 'NONE', decode(bitand(po.flags,2), 2, 'PREFIXED', 'NON_PREFIXED')),
       ts.name, po.defpctfree, po.definitrans,
       po.defmaxtrans,
       decode(po.deftiniexts, NULL, 'DEFAULT', po.deftiniexts),
       decode(po.defextsize, NULL, 'DEFAULT', po.defextsize),
       decode(po.defminexts, NULL, 'DEFAULT', po.defminexts),
       decode(po.defmaxexts, NULL, 'DEFAULT', po.defmaxexts),
       decode(po.defextpct, NULL, 'DEFAULT', po.defextpct),
       po.deflists, po.defgroups,
       decode(po.deflogging, 0, 'NONE', 1, 'YES', 2, 'NO', 'UNKNOWN'),
       decode(po.spare1, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL),
       po.parameters
from   sys.obj$ io, sys.obj$ o, sys.partobj$ po, sys.ts$ ts, sys.ind$ i,
       sys.user$ u
where  io.obj# = po.obj# and po.defts# = ts.ts# (+) and
       i.obj# = io.obj# and o.obj# = i.bo# and u.user# = io.owner# and
       i.type# != 8 and      /* not LOB index */
       (io.owner# = userenv('SCHEMAID')
        or
        i.bo# in ( select obj#
                    from objauth$
                    where grantee# in ( select kzsrorol
                                        from x$kzsro
                                      )
                   )
        or
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
       );

CREATE OR REPLACE FORCE VIEW "ALL_PART_KEY_COLUMNS"("OWNER","NAME","OBJECT_TYPE","COLUMN_NAME","COLUMN_POSITION") AS 
select u.name, o.name, 'TABLE',
  decode(bitand(c.property, 1), 1, a.name, c.name), pc.pos#
from partcol$ pc, obj$ o, col$ c, user$ u, attrcol$ a
where pc.obj# = o.obj# and pc.obj# = c.obj# and c.intcol# = pc.intcol# and
      c.obj#    = a.obj#(+) and c.intcol# = a.intcol#(+) and
      u.user# = o.owner# and
      (o.owner# = userenv('SCHEMAID')
       or pc.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      )
union
select u.name, io.name, 'INDEX',
  decode(bitand(c.property, 1), 1, a.name, c.name), pc.pos#
from partcol$ pc, obj$ io, col$ c, user$ u, ind$ i, attrcol$ a
where pc.obj# = i.obj# and i.obj# = io.obj# and i.bo# = c.obj# and
     c.intcol# = pc.intcol# and u.user# = io.owner# and
     c.obj# = a.obj#(+) and c.intcol# = a.intcol#(+) and
      (io.owner# = userenv('SCHEMAID')
       or i.bo# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_PART_LOBS"("TABLE_OWNER","TABLE_NAME","COLUMN_NAME","LOB_NAME","LOB_INDEX_NAME","DEF_CHUNK","DEF_PCTVERSION","DEF_CACHE","DEF_IN_ROW","DEF_TABLESPACE_NAME","DEF_INITIAL_EXTENT","DEF_NEXT_EXTENT","DEF_MIN_EXTENTS","DEF_MAX_EXTENTS","DEF_PCT_INCREASE","DEF_FREELISTS","DEF_FREELIST_GROUPS","DEF_LOGGING","DEF_BUFFER_POOL") AS 
select u.name,
       o.name,
       decode(bitand(c.property, 1), 1, a.name, c.name),
       lo.name,
       io.name,
       plob.defchunk,
       plob.defpctver$,
       decode(bitand(plob.defflags, 27), 1, 'NO', 2, 'NO', 8, 'CACHEREADS',
                                         16, 'CACHEREADS', 'YES'),
       decode(plob.defpro, 0, 'NO', 'YES'),
       ts.name,
       decode(plob.definiexts, NULL, 'DEFAULT', plob.definiexts),
       decode(plob.defextsize, NULL, 'DEFAULT', plob.defextsize),
       decode(plob.defminexts, NULL, 'DEFAULT', plob.defminexts),
       decode(plob.defmaxexts, NULL, 'DEFAULT', plob.defmaxexts),
       decode(plob.defextpct,  NULL, 'DEFAULT', plob.defextpct),
       decode(plob.deflists,   NULL, 'DEFAULT', plob.deflists),
       decode(plob.defgroups,  NULL, 'DEFAULT', plob.defgroups),
       decode(bitand(plob.defflags,22), 0,'NONE', 4,'YES', 2,'NO',
                                        16,'NO', 'UNKNOWN'),
       decode(plob.defbufpool, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL)
from   sys.obj$ o, sys.col$ c, sys.lob$ l, sys.partlob$ plob,
       sys.obj$ lo, sys.obj$ io, sys.ts$ ts, sys.user$ u, attrcol$ a
where o.owner# = u.user#
  and o.obj# = c.obj#
  and c.obj# = l.obj#
  and c.intcol# = l.intcol#
  and l.lobj# = lo.obj#
  and l.ind# = io.obj#
  and l.lobj# = plob.lobj#
  and plob.defts# = ts.ts# (+)
  and bitand(c.property,32768) != 32768           /* not unused column */
  and c.obj# = a.obj#(+) and c.intcol# = a.intcol#(+)
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_PART_TABLES"("OWNER","TABLE_NAME","PARTITIONING_TYPE","SUBPARTITIONING_TYPE","PARTITION_COUNT","DEF_SUBPARTITION_COUNT","PARTITIONING_KEY_COUNT","SUBPARTITIONING_KEY_COUNT","DEF_TABLESPACE_NAME","DEF_PCT_FREE","DEF_PCT_USED","DEF_INI_TRANS","DEF_MAX_TRANS","DEF_INITIAL_EXTENT","DEF_NEXT_EXTENT","DEF_MIN_EXTENTS","DEF_MAX_EXTENTS","DEF_PCT_INCREASE","DEF_FREELISTS","DEF_FREELIST_GROUPS","DEF_LOGGING","DEF_COMPRESSION","DEF_BUFFER_POOL") AS 
select u.name, o.name,
       decode(po.parttype, 1, 'RANGE', 2, 'HASH', 3, 'SYSTEM', 4, 'LIST',
                                                                  'UNKNOWN'),
       decode(mod(po.spare2, 256), 0, 'NONE', 2, 'HASH', 3, 'SYSTEM',
                                      4, 'LIST', 'UNKNOWN'),
       po.partcnt, mod(trunc(po.spare2/65536), 65536), po.partkeycols,
       mod(trunc(po.spare2/256), 256),
       ts.name, po.defpctfree,
       decode(bitand(ts.flags, 32), 32, to_number(NULL), po.defpctused),
       po.definitrans,
       po.defmaxtrans,
       decode(po.deftiniexts, NULL, 'DEFAULT', po.deftiniexts),
       decode(po.defextsize, NULL, 'DEFAULT', po.defextsize),
       decode(po.defminexts, NULL, 'DEFAULT', po.defminexts),
       decode(po.defmaxexts, NULL, 'DEFAULT', po.defmaxexts),
       decode(po.defextpct, NULL, 'DEFAULT', po.defextpct),
       decode(bitand(ts.flags, 32), 32, to_number(NULL), po.deflists),
       decode(bitand(ts.flags, 32), 32,  to_number(NULL),po.defgroups),
       decode(po.deflogging, 0, 'NONE', 1, 'YES', 2, 'NO', 'UNKNOWN'),
       decode(mod(trunc(po.spare2/4294967296),256), 0, 'NONE', 1, 'ENABLED',
                     2, 'DISABLED', 'UNKNOWN'),
       decode(po.spare1, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL)
from   sys.obj$ o, sys.partobj$ po, sys.ts$ ts, sys.tab$ t, sys.user$ u
where  o.obj# = po.obj# and po.defts# = ts.ts# and t.obj# = o.obj# and
       o.owner# = u.user# and
       bitand(t.property, 64 + 128) = 0 and
       (o.owner# = userenv('SCHEMAID')
        or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
        or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      )
union all -- NON-IOT and IOT
select u.name, o.name,
       decode(po.parttype, 1, 'RANGE', 2, 'HASH', 3, 'SYSTEM', 4, 'LIST',
                                                                  'UNKNOWN'),
       decode(mod(po.spare2, 256), 0, 'NONE', 2, 'HASH', 3, 'SYSTEM',
                                      4, 'LIST', 'UNKNOWN'),
       po.partcnt, mod(trunc(po.spare2/65536), 65536), po.partkeycols,
       mod(trunc(po.spare2/256), 256),
       NULL, TO_NUMBER(NULL),TO_NUMBER(NULL),TO_NUMBER(NULL),TO_NUMBER(NULL),
       NULL,--decode(po.deftiniexts, NULL, 'DEFAULT', po.deftiniexts),
       NULL,--decode(po.defextsize, NULL, 'DEFAULT', po.defextsize),
       NULL,--decode(po.defminexts, NULL, 'DEFAULT', po.defminexts),
       NULL,--decode(po.defmaxexts, NULL, 'DEFAULT', po.defmaxexts),
       NULL,--decode(po.defextpct, NULL, 'DEFAULT', po.defextpct),
       TO_NUMBER(NULL),TO_NUMBER(NULL),--po.deflists, po.defgroups,
       decode(po.deflogging, 0, 'NONE', 1, 'YES', 2, 'NO', 'UNKNOWN'),
       'N/A',
       decode(po.spare1, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL)
from   sys.obj$ o, sys.partobj$ po, sys.tab$ t, sys.user$ u
where  o.obj# = po.obj# and t.obj# = o.obj# and
       o.owner# = u.user# and
       bitand(t.property, 64 + 128) != 0 and
       (o.owner# = userenv('SCHEMAID')
        or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
        or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_PENDING_CONV_TABLES"("OWNER","TABLE_NAME") AS 
select u.name, o.name
from sys.obj$ o, user$ u
  where o.type# = 2 and o.status = 5
  and bitand(o.flags, 4096) = 4096  /* type evolved flg */
  and o.owner# = u.user#
  and (o.owner# = userenv('SCHEMAID')
       or
       o.obj# in (select oa.obj#
                  from sys.objauth$ oa
                  where grantee# in (select kzsrorol
                                     from x$kzsro))
       or /* user has system privileges */
       exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)));

CREATE OR REPLACE FORCE VIEW "ALL_PLSQL_OBJECT_SETTINGS"("OWNER","NAME","TYPE","PLSQL_OPTIMIZE_LEVEL","PLSQL_CODE_TYPE","PLSQL_DEBUG","PLSQL_WARNINGS","NLS_LENGTH_SEMANTICS") AS 
select u.name, o.name,
decode(o.type#, 7, 'PROCEDURE', 8, 'FUNCTION', 9, 'PACKAGE',
                11, 'PACKAGE BODY', 12, 'TRIGGER',
                13, 'TYPE', 14, 'TYPE BODY', 'UNDEFINED'),
(select to_number(value) from settings$ s
  where s.obj# = o.obj# and param = 'plsql_optimize_level'),
(select value from settings$ s
  where s.obj# = o.obj# and param = 'plsql_code_type'),
(select value from settings$ s
  where s.obj# = o.obj# and param = 'plsql_debug'),
(select value from settings$ s
  where s.obj# = o.obj# and param = 'plsql_warnings'),
(select value from settings$ s
  where s.obj# = o.obj# and param = 'nls_length_semantics')
from sys.obj$ o, sys.user$ u
where o.owner# = u.user#
  and o.type# in (7, 8, 9, 11, 12, 13, 14)
  and
  (
    o.owner# in (userenv('SCHEMAID'), 1 /* PUBLIC */)
    or
    (
      /* EXECUTE privilege does not let user see package or type body */
      o.type# in (7, 8, 9, 12, 13)
      and
      o.obj# in (select obj# from sys.objauth$
                 where grantee# in (select kzsrorol from x$kzsro)
                   and privilege# = 12 /* EXECUTE */
                )
    )
    or
    (
       o.type# in (7, 8, 9) /* procedure, function, package */
       and
       exists (select null from v$enabledprivs
               where priv_number in (
                                      -144 /* EXECUTE ANY PROCEDURE */,
                                      -141 /* CREATE ANY PROCEDURE */
                                    )
              )
    )
    or
    (
      o.type# = 11 /* package body */
      and
      exists (select null from v$enabledprivs
              where priv_number = -141 /* CREATE ANY PROCEDURE */)
    )
    or
    (
       o.type# = 12 /* trigger */
       and
       exists (select null from v$enabledprivs
               where priv_number = -152 /* CREATE ANY TRIGGER */)
    )
    or
    (
      o.type# = 13 /* type */
      and
      exists (select null from v$enabledprivs
              where priv_number in (-184 /* EXECUTE ANY TYPE */,
                                    -181 /* CREATE ANY TYPE */))
    )
    or
    (
      o.type# = 14 /* type body */
      and
      exists (select null from v$enabledprivs
              where priv_number = -181 /* CREATE ANY TYPE */)
    )
  );

CREATE OR REPLACE FORCE VIEW "ALL_POLICIES"("OBJECT_OWNER","OBJECT_NAME","POLICY_GROUP","POLICY_NAME","PF_OWNER","PACKAGE","FUNCTION","SEL","INS","UPD","DEL","IDX","CHK_OPTION","ENABLE","STATIC_POLICY","POLICY_TYPE","LONG_PREDICATE") AS 
SELECT OBJECT_OWNER, OBJECT_NAME, POLICY_GROUP, POLICY_NAME, PF_OWNER,
PACKAGE, FUNCTION, SEL, INS, UPD, DEL, IDX, CHK_OPTION, ENABLE, STATIC_POLICY,
POLICY_TYPE, LONG_PREDICATE
FROM DBA_POLICIES, ALL_TABLES t
WHERE
(OBJECT_OWNER = t.OWNER AND OBJECT_NAME = t.TABLE_NAME)
union all
SELECT OBJECT_OWNER, OBJECT_NAME, POLICY_GROUP, POLICY_NAME, PF_OWNER,
PACKAGE, FUNCTION, SEL, INS, UPD, DEL, IDX, CHK_OPTION, ENABLE, STATIC_POLICY,
POLICY_TYPE, LONG_PREDICATE
FROM DBA_POLICIES, ALL_VIEWS v
WHERE
(OBJECT_OWNER = v.OWNER AND OBJECT_NAME = v.VIEW_NAME )
union all
SELECT OBJECT_OWNER, OBJECT_NAME, POLICY_GROUP, POLICY_NAME, PF_OWNER,
PACKAGE, FUNCTION, SEL, INS, UPD, DEL, IDX, CHK_OPTION, ENABLE, STATIC_POLICY,
POLICY_TYPE, LONG_PREDICATE
FROM DBA_POLICIES, ALL_SYNONYMS s
WHERE
(OBJECT_OWNER = s.OWNER AND OBJECT_NAME = s.SYNONYM_NAME);

CREATE OR REPLACE FORCE VIEW "ALL_POLICY_CONTEXTS"("OBJECT_OWNER","OBJECT_NAME","NAMESPACE","ATTRIBUTE") AS 
SELECT OBJECT_OWNER, OBJECT_NAME,NAMESPACE,ATTRIBUTE
FROM DBA_POLICY_CONTEXTS, ALL_TABLES t
WHERE
(OBJECT_OWNER = t.OWNER AND OBJECT_NAME = t.TABLE_NAME)
union all
SELECT OBJECT_OWNER, OBJECT_NAME,NAMESPACE,ATTRIBUTE
FROM DBA_POLICY_CONTEXTS, ALL_VIEWS v
WHERE
(OBJECT_OWNER = v.OWNER AND OBJECT_NAME = v.VIEW_NAME )
union all
SELECT OBJECT_OWNER, OBJECT_NAME,NAMESPACE,ATTRIBUTE
FROM DBA_POLICY_CONTEXTS, ALL_SYNONYMS s
WHERE
(OBJECT_OWNER = s.OWNER AND OBJECT_NAME = s.SYNONYM_NAME );

CREATE OR REPLACE FORCE VIEW "ALL_POLICY_GROUPS"("OBJECT_OWNER","OBJECT_NAME","POLICY_GROUP") AS 
SELECT OBJECT_OWNER, OBJECT_NAME, POLICY_GROUP
FROM DBA_POLICY_GROUPS, ALL_TABLES t
WHERE
(OBJECT_OWNER = t.OWNER AND OBJECT_NAME = t.TABLE_NAME)
union all
SELECT OBJECT_OWNER, OBJECT_NAME, POLICY_GROUP
FROM DBA_POLICY_GROUPS, ALL_VIEWS v
WHERE
(OBJECT_OWNER = v.OWNER AND OBJECT_NAME = v.VIEW_NAME )
union all
SELECT OBJECT_OWNER, OBJECT_NAME, POLICY_GROUP
FROM DBA_POLICY_GROUPS, ALL_SYNONYMS s
WHERE
(OBJECT_OWNER = s.OWNER AND OBJECT_NAME = s.SYNONYM_NAME);

CREATE OR REPLACE FORCE VIEW "ALL_PROBE_OBJECTS"("OWNER","OBJECT_NAME","SUBOBJECT_NAME","OBJECT_ID","DATA_OBJECT_ID","OBJECT_TYPE","CREATED","LAST_DDL_TIME","TIMESTAMP","STATUS","TEMPORARY","GENERATED","SECONDARY","DEBUGINFO") AS 
SELECT DISTINCT all_objects."OWNER",all_objects."OBJECT_NAME",all_objects."SUBOBJECT_NAME",all_objects."OBJECT_ID",all_objects."DATA_OBJECT_ID",all_objects."OBJECT_TYPE",all_objects."CREATED",all_objects."LAST_DDL_TIME",all_objects."TIMESTAMP",all_objects."STATUS",all_objects."TEMPORARY",all_objects."GENERATED",all_objects."SECONDARY",
                   decode(idl_char$.part,null,'F',0,'F','T') debuginfo
   FROM   idl_char$, all_objects
   WHERE  all_objects.object_id = idl_char$.obj# (+)
   AND    (idl_char$.part IS NULL OR
            (idl_char$.part = 0         -- Diana
              AND NOT EXISTS (SELECT *
                              FROM   idl_char$
                              WHERE  all_objects.object_id = idl_char$.obj#
                              AND    idl_char$.part = 1))
           OR idl_char$.part = 1        -- PCode
           );

CREATE OR REPLACE FORCE VIEW "ALL_PROCEDURES"("OWNER","OBJECT_NAME","PROCEDURE_NAME","AGGREGATE","PIPELINED","IMPLTYPEOWNER","IMPLTYPENAME","PARALLEL","INTERFACE","DETERMINISTIC","AUTHID") AS 
select u.name, o.name, pi.procedurename,
decode(bitand(pi.properties,8),8,'YES','NO'),
decode(bitand(pi.properties,16),16,'YES','NO'),
u2.name, o2.name,
  decode(bitand(pi.properties,32),32,'YES','NO'),
  decode(bitand(pi.properties,512),512,'YES','NO'),
decode(bitand(pi.properties,256),256,'YES','NO'),
decode(bitand(pi.properties,1024),1024,'CURRENT_USER','DEFINER')
from obj$ o, user$ u, procedureinfo$ pi, obj$ o2, user$ u2
where u.user# = o.owner# and o.obj# = pi.obj#
and pi.itypeobj# = o2.obj# (+) and o2.owner#  = u2.user# (+)
and (o.owner# = userenv('SCHEMAID')
     or exists
      (select null from v$enabledprivs where priv_number in (-144,-141))
     or o.obj# in (select obj# from sys.objauth$ where grantee# in
      (select kzsrorol from x$kzsro) and privilege# = 12));

CREATE OR REPLACE FORCE VIEW "ALL_PROPAGATION"("PROPAGATION_NAME","SOURCE_QUEUE_OWNER","SOURCE_QUEUE_NAME","DESTINATION_QUEUE_OWNER","DESTINATION_QUEUE_NAME","DESTINATION_DBLINK","RULE_SET_OWNER","RULE_SET_NAME","NEGATIVE_RULE_SET_OWNER","NEGATIVE_RULE_SET_NAME") AS 
SELECT p.propagation_name, p.source_queue_schema, p.source_queue,
       p.destination_queue_schema, p.destination_queue, p.destination_dblink,
       p.ruleset_schema, p.ruleset, p.negative_ruleset_schema,
        p.negative_ruleset
FROM   sys.streams$_propagation_process p, all_queues q
WHERE p.source_queue_schema = q.owner
   AND p.source_queue = q.name
   AND ((p.ruleset_schema IS NULL and p.ruleset IS NULL) OR
        ((p.ruleset_schema, p.ruleset) IN
          (SELECT r.rule_set_owner, r.rule_set_name
             FROM all_rule_sets r)))
   AND ((p.negative_ruleset_schema IS NULL AND
         p.negative_ruleset IS NULL) OR
        ((p.negative_ruleset_schema, p.negative_ruleset) IN
          (SELECT r.rule_set_owner, r.rule_set_name
             FROM all_rule_sets r)));

CREATE OR REPLACE FORCE VIEW "ALL_PUBLISHED_COLUMNS"("CHANGE_SET_NAME","PUB_ID","SOURCE_SCHEMA_NAME","SOURCE_TABLE_NAME","COLUMN_NAME","DATA_TYPE","DATA_LENGTH","DATA_PRECISION","DATA_SCALE","NULLABLE") AS 
SELECT
   s.change_set_name, s.obj#, s.source_schema_name, s.source_table_name,
   c.column_name, c.data_type, c.data_length, c.data_precision, c.data_scale,
   c.nullable
  FROM sys.cdc_change_tables$ s, all_tables t, all_tab_columns c
  WHERE s.change_table_schema=t.owner AND
        s.change_table_name=t.table_name AND
        c.owner=s.change_table_schema AND
        c.table_name=s.change_table_name AND
        c.column_name NOT LIKE '%$';

CREATE OR REPLACE FORCE VIEW "ALL_QUEUES"("OWNER","NAME","QUEUE_TABLE","QID","QUEUE_TYPE","MAX_RETRIES","RETRY_DELAY","ENQUEUE_ENABLED","DEQUEUE_ENABLED","RETENTION","USER_COMMENT") AS 
select u.name OWNER, q.name NAME, t.name QUEUE_TABLE, q.eventid QID,
       decode(q.usage, 1, 'EXCEPTION_QUEUE', 2, 'NON_PERSISTENT_QUEUE',
              'NORMAL_QUEUE') QUEUE_TYPE,
       q.max_retries MAX_RETRIES, q.retry_delay RETRY_DELAY,
       decode(bitand(q.enable_flag, 1), 1 , '  YES  ', '  NO  ')ENQUEUE_ENABLED,
       decode(bitand(q.enable_flag, 2), 2 , '  YES  ', '  NO  ')DEQUEUE_ENABLED,
       decode(q.ret_time, -1, ' FOREVER', q.ret_time) RETENTION,
       substr(q.queue_comment, 1, 50) USER_COMMENT
from system.aq$_queues q, system.aq$_queue_tables t, sys.user$ u, sys.obj$ ro
where u.name  = t.schema
and   q.table_objno = t.objno
and   ro.owner# = u.user#
and   ro.obj# = q.eventid
and  (ro.owner# = userenv('SCHEMAID')
      or ro.obj# in
           (select oa.obj#
            from sys.objauth$ oa
            where grantee# in (select kzsrorol from x$kzsro))
      or exists (select null from v$enabledprivs
                 where priv_number in (-218 /* MANAGE ANY QUEUE */,
                                       -219 /* ENQUEUE ANY QUEUE */,
                                       -220 /* DEQUEUE ANY QUEUE */))
      or ro.obj# in
           (select q.eventid from system.aq$_queues q,
                                  system.aq$_queue_tables t
              where q.table_objno = t.objno
              and bitand(t.flags, 8) = 0
              and exists (select null from sys.objauth$ oa, sys.obj$ o
                          where oa.obj# = o.obj#
                          and (o.name = 'DBMS_AQ' or o.name = 'DBMS_AQADM')
                          and o.type# = 9
                          and oa.grantee# = userenv('SCHEMAID')))
     );

CREATE OR REPLACE FORCE VIEW "ALL_QUEUE_PUBLISHERS"("QUEUE_OWNER","QUEUE_NAME","PUBLISHER_NAME","PUBLISHER_ADDRESS","PUBLISHER_PROTOCOL","PUBLISHER_RULE","PUBLISHER_RULE_NAME","PUBLISHER_RULESET","PUBLISHER_TRANSFORMATION") AS 
select t.schema QUEUE_OWNER, q.name QUEUE_NAME,
        p.p_name PUBLISHER_NAME, p.p_address PUBLISHER_ADDRESS,
        p.p_protocol PUBLISHER_PROTOCOL, p.p_rule PUBLISHER_RULE,
        p.p_rule_name PUBLISHER_RULE_NAME, p.p_ruleset PUBLISHER_RULESET,
        p.p_transformation PUBLISHER_TRANSFORMATION
from
 system.aq$_queue_tables t,  system.aq$_queues q,
 sys.aq$_publisher p, sys.user$ u
where
 u.user# = USERENV('SCHEMAID') and
 u.name = t.schema and q.table_objno = t.objno
 and q.eventid = p.queue_id;

CREATE OR REPLACE FORCE VIEW "ALL_QUEUE_TABLES"("OWNER","QUEUE_TABLE","TYPE","OBJECT_TYPE","SORT_ORDER","RECIPIENTS","MESSAGE_GROUPING","COMPATIBLE","PRIMARY_INSTANCE","SECONDARY_INSTANCE","OWNER_INSTANCE","USER_COMMENT","SECURE") AS 
select t.schema OWNER, t.name QUEUE_TABLE,
     decode(t.udata_type, 1 , 'OBJECT', 2, 'VARIANT', 3, 'RAW') TYPE,
     u.name || '.' || o.name OBJECT_TYPE,
     decode(t.sort_cols, 0, 'NONE', 1, 'PRIORITY', 2, 'ENQUEUE_TIME',
                               3, 'PRIORITY, ENQUEUE_TIME',
                               7, 'ENQUEUE_TIME, PRIORITY') SORT_ORDER,
     decode(bitand(t.flags, 1), 1, 'MULTIPLE', 0, 'SINGLE') RECIPIENTS,
     decode(bitand(t.flags, 2), 2, 'TRANSACTIONAL', 0, 'NONE')MESSAGE_GROUPING,
     decode(bitand(t.flags, 8), 8, '8.1.3', 0, '8.0.3')COMPATIBLE,
     aft.primary_instance PRIMARY_INSTANCE,
     aft.secondary_instance SECONDARY_INSTANCE,
     aft.owner_instance OWNER_INSTANCE,
     substr(t.table_comment, 1, 50) USER_COMMENT,
     decode(bitand(t.flags, 4096), 4096, 'YES', 0, 'NO') SECURE
from system.aq$_queue_tables t, sys.col$ c, sys.coltype$ ct, sys.obj$ o,
sys.user$ u, sys.aq$_queue_table_affinities aft
where c.intcol# = ct.intcol#
and c.obj# = ct.obj#
and c.name = 'USER_DATA'
and t.objno = c.obj#
and o.oid$ = ct.toid
and o.type# = 13
and o.owner# = u.user#
and t.objno = aft.table_objno
and t.objno in
(select q.table_objno
 from system.aq$_queues q, sys.obj$ ro
 where ro.obj# = q.eventid
 and (ro.owner# = userenv('SCHEMAID')
      or ro.obj# in
           (select oa.obj#
            from sys.objauth$ oa
            where grantee# in (select kzsrorol from x$kzsro))
      or exists (select null from v$enabledprivs
                 where priv_number in (-218 /* MANAGE ANY QUEUE */,
                                       -219 /* ENQUEUE ANY QUEUE */,
                                       -220 /* DEQUEUE ANY QUEUE */))
      or ro.obj# in
           (select q.eventid from system.aq$_queues q,
                                  system.aq$_queue_tables t
              where q.table_objno = t.objno
              and bitand(t.flags, 8) = 0
              and exists (select null from sys.objauth$ oa, sys.obj$ o
                          where oa.obj# = o.obj#
                          and (o.name = 'DBMS_AQ' or o.name = 'DBMS_AQADM')
                          and o.type# = 9
                          and oa.grantee# = userenv('SCHEMAID')))
     )
)
union
select t.schema OWNER, t.name QUEUE_TABLE,
     decode(t.udata_type, 1 , 'OBJECT', 2, 'VARIANT', 3, 'RAW') TYPE,
     null OBJECT_TYPE,
     decode(t.sort_cols, 0, 'NONE', 1, 'PRIORITY', 2, 'ENQUEUE_TIME',
                               3, 'PRIORITY, ENQUEUE_TIME',
                               7, 'ENQUEUE_TIME, PRIORITY') SORT_ORDER,
     decode(bitand(t.flags, 1), 1, 'MULTIPLE', 0, 'SINGLE') RECIPIENTS,
     decode(bitand(t.flags, 2), 2, 'TRANSACTIONAL', 0, 'NONE')MESSAGE_GROUPING,
     decode(bitand(t.flags, 8), 8, '8.1.3', 0, '8.0.3')COMPATIBLE,
     aft.primary_instance PRIMARY_INSTANCE,
     aft.secondary_instance SECONDARY_INSTANCE,
     aft.owner_instance OWNER_INSTANCE,
     substr(t.table_comment, 1, 50) USER_COMMENT,
     decode(bitand(t.flags, 4096), 4096, 'YES', 0, 'NO') SECURE
from system.aq$_queue_tables t, sys.aq$_queue_table_affinities aft
where (t.udata_type = 2
or t.udata_type = 3)
and t.objno = aft.table_objno
and t.objno in
(select q.table_objno
 from system.aq$_queues q, sys.obj$ ro
 where ro.obj# = q.eventid
 and (ro.owner# = userenv('SCHEMAID')
      or ro.obj# in
           (select oa.obj#
            from sys.objauth$ oa
            where grantee# in (select kzsrorol from x$kzsro))
      or exists (select null from v$enabledprivs
                 where priv_number in (-218 /* MANAGE ANY QUEUE */,
                                       -219 /* ENQUEUE ANY QUEUE */,
                                       -220 /* DEQUEUE ANY QUEUE */))
      or ro.obj# in
           (select q.eventid from system.aq$_queues q,
                                  system.aq$_queue_tables t
              where q.table_objno = t.objno
              and bitand(t.flags, 8) = 0
              and exists (select null from sys.objauth$ oa, sys.obj$ o
                          where oa.obj# = o.obj#
                          and (o.name = 'DBMS_AQ' or o.name = 'DBMS_AQADM')
                          and o.type# = 9
                          and oa.grantee# = userenv('SCHEMAID')))
     )
);

CREATE OR REPLACE FORCE VIEW "ALL_REFRESH"("ROWNER","RNAME","REFGROUP","IMPLICIT_DESTROY","PUSH_DEFERRED_RPC","REFRESH_AFTER_ERRORS","ROLLBACK_SEG","JOB","NEXT_DATE","INTERVAL","BROKEN","PURGE_OPTION","PARALLELISM","HEAP_SIZE") AS 
select "ROWNER","RNAME","REFGROUP","IMPLICIT_DESTROY","PUSH_DEFERRED_RPC","REFRESH_AFTER_ERRORS","ROLLBACK_SEG","JOB","NEXT_DATE","INTERVAL","BROKEN","PURGE_OPTION","PARALLELISM","HEAP_SIZE" from dba_refresh where
  ( rowner = (select name from sys.user$ where user# = userenv('SCHEMAID')))
  or userenv('SCHEMAID') = 0 or exists
  (select kzsrorol
     from x$kzsro x, sys.system_privilege_map m, sys.sysauth$ s
     where x.kzsrorol = s.grantee# and
           s.privilege# = m.privilege and
           m.name = 'ALTER ANY MATERIALIZED VIEW');

CREATE OR REPLACE FORCE VIEW "ALL_REFRESH_CHILDREN"("OWNER","NAME","TYPE","ROWNER","RNAME","REFGROUP","IMPLICIT_DESTROY","PUSH_DEFERRED_RPC","REFRESH_AFTER_ERRORS","ROLLBACK_SEG","JOB","NEXT_DATE","INTERVAL","BROKEN","PURGE_OPTION","PARALLELISM","HEAP_SIZE") AS 
select "OWNER","NAME","TYPE","ROWNER","RNAME","REFGROUP","IMPLICIT_DESTROY","PUSH_DEFERRED_RPC","REFRESH_AFTER_ERRORS","ROLLBACK_SEG","JOB","NEXT_DATE","INTERVAL","BROKEN","PURGE_OPTION","PARALLELISM","HEAP_SIZE" from dba_refresh_children where
 ( rowner = (select name from sys.user$ where user# = userenv('SCHEMAID')))
  or userenv('SCHEMAID') = 0 or exists
  (select kzsrorol
     from x$kzsro x, sys.system_privilege_map m, sys.sysauth$ s
     where x.kzsrorol = s.grantee# and
           s.privilege# = m.privilege and
           m.name = 'ALTER ANY MATERIALIZED VIEW');

CREATE OR REPLACE FORCE VIEW "ALL_REFRESH_DEPENDENCIES"("OWNER","TABLE_NAME","PARENT_OBJECT_TYPE","OLDEST_REFRESH_SCN","OLDEST_REFRESH_DATE") AS 
select u.name, o.name, 'MATERIALIZED VIEW', dep.lastrefreshscn,
       dep.lastrefreshdate
from (select dt.obj#,
             min(dt.lastrefreshscn) as lastrefreshscn,
             min(dt.lastrefreshdate) as lastrefreshdate
      from
           (select d.p_obj# as obj#, s.lastrefreshscn, s.lastrefreshdate
            from sumdep$ d, sum$ s, obj$ do
            where d.sumobj# = s.obj#
              and d.sumobj# = do.obj#
              and do.type# IN (4, 42)
            union
            select sl.tableobj# as obj#,
                   decode(0, 1, 2, NULL) as lastrefreshscn,
                   sl.oldest  as lastrefreshdate
            from snap_loadertime$ sl) dt
      group by dt.obj#) dep, obj$ o, user$ u
where o.obj# = dep.obj#
  and o.owner# = u.user#
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in (select oa.obj# from sys.objauth$ oa
                     where grantee# in (select kzsrorol from x$kzsro)
                    )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
       );

CREATE OR REPLACE FORCE VIEW "ALL_REFS"("OWNER","TABLE_NAME","COLUMN_NAME","WITH_ROWID","IS_SCOPED","SCOPE_TABLE_OWNER","SCOPE_TABLE_NAME","OBJECT_ID_TYPE") AS 
select distinct u.name, o.name,
       decode(bitand(c.property, 1), 1, ac.name, c.name),
       decode(bitand(rc.reftyp, 2), 2, 'YES', 'NO'),
       decode(bitand(rc.reftyp, 1), 1, 'YES', 'NO'),
       su.name, so.name,
       case
         when bitand(reftyp,4) = 4 then 'USER-DEFINED'
         when bitand(reftyp, 8) = 8 then 'SYSTEM GENERATED AND USER-DEFINED'
         else 'SYSTEM GENERATED'
       end
from sys.user$ u, sys.obj$ o, sys.col$ c, sys.refcon$ rc, sys.obj$ so,
     sys.user$ su, sys.attrcol$ ac
where o.owner# = u.user#
  and o.obj# = c.obj#
  and c.obj# = rc.obj#
  and c.col# = rc.col#
  and c.intcol# = rc.intcol#
  and rc.stabid = so.oid$(+)
  and so.owner# = su.user#(+)
  and c.obj# = ac.obj#(+)
  and c.intcol# = ac.intcol#(+)
  and bitand(c.property,32768) != 32768           /* not unused column */
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_REGISTERED_MVIEWS"("OWNER","NAME","MVIEW_SITE","CAN_USE_LOG","UPDATABLE","REFRESH_METHOD","MVIEW_ID","VERSION","QUERY_TXT") AS 
select  "OWNER","NAME","MVIEW_SITE","CAN_USE_LOG","UPDATABLE","REFRESH_METHOD","MVIEW_ID","VERSION","QUERY_TXT" from dba_registered_mviews s
where exists (select a.mview_id from all_base_table_mviews a
                             where  s.mview_id = a.mview_id)
or  userenv('SCHEMAID') = 1
or  exists (select null from v$enabledprivs
            where priv_number  in (-45 /* LOCK ANY TABLE */,
                                   -47 /* SELECT ANY TABLE */,
                                   -48 /* INSERT ANY TABLE  */,
                                   -49 /* UPDATE ANY TABLE */,
                                   -50 /* DELETE ANY TABLE */)
            );

CREATE OR REPLACE FORCE VIEW "ALL_REGISTERED_SNAPSHOTS"("OWNER","NAME","SNAPSHOT_SITE","CAN_USE_LOG","UPDATABLE","REFRESH_METHOD","SNAPSHOT_ID","VERSION","QUERY_TXT") AS 
select  "OWNER","NAME","SNAPSHOT_SITE","CAN_USE_LOG","UPDATABLE","REFRESH_METHOD","SNAPSHOT_ID","VERSION","QUERY_TXT" from dba_registered_snapshots s
where exists (select a.snapshot_id from  all_snapshot_logs a
                             where  s.snapshot_id = a.snapshot_id)
or  userenv('SCHEMAID') = 1
or  exists (select null from v$enabledprivs
            where priv_number  in (-45 /* LOCK ANY TABLE */,
                                   -47 /* SELECT ANY TABLE */,
                                   -48 /* INSERT ANY TABLE  */,
                                   -49 /* UPDATE ANY TABLE */,
                                   -50 /* DELETE ANY TABLE */)
            );

CREATE OR REPLACE FORCE VIEW "ALL_REGISTRY_BANNERS"("BANNER") AS 
SELECT banner FROM registry$
WHERE status = 1;

CREATE OR REPLACE FORCE VIEW "ALL_REPAUDIT_ATTRIBUTE"("ATTRIBUTE","DATA_TYPE","DATA_LENGTH","SOURCE") AS 
select
    attribute,
    decode(data_type_id,
           1, 'NUMBER',
           2, 'VARCHAR2',
           3, 'DATE',
           4, 'CHAR',
           5, 'RAW',
           6, 'NVARCHAR2',
           7, 'NCHAR',
           'UNDEFINED'),
    data_length,
    source
from  system.repcat$_audit_attribute;

CREATE OR REPLACE FORCE VIEW "ALL_REPAUDIT_COLUMN"("SNAME","ONAME","COLUMN_NAME","BASE_SNAME","BASE_ONAME","BASE_CONFLICT_TYPE","BASE_REFERENCE_NAME","ATTRIBUTE") AS 
select
    sname,
    oname,
    column_name,
    base_sname,
    base_oname,
    decode(base_conflict_type_id,
           1, 'UPDATE',
           2, 'UNIQUENESS',
           3, 'DELETE',
           'UNDEFINED'),
    base_reference_name,
    attribute
from  system.repcat$_audit_column,
     sys.user$ u, sys.obj$ o
where sname = u.name
  and oname = o.name
  and o.owner# = u.user#
  and o.type# = 2 /* tables */
  and (o.owner# = userenv('SCHEMAID')
        or
       o.obj# in ( select obj#
                   from objauth$
                   where grantee# in ( select kzsrorol
                                       from x$kzsro
                                     )
                  )
        or
	 exists (select null from v$enabledprivs
	         where priv_number in (-45 /* LOCK ANY TABLE */,
				       -47 /* SELECT ANY TABLE */,
				       -48 /* INSERT ANY TABLE */,
				       -49 /* UPDATE ANY TABLE */,
				       -50 /* DELETE ANY TABLE */)
                 )
       );

CREATE OR REPLACE FORCE VIEW "ALL_REPCAT"("SNAME","MASTER","STATUS","SCHEMA_COMMENT","GNAME","FNAME","RPC_PROCESSING_DISABLED","OWNER") AS 
select "SNAME","MASTER","STATUS","SCHEMA_COMMENT","GNAME","FNAME","RPC_PROCESSING_DISABLED","OWNER" from ALL_REPGROUP;

CREATE OR REPLACE FORCE VIEW "ALL_REPCATLOG"("ID","SOURCE","USERID","TIMESTAMP","ROLE","MASTER","SNAME","REQUEST","ONAME","TYPE","STATUS","MESSAGE","ERRNUM","GNAME") AS 
select r.id, r.source, r.userid, r.timestamp, r.role, r.master, r.sname,
  r.request, r.oname, r.type, r.status, r.message, r.errnum, r.gname
from repcat_repcatlog r, all_objects o
where (r.sname = 'PUBLIC' or r.sname in (select u.username from all_users u))
  and r.sname = o.owner
  and r.oname = o.object_name
  and r.type = o.object_type
union
select r.id, r.source, r.userid, r.timestamp, r.role, r.master, r.sname,
  r.request, r.oname, r.type, r.status, r.message, r.errnum, r.gname
from user_repcatlog r;

CREATE OR REPLACE FORCE VIEW "ALL_REPCAT_REFRESH_TEMPLATES"("REFRESH_TEMPLATE_NAME","OWNER","REFRESH_GROUP_NAME","TEMPLATE_COMMENT","PUBLIC_TEMPLATE") AS 
select refresh_template_name,owner,refresh_group_name,template_comment,
 nvl(public_template,'N') public_template
from system.repcat$_refresh_templates rt,
  system.repcat$_template_types tt
where public_template = 'Y'
and rt.template_type_id = tt.template_type_id
and bitand(rawtohex(tt.flags),1) = 1
union
select refresh_template_name,owner,refresh_group_name,template_comment,
 nvl(public_template,'N') public_template
from system.repcat$_refresh_templates rt,
  system.repcat$_user_authorizations at,
  sys.all_users au,
  system.repcat$_template_types tt
where at.refresh_template_id = rt.refresh_template_id
and rt.template_type_id = tt.template_type_id
and bitand(rawtohex(tt.flags),1) = 1
and au.user_id = at.user_id
and nvl(rt.public_template,'N') = 'N'
and au.user_id = userenv('SCHEMAID')
union
select refresh_template_name,owner,refresh_group_name,template_comment,
 nvl(public_template,'N') public_template
from system.repcat$_refresh_templates rt,
  system.repcat$_template_types tt
where nvl(rt.public_template,'N') = 'N'
and rt.template_type_id = tt.template_type_id
and bitand(rawtohex(tt.flags),1) = 1
and exists
  (select 1 from v$enabledprivs
   where priv_number in (-174 /* alter any snapshot */))
union
select refresh_template_name,owner,refresh_group_name,template_comment,
 nvl(public_template,'N') public_template
from system.repcat$_refresh_templates rt,
  system.repcat$_template_types tt, sys.user$ u
where  nvl(rt.public_template,'N') = 'N'
and rt.template_type_id = tt.template_type_id
and bitand(rawtohex(tt.flags),1) = 1
and rt.owner = u.name
and u.user# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "ALL_REPCAT_TEMPLATE_OBJECTS"("REFRESH_TEMPLATE_NAME","OBJECT_NAME","OBJECT_TYPE","DDL_NUM","DDL_TEXT","MASTER_ROLLBACK_SEGMENT","DERIVED_FROM_SNAME","DERIVED_FROM_ONAME","FLAVOR_ID") AS 
select rt.refresh_template_name,
t.object_name, ot.object_type_name object_type,
t.ddl_num, t.ddl_text,t.master_rollback_seg,
t.derived_from_sname,t.derived_from_oname,t.flavor_id
from system.repcat$_refresh_templates rt,
  system.repcat$_template_objects t,
  system.repcat$_object_types ot,
  system.repcat$_template_types tt
where t.refresh_template_id = rt.refresh_template_id
and  ot.object_type_id = t.object_type
and rt.template_type_id = tt.template_type_id
and bitand(rawtohex(tt.flags),1) = 1
and rt.refresh_template_id in
  (select rt.refresh_template_id
  from system.repcat$_refresh_templates
  where public_template = 'Y'
  union
  select rt.refresh_template_id
  from system.repcat$_refresh_templates rt,
  system.repcat$_user_authorizations at,
  sys.all_users au
  where at.refresh_template_id = rt.refresh_template_id
  and au.user_id = at.user_id
  and nvl(rt.public_template,'N') = 'N'
  and au.user_id = userenv('SCHEMAID')
  union
  select rt.refresh_template_id
  from system.repcat$_refresh_templates rt
  where nvl(rt.public_template,'N') = 'N'
  and exists
    (select 1 from v$enabledprivs
     where priv_number in (-174 /* alter any snapshot */))
  union
  select rt.refresh_template_id
  from system.repcat$_refresh_templates rt, sys.user$ u
  where  nvl(rt.public_template,'N') = 'N'
  and rt.owner =  u.name
  and u.user#  = userenv('SCHEMAID'));

CREATE OR REPLACE FORCE VIEW "ALL_REPCAT_TEMPLATE_PARMS"("REFRESH_TEMPLATE_NAME","OWNER","REFRESH_GROUP_NAME","TEMPLATE_COMMENT","PUBLIC_TEMPLATE","PARAMETER_NAME","DEFAULT_PARM_VALUE","PROMPT_STRING","USER_OVERRIDE") AS 
select rt.refresh_template_name,rt.owner,
rt.refresh_group_name,rt.template_comment,
nvl(rt.public_template,'N'),tp.parameter_name,
tp.default_parm_value, tp.prompt_string, tp.user_override
from system.repcat$_refresh_templates rt,
  system.repcat$_template_parms tp,
  system.repcat$_template_types tt
where tp.refresh_template_id = rt.refresh_template_id
and rt.template_type_id = tt.template_type_id
and bitand(rawtohex(tt.flags),1) = 1
and rt.refresh_template_id in
  (select rt.refresh_template_id
  from system.repcat$_refresh_templates
  where public_template = 'Y'
  union
  select rt.refresh_template_id
  from system.repcat$_refresh_templates rt,
  system.repcat$_user_authorizations at,
  sys.all_users au
  where at.refresh_template_id = rt.refresh_template_id
  and au.user_id = at.user_id
  and nvl(rt.public_template,'N') = 'N'
  and au.user_id = userenv('SCHEMAID')
  union
  select rt.refresh_template_id
  from system.repcat$_refresh_templates rt
  where nvl(rt.public_template,'N') = 'N'
  and exists
    (select 1 from v$enabledprivs
     where priv_number in (-174 /* alter any snapshot */))
  union
  select rt.refresh_template_id
  from system.repcat$_refresh_templates rt, sys.user$ u
  where  nvl(rt.public_template,'N') = 'N'
  and rt.owner = u.name
  and u.user#  = userenv('SCHEMAID') );

CREATE OR REPLACE FORCE VIEW "ALL_REPCAT_TEMPLATE_SITES"("REFRESH_TEMPLATE_NAME","REFRESH_GROUP_NAME","TEMPLATE_OWNER","USER_NAME","SITE_NAME","REPAPI_SITE_NAME","STATUS","INSTANTIATION_DATE") AS 
select ts.refresh_template_name, ts.refresh_group_name, ts.template_owner,
  ts.user_name,ts.site_name,ss.site_name,
  decode(status,-1,'DELETED',0,'INSTALLING',1,'INSTALLED','UNDEFINED'),
  instantiation_date
from system.repcat$_template_sites ts,
  sys.snap_site$ ss,
  system.repcat$_refresh_templates rt,
  system.repcat$_template_types tt
where ts.repapi_site_id = ss.site_id (+)
and ts.status != -100
and rt.refresh_template_name = ts.refresh_template_name
and rt.template_type_id = tt.template_type_id
and bitand(rawtohex(tt.flags),1) = 1
and rt.refresh_template_id in
  (select rt.refresh_template_id
  from system.repcat$_refresh_templates
  where public_template = 'Y'
  union
  select rt.refresh_template_id
  from system.repcat$_refresh_templates rt,
  system.repcat$_user_authorizations at,
  sys.all_users au
  where at.refresh_template_id = rt.refresh_template_id
  and au.user_id = at.user_id
  and nvl(rt.public_template,'N') = 'N'
  and au.user_id = userenv('SCHEMAID')
  union
  select rt.refresh_template_id
  from system.repcat$_refresh_templates rt
  where nvl(rt.public_template,'N') = 'N'
  and exists
    (select 1 from v$enabledprivs
     where priv_number in (-174 /* alter any snapshot */))
  union
  select rt.refresh_template_id
  from system.repcat$_refresh_templates rt, sys.user$ u
  where  nvl(rt.public_template,'N') = 'N'
  and rt.owner =  u.name
  and u.user#  = userenv('SCHEMAID'));

CREATE OR REPLACE FORCE VIEW "ALL_REPCAT_USER_AUTHORIZATIONS"("REFRESH_TEMPLATE_NAME","OWNER","REFRESH_GROUP_NAME","TEMPLATE_COMMENT","PUBLIC_TEMPLATE","USER_NAME") AS 
select rt.refresh_template_name,rt.owner,rt.refresh_group_name,
rt.template_comment, nvl(rt.public_template,'N'),
u.username
from system.repcat$_refresh_templates rt,
  all_users u,
  system.repcat$_user_authorizations ra,
  system.repcat$_template_types tt
where u.user_id = ra.user_id
and ra.refresh_template_id = rt.refresh_template_id
and rt.template_type_id = tt.template_type_id
and bitand(rawtohex(tt.flags),1) = 1
and rt.refresh_template_id in
  (select rt.refresh_template_id
  from system.repcat$_refresh_templates
  where public_template = 'Y'
  union
  select rt.refresh_template_id
  from system.repcat$_refresh_templates rt,
  system.repcat$_user_authorizations at,
  sys.all_users au
  where at.refresh_template_id = rt.refresh_template_id
  and au.user_id = at.user_id
  and nvl(rt.public_template,'N') = 'N'
  and au.user_id = userenv('SCHEMAID')
  union
  select rt.refresh_template_id
  from system.repcat$_refresh_templates rt
  where nvl(rt.public_template,'N') = 'N'
  and exists
    (select 1 from v$enabledprivs
     where priv_number in (-174 /* alter any snapshot */))
  union
  select rt.refresh_template_id
  from system.repcat$_refresh_templates rt, sys.user$ u
  where  nvl(rt.public_template,'N') = 'N'
  and rt.owner =  u.name
  and u.user#  =  userenv('SCHEMAID'));

CREATE OR REPLACE FORCE VIEW "ALL_REPCAT_USER_PARM_VALUES"("REFRESH_TEMPLATE_NAME","OWNER","REFRESH_GROUP_NAME","TEMPLATE_COMMENT","PUBLIC_TEMPLATE","PARAMETER_NAME","DEFAULT_PARM_VALUE","PROMPT_STRING","PARM_VALUE","USER_NAME") AS 
select rt.refresh_template_name,rt.owner,
rt.refresh_group_name,rt.template_comment,
nvl(rt.public_template,'N'),tp.parameter_name,
tp.default_parm_value, tp.prompt_string, sp.parm_value,
u.username
from system.repcat$_refresh_templates rt,
  system.repcat$_template_parms tp,
  system.repcat$_user_parm_values sp,
  dba_users  u,
  system.repcat$_template_types tt
where tp.refresh_template_id = rt.refresh_template_id
and tp.template_parameter_id = sp.template_parameter_id
and rt.template_type_id = tt.template_type_id
and bitand(rawtohex(tt.flags),1) = 1
and sp.user_id = u.user_id
and rt.refresh_template_id in
  (select rt.refresh_template_id
  from system.repcat$_refresh_templates
  where public_template = 'Y'
  union
  select rt.refresh_template_id
  from system.repcat$_refresh_templates rt,
  system.repcat$_user_authorizations at,
  sys.all_users au
  where at.refresh_template_id = rt.refresh_template_id
  and au.user_id = at.user_id
  and nvl(rt.public_template,'N') = 'N'
  and au.user_id = userenv('SCHEMAID')
  union
  select rt.refresh_template_id
  from system.repcat$_refresh_templates rt
  where nvl(rt.public_template,'N') = 'N'
  and exists
    (select 1 from v$enabledprivs
     where priv_number in (-174 /* alter any snapshot */))
  union
  select rt.refresh_template_id
  from system.repcat$_refresh_templates rt, sys.user$ u
  where  nvl(rt.public_template,'N') = 'N'
  and rt.owner =  u.name
  and u.user#  = userenv('SCHEMAID'));

CREATE OR REPLACE FORCE VIEW "ALL_REPCOLUMN"("SNAME","ONAME","TYPE","CNAME","ID","POS","COMPARE_OLD_ON_DELETE","COMPARE_OLD_ON_UPDATE","SEND_OLD_ON_DELETE","SEND_OLD_ON_UPDATE","CTYPE","CTYPE_TOID","CTYPE_OWNER","CTYPE_HASHCODE","CTYPE_MOD","DATA_LENGTH","DATA_PRECISION","DATA_SCALE","NULLABLE","CHARACTER_SET_NAME","TOP","CHAR_LENGTH","CHAR_USED") AS 
select
 r.sname, r.oname, r.type, r.cname, r.id, r.pos, r.compare_old_on_delete,
 r.compare_old_on_update, r.send_old_on_delete, r.send_old_on_update,
 r.ctype, r.ctype_toid, r.ctype_owner, r.ctype_hashcode,
 r.ctype_mod, r.data_length, r.data_precision, r.data_scale, r.nullable,
 r.character_set_name, r.top, r.char_length, r.char_used
from all_tab_columns tc, sys.dba_repcolumn r
where r.sname = tc.owner
  and r.oname = tc.table_name
  and ((r.top IS NOT NULL AND r.top = tc.column_name) OR
       (r.top IS NULL AND r.cname = tc.column_name))
union
select
 r.sname, r.oname, r.type, r.cname, r.id, r.pos, r.compare_old_on_delete,
 r.compare_old_on_update, r.send_old_on_delete, r.send_old_on_update,
 r.ctype, r.ctype_toid, r.ctype_owner, r.ctype_hashcode,
 r.ctype_mod, r.data_length, r.data_precision, r.data_scale, r.nullable,
 r.character_set_name, r.top, r.char_length, r.char_used
from  "_ALL_REPL_NESTED_TABLE_NAMES" nt, sys.dba_repcolumn r
where r.sname = nt.owner
  and r.oname = nt.table_name;

CREATE OR REPLACE FORCE VIEW "ALL_REPCOLUMN_GROUP"("SNAME","ONAME","GROUP_NAME","GROUP_COMMENT") AS 
select
    c.sname,
    c.oname,
    c.group_name,
    c.group_comment
from system.repcat$_column_group c, all_repobject o
  where c.sname = o.sname and c.oname = o.oname
    and o.type in ('TABLE', 'SNAPSHOT');

CREATE OR REPLACE FORCE VIEW "ALL_REPCONFLICT"("SNAME","ONAME","CONFLICT_TYPE","REFERENCE_NAME") AS 
select
    sname,
    oname,
    decode(conflict_type_id,
           1, 'UPDATE',
           2, 'UNIQUENESS',
           3, 'DELETE',
           'UNDEFINED'),
    reference_name
from  system.repcat$_conflict,
      sys.user$ u, sys.obj$ o
where sname = u.name
  and oname = o.name
  and o.owner# = u.user#
  and o.type# = 2 /* tables */
  and (o.owner# = userenv('SCHEMAID')
        or
       o.obj# in ( select obj#
                   from objauth$
                   where grantee# in ( select kzsrorol
                                       from x$kzsro
                                     )
                  )
        or
	 exists (select null from v$enabledprivs
	         where priv_number in (-45 /* LOCK ANY TABLE */,
				       -47 /* SELECT ANY TABLE */,
				       -48 /* INSERT ANY TABLE */,
				       -49 /* UPDATE ANY TABLE */,
				       -50 /* DELETE ANY TABLE */)
                 )
       );

CREATE OR REPLACE FORCE VIEW "ALL_REPDDL"("LOG_ID","SOURCE","ROLE","MASTER","LINE","TEXT","DDL_NUM") AS 
select r.log_id, r.source, r.role, r.master, r.line, r.text, r.ddl_num
from system.repcat$_ddl r, all_repcatlog u
where r.log_id = u.id
  and r.source = u.source;

CREATE OR REPLACE FORCE VIEW "ALL_REPFLAVORS"("FLAVOR_ID","GNAME","FNAME","CREATION_DATE","CREATED_BY","PUBLISHED","GROUP_OWNER") AS 
select f.flavor_id, f.gname, f.fname, f.creation_date, u.name, f.published,
       f.gowner
from system.repcat$_flavors f, user$ u
where f.created_by = u.user# (+);

CREATE OR REPLACE FORCE VIEW "ALL_REPFLAVOR_COLUMNS"("FNAME","GNAME","SNAME","ONAME","CNAME","TYPE","POS","GROUP_OWNER","TYPE_TOID","TYPE_OWNER","TYPE_HASHCODE","TYPE_MOD","TOP") AS 
SELECT fc.fname, fc.gname, fc.sname, fc.oname, fc.cname, fc.type, fc.pos,
         fc.group_owner, fc.type_toid, fc.type_owner,
         fc.type_hashcode, fc.type_mod, fc.top
    FROM dba_repflavor_columns fc, all_tab_columns tc
    WHERE fc.sname = tc.owner
      AND fc.oname = tc.table_name
      AND ((fc.top IS NOT NULL AND fc.top = tc.column_name) OR
           (fc.top IS NULL AND fc.cname = tc.column_name))
UNION
  SELECT fc.fname, fc.gname, fc.sname, fc.oname, fc.cname, fc.type, fc.pos,
         fc.group_owner, fc.type_toid, fc.type_owner,
         fc.type_hashcode, fc.type_mod, fc.top
    FROM dba_repflavor_columns fc, "_ALL_REPL_NESTED_TABLE_NAMES" nt
    WHERE fc.sname = nt.owner
      AND fc.oname = nt.table_name;

CREATE OR REPLACE FORCE VIEW "ALL_REPFLAVOR_OBJECTS"("FNAME","GNAME","SNAME","ONAME","TYPE","GROUP_OWNER") AS 
SELECT UNIQUE fo.fname, fo.gname, fo.sname, fo.oname,
       fo.type, fo.group_owner
from dba_repflavor_objects fo, all_objects o
where fo.sname = o.owner
  and fo.oname = o.object_name
  and (fo.type = o.object_type OR
       fo.type = 'SNAPSHOT' and o.object_type IN ('VIEW', 'TABLE'));

CREATE OR REPLACE FORCE VIEW "ALL_REPGENERATED"("SNAME","ONAME","TYPE","BASE_SNAME","BASE_ONAME","BASE_TYPE","PACKAGE_PREFIX","PROCEDURE_PREFIX","DISTRIBUTED","REASON") AS 
select r.sname, r.oname, r.type, r.base_sname, r.base_oname, r.base_type,
  r.package_prefix, r.procedure_prefix, r.distributed, r.reason
from repcat_generated r, all_users u, all_objects o
where r.base_sname = u.username
  and r.base_sname = o.owner
  and r.base_oname = o.object_name
  and (r.base_type = o.object_type
       or (r.base_type = 'SNAPSHOT'
           and o.object_type IN ('VIEW','TABLE')))
  and ((r.reason  = 'PROCEDURAL REPLICATION WRAPPER' and r.type != 'SYNONYM')
     or r.reason != 'PROCEDURAL REPLICATION WRAPPER')
union
select r.sname, r.oname, r.type, r.base_sname, r.base_oname, r.base_type,
  r.package_prefix, r.procedure_prefix, r.distributed, r.reason
from user_repgenerated r
union
select r.sname, r.oname, r.type, r.base_sname, r.base_oname,
		r.base_type, r.package_prefix, r.procedure_prefix,
		r.distributed, r.reason
from repcat_generated r, all_users u, repcat_repobject ro
where r.base_sname = u.username
and ((r.reason  = 'PROCEDURAL REPLICATION WRAPPER'
		and r.type != 'SYNONYM')
or r.reason != 'PROCEDURAL REPLICATION WRAPPER')
and r.sname = ro.sname
and r.oname = ro.oname
and r.type = ro.type
and (ro.gname, ro.gowner) in
(select nvl(rp.gname,ro.gname), nvl(rp.owner, ro.gowner)
	from user_repgroup_privileges rp
	where rp.proxy_snapadmin='Y');

CREATE OR REPLACE FORCE VIEW "ALL_REPGENOBJECTS"("SNAME","ONAME","TYPE","BASE_SNAME","BASE_ONAME","BASE_TYPE","PACKAGE_PREFIX","PROCEDURE_PREFIX","DISTRIBUTED","REASON") AS 
select r.sname, r.oname, r.type, r.base_sname, r.base_oname, r.base_type,
  r.package_prefix, r.procedure_prefix, r.distributed, r.reason
from repcat_generated r, all_users u, all_objects o
where r.base_sname = u.username
  and r.base_sname = o.owner
  and r.base_oname = o.object_name
  and (r.base_type = o.object_type
       or (r.base_type = 'SNAPSHOT'
           and o.object_type IN ('VIEW','TABLE')))
union
select r.sname, r.oname, r.type, r.base_sname, r.base_oname, r.base_type,
  r.package_prefix, r.procedure_prefix, r.distributed, r.reason
from user_repgenobjects r
union
select r.sname, r.oname, r.type, r.base_sname, r.base_oname,
		r.base_type, r.package_prefix, r.procedure_prefix,
		r.distributed, r.reason
from repcat_generated r, all_users u, repcat_repobject ro
where r.base_sname = u.username
and r.base_sname = ro.sname
and r.base_oname = ro.oname
and r.base_type = ro.type
and (ro.gname, ro.gowner) in
(select nvl(rp.gname,ro.gname), nvl(rp.owner, ro.gowner)
	from user_repgroup_privileges rp
	where rp.proxy_snapadmin='Y');

CREATE OR REPLACE FORCE VIEW "ALL_REPGROUP"("SNAME","MASTER","STATUS","SCHEMA_COMMENT","GNAME","FNAME","RPC_PROCESSING_DISABLED","OWNER") AS 
select r.sname, r.master, r.status, r.schema_comment, r.sname, r.fname,
       r.rpc_processing_disabled, r.gowner
from repcat_repcat r;

CREATE OR REPLACE FORCE VIEW "ALL_REPGROUPED_COLUMN"("SNAME","ONAME","GROUP_NAME","COLUMN_NAME") AS 
select
    g.sname,
    g.oname,
    g.group_name,
    g.column_name
from all_tab_columns tc, sys.dba_repgrouped_column g
where g.sname = tc.owner
  and g.oname = tc.table_name
  and g.column_name = tc.column_name
union
select
    g.sname,
    g.oname,
    g.group_name,
    g.column_name
from "_ALL_REPL_NESTED_TABLE_NAMES" nt, sys.dba_repgrouped_column g
where g.sname = nt.owner
  and g.oname = nt.table_name;

CREATE OR REPLACE FORCE VIEW "ALL_REPGROUP_PRIVILEGES"("USERNAME","GNAME","CREATED","RECEIVER","PROXY_SNAPADMIN","OWNER") AS 
select u.username, rp.gname, rp.created,
       decode(bitand(rp.privilege, 1), 1, 'Y', 'N'),
       decode(bitand(rp.privilege, 2), 2, 'Y', 'N'),
       rp.gowner
from  system.repcat$_repgroup_privs rp, all_users u
where rp.username = u.username
  and u.user_id = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "ALL_REPKEY_COLUMNS"("SNAME","ONAME","COL") AS 
select r.sname, r.oname, r.col
from sys.dba_repkey_columns r, all_repobject ro
where r.sname = ro.sname
  and r.oname = ro.oname
  and ro.type IN ('TABLE', 'SNAPSHOT');

CREATE OR REPLACE FORCE VIEW "ALL_REPOBJECT"("SNAME","ONAME","TYPE","STATUS","GENERATION_STATUS","ID","OBJECT_COMMENT","GNAME","MIN_COMMUNICATION","REPLICATION_TRIGGER_EXISTS","INTERNAL_PACKAGE_EXISTS","GROUP_OWNER","NESTED_TABLE") AS 
select r.sname, r.oname, r.type, r.status, r.generation_status, r.id,
       r.object_comment, r.gname, r.min_communication,
       r.trigflag replication_trigger_exists, r.internal_package_exists,
       r.gowner, r.nested_table
from repcat_repobject r, all_objects o
where (r.sname = 'PUBLIC' or r.sname in (select u.username from all_users u))
  and r.sname = o.owner
  and r.oname = o.object_name
  and r.type != 'INTERNAL PACKAGE'
  and (r.type = o.object_type
       or (r.type = 'SNAPSHOT'
           and o.object_type IN ('VIEW','TABLE')))
union
select r.sname, r.oname, r.type, r.status, r.generation_status, r.id,
       r.object_comment, r.gname, r.min_communication,
       r.replication_trigger_exists, r.internal_package_exists, r.group_owner,
       r.nested_table
from user_repobject r
union
select r.sname, r.oname, r.type, r.status, r.generation_status,
       r.id, r.object_comment, r.gname, r.min_communication,
       r.trigflag replication_trigger_exists, r.internal_package_exists,
       r.gowner, r.nested_table
from repcat_repobject r
where (r.sname = 'PUBLIC' or r.sname in
        (select u.username from all_users u))
and (r.gname, r.gowner) in
(select nvl(rp.gname,r.gname), nvl(rp.owner, r.gowner)
	from user_repgroup_privileges rp
	where rp.proxy_snapadmin='Y');

CREATE OR REPLACE FORCE VIEW "ALL_REPPARAMETER_COLUMN"("SNAME","ONAME","CONFLICT_TYPE","REFERENCE_NAME","SEQUENCE_NO","METHOD_NAME","FUNCTION_NAME","PRIORITY_GROUP","PARAMETER_TABLE_NAME","PARAMETER_COLUMN_NAME","PARAMETER_SEQUENCE_NO") AS 
select
    p.sname,
    p.oname,
    decode(p.conflict_type_id,
           1, 'UPDATE',
           2, 'UNIQUENESS',
           3, 'DELETE',
           'UNDEFINED'),
    p.reference_name,
    p.sequence_no,
    r.method_name,
    r.function_name,
    r.priority_group,
    p.parameter_table_name,
    decode(method_name, 'USER FUNCTION', NVL(rc.top, rc.lcname),
                        'USER FLAVOR FUNCTION', NVL(rc.top, rc.lcname),
           rc.lcname),
    p.parameter_sequence_no
from  system.repcat$_parameter_column p,
      system.repcat$_resolution r,
      system.repcat$_repcolumn rc,
      all_tab_columns tc
where p.sname = r.sname
and   p.oname = r.oname
and   p.conflict_type_id = r.conflict_type_id
and   p.reference_name = r.reference_name
and   p.sequence_no = r.sequence_no
and   p.oname = p.parameter_table_name
and   p.attribute_sequence_no = 1
and   p.sname = rc.sname
and   p.oname = rc.oname
and   p.column_pos = rc.pos
and   p.sname = tc.owner
and   p.oname = tc.table_name
and   ((rc.top is null and rc.lcname = tc.column_name) or
       (rc.top is not null and rc.top = tc.column_name))
union
  select p.sname, p.oname, p.conflict_type, p.reference_name, p.sequence_no,
         p.method_name, p.function_name, p.priority_group,
         p.parameter_table_name, p.parameter_column_name,
         p.parameter_sequence_no
from  "_ALL_REPL_NESTED_TABLE_NAMES" nt, dba_repparameter_column p
where p.sname = nt.owner
  and p.parameter_table_name = nt.table_name
  and p.oname = p.parameter_table_name;

CREATE OR REPLACE FORCE VIEW "ALL_REPPRIORITY"("SNAME","PRIORITY_GROUP","PRIORITY","DATA_TYPE","FIXED_DATA_LENGTH","CHAR_VALUE","VARCHAR2_VALUE","NUMBER_VALUE","DATE_VALUE","RAW_VALUE","GNAME","NCHAR_VALUE","NVARCHAR2_VALUE","LARGE_CHAR_VALUE") AS 
select
    p.sname,
    p.priority_group,
    v.priority,
    decode(p.data_type_id,
           1, 'NUMBER',
           2, 'VARCHAR2',
           3, 'DATE',
           4, 'CHAR',
           5, 'RAW',
           6, 'NVARCHAR2',
           7, 'NCHAR',
           'UNDEFINED'),
    p.fixed_data_length,
    v.char_value,
    v.varchar2_value,
    v.number_value,
    v.date_value,
    v.raw_value,
    p.sname,
    v.nchar_value,
    v.nvarchar2_value,
    v.large_char_value
from  system.repcat$_priority v,
      system.repcat$_priority_group p
where v.sname = p.sname
and   v.priority_group = p.priority_group;

CREATE OR REPLACE FORCE VIEW "ALL_REPPRIORITY_GROUP"("SNAME","PRIORITY_GROUP","DATA_TYPE","FIXED_DATA_LENGTH","PRIORITY_COMMENT","GNAME") AS 
select
    sname,
    priority_group,
    decode(data_type_id,
           1, 'NUMBER',
           2, 'VARCHAR2',
           3, 'DATE',
           4, 'CHAR',
           5, 'RAW',
           6, 'NVARCHAR2',
           7, 'NCHAR',
           'UNDEFINED'),
    fixed_data_length,
    priority_comment,
    sname
from  system.repcat$_priority_group;

CREATE OR REPLACE FORCE VIEW "ALL_REPPROP"("SNAME","ONAME","TYPE","DBLINK","HOW","PROPAGATE_COMMENT") AS 
select r.sname, r.oname, r.type, r.dblink, r.how, r.propagate_comment
from repcat_repprop r, all_users u, all_repobject ro
where r.sname = u.username
  and r.sname = ro.sname
  and r.oname = ro.oname
  and r.type = ro.type
  and ro.type in ('PROCEDURE', 'PACKAGE', 'PACKAGE BODY', 'TABLE', 'SNAPSHOT');

CREATE OR REPLACE FORCE VIEW "ALL_REPRESOLUTION"("SNAME","ONAME","CONFLICT_TYPE","REFERENCE_NAME","SEQUENCE_NO","METHOD_NAME","FUNCTION_NAME","PRIORITY_GROUP","RESOLUTION_COMMENT") AS 
select
    sname,
    oname,
    decode(conflict_type_id,
           1, 'UPDATE',
           2, 'UNIQUENESS',
           3, 'DELETE',
           'UNDEFINED'),
    reference_name,
    sequence_no,
    method_name,
    function_name,
    priority_group,
    resolution_comment
from  system.repcat$_resolution,
      sys.user$ u, sys.obj$ o
where sname = u.name
  and oname = o.name
  and o.owner# = u.user#
  and o.type# = 2 /* tables */
  and (o.owner# = userenv('SCHEMAID')
        or
       o.obj# in ( select obj#
                   from objauth$
                   where grantee# in ( select kzsrorol
                                       from x$kzsro
                                     )
                  )
        or
	 exists (select null from v$enabledprivs
	         where priv_number in (-45 /* LOCK ANY TABLE */,
				       -47 /* SELECT ANY TABLE */,
				       -48 /* INSERT ANY TABLE */,
				       -49 /* UPDATE ANY TABLE */,
				       -50 /* DELETE ANY TABLE */)
                 )
       );

CREATE OR REPLACE FORCE VIEW "ALL_REPRESOLUTION_METHOD"("CONFLICT_TYPE","METHOD_NAME") AS 
select
    decode(conflict_type_id,
           1, 'UPDATE',
           2, 'UNIQUENESS',
           3, 'DELETE',
           'UNDEFINED'),
    method_name
from  system.repcat$_resolution_method;

CREATE OR REPLACE FORCE VIEW "ALL_REPRESOLUTION_STATISTICS"("SNAME","ONAME","CONFLICT_TYPE","REFERENCE_NAME","METHOD_NAME","FUNCTION_NAME","PRIORITY_GROUP","RESOLVED_DATE","PRIMARY_KEY_VALUE") AS 
select
    sname,
    oname,
    decode(conflict_type_id,
           1, 'UPDATE',
           2, 'UNIQUENESS',
           3, 'DELETE',
           'UNDEFINED'),
    reference_name,
    method_name,
    decode(method_name,
           'USER FUNCTION', function_name,
           'USER FLAVOR FUNCTION', function_name,
           NULL),
    priority_group,
    resolved_date,
    primary_key_value
from  system.repcat$_resolution_statistics,
      sys.user$ u, sys.obj$ o
where sname = u.name
  and oname = o.name
  and o.owner# = u.user#
  and o.type# = 2 /* tables */
  and (o.owner# = userenv('SCHEMAID')
        or
       o.obj# in ( select obj#
                   from objauth$
                   where grantee# in ( select kzsrorol
                                       from x$kzsro
                                     )
                  )
        or
	 exists (select null from v$enabledprivs
	         where priv_number in (-45 /* LOCK ANY TABLE */,
				       -47 /* SELECT ANY TABLE */,
				       -48 /* INSERT ANY TABLE */,
				       -49 /* UPDATE ANY TABLE */,
				       -50 /* DELETE ANY TABLE */)
                 )
       );

CREATE OR REPLACE FORCE VIEW "ALL_REPRESOL_STATS_CONTROL"("SNAME","ONAME","CREATED","STATUS","STATUS_UPDATE_DATE","PURGED_DATE","LAST_PURGE_START_DATE","LAST_PURGE_END_DATE") AS 
select
    c.sname,
    c.oname,
    c.created,
    decode(c.status,
           1, 'ACTIVE',
           2, 'CANCELLED',
           'UNDEFINED'),
    c.status_update_date,
    c.purged_date,
    c.last_purge_start_date,
    c.last_purge_end_date
from  system.repcat$_resol_stats_control c,
      sys.user$ u, sys.obj$ o
where c.sname = u.name
  and c.oname = o.name
  and o.owner# = u.user#
  and o.type# = 2 /* tables */
  and (o.owner# = userenv('SCHEMAID')
        or
       o.obj# in ( select obj#
                   from objauth$
                   where grantee# in ( select kzsrorol
                                       from x$kzsro
                                     )
                  )
        or
	 exists (select null from v$enabledprivs
	         where priv_number in (-45 /* LOCK ANY TABLE */,
				       -47 /* SELECT ANY TABLE */,
				       -48 /* INSERT ANY TABLE */,
				       -49 /* UPDATE ANY TABLE */,
				       -50 /* DELETE ANY TABLE */)
                 )
       );

CREATE OR REPLACE FORCE VIEW "ALL_REPSCHEMA"("SNAME","DBLINK","MASTERDEF","SNAPMASTER","MASTER_COMMENT","GNAME","MASTER","GROUP_OWNER") AS 
select r.sname, r.dblink, r.masterdef, r.snapmaster, r.master_comment, r.sname,
       r.master, r.gowner
from repcat_repschema r;

CREATE OR REPLACE FORCE VIEW "ALL_REPSITES"("GNAME","DBLINK","MASTERDEF","SNAPMASTER","MASTER_COMMENT","MASTER","GROUP_OWNER") AS 
select r.sname, r.dblink, r.masterdef, r.snapmaster, r.master_comment,
       r.master, r.gowner
from repcat_repschema r;

CREATE OR REPLACE FORCE VIEW "ALL_REWRITE_EQUIVALENCES"("OWNER","NAME","SOURCE_STMT","DESTINATION_STMT","REWRITE_MODE") AS 
select m."OWNER",m."NAME",m."SOURCE_STMT",m."DESTINATION_STMT",m."REWRITE_MODE" from dba_rewrite_equivalences m, sys.obj$ o, sys.user$ u
where o.owner# = u.user#
  and m.name   = o.name
  and u.name   = m.owner
  and ( o.owner# = userenv('SCHEMAID')
        or
        o.obj# in ( select obj#
                    from sys.objauth$
                    where grantee# in ( select kzsrorol
                                        from x$kzsro
                                      )
                  )
        or /* user has system privileges */
        exists ( select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
               )
      );

CREATE OR REPLACE FORCE VIEW "ALL_RULES"("RULE_OWNER","RULE_NAME","RULE_CONDITION","RULE_EVALUATION_CONTEXT_OWNER","RULE_EVALUATION_CONTEXT_NAME","RULE_ACTION_CONTEXT","RULE_COMMENT") AS 
SELECT /*+ all_rows */
       u.name, o.name, r.condition, bu.name, bo.name, r.r_action, r.r_comment
FROM   rule$ r, obj$ o, user$ u, obj$ bo, user$ bu
WHERE  r.obj# = o.obj# and
       (o.owner# in (USERENV('SCHEMAID'), 1 /* PUBLIC */) or
        o.obj# in (select oa.obj# from sys.objauth$ oa
                   where grantee# in (select kzsrorol from x$kzsro)) or
        exists (select null from v$enabledprivs where priv_number in (
                 -258, /* create any rule */
                 -259, /* alter any rule */
                 -260, /* drop any rule */
                 -261  /* execute any rule set */))) and
       o.owner# = u.user# and r.ectx# = bo.obj#(+) and bo.owner# = bu.user#(+);

CREATE OR REPLACE FORCE VIEW "ALL_RULESETS"("OWNER","RULESET_NAME","RULESET_STORAGE_TABLE","BASE_TABLE","RULESET_COMMENT") AS 
SELECT rule_set_owner, rule_set_name, NULL,
       decode(rule_set_eval_context_owner, NULL, NULL,
              rule_set_eval_context_owner||'.'||rule_set_eval_context_name),
       rule_set_comment
FROM   all_rule_sets;

CREATE OR REPLACE FORCE VIEW "ALL_RULE_SETS"("RULE_SET_OWNER","RULE_SET_NAME","RULE_SET_EVAL_CONTEXT_OWNER","RULE_SET_EVAL_CONTEXT_NAME","RULE_SET_COMMENT") AS 
SELECT /*+ all_rows */
       u.name, o.name, bu.name, bo.name, r.rs_comment
FROM   rule_set$ r, obj$ o, user$ u, obj$ bo, user$ bu
WHERE  r.obj# = o.obj# and
       (o.owner# in (USERENV('SCHEMAID'), 1 /* PUBLIC */) or
        o.obj# in (select oa.obj# from sys.objauth$ oa
                   where grantee# in (select kzsrorol from x$kzsro)) or
        exists (select null from v$enabledprivs where priv_number in (
                 -251, /* create any rule set */
                 -252, /* alter any rule set */
                 -253, /* drop any rule set */
                 -254  /* execute any rule set */))) and
       u.user# = o.owner# and
       r.ectx# = bo.obj#(+) and bo.owner# = bu.user#(+);

CREATE OR REPLACE FORCE VIEW "ALL_RULE_SET_RULES"("RULE_SET_OWNER","RULE_SET_NAME","RULE_OWNER","RULE_NAME","RULE_SET_RULE_ENABLED","RULE_SET_RULE_EVAL_CTX_OWNER","RULE_SET_RULE_EVAL_CTX_NAME","RULE_SET_RULE_COMMENT") AS 
SELECT /*+ all_rows */
       u.name, o.name, ru.name, ro.name,
       decode(bitand(rm.property, 1), 1, 'DISABLED', 'ENABLED'),
       eu.name, eo.name, rm.rm_comment
FROM   rule_map$ rm, obj$ o, user$ u, obj$ ro, user$ ru, obj$ eo, user$ eu
WHERE  rm.rs_obj# = o.obj# and
       (o.owner# in (USERENV('SCHEMAID'), 1 /* PUBLIC */) or
        o.obj# in (select oa.obj# from sys.objauth$ oa
                   where grantee# in (select kzsrorol from x$kzsro)) or
        exists (select null from v$enabledprivs where priv_number in (
                 -251, /* create any rule set */
                 -252, /* alter any rule set */
                 -253, /* drop any rule set */
                 -254  /* execute any rule set */))) and
       o.owner# = u.user# and rm.r_obj# = ro.obj# and ro.owner# = ru.user#
       and rm.ectx# = eo.obj#(+) and eo.owner# = eu.user#(+);

CREATE OR REPLACE FORCE VIEW "ALL_SCHEDULER_GLOBAL_ATTRIBUTE"("ATTRIBUTE_NAME","VALUE") AS 
SELECT o.name, a.value
 FROM sys.obj$ o, sys.scheduler$_global_attribute a
 WHERE o.obj# = a.obj#;

CREATE OR REPLACE FORCE VIEW "ALL_SCHEDULER_JOBS"("OWNER","JOB_NAME","JOB_CREATOR","CLIENT_ID","GLOBAL_UID","PROGRAM_OWNER","PROGRAM_NAME","JOB_TYPE","JOB_ACTION","NUMBER_OF_ARGUMENTS","SCHEDULE_OWNER","SCHEDULE_NAME","START_DATE","REPEAT_INTERVAL","END_DATE","JOB_CLASS","ENABLED","AUTO_DROP","RESTARTABLE","STATE","JOB_PRIORITY","RUN_COUNT","MAX_RUNS","FAILURE_COUNT","MAX_FAILURES","RETRY_COUNT","LAST_START_DATE","LAST_RUN_DURATION","NEXT_RUN_DATE","SCHEDULE_LIMIT","MAX_RUN_DURATION","LOGGING_LEVEL","STOP_ON_WINDOW_CLOSE","INSTANCE_STICKINESS","SYSTEM","JOB_WEIGHT","NLS_ENV","SOURCE","DESTINATION","COMMENTS","FLAGS") AS 
SELECT ju.name, jo.name, j.creator, j.client_id, j.guid,
    DECODE(bitand(j.flags,4194304),4194304,
      substr(j.program_action,1,instr(j.program_action,'"')-1),NULL),
    DECODE(bitand(j.flags,4194304),4194304,
      substr(j.program_action,instr(j.program_action,'"')+1,
        length(j.program_action)-instr(j.program_action,'"')) ,NULL),
    DECODE(BITAND(j.flags,131072+262144+2097152),
      131072, 'PLSQL_BLOCK', 262144, 'STORED_PROCEDURE',
      2097152, 'EXECUTABLE', 524288, 'JOB_CHAIN', NULL),
    DECODE(bitand(j.flags,4194304),0,j.program_action,NULL), j.number_of_args,
    DECODE(bitand(j.flags,1024+4096),0,NULL,
      substr(j.schedule_expr,1,instr(j.schedule_expr,'"')-1)),
    DECODE(bitand(j.flags,1024+4096),0,NULL,
      substr(j.schedule_expr,instr(j.schedule_expr,'"') + 1,
        length(j.schedule_expr)-instr(j.schedule_expr,'"'))),
    j.start_date,
    DECODE(BITAND(j.flags,1024+4096), 0, j.schedule_expr, NULL),
    j.end_date, co.name,
    DECODE(BITAND(j.job_status,1+8388608),0,'FALSE','TRUE'),
    DECODE(BITAND(j.flags,32768),0,'TRUE','FALSE'),
    DECODE(BITAND(j.flags,65536),0,'FALSE','TRUE'),
    DECODE(BITAND(j.job_status,1+2+4+8+16+32+128),0,'DISABLED',1,
      (CASE WHEN j.retry_count>0 THEN 'RETRY SCHEDULED' ELSE 'SCHEDULED' END),
      2,'RUNNING',3,'RUNNING',4,'COMPLETED',8,'BROKEN',16,'FAILED',32,'SUCCEEDED'
      ,128,'REMOTE',NULL),
    j.priority, j.run_count, j.max_runs, j.failure_count, j.max_failures,
    j.retry_count,
    j.last_start_date,
    (CASE WHEN j.last_end_date>j.last_start_date THEN j.last_end_date-j.last_start_date
       ELSE NULL END), j.next_run_date,
    j.schedule_limit, j.max_run_duration,
    DECODE(BITAND(j.flags,32+64+128+256),32,'OFF',64,'RUNS',128,'',
      256,'FULL',NULL),
    DECODE(BITAND(j.flags,8),0,'FALSE','TRUE'),
    DECODE(BITAND(j.flags,16),0,'FALSE','TRUE'),
    DECODE(BITAND(j.flags,16777216),0,'FALSE','TRUE'),
    j.job_weight, j.nls_env,
    j.source, j.destination, j.comments, j.flags
  FROM obj$ jo, user$ ju, sys.scheduler$_job j, obj$ co
  WHERE j.obj# = jo.obj# AND jo.owner# = ju.user# AND
    j.class_oid = co.obj#(+) AND
    (jo.owner# = userenv('SCHEMAID')
       or jo.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         (exists (select null from v$enabledprivs
                 where priv_number = -265 /* CREATE ANY JOB */
                 )
          and jo.owner#!=0)
       );

CREATE OR REPLACE FORCE VIEW "ALL_SCHEDULER_JOB_ARGS"("OWNER","JOB_NAME","ARGUMENT_NAME","ARGUMENT_POSITION","ARGUMENT_TYPE","VALUE","ANYDATA_VALUE","OUT_ARGUMENT") AS 
SELECT u.name, o.name, b.name, t.position,
  CASE WHEN (b.user_type_num IS NULL) THEN
    DECODE(b.type_number,
0, null,
1, decode(b.flags, 512, 'NVARCHAR2', 'VARCHAR2'),
2, decode(b.flags, 512, 'FLOAT', 'NUMBER'),
3, 'NATIVE INTEGER',
8, 'LONG',
9, decode(b.flags, 512, 'NCHAR VARYING', 'VARCHAR'),
11, 'ROWID',
12, 'DATE',
23, 'RAW',
24, 'LONG RAW',
29, 'BINARY_INTEGER',
69, 'ROWID',
96, decode(b.flags, 512, 'NCHAR', 'CHAR'),
100, 'BINARY_FLOAT',
101, 'BINARY_DOUBLE',
102, 'REF CURSOR',
104, 'UROWID',
105, 'MLSLABEL',
106, 'MLSLABEL',
110, 'REF',
111, 'REF',
112, decode(b.flags, 512, 'NCLOB', 'CLOB'),
113, 'BLOB', 114, 'BFILE', 115, 'CFILE',
121, 'OBJECT',
122, 'TABLE',
123, 'VARRAY',
178, 'TIME',
179, 'TIME WITH TIME ZONE',
180, 'TIMESTAMP',
181, 'TIMESTAMP WITH TIME ZONE',
231, 'TIMESTAMP WITH LOCAL TIME ZONE',
182, 'INTERVAL YEAR TO MONTH',
183, 'INTERVAL DAY TO SECOND',
250, 'PL/SQL RECORD',
251, 'PL/SQL TABLE',
252, 'PL/SQL BOOLEAN',
'UNDEFINED')
    ELSE t_u.name ||'.'|| t_o.name END,
  dbms_scheduler.get_varchar2_value(t.value), t.value,
  DECODE(BITAND(b.flags,1),0,'FALSE',1,'TRUE')
  FROM obj$ t_o, user$ t_u,
    sys.scheduler$_program_argument b, obj$ o, user$ u,
    (SELECT a.oid job_oid, a.position position,
      j.program_oid program_oid, a.value value
    FROM sys.scheduler$_job j, sys.scheduler$_job_argument a
    WHERE a.oid = j.obj#) t
  WHERE t.job_oid = o.obj# AND u.user# = o.owner#
    AND b.user_type_num = t_o.obj#(+) AND t_o.owner# = t_u.user#(+)
    AND t.program_oid=b.oid(+) AND t.position=b.position(+) AND
    (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         (exists (select null from v$enabledprivs
                 where priv_number = -265 /* CREATE ANY JOB */
                 )
          and o.owner#!=0)
      );

CREATE OR REPLACE FORCE VIEW "ALL_SCHEDULER_JOB_CLASSES"("JOB_CLASS_NAME","RESOURCE_CONSUMER_GROUP","SERVICE","LOGGING_LEVEL","LOG_HISTORY","COMMENTS") AS 
SELECT co.name, c.res_grp_name,
    c.affinity ,
    DECODE(BITAND(c.flags,32+64+128+256),32,'OFF',64,'RUNS',128,'',
      256,'FULL',NULL),
    c.log_history, c.comments
  FROM obj$ co, sys.scheduler$_class c
  WHERE c.obj# = co.obj# AND
    (co.obj# in
         (select oa.obj#
          from sys.objauth$ oa
          where grantee# in ( select kzsrorol
                              from x$kzsro
                            )
         )
     or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-267, /* EXECUTE ANY CLASS */
                                       -268  /* MANAGE SCHEDULER */ )
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_SCHEDULER_JOB_LOG"("LOG_ID","LOG_DATE","OWNER","JOB_NAME","JOB_CLASS","OPERATION","STATUS","USER_NAME","CLIENT_ID","GLOBAL_UID","ADDITIONAL_INFO") AS 
(SELECT
        e.LOG_ID, e.LOG_DATE, e.OWNER, e.NAME, co.NAME, OPERATION, e.STATUS,
        e.USER_NAME, e.CLIENT_ID, e.GUID, e.ADDITIONAL_INFO
   FROM scheduler$_event_log e, obj$ co
   WHERE e.type# = 66 and e.class_id = co.obj#(+)
   AND ( e.owner = SYS_CONTEXT('USERENV','CURRENT_SCHEMA')
         or  /* user has object privileges */
            ( select jo.obj# from obj$ jo, user$ ju where  e.name = jo.name
                and e.owner = ju.name and jo.owner# = ju.user#
            ) in
            ( select oa.obj#
                from sys.objauth$ oa
                where grantee# in ( select kzsrorol from x$kzsro )
            )
         or /* user has system privileges */
            (exists ( select null from v$enabledprivs
                       where priv_number = -265 /* CREATE ANY JOB */
                   )
             and e.owner!='SYS')
        )
  );

CREATE OR REPLACE FORCE VIEW "ALL_SCHEDULER_JOB_RUN_DETAILS"("LOG_ID","LOG_DATE","OWNER","JOB_NAME","STATUS","ERROR#","REQ_START_DATE","ACTUAL_START_DATE","RUN_DURATION","INSTANCE_ID","SESSION_ID","SLAVE_PID","CPU_USED","ADDITIONAL_INFO") AS 
(SELECT
        j.LOG_ID, j.LOG_DATE, e.OWNER, e.NAME, e.STATUS, j.ERROR#,
        j.REQ_START_DATE, j.START_DATE, j.RUN_DURATION, j.INSTANCE_ID,
        j.SESSION_ID, j.SLAVE_PID, j.CPU_USED, j.ADDITIONAL_INFO
   FROM scheduler$_job_run_details j, scheduler$_event_log e
   WHERE j.log_id = e.log_id
   AND e.type# = 66
   AND ( e.owner = SYS_CONTEXT('USERENV','CURRENT_SCHEMA')
         or  /* user has object privileges */
            ( select jo.obj# from obj$ jo, user$ ju where  e.name = jo.name
                and e.owner = ju.name and jo.owner# = ju.user#
            ) in
            ( select oa.obj#
                from sys.objauth$ oa
                where grantee# in ( select kzsrorol from x$kzsro )
            )
         or /* user has system privileges */
            (exists ( select null from v$enabledprivs
                       where priv_number = -265 /* CREATE ANY JOB */
                   )
             and e.owner!='SYS')
        )
  );

CREATE OR REPLACE FORCE VIEW "ALL_SCHEDULER_PROGRAMS"("OWNER","PROGRAM_NAME","PROGRAM_TYPE","PROGRAM_ACTION","NUMBER_OF_ARGUMENTS","ENABLED","COMMENTS") AS 
SELECT u.name, o.name,
  DECODE(bitand(p.flags,2+4+8+16+32), 2,'PLSQL_BLOCK',
         4,'STORED_PROCEDURE', 32, 'EXECUTABLE', ''),
  p.action, p.number_of_args, DECODE(BITAND(p.flags,1),0,'FALSE',1,'TRUE'),
  p.comments
  FROM obj$ o, user$ u, sys.scheduler$_program p
  WHERE p.obj# = o.obj# AND u.user# = o.owner# AND
    (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         (exists (select null from v$enabledprivs
                 where priv_number in (-265 /* CREATE ANY JOB */,
                                       -266 /* EXECUTE ANY PROGRAM */ )
                 )
          and o.owner#!=0)
      );

CREATE OR REPLACE FORCE VIEW "ALL_SCHEDULER_PROGRAM_ARGS"("OWNER","PROGRAM_NAME","ARGUMENT_NAME","ARGUMENT_POSITION","ARGUMENT_TYPE","METADATA_ATTRIBUTE","DEFAULT_VALUE","DEFAULT_ANYDATA_VALUE","OUT_ARGUMENT") AS 
SELECT u.name, o.name, a.name, a.position,
  CASE WHEN (a.user_type_num IS NULL) THEN
    DECODE(a.type_number,
0, null,
1, decode(a.flags, 512, 'NVARCHAR2', 'VARCHAR2'),
2, decode(a.flags, 512, 'FLOAT', 'NUMBER'),
3, 'NATIVE INTEGER',
8, 'LONG',
9, decode(a.flags, 512, 'NCHAR VARYING', 'VARCHAR'),
11, 'ROWID',
12, 'DATE',
23, 'RAW',
24, 'LONG RAW',
29, 'BINARY_INTEGER',
69, 'ROWID',
96, decode(a.flags, 512, 'NCHAR', 'CHAR'),
100, 'BINARY_FLOAT',
101, 'BINARY_DOUBLE',
102, 'REF CURSOR',
104, 'UROWID',
105, 'MLSLABEL',
106, 'MLSLABEL',
110, 'REF',
111, 'REF',
112, decode(a.flags, 512, 'NCLOB', 'CLOB'),
113, 'BLOB', 114, 'BFILE', 115, 'CFILE',
121, 'OBJECT',
122, 'TABLE',
123, 'VARRAY',
178, 'TIME',
179, 'TIME WITH TIME ZONE',
180, 'TIMESTAMP',
181, 'TIMESTAMP WITH TIME ZONE',
231, 'TIMESTAMP WITH LOCAL TIME ZONE',
182, 'INTERVAL YEAR TO MONTH',
183, 'INTERVAL DAY TO SECOND',
250, 'PL/SQL RECORD',
251, 'PL/SQL TABLE',
252, 'PL/SQL BOOLEAN',
'UNDEFINED')
    ELSE t_u.name ||'.'|| t_o.name END,
  DECODE(bitand(a.flags,2+4+64+128+256), 2,'JOB_NAME',4,'JOB_OWNER',
         64, 'JOB_START', 128, 'WINDOW_START',
         256, 'WINDOW_END', ''),
  dbms_scheduler.get_varchar2_value(a.value), a.value,
  DECODE(BITAND(a.flags,1),0,'FALSE',1,'TRUE')
  FROM obj$ o, user$ u, sys.scheduler$_program_argument a, obj$ t_o, user$ t_u
  WHERE a.oid = o.obj# AND u.user# = o.owner# AND
    a.user_type_num = t_o.obj#(+) AND t_o.owner# = t_u.user#(+) AND
    (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         (exists (select null from v$enabledprivs
                 where priv_number in (-265 /* CREATE ANY JOB */,
                                       -266 /* EXECUTE ANY PROGRAM */ )
                 )
          and o.owner#!=0)
      );

CREATE OR REPLACE FORCE VIEW "ALL_SCHEDULER_RUNNING_JOBS"("OWNER","JOB_NAME","SESSION_ID","SLAVE_PROCESS_ID","RUNNING_INSTANCE","RESOURCE_CONSUMER_GROUP","ELAPSED_TIME","CPU_USED") AS 
SELECT ju.name, jo.name, rj.session_id, rj.process_id, rj.inst_id,
      vse.resource_consumer_group,
      CAST (systimestamp-j.last_start_date AS INTERVAL DAY(3) TO SECOND(2)),
      rj.session_stat_cpu
  FROM
        sys.scheduler$_job j,
        obj$ jo,
        user$ ju,
        gv$scheduler_running_jobs rj,
        gv$session vse
  WHERE
      j.obj# = jo.obj#
  AND rj.job_id = j.obj#
  AND jo.owner# = ju.user#
  AND (jo.owner# = userenv('SCHEMAID')
       or jo.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         (exists (select null from v$enabledprivs
                 where priv_number  = -265 /* CREATE ANY JOB */
                )
          and jo.owner#!=0)
      )
  AND vse.sid = rj.session_id
  AND vse.serial# = rj.session_serial_num;

CREATE OR REPLACE FORCE VIEW "ALL_SCHEDULER_SCHEDULES"("OWNER","SCHEDULE_NAME","START_DATE","REPEAT_INTERVAL","END_DATE","COMMENTS") AS 
SELECT "OWNER","SCHEDULE_NAME","START_DATE","REPEAT_INTERVAL","END_DATE","COMMENTS" FROM dba_scheduler_schedules;

CREATE OR REPLACE FORCE VIEW "ALL_SCHEDULER_WINDOWS"("WINDOW_NAME","RESOURCE_PLAN","SCHEDULE_OWNER","SCHEDULE_NAME","START_DATE","REPEAT_INTERVAL","END_DATE","DURATION","WINDOW_PRIORITY","NEXT_START_DATE","LAST_START_DATE","ENABLED","ACTIVE","COMMENTS") AS 
SELECT "WINDOW_NAME","RESOURCE_PLAN","SCHEDULE_OWNER","SCHEDULE_NAME","START_DATE","REPEAT_INTERVAL","END_DATE","DURATION","WINDOW_PRIORITY","NEXT_START_DATE","LAST_START_DATE","ENABLED","ACTIVE","COMMENTS" FROM dba_scheduler_windows;

CREATE OR REPLACE FORCE VIEW "ALL_SCHEDULER_WINDOW_DETAILS"("LOG_ID","LOG_DATE","WINDOW_NAME","REQ_START_DATE","ACTUAL_START_DATE","WINDOW_DURATION","ACTUAL_DURATION","INSTANCE_ID","ADDITIONAL_INFO") AS 
SELECT "LOG_ID","LOG_DATE","WINDOW_NAME","REQ_START_DATE","ACTUAL_START_DATE","WINDOW_DURATION","ACTUAL_DURATION","INSTANCE_ID","ADDITIONAL_INFO" FROM dba_scheduler_window_details;

CREATE OR REPLACE FORCE VIEW "ALL_SCHEDULER_WINDOW_GROUPS"("WINDOW_GROUP_NAME","ENABLED","NUMBER_OF_WINDOWS","COMMENTS") AS 
SELECT "WINDOW_GROUP_NAME","ENABLED","NUMBER_OF_WINDOWS","COMMENTS" FROM dba_scheduler_window_groups;

CREATE OR REPLACE FORCE VIEW "ALL_SCHEDULER_WINDOW_LOG"("LOG_ID","LOG_DATE","WINDOW_NAME","OPERATION","STATUS","USER_NAME","CLIENT_ID","GLOBAL_UID","ADDITIONAL_INFO") AS 
SELECT "LOG_ID","LOG_DATE","WINDOW_NAME","OPERATION","STATUS","USER_NAME","CLIENT_ID","GLOBAL_UID","ADDITIONAL_INFO" FROM dba_scheduler_window_log;

CREATE OR REPLACE FORCE VIEW "ALL_SCHEDULER_WINGROUP_MEMBERS"("WINDOW_GROUP_NAME","WINDOW_NAME") AS 
SELECT "WINDOW_GROUP_NAME","WINDOW_NAME" FROM dba_scheduler_wingroup_members;

CREATE OR REPLACE FORCE VIEW "ALL_SECONDARY_OBJECTS"("INDEX_OWNER","INDEX_NAME","SECONDARY_OBJECT_OWNER","SECONDARY_OBJECT_NAME") AS 
select u.name, o.name, u1.name, o1.name
from   sys.user$ u, sys.obj$ o, sys.user$ u1, sys.obj$ o1, sys.secobj$ s
where  s.obj# = o.obj# and o.owner# = u.user# and
       s.secobj# = o1.obj#  and  o1.owner# = u1.user# and
       ( o.owner# = userenv('SCHEMAID')
         or
         o.obj# in ( select obj#
                    from sys.objauth$
                    where grantee# in ( select kzsrorol
                                        from x$kzsro
                                      )
                   )
         or
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
       );

CREATE OR REPLACE FORCE VIEW "ALL_SEC_RELEVANT_COLS"("OBJECT_OWNER","OBJECT_NAME","POLICY_GROUP","POLICY_NAME","SEC_REL_COLUMN","COLUMN_OPTION") AS 
SELECT OBJECT_OWNER, OBJECT_NAME, POLICY_GROUP, POLICY_NAME,
       SEC_REL_COLUMN, COLUMN_OPTION
from DBA_SEC_RELEVANT_COLS, ALL_TABLES t
WHERE
(OBJECT_OWNER = t.OWNER AND OBJECT_NAME = t.TABLE_NAME)
union all
SELECT OBJECT_OWNER, OBJECT_NAME, POLICY_GROUP, POLICY_NAME,
       SEC_REL_COLUMN, COLUMN_OPTION
from DBA_SEC_RELEVANT_COLS, ALL_VIEWS v
WHERE
(OBJECT_OWNER = v.OWNER AND OBJECT_NAME = v.VIEW_NAME );

CREATE OR REPLACE FORCE VIEW "ALL_SEQUENCES"("SEQUENCE_OWNER","SEQUENCE_NAME","MIN_VALUE","MAX_VALUE","INCREMENT_BY","CYCLE_FLAG","ORDER_FLAG","CACHE_SIZE","LAST_NUMBER") AS 
select u.name, o.name,
      s.minvalue, s.maxvalue, s.increment$,
      decode (s.cycle#, 0, 'N', 1, 'Y'),
      decode (s.order$, 0, 'N', 1, 'Y'),
      s.cache, s.highwater
from sys.seq$ s, sys.obj$ o, sys.user$ u
where u.user# = o.owner#
  and o.obj# = s.obj#
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
        or
         exists (select null from v$enabledprivs
                 where priv_number = -109 /* SELECT ANY SEQUENCE */
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_SERVICES"("SERVICE_ID","NAME","NAME_HASH","NETWORK_NAME","CREATION_DATE","CREATION_DATE_HASH","FAILOVER_METHOD","FAILOVER_TYPE","FAILOVER_RETRIES","FAILOVER_DELAY") AS 
select "SERVICE_ID","NAME","NAME_HASH","NETWORK_NAME","CREATION_DATE","CREATION_DATE_HASH","FAILOVER_METHOD","FAILOVER_TYPE","FAILOVER_RETRIES","FAILOVER_DELAY" from dba_services;

CREATE OR REPLACE FORCE VIEW "ALL_SNAPSHOTS"("OWNER","NAME","TABLE_NAME","MASTER_VIEW","MASTER_OWNER","MASTER","MASTER_LINK","CAN_USE_LOG","UPDATABLE","REFRESH_METHOD","LAST_REFRESH","ERROR","FR_OPERATIONS","CR_OPERATIONS","TYPE","NEXT","START_WITH","REFRESH_GROUP","UPDATE_TRIG","UPDATE_LOG","QUERY","MASTER_ROLLBACK_SEG","STATUS","REFRESH_MODE","PREBUILT") AS 
select s."OWNER",s."NAME",s."TABLE_NAME",s."MASTER_VIEW",s."MASTER_OWNER",s."MASTER",s."MASTER_LINK",s."CAN_USE_LOG",s."UPDATABLE",s."REFRESH_METHOD",s."LAST_REFRESH",s."ERROR",s."FR_OPERATIONS",s."CR_OPERATIONS",s."TYPE",s."NEXT",s."START_WITH",s."REFRESH_GROUP",s."UPDATE_TRIG",s."UPDATE_LOG",s."QUERY",s."MASTER_ROLLBACK_SEG",s."STATUS",s."REFRESH_MODE",s."PREBUILT" from dba_snapshots s, sys.obj$ o, sys.user$ u
where o.owner#     = u.user#
  and s.table_name = o.name
  and u.name       = s.owner
  and o.type#      = 2                     /* table */
  and ( u.user# in (userenv('SCHEMAID'), 1)
        or
        o.obj# in ( select obj#
                    from sys.objauth$
                    where grantee# in ( select kzsrorol
                                        from x$kzsro
                                      )
                  )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_SNAPSHOT_LOGS"("LOG_OWNER","MASTER","LOG_TABLE","LOG_TRIGGER","ROWIDS","PRIMARY_KEY","OBJECT_ID","FILTER_COLUMNS","SEQUENCE","INCLUDE_NEW_VALUES","CURRENT_SNAPSHOTS","SNAPSHOT_ID") AS 
select s."LOG_OWNER",s."MASTER",s."LOG_TABLE",s."LOG_TRIGGER",s."ROWIDS",s."PRIMARY_KEY",s."OBJECT_ID",s."FILTER_COLUMNS",s."SEQUENCE",s."INCLUDE_NEW_VALUES",s."CURRENT_SNAPSHOTS",s."SNAPSHOT_ID" from dba_snapshot_logs s, sys.obj$ o, sys.user$ u
where o.owner#     = u.user#
  and s.log_table = o.name
  and u.name       = s.log_owner
  and o.type#      = 2                     /* table */
  and ( u.user# in (userenv('SCHEMAID'), 1)
        or
        o.obj# in ( select obj#
                    from sys.objauth$
                    where grantee# in ( select kzsrorol
                                        from x$kzsro
                                      )
                  )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_SOURCE"("OWNER","NAME","TYPE","LINE","TEXT") AS 
select u.name, o.name,
decode(o.type#, 7, 'PROCEDURE', 8, 'FUNCTION', 9, 'PACKAGE',
                11, 'PACKAGE BODY', 12, 'TRIGGER', 13, 'TYPE', 14, 'TYPE BODY',
                'UNDEFINED'),
s.line, s.source
from sys.obj$ o, sys.source$ s, sys.user$ u
where o.obj# = s.obj#
  and o.owner# = u.user#
  and ( o.type# in (7, 8, 9, 11, 12, 14) OR
       ( o.type# = 13 AND o.subname is null))
  and
  (
    o.owner# in (userenv('SCHEMAID'), 1 /* PUBLIC */)
    or
    (
      (
         (
          (o.type# in (7 /* proc */, 8 /* func */, 9 /* pkg */, 13 /* type */))
          and
          o.obj# in (select obj# from sys.objauth$
                     where grantee# in (select kzsrorol from x$kzsro)
                       and privilege# in (12 /* EXECUTE */, 26 /* DEBUG */))
        )
        or
        (
          (o.type# in (11 /* package body */, 14 /* type body */))
          and
          exists
          (
            select null from sys.obj$ specobj, sys.objauth$ oa
            where specobj.owner# = o.owner#
              and specobj.name = o.name
              and specobj.type# = decode(o.type#,
                                         11 /* pkg body */, 9 /* pkg */,
                                         14 /* type body */, 13 /* type */,
                                         null)
              and oa.obj# = specobj.obj#
              and oa.grantee# in (select kzsrorol from x$kzsro)
              and oa.privilege# = 26 /* DEBUG */)
        )
        or
        (
          (o.type# = 12 /* trigger */)
          and
          exists
          (
            select null from sys.trigger$ t, sys.obj$ tabobj, sys.objauth$ oa
            where t.obj# = o.obj#
              and tabobj.obj# = t.baseobject
              and tabobj.owner# = o.owner#
              and oa.obj# = tabobj.obj#
              and oa.grantee# in (select kzsrorol from x$kzsro)
              and oa.privilege# = 26 /* DEBUG */)
        )
        or
        exists
        (
          select null from sys.sysauth$
          where grantee# in (select kzsrorol from x$kzsro)
          and
          (
            (
              /* procedure */
              (o.type# = 7 or o.type# = 8 or o.type# = 9)
              and
              (
                privilege# = -144 /* EXECUTE ANY PROCEDURE */
                or
                privilege# = -141 /* CREATE ANY PROCEDURE */
                or
                privilege# = -241 /* DEBUG ANY PROCEDURE */
              )
            )
            or
            (
              /* package body */
              o.type# = 11 and
              (
                privilege# = -141 /* CREATE ANY PROCEDURE */
                or
                privilege# = -241 /* DEBUG ANY PROCEDURE */
              )
            )
            or
            (
              /* type */
              o.type# = 13
              and
              (
                privilege# = -184 /* EXECUTE ANY TYPE */
                or
                privilege# = -181 /* CREATE ANY TYPE */
                or
                privilege# = -241 /* DEBUG ANY PROCEDURE */
              )
            )
            or
            (
              /* type body */
              o.type# = 14 and
              (
                privilege# = -181 /* CREATE ANY TYPE */
                or
                privilege# = -241 /* DEBUG ANY PROCEDURE */
              )
            )
            or
            (
              /* triggers */
              o.type# = 12 and
              (
                privilege# = -152 /* CREATE ANY TRIGGER */
                or
                privilege# = -241 /* DEBUG ANY PROCEDURE */
              )
            )
          )
        )
      )
    )
  )
union all
select u.name, o.name, 'JAVA SOURCE', s.joxftlno, s.joxftsrc
from sys.obj$ o, x$joxfs s, sys.user$ u
where o.obj# = s.joxftobn
  and o.owner# = u.user#
  and o.type# = 28
  and
  (
    o.owner# in (userenv('SCHEMAID'), 1 /* PUBLIC */)
    or
    (
      (
        (
          o.obj# in (select obj# from sys.objauth$
                     where grantee# in (select kzsrorol from x$kzsro)
                       and privilege# in (12 /* EXECUTE */, 26 /* DEBUG */))
        )
        or
        exists
        (
          select null from sys.sysauth$
          where grantee# in (select kzsrorol from x$kzsro)
          and
          (
            (
              /* procedure */
              (
                privilege# = -144 /* EXECUTE ANY PROCEDURE */
                or
                privilege# = -141 /* CREATE ANY PROCEDURE */
                or
                privilege# = -241 /* DEBUG ANY PROCEDURE */
              )
            )
          )
        )
      )
    )
  );

CREATE OR REPLACE FORCE VIEW "ALL_SOURCE_TABLES"("SOURCE_SCHEMA_NAME","SOURCE_TABLE_NAME") AS 
SELECT DISTINCT
   s.source_schema_name, s.source_table_name
  FROM sys.cdc_change_tables$ s, all_tables t
  WHERE s.change_table_schema=t.owner AND
        s.change_table_name=t.table_name;

CREATE OR REPLACE FORCE VIEW "ALL_SQLJ_TYPES"("OWNER","TYPE_NAME","TYPE_OID","EXTERNAL_NAME","USING","TYPECODE","ATTRIBUTES","METHODS","PREDEFINED","INCOMPLETE","FINAL","INSTANTIABLE","SUPERTYPE_OWNER","SUPERTYPE_NAME","LOCAL_ATTRIBUTES","LOCAL_METHODS") AS 
select decode(bitand(t.properties, 64), 64, null, u.name), o.name, t.toid,
       t.externname,
       decode(t.externtype, 1, 'SQLData',
                            2, 'CustomDatum',
                            3, 'Serializable',
                            4, 'Serializable Internal',
                            5, 'ORAData',
                            'unknown'),
       decode(t.typecode, 108, 'OBJECT',
                          122, 'COLLECTION',
                          o.name),
       t.attributes, t.methods,
       decode(bitand(t.properties, 16), 16, 'YES', 0, 'NO'),
       decode(bitand(t.properties, 256), 256, 'YES', 0, 'NO'),
       decode(bitand(t.properties, 8), 8, 'NO', 'YES'),
       decode(bitand(t.properties, 65536), 65536, 'NO', 'YES'),
       su.name, so.name, t.local_attrs, t.local_methods
from sys.user$ u, sys.type$ t, sys.obj$ o, sys.obj$ so, sys.user$ su
where o.owner# = u.user#
  and o.oid$ = t.tvoid
  and o.subname IS NULL -- only latest version
  and o.type# <> 10 -- must not be invalid
  and bitand(t.properties, 2048) = 0 -- not system-generated
  and t.supertoid = so.oid$ (+) and so.owner# = su.user# (+)
  and t.externtype < 5
  and (o.owner# = userenv('SCHEMAID')
       or
       o.obj# in (select oa.obj#
                  from sys.objauth$ oa
                  where grantee# in (select kzsrorol
                                     from x$kzsro))
       or /* user has system privileges */
       exists (select null from v$enabledprivs
               where priv_number in (-184 /* EXECUTE ANY TYPE */,
                                     -181 /* CREATE ANY TYPE */)));

CREATE OR REPLACE FORCE VIEW "ALL_SQLJ_TYPE_ATTRS"("OWNER","TYPE_NAME","ATTR_NAME","EXTERNAL_ATTR_NAME","ATTR_TYPE_MOD","ATTR_TYPE_OWNER","ATTR_TYPE_NAME","LENGTH","PRECISION","SCALE","CHARACTER_SET_NAME","ATTR_NO","INHERITED") AS 
select decode(bitand(t.properties, 64), 64, null, u.name),
       o.name, a.name, a.externname,
       decode(bitand(a.properties, 32768), 32768, 'REF',
              decode(bitand(a.properties, 16384), 16384, 'POINTER')),
       decode(bitand(at.properties, 64), 64, null, au.name),
       decode(at.typecode,
              52, decode(a.charsetform, 2, 'NVARCHAR2', ao.name),
              53, decode(a.charsetform, 2, 'NCHAR', ao.name),
              54, decode(a.charsetform, 2, 'NCHAR VARYING', ao.name),
              61, decode(a.charsetform, 2, 'NCLOB', ao.name),
              ao.name),
       a.length, a.precision#, a.scale,
       decode(a.charsetform, 1, 'CHAR_CS',
                             2, 'NCHAR_CS',
                             3, NLS_CHARSET_NAME(a.charsetid),
                             4, 'ARG:'||a.charsetid),
       a.attribute#, decode(bitand(nvl(a.xflags,0), 1), 1, 'YES', 'NO')
from sys.user$ u, sys.obj$ o, sys.type$ t, sys.attribute$ a,
     sys.obj$ ao, sys.user$ au, sys.type$ at
where o.owner# = u.user#
  and o.oid$ = t.toid
  and o.subname IS NULL -- get the latest version only
  and o.type# <> 10 -- must not be invalid
  and bitand(t.properties, 2048) = 0 -- not system-generated
  and t.toid = a.toid
  and t.version# = a.version#
  and a.attr_toid = ao.oid$
  and ao.owner# = au.user#
  and a.attr_toid = at.tvoid
  and a.attr_version# = at.version#
  and t.externtype < 5
  and (o.owner# = userenv('SCHEMAID')
       or
       o.obj# in (select oa.obj#
                  from sys.objauth$ oa
                  where grantee# in (select kzsrorol
                                     from x$kzsro))
       or /* user has system privileges */
       exists (select null from v$enabledprivs
               where priv_number in (-184 /* EXECUTE ANY TYPE */,
                                     -181 /* CREATE ANY TYPE */)));

CREATE OR REPLACE FORCE VIEW "ALL_SQLJ_TYPE_METHODS"("OWNER","TYPE_NAME","METHOD_NAME","EXTERNAL_VAR_NAME","METHOD_NO","METHOD_TYPE","PARAMETERS","RESULTS","FINAL","INSTANTIABLE","OVERRIDING","INHERITED") AS 
select u.name, o.name, m.name, m.externVarName, m.method#,
       decode(bitand(m.properties, 512), 512, 'MAP',
              decode(bitand(m.properties, 2048), 2048, 'ORDER', 'PUBLIC')),
       m.parameters#, m.results,
       decode(bitand(m.properties, 8), 8, 'NO', 'YES'),
       decode(bitand(m.properties, 65536), 65536, 'NO', 'YES'),
       decode(bitand(m.properties, 131072), 131072, 'YES', 'NO'),
       decode(bitand(nvl(m.xflags,0), 1), 1, 'YES', 'NO')
from sys.user$ u, sys.obj$ o, sys.type$ t, sys.method$ m
where o.owner# = u.user#
  and o.oid$ = m.toid
  and o.subname IS NULL -- get the latest version only
  and o.type# <> 10 -- must not be invalid
  and bitand(t.properties, 2048) = 0 -- not system-generated
  and t.toid = m.toid
  and t.version# = m.version#
  and t.externtype < 5
  and (o.owner# = userenv('SCHEMAID')
       or
       o.obj# in (select oa.obj#
                  from sys.objauth$ oa
                  where grantee# in (select kzsrorol
                                     from x$kzsro))
       or /* user has system privileges */
       exists (select null from v$enabledprivs
               where priv_number in (-184 /* EXECUTE ANY TYPE */,
                                     -181 /* CREATE ANY TYPE */)));

CREATE OR REPLACE FORCE VIEW "ALL_STORED_SETTINGS"("OWNER","OBJECT_NAME","OBJECT_ID","OBJECT_TYPE","PARAM_NAME","PARAM_VALUE") AS 
SELECT u.name, o.name, o.obj#,
DECODE(o.type#,
        7, 'PROCEDURE',
        8, 'FUNCTION',
        9, 'PACKAGE',
       11, 'PACKAGE BODY',
       12, 'TRIGGER',
       13, 'TYPE',
       14, 'TYPE BODY',
       'UNDEFINED'),
p.param, p.value
FROM sys.obj$ o, sys.user$ u, sys.settings$ p
WHERE o.owner# = u.user#
AND o.linkname is null
AND p.obj# = o.obj#
AND (
    o.owner# in (userenv('SCHEMAID'), 1 /* PUBLIC */)
    or
    (
      (
         (
          (o.type# = 7 or o.type# = 8 or o.type# = 9 or o.type# = 13)
          and
          o.obj# in (select obj# from sys.objauth$
                     where grantee# in (select kzsrorol from x$kzsro)
                       and privilege#  = 12 /* EXECUTE */)
        )
        or
        exists
        (
          select null from sys.sysauth$
          where grantee# in (select kzsrorol from x$kzsro)
          and
          (
            (
              /* procedure */
              (o.type# = 7 or o.type# = 8 or o.type# = 9)
              and
              (
                privilege# = -144 /* EXECUTE ANY PROCEDURE */
                or
                privilege# = -141 /* CREATE ANY PROCEDURE */
              )
            )
            or
            (
              /* package body */
              o.type# = 11 and
              privilege# = -141 /* CREATE ANY PROCEDURE */
            )
            or
            (
              /* type */
              o.type# = 13
              and
              (
                privilege# = -184 /* EXECUTE ANY TYPE */
                or
                privilege# = -181 /* CREATE ANY TYPE */
              )
            )
            or
            (
              /* type body */
              o.type# = 14 and
              privilege# = -181 /* CREATE ANY TYPE */
            )
          )
        )
      )
    )
  );

CREATE OR REPLACE FORCE VIEW "ALL_STREAMS_GLOBAL_RULES"("STREAMS_NAME","STREAMS_TYPE","RULE_TYPE","INCLUDE_TAGGED_LCR","SOURCE_DATABASE","RULE_NAME","RULE_OWNER","RULE_CONDITION") AS 
select r.streams_name, r.streams_type, r.rule_type, r.include_tagged_lcr,
       r.source_database, r.rule_name, r.rule_owner, r.rule_condition
 from  dba_streams_global_rules r, "_ALL_STREAMS_PROCESSES" p, all_rules ar
 where r.streams_name = p.streams_name
   and r.streams_type = p.streams_type
   and ar.rule_owner = r.rule_owner
   and ar.rule_name = r.rule_name;

CREATE OR REPLACE FORCE VIEW "ALL_STREAMS_MESSAGE_CONSUMERS"("STREAMS_NAME","QUEUE_NAME","QUEUE_OWNER","RULE_SET_NAME","RULE_SET_OWNER","NEGATIVE_RULE_SET_NAME","NEGATIVE_RULE_SET_OWNER","NOTIFICATION_TYPE","NOTIFICATION_ACTION","NOTIFICATION_CONTEXT") AS 
select c."STREAMS_NAME",c."QUEUE_NAME",c."QUEUE_OWNER",c."RULE_SET_NAME",c."RULE_SET_OWNER",c."NEGATIVE_RULE_SET_NAME",c."NEGATIVE_RULE_SET_OWNER",c."NOTIFICATION_TYPE",c."NOTIFICATION_ACTION",c."NOTIFICATION_CONTEXT"
  from dba_streams_message_consumers c, all_queues q
 where c.queue_name = q.name
   and c.queue_owner = q.owner
   and ((c.rule_set_owner is null and c.rule_set_name is null) or
        ((c.rule_set_owner, c.rule_set_name) in
          (select r.rule_set_owner, r.rule_set_name
             from all_rule_sets r)))
   and ((c.negative_rule_set_owner is null and
         c.negative_rule_set_name is null) or
        ((c.negative_rule_set_owner, c.negative_rule_set_name) in
          (select r.rule_set_owner, r.rule_set_name
             from all_rule_sets r)));

CREATE OR REPLACE FORCE VIEW "ALL_STREAMS_MESSAGE_RULES"("STREAMS_NAME","STREAMS_TYPE","MESSAGE_TYPE_NAME","MESSAGE_TYPE_OWNER","MESSAGE_RULE_VARIABLE","RULE_NAME","RULE_OWNER","RULE_CONDITION") AS 
select mr."STREAMS_NAME",mr."STREAMS_TYPE",mr."MESSAGE_TYPE_NAME",mr."MESSAGE_TYPE_OWNER",mr."MESSAGE_RULE_VARIABLE",mr."RULE_NAME",mr."RULE_OWNER",mr."RULE_CONDITION"
  from dba_streams_message_rules mr, "_ALL_STREAMS_PROCESSES" p, all_rules ar
 where mr.rule_owner = ar.rule_owner
   and mr.rule_name  = ar.rule_name
   and mr.streams_name = p.streams_name
   and mr.streams_type = p.streams_type;

CREATE OR REPLACE FORCE VIEW "ALL_STREAMS_NEWLY_SUPPORTED"("OWNER","TABLE_NAME","REASON","COMPATIBLE") AS 
select s."OWNER",s."TABLE_NAME",s."REASON",s."COMPATIBLE" from dba_streams_newly_supported s, all_objects a
    where s.owner = a.owner
      and s.table_name = a.object_name
      and a.object_type = 'TABLE';

CREATE OR REPLACE FORCE VIEW "ALL_STREAMS_RULES"("STREAMS_TYPE","STREAMS_NAME","RULE_SET_OWNER","RULE_SET_NAME","RULE_OWNER","RULE_NAME","RULE_CONDITION","RULE_SET_TYPE","STREAMS_RULE_TYPE","SCHEMA_NAME","OBJECT_NAME","SUBSETTING_OPERATION","DML_CONDITION","INCLUDE_TAGGED_LCR","SOURCE_DATABASE","RULE_TYPE","MESSAGE_TYPE_OWNER","MESSAGE_TYPE_NAME","MESSAGE_RULE_VARIABLE","ORIGINAL_RULE_CONDITION","SAME_RULE_CONDITION") AS 
select r."STREAMS_TYPE",r."STREAMS_NAME",r."RULE_SET_OWNER",r."RULE_SET_NAME",r."RULE_OWNER",r."RULE_NAME",r."RULE_CONDITION",r."RULE_SET_TYPE",r."STREAMS_RULE_TYPE",r."SCHEMA_NAME",r."OBJECT_NAME",r."SUBSETTING_OPERATION",r."DML_CONDITION",r."INCLUDE_TAGGED_LCR",r."SOURCE_DATABASE",r."RULE_TYPE",r."MESSAGE_TYPE_OWNER",r."MESSAGE_TYPE_NAME",r."MESSAGE_RULE_VARIABLE",r."ORIGINAL_RULE_CONDITION",r."SAME_RULE_CONDITION"
  from dba_streams_rules r, "_ALL_STREAMS_PROCESSES" p
where r.streams_type = p.streams_type
  and r.streams_name = p.streams_name;

CREATE OR REPLACE FORCE VIEW "ALL_STREAMS_SCHEMA_RULES"("STREAMS_NAME","STREAMS_TYPE","SCHEMA_NAME","RULE_TYPE","INCLUDE_TAGGED_LCR","SOURCE_DATABASE","RULE_NAME","RULE_OWNER","RULE_CONDITION") AS 
select sr.streams_name, sr.streams_type, sr.schema_name, sr.rule_type,
       sr.include_tagged_lcr, sr.source_database, sr.rule_name, sr.rule_owner,
       sr.rule_condition
  from dba_streams_schema_rules sr, "_ALL_STREAMS_PROCESSES" p, all_rules r
 where sr.rule_owner = r.rule_owner
   and sr.rule_name = r.rule_name
   and sr.streams_name = p.streams_name
   and sr.streams_type = p.streams_type;

CREATE OR REPLACE FORCE VIEW "ALL_STREAMS_TABLE_RULES"("STREAMS_NAME","STREAMS_TYPE","TABLE_OWNER","TABLE_NAME","RULE_TYPE","DML_CONDITION","SUBSETTING_OPERATION","INCLUDE_TAGGED_LCR","SOURCE_DATABASE","RULE_NAME","RULE_OWNER","RULE_CONDITION") AS 
select tr.streams_name, tr.streams_type, tr.table_owner, tr.table_name,
       tr.rule_type, tr.dml_condition, tr.subsetting_operation,
       tr.include_tagged_lcr, tr.source_database, tr.rule_name,
       tr.rule_owner, tr.rule_condition
  from dba_streams_table_rules tr, "_ALL_STREAMS_PROCESSES" p, all_rules ar
 where tr.rule_owner = ar.rule_owner
   and tr.rule_name = ar.rule_name
   and tr.streams_name = p.streams_name
   and tr.streams_type = p.streams_type;

CREATE OR REPLACE FORCE VIEW "ALL_STREAMS_TRANSFORM_FUNCTION"("RULE_OWNER","RULE_NAME","VALUE_TYPE","TRANSFORM_FUNCTION_NAME") AS 
select tf."RULE_OWNER",tf."RULE_NAME",tf."VALUE_TYPE",tf."TRANSFORM_FUNCTION_NAME"
from   DBA_STREAMS_TRANSFORM_FUNCTION tf, ALL_RULES r
where  tf.rule_owner = r.rule_owner
and    tf.rule_name = r.rule_name;

CREATE OR REPLACE FORCE VIEW "ALL_STREAMS_UNSUPPORTED"("OWNER","TABLE_NAME","REASON","AUTO_FILTERED") AS 
select s."OWNER",s."TABLE_NAME",s."REASON",s."AUTO_FILTERED" from DBA_STREAMS_UNSUPPORTED s, ALL_OBJECTS a
   where s.owner = a.owner
     and s.table_name = a.object_name
     and a.object_type = 'TABLE';

CREATE OR REPLACE FORCE VIEW "ALL_SUBPARTITION_TEMPLATES"("USER_NAME","TABLE_NAME","SUBPARTITION_NAME","SUBPARTITION_POSITION","TABLESPACE_NAME","HIGH_BOUND") AS 
select u.name, o.name, st.spart_name, st.spart_position + 1, ts.name,
       st.hiboundval
from sys.obj$ o, sys.defsubpart$ st, sys.ts$ ts, sys.user$ u
where st.bo# = o.obj# and st.ts# = ts.ts#(+) and o.owner# = u.user# and
      (o.owner# = userenv('SCHEMAID') or
       o.obj# in (select oa.obj# from sys.objauth$ oa
                  where grantee# in ( select kzsrorol from x$kzsro )) or
       exists (select null from v$enabledprivs
               where priv_number in (-45 /* LOCK ANY TABLE */,
                                     -47 /* SELECT ANY TABLE */,
                                     -48 /* INSERT ANY TABLE */,
                                     -49 /* UPDATE ANY TABLE */,
                                     -50 /* DELETE ANY TABLE */)));

CREATE OR REPLACE FORCE VIEW "ALL_SUBPART_COL_STATISTICS"("OWNER","TABLE_NAME","SUBPARTITION_NAME","COLUMN_NAME","NUM_DISTINCT","LOW_VALUE","HIGH_VALUE","DENSITY","NUM_NULLS","NUM_BUCKETS","SAMPLE_SIZE","LAST_ANALYZED","GLOBAL_STATS","USER_STATS","AVG_COL_LEN","HISTOGRAM") AS 
select u.name, o.name, o.subname, tsp.cname, h.distcnt, h.lowval, h.hival,
       h.density, h.null_cnt,
       case when h.bucket_cnt > 255 then h.row_cnt else
         decode(h.row_cnt, h.distcnt, h.row_cnt, h.bucket_cnt)
       end,
       h.sample_size, h.timestamp#,
       decode(bitand(h.spare2, 2), 2, 'YES', 'NO'),
       decode(bitand(h.spare2, 1), 1, 'YES', 'NO'),
       h.avgcln,
       case when h.bucket_cnt > 255 then 'FREQUENCY' else
         decode(nvl(h.row_cnt, 0), 0, 'NONE',
                                   h.distcnt, 'FREQUENCY', 'HEIGHT BALANCED')
       end
from sys.obj$ o, sys.hist_head$ h, tsp$ tsp, user$ u
where o.obj# = tsp.obj# and tsp.obj# = h.obj#(+)
  and tsp.intcol# = h.intcol#(+)
  and o.type# = 34 /* TABLE SUBPARTITION */
  and o.owner# = u.user#
  and (o.owner# = userenv('SCHEMAID')
        or tsp.bo# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
        or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_SUBPART_HISTOGRAMS"("OWNER","TABLE_NAME","SUBPARTITION_NAME","COLUMN_NAME","BUCKET_NUMBER","ENDPOINT_VALUE","ENDPOINT_ACTUAL_VALUE") AS 
select u.name,
       o.name, o.subname,
       tsp.cname,
       h.bucket,
       h.endpoint,
       h.epvalue
from sys.obj$ o, sys.histgrm$ h, sys.user$ u, tsp$ tsp
where o.obj# = tsp.obj# and tsp.obj# = h.obj#
  and tsp.intcol# = h.intcol#
  and o.type# = 34 /* TABLE SUBPARTITION */
  and o.owner# = u.user#
  and (o.owner# = userenv('SCHEMAID')
        or
        tsp.bo# in ( select obj#
                    from sys.objauth$
                    where grantee# in ( select kzsrorol
                                         from x$kzsro
                                       )
                  )
        or /* user has system privileges */
          exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                  )
       )
union
select u.name,
       o.name, o.subname,
       tsp.cname,
       0,
       h.minimum,
       null
from sys.obj$ o, sys.hist_head$ h, sys.user$ u, tsp$ tsp
where o.obj# = tsp.obj# and tsp.obj# = h.obj#
  and tsp.intcol# = h.intcol#
  and o.type# = 34 /* TABLE SUBPARTITION */
  and h.bucket_cnt = 1
  and o.owner# = u.user#
  and (o.owner# = userenv('SCHEMAID')
        or
        tsp.bo# in ( select obj#
                    from sys.objauth$
                    where grantee# in ( select kzsrorol
                                         from x$kzsro
                                       )
                  )
        or /* user has system privileges */
          exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                  )
       )
union
select u.name,
       o.name, o.subname,
       tsp.cname,
       1,
       h.maximum,
       null
from sys.obj$ o, sys.hist_head$ h, sys.user$ u, tsp$ tsp
where o.obj# = tsp.obj# and tsp.obj# = h.obj#
  and tsp.intcol# = h.intcol#
  and o.type# = 34 /* TABLE SUBPARTITION */
  and h.bucket_cnt = 1
  and o.owner# = u.user#
  and (o.owner# = userenv('SCHEMAID')
        or
        tsp.bo# in ( select obj#
                    from sys.objauth$
                    where grantee# in ( select kzsrorol
                                         from x$kzsro
                                       )
                  )
        or /* user has system privileges */
          exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                  )
       );

CREATE OR REPLACE FORCE VIEW "ALL_SUBPART_KEY_COLUMNS"("OWNER","NAME","OBJECT_TYPE","COLUMN_NAME","COLUMN_POSITION") AS 
select u.name, o.name, 'TABLE',
  decode(bitand(c.property, 1), 1, a.name, c.name), spc.pos#
from   obj$ o, subpartcol$ spc, col$ c, user$ u, attrcol$ a
where  spc.obj# = o.obj# and spc.obj# = c.obj#
       and c.intcol# = spc.intcol#
       and u.user# = o.owner# and
       c.obj# = a.obj#(+) and c.intcol# = a.intcol#(+) and
      (o.owner# = userenv('SCHEMAID')
       or spc.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      )
union
select u.name, o.name, 'INDEX',
  decode(bitand(c.property, 1), 1, a.name, c.name), spc.pos#
from   obj$ o, subpartcol$ spc, col$ c, user$ u, ind$ i, attrcol$ a
where spc.obj# = i.obj# and i.obj# = o.obj# and i.bo# = c.obj#
      and c.intcol# = spc.intcol#
      and u.user# = o.owner# and
      c.obj# = a.obj#(+) and c.intcol# = a.intcol#(+) and
      (o.owner# = userenv('SCHEMAID')
       or i.bo# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_SUBSCRIBED_COLUMNS"("HANDLE","SOURCE_SCHEMA_NAME","SOURCE_TABLE_NAME","COLUMN_NAME","SUBSCRIPTION_NAME") AS 
SELECT
   sc.handle, t.source_schema_name, t.source_table_name, sc.column_name,
   s.subscription_name
  FROM sys.cdc_subscribed_columns$ sc, sys.cdc_change_tables$ t,
       sys.cdc_subscribers$ s
  WHERE sc.change_table_obj#=t.obj# AND
        s.handle = sc.handle;

CREATE OR REPLACE FORCE VIEW "ALL_SUBSCRIBED_TABLES"("HANDLE","SOURCE_SCHEMA_NAME","SOURCE_TABLE_NAME","VIEW_NAME","CHANGE_SET_NAME","SUBSCRIPTION_NAME") AS 
SELECT
   st.handle, t.source_schema_name, t.source_table_name, st.view_name,
   t.change_set_name, s.subscription_name
  FROM sys.cdc_subscribed_tables$ st, sys.cdc_change_tables$ t,
       sys.cdc_subscribers$ s, sys.user$ u
  WHERE st.change_table_obj#=t.obj# AND
        s.handle = st.handle AND
        s.username = u.name AND
        u.user# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "ALL_SUBSCRIPTIONS"("HANDLE","SET_NAME","USERNAME","CREATED","STATUS","EARLIEST_SCN","LATEST_SCN","DESCRIPTION","LAST_PURGED","LAST_EXTENDED","SUBSCRIPTION_NAME") AS 
SELECT
   s.handle, s.set_name, s.username, s.created, s.status, s.earliest_scn,
   s.latest_scn, s.description, s.last_purged, s.last_extended,
   s.subscription_name
  FROM sys.cdc_subscribers$ s, sys.user$ u
  WHERE s.username = u.name AND
        u.user# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "ALL_SUMDELTA"("TABLEOBJ#","PARTITIONOBJ#","DMLOPERATION","SCN","TIMESTAMP","LOWROWID","HIGHROWID","SEQUENCE") AS 
select s.TABLEOBJ#, s.PARTITIONOBJ#, s.DMLOPERATION, s.SCN,
          s.TIMESTAMP, s.LOWROWID, s.HIGHROWID, s.SEQUENCE
from  sys.obj$ o, sys.user$ u, sys.sumdelta$ s
where o.type# = 2
  and o.owner# = u.user#
  and s.tableobj# = o.obj#
  and (o.owner# = userenv('SCHEMAID')
    or o.obj# in
      (select oa.obj#
         from sys.objauth$ oa
         where grantee# in ( select kzsrorol from x$kzsro)
      )
    or /* user has system privileges */
      exists (select null from v$enabledprivs
        where priv_number in (-45 /* LOCK ANY TABLE */,
                              -47 /* SELECT ANY TABLE */,
                              -48 /* INSERT ANY TABLE */,
                              -49 /* UPDATE ANY TABLE */,
                              -50 /* DELETE ANY TABLE */)
              )
      );

CREATE OR REPLACE FORCE VIEW "ALL_SUMMARIES"("OWNER","SUMMARY_NAME","CONTAINER_OWNER","CONTAINER_NAME","LAST_REFRESH_SCN","LAST_REFRESH_DATE","REFRESH_METHOD","SUMMARY","FULLREFRESHTIM","INCREFRESHTIM","CONTAINS_VIEWS","UNUSABLE","RESTRICTED_SYNTAX","INC_REFRESHABLE","KNOWN_STALE","QUERY_LEN","QUERY") AS 
select u.name, o.name, u.name, s.containernam,
       s.lastrefreshscn, s.lastrefreshdate,
       decode (s.refreshmode, 0, 'NONE', 1, 'ANY', 2, 'INCREMENTAL', 3,'FULL'),
       decode(bitand(s.pflags, 25165824), 25165824, 'N', 'Y'),
       s.fullrefreshtim, s.increfreshtim,
       decode(bitand(s.pflags, 48), 0, 'N', 'Y'),
       decode(bitand(s.mflags, 64), 0, 'N', 'Y'), /* QSMQSUM_UNUSABLE */
       decode(bitand(s.pflags, 1294319), 0, 'Y', 'N'),
       decode(bitand(s.pflags, 236879743), 0, 'Y', 'N'),
       decode(bitand(s.mflags, 1), 0, 'N', 'Y'), /* QSMQSUM_KNOWNSTL */
       s.sumtextlen,s.sumtext
from sys.user$ u, sys.sum$ s, sys.obj$ o
where o.owner# = u.user#
  and o.obj# = s.obj#
  and bitand(s.xpflags, 8388608) = 0 /* NOT REWRITE EQUIVALENCE SUMMARY */
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_SUMMARY_AGGREGATES"("OWNER","SUMMARY_NAME","POSITION_IN_SELECT","CONTAINER_COLUMN","AGG_FUNCTION","DISTINCTFLAG","MEASURE") AS 
select u.name, o.name, sa.sumcolpos#, c.name,
       decode(sa.aggfunction, 15, 'AVG', 16, 'SUM', 17, 'COUNT',
                              18, 'MIN', 19, 'MAX',
                              97, 'VARIANCE', 98, 'STDDEV',
                              440, 'USER'),
       decode(sa.flags, 0, 'N', 'Y'),
       sa.aggtext
from sys.sumagg$ sa, sys.obj$ o, sys.user$ u, sys.sum$ s, sys.col$ c
where sa.sumobj# = o.obj#
  AND o.owner# = u.user#
  AND sa.sumobj# = s.obj#
  AND c.obj# = s.containerobj#
  AND c.col# = sa.containercol#
  AND (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      )
  AND bitand(s.xpflags, 8388608) = 0 /* NOT REWRITE EQUIVALENCE SUMMARY */;

CREATE OR REPLACE FORCE VIEW "ALL_SUMMARY_DETAIL_TABLES"("OWNER","SUMMARY_NAME","DETAIL_OWNER","DETAIL_RELATION","DETAIL_TYPE","DETAIL_ALIAS") AS 
select u.name, o.name, du.name,  do.name,
       decode (sd.detailobjtype, 1, 'TABLE', 2, 'VIEW',
                                3, 'SNAPSHOT', 4, 'CONTAINER', 'UNDEFINED'),
       sd.detailalias
from sys.user$ u, sys.sumdetail$ sd, sys.obj$ o, sys.obj$ do,
sys.user$ du, sys.sum$ s
where o.owner# = u.user#
  and o.obj# = sd.sumobj#
  and do.obj# = sd.detailobj#
  and do.owner# = du.user#
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      )
  and s.obj# = sd.sumobj#
  and bitand(s.xpflags, 8388608) = 0 /* NOT REWRITE EQUIVALENCE SUMMARY */;

CREATE OR REPLACE FORCE VIEW "ALL_SUMMARY_JOINS"("OWNER","SUMMARY_NAME","DETAILOBJ1_OWNER","DETAILOBJ1_RELATION","DETAILOBJ1_COLUMN","OPERATOR","DETAILOBJ2_OWNER","DETAILOBJ2_RELATION","DETAILOBJ2_COLUMN") AS 
select u.name, o.name,
       u1.name, o1.name, c1.name, '=',
       u2.name, o2.name, c2.name
from sys.sumjoin$ sj, sys.obj$ o, sys.user$ u,
     sys.obj$ o1, sys.user$ u1, sys.col$ c1,
     sys.obj$ o2, sys.user$ u2, sys.col$ c2,
     sys.sum$ s
where sj.sumobj# = o.obj#
  AND o.owner# = u.user#
  AND sj.tab1obj# = o1.obj#
  AND o1.owner# = u1.user#
  AND sj.tab1obj# = c1.obj#
  AND sj.tab1col# = c1.intcol#
  AND sj.tab2obj# = o2.obj#
  AND o2.owner# = u2.user#
  AND sj.tab2obj# = c2.obj#
  AND sj.tab2col# = c2.intcol#
  AND (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      )
  AND s.obj# = sj.sumobj#
  AND bitand(s.xpflags, 8388608) = 0 /* NOT REWRITE EQUIVALENCE SUMMARY */;

CREATE OR REPLACE FORCE VIEW "ALL_SUMMARY_KEYS"("OWNER","SUMMARY_NAME","POSITION_IN_SELECT","CONTAINER_COLUMN","DETAILOBJ_OWNER","DETAILOBJ_NAME","DETAILOBJ_ALIAS","DETAILOBJ_TYPE","DETAILOBJ_COLUMN") AS 
select u1.name, o1.name, sk.sumcolpos#, c1.name,
       u2.name, o2.name, sd.detailalias,
       decode(sk.detailobjtype, 1, 'TABLE', 2, 'VIEW'), c2.name
from sys.sumkey$ sk, sys.obj$ o1, sys.user$ u1, sys.col$ c1, sys.sum$ s,
     sys.sumdetail$ sd, sys.obj$ o2, sys.user$ u2, sys.col$ c2
where sk.sumobj# = o1.obj#
  AND o1.owner# = u1.user#
  AND sk.sumobj# = s.obj#
  AND s.containerobj# = c1.obj#
  AND c1.col# = sk.containercol#
  AND sk.detailobj# = o2.obj#
  AND o2.owner# = u2.user#
  AND sk.sumobj# = sd.sumobj#
  AND sk.detailobj# = sd.detailobj#
  AND sk.detailobj# = c2.obj#
  AND sk.detailcol# = c2.intcol#
  AND (o1.owner# = userenv('SCHEMAID')
       or o1.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      )
  AND bitand(s.xpflags, 8388608) = 0 /* NOT REWRITE EQUIVALENCE SUMMARY */;

CREATE OR REPLACE FORCE VIEW "ALL_SYNONYMS"("OWNER","SYNONYM_NAME","TABLE_OWNER","TABLE_NAME","DB_LINK") AS 
select u.name, o.name, s.owner, s.name, s.node
from sys.user$ u, sys.syn$ s, sys.obj$ o
where o.obj# = s.obj#
  and o.type# = 5
  and o.owner# = u.user#
  and (
       o.owner# in (USERENV('SCHEMAID'), 1 /* PUBLIC */)  /* user's private, any public */
       or /* user has any privs on base object */
        exists
        (select null from sys.objauth$ ba, sys.obj$ bo, sys.user$ bu
         where bu.name = s.owner
           and bo.name = s.name
           and bu.user# = bo.owner#
           and ba.obj# = bo.obj#
           and (   ba.grantee# in (select kzsrorol from x$kzsro)
                or ba.grantor# = USERENV('SCHEMAID')
                )
        )
        or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
       );

CREATE OR REPLACE FORCE VIEW "ALL_TABLES"("OWNER","TABLE_NAME","TABLESPACE_NAME","CLUSTER_NAME","IOT_NAME","PCT_FREE","PCT_USED","INI_TRANS","MAX_TRANS","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENTS","MAX_EXTENTS","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","LOGGING","BACKED_UP","NUM_ROWS","BLOCKS","EMPTY_BLOCKS","AVG_SPACE","CHAIN_CNT","AVG_ROW_LEN","AVG_SPACE_FREELIST_BLOCKS","NUM_FREELIST_BLOCKS","DEGREE","INSTANCES","CACHE","TABLE_LOCK","SAMPLE_SIZE","LAST_ANALYZED","PARTITIONED","IOT_TYPE","TEMPORARY","SECONDARY","NESTED","BUFFER_POOL","ROW_MOVEMENT","GLOBAL_STATS","USER_STATS","DURATION","SKIP_CORRUPT","MONITORING","CLUSTER_OWNER","DEPENDENCIES","COMPRESSION","DROPPED") AS 
select u.name, o.name,decode(bitand(t.property, 2151678048), 0, ts.name, null),
       decode(bitand(t.property, 1024), 0, null, co.name),
       decode((bitand(t.property, 512)+bitand(t.flags, 536870912)),
              0, null, co.name),
       decode(bitand(t.property, 32+64), 0, mod(t.pctfree$, 100), 64, 0, null),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
          decode(bitand(t.property, 32+64), 0, t.pctused$, 64, 0, null)),
       decode(bitand(t.property, 32), 0, t.initrans, null),
       decode(bitand(t.property, 32), 0, t.maxtrans, null),
       s.iniexts * ts.blocksize,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extsize * ts.blocksize),
       s.minexts, s.maxexts,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extpct),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
         decode(bitand(o.flags, 2), 2, 1, decode(s.lists, 0, 1, s.lists))),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
         decode(bitand(o.flags, 2), 2, 1, decode(s.groups, 0, 1, s.groups))),
       decode(bitand(t.property, 32+64), 0,
                decode(bitand(t.flags, 32), 0, 'YES', 'NO'), null),
       decode(bitand(t.flags,1), 0, 'Y', 1, 'N', '?'),
       t.rowcnt,
       decode(bitand(t.property, 64), 0, t.blkcnt, null),
       decode(bitand(t.property, 64), 0, t.empcnt, null),
       decode(bitand(t.property, 64), 0, t.avgspc, null),
       t.chncnt, t.avgrln, t.avgspc_flb,
       decode(bitand(t.property, 64), 0, t.flbcnt, null),
       lpad(decode(t.degree, 32767, 'DEFAULT', nvl(t.degree,1)),10),
       lpad(decode(t.instances, 32767, 'DEFAULT', nvl(t.instances,1)),10),
       lpad(decode(bitand(t.flags, 8), 8, 'Y', 'N'),5),
       decode(bitand(t.flags, 6), 0, 'ENABLED', 'DISABLED'),
       t.samplesize, t.analyzetime,
       decode(bitand(t.property, 32), 32, 'YES', 'NO'),
       decode(bitand(t.property, 64), 64, 'IOT',
               decode(bitand(t.property, 512), 512, 'IOT_OVERFLOW',
               decode(bitand(t.flags, 536870912), 536870912, 'IOT_MAPPING', null))),
       decode(bitand(o.flags, 2), 0, 'N', 2, 'Y', 'N'),
       decode(bitand(o.flags, 16), 0, 'N', 16, 'Y', 'N'),
       decode(bitand(t.property, 8192), 8192, 'YES',
              decode(bitand(t.property, 1), 0, 'NO', 'YES')),
       decode(bitand(o.flags, 2), 2, 'DEFAULT',
             decode(s.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL)),
       decode(bitand(t.flags, 131072), 131072, 'ENABLED', 'DISABLED'),
       decode(bitand(t.flags, 512), 0, 'NO', 'YES'),
       decode(bitand(t.flags, 256), 0, 'NO', 'YES'),
       decode(bitand(o.flags, 2), 0, NULL,
          decode(bitand(t.property, 8388608), 8388608,
                 'SYS$SESSION', 'SYS$TRANSACTION')),
       decode(bitand(t.flags, 1024), 1024, 'ENABLED', 'DISABLED'),
       decode(bitand(o.flags, 2), 2, 'NO',
           decode(bitand(t.property, 2147483648), 2147483648, 'NO',
              decode(ksppcv.ksppstvl, 'TRUE', 'YES', 'NO'))),
       decode(bitand(t.property, 1024), 0, null, cu.name),
       decode(bitand(t.flags, 8388608), 8388608, 'ENABLED', 'DISABLED'),
       decode(bitand(t.property, 32), 32, null,
                decode(bitand(s.spare1, 2048), 2048, 'ENABLED', 'DISABLED')),
       decode(bitand(o.flags, 128), 128, 'YES', 'NO')
from sys.user$ u, sys.ts$ ts, sys.seg$ s, sys.obj$ co, sys.tab$ t, sys.obj$ o,
     sys.obj$ cx, sys.user$ cu, x$ksppcv ksppcv, x$ksppi ksppi
where o.owner# = u.user#
  and o.obj# = t.obj#
  and bitand(t.property, 1) = 0
  and bitand(o.flags, 128) = 0
  and t.bobj# = co.obj# (+)
  and t.ts# = ts.ts#
  and t.file# = s.file# (+)
  and t.block# = s.block# (+)
  and t.ts# = s.ts# (+)
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      )
  and t.dataobj# = cx.obj# (+)
  and cx.owner# = cu.user# (+)
  and ksppi.indx = ksppcv.indx
  and ksppi.ksppinm = '_dml_monitoring_enabled';

CREATE OR REPLACE FORCE VIEW "ALL_TAB_COLS"("OWNER","TABLE_NAME","COLUMN_NAME","DATA_TYPE","DATA_TYPE_MOD","DATA_TYPE_OWNER","DATA_LENGTH","DATA_PRECISION","DATA_SCALE","NULLABLE","COLUMN_ID","DEFAULT_LENGTH","DATA_DEFAULT","NUM_DISTINCT","LOW_VALUE","HIGH_VALUE","DENSITY","NUM_NULLS","NUM_BUCKETS","LAST_ANALYZED","SAMPLE_SIZE","CHARACTER_SET_NAME","CHAR_COL_DECL_LENGTH","GLOBAL_STATS","USER_STATS","AVG_COL_LEN","CHAR_LENGTH","CHAR_USED","V80_FMT_IMAGE","DATA_UPGRADED","HIDDEN_COLUMN","VIRTUAL_COLUMN","SEGMENT_COLUMN_ID","INTERNAL_COLUMN_ID","HISTOGRAM","QUALIFIED_COL_NAME") AS 
select u.name, o.name,
       c.name,
       decode(c.type#, 1, decode(c.charsetform, 2, 'NVARCHAR2', 'VARCHAR2'),
                       2, decode(c.scale, null,
                                 decode(c.precision#, null, 'NUMBER', 'FLOAT'),
                                 'NUMBER'),
                       8, 'LONG',
                       9, decode(c.charsetform, 2, 'NCHAR VARYING', 'VARCHAR'),
                       12, 'DATE',
                       23, 'RAW', 24, 'LONG RAW',
                       58, nvl2(ac.synobj#, (select o.name from obj$ o
                                where o.obj#=ac.synobj#), ot.name),
                       69, 'ROWID',
                       96, decode(c.charsetform, 2, 'NCHAR', 'CHAR'),
                       100, 'BINARY_FLOAT',
                       101, 'BINARY_DOUBLE',
                       105, 'MLSLABEL',
                       106, 'MLSLABEL',
                       111, nvl2(ac.synobj#, (select o.name from obj$ o
                                 where o.obj#=ac.synobj#), ot.name),
                       112, decode(c.charsetform, 2, 'NCLOB', 'CLOB'),
                       113, 'BLOB', 114, 'BFILE', 115, 'CFILE',
                       121, nvl2(ac.synobj#, (select o.name from obj$ o
                                 where o.obj#=ac.synobj#), ot.name),
                       122, nvl2(ac.synobj#, (select o.name from obj$ o
                                 where o.obj#=ac.synobj#), ot.name),
                       123, nvl2(ac.synobj#, (select o.name from obj$ o
                                 where o.obj#=ac.synobj#), ot.name),
                       178, 'TIME(' ||c.scale|| ')',
                       179, 'TIME(' ||c.scale|| ')' || ' WITH TIME ZONE',
                       180, 'TIMESTAMP(' ||c.scale|| ')',
                       181, 'TIMESTAMP(' ||c.scale|| ')' || ' WITH TIME ZONE',
                       231, 'TIMESTAMP(' ||c.scale|| ')' || ' WITH LOCAL TIME ZONE',
                       182, 'INTERVAL YEAR(' ||c.precision#||') TO MONTH',
                       183, 'INTERVAL DAY(' ||c.precision#||') TO SECOND(' ||
                             c.scale || ')',
                       208, 'UROWID',
                       'UNDEFINED'),
       decode(c.type#, 111, 'REF'),
       nvl2(ac.synobj#, (select u.name from user$ u, obj$ o
            where o.owner#=u.user# and o.obj#=ac.synobj#), ut.name),
       c.length, c.precision#, c.scale,
       decode(sign(c.null$),-1,'D', 0, 'Y', 'N'),
       decode(c.col#, 0, to_number(null), c.col#), c.deflength,
       c.default$, h.distcnt, h.lowval, h.hival, h.density, h.null_cnt,
       case when h.bucket_cnt > 255 then h.row_cnt else
         decode(h.row_cnt, h.distcnt, h.row_cnt, h.bucket_cnt)
       end,
       h.timestamp#, h.sample_size,
       decode(c.charsetform, 1, 'CHAR_CS',
                             2, 'NCHAR_CS',
                             3, NLS_CHARSET_NAME(c.charsetid),
                             4, 'ARG:'||c.charsetid),
       decode(c.charsetid, 0, to_number(NULL),
                           nls_charset_decl_len(c.length, c.charsetid)),
       decode(bitand(h.spare2, 2), 2, 'YES', 'NO'),
       decode(bitand(h.spare2, 1), 1, 'YES', 'NO'),
       h.avgcln,
       c.spare3,
       decode(c.type#, 1, decode(bitand(c.property, 8388608), 0, 'B', 'C'),
                      96, decode(bitand(c.property, 8388608), 0, 'B', 'C'),
                      null),
       decode(bitand(ac.flags, 128), 128, 'YES', 'NO'),
       decode(o.status, 1, decode(bitand(ac.flags, 256), 256, 'NO', 'YES'),
                        decode(bitand(ac.flags, 2), 2, 'NO',
                               decode(bitand(ac.flags, 4), 4, 'NO',
                                      decode(bitand(ac.flags, 8), 8, 'NO',
                                             'N/A')))),
       decode(c.property, 0, 'NO', decode(bitand(c.property, 32), 32, 'YES',
                                          'NO')),
       decode(c.property, 0, 'NO', decode(bitand(c.property, 8), 8, 'YES',
                                          'NO')),
       decode(c.segcol#, 0, to_number(null), c.segcol#), c.intcol#,
       case when h.bucket_cnt > 255 then 'FREQUENCY' else
         decode(nvl(h.row_cnt, 0), 0, 'NONE',
                                   h.distcnt, 'FREQUENCY', 'HEIGHT BALANCED')
       end,
       decode(bitand(c.property, 1024), 1024,
              (select decode(bitand(cl.property, 1), 1, rc.name, cl.name)
               from sys.col$ cl, attrcol$ rc where cl.intcol# = c.intcol#-1
               and cl.obj# = c.obj# and c.obj# = rc.obj#(+) and
               cl.intcol# = rc.intcol#(+)),
              decode(bitand(c.property, 1), 0, c.name,
                     (select tc.name from sys.attrcol$ tc
                      where c.obj# = tc.obj# and c.intcol# = tc.intcol#)))
from sys.col$ c, sys.obj$ o, sys.hist_head$ h, sys.user$ u,
     sys.coltype$ ac, sys.obj$ ot, sys.user$ ut
where o.obj# = c.obj#
  and o.owner# = u.user#
  and c.obj# = h.obj#(+) and c.intcol# = h.intcol#(+)
  and c.obj# = ac.obj#(+) and c.intcol# = ac.intcol#(+)
  and ac.toid = ot.oid$(+)
  and ot.type#(+) = 13
  and ot.owner# = ut.user#(+)
  and (o.type# in (3, 4)                                     /* cluster, view */
       or
       (o.type# = 2     /* tables, excluding iot - overflow and nested tables */
        and
        not exists (select null
                      from sys.tab$ t
                     where t.obj# = o.obj#
                       and (bitand(t.property, 512) = 512 or
                            bitand(t.property, 8192) = 8192))))
  and (o.owner# = userenv('SCHEMAID')
        or
        o.obj# in ( select obj#
                    from sys.objauth$
                    where grantee# in ( select kzsrorol
                                         from x$kzsro
                                       )
                  )
        or /* user has system privileges */
          exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                  )
       );

CREATE OR REPLACE FORCE VIEW "ALL_TAB_COLUMNS"("OWNER","TABLE_NAME","COLUMN_NAME","DATA_TYPE","DATA_TYPE_MOD","DATA_TYPE_OWNER","DATA_LENGTH","DATA_PRECISION","DATA_SCALE","NULLABLE","COLUMN_ID","DEFAULT_LENGTH","DATA_DEFAULT","NUM_DISTINCT","LOW_VALUE","HIGH_VALUE","DENSITY","NUM_NULLS","NUM_BUCKETS","LAST_ANALYZED","SAMPLE_SIZE","CHARACTER_SET_NAME","CHAR_COL_DECL_LENGTH","GLOBAL_STATS","USER_STATS","AVG_COL_LEN","CHAR_LENGTH","CHAR_USED","V80_FMT_IMAGE","DATA_UPGRADED","HISTOGRAM") AS 
select /*+ rule */ OWNER, TABLE_NAME,
       COLUMN_NAME, DATA_TYPE, DATA_TYPE_MOD, DATA_TYPE_OWNER,
       DATA_LENGTH, DATA_PRECISION, DATA_SCALE, NULLABLE, COLUMN_ID,
       DEFAULT_LENGTH, DATA_DEFAULT, NUM_DISTINCT, LOW_VALUE, HIGH_VALUE,
       DENSITY, NUM_NULLS, NUM_BUCKETS, LAST_ANALYZED, SAMPLE_SIZE,
       CHARACTER_SET_NAME, CHAR_COL_DECL_LENGTH,
       GLOBAL_STATS, USER_STATS, AVG_COL_LEN, CHAR_LENGTH, CHAR_USED,
       V80_FMT_IMAGE, DATA_UPGRADED, HISTOGRAM
  from ALL_TAB_COLS
 where HIDDEN_COLUMN = 'NO';

CREATE OR REPLACE FORCE VIEW "ALL_TAB_COL_STATISTICS"("OWNER","TABLE_NAME","COLUMN_NAME","NUM_DISTINCT","LOW_VALUE","HIGH_VALUE","DENSITY","NUM_NULLS","NUM_BUCKETS","LAST_ANALYZED","SAMPLE_SIZE","GLOBAL_STATS","USER_STATS","AVG_COL_LEN","HISTOGRAM") AS 
select owner, table_name, column_name, num_distinct, low_value, high_value,
       density, num_nulls, num_buckets, last_analyzed, sample_size,
       global_stats, user_stats, avg_col_len, HISTOGRAM
from all_tab_columns
where last_analyzed is not null
union all
select /* fixed table column stats */
       'SYS', ft.kqftanam, c.kqfconam,
       h.distcnt, h.lowval, h.hival,
       h.density, h.null_cnt,
       case when h.bucket_cnt > 255 then h.row_cnt else
         decode(h.row_cnt, h.distcnt, h.row_cnt, h.bucket_cnt)
       end,
       h.timestamp#, h.sample_size,
       decode(bitand(h.spare2, 2), 2, 'YES', 'NO'),
       decode(bitand(h.spare2, 1), 1, 'YES', 'NO'),
       h.avgcln,
       case when h.bucket_cnt > 255 then 'FREQUENCY' else
         decode(nvl(h.row_cnt, 0), 0, 'NONE',
                                   h.distcnt, 'FREQUENCY', 'HEIGHT BALANCED')
       end
from   sys.x$kqfta ft, sys.fixed_obj$ fobj,
         sys.x$kqfco c, sys.hist_head$ h
where
       ft.kqftaobj = fobj. obj#
       and c.kqfcotob = ft.kqftaobj
       and h.obj# = ft.kqftaobj
       and h.intcol# = c.kqfcocno
       /*
        * if fobj and st are not in sync (happens when db open read only
        * after upgrade), do not display stats.
        */
       and ft.kqftaver =
             fobj.timestamp - to_date('01-01-1991', 'DD-MM-YYYY')
       and h.timestamp# is not null
       and (userenv('SCHEMAID') = 0  /* SYS */
            or /* user has system privileges */
            exists (select null from v$enabledprivs
                    where priv_number in (-237 /* SELECT ANY DICTIONARY */)
                   )
           );

CREATE OR REPLACE FORCE VIEW "ALL_TAB_COMMENTS"("OWNER","TABLE_NAME","TABLE_TYPE","COMMENTS") AS 
select u.name, o.name,
       decode(o.type#, 0, 'NEXT OBJECT', 1, 'INDEX', 2, 'TABLE', 3, 'CLUSTER',
                      4, 'VIEW', 5, 'SYNONYM', 'UNDEFINED'),
       c.comment$
from sys.obj$ o, sys.user$ u, sys.com$ c
where o.owner# = u.user#
  and o.obj# = c.obj#(+)
  and c.col#(+) is null
  and (o.type# in (4)                                                /* view */
       or
       (o.type# = 2                                                /* tables */
        AND         /* excluding iot-overflow, nested or mv container tables */
        not exists (select null
                      from sys.tab$ t
                     where t.obj# = o.obj#
                       and (bitand(t.property, 512) = 512 or
                            bitand(t.property, 8192) = 8192 OR
                            bitand(t.property, 67108864) = 67108864))))
  and (o.owner# = userenv('SCHEMAID')
        or
        o.obj# in ( select obj#
                    from sys.objauth$
                    where grantee# in ( select kzsrorol
                                         from x$kzsro
                                       )
                  )
        or /* user has system privileges */
          exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                  )
       );

CREATE OR REPLACE FORCE VIEW "ALL_TAB_HISTOGRAMS"("OWNER","TABLE_NAME","COLUMN_NAME","ENDPOINT_NUMBER","ENDPOINT_VALUE","ENDPOINT_ACTUAL_VALUE") AS 
select /*+ ordered */ u.name,
       o.name,
       decode(bitand(c.property, 1), 1, a.name, c.name),
       h.bucket,
       h.endpoint,
       h.epvalue
from sys.user$ u, sys.obj$ o, sys.col$ c, sys.histgrm$ h, sys.attrcol$ a
where o.obj# = c.obj#
  and (o.owner# = userenv('SCHEMAID')
        or
        o.obj# in ( select obj#
                    from sys.objauth$
                    where grantee# in ( select kzsrorol
                                         from x$kzsro
                                       )
                  )
        or /* user has system privileges */
          exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                  )
       )
  and o.owner# = u.user#
  and c.obj# = h.obj# and c.intcol# = h.intcol#
  and (o.type# in (3, 4)                                     /* cluster, view */
       or
       (o.type# = 2     /* tables, excluding iot - overflow and nested tables */
        and
        not exists (select null
                      from sys.tab$ t
                     where t.obj# = o.obj#
                       and (bitand(t.property, 512) = 512 or
                            bitand(t.property, 8192) = 8192))))
  and c.obj# = a.obj#(+)
  and c.intcol# = a.intcol#(+)
union all
select /*+ ordered */ u.name,
       o.name,
       decode(bitand(c.property, 1), 1, a.name, c.name),
       0,
       h.minimum,
       null
from sys.user$ u, sys.obj$ o, sys.col$ c, sys.hist_head$ h, sys.attrcol$ a
where o.obj# = c.obj#
  and (o.owner# = userenv('SCHEMAID')
        or
        o.obj# in ( select obj#
                    from sys.objauth$
                    where grantee# in ( select kzsrorol
                                         from x$kzsro
                                       )
                  )
        or /* user has system privileges */
          exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                  )
       )
  and o.owner# = u.user#
  and c.obj# = h.obj# and c.intcol# = h.intcol#
  and (o.type# in (3, 4)                                     /* cluster, view */
       or
       (o.type# = 2     /* tables, excluding iot - overflow and nested tables */
        and
        not exists (select null
                      from sys.tab$ t
                     where t.obj# = o.obj#
                       and (bitand(t.property, 512) = 512 or
                            bitand(t.property, 8192) = 8192))))
  and h.bucket_cnt = 1
  and c.obj# = a.obj#(+)
  and c.intcol# = a.intcol#(+)
union all
select /*+ ordered */ u.name,
       o.name,
       decode(bitand(c.property, 1), 1, a.name, c.name),
       1,
       h.maximum,
       null
from sys.user$ u, sys.obj$ o, sys.col$ c, sys.hist_head$ h, sys.attrcol$ a
where o.obj# = c.obj#
  and (o.owner# = userenv('SCHEMAID')
        or
        o.obj# in ( select obj#
                    from sys.objauth$
                    where grantee# in ( select kzsrorol
                                         from x$kzsro
                                       )
                  )
        or /* user has system privileges */
          exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                  )
       )
  and o.owner# = u.user#
  and c.obj# = h.obj# and c.intcol# = h.intcol#
  and (o.type# in (3, 4)                                     /* cluster, view */
       or
       (o.type# = 2     /* tables, excluding iot - overflow and nested tables */
        and
        not exists (select null
                      from sys.tab$ t
                     where t.obj# = o.obj#
                       and (bitand(t.property, 512) = 512 or
                            bitand(t.property, 8192) = 8192))))
  and h.bucket_cnt = 1
  and c.obj# = a.obj#(+)
  and c.intcol# = a.intcol#(+)
union all
select /*+ ordered */
       'SYS',
       ft.kqftanam,
       c.kqfconam,
       h.bucket,
       h.endpoint,
       h.epvalue
from   sys.x$kqfta ft, sys.fixed_obj$ fobj, sys.x$kqfco c, sys.histgrm$ h
where  ft.kqftaobj = fobj. obj#
  and c.kqfcotob = ft.kqftaobj
  and h.obj# = ft.kqftaobj
  and h.intcol# = c.kqfcocno
  /*
   * if fobj and st are not in sync (happens when db open read only
   * after upgrade), do not display stats.
   */
  and ft.kqftaver =
         fobj.timestamp - to_date('01-01-1991', 'DD-MM-YYYY')
  and (userenv('SCHEMAID') = 0  /* SYS */
       or /* user has system privileges */
       exists (select null from v$enabledprivs
               where priv_number in (-237 /* SELECT ANY DICTIONARY */)
              )
      );

CREATE OR REPLACE FORCE VIEW "ALL_TAB_MODIFICATIONS"("TABLE_OWNER","TABLE_NAME","PARTITION_NAME","SUBPARTITION_NAME","INSERTS","UPDATES","DELETES","TIMESTAMP","TRUNCATED","DROP_SEGMENTS") AS 
select u.name, o.name, null, null,
       m.inserts, m.updates, m.deletes, m.timestamp,
       decode(bitand(m.flags,1),1,'YES','NO'),
       m.drop_segments
from sys.mon_mods$ m, sys.obj$ o, sys.tab$ t, sys.user$ u
where o.obj# = m.obj# and o.obj# = t.obj# and o.owner# = u.user#
      and (o.owner# = userenv('SCHEMAID')
           or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in (select kzsrorol from x$kzsro))
           or /* user has system privileges */
             exists (select null from v$enabledprivs
                       where priv_number in (-45 /* LOCK ANY TABLE */,
                                             -47 /* SELECT ANY TABLE */,
                                             -48 /* INSERT ANY TABLE */,
                                             -49 /* UPDATE ANY TABLE */,
                                             -50 /* DELETE ANY TABLE */,
                                             -165/* ANALYZE ANY */))
          )
union all
select u.name, o.name, o.subname, null,
       m.inserts, m.updates, m.deletes, m.timestamp,
       decode(bitand(m.flags,1),1,'YES','NO'),
       m.drop_segments
from sys.mon_mods$ m, sys.obj$ o, sys.user$ u
where o.owner# = u.user# and o.obj# = m.obj# and o.type#=19
      and (o.owner# = userenv('SCHEMAID')
           or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in (select kzsrorol from x$kzsro))
           or /* user has system privileges */
             exists (select null from v$enabledprivs
                       where priv_number in (-45 /* LOCK ANY TABLE */,
                                             -47 /* SELECT ANY TABLE */,
                                             -48 /* INSERT ANY TABLE */,
                                             -49 /* UPDATE ANY TABLE */,
                                             -50 /* DELETE ANY TABLE */,
                                             -165/* ANALYZE ANY */))
          )
union all
select u.name, o.name, o2.subname, o.subname,
       m.inserts, m.updates, m.deletes, m.timestamp,
       decode(bitand(m.flags,1),1,'YES','NO'),
       m.drop_segments
from sys.mon_mods$ m, sys.obj$ o, sys.tabsubpart$ tsp, sys.obj$ o2,
     sys.user$ u
where o.obj# = m.obj# and o.owner# = u.user# and
      o.obj# = tsp.obj# and o2.obj# = tsp.pobj#
      and (o.owner# = userenv('SCHEMAID')
           or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in (select kzsrorol from x$kzsro))
           or /* user has system privileges */
             exists (select null from v$enabledprivs
                       where priv_number in (-45 /* LOCK ANY TABLE */,
                                             -47 /* SELECT ANY TABLE */,
                                             -48 /* INSERT ANY TABLE */,
                                             -49 /* UPDATE ANY TABLE */,
                                             -50 /* DELETE ANY TABLE */,
                                             -165/* ANALYZE ANY */))
          );

CREATE OR REPLACE FORCE VIEW "ALL_TAB_PARTITIONS"("TABLE_OWNER","TABLE_NAME","COMPOSITE","PARTITION_NAME","SUBPARTITION_COUNT","HIGH_VALUE","HIGH_VALUE_LENGTH","PARTITION_POSITION","TABLESPACE_NAME","PCT_FREE","PCT_USED","INI_TRANS","MAX_TRANS","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENT","MAX_EXTENT","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","LOGGING","COMPRESSION","NUM_ROWS","BLOCKS","EMPTY_BLOCKS","AVG_SPACE","CHAIN_CNT","AVG_ROW_LEN","SAMPLE_SIZE","LAST_ANALYZED","BUFFER_POOL","GLOBAL_STATS","USER_STATS") AS 
select u.name, o.name, 'NO', o.subname, 0,
       tp.hiboundval, tp.hiboundlen, tp.part#, ts.name,
       tp.pctfree$,
       decode(bitand(ts.flags, 32), 32, to_number(NULL), tp.pctused$),
             initrans, maxtrans, s.iniexts * ts.blocksize,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                               s.extsize * ts.blocksize),
       s.minexts, s.maxexts,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extpct),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
          decode(s.lists, 0, 1, s.lists)),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
          decode(s.groups, 0, 1, s.groups)),
       decode(mod(trunc(tp.flags / 4), 2), 0, 'YES', 'NO'),
       decode(bitand(s.spare1, 2048), 2048, 'ENABLED', 'DISABLED'),
       tp.rowcnt, tp.blkcnt, tp.empcnt, tp.avgspc, tp.chncnt, tp.avgrln,
       tp.samplesize, tp.analyzetime,
       decode(s.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL),
       decode(bitand(tp.flags, 16), 0, 'NO', 'YES'),
       decode(bitand(tp.flags, 8), 0, 'NO', 'YES')
from   obj$ o, tabpartv$ tp, ts$ ts, sys.seg$ s, user$ u
where  o.obj# = tp.obj# and ts.ts# = tp.ts# and u.user# = o.owner# and
       tp.file#=s.file# and tp.block#=s.block# and tp.ts#=s.ts# and
       (o.owner# = userenv('SCHEMAID')
        or tp.bo# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
        or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      )
union all -- IOT Partitions
select u.name, o.name, 'NO', o.subname, 0,
       tp.hiboundval, tp.hiboundlen, tp.part#, NULL,
       TO_NUMBER(NULL),TO_NUMBER(NULL),TO_NUMBER(NULL),TO_NUMBER(NULL),
       TO_NUMBER(NULL),
       TO_NUMBER(NULL),TO_NUMBER(NULL),TO_NUMBER(NULL),TO_NUMBER(NULL),
       TO_NUMBER(NULL),TO_NUMBER(NULL),
       NULL,
       'N/A',
       tp.rowcnt, TO_NUMBER(NULL), TO_NUMBER(NULL), 0, tp.chncnt, tp.avgrln,
       tp.samplesize, tp.analyzetime, NULL,
       decode(bitand(tp.flags, 16), 0, 'NO', 'YES'),
       decode(bitand(tp.flags, 8), 0, 'NO', 'YES')
from   obj$ o, tabpartv$ tp, user$ u
where  o.obj# = tp.obj# and o.owner# = u.user# and
       tp.file#=0 and tp.block#=0 and
       (o.owner# = userenv('SCHEMAID')
        or tp.bo# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
        or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      )
union all -- Composite Partitions
select u.name, o.name, 'YES', o.subname, tcp.subpartcnt,
       tcp.hiboundval, tcp.hiboundlen, tcp.part#, ts.name,
       tcp.defpctfree,
       decode(bitand(ts.flags, 32), 32, to_number(NULL), tcp.defpctused),
       tcp.definitrans, tcp.defmaxtrans,
       tcp.definiexts, tcp.defextsize, tcp.defminexts, tcp.defmaxexts,
       tcp.defextpct,
       decode(bitand(ts.flags, 32), 32, to_number(NULL), tcp.deflists),
       decode(bitand(ts.flags, 32), 32, to_number(NULL), tcp.defgroups),
       decode(tcp.deflogging, 0, 'NONE', 1, 'YES', 2, 'NO', 'UNKNOWN'),
       decode(mod(tcp.spare2,256), 0, 'NONE', 1, 'ENABLED', 2, 'DISABLED',
                                   'UNKNOWN'),
       tcp.rowcnt, tcp.blkcnt, tcp.empcnt, tcp.avgspc, tcp.chncnt, tcp.avgrln,
       tcp.samplesize, tcp.analyzetime,
       decode(tcp.defbufpool, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL),
       decode(bitand(tcp.flags, 16), 0, 'NO', 'YES'),
       decode(bitand(tcp.flags, 8), 0, 'NO', 'YES')
from   obj$ o, tabcompartv$ tcp, ts$ ts, user$ u
where  o.obj# = tcp.obj# and tcp.defts# = ts.ts#  and u.user# = o.owner# and
       (o.owner# = userenv('SCHEMAID')
        or tcp.bo# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
        or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_TAB_PRIVS"("GRANTOR","GRANTEE","TABLE_SCHEMA","TABLE_NAME","PRIVILEGE","GRANTABLE","HIERARCHY") AS 
select ur.name, ue.name, u.name, o.name, tpm.name,
       decode(mod(oa.option$,2), 1, 'YES', 'NO'),
       decode(bitand(oa.option$,2), 2, 'YES', 'NO')
from sys.objauth$ oa, sys.obj$ o, sys.user$ u, sys.user$ ur, sys.user$ ue,
     table_privilege_map tpm
where oa.obj# = o.obj#
  and oa.grantor# = ur.user#
  and oa.grantee# = ue.user#
  and oa.col# is null
  and u.user# = o.owner#
  and oa.privilege# = tpm.privilege
  and (oa.grantor# = userenv('SCHEMAID') or
       oa.grantee# in (select kzsrorol from x$kzsro) or
       o.owner# = userenv('SCHEMAID'));

CREATE OR REPLACE FORCE VIEW "ALL_TAB_PRIVS_MADE"("GRANTEE","OWNER","TABLE_NAME","GRANTOR","PRIVILEGE","GRANTABLE","HIERARCHY") AS 
select ue.name, u.name, o.name, ur.name, tpm.name,
       decode(mod(oa.option$,2), 1, 'YES', 'NO'),
       decode(bitand(oa.option$,2), 2, 'YES', 'NO')
from sys.objauth$ oa, sys.obj$ o, sys.user$ u, sys.user$ ur, sys.user$ ue,
     table_privilege_map tpm
where oa.obj# = o.obj#
  and oa.grantor# = ur.user#
  and oa.grantee# = ue.user#
  and u.user# = o.owner#
  and oa.col# is null
  and oa.privilege# = tpm.privilege
  and userenv('SCHEMAID') in (o.owner#, oa.grantor#);

CREATE OR REPLACE FORCE VIEW "ALL_TAB_PRIVS_RECD"("GRANTEE","OWNER","TABLE_NAME","GRANTOR","PRIVILEGE","GRANTABLE","HIERARCHY") AS 
select ue.name, u.name, o.name, ur.name, tpm.name,
       decode(mod(oa.option$,2), 1, 'YES', 'NO'),
       decode(bitand(oa.option$,2), 2, 'YES', 'NO')
from sys.objauth$ oa, sys.obj$ o, sys.user$ u, sys.user$ ur, sys.user$ ue,
     table_privilege_map tpm
where oa.obj# = o.obj#
  and oa.grantor# = ur.user#
  and oa.grantee# = ue.user#
  and u.user# = o.owner#
  and oa.col# is null
  and oa.privilege# = tpm.privilege
  and oa.grantee# in (select kzsrorol from x$kzsro);

CREATE OR REPLACE FORCE VIEW "ALL_TAB_STATISTICS"("OWNER","TABLE_NAME","PARTITION_NAME","PARTITION_POSITION","SUBPARTITION_NAME","SUBPARTITION_POSITION","OBJECT_TYPE","NUM_ROWS","BLOCKS","EMPTY_BLOCKS","AVG_SPACE","CHAIN_CNT","AVG_ROW_LEN","AVG_SPACE_FREELIST_BLOCKS","NUM_FREELIST_BLOCKS","AVG_CACHED_BLOCKS","AVG_CACHE_HIT_RATIO","SAMPLE_SIZE","LAST_ANALYZED","GLOBAL_STATS","USER_STATS","STATTYPE_LOCKED") AS 
SELECT /* TABLES */
    u.name, o.name, NULL, NULL, NULL, NULL, 'TABLE', t.rowcnt,
    decode(bitand(t.property, 64), 0, t.blkcnt, TO_NUMBER(NULL)),
    decode(bitand(t.property, 64), 0, t.empcnt, TO_NUMBER(NULL)),
    decode(bitand(t.property, 64), 0, t.avgspc, TO_NUMBER(NULL)),
    t.chncnt, t.avgrln, t.avgspc_flb,
    decode(bitand(t.property, 64), 0, t.flbcnt, TO_NUMBER(NULL)),
    ts.cachedblk, ts.cachehit, t.samplesize, t.analyzetime,
    decode(bitand(t.flags, 512), 0, 'NO', 'YES'),
    decode(bitand(t.flags, 256), 0, 'NO', 'YES'),
    decode(bitand(t.trigflag, 67108864) + bitand(t.trigflag, 134217728),
           0, NULL, 67108864, 'DATA', 134217728, 'CACHE', 'ALL')
  FROM
    sys.user$ u, sys.obj$ o, sys.tab$ t, sys.tab_stats$ ts
  WHERE
        o.owner# = u.user#
    and o.obj# = t.obj#
    and bitand(t.property, 1) = 0 /* not a typed table */
    and o.obj# = ts.obj# (+)
    and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      )
  UNION ALL
  SELECT /* PARTITIONS,  NOT IOT */
    u.name, o.name, o.subname, tp.part#, NULL, NULL, 'PARTITION',
    tp.rowcnt, tp.blkcnt, tp.empcnt, tp.avgspc,
    tp.chncnt, tp.avgrln, TO_NUMBER(NULL), TO_NUMBER(NULL),
    ts.cachedblk, ts.cachehit, tp.samplesize, tp.analyzetime,
    decode(bitand(tp.flags, 16), 0, 'NO', 'YES'),
    decode(bitand(tp.flags, 8), 0, 'NO', 'YES'),
    decode(bitand(tab.trigflag, 67108864) + bitand(tab.trigflag, 134217728),
           0, NULL, 67108864, 'DATA', 134217728, 'CACHE', 'ALL')
  FROM
    sys.user$ u, sys.obj$ o, sys.tabpartv$ tp, sys.tab_stats$ ts, sys.tab$ tab
  WHERE
        o.owner# = u.user#
    and o.obj# = tp.obj#
    and tp.bo# = tab.obj#
    and tp.file# > 0
    and tp.block# > 0
    and o.obj# = ts.obj# (+)
    and (o.owner# = userenv('SCHEMAID')
        or tp.bo# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
        or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      )
  UNION ALL
  SELECT /* IOT Partitions */
    u.name, o.name, o.subname, tp.part#, NULL, NULL, 'PARTITION',
    tp.rowcnt, TO_NUMBER(NULL), TO_NUMBER(NULL), TO_NUMBER(NULL),
    tp.chncnt, tp.avgrln, TO_NUMBER(NULL), TO_NUMBER(NULL),
    TO_NUMBER(NULL), TO_NUMBER(NULL), tp.samplesize, tp.analyzetime,
    decode(bitand(tp.flags, 16), 0, 'NO', 'YES'),
    decode(bitand(tp.flags, 8), 0, 'NO', 'YES'),
    decode(bitand(tab.trigflag, 67108864) + bitand(tab.trigflag, 134217728),
           0, NULL, 67108864, 'DATA', 134217728, 'CACHE', 'ALL')
  FROM
    sys.user$ u, sys.obj$ o, sys.tabpartv$ tp, sys.tab$ tab
  WHERE
        o.owner# = u.user#
    and o.obj# = tp.obj#
    and tp.bo# = tab.obj#
    and tp.file# = 0
    and tp.block# = 0
    and (o.owner# = userenv('SCHEMAID')
        or tp.bo# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
        or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      )
  UNION ALL
  SELECT /* COMPOSITE PARTITIONS */
    u.name, o.name, o.subname, tcp.part#, NULL, NULL, 'PARTITION',
    tcp.rowcnt, tcp.blkcnt, tcp.empcnt, tcp.avgspc,
    tcp.chncnt, tcp.avgrln, NULL, NULL, ts.cachedblk, ts.cachehit,
    tcp.samplesize, tcp.analyzetime,
    decode(bitand(tcp.flags, 16), 0, 'NO', 'YES'),
    decode(bitand(tcp.flags, 8), 0, 'NO', 'YES'),
    decode(bitand(tab.trigflag, 67108864) + bitand(tab.trigflag, 134217728),
           0, NULL, 67108864, 'DATA', 134217728, 'CACHE', 'ALL')
  FROM
    sys.user$ u, sys.obj$ o, sys.tabcompartv$ tcp,
    sys.tab_stats$ ts, sys.tab$ tab
  WHERE
        o.owner# = u.user#
    and o.obj# = tcp.obj#
    and tcp.bo# = tab.obj#
    and o.obj# = ts.obj# (+)
    and (o.owner# = userenv('SCHEMAID')
        or tcp.bo# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
        or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      )
  UNION ALL
  SELECT /* SUBPARTITIONS */
    u.name, po.name, po.subname, tcp.part#,  so.subname, tsp.subpart#,
   'SUBPARTITION', tsp.rowcnt,
    tsp.blkcnt, tsp.empcnt, tsp.avgspc,
    tsp.chncnt, tsp.avgrln, NULL, NULL,
    ts.cachedblk, ts.cachehit, tsp.samplesize, tsp.analyzetime,
    decode(bitand(tsp.flags, 16), 0, 'NO', 'YES'),
    decode(bitand(tsp.flags, 8), 0, 'NO', 'YES'),
    decode(bitand(tab.trigflag, 67108864) + bitand(tab.trigflag, 134217728),
           0, NULL, 67108864, 'DATA', 134217728, 'CACHE', 'ALL')
  FROM
    sys.user$ u, sys.obj$ po, sys.obj$ so, sys.tabcompartv$ tcp,
    sys.tabsubpartv$ tsp,  sys.tab_stats$ ts, sys.tab$ tab
  WHERE
        so.obj# = tsp.obj#
    and po.obj# = tcp.obj#
    and tcp.obj# = tsp.pobj#
    and tcp.bo# = tab.obj#
    and u.user# = po.owner#
    and tsp.file# > 0
    and tsp.block# > 0
    and so.obj# = ts.obj# (+)
    and (po.owner# = userenv('SCHEMAID')
         or tcp.bo# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
        or /* user has system privileges */
          exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                 )
       )
  UNION ALL
  SELECT /* FIXED TABLES */
    'SYS', t.kqftanam, NULL, NULL, NULL, NULL, 'FIXED TABLE',
    decode(nvl(fobj.obj#, 0), 0, TO_NUMBER(NULL), st.rowcnt),
    TO_NUMBER(NULL), TO_NUMBER(NULL), TO_NUMBER(NULL), TO_NUMBER(NULL),
    decode(nvl(fobj.obj#, 0), 0, TO_NUMBER(NULL), st.avgrln),
    TO_NUMBER(NULL), TO_NUMBER(NULL), TO_NUMBER(NULL), TO_NUMBER(NULL),
    decode(nvl(fobj.obj#, 0), 0, TO_NUMBER(NULL), st.samplesize),
    decode(nvl(fobj.obj#, 0), 0, TO_DATE(NULL), st.analyzetime),
    decode(nvl(fobj.obj#, 0), 0, NULL,
           decode(nvl(st.obj#, 0), 0, NULL, 'YES')),
    decode(nvl(fobj.obj#, 0), 0, NULL,
           decode(nvl(st.obj#, 0), 0, NULL,
                  decode(bitand(st.flags, 1), 0, 'NO', 'YES'))),
    decode(nvl(fobj.obj#, 0), 0, NULL,
           decode (bitand(fobj.flags, 67108864) +
                     bitand(fobj.flags, 134217728),
                   0, NULL, 67108864, 'DATA', 134217728, 'CACHE', 'ALL'))
    from sys.x$kqfta t, sys.fixed_obj$ fobj, sys.tab_stats$ st
    where
    t.kqftaobj = fobj.obj#(+)
    /*
     * if fobj and st are not in sync (happens when db open read only
     * after upgrade), do not display stats.
     */
    and t.kqftaver = fobj.timestamp (+) - to_date('01-01-1991', 'DD-MM-YYYY')
    and t.kqftaobj = st.obj#(+)
    and (userenv('SCHEMAID') = 0  /* SYS */
         or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-237 /* SELECT ANY DICTIONARY */)
                 )
        );

CREATE OR REPLACE FORCE VIEW "ALL_TAB_STATS_HISTORY"("OWNER","TABLE_NAME","PARTITION_NAME","SUBPARTITION_NAME","STATS_UPDATE_TIME") AS 
select /*+ rule */ u.name, o.name, null, null, h.savtime
  from sys.user$ u, sys.obj$ o, sys.wri$_optstat_tab_history h
  where  h.obj# = o.obj# and o.type# = 2 and o.owner# = u.user#
    and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      )
  union all
  -- partitions
  select u.name, o.name, o.subname, null, h.savtime
  from  sys.user$ u, sys.obj$ o, sys.obj$ ot,
        sys.wri$_optstat_tab_history h
  where h.obj# = o.obj# and o.type# = 19 and o.owner# = u.user#
        and ot.name = o.name and ot.type# = 2 and ot.owner# = u.user#
        and (ot.owner# = userenv('SCHEMAID')
        or ot.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
        or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                )
        )
  union all
  -- sub partitions
  select u.name, osp.name, ocp.subname, osp.subname, h.savtime
  from  sys.user$ u, sys.obj$ osp, obj$ ocp,  sys.obj$ ot,
        sys.tabsubpart$ tsp, sys.wri$_optstat_tab_history h
  where h.obj# = osp.obj# and osp.type# = 34 and osp.obj# = tsp.obj# and
        tsp.pobj# = ocp.obj# and osp.owner# = u.user#
        and ot.name = ocp.name and ot.type# = 2 and ot.owner# = u.user#
        and  (ot.owner# = userenv('SCHEMAID')
        or ot.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
        or /* user has system privileges */
          exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                 )
        )
  union all
  -- fixed tables
  select 'SYS', t.kqftanam, null, null, h.savtime
  from  sys.x$kqfta t, sys.wri$_optstat_tab_history h
  where
  t.kqftaobj = h.obj#
    and (userenv('SCHEMAID') = 0  /* SYS */
         or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-237 /* SELECT ANY DICTIONARY */)
                 )
        );

CREATE OR REPLACE FORCE VIEW "ALL_TAB_SUBPARTITIONS"("TABLE_OWNER","TABLE_NAME","PARTITION_NAME","SUBPARTITION_NAME","HIGH_VALUE","HIGH_VALUE_LENGTH","SUBPARTITION_POSITION","TABLESPACE_NAME","PCT_FREE","PCT_USED","INI_TRANS","MAX_TRANS","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENT","MAX_EXTENT","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","LOGGING","COMPRESSION","NUM_ROWS","BLOCKS","EMPTY_BLOCKS","AVG_SPACE","CHAIN_CNT","AVG_ROW_LEN","SAMPLE_SIZE","LAST_ANALYZED","BUFFER_POOL","GLOBAL_STATS","USER_STATS") AS 
select u.name, po.name, po.subname, so.subname,
       tsp.hiboundval, tsp.hiboundlen, tsp.subpart#,
       ts.name, tsp.pctfree$,
       decode(bitand(ts.flags, 32), 32, to_number(NULL), tsp.pctused$),
       tsp.initrans, tsp.maxtrans, s.iniexts * ts.blocksize,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                               s.extsize * ts.blocksize),
       s.minexts, s.maxexts,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extpct),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
           decode(s.lists, 0, 1, s.lists)),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
           decode(s.groups, 0, 1, s.groups)),
       decode(mod(trunc(tsp.flags / 4), 2), 0, 'YES', 'NO'),
       decode(bitand(s.spare1, 2048), 2048, 'ENABLED', 'DISABLED'),
       tsp.rowcnt, tsp.blkcnt, tsp.empcnt, tsp.avgspc, tsp.chncnt,
       tsp.avgrln, tsp.samplesize, tsp.analyzetime,
       decode(s.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL),
       decode(bitand(tsp.flags, 16), 0, 'NO', 'YES'),
       decode(bitand(tsp.flags, 8), 0, 'NO', 'YES')
from   obj$ po, obj$ so, tabcompartv$ tcp, tabsubpartv$ tsp, ts$ ts,
       sys.seg$ s, user$ u
where  so.obj# = tsp.obj# and po.obj# = tcp.obj# and tcp.obj# = tsp.pobj# and
       ts.ts# = tsp.ts# and u.user# = po.owner# and tsp.file#=s.file# and
       tsp.block#=s.block# and tsp.ts#=s.ts# and
       (po.owner# = userenv('SCHEMAID')
        or tcp.bo# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
        or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_TRIGGERS"("OWNER","TRIGGER_NAME","TRIGGER_TYPE","TRIGGERING_EVENT","TABLE_OWNER","BASE_OBJECT_TYPE","TABLE_NAME","COLUMN_NAME","REFERENCING_NAMES","WHEN_CLAUSE","STATUS","DESCRIPTION","ACTION_TYPE","TRIGGER_BODY") AS 
select triguser.name, trigobj.name,
decode(t.type#, 0, 'BEFORE STATEMENT',
                1, 'BEFORE EACH ROW',
                2, 'AFTER STATEMENT',
                3, 'AFTER EACH ROW',
                4, 'INSTEAD OF',
                   'UNDEFINED'),
decode(t.insert$*100 + t.update$*10 + t.delete$,
                 100, 'INSERT',
                 010, 'UPDATE',
                 001, 'DELETE',
                 110, 'INSERT OR UPDATE',
                 101, 'INSERT OR DELETE',
                 011, 'UPDATE OR DELETE',
                 111, 'INSERT OR UPDATE OR DELETE', 'ERROR'),
tabuser.name,
decode(bitand(t.property, 1), 1, 'VIEW',
                              0, 'TABLE',
                                 'UNDEFINED'),
tabobj.name, NULL,
'REFERENCING NEW AS '||t.refnewname||' OLD AS '||t.refoldname,
t.whenclause,decode(t.enabled, 0, 'DISABLED', 1, 'ENABLED', 'ERROR'),
t.definition,
decode(bitand(t.property, 2), 2, 'CALL',
                                 'PL/SQL     '),
t.action#
from sys.obj$ trigobj, sys.obj$ tabobj, sys.trigger$ t, sys.user$ tabuser,
     sys.user$ triguser
where (trigobj.obj#   = t.obj# and
       tabobj.obj#    = t.baseobject and
       trigobj.owner# = triguser.user# and
       tabobj.owner#  = tabuser.user# and
       bitand(t.property, 63)    < 8  and
       (
        trigobj.owner# = userenv('SCHEMAID') or
        tabobj.owner# = userenv('SCHEMAID') or
        tabobj.obj# in
          (select oa1.obj# from sys.objauth$ oa1 where grantee# in
             (select kzsrorol from x$kzsro)) or
        exists (select null from v$enabledprivs
                where priv_number = -152 /* CREATE ANY TRIGGER */)))
union all
select triguser.name, trigobj.name,
decode(t.type#, 0, 'BEFORE EVENT',
                2, 'AFTER EVENT',
                   'UNDEFINED'),
decode(bitand(t.sys_evts, 1), 1, 'STARTUP ') ||
decode(bitand(t.sys_evts, 2), 2,
       decode(sign(bitand(t.sys_evts, 1)), 1, 'OR SHUTDOWN ',
                                               'SHUTDOWN ')) ||
decode(bitand(t.sys_evts, 4), 4,
       decode(sign(bitand(t.sys_evts, 3)), 1, 'OR ERROR ',
                                              'ERROR ')) ||
decode(bitand(t.sys_evts, 8), 8,
       decode(sign(bitand(t.sys_evts, 7)), 1, 'OR LOGON ',
                                              'LOGON ')) ||
decode(bitand(t.sys_evts, 16), 16,
       decode(sign(bitand(t.sys_evts, 15)), 1, 'OR LOGOFF ',
                                               'LOGOFF ')) ||
decode(bitand(t.sys_evts, 262176), 32,
       decode(sign(bitand(t.sys_evts, 31)), 1, 'OR CREATE ',
                                               'CREATE ')) ||
decode(bitand(t.sys_evts, 262208), 64,
       decode(sign(bitand(t.sys_evts, 63)), 1, 'OR ALTER ',
                                               'ALTER ')) ||
decode(bitand(t.sys_evts, 262272), 128,
       decode(sign(bitand(t.sys_evts, 127)), 1, 'OR DROP ',
                                                'DROP ')) ||
decode (bitand(t.sys_evts, 262400), 256,
        decode(sign(bitand(t.sys_evts, 255)), 1, 'OR ANALYZE ',
                                                 'ANALYZE ')) ||
decode (bitand(t.sys_evts, 262656), 512,
        decode(sign(bitand(t.sys_evts, 511)), 1, 'OR COMMENT ',
                                                 'COMMENT ')) ||
decode (bitand(t.sys_evts, 263168), 1024,
        decode(sign(bitand(t.sys_evts, 1023)), 1, 'OR GRANT ',
                                                  'GRANT ')) ||
decode (bitand(t.sys_evts, 264192), 2048,
        decode(sign(bitand(t.sys_evts, 2047)), 1, 'OR REVOKE ',
                                                  'REVOKE ')) ||
decode (bitand(t.sys_evts, 266240), 4096,
        decode(sign(bitand(t.sys_evts, 4095)), 1, 'OR TRUNCATE ',
                                                  'TRUNCATE ')) ||
decode (bitand(t.sys_evts, 270336), 8192,
        decode(sign(bitand(t.sys_evts, 8191)), 1, 'OR RENAME ',
                                                  'RENAME ')) ||
decode (bitand(t.sys_evts, 278528), 16384,
        decode(sign(bitand(t.sys_evts, 16383)), 1, 'OR ASSOCIATE STATISTICS ',
                                                   'ASSOCIATE STATISTICS ')) ||
decode (bitand(t.sys_evts, 294912), 32768,
        decode(sign(bitand(t.sys_evts, 32767)), 1, 'OR AUDIT ',
                                                   'AUDIT ')) ||
decode (bitand(t.sys_evts, 327680), 65536,
        decode(sign(bitand(t.sys_evts, 65535)), 1,
               'OR DISASSOCIATE STATISTICS ', 'DISASSOCIATE STATISTICS ')) ||
decode (bitand(t.sys_evts, 393216), 131072,
        decode(sign(bitand(t.sys_evts, 131071)), 1, 'OR NOAUDIT ',
                                                    'NOAUDIT ')) ||
decode (bitand(t.sys_evts, 262144), 262144,
        decode(sign(bitand(t.sys_evts, 31)), 1, 'OR DDL ',
                                                   'DDL ')) ||
decode (bitand(t.sys_evts, 8388608), 8388608,
        decode(sign(bitand(t.sys_evts, 8388607)), 1, 'OR SUSPEND ',
                                                     'SUSPEND ')),
'SYS',
'DATABASE        ',
NULL,
NULL,
'REFERENCING NEW AS '||t.refnewname||' OLD AS '||t.refoldname,
t.whenclause,decode(t.enabled, 0, 'DISABLED', 1, 'ENABLED', 'ERROR'),
t.definition,
decode(bitand(t.property, 2), 2, 'CALL',
                                 'PL/SQL     '),
t.action#
from sys.obj$ trigobj, sys.trigger$ t, sys.user$ triguser
where (trigobj.obj#    = t.obj# and
       trigobj.owner#  = triguser.user# and
       bitand(t.property, 63)     >= 8  and  bitand(t.property, 63) < 16 and
       (
        trigobj.owner# = userenv('SCHEMAID') or
        exists (select null from v$enabledprivs
                where priv_number = -152 /* CREATE ANY TRIGGER */)))
union all
select triguser.name, trigobj.name,
decode(t.type#, 0, 'BEFORE EVENT',
                2, 'AFTER EVENT',
                   'UNDEFINED'),
decode(bitand(t.sys_evts, 1), 1, 'STARTUP ') ||
decode(bitand(t.sys_evts, 2), 2,
       decode(sign(bitand(t.sys_evts, 1)), 1, 'OR SHUTDOWN ',
                                               'SHUTDOWN ')) ||
decode(bitand(t.sys_evts, 4), 4,
       decode(sign(bitand(t.sys_evts, 3)), 1, 'OR ERROR ',
                                              'ERROR ')) ||
decode(bitand(t.sys_evts, 8), 8,
       decode(sign(bitand(t.sys_evts, 7)), 1, 'OR LOGON ',
                                              'LOGON ')) ||
decode(bitand(t.sys_evts, 16), 16,
       decode(sign(bitand(t.sys_evts, 15)), 1, 'OR LOGOFF ',
                                               'LOGOFF ')) ||
decode(bitand(t.sys_evts, 262176), 32,
       decode(sign(bitand(t.sys_evts, 31)), 1, 'OR CREATE ',
                                               'CREATE ')) ||
decode(bitand(t.sys_evts, 262208), 64,
       decode(sign(bitand(t.sys_evts, 63)), 1, 'OR ALTER ',
                                               'ALTER ')) ||
decode(bitand(t.sys_evts, 262272), 128,
       decode(sign(bitand(t.sys_evts, 127)), 1, 'OR DROP ',
                                                'DROP ')) ||
decode (bitand(t.sys_evts, 262400), 256,
        decode(sign(bitand(t.sys_evts, 255)), 1, 'OR ANALYZE ',
                                                 'ANALYZE ')) ||
decode (bitand(t.sys_evts, 262656), 512,
        decode(sign(bitand(t.sys_evts, 511)), 1, 'OR COMMENT ',
                                                 'COMMENT ')) ||
decode (bitand(t.sys_evts, 263168), 1024,
        decode(sign(bitand(t.sys_evts, 1023)), 1, 'OR GRANT ',
                                                  'GRANT ')) ||
decode (bitand(t.sys_evts, 264192), 2048,
        decode(sign(bitand(t.sys_evts, 2047)), 1, 'OR REVOKE ',
                                                  'REVOKE ')) ||
decode (bitand(t.sys_evts, 266240), 4096,
        decode(sign(bitand(t.sys_evts, 4095)), 1, 'OR TRUNCATE ',
                                                  'TRUNCATE ')) ||
decode (bitand(t.sys_evts, 270336), 8192,
        decode(sign(bitand(t.sys_evts, 8191)), 1, 'OR RENAME ',
                                                  'RENAME ')) ||
decode (bitand(t.sys_evts, 278528), 16384,
        decode(sign(bitand(t.sys_evts, 16383)), 1, 'OR ASSOCIATE STATISTICS ',
                                                   'ASSOCIATE STATISTICS ')) ||
decode (bitand(t.sys_evts, 294912), 32768,
        decode(sign(bitand(t.sys_evts, 32767)), 1, 'OR AUDIT ',
                                                   'AUDIT ')) ||
decode (bitand(t.sys_evts, 327680), 65536,
        decode(sign(bitand(t.sys_evts, 65535)), 1,
               'OR DISASSOCIATE STATISTICS ', 'DISASSOCIATE STATISTICS ')) ||
decode (bitand(t.sys_evts, 393216), 131072,
        decode(sign(bitand(t.sys_evts, 131071)), 1, 'OR NOAUDIT ',
                                                    'NOAUDIT ')) ||
decode (bitand(t.sys_evts, 262144), 262144,
        decode(sign(bitand(t.sys_evts, 31)), 1, 'OR DDL ',
                                                   'DDL ')) ||
decode (bitand(t.sys_evts, 8388608), 8388608,
        decode(sign(bitand(t.sys_evts, 8388607)), 1, 'OR SUSPEND ',
                                                     'SUSPEND ')),
tabuser.name,
'SCHEMA',
NULL,
NULL,
'REFERENCING NEW AS '||t.refnewname||' OLD AS '||t.refoldname,
t.whenclause,decode(t.enabled, 0, 'DISABLED', 1, 'ENABLED', 'ERROR'),
t.definition,
decode(bitand(t.property, 2), 2, 'CALL',
                                 'PL/SQL     '),
t.action#
from sys.obj$ trigobj, sys.trigger$ t, sys.user$ tabuser, sys.user$ triguser
where (trigobj.obj#    = t.obj# and
       trigobj.owner#  = triguser.user# and
       tabuser.user#   = t.baseobject and
       bitand(t.property, 63)     >= 16 and bitand(t.property, 63) < 32 and
       (
         trigobj.owner# = userenv('SCHEMAID') or
        tabuser.user#  = userenv('SCHEMAID') or
        t.baseobject in
          (select oa2.obj# from sys.objauth$ oa2 where grantee# in
             (select kzsrorol from x$kzsro)) or
        exists (select null from v$enabledprivs
                where priv_number = -152 /* CREATE ANY TRIGGER */)))
union all
select triguser.name, trigobj.name,
decode(t.type#, 0, 'BEFORE STATEMENT',
               1, 'BEFORE EACH ROW',
               2, 'AFTER STATEMENT',
               3, 'AFTER EACH ROW',
               4, 'INSTEAD OF',
               'UNDEFINED'),
decode(t.insert$*100 + t.update$*10 + t.delete$,
                 100, 'INSERT',
                 010, 'UPDATE',
                 001, 'DELETE',
                 110, 'INSERT OR UPDATE',
                 101, 'INSERT OR DELETE',
                 011, 'UPDATE OR DELETE',
                 111, 'INSERT OR UPDATE OR DELETE', 'ERROR'),
tabuser.name,
decode(bitand(t.property, 1), 1, 'VIEW',
                              0, 'TABLE',
                                 'UNDEFINED'),
tabobj.name, ntcol.name,
'REFERENCING NEW AS '||t.refnewname||' OLD AS '||t.refoldname ||
  ' PARENT AS ' || t.refprtname,
t.whenclause,decode(t.enabled, 0, 'DISABLED', 1, 'ENABLED', 'ERROR'),
t.definition,
decode(bitand(t.property, 2), 2, 'CALL',
                                 'PL/SQL     '),
t.action#
from sys.obj$ trigobj, sys.obj$ tabobj, sys.trigger$ t, sys.user$ tabuser,
     sys.user$ triguser, sys.viewtrcol$ ntcol
where (trigobj.obj#   = t.obj# and
       tabobj.obj#    = t.baseobject and
       trigobj.owner# = triguser.user# and
       tabobj.owner#  = tabuser.user# and
       bitand(t.property, 63)    >=  32  and
       t.nttrigcol = ntcol.intcol# and
       t.nttrigatt = ntcol.attribute# and
       t.baseobject = ntcol.obj# and
       (
        trigobj.owner# = userenv('SCHEMAID') or
        tabobj.owner# = userenv('SCHEMAID') or
        tabobj.obj# in
          (select oa3.obj# from sys.objauth$ oa3 where grantee# in
             (select kzsrorol from x$kzsro)) or
        exists (select null from v$enabledprivs
                where priv_number = -152 /* CREATE ANY TRIGGER */)));

CREATE OR REPLACE FORCE VIEW "ALL_TRIGGER_COLS"("TRIGGER_OWNER","TRIGGER_NAME","TABLE_OWNER","TABLE_NAME","COLUMN_NAME","COLUMN_LIST","COLUMN_USAGE") AS 
select /*+ ORDERED NOCOST */ u.name, o.name, u2.name, o2.name, c.name,
   max(decode(tc.type#,0,'YES','NO')) COLUMN_LIST,
   decode(sum(decode(tc.type#, 5,  1, -- one occurrence of new in
                              6,  2, -- one occurrence of old in
                              9,  4, -- one occurrence of new out
                             10,  8, -- one occurrence of old out (impossible)
                             13,  5, -- one occurrence of new in out
                             14, 10, -- one occurrence of old in out (imp.)
                             20, 16, -- one occurrence of parent in
                             24, 32, -- one occurrence of parent out (imp)
                             28, 64, -- one occurrence of parent in out (imp)
                              null)
                ), -- result in the following combinations across occurrences
           1, 'NEW IN',
           2, 'OLD IN',
           3, 'NEW IN OLD IN',
           4, 'NEW OUT',
           5, 'NEW IN OUT',
           6, 'NEW OUT OLD IN',
           7, 'NEW IN OUT OLD IN',
          16, 'PARENT IN',
          'NONE')
from sys.trigger$ t, sys.obj$ o, sys.user$ u, sys.user$ u2,
     sys.col$ c, sys.obj$ o2, sys.triggercol$ tc
where t.obj# = tc.obj#                -- find corresponding trigger definition
  and o.obj# = t.obj#                --    and corresponding trigger name
  and c.obj# = t.baseobject         -- and corresponding row in COL$ of
  and c.intcol# = tc.intcol#        --    the referenced column
  and bitand(c.property,32768) != 32768   -- not unused columns
  and o2.obj# = t.baseobject        -- and name of the table containing the trigger
  and u2.user# = o2.owner#        -- and name of the user who owns the table
  and u.user# = o.owner#        -- and name of user who owns the trigger
  and bitand(c.property,1) <> 1  -- and the col is not an ADT column
  and (bitand(t.property,32) <> 32 -- and it is not a nested table col
       or
      bitand(tc.type#,16) = 16) -- or it is a PARENT type column
  and
  ( o.owner# = userenv('SCHEMAID') or o2.owner# = userenv('SCHEMAID')
    or
    exists    -- an enabled role (or current user) with CREATE ANY TRIGGER priv
     ( select null from sys.sysauth$ sa    -- does
       where privilege# = -152             -- CREATE ANY TRIGGER privilege exist
       and (grantee# in                    -- for current user or public
            (select kzsrorol from x$kzsro) -- currently enabled role
           )
      )
   )
group by u.name, o.name, u2.name, o2.name,c.name
union all
select /*+ ORDERED NOCOST */ u.name, o.name, u2.name, o2.name,ac.name,
   max(decode(tc.type#,0,'YES','NO')) COLUMN_LIST,
   decode(sum(decode(tc.type#, 5,  1, -- one occurrence of new in
                              6,  2, -- one occurrence of old in
                              9,  4, -- one occurrence of new out
                             10,  8, -- one occurrence of old out (impossible)
                             13,  5, -- one occurrence of new in out
                             14, 10, -- one occurrence of old in out (imp.)
                             20, 16, -- one occurrence of parent in
                             24, 32, -- one occurrence of parent out (imp)
                             28, 64, -- one occurrence of parent in out (imp)
                              null)
                ), -- result in the following combinations across occurrences
           1, 'NEW IN',
           2, 'OLD IN',
           3, 'NEW IN OLD IN',
           4, 'NEW OUT',
           5, 'NEW IN OUT',
           6, 'NEW OUT OLD IN',
           7, 'NEW IN OUT OLD IN',
          16, 'PARENT IN',
          'NONE')
from sys.trigger$ t, sys.obj$ o, sys.user$ u, sys.user$ u2,
     sys.col$ c, sys.obj$ o2, sys.triggercol$ tc, sys.attrcol$ ac
where t.obj# = tc.obj#                -- find corresponding trigger definition
  and o.obj# = t.obj#                --    and corresponding trigger name
  and c.obj# = t.baseobject         -- and corresponding row in COL$ of
  and c.intcol# = tc.intcol#        --    the referenced column
  and bitand(c.property,32768) != 32768   -- not unused columns
  and o2.obj# = t.baseobject        -- and name of the table containing the trigger
  and u2.user# = o2.owner#        -- and name of the user who owns the table
  and u.user# = o.owner#        -- and name of user who owns the trigger
  and bitand(c.property,1) = 1  -- and it is an ADT attribute
  and ac.intcol# = c.intcol#    -- and the attribute name
  and (bitand(t.property,32) <> 32 -- and it is not a nested table col
       or
      bitand(tc.type#,16) = 16) -- or it is a PARENT type column
  and
  ( o.owner# = userenv('SCHEMAID') or o2.owner# = userenv('SCHEMAID')
    or
    exists    -- an enabled role (or current user) with CREATE ANY TRIGGER priv
     ( select null from sys.sysauth$ sa    -- does
       where privilege# = -152             -- CREATE ANY TRIGGER privilege exist
       and (grantee# in                    -- for current user or public
            (select kzsrorol from x$kzsro) -- currently enabled role
           )
      )
   )
group by u.name, o.name, u2.name, o2.name,ac.name
union all
select /*+ ORDERED NOCOST */ u.name, o.name, u2.name, o2.name,attr.name,
   max(decode(tc.type#,0,'YES','NO')) COLUMN_LIST,
   decode(sum(decode(tc.type#, 5,  1, -- one occurrence of new in
                              6,  2, -- one occurrence of old in
                              9,  4, -- one occurrence of new out
                             10,  8, -- one occurrence of old out (impossible)
                             13,  5, -- one occurrence of new in out
                             14, 10, -- one occurrence of old in out (imp.)
                              null)
                ), -- result in the following combinations across occurrences
           1, 'NEW IN',
           2, 'OLD IN',
           3, 'NEW IN OLD IN',
           4, 'NEW OUT',
           5, 'NEW IN OUT',
           6, 'NEW OUT OLD IN',
           7, 'NEW IN OUT OLD IN',
          'NONE')
from sys.trigger$ t, sys.obj$ o, sys.user$ u, sys.user$ u2,
     sys.obj$ o2, sys.triggercol$ tc,
     sys.collection$ coll, sys.coltype$ ctyp, sys.attribute$ attr
where t.obj# = tc.obj#                -- find corresponding trigger definition
  and o.obj# = t.obj#                --    and corresponding trigger name
  and o2.obj# = t.baseobject        -- and name of the table containing the trigger
  and u2.user# = o2.owner#        -- and name of the user who owns the table
  and u.user# = o.owner#        -- and name of user who owns the trigger
  and bitand(t.property,32) = 32 -- and it is a nested table col
  and bitand(tc.type#,16) <> 16  -- and it is not a PARENT type column
  and ctyp.obj# = t.baseobject   -- find corresponding column type definition
  and ctyp.intcol# = t.nttrigcol -- and get the column type for the nested table
  and ctyp.toid = coll.toid      -- get the collection toid
  and ctyp.version# = coll.version# -- get the collection version
  and attr.attribute# = tc.intcol#  -- get the attribute number
  and attr.toid  = coll.elem_toid  -- get the attribute toid
  and attr.version# = coll.version#  -- get the attribute version
  and
  ( o.owner# = userenv('SCHEMAID') or o2.owner# = userenv('SCHEMAID')
    or
    exists    -- an enabled role (or current user) with CREATE ANY TRIGGER priv
     ( select null from sys.sysauth$ sa    -- does
       where privilege# = -152             -- CREATE ANY TRIGGER privilege exist
       and (grantee# in                    -- for current user or public
            (select kzsrorol from x$kzsro) -- currently enabled role
           )
      )
   )
group by u.name, o.name, u2.name, o2.name,attr.name
union all
select /*+ ORDERED NOCOST */ u.name, o.name, u2.name, o2.name,'COLUMN_VALUE',
   max(decode(tc.type#,0,'YES','NO')) COLUMN_LIST,
   decode(sum(decode(tc.type#, 5,  1, -- one occurrence of new in
                              6,  2, -- one occurrence of old in
                              9,  4, -- one occurrence of new out
                             10,  8, -- one occurrence of old out (impossible)
                             13,  5, -- one occurrence of new in out
                             14, 10, -- one occurrence of old in out (imp.)
                              null)
                ), -- result in the following combinations across occurrences
           1, 'NEW IN',
           2, 'OLD IN',
           3, 'NEW IN OLD IN',
           4, 'NEW OUT',
           5, 'NEW IN OUT',
           6, 'NEW OUT OLD IN',
           7, 'NEW IN OUT OLD IN',
          'NONE')
from sys.trigger$ t, sys.obj$ o, sys.user$ u, sys.user$ u2,
     sys.obj$ o2, sys.triggercol$ tc
where t.obj# = tc.obj#                -- find corresponding trigger definition
  and o.obj# = t.obj#                --    and corresponding trigger name
  and o2.obj# = t.baseobject        -- and name of the table containing the trigger
  and u2.user# = o2.owner#        -- and name of the user who owns the table
  and u.user# = o.owner#        -- and name of user who owns the trigger
  and bitand(t.property,32) = 32 -- and it is not a nested table col
  and bitand(tc.type#,16) <> 16  -- and it is not a PARENT type column
  and tc.intcol# = 0
  and
  ( o.owner# = userenv('SCHEMAID') or o2.owner# = userenv('SCHEMAID')
    or
    exists    -- an enabled role (or current user) with CREATE ANY TRIGGER priv
     ( select null from sys.sysauth$ sa    -- does
       where privilege# = -152             -- CREATE ANY TRIGGER privilege exist
       and (grantee# in                    -- for current user or public
            (select kzsrorol from x$kzsro) -- currently enabled role
           )
      )
   )
group by u.name, o.name, u2.name, o2.name,'COLUMN_VALUE';

CREATE OR REPLACE FORCE VIEW "ALL_TYPES"("OWNER","TYPE_NAME","TYPE_OID","TYPECODE","ATTRIBUTES","METHODS","PREDEFINED","INCOMPLETE","FINAL","INSTANTIABLE","SUPERTYPE_OWNER","SUPERTYPE_NAME","LOCAL_ATTRIBUTES","LOCAL_METHODS","TYPEID") AS 
select decode(bitand(t.properties, 64), 64, null, u.name), o.name, t.toid,
       decode(t.typecode, 108, 'OBJECT',
                          122, 'COLLECTION',
                          o.name),
       t.attributes, t.methods,
       decode(bitand(t.properties, 16), 16, 'YES', 0, 'NO'),
       decode(bitand(t.properties, 256), 256, 'YES', 0, 'NO'),
       decode(bitand(t.properties, 8), 8, 'NO', 'YES'),
       decode(bitand(t.properties, 65536), 65536, 'NO', 'YES'),
       su.name, so.name, t.local_attrs, t.local_methods, t.typeid
from sys.user$ u, sys.type$ t, sys.obj$ o, sys.obj$ so, sys.user$ su
where o.owner# = u.user#
  and o.oid$ = t.tvoid
  and o.subname IS NULL -- only the most recent version
  and o.type# <> 10 -- must not be invalid
  and bitand(t.properties, 2048) = 0 -- not system-generated
  and t.supertoid = so.oid$ (+) and so.owner# = su.user# (+)
  and (o.owner# = userenv('SCHEMAID')
       or
       o.obj# in (select oa.obj#
                  from sys.objauth$ oa
                  where grantee# in (select kzsrorol
                                     from x$kzsro))
       or /* user has system privileges */
       exists (select null from v$enabledprivs
               where priv_number in (-184 /* EXECUTE ANY TYPE */,
                                     -181 /* CREATE ANY TYPE */)));

CREATE OR REPLACE FORCE VIEW "ALL_TYPE_ATTRS"("OWNER","TYPE_NAME","ATTR_NAME","ATTR_TYPE_MOD","ATTR_TYPE_OWNER","ATTR_TYPE_NAME","LENGTH","PRECISION","SCALE","CHARACTER_SET_NAME","ATTR_NO","INHERITED") AS 
select u.name , o.name, a.name,
       decode(bitand(a.properties, 32768), 32768, 'REF',
              decode(bitand(a.properties, 16384), 16384, 'POINTER')),
       nvl2(a.synobj#, (select u.name from user$ u, obj$ o
            where o.owner#=u.user# and o.obj#=a.synobj#),
            decode(bitand(at.properties, 64), 64, null, au.name)),
       nvl2(a.synobj#, (select o.name from obj$ o where o.obj#=a.synobj#),
            decode(at.typecode,
                   52, decode(a.charsetform, 2, 'NVARCHAR2', ao.name),
                   53, decode(a.charsetform, 2, 'NCHAR', ao.name),
                   54, decode(a.charsetform, 2, 'NCHAR VARYING', ao.name),
                   61, decode(a.charsetform, 2, 'NCLOB', ao.name),
                   ao.name)),
       a.length, a.precision#, a.scale,
       decode(a.charsetform, 1, 'CHAR_CS',
                             2, 'NCHAR_CS',
                             3, NLS_CHARSET_NAME(a.charsetid),
                             4, 'ARG:'||a.charsetid),
       a.attribute#, decode(bitand(nvl(a.xflags,0), 1), 1, 'YES', 'NO')
from sys.user$ u, sys.obj$ o, sys.type$ t, sys.attribute$ a,
     sys.obj$ ao, sys.user$ au, sys.type$ at
where bitand(t.properties, 64) != 64 -- u.name
  and o.owner# = u.user#
  and o.oid$ = t.toid
  and o.subname IS NULL -- get the latest version only
  and o.type# <> 10 -- must not be invalid
  and bitand(t.properties, 2048) = 0 -- not system-generated
  and t.toid = a.toid
  and t.version# = a.version#
  and a.attr_toid = ao.oid$
  and ao.owner# = au.user#
  and a.attr_toid = at.tvoid
  and a.attr_version# = at.version#
  and (o.owner# = userenv('SCHEMAID')
       or
       o.obj# in (select oa.obj#
                  from sys.objauth$ oa
                  where grantee# in (select kzsrorol
                                     from x$kzsro))
       or /* user has system privileges */
       exists (select null from v$enabledprivs
               where priv_number in (-184 /* EXECUTE ANY TYPE */,
                                     -181 /* CREATE ANY TYPE */)))
UNION ALL
select null, o.name, a.name,
       decode(bitand(a.properties, 32768), 32768, 'REF',
              decode(bitand(a.properties, 16384), 16384, 'POINTER')),
       nvl2(a.synobj#, (select u.name from user$ u, obj$ o
            where o.owner#=u.user# and o.obj#=a.synobj#),
            decode(bitand(at.properties, 64), 64, null, au.name)),
       nvl2(a.synobj#, (select o.name from obj$ o where o.obj#=a.synobj#),
            decode(at.typecode,
                   52, decode(a.charsetform, 2, 'NVARCHAR2', ao.name),
                   53, decode(a.charsetform, 2, 'NCHAR', ao.name),
                   54, decode(a.charsetform, 2, 'NCHAR VARYING', ao.name),
                   61, decode(a.charsetform, 2, 'NCLOB', ao.name),
                   ao.name)),
       a.length, a.precision#, a.scale,
       decode(a.charsetform, 1, 'CHAR_CS',
                             2, 'NCHAR_CS',
                             3, NLS_CHARSET_NAME(a.charsetid),
                             4, 'ARG:'||a.charsetid),
       a.attribute#, decode(bitand(nvl(a.xflags,0), 1), 1, 'YES', 'NO')
from sys.user$ u, sys.obj$ o, sys.type$ t, sys.attribute$ a,
     sys.obj$ ao, sys.user$ au, sys.type$ at
where bitand(t.properties, 64) = 64  -- u.name is null
  and o.oid$ = t.toid
  and o.subname IS NULL -- get the latest version only
  and o.type# <> 10 -- must not be invalid
  and bitand(t.properties, 2048) = 0 -- not system-generated
  and t.toid = a.toid
  and t.version# = a.version#
  and a.attr_toid = ao.oid$
  and ao.owner# = au.user#
  and a.attr_toid = at.tvoid
  and a.attr_version# = at.version#
  and (o.owner# = userenv('SCHEMAID')
       or
       o.obj# in (select oa.obj#
                  from sys.objauth$ oa
                  where grantee# in (select kzsrorol
                                     from x$kzsro))
       or /* user has system privileges */
       exists (select null from v$enabledprivs
               where priv_number in (-184 /* EXECUTE ANY TYPE */,
                                     -181 /* CREATE ANY TYPE */)));

CREATE OR REPLACE FORCE VIEW "ALL_TYPE_METHODS"("OWNER","TYPE_NAME","METHOD_NAME","METHOD_NO","METHOD_TYPE","PARAMETERS","RESULTS","FINAL","INSTANTIABLE","OVERRIDING","INHERITED") AS 
select u.name, o.name, m.name, m.method#,
       decode(bitand(m.properties, 512), 512, 'MAP',
              decode(bitand(m.properties, 2048), 2048, 'ORDER', 'PUBLIC')),
       m.parameters#, m.results,
       decode(bitand(m.properties, 8), 8, 'NO', 'YES'),
       decode(bitand(m.properties, 65536), 65536, 'NO', 'YES'),
       decode(bitand(m.properties, 131072), 131072, 'YES', 'NO'),
       decode(bitand(nvl(m.xflags,0), 1), 1, 'YES', 'NO')
from sys.user$ u, sys.obj$ o, sys.method$ m
where o.owner# = u.user#
  and o.type# <> 10 -- must not be invalid
  and o.oid$ = m.toid
  and o.subname IS NULL -- get the latest version only
  and (o.owner# = userenv('SCHEMAID')
       or
       o.obj# in (select oa.obj#
                  from sys.objauth$ oa
                  where grantee# in (select kzsrorol
                                     from x$kzsro))
       or /* user has system privileges */
       exists (select null from v$enabledprivs
               where priv_number in (-184 /* EXECUTE ANY TYPE */,
                                     -181 /* CREATE ANY TYPE */)));

CREATE OR REPLACE FORCE VIEW "ALL_TYPE_VERSIONS"("OWNER","TYPE_NAME","VERSION#","TYPECODE","STATUS","LINE","TEXT","HASHCODE") AS 
select u.name, o.name, t.version#,
       decode(t.typecode, 108, 'OBJECT',
                          122, 'COLLECTION',
                          o.name),
       decode(o.status, 0, 'N/A', 1, 'VALID', 'INVALID'),
       s.line, s.source,
       t.hashcode
from sys.obj$ o, sys.source$ s, sys.type$ t, user$ u
  where o.obj# = s.obj# and o.oid$ = t.tvoid and o.type# = 13
  and o.owner# = u.user#
  and (o.owner# = userenv('SCHEMAID')
       or
       o.obj# in (select oa.obj#
                  from sys.objauth$ oa
                  where grantee# in (select kzsrorol
                                     from x$kzsro))
       or /* user has system privileges */
       exists (select null from v$enabledprivs
               where priv_number in (-184 /* EXECUTE ANY TYPE */,
                                     -181 /* CREATE ANY TYPE */)));

CREATE OR REPLACE FORCE VIEW "ALL_UNUSED_COL_TABS"("OWNER","TABLE_NAME","COUNT") AS 
select u.name, o.name, count(*)
from sys.user$ u, sys.obj$ o, sys.col$ c
where o.owner# = u.user#
  and o.obj# = c.obj#
  and bitand(c.property,32768) = 32768              -- is unused column
  and bitand(c.property, 1) != 1                    -- not ADT attribute col
  and bitand(c.property, 1024) != 1024              -- not NTAB's setid col
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                 )
      )
  group by u.name, o.name;

CREATE OR REPLACE FORCE VIEW "ALL_UPDATABLE_COLUMNS"("OWNER","TABLE_NAME","COLUMN_NAME","UPDATABLE","INSERTABLE","DELETABLE") AS 
select u.name, o.name, c.name,
       decode(bitand(c.fixedstorage,2),
              2, decode(bitand(v.flags,8192), 8192, 'YES', 'NO'),
              decode(bitand(c.property,4096),4096,'NO','YES')),
       decode(bitand(c.fixedstorage,2),
              2, decode(bitand(v.flags,4096), 4096, 'YES', 'NO'),
              decode(bitand(c.property,2048),2048,'NO','YES')),
       decode(bitand(c.fixedstorage,2),
              2, decode(bitand(v.flags,16384), 16384, 'YES', 'NO'),
              decode(bitand(c.property,8192),8192,'NO','YES'))
from sys.obj$ o, sys.user$ u, sys.col$ c, sys.view$ v
where o.owner# = u.user#
  and o.obj#  = c.obj#
  and c.obj#  = v.obj#(+)
  and bitand(c.property, 32) = 0 /* not hidden column */
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_USERS"("USERNAME","USER_ID","CREATED") AS 
select u.name, u.user#, u.ctime
from sys.user$ u, sys.ts$ dts, sys.ts$ tts
where u.datats# = dts.ts#
  and u.tempts# = tts.ts#
  and u.type# = 1;

CREATE OR REPLACE FORCE VIEW "ALL_USTATS"("OBJECT_OWNER","OBJECT_NAME","PARTITION_NAME","OBJECT_TYPE","ASSOCIATION","COLUMN_NAME","STATSTYPE_SCHEMA","STATSTYPE_NAME","STATISTICS") AS 
select u.name, o.name, o.subname,
         decode (bitand(s.property, 3), 1, 'INDEX', 2, 'COLUMN'),
         decode (bitand(s.property, 12), 8, 'DIRECT', 4, 'IMPLICIT'),
         c.name, u1.name, o1.name, s.statistics
  from   sys.user$ u, sys.obj$ o, sys.col$ c, sys.ustats$ s,
         sys.user$ u1, sys.obj$ o1
  where  bitand(s.property, 3)=2 and s.obj#=o.obj# and o.owner#=u.user#
  and    s.intcol#=c.intcol# and s.statstype#=o1.obj#
  and    o1.owner#=u1.user# and c.obj#=s.obj#
  and    ( o.owner#=userenv('SCHEMAID')
           or
        o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or
       ( o.type# in (2)  /* table */
         and
         exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */,
                                        -42 /* ALTER ANY TABLE */)
                 )
       )
    )
union all    -- partition case
  select u.name, o.name, o.subname,
         decode (bitand(s.property, 3), 1, 'INDEX', 2, 'COLUMN'),
         decode (bitand(s.property, 12), 8, 'DIRECT', 4, 'IMPLICIT'),
         c.name, u1.name, o1.name, s.statistics
  from   sys.user$ u, sys.user$ u1, sys.obj$ o, sys.obj$ o1, sys.col$ c,
         sys.ustats$ s, sys.tabpart$ t, sys.obj$ o2
  where  bitand(s.property, 3)=2 and s.obj# = o.obj#
  and    s.obj# = t.obj# and t.bo# = o2.obj# and o2.owner# = u.user#
  and    s.intcol# = c.intcol# and s.statstype#=o1.obj# and o1.owner#=u1.user#
  and    t.bo#=c.obj#
  and    ( o.owner#=userenv('SCHEMAID')
           or
        o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or
       ( o.type# in (2)  /* table */
         and
         exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */,
                                        -42 /* ALTER ANY TABLE */)
                 )
       )
    )
union all
  select u.name, o.name, o.subname,
         decode (bitand(s.property, 3), 1, 'INDEX', 2, 'COLUMN'),
         decode (bitand(s.property, 12), 8, 'DIRECT', 4, 'IMPLICIT'),
          NULL, u1.name, o1.name, s.statistics
  from   sys.user$ u, sys.obj$ o, sys.ustats$ s,
         sys.user$ u1, sys.obj$ o1
  where  bitand(s.property, 3)=1 and s.obj#=o.obj# and o.owner#=u.user#
  and    s.statstype#=o1.obj# and o1.owner#=u1.user# and o.type#=1
  and    ( o.owner#=userenv('SCHEMAID')
           or
        o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or
       ( o.type# in (1)  /* index */
         and
         exists (select null from v$enabledprivs
                  where priv_number in (-71 /* CREATE ANY INDEX */,
                                        -72 /* ALTER ANY INDEX */,
                                        -73 /* DROP ANY INDEX */)
                 )
       )
    )
union all -- index partition
  select u.name, o.name, o.subname,
         decode (bitand(s.property, 3), 1, 'INDEX', 2, 'COLUMN'),
         decode (bitand(s.property, 12), 8, 'DIRECT', 4, 'IMPLICIT'),
         NULL, u1.name, o1.name, s.statistics
  from   sys.user$ u, sys.user$ u1, sys.obj$ o, sys.obj$ o1,
         sys.ustats$ s, sys.indpart$ i, sys.obj$ o2
  where  bitand(s.property, 3)=1 and s.obj# = o.obj#
  and    s.obj# = i.obj# and i.bo# = o2.obj# and o2.owner# = u.user#
  and    s.statstype#=o1.obj# and o1.owner#=u1.user#
  and    ( o.owner#=userenv('SCHEMAID')
           or
        o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or
       ( o.type# in (1)  /* index */
         and
         exists (select null from v$enabledprivs
                  where priv_number in (-71 /* CREATE ANY INDEX */,
                                        -72 /* ALTER ANY INDEX */,
                                        -73 /* DROP ANY INDEX */)
                 )
       )
    );

CREATE OR REPLACE FORCE VIEW "ALL_VARRAYS"("OWNER","PARENT_TABLE_NAME","PARENT_TABLE_COLUMN","TYPE_OWNER","TYPE_NAME","LOB_NAME","STORAGE_SPEC","RETURN_TYPE","ELEMENT_SUBSTITUTABLE") AS 
select u.name, op.name, ac.name,
       nvl2(ct.synobj#, (select u.name from user$ u, obj$ o
            where o.owner#=u.user# and o.obj#=ct.synobj#), ut.name),
       nvl2(ct.synobj#, (select o.name from obj$ o
            where o.obj#=ct.synobj#), ot.name),
       NULL,
       lpad(decode(bitand(ct.flags, 64), 64, 'USER_SPECIFIED', 'DEFAULT'), 30),
       lpad(decode(bitand(ct.flags, 32), 32, 'LOCATOR', 'VALUE'), 20),
       lpad((case when bitand(ct.flags, 5120)=0 and bitand(t.properties, 8)= 8
       then 'Y' else 'N' end), 25)
from sys.obj$ op, sys.obj$ ot, sys.col$ c, sys.coltype$ ct, sys.user$ u,
  sys.user$ ut, sys.attrcol$ ac, sys.type$ t, sys.collection$ cl
where op.owner# = u.user#
  and c.obj# = op.obj#
  and c.obj# = ac.obj#
  and c.intcol# = ac.intcol#
  and op.obj# = ct.obj#
  and ct.toid = ot.oid$
  and ct.intcol#=c.intcol#
  and ot.owner# = ut.user#
  and ct.toid=cl.toid
  and cl.elem_toid=t.tvoid
  and bitand(ct.flags,8)=8
  and bitand(c.property, 128) != 128
  and bitand(c.property,32768) != 32768           /* not unused column */
  and (op.owner# = userenv('SCHEMAID')
       or op.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      )
union all
select u.name, op.name, ac.name,
       nvl2(ct.synobj#, (select u.name from user$ u, obj$ o
            where o.owner#=u.user# and o.obj#=ct.synobj#), ut.name),
       nvl2(ct.synobj#, (select o.name from obj$ o
            where o.obj#=ct.synobj#), ot.name),
       o.name,
       lpad(decode(bitand(ct.flags, 64), 64, 'USER_SPECIFIED', 'DEFAULT'), 30),
       lpad(decode(bitand(ct.flags, 32), 32, 'LOCATOR', 'VALUE'), 20),
       lpad((case when bitand(ct.flags, 5120)=0 and bitand(t.properties, 8)= 8
       then 'Y' else 'N' end), 25)
from sys.lob$ l, sys.obj$ o, sys.obj$ op, sys.obj$ ot, sys.col$ c,
  sys.coltype$ ct, sys.user$ u, sys.user$ ut, sys.attrcol$ ac, sys.type$ t,
  sys.collection$ cl
where o.owner# = u.user#
  and l.obj# = op.obj#
  and l.lobj# = o.obj#
  and c.obj# = op.obj#
  and l.intcol# = c.intcol#
  and c.obj# = ac.obj#
  and c.intcol# = ac.intcol#
  and op.obj# = ct.obj#
  and ct.toid = ot.oid$
  and ct.intcol#=l.intcol#
  and ot.owner# = ut.user#
  and ct.toid=cl.toid
  and cl.elem_toid=t.tvoid
  and bitand(ct.flags,8)=8
  and bitand(c.property, 128) = 128
  and bitand(c.property,32768) != 32768           /* not unused column */
  and (op.owner# = userenv('SCHEMAID')
       or op.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      )
union all
select u.name, op.name, c.name,
       nvl2(ct.synobj#, (select u.name from user$ u, obj$ o
            where o.owner#=u.user# and o.obj#=ct.synobj#), ut.name),
       nvl2(ct.synobj#, (select o.name from obj$ o
            where o.obj#=ct.synobj#), ot.name),
       NULL,
       lpad(decode(bitand(ct.flags, 64), 64, 'USER_SPECIFIED', 'DEFAULT'), 30),
       lpad(decode(bitand(ct.flags, 32), 32, 'LOCATOR', 'VALUE'), 20),
       lpad((case when bitand(ct.flags, 5120)=0 and bitand(t.properties, 8)= 8
       then 'Y' else 'N' end), 25)
from sys.obj$ op, sys.obj$ ot, sys.col$ c, sys.coltype$ ct, sys.user$ u,
  sys.user$ ut, sys.type$ t, sys.collection$ cl
where op.owner# = u.user#
  and c.obj# = op.obj#
  and bitand(c.property,1)=0
  and op.obj# = ct.obj#
  and ct.toid = ot.oid$
  and ct.intcol#=c.intcol#
  and ot.owner# = ut.user#
  and ct.toid=cl.toid
  and cl.elem_toid=t.tvoid
  and bitand(ct.flags,8)=8
  and bitand(c.property, 128) != 128
  and bitand(c.property,32768) != 32768           /* not unused column */
  and (op.owner# = userenv('SCHEMAID')
       or op.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      )
union all
select u.name, op.name, c.name,
       nvl2(ct.synobj#, (select u.name from user$ u, obj$ o
            where o.owner#=u.user# and o.obj#=ct.synobj#), ut.name),
       nvl2(ct.synobj#, (select o.name from obj$ o
            where o.obj#=ct.synobj#), ot.name),
       o.name,
       lpad(decode(bitand(ct.flags, 64), 64, 'USER_SPECIFIED', 'DEFAULT'), 30),
       lpad(decode(bitand(ct.flags, 32), 32, 'LOCATOR', 'VALUE'), 20),
       lpad((case when bitand(ct.flags, 5120)=0 and bitand(t.properties, 8)= 8
       then 'Y' else 'N' end), 25)
from sys.lob$ l, sys.obj$ o, sys.obj$ op, sys.obj$ ot, sys.col$ c,
  sys.coltype$ ct, sys.user$ u, sys.user$ ut, sys.type$ t, sys.collection$ cl
where o.owner# = u.user#
  and l.obj# = op.obj#
  and l.lobj# = o.obj#
  and c.obj# = op.obj#
  and l.intcol# = c.intcol#
  and bitand(c.property,1)=0
  and op.obj# = ct.obj#
  and ct.toid = ot.oid$
  and ct.intcol#=l.intcol#
  and ot.owner# = ut.user#
  and ct.toid=cl.toid
  and cl.elem_toid=t.tvoid
  and bitand(ct.flags,8)=8
  and bitand(c.property, 128) = 128
  and bitand(c.property,32768) != 32768           /* not unused column */
  and (op.owner# = userenv('SCHEMAID')
       or op.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_VIEWS"("OWNER","VIEW_NAME","TEXT_LENGTH","TEXT","TYPE_TEXT_LENGTH","TYPE_TEXT","OID_TEXT_LENGTH","OID_TEXT","VIEW_TYPE_OWNER","VIEW_TYPE","SUPERVIEW_NAME") AS 
select u.name, o.name, v.textlength, v.text, t.typetextlength, t.typetext,
       t.oidtextlength, t.oidtext, t.typeowner, t.typename,
       decode(bitand(v.property, 134217728), 134217728,
              (select sv.name from superobj$ h, obj$ sv
              where h.subobj# = o.obj# and h.superobj# = sv.obj#), null)
from sys.obj$ o, sys.view$ v, sys.user$ u, sys.typed_view$ t
where o.obj# = v.obj#
  and o.obj# = t.obj#(+)
  and o.owner# = u.user#
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where oa.grantee# in ( select kzsrorol
                                         from x$kzsro
                                  )
            )
        or /* user has system privileges */
          exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                  )
      );

CREATE OR REPLACE FORCE VIEW "ALL_WARNING_SETTINGS"("OWNER","OBJECT_NAME","OBJECT_ID","OBJECT_TYPE","WARNING","SETTING") AS 
SELECT u.name, o.name, o.obj#,
         DECODE(o.type#,
                 7, 'PROCEDURE',
                 8, 'FUNCTION',
                 9, 'PACKAGE',
                11, 'PACKAGE BODY',
                12, 'TRIGGER',
                13, 'TYPE',
                14, 'TYPE BODY',
                    'UNDEFINED'),
         DECODE(w.warning,
                -1, 'INFORMATIONAL',
                -2, 'PERFORMANCE',
                -3, 'SEVERE',
                -4, 'ALL',
                w.warning),
         DECODE(w.setting,
                0, 'DISABLE',
                1, 'ENABLE',
                2, 'ERROR',
                   'INVALID')
    FROM sys.obj$ o, sys.user$ u,
    TABLE(dbms_warning_internal.show_warning_settings(o.obj#)) w
    WHERE o.owner# = u.user#
    AND o.linkname IS NULL
    AND o.type# IN (7, 8, 9, 11, 12, 13, 14)
    AND w.obj_no = o.obj#
    AND
    (
      o.owner# IN (userenv('SCHEMAID'), 1 /* PUBLIC */)
      OR
      (
        (
          (
            (o.type# = 7 OR o.type# = 8 OR o.type# = 9 OR o.type# = 13)
             and
             o.obj# in (select obj# from sys.objauth$
             where grantee# in (select kzsrorol from x$kzsro)
                   and privilege#  = 12 /* EXECUTE */)
           )
           or
           exists
           (
              select null from sys.sysauth$
                where grantee# in (select kzsrorol from x$kzsro)
                      and
                      (
                        (
                          /* procedure */
                          (o.type# = 7 or o.type# = 8 or o.type# = 9)
                          and
                          (
                             privilege# = -144 /* EXECUTE ANY PROCEDURE */
                             or
                             privilege# = -141 /* CREATE ANY PROCEDURE */
                          )
                        )
                        or
                        (
                          /* package body */
                          o.type# = 11 and
                          privilege# = -141 /* CREATE ANY PROCEDURE */
                        )
                        or
                        (
                          /* type */
                          o.type# = 13
                          and
                          (
                             privilege# = -184 /* EXECUTE ANY TYPE */
                             or
                             privilege# = -181 /* CREATE ANY TYPE */
                          )
                        )
                        or
                        (
                          /* type body */
                          o.type# = 14 and
                          privilege# = -181 /* CREATE ANY TYPE */
                        )
                      )
           )
        )
      )
    );

CREATE OR REPLACE FORCE VIEW "ALL_WORKSPACES"("WORKSPACE","PARENT_WORKSPACE","PARENT_SAVEPOINT","OWNER","CREATETIME","DESCRIPTION","FREEZE_STATUS","FREEZE_MODE","FREEZE_WRITER","FREEZE_OWNER","SESSION_DURATION","CURRENT_SESSION","RESOLVE_STATUS","RESOLVE_USER","CONTINUALLY_REFRESHED","WORKSPACE_LOCKMODE","WORKSPACE_LOCKMODE_OVERRIDE","MP_ROOT_WORKSPACE") AS 
select asp.workspace, asp.parent_workspace, ssp.savepoint parent_savepoint,
       asp.owner, asp.createTime, asp.description,
       decode(asp.freeze_status,'LOCKED','FROZEN',
                              'UNLOCKED','UNFROZEN') freeze_status,
       decode(asp.oper_status, null, asp.freeze_mode,'INTERNAL') freeze_mode,
       decode(asp.freeze_mode, '1WRITER_SESSION', s.username, asp.freeze_writer) freeze_writer,
       decode(asp.session_duration, 0, asp.freeze_owner, s.username) freeze_owner,
       decode(asp.freeze_status, 'UNLOCKED', null, decode(asp.session_duration, 1, 'YES', 'NO')) session_duration,
       decode(asp.session_duration, 1,
                     decode((select 1 from dual
                             where s.sid=sys_context('lt_ctx', 'cid') and s.serial#=sys_context('lt_ctx', 'serial#')),
                           1, 'YES', 'NO'),
             null) current_session,
       decode(rst.workspace,null,'INACTIVE','ACTIVE') resolve_status,
       rst.resolve_user,
       decode(asp.isRefreshed, 1, 'YES', 'NO') continually_refreshed,
       decode(substr(asp.wm_lockmode, 1, 1),
              'S', 'SHARED',
              'E', 'EXCLUSIVE',
              'C', 'CARRY', NULL) workspace_lockmode,
       decode(substr(asp.wm_lockmode, 3, 1), 'Y', 'YES', 'N', 'NO', NULL) workspace_lockmode_override,
       mp_root mp_root_workspace
from   wmsys.all_workspaces_internal asp, wmsys.wm$workspace_savepoints_table ssp,
       wmsys.wm$resolve_workspaces_table  rst, v$session s
where  ((ssp.position is null) or ( ssp.position =
	(select min(position) from wmsys.wm$workspace_savepoints_table where version=ssp.version) )) and
       asp.parent_version  = ssp.version (+) and
       asp.workspace = rst.workspace (+) and
       to_char(s.sid(+)) = substr(asp.freeze_owner, 1, instr(asp.freeze_owner, ',')-1)  and
       to_char(s.serial#(+)) = substr(asp.freeze_owner, instr(asp.freeze_owner, ',')+1)
WITH READ ONLY;

CREATE OR REPLACE FORCE VIEW "ALL_XML_SCHEMAS"("OWNER","SCHEMA_URL","LOCAL","SCHEMA","INT_OBJNAME","QUAL_SCHEMA_URL") AS 
select u.name, s.xmldata.schema_url,
          case when bitand(to_number(s.xmldata.flags,'xxxxxxxx'), 16) = 16
               then 'NO' else 'YES' end,
          value(s),
          xdb.xdb$Extname2Intname(s.xmldata.schema_url,s.xmldata.schema_owner),
          case when bitand(to_number(s.xmldata.flags,'xxxxxxxx'), 16) = 16
               then s.xmldata.schema_url
               else 'http://xmlns.oracle.com/xdb/schemas/' ||
                    s.xmldata.schema_owner || '/' ||
                    case when substr(s.xmldata.schema_url, 1, 7) = 'http://'
                         then substr(s.xmldata.schema_url, 8)
                         else s.xmldata.schema_url
                    end
          end
    from user$ u, xdb.xdb$schema s
    where u.user# = userenv('SCHEMAID')
    and   u.name  = s.xmldata.schema_owner
    union all
    select s.xmldata.schema_owner, s.xmldata.schema_url, 'NO', value(s),
          xdb.xdb$Extname2Intname(s.xmldata.schema_url,s.xmldata.schema_owner),
          s.xmldata.schema_url
    from xdb.xdb$schema s
    where bitand(to_number(s.xmldata.flags,'xxxxxxxx'), 16) = 16
    and s.xmldata.schema_url
       not in (select s2.xmldata.schema_url
               from xdb.xdb$schema s2, user$ u2
               where u2.user# = userenv('SCHEMAID')
               and   u2.name  = s.xmldata.schema_owner);

CREATE OR REPLACE FORCE VIEW "ALL_XML_SCHEMAS2"("OWNER","SCHEMA_URL","LOCAL","INT_OBJNAME","QUAL_SCHEMA_URL") AS 
select u.name, s.xmldata.schema_url,
          case when bitand(to_number(s.xmldata.flags,'xxxxxxxx'), 16) = 16
               then 'NO' else 'YES' end,
          xdb.xdb$Extname2Intname(s.xmldata.schema_url,s.xmldata.schema_owner),
          case when bitand(to_number(s.xmldata.flags,'xxxxxxxx'), 16) = 16
               then s.xmldata.schema_url
               else 'http://xmlns.oracle.com/xdb/schemas/' ||
                    s.xmldata.schema_owner || '/' ||
                    case when substr(s.xmldata.schema_url, 1, 7) = 'http://'
                         then substr(s.xmldata.schema_url, 8)
                         else s.xmldata.schema_url
                    end
          end
    from user$ u, xdb.xdb$schema s
    where u.user# = userenv('SCHEMAID')
    and   u.name  = s.xmldata.schema_owner
    union all
    select s.xmldata.schema_owner, s.xmldata.schema_url, 'NO',
          xdb.xdb$Extname2Intname(s.xmldata.schema_url,s.xmldata.schema_owner),
          s.xmldata.schema_url
    from xdb.xdb$schema s
    where bitand(to_number(s.xmldata.flags,'xxxxxxxx'), 16) = 16
    and s.xmldata.schema_url
       not in (select s2.xmldata.schema_url
               from xdb.xdb$schema s2, user$ u2
               where u2.user# = userenv('SCHEMAID')
               and   u2.name  = s.xmldata.schema_owner);

CREATE OR REPLACE FORCE VIEW "ALL_XML_TABLES"("OWNER","TABLE_NAME","XMLSCHEMA","SCHEMA_OWNER","ELEMENT_NAME","STORAGE_TYPE") AS 
select u.name, o.name, null, null, null,
    decode(bitand(opq.flags,5),1,'OBJECT-RELATIONAL','CLOB')
 from sys.opqtype$ opq, sys.tab$ t, sys.user$ u, sys.obj$ o,
      sys.coltype$ ac, sys.col$ tc
 where o.owner# = u.user#
  and o.obj# = t.obj#
  and bitand(t.property, 1) = 1
  and t.obj# = tc.obj#
  and tc.name = 'SYS_NC_ROWINFO$'
  and tc.obj# = ac.obj#
  and tc.intcol# = ac.intcol#
  and ac.toid = '00000000000000000000000000020100'
  and tc.intcol# =  opq.intcol#
  and tc.obj# =  opq.obj#
  and bitand(opq.flags,2) = 0
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      )
 union all
 select u.name, o.name, schm.xmldata.schema_url, schm.xmldata.schema_owner,
 decode(xel.xmldata.property.name, null,
        xel.xmldata.property.propref_name.name, xel.xmldata.property.name),
  decode(bitand(opq.flags,5),1,'OBJECT-RELATIONAL','CLOB')
from xdb.xdb$element xel, xdb.xdb$schema schm, sys.opqtype$ opq,
      sys.tab$ t, sys.user$ u, sys.obj$ o, sys.coltype$ ac, sys.col$ tc
where o.owner# = u.user#
  and o.obj# = t.obj#
  and bitand(t.property, 1) = 1
  and t.obj# = tc.obj#
  and tc.name = 'SYS_NC_ROWINFO$'
  and tc.obj# = ac.obj#
  and tc.intcol# = ac.intcol#
  and ac.toid = '00000000000000000000000000020100'
  and tc.intcol# =  opq.intcol#
  and tc.obj# =  opq.obj#
  and opq.schemaoid =  schm.sys_nc_oid$
  and bitand(opq.flags,2) = 2
  and ref(schm) =  xel.xmldata.property.parent_schema
  and opq.elemnum =  xel.xmldata.property.prop_number
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_XML_TAB_COLS"("OWNER","TABLE_NAME","COLUMN_NAME","XMLSCHEMA","SCHEMA_OWNER","ELEMENT_NAME","STORAGE_TYPE") AS 
select u.name, o.name,
   decode(bitand(tc.property, 1), 1, attr.name, tc.name),null,null,null,
   decode(bitand(opq.flags,5),1,'OBJECT-RELATIONAL','CLOB')
from  sys.opqtype$ opq,
      sys.tab$ t, sys.user$ u, sys.obj$ o, sys.coltype$ ac, sys.col$ tc,
      sys.attrcol$ attr
where o.owner# = u.user#
  and o.obj# = t.obj#
  and t.obj# = tc.obj#
  and tc.obj# = ac.obj#
  and tc.intcol# = ac.intcol#
  and ac.toid = '00000000000000000000000000020100'
  and tc.intcol# = opq.intcol#
  and tc.obj# =  opq.obj#
  and tc.obj#    = attr.obj#(+)
  and tc.intcol# = attr.intcol#(+)
  and bitand(opq.flags,2) = 0
  and tc.name != 'SYS_NC_ROWINFO$'
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      )
  union all
 select u.name, o.name,
  decode(bitand(tc.property, 1), 1, attr.name, tc.name),
  schm.xmldata.schema_url, schm.xmldata.schema_owner,
decode(xel.xmldata.property.name, null,
        xel.xmldata.property.propref_name.name, xel.xmldata.property.name),
    decode(bitand(opq.flags,5),1,'OBJECT-RELATIONAL','CLOB')
 from xdb.xdb$element xel, xdb.xdb$schema schm, sys.opqtype$ opq,
      sys.tab$ t, sys.user$ u, sys.obj$ o, sys.coltype$ ac, sys.col$ tc,
      sys.attrcol$ attr
 where o.owner# = u.user#
  and o.obj# = t.obj#
  and t.obj# = tc.obj#
  and tc.obj# = ac.obj#
  and tc.intcol# = ac.intcol#
  and ac.toid = '00000000000000000000000000020100'
  and tc.intcol# = opq.intcol#
  and tc.obj# =  opq.obj#
  and tc.obj#    = attr.obj#(+)
  and tc.intcol# = attr.intcol#(+)
  and tc.name != 'SYS_NC_ROWINFO$'
  and opq.schemaoid =  schm.sys_nc_oid$
  and ref(schm) =  xel.xmldata.property.parent_schema
  and opq.elemnum =  xel.xmldata.property.prop_number
  and bitand(opq.flags,2) = 2
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_XML_VIEWS"("OWNER","VIEW_NAME","XMLSCHEMA","SCHEMA_OWNER","ELEMENT_NAME") AS 
select u.name, o.name, null, null, null
 from sys.opqtype$ opq,
      sys.view$ v, sys.user$ u, sys.obj$ o, sys.coltype$ ac, sys.col$ tc
 where o.owner# = u.user#
  and o.obj# = v.obj#
  and bitand(v.property, 1) = 1
  and v.obj# = tc.obj#
  and tc.name = 'SYS_NC_ROWINFO$'
  and tc.obj# = ac.obj#
  and tc.intcol# = ac.intcol#
  and ac.toid = '00000000000000000000000000020100'
  and tc.intcol# =  opq.intcol#
  and tc.obj# =  opq.obj#
  and bitand(opq.flags,2) = 0
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      )
 union all
 select u.name, o.name, schm.xmldata.schema_url, schm.xmldata.schema_owner,
   decode(xel.xmldata.property.name, null,
        xel.xmldata.property.propref_name.name, xel.xmldata.property.name)
 from xdb.xdb$element xel, xdb.xdb$schema schm, sys.opqtype$ opq,
      sys.view$ v, sys.user$ u, sys.obj$ o, sys.coltype$ ac, sys.col$ tc
 where o.owner# = u.user#
  and o.obj# = v.obj#
  and bitand(v.property, 1) = 1
  and v.obj# = tc.obj#
  and tc.name = 'SYS_NC_ROWINFO$'
  and tc.obj# = ac.obj#
  and tc.intcol# = ac.intcol#
  and ac.toid = '00000000000000000000000000020100'
  and tc.intcol# =  opq.intcol#
  and tc.obj# =  opq.obj#
  and opq.schemaoid =  schm.sys_nc_oid$
  and ref(schm) =  xel.xmldata.property.parent_schema
  and opq.elemnum =  xel.xmldata.property.prop_number
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY TABLE */,
                                       -47 /* SELECT ANY TABLE */,
                                       -48 /* INSERT ANY TABLE */,
                                       -49 /* UPDATE ANY TABLE */,
                                       -50 /* DELETE ANY TABLE */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "ALL_XML_VIEW_COLS"("OWNER","VIEW_NAME","COLUMN_NAME","XMLSCHEMA","SCHEMA_OWNER","ELEMENT_NAME") AS 
select u.name, o.name,
  decode(bitand(tc.property, 1), 1, attr.name, tc.name),
  null, null, null
from sys.opqtype$ opq,
      sys.view$ v, sys.user$ u, sys.obj$ o, sys.coltype$ ac, sys.col$ tc,
      sys.attrcol$ attr
where o.owner# = u.user#
  and o.obj# = v.obj#
  and bitand(v.property, 1) = 1
  and v.obj# = tc.obj#
  and tc.obj# = ac.obj#
  and tc.intcol# = ac.intcol#
  and ac.toid = '00000000000000000000000000020100'
  and tc.intcol# = opq.intcol#
  and tc.obj# =  opq.obj#
  and tc.obj#    = attr.obj#(+)
  and tc.intcol# = attr.intcol#(+)
  and bitand(opq.flags,2) = 0
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY VIEWLE */,
                                       -47 /* SELECT ANY VIEWLE */,
                                       -48 /* INSERT ANY VIEWLE */,
                                       -49 /* UPDATE ANY VIEWLE */,
                                       -50 /* DELETE ANY VIEWLE */)
                 )
      )
union all
select u.name, o.name,
  decode(bitand(tc.property, 1), 1, attr.name, tc.name),
  schm.xmldata.schema_url, schm.xmldata.schema_owner,
decode(xel.xmldata.property.name, null,
        xel.xmldata.property.propref_name.name, xel.xmldata.property.name)
from xdb.xdb$element xel, xdb.xdb$schema schm, sys.opqtype$ opq,
      sys.view$ v, sys.user$ u, sys.obj$ o, sys.coltype$ ac, sys.col$ tc,
      sys.attrcol$ attr
where o.owner# = u.user#
  and o.obj# = v.obj#
  and bitand(v.property, 1) = 1
  and v.obj# = tc.obj#
  and tc.obj# = ac.obj#
  and tc.intcol# = ac.intcol#
  and ac.toid = '00000000000000000000000000020100'
  and tc.intcol# = opq.intcol#
  and tc.obj# =  opq.obj#
  and tc.obj#    = attr.obj#(+)
  and tc.intcol# = attr.intcol#(+)
  and opq.schemaoid =  schm.sys_nc_oid$
  and ref(schm) =  xel.xmldata.property.parent_schema
  and opq.elemnum =  xel.xmldata.property.prop_number
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
         exists (select null from v$enabledprivs
                 where priv_number in (-45 /* LOCK ANY VIEWLE */,
                                       -47 /* SELECT ANY VIEWLE */,
                                       -48 /* INSERT ANY VIEWLE */,
                                       -49 /* UPDATE ANY VIEWLE */,
                                       -50 /* DELETE ANY VIEWLE */)
                 )
      );

CREATE OR REPLACE FORCE VIEW "AQ$ALERT_QT"("QUEUE","MSG_ID","CORR_ID","MSG_PRIORITY","MSG_STATE","DELAY","DELAY_TIMESTAMP","EXPIRATION","ENQ_TIME","ENQ_TIMESTAMP","ENQ_USER_ID","ENQ_TXN_ID","DEQ_TIME","DEQ_TIMESTAMP","DEQ_USER_ID","DEQ_TXN_ID","RETRY_COUNT","EXCEPTION_QUEUE_OWNER","EXCEPTION_QUEUE","USER_DATA","PROPAGATED_MSGID","SENDER_NAME","SENDER_ADDRESS","SENDER_PROTOCOL","ORIGINAL_MSGID","ORIGINAL_QUEUE_NAME","ORIGINAL_QUEUE_OWNER","EXPIRATION_REASON","CONSUMER_NAME","ADDRESS","PROTOCOL") AS 
SELECT  q_name QUEUE, qt.msgid MSG_ID, corrid CORR_ID,  priority MSG_PRIORITY,  decode(h.dequeue_time, NULL,	  
			      (decode(state, 0,   'READY',	     
                              		     1,   'WAIT',	     
					     2,   'PROCESSED',	     
                                             3,   'EXPIRED',
                                             8,   'DEFERRED')),      
  			      (decode(h.transaction_id,     
				      NULL, 'UNDELIVERABLE',	  
				      'PROCESSED'))) MSG_STATE,  cast(FROM_TZ(qt.delay, '-06:00')
                 at time zone sessiontimezone as date) delay,  delay DELAY_TIMESTAMP, expiration,  cast(FROM_TZ(qt.enq_time, '-06:00')
                 at time zone sessiontimezone as date) enq_time,  cast(FROM_TZ(qt.enq_time, '-06:00')
                 at time zone sessiontimezone as timestamp)
                 enq_timestamp,   enq_uid ENQ_USER_ID,  enq_tid ENQ_TXN_ID,  decode(h.transaction_id, NULL, TO_DATE(NULL), 	  
                        cast(FROM_TZ(h.dequeue_time, '-06:00')
                 at time zone sessiontimezone as date)) DEQ_TIME,  decode(h.transaction_id, NULL, TO_TIMESTAMP(NULL), 	  
                        cast(FROM_TZ(h.dequeue_time, '-06:00')
                 at time zone sessiontimezone as timestamp))
                 DEQ_TIMESTAMP,  h.dequeue_user DEQ_USER_ID,  h.transaction_id DEQ_TXN_ID,  h.retry_count retry_count,  decode (state, 0, exception_qschema, 
                                1, exception_qschema, 
                                2, exception_qschema,  
                                NULL) EXCEPTION_QUEUE_OWNER,  decode (state, 0, exception_queue, 
                                1, exception_queue, 
                                2, exception_queue,  
                                NULL) EXCEPTION_QUEUE,  user_data,  h.propagated_msgid PROPAGATED_MSGID,  sender_name  SENDER_NAME, sender_address  SENDER_ADDRESS, sender_protocol  SENDER_PROTOCOL, dequeue_msgid ORIGINAL_MSGID,  decode (h.dequeue_time, NULL, 
                   decode (state, 3, exception_queue, NULL),
                   decode (h.transaction_id, NULL, NULL, exception_queue)) 
                                ORIGINAL_QUEUE_NAME,  decode (h.dequeue_time, NULL, 
                   decode (state, 3, exception_qschema, NULL),
                   decode (h.transaction_id, NULL, NULL, exception_qschema)) 
                                ORIGINAL_QUEUE_OWNER,  decode(h.dequeue_time, NULL, 
                   decode(state, 3, 
                     decode(h.transaction_id, NULL, 'TIME_EXPIRATION',
                            'INVALID_TRANSACTION', NULL,
                            'MAX_RETRY_EXCEEDED'), NULL),
                   decode(h.transaction_id, NULL, 'PROPAGATION_FAILURE',
                          NULL)) EXPIRATION_REASON,  decode(h.subscriber#, 0, decode(h.name, '0', NULL,
							        h.name),
					  s.name) CONSUMER_NAME,  s.address ADDRESS,  s.protocol PROTOCOL  FROM "ALERT_QT" qt, "AQ$_ALERT_QT_H" h, "AQ$_ALERT_QT_S" s  WHERE qt.msgid = h.msgid AND  ((h.subscriber# != 0 AND h.subscriber# = s.subscriber_id)  OR (h.subscriber# = 0 AND h.address# = s.subscriber_id)) AND qt.state != 7 WITH READ ONLY;

CREATE OR REPLACE FORCE VIEW "AQ$ALERT_QT_R"("QUEUE","NAME","ADDRESS","PROTOCOL","RULE","RULE_SET","TRANSFORMATION") AS 
SELECT queue_name QUEUE, s.name NAME , address ADDRESS , protocol PROTOCOL, rule_condition RULE, ruleset_name RULE_SET, trans_name TRANSFORMATION  FROM "AQ$_ALERT_QT_S" s , sys.all_rules r WHERE (bitand(s.subscriber_type, 1) = 1) AND s.rule_name = r.rule_name and r.rule_owner = 'SYS'  WITH READ ONLY;

CREATE OR REPLACE FORCE VIEW "AQ$ALERT_QT_S"("QUEUE","NAME","ADDRESS","PROTOCOL","TRANSFORMATION") AS 
SELECT queue_name QUEUE, name NAME , address ADDRESS , protocol PROTOCOL, trans_name TRANSFORMATION  FROM "AQ$_ALERT_QT_S" s  WHERE (bitand(s.subscriber_type, 1) = 1)  WITH READ ONLY;

CREATE OR REPLACE FORCE VIEW "AQ$AQ$_MEM_MC"("QUEUE","MSG_ID","CORR_ID","MSG_PRIORITY","MSG_STATE","DELAY","DELAY_TIMESTAMP","EXPIRATION","ENQ_TIME","ENQ_TIMESTAMP","ENQ_USER_ID","ENQ_TXN_ID","DEQ_TIME","DEQ_TIMESTAMP","DEQ_USER_ID","DEQ_TXN_ID","RETRY_COUNT","EXCEPTION_QUEUE_OWNER","EXCEPTION_QUEUE","USER_DATA","PROPAGATED_MSGID","SENDER_NAME","SENDER_ADDRESS","SENDER_PROTOCOL","ORIGINAL_MSGID","ORIGINAL_QUEUE_NAME","ORIGINAL_QUEUE_OWNER","EXPIRATION_REASON","CONSUMER_NAME","ADDRESS","PROTOCOL") AS 
SELECT  q_name QUEUE, qt.msgid MSG_ID, corrid CORR_ID,  priority MSG_PRIORITY,  decode(h.dequeue_time, NULL,	  
			      (decode(state, 0,   'READY',	     
                              		     1,   'WAIT',	     
					     2,   'PROCESSED',	     
                                             3,   'EXPIRED',
                                             8,   'DEFERRED')),      
  			      (decode(h.transaction_id,     
				      NULL, 'UNDELIVERABLE',	  
				      'PROCESSED'))) MSG_STATE,  cast(FROM_TZ(qt.delay, '-06:00')
                 at time zone sessiontimezone as date) delay,  delay DELAY_TIMESTAMP, expiration,  cast(FROM_TZ(qt.enq_time, '-06:00')
                 at time zone sessiontimezone as date) enq_time,  cast(FROM_TZ(qt.enq_time, '-06:00')
                 at time zone sessiontimezone as timestamp)
                 enq_timestamp,   enq_uid ENQ_USER_ID,  enq_tid ENQ_TXN_ID,  decode(h.transaction_id, NULL, TO_DATE(NULL), 	  
                        cast(FROM_TZ(h.dequeue_time, '-06:00')
                 at time zone sessiontimezone as date)) DEQ_TIME,  decode(h.transaction_id, NULL, TO_TIMESTAMP(NULL), 	  
                        cast(FROM_TZ(h.dequeue_time, '-06:00')
                 at time zone sessiontimezone as timestamp))
                 DEQ_TIMESTAMP,  h.dequeue_user DEQ_USER_ID,  h.transaction_id DEQ_TXN_ID,  h.retry_count retry_count,  decode (state, 0, exception_qschema, 
                                1, exception_qschema, 
                                2, exception_qschema,  
                                NULL) EXCEPTION_QUEUE_OWNER,  decode (state, 0, exception_queue, 
                                1, exception_queue, 
                                2, exception_queue,  
                                NULL) EXCEPTION_QUEUE,  user_data,  h.propagated_msgid PROPAGATED_MSGID,  sender_name  SENDER_NAME, sender_address  SENDER_ADDRESS, sender_protocol  SENDER_PROTOCOL, dequeue_msgid ORIGINAL_MSGID,  decode (h.dequeue_time, NULL, 
                   decode (state, 3, exception_queue, NULL),
                   decode (h.transaction_id, NULL, NULL, exception_queue)) 
                                ORIGINAL_QUEUE_NAME,  decode (h.dequeue_time, NULL, 
                   decode (state, 3, exception_qschema, NULL),
                   decode (h.transaction_id, NULL, NULL, exception_qschema)) 
                                ORIGINAL_QUEUE_OWNER,  decode(h.dequeue_time, NULL, 
                   decode(state, 3, 
                     decode(h.transaction_id, NULL, 'TIME_EXPIRATION',
                            'INVALID_TRANSACTION', NULL,
                            'MAX_RETRY_EXCEEDED'), NULL),
                   decode(h.transaction_id, NULL, 'PROPAGATION_FAILURE',
                          NULL)) EXPIRATION_REASON,  decode(h.subscriber#, 0, decode(h.name, '0', NULL,
							        h.name),
					  s.name) CONSUMER_NAME,  s.address ADDRESS,  s.protocol PROTOCOL  FROM "AQ$_MEM_MC" qt, "AQ$_AQ$_MEM_MC_H" h, "AQ$_AQ$_MEM_MC_S" s  WHERE qt.msgid = h.msgid AND  ((h.subscriber# != 0 AND h.subscriber# = s.subscriber_id)  OR (h.subscriber# = 0 AND h.address# = s.subscriber_id)) AND qt.state != 7 WITH READ ONLY;

CREATE OR REPLACE FORCE VIEW "AQ$AQ$_MEM_MC_S"("QUEUE","NAME","ADDRESS","PROTOCOL","TRANSFORMATION") AS 
SELECT queue_name QUEUE, name NAME , address ADDRESS , protocol PROTOCOL, trans_name TRANSFORMATION  FROM "AQ$_AQ$_MEM_MC_S" s  WHERE (bitand(s.subscriber_type, 1) = 1)  WITH READ ONLY;

CREATE OR REPLACE FORCE VIEW "AQ$AQ_EVENT_TABLE"("QUEUE","MSG_ID","CORR_ID","MSG_PRIORITY","MSG_STATE","DELAY","DELAY_TIMESTAMP","EXPIRATION","ENQ_TIME","ENQ_TIMESTAMP","ENQ_USER_ID","ENQ_TXN_ID","DEQ_TIME","DEQ_TIMESTAMP","DEQ_USER_ID","DEQ_TXN_ID","RETRY_COUNT","EXCEPTION_QUEUE_OWNER","EXCEPTION_QUEUE","USER_DATA","ORIGINAL_QUEUE_NAME","ORIGINAL_QUEUE_OWNER","EXPIRATION_REASON") AS 
SELECT q_name QUEUE, msgid MSG_ID, corrid CORR_ID, priority MSG_PRIORITY, decode(state, 0,   'READY',
                                1,   'WAIT',
                                2,   'PROCESSED',
                                3,   'EXPIRED') MSG_STATE, cast(FROM_TZ(delay, '-06:00')
                  at time zone sessiontimezone as date) DELAY, delay DELAY_TIMESTAMP, expiration, cast(FROM_TZ(enq_time, '-06:00')
                  at time zone sessiontimezone as date) ENQ_TIME, cast(FROM_TZ(enq_time, '-06:00')
                  at time zone sessiontimezone as timestamp) 
                  ENQ_TIMESTAMP, enq_uid ENQ_USER_ID, enq_tid ENQ_TXN_ID, cast(FROM_TZ(deq_time, '-06:00')
                  at time zone sessiontimezone as date) DEQ_TIME, cast(FROM_TZ(deq_time, '-06:00')
                  at time zone sessiontimezone as timestamp) 
                  DEQ_TIMESTAMP, deq_uid DEQ_USER_ID, deq_tid DEQ_TXN_ID, retry_count,  decode (state, 0, exception_qschema, 
                                  1, exception_qschema, 
                                  2, exception_qschema,  
                                  NULL) EXCEPTION_QUEUE_OWNER,  decode (state, 0, exception_queue, 
                                  1, exception_queue, 
                                  2, exception_queue,  
                                  NULL) EXCEPTION_QUEUE,  user_data,  decode (state, 3, 
                     decode (deq_tid, 'INVALID_TRANSACTION', NULL, 
                             exception_queue), NULL)
                                ORIGINAL_QUEUE_NAME,  decode (state, 3, 
                     decode (deq_tid, 'INVALID_TRANSACTION', NULL, 
                             exception_qschema), NULL)
                                ORIGINAL_QUEUE_OWNER,  decode(state, 3, 
                     decode(deq_time, NULL, 
                       decode(deq_tid, NULL, 'TIME_EXPIRATION',
                              'INVALID_TRANSACTION', NULL,
                              'MAX_RETRY_EXCEEDED'), NULL), NULL) 
                             EXPIRATION_REASON  FROM "AQ_EVENT_TABLE" WHERE state != 7 AND   state != 9 WITH READ ONLY;

CREATE OR REPLACE FORCE VIEW "AQ$AQ_SRVNTFN_TABLE"("QUEUE","MSG_ID","CORR_ID","MSG_PRIORITY","MSG_STATE","DELAY","DELAY_TIMESTAMP","EXPIRATION","ENQ_TIME","ENQ_TIMESTAMP","ENQ_USER_ID","ENQ_TXN_ID","DEQ_TIME","DEQ_TIMESTAMP","DEQ_USER_ID","DEQ_TXN_ID","RETRY_COUNT","EXCEPTION_QUEUE_OWNER","EXCEPTION_QUEUE","USER_DATA","ORIGINAL_QUEUE_NAME","ORIGINAL_QUEUE_OWNER","EXPIRATION_REASON","SENDER_NAME","SENDER_ADDRESS","SENDER_PROTOCOL","ORIGINAL_MSGID") AS 
SELECT q_name QUEUE, msgid MSG_ID, corrid CORR_ID, priority MSG_PRIORITY, decode(state, 0,   'READY',
                                1,   'WAIT',
                                2,   'PROCESSED',
                                3,   'EXPIRED') MSG_STATE, cast(FROM_TZ(delay, '-06:00')
                  at time zone sessiontimezone as date) DELAY, delay DELAY_TIMESTAMP, expiration, cast(FROM_TZ(enq_time, '-06:00')
                  at time zone sessiontimezone as date) ENQ_TIME, cast(FROM_TZ(enq_time, '-06:00')
                  at time zone sessiontimezone as timestamp) 
                  ENQ_TIMESTAMP, enq_uid ENQ_USER_ID, enq_tid ENQ_TXN_ID, cast(FROM_TZ(deq_time, '-06:00')
                  at time zone sessiontimezone as date) DEQ_TIME, cast(FROM_TZ(deq_time, '-06:00')
                  at time zone sessiontimezone as timestamp) 
                  DEQ_TIMESTAMP, deq_uid DEQ_USER_ID, deq_tid DEQ_TXN_ID, retry_count,  decode (state, 0, exception_qschema, 
                                  1, exception_qschema, 
                                  2, exception_qschema,  
                                  NULL) EXCEPTION_QUEUE_OWNER,  decode (state, 0, exception_queue, 
                                  1, exception_queue, 
                                  2, exception_queue,  
                                  NULL) EXCEPTION_QUEUE,  user_data,  decode (state, 3, 
                     decode (deq_tid, 'INVALID_TRANSACTION', NULL, 
                             exception_queue), NULL)
                                ORIGINAL_QUEUE_NAME,  decode (state, 3, 
                     decode (deq_tid, 'INVALID_TRANSACTION', NULL, 
                             exception_qschema), NULL)
                                ORIGINAL_QUEUE_OWNER,  decode(state, 3, 
                     decode(deq_time, NULL, 
                       decode(deq_tid, NULL, 'TIME_EXPIRATION',
                              'INVALID_TRANSACTION', NULL,
                              'MAX_RETRY_EXCEEDED'), NULL), NULL) 
                             EXPIRATION_REASON , sender_name SENDER_NAME, sender_address SENDER_ADDRESS, sender_protocol SENDER_PROTOCOL, dequeue_msgid ORIGINAL_MSGID  FROM "AQ_SRVNTFN_TABLE" WHERE state != 7 AND   state != 9 WITH READ ONLY;

CREATE OR REPLACE FORCE VIEW "AQ$DIR$CLUSTER_DIR_TABLE"("QUEUE","MSG_ID","CORR_ID","MSG_PRIORITY","MSG_STATE","DELAY","DELAY_TIMESTAMP","EXPIRATION","ENQ_TIME","ENQ_TIMESTAMP","ENQ_USER_ID","ENQ_TXN_ID","DEQ_TIME","DEQ_TIMESTAMP","DEQ_USER_ID","DEQ_TXN_ID","RETRY_COUNT","EXCEPTION_QUEUE_OWNER","EXCEPTION_QUEUE","USER_DATA","PROPAGATED_MSGID","SENDER_NAME","SENDER_ADDRESS","SENDER_PROTOCOL","ORIGINAL_MSGID","ORIGINAL_QUEUE_NAME","ORIGINAL_QUEUE_OWNER","EXPIRATION_REASON","CONSUMER_NAME","ADDRESS","PROTOCOL") AS 
SELECT  q_name QUEUE, qt.msgid MSG_ID, corrid CORR_ID,  priority MSG_PRIORITY,  decode(h.dequeue_time, NULL,	  
			      (decode(state, 0,   'READY',	     
                              		     1,   'WAIT',	     
					     2,   'PROCESSED',	     
                                             3,   'EXPIRED',
                                             8,   'DEFERRED')),      
  			      (decode(h.transaction_id,     
				      NULL, 'UNDELIVERABLE',	  
				      'PROCESSED'))) MSG_STATE,  cast(FROM_TZ(qt.delay, '-06:00')
                 at time zone sessiontimezone as date) delay,  delay DELAY_TIMESTAMP, expiration,  cast(FROM_TZ(qt.enq_time, '-06:00')
                 at time zone sessiontimezone as date) enq_time,  cast(FROM_TZ(qt.enq_time, '-06:00')
                 at time zone sessiontimezone as timestamp)
                 enq_timestamp,   enq_uid ENQ_USER_ID,  enq_tid ENQ_TXN_ID,  decode(h.transaction_id, NULL, TO_DATE(NULL), 	  
                        cast(FROM_TZ(h.dequeue_time, '-06:00')
                 at time zone sessiontimezone as date)) DEQ_TIME,  decode(h.transaction_id, NULL, TO_TIMESTAMP(NULL), 	  
                        cast(FROM_TZ(h.dequeue_time, '-06:00')
                 at time zone sessiontimezone as timestamp))
                 DEQ_TIMESTAMP,  h.dequeue_user DEQ_USER_ID,  h.transaction_id DEQ_TXN_ID,  h.retry_count retry_count,  decode (state, 0, exception_qschema, 
                                1, exception_qschema, 
                                2, exception_qschema,  
                                NULL) EXCEPTION_QUEUE_OWNER,  decode (state, 0, exception_queue, 
                                1, exception_queue, 
                                2, exception_queue,  
                                NULL) EXCEPTION_QUEUE,  user_data,  h.propagated_msgid PROPAGATED_MSGID,  sender_name  SENDER_NAME, sender_address  SENDER_ADDRESS, sender_protocol  SENDER_PROTOCOL, dequeue_msgid ORIGINAL_MSGID,  decode (h.dequeue_time, NULL, 
                   decode (state, 3, exception_queue, NULL),
                   decode (h.transaction_id, NULL, NULL, exception_queue)) 
                                ORIGINAL_QUEUE_NAME,  decode (h.dequeue_time, NULL, 
                   decode (state, 3, exception_qschema, NULL),
                   decode (h.transaction_id, NULL, NULL, exception_qschema)) 
                                ORIGINAL_QUEUE_OWNER,  decode(h.dequeue_time, NULL, 
                   decode(state, 3, 
                     decode(h.transaction_id, NULL, 'TIME_EXPIRATION',
                            'INVALID_TRANSACTION', NULL,
                            'MAX_RETRY_EXCEEDED'), NULL),
                   decode(h.transaction_id, NULL, 'PROPAGATION_FAILURE',
                          NULL)) EXPIRATION_REASON,  decode(h.subscriber#, 0, decode(h.name, '0', NULL,
							        h.name),
					  s.name) CONSUMER_NAME,  s.address ADDRESS,  s.protocol PROTOCOL  FROM "DIR$CLUSTER_DIR_TABLE" qt, "AQ$_DIR$CLUSTER_DIR_TABLE_H" h, "AQ$_DIR$CLUSTER_DIR_TABLE_S" s  WHERE qt.msgid = h.msgid AND  ((h.subscriber# != 0 AND h.subscriber# = s.subscriber_id)  OR (h.subscriber# = 0 AND h.address# = s.subscriber_id)) AND qt.state != 7 WITH READ ONLY;

CREATE OR REPLACE FORCE VIEW "AQ$DIR$CLUSTER_DIR_TABLE_R"("QUEUE","NAME","ADDRESS","PROTOCOL","RULE","RULE_SET","TRANSFORMATION") AS 
SELECT queue_name QUEUE, s.name NAME , address ADDRESS , protocol PROTOCOL, rule_condition RULE, ruleset_name RULE_SET, trans_name TRANSFORMATION  FROM "AQ$_DIR$CLUSTER_DIR_TABLE_S" s , sys.all_rules r WHERE (bitand(s.subscriber_type, 1) = 1) AND s.rule_name = r.rule_name and r.rule_owner = 'SYS'  WITH READ ONLY;

CREATE OR REPLACE FORCE VIEW "AQ$DIR$CLUSTER_DIR_TABLE_S"("QUEUE","NAME","ADDRESS","PROTOCOL","TRANSFORMATION") AS 
SELECT queue_name QUEUE, name NAME , address ADDRESS , protocol PROTOCOL, trans_name TRANSFORMATION  FROM "AQ$_DIR$CLUSTER_DIR_TABLE_S" s  WHERE (bitand(s.subscriber_type, 1) = 1)  WITH READ ONLY;

CREATE OR REPLACE FORCE VIEW "AQ$DIR$EVENT_TABLE"("QUEUE","MSG_ID","CORR_ID","MSG_PRIORITY","MSG_STATE","DELAY","DELAY_TIMESTAMP","EXPIRATION","ENQ_TIME","ENQ_TIMESTAMP","ENQ_USER_ID","ENQ_TXN_ID","DEQ_TIME","DEQ_TIMESTAMP","DEQ_USER_ID","DEQ_TXN_ID","RETRY_COUNT","EXCEPTION_QUEUE_OWNER","EXCEPTION_QUEUE","USER_DATA","PROPAGATED_MSGID","SENDER_NAME","SENDER_ADDRESS","SENDER_PROTOCOL","ORIGINAL_MSGID","ORIGINAL_QUEUE_NAME","ORIGINAL_QUEUE_OWNER","EXPIRATION_REASON","CONSUMER_NAME","ADDRESS","PROTOCOL") AS 
SELECT  q_name QUEUE, qt.msgid MSG_ID, corrid CORR_ID,  priority MSG_PRIORITY,  decode(h.dequeue_time, NULL,	  
			      (decode(state, 0,   'READY',	     
                              		     1,   'WAIT',	     
					     2,   'PROCESSED',	     
                                             3,   'EXPIRED',
                                             8,   'DEFERRED')),      
  			      (decode(h.transaction_id,     
				      NULL, 'UNDELIVERABLE',	  
				      'PROCESSED'))) MSG_STATE,  cast(FROM_TZ(qt.delay, '-06:00')
                 at time zone sessiontimezone as date) delay,  delay DELAY_TIMESTAMP, expiration,  cast(FROM_TZ(qt.enq_time, '-06:00')
                 at time zone sessiontimezone as date) enq_time,  cast(FROM_TZ(qt.enq_time, '-06:00')
                 at time zone sessiontimezone as timestamp)
                 enq_timestamp,   enq_uid ENQ_USER_ID,  enq_tid ENQ_TXN_ID,  decode(h.transaction_id, NULL, TO_DATE(NULL), 	  
                        cast(FROM_TZ(h.dequeue_time, '-06:00')
                 at time zone sessiontimezone as date)) DEQ_TIME,  decode(h.transaction_id, NULL, TO_TIMESTAMP(NULL), 	  
                        cast(FROM_TZ(h.dequeue_time, '-06:00')
                 at time zone sessiontimezone as timestamp))
                 DEQ_TIMESTAMP,  h.dequeue_user DEQ_USER_ID,  h.transaction_id DEQ_TXN_ID,  h.retry_count retry_count,  decode (state, 0, exception_qschema, 
                                1, exception_qschema, 
                                2, exception_qschema,  
                                NULL) EXCEPTION_QUEUE_OWNER,  decode (state, 0, exception_queue, 
                                1, exception_queue, 
                                2, exception_queue,  
                                NULL) EXCEPTION_QUEUE,  user_data,  h.propagated_msgid PROPAGATED_MSGID,  sender_name  SENDER_NAME, sender_address  SENDER_ADDRESS, sender_protocol  SENDER_PROTOCOL, dequeue_msgid ORIGINAL_MSGID,  decode (h.dequeue_time, NULL, 
                   decode (state, 3, exception_queue, NULL),
                   decode (h.transaction_id, NULL, NULL, exception_queue)) 
                                ORIGINAL_QUEUE_NAME,  decode (h.dequeue_time, NULL, 
                   decode (state, 3, exception_qschema, NULL),
                   decode (h.transaction_id, NULL, NULL, exception_qschema)) 
                                ORIGINAL_QUEUE_OWNER,  decode(h.dequeue_time, NULL, 
                   decode(state, 3, 
                     decode(h.transaction_id, NULL, 'TIME_EXPIRATION',
                            'INVALID_TRANSACTION', NULL,
                            'MAX_RETRY_EXCEEDED'), NULL),
                   decode(h.transaction_id, NULL, 'PROPAGATION_FAILURE',
                          NULL)) EXPIRATION_REASON,  decode(h.subscriber#, 0, decode(h.name, '0', NULL,
							        h.name),
					  s.name) CONSUMER_NAME,  s.address ADDRESS,  s.protocol PROTOCOL  FROM "DIR$EVENT_TABLE" qt, "AQ$_DIR$EVENT_TABLE_H" h, "AQ$_DIR$EVENT_TABLE_S" s  WHERE qt.msgid = h.msgid AND  ((h.subscriber# != 0 AND h.subscriber# = s.subscriber_id)  OR (h.subscriber# = 0 AND h.address# = s.subscriber_id)) AND qt.state != 7 WITH READ ONLY;

CREATE OR REPLACE FORCE VIEW "AQ$DIR$EVENT_TABLE_R"("QUEUE","NAME","ADDRESS","PROTOCOL","RULE","RULE_SET","TRANSFORMATION") AS 
SELECT queue_name QUEUE, s.name NAME , address ADDRESS , protocol PROTOCOL, rule_condition RULE, ruleset_name RULE_SET, trans_name TRANSFORMATION  FROM "AQ$_DIR$EVENT_TABLE_S" s , sys.all_rules r WHERE (bitand(s.subscriber_type, 1) = 1) AND s.rule_name = r.rule_name and r.rule_owner = 'SYS'  WITH READ ONLY;

CREATE OR REPLACE FORCE VIEW "AQ$DIR$EVENT_TABLE_S"("QUEUE","NAME","ADDRESS","PROTOCOL","TRANSFORMATION") AS 
SELECT queue_name QUEUE, name NAME , address ADDRESS , protocol PROTOCOL, trans_name TRANSFORMATION  FROM "AQ$_DIR$EVENT_TABLE_S" s  WHERE (bitand(s.subscriber_type, 1) = 1)  WITH READ ONLY;

CREATE OR REPLACE FORCE VIEW "AQ$INTERNET_USERS"("AGENT_NAME","DB_USERNAME","HTTP_ENABLED","SMTP_ENABLED","FTP_ENABLED") AS 
(SELECT t.agent_name, t.db_username, decode(bitand(u.protocol, 1), 0, 'NO  ', 1, 'YES ') http_enabled, decode(bitand(u.protocol, 2), 0, 'NO  ', 2, 'YES ') smtp_enabled, decode(bitand(u.protocol, 4), 0, 'NO  ', 4, 'YES ') ftp_enabled FROM SYSTEM.AQ$_Internet_Agent_Privs t, SYSTEM.AQ$_Internet_Agents u WHERE t.agent_name = u.agent_name UNION (SELECT x.agent_name, NULL, decode(bitand(x.protocol, 1), 0, 'NO  ', 1, 'YES ') http_enabled, decode(bitand(x.protocol, 2), 0, 'NO  ', 2, 'YES ') smtp_enabled, decode(bitand(x.protocol, 4), 0, 'NO  ', 4, 'YES ') ftp_enabled FROM SYSTEM.AQ$_Internet_Agents x WHERE (x.agent_name NOT IN (SELECT y.agent_name FROM SYSTEM.AQ$_Internet_Agent_Privs y))));

CREATE OR REPLACE FORCE VIEW "AQ$KUPC$DATAPUMP_QUETAB"("QUEUE","MSG_ID","CORR_ID","MSG_PRIORITY","MSG_STATE","DELAY","DELAY_TIMESTAMP","EXPIRATION","ENQ_TIME","ENQ_TIMESTAMP","ENQ_USER_ID","ENQ_TXN_ID","DEQ_TIME","DEQ_TIMESTAMP","DEQ_USER_ID","DEQ_TXN_ID","RETRY_COUNT","EXCEPTION_QUEUE_OWNER","EXCEPTION_QUEUE","USER_DATA","PROPAGATED_MSGID","SENDER_NAME","SENDER_ADDRESS","SENDER_PROTOCOL","ORIGINAL_MSGID","ORIGINAL_QUEUE_NAME","ORIGINAL_QUEUE_OWNER","EXPIRATION_REASON","CONSUMER_NAME","ADDRESS","PROTOCOL") AS 
SELECT  q_name QUEUE, qt.msgid MSG_ID, corrid CORR_ID,  priority MSG_PRIORITY,  decode(h.dequeue_time, NULL,	  
			      (decode(state, 0,   'READY',	     
                              		     1,   'WAIT',	     
					     2,   'PROCESSED',	     
                                             3,   'EXPIRED',
                                             8,   'DEFERRED')),      
  			      (decode(h.transaction_id,     
				      NULL, 'UNDELIVERABLE',	  
				      'PROCESSED'))) MSG_STATE,  cast(FROM_TZ(qt.delay, '-06:00')
                 at time zone sessiontimezone as date) delay,  delay DELAY_TIMESTAMP, expiration,  cast(FROM_TZ(qt.enq_time, '-06:00')
                 at time zone sessiontimezone as date) enq_time,  cast(FROM_TZ(qt.enq_time, '-06:00')
                 at time zone sessiontimezone as timestamp)
                 enq_timestamp,   enq_uid ENQ_USER_ID,  enq_tid ENQ_TXN_ID,  decode(h.transaction_id, NULL, TO_DATE(NULL), 	  
                        cast(FROM_TZ(h.dequeue_time, '-06:00')
                 at time zone sessiontimezone as date)) DEQ_TIME,  decode(h.transaction_id, NULL, TO_TIMESTAMP(NULL), 	  
                        cast(FROM_TZ(h.dequeue_time, '-06:00')
                 at time zone sessiontimezone as timestamp))
                 DEQ_TIMESTAMP,  h.dequeue_user DEQ_USER_ID,  h.transaction_id DEQ_TXN_ID,  h.retry_count retry_count,  decode (state, 0, exception_qschema, 
                                1, exception_qschema, 
                                2, exception_qschema,  
                                NULL) EXCEPTION_QUEUE_OWNER,  decode (state, 0, exception_queue, 
                                1, exception_queue, 
                                2, exception_queue,  
                                NULL) EXCEPTION_QUEUE,  user_data,  h.propagated_msgid PROPAGATED_MSGID,  sender_name  SENDER_NAME, sender_address  SENDER_ADDRESS, sender_protocol  SENDER_PROTOCOL, dequeue_msgid ORIGINAL_MSGID,  decode (h.dequeue_time, NULL, 
                   decode (state, 3, exception_queue, NULL),
                   decode (h.transaction_id, NULL, NULL, exception_queue)) 
                                ORIGINAL_QUEUE_NAME,  decode (h.dequeue_time, NULL, 
                   decode (state, 3, exception_qschema, NULL),
                   decode (h.transaction_id, NULL, NULL, exception_qschema)) 
                                ORIGINAL_QUEUE_OWNER,  decode(h.dequeue_time, NULL, 
                   decode(state, 3, 
                     decode(h.transaction_id, NULL, 'TIME_EXPIRATION',
                            'INVALID_TRANSACTION', NULL,
                            'MAX_RETRY_EXCEEDED'), NULL),
                   decode(h.transaction_id, NULL, 'PROPAGATION_FAILURE',
                          NULL)) EXPIRATION_REASON,  decode(h.subscriber#, 0, decode(h.name, '0', NULL,
							        h.name),
					  s.name) CONSUMER_NAME,  s.address ADDRESS,  s.protocol PROTOCOL  FROM "KUPC$DATAPUMP_QUETAB" qt, "AQ$_KUPC$DATAPUMP_QUETAB_H" h, "AQ$_KUPC$DATAPUMP_QUETAB_S" s  WHERE qt.msgid = h.msgid AND  ((h.subscriber# != 0 AND h.subscriber# = s.subscriber_id)  OR (h.subscriber# = 0 AND h.address# = s.subscriber_id)) AND qt.state != 7 UNION ALL SELECT q.name QUEUE, b.msg_id MSG_ID, b.corr_id CORR_ID, b.msg_priority MSG_PRIORITY, decode (b.msg_state, 0, 'IN MEMORY',
                                        1, 'DEFERRED',
                                        NULL) MSG_STATE, null DELAY, null DELAY_TIMESTAMP, b.expiration EXPIRATION, cast(FROM_TZ(b.enq_time, '-06:00')
                   at time zone sessiontimezone as date) ENQ_TIME, cast(FROM_TZ(b.enq_time, '-06:00')
                   at time zone sessiontimezone as timestamp)
                   ENQ_TIMESTAMP, b.enq_user_id ENQ_USER_ID, null ENQ_TXN_ID, null DEQ_TIME, null DEQ_TIMESTAMP, null DEQ_USER_ID, null DEQ_TXN_ID, null RETRY_COUNT, null EXCEPTION_QUEUE_OWNER, null EXCEPTION_QUEUE, sys.dbms_aq_bqview.get_adt_payload(b.queue_id, b.msg_num, SYS.KUPC$_MESSAGE(NULL, NULL)) USER_DATA, null PROPAGATED_MSGID, b.sender_name SENDER_NAME, b.sender_address SENDER_ADDRESS, b.sender_protocol SENDER_PROTOCOL, b.original_msgid ORIGINAL_MSGID, null ORIGINAL_QUEUE_NAME, null ORIGINAL_QUEUE_OWNER, null EXPIRATION_REASON, s.name CONSUMER_NAME, s.address ADDRESS, s.protocol PROTOCOL FROM SYS.qt6612_BUFFER b, all_queues q, "AQ$_KUPC$DATAPUMP_QUETAB_S" s WHERE s.subscriber_id = b.subscriber_id AND bitand(s.subscriber_type, 8) != 8 AND bitand(b.msg_state,2) = 0 AND q.qid = b.queue_id UNION ALL SELECT p.q_name QUEUE, p.msgid MSG_ID, p.corrid CORR_ID, p.priority MSG_PRIORITY, decode (b.msg_state, 2, 'SPILLED',
                                        3, 'DEFERRED SPILLED',
                                        NULL) MSG_STATE, cast(FROM_TZ(p.delay, '-06:00')
                   at time zone sessiontimezone as date) DELAY, p.delay DELAY_TIMESTAMP, p.expiration EXPIRATION, cast(FROM_TZ(p.enq_time, '-06:00')
                   at time zone sessiontimezone as date) ENQ_TIME, cast(FROM_TZ(p.enq_time, '-06:00')
                   at time zone sessiontimezone as timestamp)
                   ENQ_TIMESTAMP, p.enq_uid ENQ_USER_ID, p.enq_tid ENQ_TXN_ID, cast(FROM_TZ(p.deq_time, '-06:00')
                   at time zone sessiontimezone as date) DEQ_TIME, cast(FROM_TZ(p.deq_time, '-06:00')
                   at time zone sessiontimezone as timestamp)
                   DEQ_TIMESTAMP, p.deq_uid DEQ_USER_ID, p.deq_tid DEQ_TXN_ID, p.retry_count RETRY_COUNT, p.exception_qschema EXCEPTION_QUEUE_OWNER, p.exception_queue EXCEPTION_QUEUE, p.user_data USER_DATA, null PROPAGATED_MSGID, p.sender_name SENDER_NAME, p.sender_address SENDER_ADDRESS, p.sender_protocol SENDER_PROTOCOL, null ORIGINAL_MSGID, null ORIGINAL_QUEUE_NAME, null ORIGINAL_QUEUE_OWNER, null EXPIRATION_REASON, s.name CONSUMER_NAME, s.address ADDRESS, s.protocol PROTOCOL FROM "AQ$_KUPC$DATAPUMP_QUETAB_P" p, SYS.qt6612_BUFFER b, "AQ$_KUPC$DATAPUMP_QUETAB_S" s WHERE b.subscriber_id = s.subscriber_id AND bitand(s.subscriber_type, 8) != 8 AND bitand(b.msg_state,2) = 2 AND p.msgid = b.msg_id WITH READ ONLY;

CREATE OR REPLACE FORCE VIEW "AQ$KUPC$DATAPUMP_QUETAB_R"("QUEUE","NAME","ADDRESS","PROTOCOL","RULE","RULE_SET","TRANSFORMATION") AS 
SELECT queue_name QUEUE, s.name NAME , address ADDRESS , protocol PROTOCOL, rule_condition RULE, ruleset_name RULE_SET, trans_name TRANSFORMATION  FROM "AQ$_KUPC$DATAPUMP_QUETAB_S" s , sys.all_rules r WHERE (bitand(s.subscriber_type, 1) = 1) AND s.rule_name = r.rule_name and r.rule_owner = 'SYS'  WITH READ ONLY;

CREATE OR REPLACE FORCE VIEW "AQ$KUPC$DATAPUMP_QUETAB_S"("QUEUE","NAME","ADDRESS","PROTOCOL","TRANSFORMATION") AS 
SELECT queue_name QUEUE, name NAME , address ADDRESS , protocol PROTOCOL, trans_name TRANSFORMATION  FROM "AQ$_KUPC$DATAPUMP_QUETAB_S" s  WHERE (bitand(s.subscriber_type, 1) = 1)  WITH READ ONLY;

CREATE OR REPLACE FORCE VIEW "AQ$SCHEDULER$_JOBQTAB"("QUEUE","MSG_ID","CORR_ID","MSG_PRIORITY","MSG_STATE","DELAY","DELAY_TIMESTAMP","EXPIRATION","ENQ_TIME","ENQ_TIMESTAMP","ENQ_USER_ID","ENQ_TXN_ID","DEQ_TIME","DEQ_TIMESTAMP","DEQ_USER_ID","DEQ_TXN_ID","RETRY_COUNT","EXCEPTION_QUEUE_OWNER","EXCEPTION_QUEUE","USER_DATA","PROPAGATED_MSGID","SENDER_NAME","SENDER_ADDRESS","SENDER_PROTOCOL","ORIGINAL_MSGID","ORIGINAL_QUEUE_NAME","ORIGINAL_QUEUE_OWNER","EXPIRATION_REASON","CONSUMER_NAME","ADDRESS","PROTOCOL") AS 
SELECT  q_name QUEUE, qt.msgid MSG_ID, corrid CORR_ID,  priority MSG_PRIORITY,  decode(h.dequeue_time, NULL,	  
			      (decode(state, 0,   'READY',	     
                              		     1,   'WAIT',	     
					     2,   'PROCESSED',	     
                                             3,   'EXPIRED',
                                             8,   'DEFERRED')),      
  			      (decode(h.transaction_id,     
				      NULL, 'UNDELIVERABLE',	  
				      'PROCESSED'))) MSG_STATE,  cast(FROM_TZ(qt.delay, '-06:00')
                 at time zone sessiontimezone as date) delay,  delay DELAY_TIMESTAMP, expiration,  cast(FROM_TZ(qt.enq_time, '-06:00')
                 at time zone sessiontimezone as date) enq_time,  cast(FROM_TZ(qt.enq_time, '-06:00')
                 at time zone sessiontimezone as timestamp)
                 enq_timestamp,   enq_uid ENQ_USER_ID,  enq_tid ENQ_TXN_ID,  decode(h.transaction_id, NULL, TO_DATE(NULL), 	  
                        cast(FROM_TZ(h.dequeue_time, '-06:00')
                 at time zone sessiontimezone as date)) DEQ_TIME,  decode(h.transaction_id, NULL, TO_TIMESTAMP(NULL), 	  
                        cast(FROM_TZ(h.dequeue_time, '-06:00')
                 at time zone sessiontimezone as timestamp))
                 DEQ_TIMESTAMP,  h.dequeue_user DEQ_USER_ID,  h.transaction_id DEQ_TXN_ID,  h.retry_count retry_count,  decode (state, 0, exception_qschema, 
                                1, exception_qschema, 
                                2, exception_qschema,  
                                NULL) EXCEPTION_QUEUE_OWNER,  decode (state, 0, exception_queue, 
                                1, exception_queue, 
                                2, exception_queue,  
                                NULL) EXCEPTION_QUEUE,  user_data,  h.propagated_msgid PROPAGATED_MSGID,  sender_name  SENDER_NAME, sender_address  SENDER_ADDRESS, sender_protocol  SENDER_PROTOCOL, dequeue_msgid ORIGINAL_MSGID,  decode (h.dequeue_time, NULL, 
                   decode (state, 3, exception_queue, NULL),
                   decode (h.transaction_id, NULL, NULL, exception_queue)) 
                                ORIGINAL_QUEUE_NAME,  decode (h.dequeue_time, NULL, 
                   decode (state, 3, exception_qschema, NULL),
                   decode (h.transaction_id, NULL, NULL, exception_qschema)) 
                                ORIGINAL_QUEUE_OWNER,  decode(h.dequeue_time, NULL, 
                   decode(state, 3, 
                     decode(h.transaction_id, NULL, 'TIME_EXPIRATION',
                            'INVALID_TRANSACTION', NULL,
                            'MAX_RETRY_EXCEEDED'), NULL),
                   decode(h.transaction_id, NULL, 'PROPAGATION_FAILURE',
                          NULL)) EXPIRATION_REASON,  decode(h.subscriber#, 0, decode(h.name, '0', NULL,
							        h.name),
					  s.name) CONSUMER_NAME,  s.address ADDRESS,  s.protocol PROTOCOL  FROM "SCHEDULER$_JOBQTAB" qt, "AQ$_SCHEDULER$_JOBQTAB_H" h, "AQ$_SCHEDULER$_JOBQTAB_S" s  WHERE qt.msgid = h.msgid AND  ((h.subscriber# != 0 AND h.subscriber# = s.subscriber_id)  OR (h.subscriber# = 0 AND h.address# = s.subscriber_id)) AND qt.state != 7 WITH READ ONLY;

CREATE OR REPLACE FORCE VIEW "AQ$SCHEDULER$_JOBQTAB_R"("QUEUE","NAME","ADDRESS","PROTOCOL","RULE","RULE_SET","TRANSFORMATION") AS 
SELECT queue_name QUEUE, s.name NAME , address ADDRESS , protocol PROTOCOL, rule_condition RULE, ruleset_name RULE_SET, trans_name TRANSFORMATION  FROM "AQ$_SCHEDULER$_JOBQTAB_S" s , sys.all_rules r WHERE (bitand(s.subscriber_type, 1) = 1) AND s.rule_name = r.rule_name and r.rule_owner = 'SYS'  WITH READ ONLY;

CREATE OR REPLACE FORCE VIEW "AQ$SCHEDULER$_JOBQTAB_S"("QUEUE","NAME","ADDRESS","PROTOCOL","TRANSFORMATION") AS 
SELECT queue_name QUEUE, name NAME , address ADDRESS , protocol PROTOCOL, trans_name TRANSFORMATION  FROM "AQ$_SCHEDULER$_JOBQTAB_S" s  WHERE (bitand(s.subscriber_type, 1) = 1)  WITH READ ONLY;

CREATE OR REPLACE FORCE VIEW "CATALOG"("TNAME","CREATOR","TABLETYPE","REMARKS") AS 
select tname, creator, tabletype, remarks
  from  syscatalog_
  where creatorid not in (select user# from sys.user$ where name in
        ('SYS','SYSTEM'));

CREATE OR REPLACE FORCE VIEW "CHANGE_SETS"("SET_NAME","CHANGE_SOURCE_NAME","BEGIN_DATE","END_DATE","BEGIN_SCN","END_SCN","FRESHNESS_DATE","FRESHNESS_SCN","ADVANCE_ENABLED","IGNORE_DDL","CREATED","ROLLBACK_SEGMENT_NAME","ADVANCING","PURGING","LOWEST_SCN","TABLESPACE","CAPTURE_ENABLED","STOP_ON_DDL","CAPTURE_ERROR","CAPTURE_NAME","QUEUE_NAME","QUEUE_TABLE_NAME","APPLY_NAME","SET_DESCRIPTION","PUBLISHER") AS 
SELECT
   s.set_name, s.change_source_name, s.begin_date, s.end_date, s.begin_scn,
   s.end_scn, s.freshness_date, s.freshness_scn, s.advance_enabled,
   s.ignore_ddl, s.created, s.rollback_segment_name, s.advancing, s.purging,
   s.lowest_scn, s.tablespace, s.capture_enabled, s.stop_on_ddl,
   s.capture_error, s.capture_name, s.queue_name, s.queue_table_name,
   s.apply_name, s.set_description, s.publisher
  FROM sys.cdc_change_sets$ s;

CREATE OR REPLACE FORCE VIEW "CHANGE_SOURCES"("SOURCE_NAME","DBID","LOG_DIRECTORY","LOGFILE_PATTERN","SOURCE_DESCRIPTION","CREATED","SOURCE_TYPE","SOURCE_DATABASE","FIRST_SCN","PUBLISHER") AS 
SELECT
   s.source_name, s.dbid, s.logfile_location, s.logfile_suffix,
   s.source_description, s.created,
   decode(s.source_type, 2, 'AUTOLOG',
                         3, 'HOTLOG',
                         4, 'SYNCHRONOUS',
                            'UNKNOWN'),
   s.source_database, s.first_scn, s.publisher
  FROM sys.cdc_change_sources$ s;

CREATE OR REPLACE FORCE VIEW "CHANGE_TABLES"("CHANGE_TABLE_SCHEMA","CHANGE_TABLE_NAME","CHANGE_SET_NAME","SOURCE_SCHEMA_NAME","SOURCE_TABLE_NAME","CREATED","CREATED_SCN","CAPTURED_VALUES","PUB_ID") AS 
SELECT
   s.change_table_schema, s.change_table_name, s.change_set_name,
   s.source_schema_name, s.source_table_name, s.created, s.created_scn,
   s.captured_values, s.obj#
  FROM sys.cdc_change_tables$ s;

CREATE OR REPLACE FORCE VIEW "CODE_PIECES"("OBJ#","BYTES") AS 
select i.obj#, i.length
  from sys.idl_ub1$ i
  where i.part in (1,2)
union all
  select i.obj#, i.length
  from sys.idl_ub2$ i
  where i.part in (1,2)
union all
  select i.obj#, i.length
  from sys.idl_sb4$ i
  where i.part in (1,2)
union all
  select i.obj#, i.length
  from sys.idl_char$ i
  where i.part in (1,2);

CREATE OR REPLACE FORCE VIEW "CODE_SIZE"("OBJ#","BYTES") AS 
select c.obj#, sum(c.bytes)
  from sys.code_pieces c
  group by c.obj#;

CREATE OR REPLACE FORCE VIEW "COL"("TNAME","COLNO","CNAME","COLTYPE","WIDTH","SCALE","PRECISION","NULLS","DEFAULTVAL","CHARACTER_SET_NAME") AS 
select t.name, c.col#, c.name,
         decode(c.type#, 1, decode(c.charsetform, 2, 'NVARCHAR2', 'VARCHAR2'),
                         2, decode(c.scale, null,
                                   decode(c.precision#, null, 'NUMBER', 'FLOAT'),
                                  'NUMBER'),
                         8, 'LONG',
                         9, decode(c.charsetform, 2, 'NCHAR VARYING', 'VARCHAR'),
                         12, 'DATE',
                         23, 'RAW', 24, 'LONG RAW',
                         69, 'ROWID',
                         96, decode(c.charsetform, 2, 'NCHAR', 'CHAR'),
                         100, 'BINARY_FLOAT',
                         101, 'BINARY_DOUBLE',
                         105, 'MLSLABEL',
                         106, 'MLSLABEL',
                         111, 'REF '||'"'||ut.name||'"'||'.'||'"'||ot.name||'"',
                         112, decode(c.charsetform, 2, 'NCLOB', 'CLOB'),
                         113, 'BLOB', 114, 'BFILE', 115, 'CFILE',
                         121, '"'||ut.name||'"'||'.'||'"'||ot.name||'"',
                         122, '"'||ut.name||'"'||'.'||'"'||ot.name||'"',
                         123, '"'||ut.name||'"'||'.'||'"'||ot.name||'"',
                         178, 'TIME(' ||c.scale|| ')',
                         179, 'TIME(' ||c.scale|| ')' || ' WITH TIME ZONE',
                         180, 'TIMESTAMP(' ||c.scale|| ')',
                         181, 'TIMESTAMP(' ||c.scale|| ')'||' WITH TIME ZONE',
                         231, 'TIMESTAMP(' ||c.scale|| ')'||' WITH LOCAL TIME ZONE',
                         182, 'INTERVAL YEAR(' ||c.precision#||') TO MONTH',
                         183, 'INTERVAL DAY(' ||c.precision#||') TO SECOND(' ||
                               c.scale || ')',
                         208, 'UROWID',
                         'UNDEFINED'),
         c.length, c.scale, c.precision#,
         decode(sign(c.null$),-1,'NOT NULL - DISABLED', 0, 'NULL',
        'NOT NULL'), c.default$,
         decode(c.charsetform, 1, 'CHAR_CS',
                               2, 'NCHAR_CS',
                               3, NLS_CHARSET_NAME(c.charsetid),
                               4, 'ARG:'||c.charsetid)
  from  sys.col$ c, sys.obj$ t, sys.coltype$ ac, sys.obj$ ot, sys.user$ ut
  where t.obj# = c.obj#
  and   t.type# in (2, 3, 4)
  and   t.owner# = userenv('SCHEMAID')
  and   bitand(c.property, 32) = 0 /* not hidden column */
  and   c.obj# = ac.obj#(+)
  and   c.intcol# = ac.intcol#(+)
  and   ac.toid = ot.oid$(+)
  and   ot.owner# = ut.user#(+);

CREATE OR REPLACE FORCE VIEW "COLUMN_PRIVILEGES"("GRANTEE","OWNER","TABLE_NAME","COLUMN_NAME","GRANTOR","INSERT_PRIV","UPDATE_PRIV","REFERENCES_PRIV","CREATED") AS 
select ue.name, u.name, o.name, c.name, ur.name,
    decode(substr(lpad(sum(power(10, privilege#*2) +
      decode(mod(option$,2), 1, power(10, privilege#*2 + 1), 0)), 26, '0'), 13, 2),
      '00', 'N', '01', 'Y', '11', 'G', 'N'),
    decode(substr(lpad(sum(power(10, privilege#*2) +
      decode(mod(option$,2), 1, power(10, privilege#*2 + 1), 0)), 26, '0'), 5, 2),
      '00', 'N', '01', 'Y', '11', 'G', 'N'),
    decode(substr(lpad(sum(power(10, privilege#*2) +
      decode(mod(option$,2), 1, power(10, privilege#*2 + 1), 0)), 26, '0'), 3, 2),
      '00', 'N', '01', 'Y', '11', 'G', 'N'), min(null)
from sys.objauth$ oa, sys.col$ c,sys.obj$ o, sys.user$ ue, sys.user$ ur,
     sys.user$ u
where oa.col# is not null
  and oa.obj# = c.obj#
  and oa.col# = c.col#
  and bitand(c.property, 32) = 0 /* not hidden column */
  and oa.obj# = o.obj#
  and oa.grantor# = ur.user#
  and oa.grantee# = ue.user#
  and u.user# = o.owner#
  and (oa.grantor# = userenv('SCHEMAID') or
       oa.grantee# in (select kzsrorol from x$kzsro) or
       o.owner# = userenv('SCHEMAID'))
  group by u.name, o.name, c.name, ur.name, ue.name;

CREATE OR REPLACE FORCE VIEW "DATABASE_COMPATIBLE_LEVEL"("VALUE","DESCRIPTION") AS 
select value,description
from v$parameter
where name = 'compatible';

CREATE OR REPLACE FORCE VIEW "DATABASE_EXPORT_OBJECTS"("OBJECT_PATH","COMMENTS","NAMED") AS 
select OBJECT_PATH, COMMENTS, NAMED
    from dba_export_objects
    where het_type='DATABASE_EXPORT';

CREATE OR REPLACE FORCE VIEW "DATABASE_PROPERTIES"("PROPERTY_NAME","PROPERTY_VALUE","DESCRIPTION") AS 
select name, value$, comment$
  from props$;

CREATE OR REPLACE FORCE VIEW "DATABASE_SERVICES"("INSTANCE_NUMBER","INSTANCE_NAME","SERVICE_NAME") AS 
select i.instance_number instance_number,
         i.instance_name instance_name,
         s.name service_name
    from gv$active_services s, gv$instance i
    where s.inst_id = i.inst_id
  union all
  select i.instance_number instance_number,
         i.instance_name instance_name,
         '' service_name
    from gv$instance i;

CREATE OR REPLACE FORCE VIEW "DATAPUMP_DDL_TRANSFORM_PARAMS"("OBJECT_TYPE","PARAM_NAME") AS 
select  type, param
from    sys.metaxslparam$
where   model='ORACLE' and
        transform='DDL' and
        param!='DUMMY' and
        param not like 'PRS_%' and
        type!='*';

CREATE OR REPLACE FORCE VIEW "DATAPUMP_OBJECT_CONNECT"("OBJECT_TYPE","CONNECT_TYPE","NEED_EXECUTE","PARALLEL_LOAD") AS 
select unique a.type, decode(bitand(a.properties,8+16+128),
                24,  'PROC',
                8,   'SOFT',
                16,  'HARD', 'NONE'),
       decode(bitand(a.properties,64), 64, 1, 0),
       decode(bitand(a.properties,128), 128, 1, 0)
from sys.metaview$ a
where bitand(a.properties,2+4)=0;

CREATE OR REPLACE FORCE VIEW "DATAPUMP_PATHMAP"("HET_TYPE","OBJECT_PATH") AS 
select htype,name
 from sys.metapathmap$;

CREATE OR REPLACE FORCE VIEW "DATAPUMP_PATHS"("HET_TYPE","OBJECT_PATH","SEQ_NUM","FULL_PATH") AS 
select m.htype,m.name,m.seq#,
 (select m2.name from sys.metanametrans$ m2
  where m2.seq#=m.seq#
    and m2.htype=m.htype
    and bitand(m2.properties,1)=1)
 from sys.metanametrans$ m;

CREATE OR REPLACE FORCE VIEW "DATAPUMP_REMAP_OBJECTS"("PARAM","OBJECT_TYPE") AS 
select param,type
 from sys.metaxslparam$
 where model='ORACLE' and transform='MODIFY'
 and param like 'REMAP_%';

CREATE OR REPLACE FORCE VIEW "DATAPUMP_TABLE_DATA"("HET_TYPE","OBJECT_PATH","SEQ_NUM") AS 
select htype,name,seq#
 from sys.metanametrans$
 where properties!=0
 and name like '%/TABLE_DATA'
 and name not like '%INDEX%';

CREATE OR REPLACE FORCE VIEW "DBA_2PC_NEIGHBORS"("LOCAL_TRAN_ID","IN_OUT","DATABASE","DBUSER_OWNER","INTERFACE","DBID","SESS#","BRANCH") AS 
select  local_tran_id, 'in', parent_db, db_user, interface, parent_dbid,
        session_id, rawtohex(branch_id)
from    sys.ps1$
union all
select  local_tran_id, 'out', dblink, owner_name, interface, dbid,
        session_id, to_char(sub_session_id)
from    sys.pss1$;

CREATE OR REPLACE FORCE VIEW "DBA_2PC_PENDING"("LOCAL_TRAN_ID","GLOBAL_TRAN_ID","STATE","MIXED","ADVICE","TRAN_COMMENT","FAIL_TIME","FORCE_TIME","RETRY_TIME","OS_USER","OS_TERMINAL","HOST","DB_USER","COMMIT#") AS 
select  local_tran_id,
        nvl(global_oracle_id, global_tran_fmt||'.'||global_foreign_id),
        state, decode(status,'D','yes','no'), heuristic_dflt, tran_comment,
        fail_time, heuristic_time, reco_time,
        top_os_user, top_os_terminal, top_os_host, top_db_user, global_commit#
from    sys.pending_trans$;

CREATE OR REPLACE FORCE VIEW "DBA_ADVISOR_ACTIONS"("OWNER","TASK_ID","TASK_NAME","REC_ID","ACTION_ID","OBJECT_ID","COMMAND","COMMAND_ID","FLAGS","ATTR1","ATTR2","ATTR3","ATTR4","ATTR5","ATTR6","NUM_ATTR1","NUM_ATTR2","NUM_ATTR3","NUM_ATTR4","NUM_ATTR5","MESSAGE") AS 
select b.owner_name as owner,
             a.task_id as task_id,
             b.name as task_name,
             d.rec_id as rec_id,
             a.id as action_id,
             a.obj_id as object_id,
             c.command_name as command,
             a.command as command_id,
             a.flags as flags,
             a.attr1 as attr1,
             a.attr2 as attr2,
             a.attr3 as attr3,
             a.attr4 as attr4,
             a.attr5 as attr5,
             a.attr6 as attr6,
             a.num_attr1 as num_attr1,
             a.num_attr2 as num_attr2,
             a.num_attr3 as num_attr3,
             a.num_attr4 as num_attr4,
             a.num_attr5 as num_attr5,
             dbms_advisor.format_message_group(a.msg_id) as message
      from wri$_adv_actions a, wri$_adv_tasks b, x$keacmdn c,
           wri$_adv_rec_actions d
      where a.task_id = b.id
        and a.command = c.indx
        and d.task_id = a.task_id
        and d.act_id = a.id
        and bitand(b.property,6) = 4
        and ((b.advisor_id = 2 and bitand(a.flags,2048) = 0) or
             (b.advisor_id <> 2));

CREATE OR REPLACE FORCE VIEW "DBA_ADVISOR_COMMANDS"("COMMAND_ID","COMMAND_NAME") AS 
select a.indx as command_id,
             a.command_name as command_name
      from x$keacmdn a;

CREATE OR REPLACE FORCE VIEW "DBA_ADVISOR_DEFINITIONS"("ADVISOR_ID","ADVISOR_NAME","PROPERTY") AS 
select id as advisor_id,
             name as advisor_name,
             property as property
      from wri$_adv_definitions
      where id > 0;

CREATE OR REPLACE FORCE VIEW "DBA_ADVISOR_DEF_PARAMETERS"("ADVISOR_NAME","PARAMETER_NAME","PARAMETER_VALUE","PARAMETER_TYPE","IS_DEFAULT","IS_OUTPUT","IS_MODIFIABLE_ANYTIME") AS 
select b.name as advisor_name,
             a.name as parameter_name,
             a.value as parameter_value,
             decode(a.datatype, 1, 'NUMBER',
                                2, 'STRING',
                                3, 'STRINGLIST',
                                4, 'TABLE',
                                5, 'TABLELIST',
                                'UNKNOWN')
                 as parameter_type,
             decode(bitand(a.flags,2), 0, 'Y', 'N') as is_default,
             decode(bitand(a.flags,4), 0, 'N', 'Y') as is_output,
             decode(bitand(a.flags,8), 0, 'N', 'Y') as is_modifiable_anytime
      from wri$_adv_def_parameters a, wri$_adv_definitions b
      where a.advisor_id = b.id
        and bitand(a.flags,1) = 0;

CREATE OR REPLACE FORCE VIEW "DBA_ADVISOR_DIRECTIVES"("OWNER","TASK_ID","TASK_NAME","SOURCE_TASK_ID","DIRECTIVE_ID","REC_OBJ_OWNER","REC_OBJ_NAME","REC_ID","REC_ACTION_ID","COMMAND","ATTR1","ATTR2","ATTR3","ATTR4","ATTR5") AS 
select b.owner_name as owner,
             a.task_id as task_id,
             b.name as task_name,
             a.src_task_id as source_task_id,
             a.id as directive_id,
             a.obj_owner as rec_obj_owner,
             a.obj_name as rec_obj_name,
             a.rec_id as rec_id,
             a.rec_action_id as rec_action_id,
             c.command_name as command,
             a.attr1 as attr1,
             a.attr2 as attr2,
             a.attr3 as attr3,
             a.attr4 as attr4,
             a.attr5 as attr5
      from wri$_adv_directives a, wri$_adv_tasks b, x$keacmdn c
      where a.task_id = b.id
        and a.command = c.indx
        and bitand(b.property,6) = 4;

CREATE OR REPLACE FORCE VIEW "DBA_ADVISOR_FINDINGS"("OWNER","TASK_ID","TASK_NAME","FINDING_ID","TYPE","PARENT","OBJECT_ID","IMPACT_TYPE","IMPACT","MESSAGE","MORE_INFO") AS 
select b.owner_name as owner,
            a.task_id as task_id,
            b.name as task_name,
            a.id as finding_id,
            decode (a.type, 1, 'PROBLEM',
                            2, 'SYMPTOM',
                            3, 'ERROR',
                            4, 'INFORMATION')  as type,
            a.parent as parent,
            a.obj_id as object_id,
            dbms_advisor.format_message_group(a.impact_msg_id) as impact_type,
            a.impact_val as impact,
            dbms_advisor.format_message_group(a.msg_id) as message,
            dbms_advisor.format_message_group(a.more_info_id) as more_info
    from wri$_adv_findings a, wri$_adv_tasks b
    where a.task_id = b.id
        and bitand(b.property,6) = 4;

CREATE OR REPLACE FORCE VIEW "DBA_ADVISOR_JOURNAL"("OWNER","TASK_ID","TASK_NAME","JOURNAL_ENTRY_SEQ","JOURNAL_ENTRY_TYPE","JOURNAL_ENTRY") AS 
select b.owner_name as owner,
             a.task_id as task_id,
             b.name as task_name,
             a.seq_id as journal_entry_seq,
             decode(a.type, 1, 'INFORMATION',
                            2, 'WARNING',
                            3, 'ERROR',
                            4, 'FATAL',
                            5, 'DEBUG1',
                            6, 'DEBUG2',
                            7, 'DEBUG3',
                            8, 'DEBUG4',
                            9, 'DEBUG5') as journal_entry_type,
             dbms_advisor.format_message_group(a.msg_id) as journal_entry
      from wri$_adv_journal a, wri$_adv_tasks b
      where a.task_id = b.id
        and bitand(b.property,4) = 4;

CREATE OR REPLACE FORCE VIEW "DBA_ADVISOR_LOG"("OWNER","TASK_ID","TASK_NAME","EXECUTION_START","EXECUTION_END","STATUS","STATUS_MESSAGE","PCT_COMPLETION_TIME","PROGESS_METRIC","METRIC_UNITS","ACTIVITY_COUNTER","RECOMMENDATION_COUNT","ERROR_MESSAGE") AS 
select a.owner_name as owner,
         a.id as task_id,
         a.name as task_name,
         a.exec_start as execution_start,
         a.exec_end as execution_end,
         decode(a.status, 1, 'INITIAL',
                          2, 'EXECUTING',
                          3, 'COMPLETED',
                          4, 'INTERRUPTED',
                          5, 'CANCELLED',
                          6, 'FATAL ERROR') as status,
         dbms_advisor.format_message_group(a.status_msg_id) as status_message,
         a.pct_completion_time as pct_completion_time,
         a.progress_metric as progess_metric,
         a.metric_units as metric_units,
         a.activity_counter as activity_counter,
         a.rec_count as recommendation_count,
         dbms_advisor.format_message_group(a.error_msg#) as error_message
  from wri$_adv_tasks a
  where bitand(a.property,6) = 4;

CREATE OR REPLACE FORCE VIEW "DBA_ADVISOR_OBJECTS"("OWNER","OBJECT_ID","TYPE","TYPE_ID","TASK_ID","TASK_NAME","ATTR1","ATTR2","ATTR3","ATTR4","ATTR5") AS 
select b.owner_name as owner,
            a.id as object_id,
            d.object_type as type,
            a.type as type_id,
            a.task_id as task_id,
            b.name as task_name,
            a.attr1 as attr1,
            a.attr2 as attr2,
            a.attr3 as attr3,
            a.attr4 as attr4,
            a.attr5 as attr5
      from wri$_adv_objects a, wri$_adv_tasks b,x$keaobjt d
      where a.task_id = b.id
        and d.indx = a.type;

CREATE OR REPLACE FORCE VIEW "DBA_ADVISOR_OBJECT_TYPES"("OBJECT_TYPE_ID","OBJECT_TYPE") AS 
select a.indx as object_type_id,
             a.object_type as object_type
      from x$keaobjt a;

CREATE OR REPLACE FORCE VIEW "DBA_ADVISOR_PARAMETERS"("OWNER","TASK_ID","TASK_NAME","PARAMETER_NAME","PARAMETER_VALUE","PARAMETER_TYPE","IS_DEFAULT","IS_OUTPUT","IS_MODIFIABLE_ANYTIME") AS 
select b.owner_name as owner,
             a.task_id as task_id,
             b.name as task_name,
             a.name as parameter_name,
             a.value as parameter_value,
             decode(a.datatype, 1, 'NUMBER',
                                2, 'STRING',
                                3, 'STRINGLIST',
                                4, 'TABLE',
                                5, 'TABLELIST',
                                'UNKNOWN')
                 as parameter_type,
             decode(bitand(a.flags,2), 0, 'Y', 'N') as is_default,
             decode(bitand(a.flags,4), 0, 'N', 'Y') as is_output,
             decode(bitand(a.flags,8), 0, 'N', 'Y') as is_modifiable_anytime
      from wri$_adv_parameters a, wri$_adv_tasks b
      where a.task_id = b.id
        and bitand(b.property,4) = 4
        and bitand(a.flags,1) = 0;

CREATE OR REPLACE FORCE VIEW "DBA_ADVISOR_PARAMETERS_PROJ"("TASK_ID","PARAMETER_NAME","PARAMETER_VALUE","PARAMETER_TYPE","IS_DEFAULT","IS_OUTPUT","IS_MODIFIABLE_ANYTIME") AS 
select a.task_id as task_id,
             a.name as parameter_name,
             a.value as parameter_value,
             decode(a.datatype, 1, 'NUMBER',
                                2, 'STRING',
                                3, 'STRINGLIST',
                                4, 'TABLE',
                                5, 'TABLELIST',
                                'UNKNOWN')
                 as parameter_type,
             decode(bitand(a.flags,2), 0, 'Y', 'N') as is_default,
             decode(bitand(a.flags,4), 0, 'N', 'Y') as is_output,
             decode(bitand(a.flags,8), 0, 'N', 'Y') as is_modifiable_anytime
      from wri$_adv_parameters a;

CREATE OR REPLACE FORCE VIEW "DBA_ADVISOR_RATIONALE"("OWNER","TASK_ID","TASK_NAME","REC_ID","RATIONALE_ID","IMPACT_TYPE","IMPACT","MESSAGE","OBJECT_ID","TYPE","ATTR1","ATTR2","ATTR3","ATTR4","ATTR5") AS 
select b.owner_name as owner,
             a.task_id as task_id,
             b.name as task_name,
             a.rec_id as rec_id,
             a.id as rationale_id,
             dbms_advisor.format_message_group(a.impact_msg_id) as impact_type,
             a.impact_val as impact,
             dbms_advisor.format_message_group(a.msg_id) as message,
             a.obj_id as object_id,
             a.type,
             a.attr1 as attr1,
             a.attr2 as attr2,
             a.attr3 as attr3,
             a.attr4 as attr4,
             a.attr5 as attr5
      from wri$_adv_rationale a, wri$_adv_tasks b
      where a.task_id = b.id
        and bitand(b.property,6) = 4;

CREATE OR REPLACE FORCE VIEW "DBA_ADVISOR_RECOMMENDATIONS"("OWNER","REC_ID","TASK_ID","TASK_NAME","FINDING_ID","TYPE","RANK","PARENT_REC_IDS","BENEFIT_TYPE","BENEFIT","ANNOTATION_STATUS") AS 
select b.owner_name as owner,
            a.id as rec_id,
            a.task_id as task_id,
            b.name as task_name,
            a.finding_id as finding_id,
            a.type,
            a.rank as rank,
            a.parent_recs as parent_rec_ids,
            dbms_advisor.format_message_group(a.benefit_msg_id) as benefit_type,
            a.benefit_val as benefit,
            decode(annotation, 1, 'ACCEPT',
                               2, 'REJECT',
                               3, 'IGNORE',
                               4, 'IMPLEMENTED') as annotation_status
     from wri$_adv_recommendations a, wri$_adv_tasks b
     where a.task_id = b.id and
          bitand(b.property,6) = 4;

CREATE OR REPLACE FORCE VIEW "DBA_ADVISOR_SQLA_REC_SUM"("OWNER","TASK_ID","TASK_NAME","REC_ID","TOTAL_STMTS","TOTAL_PRECOST","TOTAL_POSTCOST") AS 
select max(b.owner_name) as owner,
             max(a.task_id) as task_id,
             max(b.name) as task_name,
             max(a.rec_id) as rec_id,
             count(*) as total_stmts,
             sum(a.pre_cost) as total_precost,
             sum(a.post_cost) as total_postcost
      from wri$_adv_sqla_stmts a, wri$_adv_tasks b
      where a.task_id = b.id
        and bitand(b.property,2) = 0
      group by a.task_id, a.rec_id;

CREATE OR REPLACE FORCE VIEW "DBA_ADVISOR_SQLA_WK_MAP"("OWNER","TASK_ID","TASK_NAME","WORKLOAD_ID","WORKLOAD_NAME") AS 
select b.owner_name as owner,
             a.task_id as task_id,
             b.name as task_name,
             a.workload_id as workload_id,
             d.name as workload_name
      from wri$_adv_sqla_map a, wri$_adv_tasks b,wri$_adv_tasks d
      where a.task_id = b.id
        and d.id = a.workload_id;

CREATE OR REPLACE FORCE VIEW "DBA_ADVISOR_SQLA_WK_STMTS"("OWNER","TASK_ID","TASK_NAME","WORKLOAD_ID","WORKLOAD_NAME","SQL_ID","HASH_VALUE","USERNAME","MODULE","ACTION","CPU_TIME","BUFFER_GETS","DISK_READS","ELAPSED_TIME","ROWS_PROCESSED","EXECUTIONS","PRECOST","POSTCOST","LAST_EXECUTION_DATE","PRIORITY","COMMAND_TYPE","STAT_PERIOD","SQL_TEXT","IMPORTANCE","REC_ID") AS 
select a.owner_name as owner,
             c.task_id as task_id,
             a.name as task_name,
             b.workload_id as workload_id,
             e.name as workload_name,
             b.sql_id as sql_id,
             b.hash_value as hash_value,
             b.username as username,
             b.module as module,
             b.action as action,
             b.cpu_time as cpu_time,
             b.buffer_gets as buffer_gets,
             b.disk_reads as disk_reads,
             b.elapsed_time as elapsed_time,
             b.rows_processed as rows_processed,
             b.executions as executions,
             c.pre_cost as precost,
             c.post_cost as postcost,
             b.last_execution_date as last_execution_date,
             b.priority as priority,
             b.command_type as command_type,
             b.stat_period as stat_period,
             b.sql_text as sql_text,
             c.imp as importance,
             c.rec_id as rec_id
      from wri$_adv_tasks a, wri$_adv_sqlw_stmts b,
           wri$_adv_sqla_stmts c, wri$_adv_tasks e
      where a.id = c.task_id
        and b.workload_id = c.workload_id
        and e.id = b.workload_id
        and c.sql_id = b.sql_id
        and bitand(a.property,2) = 0;

CREATE OR REPLACE FORCE VIEW "DBA_ADVISOR_SQLW_COLVOL"("OWNER","WORKLOAD_ID","WORKLOAD_NAME","TABLE_OWNER","TABLE_NAME","COLUMN_NAME","UPDATE_FREQ","UPDATED_ROWS") AS 
select c.owner_name as owner,
             b.workload_id as workload_id,
             c.name as workload_name,
             e.owner_name as table_owner,
             e.table_name as table_name,
             d.name as column_name,
             b.upd_freq as update_freq,
             b.upd_rows as updated_rows
      from wri$_adv_sqlw_colvol b, wri$_adv_tasks c, sys.col$ d,
           wri$_adv_sqlw_tabvol e
      where c.id = b.workload_id
        and d.col# = b.col#
        and e.table# = b.table#
        and bitand(c.property,2) = 0
        and c.advisor_id = 6;

CREATE OR REPLACE FORCE VIEW "DBA_ADVISOR_SQLW_JOURNAL"("OWNER","WORKLOAD_ID","WORKLOAD_NAME","JOURNAL_ENTRY_SEQ","JOURNAL_ENTRY_TYPE","JOURNAL_ENTRY") AS 
select b.owner_name as owner,
             a.task_id as workload_id,
             b.name as workload_name,
             a.seq_id as journal_entry_seq,
             decode(a.type,1,'INFORMATIONAL',2,'WARNING',3,'ERROR',
                           4,'FATAL',5,'DEBUG1',6,'DEBUG2',7,'DEBUG3',
                           8,'DEBUG4',9,'DEBUG5') as journal_entry_type,
             dbms_advisor.format_message_group(a.msg_id) as journal_entry
      from wri$_adv_journal a, wri$_adv_tasks b
      where a.task_id = b.id
        and b.advisor_id = 6;

CREATE OR REPLACE FORCE VIEW "DBA_ADVISOR_SQLW_PARAMETERS"("OWNER","WORKLOAD_ID","WORKLOAD_NAME","PARAMETER_NAME","PARAMETER_VALUE","PARAMETER_TYPE") AS 
select b.owner_name as owner,
             a.task_id as workload_id,
             b.name as workload_name,
             a.name as parameter_name,
             a.value as parameter_value,
             decode(a.datatype,1,'NUMBER',2,'STRING',3,'STRINGLIST',
                               4,'TABLE',5,'TABLELIST','UNKNOWN')
                 as parameter_type
      from wri$_adv_parameters a, wri$_adv_tasks b
      where a.task_id = b.id
        and b.advisor_id = 6
        and bitand(a.flags,1) = 0;

CREATE OR REPLACE FORCE VIEW "DBA_ADVISOR_SQLW_STMTS"("OWNER","WORKLOAD_ID","WORKLOAD_NAME","SQL_ID","HASH_VALUE","USERNAME","MODULE","ACTION","CPU_TIME","BUFFER_GETS","DISK_READS","ELAPSED_TIME","ROWS_PROCESSED","EXECUTIONS","OPTIMIZER_COST","LAST_EXECUTION_DATE","PRIORITY","COMMAND_TYPE","STAT_PERIOD","SQL_TEXT","VALID") AS 
select c.owner_name as owner,
             b.workload_id as workload_id,
             c.name as workload_name,
             b.sql_id as sql_id,
             b.hash_value as hash_value,
             b.username as username,
             b.module as module,
             b.action as action,
             b.cpu_time as cpu_time,
             b.buffer_gets as buffer_gets,
             b.disk_reads as disk_reads,
             b.elapsed_time as elapsed_time,
             b.rows_processed as rows_processed,
             b.executions as executions,
             b.optimizer_cost as optimizer_cost,
             b.last_execution_date as last_execution_date,
             b.priority as priority,
             b.command_type as command_type,
             b.stat_period as stat_period,
             b.sql_text as sql_text,
             b.valid as valid
      from wri$_adv_sqlw_stmts b,wri$_adv_tasks c
      where b.workload_id = c.id
        and bitand(c.property,2) = 0
        and c.advisor_id = 6;

CREATE OR REPLACE FORCE VIEW "DBA_ADVISOR_SQLW_SUM"("OWNER","WORKLOAD_ID","WORKLOAD_NAME","DESCRIPTION","CREATE_DATE","MODIFY_DATE","NUM_SELECT_STMT","NUM_UPDATE_STMT","NUM_DELETE_STMT","NUM_INSERT_STMT","NUM_MERGE_STMT","SOURCE","HOW_CREATED","DATA_SOURCE","READ_ONLY") AS 
select b.owner_name as owner,
             b.id as workload_id,
             b.name as workload_name,
             b.description as description,
             b.ctime as create_date,
             b.mtime as modify_date,
             a.num_select as num_select_stmt,
             a.num_update as num_update_stmt,
             a.num_delete as num_delete_stmt,
             a.num_insert as num_insert_stmt,
             a.num_merge as num_merge_stmt,
             b.source as source,
             b.how_created as how_created,
             a.data_source as data_source,
             decode(bitand(b.property,1),1,'TRUE','FALSE') as read_only
      from wri$_adv_sqlw_sum a, wri$_adv_tasks b
      where a.workload_id = b.id
        and bitand(b.property,2) = 0
        and b.advisor_id = 6;

CREATE OR REPLACE FORCE VIEW "DBA_ADVISOR_SQLW_TABLES"("OWNER","WORKLOAD_ID","WORKLOAD_NAME","SQL_ID","TABLE_OWNER","TABLE_NAME") AS 
select d.owner_name as owner,
             b.workload_id as workload_id,
             d.name as workload_name,
             b.sql_id as sql_id,
             b.table_owner  as table_owner,
             b.table_name as table_name
      from wri$_adv_sqlw_tables b, wri$_adv_tasks d
      where d.id = b.workload_id
        and bitand(d.property,2) = 0
        and d.advisor_id = 6;

CREATE OR REPLACE FORCE VIEW "DBA_ADVISOR_SQLW_TABVOL"("OWNER","WORKLOAD_ID","WORKLOAD_NAME","TABLE_OWNER","TABLE_NAME","UPDATE_FREQ","INSERT_FREQ","DELETE_FREQ","DIRECT_LOAD_FREQ","UPDATED_ROWS","INSERTED_ROWS","DELETED_ROWS","DIRECT_LOAD_ROWS") AS 
select c.owner_name as owner,
             b.workload_id as workload_id,
             c.name as workload_name,
             b.owner_name as table_owner,
             b.table_name as table_name,
             b.upd_freq as update_freq,
             b.ins_freq as insert_freq,
             b.del_freq as delete_freq,
             b.dir_freq as direct_load_freq,
             b.upd_rows as updated_rows,
             b.ins_rows as inserted_rows,
             b.del_rows as deleted_rows,
             b.dir_rows as direct_load_rows
      from wri$_adv_sqlw_tabvol b, wri$_adv_tasks c
      where c.id = b.workload_id
        and bitand(c.property,2) = 0
        and c.advisor_id = 6;

CREATE OR REPLACE FORCE VIEW "DBA_ADVISOR_SQLW_TEMPLATES"("OWNER","WORKLOAD_ID","WORKLOAD_NAME","DESCRIPTION","CREATE_DATE","MODIFY_DATE","SOURCE","READ_ONLY") AS 
select b.owner_name as owner,
             b.id as workload_id,
             b.name as workload_name,
             b.description as description,
             b.ctime as create_date,
             b.mtime as modify_date,
             b.source as source,
             decode(bitand(b.property,1),1,'TRUE','FALSE') as read_only
      from wri$_adv_sqlw_sum a, wri$_adv_tasks b
      where a.workload_id = b.id
        and bitand(b.property,2) = 2
        and b.advisor_id = 6;

CREATE OR REPLACE FORCE VIEW "DBA_ADVISOR_TASKS"("OWNER","TASK_ID","TASK_NAME","DESCRIPTION","ADVISOR_NAME","CREATED","LAST_MODIFIED","PARENT_TASK_ID","PARENT_REC_ID","EXECUTION_START","EXECUTION_END","STATUS","STATUS_MESSAGE","PCT_COMPLETION_TIME","PROGESS_METRIC","METRIC_UNITS","ACTIVITY_COUNTER","RECOMMENDATION_COUNT","ERROR_MESSAGE","SOURCE","HOW_CREATED","READ_ONLY","ADVISOR_ID") AS 
select a.owner_name as owner,
             a.id as task_id,
             a.name as task_name,
             a.description as description,
             a.advisor_name as advisor_name,
             a.ctime as created,
             a.mtime as last_modified,
             a.parent_id as parent_task_id,
             a.parent_rec_id as parent_rec_id,
             a.exec_start as execution_start,
             a.exec_end as execution_end,
             decode(a.status, 1, 'INITIAL',
                              2, 'EXECUTING',
                              3, 'COMPLETED',
                              4, 'INTERRUPTED',
                              5, 'CANCELLED',
                              6, 'FATAL ERROR') as status,
             dbms_advisor.format_message_group(a.status_msg_id) as status_message,
             a.pct_completion_time as pct_completion_time,
             a.progress_metric as progess_metric,
             a.metric_units as metric_units,
             a.activity_counter as activity_counter,
             a.rec_count as recommendation_count,
             dbms_advisor.format_message_group(a.error_msg#) as error_message,
             a.source as source,
             a.how_created as how_created,
             decode(bitand(a.property,1), 1, 'TRUE', 'FALSE') as read_only,
             a.advisor_id as advisor_id
      from wri$_adv_tasks a
      where bitand(a.property,6) = 4;

CREATE OR REPLACE FORCE VIEW "DBA_ADVISOR_TEMPLATES"("OWNER","TASK_ID","TASK_NAME","DESCRIPTION","ADVISOR_NAME","CREATED","LAST_MODIFIED","SOURCE","READ_ONLY") AS 
select a.owner_name as owner,
             a.id as task_id,
             a.name as task_name,
             a.description as description,
             a.advisor_name as advisor_name,
             a.ctime as created,
             a.mtime as last_modified,
             a.source as source,
             decode(bitand(a.property,1), 1, 'TRUE', 'FALSE') as read_only
      from wri$_adv_tasks a
      where bitand(a.property,6) = 6;

CREATE OR REPLACE FORCE VIEW "DBA_ADVISOR_USAGE"("ADVISOR_ID","LAST_EXEC_TIME","NUM_EXECS") AS 
select a.advisor_id,
            a.last_exec_time,
            a.num_execs
     from sys.wri$_adv_usage a
     where a.advisor_id > 0 ;

CREATE OR REPLACE FORCE VIEW "DBA_ALERT_ARGUMENTS"("SEQUENCE_ID","REASON_MESSAGE_ID","REASON_ARGUMENT_COUNT","REASON_ARGUMENT_1","REASON_ARGUMENT_2","REASON_ARGUMENT_3","REASON_ARGUMENT_4","REASON_ARGUMENT_5","ACTION_MESSAGE_ID","ACTION_ARGUMENT_COUNT","ACTION_ARGUMENT_1","ACTION_ARGUMENT_2","ACTION_ARGUMENT_3","ACTION_ARGUMENT_4","ACTION_ARGUMENT_5") AS 
SELECT sequence_id,
            mid_keltsd AS reason_message_id,
            npm_keltsd AS reason_argument_count,
            reason_argument_1,
            reason_argument_2,
            reason_argument_3,
            reason_argument_4,
            reason_argument_5,
            amid_keltsd AS action_message_id,
            anpm_keltsd AS action_argument_count,
            action_argument_1,
            action_argument_2,
            action_argument_3,
            action_argument_4,
            action_argument_5
    FROM wri$_alert_outstanding, X$KELTSD
    WHERE reason_id = rid_keltsd;

CREATE OR REPLACE FORCE VIEW "DBA_ALERT_HISTORY"("SEQUENCE_ID","REASON_ID","OWNER","OBJECT_NAME","SUBOBJECT_NAME","OBJECT_TYPE","REASON","TIME_SUGGESTED","CREATION_TIME","SUGGESTED_ACTION","ADVISOR_NAME","METRIC_VALUE","MESSAGE_TYPE","MESSAGE_GROUP","MESSAGE_LEVEL","HOSTING_CLIENT_ID","MODULE_ID","PROCESS_ID","HOST_ID","HOST_NW_ADDR","INSTANCE_NAME","INSTANCE_NUMBER","USER_ID","EXECUTION_CONTEXT_ID","ERROR_INSTANCE_ID","RESOLUTION") AS 
select sequence_id,
            reason_id,
            owner,
            object_name,
            subobject_name,
            typnam_keltosd AS object_type,
            dbms_server_alert.expand_message(userenv('LANGUAGE'),
                                             mid_keltsd,
                                             reason_argument_1,
                                             reason_argument_2,
                                             reason_argument_3,
                                             reason_argument_4,
                                             reason_argument_5) AS reason,
            time_suggested,
            creation_time,
            dbms_server_alert.expand_message(userenv('LANGUAGE'),
                                             amid_keltsd,
                                             action_argument_1,
                                             action_argument_2,
                                             action_argument_3,
                                             action_argument_4,
                                             action_argument_5)
              AS suggested_action,
            advisor_name,
            metric_value,
            decode(message_level, 32, 'Notification', 'Warning')
              AS message_type,
            nam_keltgsd AS message_group,
            message_level,
            hosting_client_id,
            mdid_keltsd AS module_id,
            process_id,
            host_id,
            host_nw_addr,
            instance_name,
            instance_number,
            user_id,
            execution_context_id,
            error_instance_id,
            decode(resolution, 1, 'cleared', 'N/A') AS resolution
  FROM wri$_alert_history, X$KELTSD, X$KELTOSD, X$KELTGSD,
       dba_advisor_definitions
  WHERE reason_id = rid_keltsd
    AND otyp_keltsd = typid_keltosd
    AND grp_keltsd = id_keltgsd
    AND aid_keltsd = advisor_id(+);

CREATE OR REPLACE FORCE VIEW "DBA_ALL_TABLES"("OWNER","TABLE_NAME","TABLESPACE_NAME","CLUSTER_NAME","IOT_NAME","PCT_FREE","PCT_USED","INI_TRANS","MAX_TRANS","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENTS","MAX_EXTENTS","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","LOGGING","BACKED_UP","NUM_ROWS","BLOCKS","EMPTY_BLOCKS","AVG_SPACE","CHAIN_CNT","AVG_ROW_LEN","AVG_SPACE_FREELIST_BLOCKS","NUM_FREELIST_BLOCKS","DEGREE","INSTANCES","CACHE","TABLE_LOCK","SAMPLE_SIZE","LAST_ANALYZED","PARTITIONED","IOT_TYPE","OBJECT_ID_TYPE","TABLE_TYPE_OWNER","TABLE_TYPE","TEMPORARY","SECONDARY","NESTED","BUFFER_POOL","ROW_MOVEMENT","GLOBAL_STATS","USER_STATS","DURATION","SKIP_CORRUPT","MONITORING","CLUSTER_OWNER","DEPENDENCIES","COMPRESSION","DROPPED") AS 
select OWNER, TABLE_NAME, TABLESPACE_NAME, CLUSTER_NAME, IOT_NAME,
     PCT_FREE, PCT_USED,
     INI_TRANS, MAX_TRANS,
     INITIAL_EXTENT, NEXT_EXTENT,
     MIN_EXTENTS, MAX_EXTENTS, PCT_INCREASE,
     FREELISTS, FREELIST_GROUPS, LOGGING,
     BACKED_UP, NUM_ROWS, BLOCKS, EMPTY_BLOCKS,
     AVG_SPACE, CHAIN_CNT, AVG_ROW_LEN,
     AVG_SPACE_FREELIST_BLOCKS, NUM_FREELIST_BLOCKS,
     DEGREE, INSTANCES, CACHE, TABLE_LOCK,
     SAMPLE_SIZE, LAST_ANALYZED, PARTITIONED,
     IOT_TYPE, NULL, NULL, NULL, TEMPORARY, SECONDARY, NESTED,
     BUFFER_POOL, ROW_MOVEMENT,
     GLOBAL_STATS, USER_STATS, DURATION, SKIP_CORRUPT, MONITORING,
     CLUSTER_OWNER, DEPENDENCIES, COMPRESSION, DROPPED
from dba_tables
union all
select "OWNER","TABLE_NAME","TABLESPACE_NAME","CLUSTER_NAME","IOT_NAME","PCT_FREE","PCT_USED","INI_TRANS","MAX_TRANS","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENTS","MAX_EXTENTS","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","LOGGING","BACKED_UP","NUM_ROWS","BLOCKS","EMPTY_BLOCKS","AVG_SPACE","CHAIN_CNT","AVG_ROW_LEN","AVG_SPACE_FREELIST_BLOCKS","NUM_FREELIST_BLOCKS","DEGREE","INSTANCES","CACHE","TABLE_LOCK","SAMPLE_SIZE","LAST_ANALYZED","PARTITIONED","IOT_TYPE","OBJECT_ID_TYPE","TABLE_TYPE_OWNER","TABLE_TYPE","TEMPORARY","SECONDARY","NESTED","BUFFER_POOL","ROW_MOVEMENT","GLOBAL_STATS","USER_STATS","DURATION","SKIP_CORRUPT","MONITORING","CLUSTER_OWNER","DEPENDENCIES","COMPRESSION","DROPPED" from dba_object_tables;

CREATE OR REPLACE FORCE VIEW "DBA_ANALYZE_OBJECTS"("OWNER","OBJECT_NAME","OBJECT_TYPE") AS 
select u.name, o.name, decode(o.type#, 2, 'TABLE', 3, 'CLUSTER')
       from sys.user$ u, sys.obj$ o, sys.tab$ t
       where o.owner# = u.user#
       and   o.obj# = t.obj# (+)
       and   t.bobj# is null
       and   o.type# in (2,3)
       and   o.linkname is null;

CREATE OR REPLACE FORCE VIEW "DBA_APPLICATION_ROLES"("ROLE","SCHEMA","PACKAGE") AS 
select u.name, schema, package  from
user$ u, approle$ a
where  u.user# = a.role#;

CREATE OR REPLACE FORCE VIEW "DBA_APPLY"("APPLY_NAME","QUEUE_NAME","QUEUE_OWNER","APPLY_CAPTURED","RULE_SET_NAME","RULE_SET_OWNER","APPLY_USER","APPLY_DATABASE_LINK","APPLY_TAG","DDL_HANDLER","PRECOMMIT_HANDLER","MESSAGE_HANDLER","STATUS","MAX_APPLIED_MESSAGE_NUMBER","NEGATIVE_RULE_SET_NAME","NEGATIVE_RULE_SET_OWNER","STATUS_CHANGE_TIME","ERROR_NUMBER","ERROR_MESSAGE") AS 
select ap.apply_name, ap.queue_name, ap.queue_owner,
       decode(bitand(ap.flags, 1), 1, 'YES',
                                   0, 'NO'),
       ap.ruleset_name, ap.ruleset_owner,
       u.name, ap.apply_dblink, ap.apply_tag, ap.ddl_handler,
       ap.precommit_handler, ap.message_handler,
       decode(ap.status, 1, 'DISABLED',
                         2, 'ENABLED',
                         4, 'ABORTED', 'UNKNOWN'),
       ap.spare1,
       ap.negative_ruleset_name, ap.negative_ruleset_owner,
       ap.status_change_time, ap.error_number, ap.error_message
  from "_DBA_APPLY" ap, sys.user$ u
 where  ap.apply_userid = u.user# (+);

CREATE OR REPLACE FORCE VIEW "DBA_APPLY_CONFLICT_COLUMNS"("OBJECT_OWNER","OBJECT_NAME","METHOD_NAME","RESOLUTION_COLUMN","COLUMN_NAME","APPLY_DATABASE_LINK") AS 
select u.username, o.name, eh.method_name, eh.resolution_column,
       ac.column_name, NULL
  from sys.obj$ o, "_DBA_APPLY_CONF_HDLR_COLUMNS" ac,
       "_DBA_APPLY_ERROR_HANDLER" eh, dba_users u
 where o.obj# = ac.object_number
   and o.obj# = eh.object_number
   and ac.resolution_id = eh.resolution_id
   and u.user_id = o.owner#
   and o.remoteowner is NULL
union
select o.remoteowner, o.name, eh.method_name, eh.resolution_column,
       ac.column_name, o.linkname
  from sys.obj$ o, apply$_conf_hdlr_columns ac, apply$_error_handler eh
 where o.obj# = ac.object_number
   and o.obj# = eh.object_number
   and ac.resolution_id = eh.resolution_id
   and o.remoteowner is not NULL;

CREATE OR REPLACE FORCE VIEW "DBA_APPLY_DML_HANDLERS"("OBJECT_OWNER","OBJECT_NAME","OPERATION_NAME","USER_PROCEDURE","ERROR_HANDLER","APPLY_DATABASE_LINK","APPLY_NAME") AS 
select sname, oname,
       decode(do.apply_operation, 0, 'DEFAULT',
                                  1, 'INSERT',
                                  2, 'UPDATE',
                                  3, 'DELETE',
                                  4, 'LOB_UPDATE',
                                  5, 'ASSEMBLE_LOBS', 'UNKNOWN'),
       do.user_apply_procedure,
       do.error_handler, o.linkname, do.apply_name
  from sys.obj$ o, apply$_dest_obj_ops do
 where do.object_number = o.obj# (+);

CREATE OR REPLACE FORCE VIEW "DBA_APPLY_ENQUEUE"("RULE_OWNER","RULE_NAME","DESTINATION_QUEUE_NAME") AS 
select r.rule_owner, r.rule_name, sys.anydata.AccessVarchar2(ctx.nvn_value)
from DBA_RULES r, table(r.rule_action_context.actx_list) ctx
where ctx.nvn_name = 'APPLY$_ENQUEUE';

CREATE OR REPLACE FORCE VIEW "DBA_APPLY_ERROR"("APPLY_NAME","QUEUE_NAME","QUEUE_OWNER","LOCAL_TRANSACTION_ID","SOURCE_DATABASE","SOURCE_TRANSACTION_ID","SOURCE_COMMIT_SCN","MESSAGE_NUMBER","ERROR_NUMBER","ERROR_MESSAGE","RECIPIENT_ID","RECIPIENT_NAME","MESSAGE_COUNT") AS 
select p.apply_name, e.queue_name, e.queue_owner, e.local_transaction_id,
       e.source_database, e.source_transaction_id,
       e.source_commit_scn, e.message_number, e.error_number,
       e.error_message, e.recipient_id, e.recipient_name, e.message_count
  from "_DBA_APPLY_ERROR" e, sys.streams$_apply_process p
 where e.apply# = p.apply#(+);

CREATE OR REPLACE FORCE VIEW "DBA_APPLY_EXECUTE"("RULE_OWNER","RULE_NAME","EXECUTE_EVENT") AS 
select r.rule_owner, r.rule_name,
  decode(sys.anydata.AccessVarchar2(ctx.nvn_value), 'NO', 'NO', NULL)
from DBA_RULES r, table(r.rule_action_context.actx_list) ctx
where ctx.nvn_name = 'APPLY$_EXECUTE';

CREATE OR REPLACE FORCE VIEW "DBA_APPLY_INSTANTIATED_GLOBAL"("SOURCE_DATABASE","INSTANTIATION_SCN","APPLY_DATABASE_LINK") AS 
select source_db_name, inst_scn, dblink
  from "_DBA_APPLY_SOURCE_SCHEMA"
 where global_flag = 1;

CREATE OR REPLACE FORCE VIEW "DBA_APPLY_INSTANTIATED_OBJECTS"("SOURCE_DATABASE","SOURCE_OBJECT_OWNER","SOURCE_OBJECT_NAME","SOURCE_OBJECT_TYPE","INSTANTIATION_SCN","IGNORE_SCN","APPLY_DATABASE_LINK") AS 
select source_db_name, owner, name,
       type, inst_scn, ignore_scn, dblink
  from "_DBA_APPLY_SOURCE_OBJ";

CREATE OR REPLACE FORCE VIEW "DBA_APPLY_INSTANTIATED_SCHEMAS"("SOURCE_DATABASE","SOURCE_SCHEMA","INSTANTIATION_SCN","APPLY_DATABASE_LINK") AS 
select source_db_name, name, inst_scn, dblink
  from "_DBA_APPLY_SOURCE_SCHEMA"
 where global_flag = 0;

CREATE OR REPLACE FORCE VIEW "DBA_APPLY_KEY_COLUMNS"("OBJECT_OWNER","OBJECT_NAME","COLUMN_NAME","APPLY_DATABASE_LINK") AS 
select sname, oname, cname, dblink
  from sys.streams$_key_columns;

CREATE OR REPLACE FORCE VIEW "DBA_APPLY_PARAMETERS"("APPLY_NAME","PARAMETER","VALUE","SET_BY_USER") AS 
select ap.apply_name, pp.name, pp.value,
       decode(pp.user_changed_flag, 1, 'YES', 'NO')
  from sys.streams$_process_params pp, sys.streams$_apply_process ap
 where pp.process_type = 1
   and pp.process# = ap.apply#
   and /* display internal parameters if the user changed them */
       (pp.internal_flag = 0
        or
        (pp.internal_flag = 1 and pp.user_changed_flag = 1)
       );

CREATE OR REPLACE FORCE VIEW "DBA_APPLY_PROGRESS"("APPLY_NAME","SOURCE_DATABASE","APPLIED_MESSAGE_NUMBER","OLDEST_MESSAGE_NUMBER","APPLY_TIME","APPLIED_MESSAGE_CREATE_TIME") AS 
select ap.apply_name, am.source_db_name, am.commit_scn, am.oldest_scn,
       apply_time, applied_message_create_time
  from streams$_apply_process ap, "_DBA_APPLY_MILESTONE" am
 where ap.apply# = am.apply#;

CREATE OR REPLACE FORCE VIEW "DBA_APPLY_TABLE_COLUMNS"("OBJECT_OWNER","OBJECT_NAME","COLUMN_NAME","COMPARE_OLD_ON_DELETE","COMPARE_OLD_ON_UPDATE","APPLY_DATABASE_LINK") AS 
(select daoc.object_owner, daoc.object_name, daoc.column_name,
       decode(bitand(ac.property, 1), 1, 'NO', 0, 'YES'),
       decode(bitand(ac.property, 2), 2, 'NO', 0, 'YES'),
       daoc.apply_database_link
  from "_DBA_APPLY_TABLE_COLUMNS_H" daoc, "_DBA_APPLY_OBJECTS" ac
 where daoc.object_owner = ac.object_owner
   and daoc.object_name  = ac.object_name
union
select u.name, o.name, doc.column_name,
       decode(bitand(doc.flag, 1), 1, 'NO', 0, 'YES'),
       decode(bitand(doc.flag, 2), 2, 'NO', 0, 'YES'),
       null
  from sys.streams$_dest_obj_cols doc, sys.obj$ o, sys.user$ u
 where o.obj# = doc.object_number
   and o.owner# = u.user#
   and o.linkname is null
   and doc.dblink is null
   and o.remoteowner is null
union
select o.remoteowner, o.name, doc.column_name,
       decode(bitand(doc.flag, 1), 1, 'NO', 0, 'YES'),
       decode(bitand(doc.flag, 2), 2, 'NO', 0, 'YES'),
       doc.dblink
  from sys.streams$_dest_obj_cols doc, sys.obj$ o
 where o.obj# = doc.object_number
   and o.linkname = doc.dblink
   and o.remoteowner is not null);

CREATE OR REPLACE FORCE VIEW "DBA_AQ_AGENTS"("AGENT_NAME","HTTP_ENABLED","SMTP_ENABLED") AS 
SELECT u.agent_name, decode(bitand(u.protocol, 1), 0, 'NO  ', 1, 'YES ') http_enabled, decode(bitand(u.protocol, 2), 0, 'NO  ', 2, 'YES ') smtp_enabled FROM SYSTEM.AQ$_Internet_Agents u;

CREATE OR REPLACE FORCE VIEW "DBA_AQ_AGENT_PRIVS"("AGENT_NAME","DB_USERNAME","HTTP_ENABLED","SMTP_ENABLED") AS 
(SELECT u.agent_name, t.db_username, decode(bitand(u.protocol, 1), 0, 'NO  ', 1, 'YES ') http_enabled, decode(bitand(u.protocol, 2), 0, 'NO  ', 2, 'YES ') smtp_enabled FROM SYSTEM.AQ$_Internet_Agent_Privs t RIGHT OUTER JOIN  SYSTEM.AQ$_Internet_Agents u ON t.agent_name = u.agent_name);

CREATE OR REPLACE FORCE VIEW "DBA_ASSOCIATIONS"("OBJECT_OWNER","OBJECT_NAME","COLUMN_NAME","OBJECT_TYPE","STATSTYPE_SCHEMA","STATSTYPE_NAME","DEF_SELECTIVITY","DEF_CPU_COST","DEF_IO_COST","DEF_NET_COST","INTERFACE_VERSION") AS 
select u.name, o.name, c.name,
         decode(a.property, 1, 'COLUMN', 2, 'TYPE', 3, 'PACKAGE', 4,
                'FUNCTION', 5, 'INDEX', 6, 'INDEXTYPE', 'INVALID'),
         u1.name, o1.name,a.default_selectivity,
         a.default_cpu_cost, a.default_io_cost, a.default_net_cost,
         a.interface_version#
   from  sys.association$ a, sys.obj$ o, sys.user$ u,
         sys.obj$ o1, sys.user$ u1, sys.col$ c
   where a.obj#=o.obj# and o.owner#=u.user#
   AND   a.statstype#=o1.obj# (+) and o1.owner#=u1.user# (+)
   AND   a.obj# = c.obj#  (+)  and a.intcol# = c.intcol# (+);

CREATE OR REPLACE FORCE VIEW "DBA_ATTRIBUTE_TRANSFORMATIONS"("TRANSFORMATION_ID","OWNER","NAME","FROM_TYPE","TO_TYPE","ATTRIBUTE","ATTRIBUTE_TRANSFORMATION") AS 
SELECT t.transformation_id, u.name, t.name,
       t.from_schema||'.'||t.from_type, t.to_schema||'.'||t.to_type,
       at.attribute_number,
       at.sql_expression
FROM transformations$ t, attribute_transformations$ at, sys.user$ u
WHERE  u.name = t.owner and t.transformation_id = at.transformation_id;

CREATE OR REPLACE FORCE VIEW "DBA_AUDIT_EXISTS"("OS_USERNAME","USERNAME","USERHOST","TERMINAL","TIMESTAMP","OWNER","OBJ_NAME","ACTION_NAME","NEW_OWNER","NEW_NAME","OBJ_PRIVILEGE","SYS_PRIVILEGE","GRANTEE","SESSIONID","ENTRYID","STATEMENTID","RETURNCODE","CLIENT_ID","SESSION_CPU","EXTENDED_TIMESTAMP","PROXY_SESSIONID","GLOBAL_UID","INSTANCE_NUMBER","OS_PROCESS","TRANSACTIONID","SCN","SQL_BIND","SQL_TEXT") AS 
select os_username, username, userhost, terminal, timestamp,
         owner, obj_name,
         action_name,
         new_owner,
         new_name,
         obj_privilege, sys_privilege, grantee,
         sessionid, entryid, statementid, returncode, client_id, session_cpu,
         extended_timestamp, proxy_sessionid, global_uid, instance_number,
         os_process, transactionid, scn, sql_bind, sql_text
  from dba_audit_trail
  where returncode in
  (942, 943, 959, 1418, 1432, 1434, 1435, 1534, 1917, 1918, 1919, 2019,
   2024, 2289,
   4042, 4043, 4080, 1, 951, 955, 957, 1430, 1433, 1452, 1471, 1535, 1543,
   1758, 1920, 1921, 1922, 2239, 2264, 2266, 2273, 2292, 2297, 2378, 2379,
   2382, 4081, 12006, 12325);

CREATE OR REPLACE FORCE VIEW "DBA_AUDIT_OBJECT"("OS_USERNAME","USERNAME","USERHOST","TERMINAL","TIMESTAMP","OWNER","OBJ_NAME","ACTION_NAME","NEW_OWNER","NEW_NAME","SES_ACTIONS","COMMENT_TEXT","SESSIONID","ENTRYID","STATEMENTID","RETURNCODE","PRIV_USED","CLIENT_ID","SESSION_CPU","EXTENDED_TIMESTAMP","PROXY_SESSIONID","GLOBAL_UID","INSTANCE_NUMBER","OS_PROCESS","TRANSACTIONID","SCN","SQL_BIND","SQL_TEXT") AS 
select OS_USERNAME, USERNAME, USERHOST, TERMINAL, TIMESTAMP,
       OWNER, OBJ_NAME, ACTION_NAME, NEW_OWNER, NEW_NAME,
       SES_ACTIONS, COMMENT_TEXT, SESSIONID, ENTRYID, STATEMENTID,
       RETURNCODE, PRIV_USED, CLIENT_ID, SESSION_CPU,
       EXTENDED_TIMESTAMP, PROXY_SESSIONID, GLOBAL_UID, INSTANCE_NUMBER,
       OS_PROCESS, TRANSACTIONID, SCN, SQL_BIND, SQL_TEXT
from dba_audit_trail
where (action between 1 and 16)
   or (action between 19 and 29)
   or (action between 32 and 41)
   or (action = 43)
   or (action between 51 and 99)
   or (action = 103)
   or (action between 110 and 113)
   or (action between 116 and 121)
   or (action between 123 and 128)
   or (action between 160 and 162);

CREATE OR REPLACE FORCE VIEW "DBA_AUDIT_POLICIES"("OBJECT_SCHEMA","OBJECT_NAME","POLICY_NAME","POLICY_TEXT","POLICY_COLUMN","PF_SCHEMA","PF_PACKAGE","PF_FUNCTION","ENABLED","SEL","INS","UPD","DEL","AUDIT_TRAIL","POLICY_COLUMN_OPTIONS") AS 
select u.name, o.name, f.pname, f.ptxt, f.pcol, f.pfschma, f.ppname, f.pfname,
       decode(f.enable_flag, 0, 'NO', 1, 'YES', 'NO'),
       decode(bitand(f.stmt_type,1), 0, 'NO', 'YES'),
       decode(bitand(f.stmt_type,2), 0, 'NO', 'YES'),
       decode(bitand(f.stmt_type,4), 0, 'NO', 'YES'),
       decode(bitand(f.stmt_type,8), 0, 'NO', 'YES'),
       decode(bitand(f.stmt_type,64), 0, 'DB_EXTENDED', 'DB'),
       decode(bitand(f.stmt_type, 128), 0, 'ANY_COLUMNS', 'ALL_COLUMNS')
from user$ u, obj$ o, fga$ f
where u.user# = o.owner#
and f.obj# = o.obj#;

CREATE OR REPLACE FORCE VIEW "DBA_AUDIT_POLICY_COLUMNS"("OBJECT_SCHEMA","OBJECT_NAME","POLICY_NAME","POLICY_COLUMN") AS 
select u.name, o.name, f.pname, c.name
from user$ u, obj$ o, fga$ f, fgacol$ fc, col$ c
where u.user# = o.owner#
 and  f.obj#  = o.obj#
 and  f.obj#  = fc.obj# and  f.pname = fc.pname
 and  c.obj#  = fc.obj# and  c.intcol#   = fc.intcol#;

CREATE OR REPLACE FORCE VIEW "DBA_AUDIT_SESSION"("OS_USERNAME","USERNAME","USERHOST","TERMINAL","TIMESTAMP","ACTION_NAME","LOGOFF_TIME","LOGOFF_LREAD","LOGOFF_PREAD","LOGOFF_LWRITE","LOGOFF_DLOCK","SESSIONID","RETURNCODE","CLIENT_ID","SESSION_CPU","EXTENDED_TIMESTAMP","PROXY_SESSIONID","GLOBAL_UID","INSTANCE_NUMBER","OS_PROCESS") AS 
select os_username,  username, userhost, terminal, timestamp, action_name,
       logoff_time, logoff_lread, logoff_pread, logoff_lwrite, logoff_dlock,
       sessionid, returncode, client_id, session_cpu, extended_timestamp,
       proxy_sessionid, global_uid, instance_number, os_process
from dba_audit_trail
where action between 100 and 102;

CREATE OR REPLACE FORCE VIEW "DBA_AUDIT_STATEMENT"("OS_USERNAME","USERNAME","USERHOST","TERMINAL","TIMESTAMP","OWNER","OBJ_NAME","ACTION_NAME","NEW_NAME","OBJ_PRIVILEGE","SYS_PRIVILEGE","ADMIN_OPTION","GRANTEE","AUDIT_OPTION","SES_ACTIONS","COMMENT_TEXT","SESSIONID","ENTRYID","STATEMENTID","RETURNCODE","PRIV_USED","CLIENT_ID","SESSION_CPU","EXTENDED_TIMESTAMP","PROXY_SESSIONID","GLOBAL_UID","INSTANCE_NUMBER","OS_PROCESS","TRANSACTIONID","SCN","SQL_BIND","SQL_TEXT") AS 
select OS_USERNAME, USERNAME, USERHOST, TERMINAL, TIMESTAMP,
       OWNER, OBJ_NAME, ACTION_NAME, NEW_NAME,
       OBJ_PRIVILEGE, SYS_PRIVILEGE, ADMIN_OPTION, GRANTEE, AUDIT_OPTION,
       SES_ACTIONS, COMMENT_TEXT,  SESSIONID, ENTRYID, STATEMENTID,
       RETURNCODE, PRIV_USED, CLIENT_ID, SESSION_CPU,
       EXTENDED_TIMESTAMP, PROXY_SESSIONID, GLOBAL_UID, INSTANCE_NUMBER,
       OS_PROCESS, TRANSACTIONID, SCN, SQL_BIND, SQL_TEXT
from dba_audit_trail
where action in (        17 /* GRANT OBJECT  */,
                         18 /* REVOKE OBJECT */,
                         30 /* AUDIT OBJECT */,
                         31 /* NOAUDIT OBJECT */,
                         49 /* ALTER SYSTEM */,
                        104 /* SYSTEM AUDIT */,
                        105 /* SYSTEM NOAUDIT */,
                        106 /* AUDIT DEFAULT */,
                        107 /* NOAUDIT DEFAULT */,
                        108 /* SYSTEM GRANT */,
                        109 /* SYSTEM REVOKE */,
                        114 /* GRANT ROLE */,
                        115 /* REVOKE ROLE */ );

CREATE OR REPLACE FORCE VIEW "DBA_AUDIT_TRAIL"("OS_USERNAME","USERNAME","USERHOST","TERMINAL","TIMESTAMP","OWNER","OBJ_NAME","ACTION","ACTION_NAME","NEW_OWNER","NEW_NAME","OBJ_PRIVILEGE","SYS_PRIVILEGE","ADMIN_OPTION","GRANTEE","AUDIT_OPTION","SES_ACTIONS","LOGOFF_TIME","LOGOFF_LREAD","LOGOFF_PREAD","LOGOFF_LWRITE","LOGOFF_DLOCK","COMMENT_TEXT","SESSIONID","ENTRYID","STATEMENTID","RETURNCODE","PRIV_USED","CLIENT_ID","SESSION_CPU","EXTENDED_TIMESTAMP","PROXY_SESSIONID","GLOBAL_UID","INSTANCE_NUMBER","OS_PROCESS","TRANSACTIONID","SCN","SQL_BIND","SQL_TEXT") AS 
select spare1           /* OS_USERNAME */,
       userid           /* USERNAME */,
       userhost         /* USERHOST */,
       terminal         /* TERMINAL */,
       cast (           /* TIMESTAMP */
           (from_tz(ntimestamp#,'00:00') at local) as date),
       obj$creator      /* OWNER */,
       obj$name         /* OBJECT_NAME */,
       aud.action#      /* ACTION */,
       act.name         /* ACTION_NAME */,
       new$owner        /* NEW_OWNER */,
       new$name         /* NEW_NAME */,
       decode(aud.action#,
              108 /* grant  sys_priv */, null,
              109 /* revoke sys_priv */, null,
              114 /* grant  role */, null,
              115 /* revoke role */, null,
              auth$privileges)
                        /* OBJ_PRIVILEGE */,
       decode(aud.action#,
              108 /* grant  sys_priv */, spm.name,
              109 /* revoke sys_priv */, spm.name,
              null)
                        /* SYS_PRIVILEGE */,
       decode(aud.action#,
              108 /* grant  sys_priv */, substr(auth$privileges,1,1),
              109 /* revoke sys_priv */, substr(auth$privileges,1,1),
              114 /* grant  role */, substr(auth$privileges,1,1),
              115 /* revoke role */, substr(auth$privileges,1,1),
              null)
                        /* ADMIN_OPTION */,
       auth$grantee     /* GRANTEE */,
       decode(aud.action#,
              104 /* audit   */, aom.name,
              105 /* noaudit */, aom.name,
              null)
                        /* AUDIT_OPTION  */,
       ses$actions      /* SES_ACTIONS   */,
       logoff$time      /* LOGOFF_TIME   */,
       logoff$lread     /* LOGOFF_LREAD  */,
       logoff$pread     /* LOGOFF_PREAD  */,
       logoff$lwrite    /* LOGOFF_LWRITE */,
       decode(aud.action#,
              104 /* audit   */, null,
              105 /* noaudit */, null,
              108 /* grant  sys_priv */, null,
              109 /* revoke sys_priv */, null,
              114 /* grant  role */, null,
              115 /* revoke role */, null,
              aud.logoff$dead)
                         /* LOGOFF_DLOCK */,
       comment$text      /* COMMENT_TEXT */,
       sessionid         /* SESSIONID */,
       entryid           /* ENTRYID */,
       statement         /* STATEMENTID */,
       returncode        /* RETURNCODE */,
       spx.name          /* PRIVILEGE */,
       clientid          /* CLIENT_ID */,
       sessioncpu        /* SESSION_CPU */,
       from_tz(ntimestamp#,'00:00') at local,
                                   /* EXTENDED_TIMESTAMP */
       proxy$sid                      /* PROXY_SESSIONID */,
       user$guid                           /* GLOBAL_UID */,
       instance#                      /* INSTANCE_NUMBER */,
       process#                            /* OS_PROCESS */,
       xid                              /* TRANSACTIONID */,
       scn                                        /* SCN */,
       to_nchar(sqlbind)                     /* SQL_BIND */,
       to_nchar(sqltext)                     /* SQL_TEXT */
from sys.aud$ aud, system_privilege_map spm, system_privilege_map spx,
     STMT_AUDIT_OPTION_MAP aom, audit_actions act
where   aud.action#     = act.action    (+)
  and - aud.logoff$dead = spm.privilege (+)
  and   aud.logoff$dead = aom.option#   (+)
  and - aud.priv$used   = spx.privilege (+);

CREATE OR REPLACE FORCE VIEW "DBA_AWS"("OWNER","AW_NUMBER","AW_NAME","AW_VERSION","PAGESPACES","GENERATIONS") AS 
SELECT u.name, a.awseq#, a.awname,
       max(decode(a.version, 0, '9.1', 1, '10.1', NULL)),
       count(unique(p.psnumber)), count(unique(p.psgen))
FROM aw$ a, ps$ p, user$ u
WHERE   a.owner#=u.user# and a.awseq#=p.awseq#
group by a.awseq#, a.awname, u.name;

CREATE OR REPLACE FORCE VIEW "DBA_AW_PS"("OWNER","AW_NUMBER","AW_NAME","PSNUMBER","GENERATIONS","MAXPAGES") AS 
SELECT u.name, a.awseq#, a.awname, p.psnumber, count(unique(p.psgen)), max(p.maxpages)
FROM aw$ a, ps$ p, user$ u
WHERE   a.owner#=u.user# and a.awseq#=p.awseq#
group by a.awseq#, a.awname, u.name, p.psnumber;

CREATE OR REPLACE FORCE VIEW "DBA_BASE_TABLE_MVIEWS"("OWNER","MASTER","MVIEW_LAST_REFRESH_TIME","MVIEW_ID") AS 
select s.mowner, s.master, s.snaptime, s.snapid
from sys.slog$ s;

CREATE OR REPLACE FORCE VIEW "DBA_BLOCKERS"("HOLDING_SESSION") AS 
select /*+ordered */ distinct s.ksusenum holding_session
  from v$session_wait w, x$ksqrs r, v$_lock l, x$ksuse s
 where w.wait_Time = 0
   and w.event like 'enq:%'
   and r.ksqrsid1 = w.p2
   and r.ksqrsid2 = w.p3
   and r.ksqrsidt = chr(bitand(p1,-16777216)/16777215)||
                   chr(bitand(p1,16711680)/65535)
   and l.block = 1
   and l.saddr = s.addr
   and l.raddr = r.addr
   and s.inst_id = userenv('Instance');

CREATE OR REPLACE FORCE VIEW "DBA_CACHEABLE_NONTABLE_OBJECTS"("OWNER","OBJECT_NAME","OBJECT_TYPE") AS 
SELECT u.username owner, u.username object_name, 'USER'
FROM   dba_users u
WHERE  u.username NOT IN ('SYS', 'SYSTEM', 'OUTLN', 'ORDSYS', 'CTXSYS',
                          'MDSYS', 'ORDPLUGINS', 'PUBLIC','DBSNMP',
                          'AURORA$JIS$UTILITY$', 'AURORA$ORB$UNAUTHENTICATED',
                          'LBACSYS', 'OSE$HTTP$ADMIN', 'ICPB', 'TRACESVR',
                          'XDB', 'PERFSTAT', 'RMAIL')
UNION ALL
SELECT o.owner, o.object_name, o.object_type
FROM   dba_objects o
WHERE  owner NOT IN ('SYS', 'SYSTEM', 'OUTLN', 'ORDSYS', 'CTXSYS',
                     'MDSYS', 'ORDPLUGINS', 'PUBLIC','DBSNMP',
                          'AURORA$JIS$UTILITY$', 'AURORA$ORB$UNAUTHENTICATED',
                          'LBACSYS', 'OSE$HTTP$ADMIN', 'ICPB', 'TRACESVR',
                          'XDB', 'PERFSTAT', 'RMAIL')
        AND
        ((object_type = 'VIEW'
            AND NOT EXISTS (SELECT 1 FROM dba_snapshots s
                            WHERE  s.owner = o.owner
                            AND    s.name  = o.object_name))
        OR
        (object_type IN ('TYPE', 'PACKAGE', 'PROCEDURE', 'FUNCTION', 'SEQUENCE')))
MINUS
SELECT r.sname, r.oname, r.type
 FROM  dba_repgenerated r;

CREATE OR REPLACE FORCE VIEW "DBA_CACHEABLE_OBJECTS"("OWNER","OBJECT_NAME","OBJECT_TYPE") AS 
SELECT "OWNER","OBJECT_NAME","OBJECT_TYPE" FROM dba_cacheable_nontable_objects o
WHERE o.object_type != 'TYPE'
UNION ALL
SELECT t.owner, t.table_name object_name,
       decode(t.temporary, 'Y', 'TEMP TABLE', 'TABLE')
FROM   dba_cacheable_tables_base t
WHERE  /* Exclude the following tables
                  - * 0x00000001    typed tables
                  - * 0x00000002    having ADT cols
                  - * 0x00000004    having nested table columns
                  - * 0x00000008    having REF cols
                  - * 0x00000010    having array cols
                  - * 0x00002000    nested table
                  - * 0x01000000    user-defined REF columns
         */
     bitand(t.property,16785439) = 0;

CREATE OR REPLACE FORCE VIEW "DBA_CACHEABLE_OBJECTS_BASE"("OWNER","OBJECT_NAME","OBJECT_TYPE") AS 
SELECT OWNER, OBJECT_NAME, OBJECT_TYPE
FROM   dba_cacheable_nontable_objects
UNION ALL
SELECT t.owner, t.table_name object_name,
       decode(t.temporary, 'Y', 'TEMP TABLE', 'TABLE')
FROM   dba_cacheable_tables_base t;

CREATE OR REPLACE FORCE VIEW "DBA_CACHEABLE_TABLES"("OWNER","TABLE_NAME") AS 
SELECT t.owner, t.table_name
   FROM   dba_cacheable_tables_base t
   WHERE  temporary = 'N'
          /* Exclude the following tables
                  - * 0x00000001    typed tables
                  - * 0x00000002    having ADT cols
                  - * 0x00000004    having nested table columns
                  - * 0x00000008    having REF cols
                  - * 0x00000010    having array cols
                  - * 0x00002000    nested table
                  - * 0x01000000    user-defined REF columns
         */
    AND   bitand(t.property,16785439) = 0;

CREATE OR REPLACE FORCE VIEW "DBA_CACHEABLE_TABLES_BASE"("OWNER","TABLE_NAME","TEMPORARY","PROPERTY") AS 
SELECT u.name, o.name, decode(bitand(o.flags, 2), 0, 'N', 2, 'Y', 'N'),
         tab.property
   FROM   sys.user$ u,
          sys.obj$ o,
          (SELECT t.obj#, t.property
           FROM   sys.tab$ t
           WHERE  /* Exclude the following tables
                   * 0x00008000    FILE columns
                   * 0x00020000    AQ table
                   * 0x08000000    sub-object
                   */
                  bitand(t.property,134381568) = 0
             AND
                  /* Exclude tables with LONG columns */
                  NOT EXISTS (SELECT 1 FROM   sys.col$ c
                              WHERE  t.obj# = c.obj#
                              AND  c.type# IN (8, 24) /* DTYLNG,DTYLBI */)) tab
   WHERE  o.owner# = u.user#
     AND  o.obj#   = tab.obj#
     AND
          /* Exclude SYS,SYSTEM,ORDSYS,CTXSYS,MDSYS,ORDPLUGINS,OUTLN tables */
          u.name NOT IN ('SYS', 'SYSTEM', 'ORDSYS', 'CTXSYS', 'MDSYS',
                         'ORDPLUGINS', 'OUTLN', 'DBSNMP','AURORA$JIS$UTILITY$',
                          'AURORA$ORB$UNAUTHENTICATED',
                          'LBACSYS', 'OSE$HTTP$ADMIN', 'ICPB', 'TRACESVR',
                          'XDB', 'PERFSTAT', 'RMAIL')
     AND
          /* Exclude snapshot and updatable snapshot log container tables */
          NOT EXISTS (SELECT 1 FROM sys.snap$ s
                      WHERE  s.sowner = u.name
                        AND ((s.tname = o.name) OR (s.uslog = o.name)))
     AND
          /* Exclude snapshot log container tables */
          NOT EXISTS (SELECT 1 from sys.mlog$ m
                      WHERE  m.mowner = u.name
                        AND  m.log    = o.name);

CREATE OR REPLACE FORCE VIEW "DBA_CAPTURE"("CAPTURE_NAME","QUEUE_NAME","QUEUE_OWNER","RULE_SET_NAME","RULE_SET_OWNER","CAPTURE_USER","START_SCN","STATUS","CAPTURED_SCN","APPLIED_SCN","USE_DATABASE_LINK","FIRST_SCN","SOURCE_DATABASE","SOURCE_DBID","SOURCE_RESETLOGS_SCN","SOURCE_RESETLOGS_TIME","LOGMINER_ID","NEGATIVE_RULE_SET_NAME","NEGATIVE_RULE_SET_OWNER","MAX_CHECKPOINT_SCN","REQUIRED_CHECKPOINT_SCN","LOGFILE_ASSIGNMENT","STATUS_CHANGE_TIME","ERROR_NUMBER","ERROR_MESSAGE","VERSION","CAPTURE_TYPE") AS 
select cp.capture_name, cp.queue_name, cp.queue_owner, cp.ruleset_name,
       cp.ruleset_owner, u.name, cp.start_scn,
       decode(cp.status, 1, 'DISABLED',
                         2, 'ENABLED',
                         4, 'ABORTED', 'UNKNOWN'),
       cp.spare1, cp.spare2,
       decode(cp.use_dblink, 1, 'YES', 'NO'),
       cp.first_scn, cp.source_dbname, dl.source_dbid, dl.source_resetlogs_scn,
       dl.source_resetlogs_time, cp.logmnr_sid, cp.negative_ruleset_name,
       cp.negative_ruleset_owner, nvl(dl.checkpoint_scn, 0),
       least(nvl(cp.spare2,0), dbms_logrep_util.get_req_ckpt_scn(dl.id)),
       decode(bitand(cp.flags, 4), 4, 'IMPLICIT', 'EXPLICIT'),
       cp.status_change_time, cp.error_number,
       cp.error_message, cp.version,
       decode(bitand(cp.flags, 64), 64, 'DOWNSTREAM', 'LOCAL')
  from "_DBA_CAPTURE" cp,
       dba_logmnr_session dl,
       sys.user$ u
 where dl.id = cp.logmnr_sid
   and cp.capture_userid = u.user# (+);

CREATE OR REPLACE FORCE VIEW "DBA_CAPTURE_EXTRA_ATTRIBUTES"("CAPTURE_NAME","ATTRIBUTE_NAME","INCLUDE","ROW_ATTRIBUTE","DDL_ATTRIBUTE") AS 
select q.capture_name, a.name, substr(a.include, 1, 3),
       decode(bitand(a.flag, 1), 1, 'YES', 0, 'NO'),
       decode(bitand(a.flag, 2), 2, 'YES', 0, 'NO')
  from sys.streams$_extra_attrs a, sys.streams$_capture_process q
 where a.process# = q.capture#;

CREATE OR REPLACE FORCE VIEW "DBA_CAPTURE_PARAMETERS"("CAPTURE_NAME","PARAMETER","VALUE","SET_BY_USER") AS 
select q.capture_name, p.name, p.value,
       decode(p.user_changed_flag, 1, 'YES', 'NO')
  from sys.streams$_process_params p, sys.streams$_capture_process q
 where p.process_type = 2
   and p.process# = q.capture#
   and /* display internal parameters if the user changed them */
       (p.internal_flag = 0
        or
        (p.internal_flag = 1 and p.user_changed_flag = 1)
       );

CREATE OR REPLACE FORCE VIEW "DBA_CAPTURE_PREPARED_DATABASE"("TIMESTAMP") AS 
select timestamp from streams$_prepare_ddl
 where usrid is NULL
   and global_flag = 1;

CREATE OR REPLACE FORCE VIEW "DBA_CAPTURE_PREPARED_SCHEMAS"("SCHEMA_NAME","TIMESTAMP") AS 
select u.username, pd.timestamp
  from streams$_prepare_ddl pd, dba_users u
 where u.user_id = pd.usrid;

CREATE OR REPLACE FORCE VIEW "DBA_CAPTURE_PREPARED_TABLES"("TABLE_OWNER","TABLE_NAME","SCN","TIMESTAMP") AS 
select u.name, o.name, co.ignore_scn, co.timestamp
  from obj$ o, user$ u, streams$_prepare_object co
  where o.obj# = co.obj# and o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "DBA_CATALOG"("OWNER","TABLE_NAME","TABLE_TYPE") AS 
select u.name, o.name,
       decode(o.type#, 0, 'NEXT OBJECT', 1, 'INDEX', 2, 'TABLE', 3, 'CLUSTER',
                      4, 'VIEW', 5, 'SYNONYM', 6, 'SEQUENCE', 'UNDEFINED')
from sys.user$ u, sys.obj$ o
where o.owner# = u.user#
  and o.linkname is null
  and ((o.type# in (4, 5, 6))
       or
       (o.type# = 2     /* tables, excluding iot - overflow and nested tables */
        and
        not exists (select null
                      from sys.tab$ t
                     where t.obj# = o.obj#
                       and (bitand(t.property, 512) = 512 or
                            bitand(t.property, 8192) = 8192))));

CREATE OR REPLACE FORCE VIEW "DBA_CLUSTERS"("OWNER","CLUSTER_NAME","TABLESPACE_NAME","PCT_FREE","PCT_USED","KEY_SIZE","INI_TRANS","MAX_TRANS","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENTS","MAX_EXTENTS","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","AVG_BLOCKS_PER_KEY","CLUSTER_TYPE","FUNCTION","HASHKEYS","DEGREE","INSTANCES","CACHE","BUFFER_POOL","SINGLE_TABLE","DEPENDENCIES") AS 
select u.name, o.name, ts.name,
          mod(c.pctfree$, 100),
          decode(bitand(ts.flags, 32), 32, to_number(NULL), c.pctused$),
          c.size$,c.initrans,c.maxtrans,
          s.iniexts * ts.blocksize,
          decode(bitand(ts.flags, 3), 1, to_number(NULL),
                               s.extsize * ts.blocksize),
          s.minexts, s.maxexts,
          decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extpct),
          decode(bitand(ts.flags, 32), 32, to_number(NULL),
            decode(s.lists, 0, 1, s.lists)),
          decode(bitand(ts.flags, 32), 32, to_number(NULL),
            decode(s.groups, 0, 1, s.groups)),
          c.avgchn, decode(c.hashkeys, 0, 'INDEX', 'HASH'),
          decode(c.hashkeys, 0, NULL,
                 decode(c.func, 0, 'COLUMN', 1, 'DEFAULT',
                                2, 'HASH EXPRESSION', 3, 'DEFAULT2', NULL)),
          c.hashkeys,
          lpad(decode(c.degree, 32767, 'DEFAULT', nvl(c.degree,1)),10),
          lpad(decode(c.instances, 32767, 'DEFAULT', nvl(c.instances,1)),10),
          lpad(decode(bitand(c.flags, 8), 8, 'Y', 'N'), 5),
          decode(s.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL),
          lpad(decode(bitand(c.flags, 65536), 65536, 'Y', 'N'), 5),
          decode(bitand(c.flags, 8388608), 8388608, 'ENABLED', 'DISABLED')
from sys.user$ u, sys.ts$ ts, sys.seg$ s, sys.clu$ c, sys.obj$ o
where o.owner# = u.user#
  and o.obj# = c.obj#
  and c.ts# = ts.ts#
  and c.ts# = s.ts#
  and c.file# = s.file#
  and c.block# = s.block#;

CREATE OR REPLACE FORCE VIEW "DBA_CLUSTER_HASH_EXPRESSIONS"("OWNER","CLUSTER_NAME","HASH_EXPRESSION") AS 
select us.name, o.name, c.condition
from sys.cdef$ c, sys.user$ us, sys.obj$ o
where c.type# = 8
and c.obj#   = o.obj#
and us.user# = o.owner#;

CREATE OR REPLACE FORCE VIEW "DBA_CLU_COLUMNS"("OWNER","CLUSTER_NAME","CLU_COLUMN_NAME","TABLE_NAME","TAB_COLUMN_NAME") AS 
select u.name, oc.name, cc.name, ot.name,
       decode(bitand(tc.property, 1), 1, ac.name, tc.name)
from sys.user$ u, sys.obj$ oc, sys.col$ cc, sys.obj$ ot, sys.col$ tc,
     sys.tab$ t, sys.attrcol$ ac
where oc.owner#  = u.user#
  and oc.obj#    = cc.obj#
  and t.bobj#    = oc.obj#
  and t.obj#     = tc.obj#
  and tc.segcol# = cc.segcol#
  and t.obj#     = ot.obj#
  and oc.type#   = 3
  and tc.obj#    = ac.obj#(+)
  and tc.intcol# = ac.intcol#(+);

CREATE OR REPLACE FORCE VIEW "DBA_CL_DIR_INSTANCE_ACTIONS"("JOB_NAME","ALERT_NAME","JOB_TYPE","DATABASE_NAME","INSTANCE_NAME","NODE_NAME","PRIORITY","SUBMIT_TIME","START_TIME","END_TIME","STATUS","ERROR_MESSAGE") AS 
select job_name, alert_name,
         decode(job_type,
                0, 'START',
                1, 'STOP') job_type,
         database_name, instance_name,
         node_name, priority, submit_time, start_time, end_time,
         decode(status,
                0, 'SCHEDULED',
                1, 'WAITING',
                2, 'COMPLETED',
                3, 'FAILED',
                4, 'ABORTED') status,
         error_message
  from sys.dir$resonate_operations;

CREATE OR REPLACE FORCE VIEW "DBA_COLL_TYPES"("OWNER","TYPE_NAME","COLL_TYPE","UPPER_BOUND","ELEM_TYPE_MOD","ELEM_TYPE_OWNER","ELEM_TYPE_NAME","LENGTH","PRECISION","SCALE","CHARACTER_SET_NAME","ELEM_STORAGE","NULLS_STORED") AS 
select u.name, o.name, co.name, c.upper_bound,
       decode(bitand(c.properties, 32768), 32768, 'REF',
              decode(bitand(c.properties, 16384), 16384, 'POINTER')),
       nvl2(c.synobj#, (select u.name from user$ u, obj$ o
            where o.owner#=u.user# and o.obj#=c.synobj#),
            decode(bitand(et.properties, 64), 64, null, eu.name)),
       nvl2(c.synobj#, (select o.name from obj$ o where o.obj#=c.synobj#),
            decode(et.typecode,
                   52, decode(c.charsetform, 2, 'NVARCHAR2', eo.name),
                   53, decode(c.charsetform, 2, 'NCHAR', eo.name),
                   54, decode(c.charsetform, 2, 'NCHAR VARYING', eo.name),
                   61, decode(c.charsetform, 2, 'NCLOB', eo.name),
                   eo.name)),
       c.length, c.precision, c.scale,
       decode(c.charsetform, 1, 'CHAR_CS',
                             2, 'NCHAR_CS',
                             3, NLS_CHARSET_NAME(c.charsetid),
                             4, 'ARG:'||c.charsetid),
       decode(bitand(c.properties, 131072), 131072, 'FIXED',
              decode(bitand(c.properties, 262144), 262144, 'VARYING')),
       decode(bitand(c.properties, 65536), 65536, 'NO', 'YES')
from sys.user$ u, sys.obj$ o, sys.collection$ c, sys.obj$ co,
     sys.obj$ eo, sys.user$ eu, sys.type$ et
where o.owner# = u.user#
  and o.oid$ = c.toid
  and o.subname IS NULL -- only the most recent version
  and o.type# <> 10 -- must not be invalid
  and c.coll_toid = co.oid$
  and c.elem_toid = eo.oid$
  and eo.owner# = eu.user#
  and c.elem_toid = et.tvoid;

CREATE OR REPLACE FORCE VIEW "DBA_COL_COMMENTS"("OWNER","TABLE_NAME","COLUMN_NAME","COMMENTS") AS 
select u.name, o.name, c.name, co.comment$
from sys.obj$ o, sys.col$ c, sys.user$ u, sys.com$ co
where o.owner# = u.user#
  and o.type# in (2, 4)
  and o.obj# = c.obj#
  and c.obj# = co.obj#(+)
  and c.intcol# = co.col#(+)
  and bitand(c.property, 32) = 0 /* not hidden column */;

CREATE OR REPLACE FORCE VIEW "DBA_COL_PRIVS"("GRANTEE","OWNER","TABLE_NAME","COLUMN_NAME","GRANTOR","PRIVILEGE","GRANTABLE") AS 
select ue.name, u.name, o.name, c.name, ur.name, tpm.name,
       decode(mod(oa.option$,2), 1, 'YES', 'NO')
from sys.objauth$ oa, sys.obj$ o, sys.user$ u, sys.user$ ur, sys.user$ ue,
     sys.col$ c, table_privilege_map tpm
where oa.obj# = o.obj#
  and oa.grantor# = ur.user#
  and oa.grantee# = ue.user#
  and oa.obj# = c.obj#
  and oa.col# = c.col#
  and bitand(c.property, 32) = 0 /* not hidden column */
  and oa.col# is not null
  and oa.privilege# = tpm.privilege
  and u.user# = o.owner#;

CREATE OR REPLACE FORCE VIEW "DBA_COMMON_AUDIT_TRAIL"("AUDIT_TYPE","SESSION_ID","PROXY_SESSIONID","STATEMENTID","ENTRYID","EXTENDED_TIMESTAMP","GLOBAL_UID","DB_USER","CLIENT_ID","EXT_NAME","OS_USER","USERHOST","OS_PROCESS","TERMINAL","INSTANCE_NUMBER","OBJECT_SCHEMA","OBJECT_NAME","POLICY_NAME","NEW_OWNER","NEW_NAME","ACTION","STATEMENT_TYPE","AUDIT_OPTION","TRANSACTIONID","RETURNCODE","SCN","COMMENT_TEXT","SQL_BIND","SQL_TEXT","OBJ_PRIVILEGE","SYS_PRIVILEGE","ADMIN_OPTION","GRANTEE","PRIV_USED","SES_ACTIONS","LOGOFF_TIME","LOGOFF_LREAD","LOGOFF_PREAD","LOGOFF_LWRITE","LOGOFF_DLOCK","SESSION_CPU") AS 
select 'Standard Audit', SESSIONID,
    PROXY_SESSIONID, STATEMENTID, ENTRYID, EXTENDED_TIMESTAMP, GLOBAL_UID,
    USERNAME, CLIENT_ID, Null, OS_USERNAME, USERHOST, OS_PROCESS, TERMINAL,
    INSTANCE_NUMBER, OWNER, OBJ_NAME, Null, NEW_OWNER,
    NEW_NAME, ACTION, ACTION_NAME, AUDIT_OPTION, TRANSACTIONID, RETURNCODE,
    SCN, COMMENT_TEXT, SQL_BIND, SQL_TEXT,
    OBJ_PRIVILEGE, SYS_PRIVILEGE, ADMIN_OPTION, GRANTEE, PRIV_USED,
    SES_ACTIONS, LOGOFF_TIME, LOGOFF_LREAD, LOGOFF_PREAD, LOGOFF_LWRITE,
    LOGOFF_DLOCK, SESSION_CPU
  from DBA_AUDIT_TRAIL
UNION ALL
select 'Fine Grained Audit', SESSION_ID,
    PROXY_SESSIONID, STATEMENTID, ENTRYID, EXTENDED_TIMESTAMP, GLOBAL_UID,
    DB_USER, CLIENT_ID, EXT_NAME, OS_USER, USERHOST, OS_PROCESS, Null,
    INSTANCE_NUMBER, OBJECT_SCHEMA, OBJECT_NAME, POLICY_NAME, Null,
    Null, Null, STATEMENT_TYPE, Null, TRANSACTIONID, Null,
    SCN, COMMENT$TEXT, SQL_BIND, SQL_TEXT,
    Null, Null, Null, Null, Null,
    Null, Null, Null, Null, Null,
    Null, Null
  from DBA_FGA_AUDIT_TRAIL;

CREATE OR REPLACE FORCE VIEW "DBA_CONSTRAINTS"("OWNER","CONSTRAINT_NAME","CONSTRAINT_TYPE","TABLE_NAME","SEARCH_CONDITION","R_OWNER","R_CONSTRAINT_NAME","DELETE_RULE","STATUS","DEFERRABLE","DEFERRED","VALIDATED","GENERATED","BAD","RELY","LAST_CHANGE","INDEX_OWNER","INDEX_NAME","INVALID","VIEW_RELATED") AS 
select ou.name, oc.name,
       decode(c.type#, 1, 'C', 2, 'P', 3, 'U',
              4, 'R', 5, 'V', 6, 'O', 7,'C', '?'),
       o.name, c.condition, ru.name, rc.name,
       decode(c.type#, 4,
              decode(c.refact, 1, 'CASCADE', 2, 'SET NULL', 'NO ACTION'),
              NULL),
       decode(c.type#, 5, 'ENABLED',
              decode(c.enabled, NULL, 'DISABLED', 'ENABLED')),
       decode(bitand(c.defer, 1), 1, 'DEFERRABLE', 'NOT DEFERRABLE'),
       decode(bitand(c.defer, 2), 2, 'DEFERRED', 'IMMEDIATE'),
       decode(bitand(c.defer, 4), 4, 'VALIDATED', 'NOT VALIDATED'),
       decode(bitand(c.defer, 8), 8, 'GENERATED NAME', 'USER NAME'),
       decode(bitand(c.defer,16),16, 'BAD', null),
       decode(bitand(c.defer,32),32, 'RELY', null),
       c.mtime,
       decode(c.type#, 2, ui.name, 3, ui.name, null),
       decode(c.type#, 2, oi.name, 3, oi.name, null),
       decode(bitand(c.defer, 256), 256,
              decode(c.type#, 4,
                     case when (bitand(c.defer, 128) = 128
                                or o.status in (3, 5)
                                or ro.status in (3, 5)) then 'INVALID'
                          else null end,
                     case when (bitand(c.defer, 128) = 128
                                or o.status in (3, 5)) then 'INVALID'
                          else null end
                    ),
              null),
       decode(bitand(c.defer, 256), 256, 'DEPEND ON VIEW', null)
from sys.con$ oc, sys.con$ rc, sys.user$ ou, sys.user$ ru, sys.obj$ ro,
     sys.obj$ o, sys.cdef$ c, sys.obj$ oi, sys.user$ ui
where oc.owner# = ou.user#
  and oc.con# = c.con#
  and c.obj# = o.obj#
  and c.type# != 8        /* don't include hash expressions */
  and c.type# != 12       /* don't include log groups */
  and c.rcon# = rc.con#(+)
  and c.enabled = oi.obj#(+)
  and oi.owner# = ui.user#(+)
  and rc.owner# = ru.user#(+)
  and c.robj# = ro.obj#(+);

CREATE OR REPLACE FORCE VIEW "DBA_CONS_COLUMNS"("OWNER","CONSTRAINT_NAME","TABLE_NAME","COLUMN_NAME","POSITION") AS 
select u.name, c.name, o.name,
       decode(ac.name, null, col.name, ac.name), cc.pos#
from sys.user$ u, sys.con$ c, sys.col$ col, sys.ccol$ cc, sys.cdef$ cd,
     sys.obj$ o, sys.attrcol$ ac
where c.owner# = u.user#
  and c.con# = cd.con#
  and cd.type# != 12       /* don't include log groups */
  and cd.con# = cc.con#
  and cc.obj# = col.obj#
  and cc.intcol# = col.intcol#
  and cc.obj# = o.obj#
  and col.obj# = ac.obj#(+)
  and col.intcol# = ac.intcol#(+);

CREATE OR REPLACE FORCE VIEW "DBA_CONS_OBJ_COLUMNS"("OWNER","TABLE_NAME","COLUMN_NAME","CONS_TYPE_OWNER","CONS_TYPE_NAME","CONS_TYPE_ONLY") AS 
select uc.name, oc.name, c.name, ut.name, ot.name,
       lpad(decode(bitand(sc.flags, 2), 2, 'Y', 'N'), 15)
from sys.user$ uc, sys.obj$ oc, sys.col$ c, sys.user$ ut, sys.obj$ ot,
     sys.subcoltype$ sc
where oc.owner# = uc.user#
  and bitand(sc.flags, 1) = 1      /* Type is specified in the IS OF clause */
  and oc.obj#=sc.obj#
  and oc.obj#=c.obj#
  and c.intcol#=sc.intcol#
  and sc.toid=ot.oid$
  and ot.owner#=ut.user#
  and bitand(c.property,32768) != 32768                /* not unused column */
  and not exists (select null                  /* Doesn't exist in attrcol$ */
                  from sys.attrcol$ ac
                  where ac.intcol#=sc.intcol#
                        and ac.obj#=sc.obj#)
union all
select uc.name, oc.name, ac.name, ut.name, ot.name,
       lpad(decode(bitand(sc.flags, 2), 2, 'Y', 'N'), 15)
from sys.user$ uc, sys.obj$ oc, sys.col$ c, sys.user$ ut, sys.obj$ ot,
     sys.subcoltype$ sc, sys.attrcol$ ac
where oc.owner# = uc.user#
  and bitand(sc.flags, 1) = 1      /* Type is specified in the IS OF clause */
  and oc.obj#=sc.obj#
  and oc.obj#=c.obj#
  and oc.obj#=ac.obj#
  and c.intcol#=sc.intcol#
  and ac.intcol#=sc.intcol#
  and sc.toid=ot.oid$
  and ot.owner#=ut.user#
  and bitand(c.property,32768) != 32768                /* not unused column */;

CREATE OR REPLACE FORCE VIEW "DBA_CONTEXT"("NAMESPACE","SCHEMA","PACKAGE","TYPE") AS 
select o.name, c.schema, c.package,
DECODE( c.flags,0,'ACCESSED LOCALLY',1,'INITIALIZED EXTERNALLY',2,'ACCESSED GLOBALLY',4,'INITIALIZED GLOBALLY')
from  context$ c, obj$ o
where c.obj# = o.obj#
and o.type# = 44;

CREATE OR REPLACE FORCE VIEW "DBA_DATAPUMP_JOBS"("OWNER_NAME","JOB_NAME","OPERATION","JOB_MODE","STATE","DEGREE","ATTACHED_SESSIONS") AS 
SELECT  j.owner_name, j.job_name, j.operation, j.job_mode, j.state,
                j.workers,
                NVL((SELECT    COUNT(*)
                     FROM      SYS.GV$DATAPUMP_SESSION s
                     WHERE     j.job_id = s.job_id
                     GROUP BY  s.job_id), 0)
        FROM    SYS.GV$DATAPUMP_JOB j
      UNION ALL                               /* Not Running - Master Tables */
        SELECT u.name, o.name,
               SUBSTR (c.comment$, 24, 30), SUBSTR (c.comment$, 55, 30),
               'NOT RUNNING', 0, 0
        FROM sys.obj$ o, sys.user$ u, sys.com$ c
        WHERE SUBSTR (c.comment$, 1, 22) = 'Data Pump Master Table' AND
              RTRIM (SUBSTR (c.comment$, 24, 30)) IN
                ('EXPORT','ESTIMATE','IMPORT','SQL_FILE','NETWORK') AND
              RTRIM (SUBSTR (c.comment$, 55, 30)) IN
                ('FULL','SCHEMA','TABLE','TABLESPACE','TRANSPORTABLE') AND
              o.obj# = c.obj# AND
              o.type# = 2 AND
              u.user# = o.owner# AND
              NOT EXISTS (SELECT 1
                          FROM   SYS.GV$DATAPUMP_JOB
                          WHERE  owner_name = u.name AND
                                 job_name = o.name);

CREATE OR REPLACE FORCE VIEW "DBA_DATAPUMP_SESSIONS"("OWNER_NAME","JOB_NAME","SADDR") AS 
SELECT  j.owner_name, j.job_name, s.saddr
        FROM    SYS.GV$DATAPUMP_JOB j, SYS.GV$DATAPUMP_SESSION s
        WHERE   j.job_id = s.job_id;

CREATE OR REPLACE FORCE VIEW "DBA_DATA_FILES"("FILE_NAME","FILE_ID","TABLESPACE_NAME","BYTES","BLOCKS","STATUS","RELATIVE_FNO","AUTOEXTENSIBLE","MAXBYTES","MAXBLOCKS","INCREMENT_BY","USER_BYTES","USER_BLOCKS") AS 
select v.name, f.file#, ts.name,
       ts.blocksize * f.blocks, f.blocks,
       decode(f.status$, 1, 'INVALID', 2, 'AVAILABLE', 'UNDEFINED'),
       f.relfile#, decode(f.inc, 0, 'NO', 'YES'),
       ts.blocksize * f.maxextend, f.maxextend, f.inc,
       ts.blocksize * (f.blocks - 1), f.blocks - 1
from sys.file$ f, sys.ts$ ts, sys.v$dbfile v
where v.file# = f.file#
  and f.spare1 is NULL
  and f.ts# = ts.ts#
union all
select
       v.name,f.file#, ts.name,
       decode(hc.ktfbhccval, 0, ts.blocksize * hc.ktfbhcsz, NULL),
       decode(hc.ktfbhccval, 0, hc.ktfbhcsz, NULL),
       decode(f.status$, 1, 'INVALID', 2, 'AVAILABLE', 'UNDEFINED'),
       f.relfile#,
       decode(hc.ktfbhccval, 0, decode(hc.ktfbhcinc, 0, 'NO', 'YES'), NULL),
       decode(hc.ktfbhccval, 0, ts.blocksize * hc.ktfbhcmaxsz, NULL),
       decode(hc.ktfbhccval, 0, hc.ktfbhcmaxsz, NULL),
       decode(hc.ktfbhccval, 0, hc.ktfbhcinc, NULL),
       decode(hc.ktfbhccval, 0, hc.ktfbhcusz * ts.blocksize, NULL),
       decode(hc.ktfbhccval, 0, hc.ktfbhcusz, NULL)
from sys.v$dbfile v, sys.file$ f, sys.x$ktfbhc hc, sys.ts$ ts
where v.file# = f.file#
  and f.spare1 is NOT NULL
  and v.file# = hc.ktfbhcafno
  and hc.ktfbhctsn = ts.ts#;

CREATE OR REPLACE FORCE VIEW "DBA_DB_DIR_ESCALATE_ACTIONS"("ESCALATION_NAME","ALERT_SEQ_ID","ESCALATION_TYPE","INSTANCE_NAME","SUBMIT_TIME","START_TIME","END_TIME","STATUS","RETRY_COUNT","RETRY_TIME","ERROR_MESSAGE") AS 
select escalation_id escalation_name, alert_seq_id,
         escalation escalation_type,
         instance_name, submit_time, start_time, end_time,
         decode(status,
                0, 'SCHEDULED',
                1, 'WAITING',
                2, 'COMPLETED',
                3, 'FAILED',
                4, 'ABORTED',
                5, 'RETRYING',
                6, 'CLEARED') status,
         retry_count, retry_time,
         error_message
  from sys.dir$escalate_operations;

CREATE OR REPLACE FORCE VIEW "DBA_DB_DIR_QUIESCE_ACTIONS"("JOB_NAME","ALERT_SEQUENCE_ID","JOB_TYPE","INSTANCE_NAME","SUBMIT_TIME","START_TIME","END_TIME","STATUS","ERROR_MESSAGE") AS 
select job_name, alert_seq_id alert_sequence_id,
         decode(job_type,
                0, 'INITIATE',
                1, 'UNQUIESCE') job_type,
         instance_name, submit_time, start_time, end_time,
         decode(status,
                0, 'SCHEDULED',
                1, 'WAITING',
                2, 'COMPLETED',
                3, 'FAILED',
                4, 'ABORTED') status,
         error_message
  from sys.dir$quiesce_operations;

CREATE OR REPLACE FORCE VIEW "DBA_DB_DIR_SERVICE_ACTIONS"("JOB_NAME","ALERT_SEQUENCE_ID","JOB_TYPE","SERVICE_NAME","INSTANCE_NAME","SUBMIT_TIME","START_TIME","END_TIME","STATUS","ERROR_MESSAGE") AS 
select job_name, alert_seq_id alert_sequence_id,
         decode(job_type,
                0, 'START',
                1, 'STOP') job_type,
         service_name, instance_name,
         submit_time, start_time, end_time,
         decode(status,
                0, 'SCHEDULED',
                1, 'WAITING',
                2, 'COMPLETED',
                3, 'FAILED',
                4, 'ABORTED') status,
         error_message
  from sys.dir$service_operations;

CREATE OR REPLACE FORCE VIEW "DBA_DB_DIR_SESSION_ACTIONS"("JOB_NAME","ALERT_SEQUENCE_ID","SERVICE_NAME","SOURCE_INSTANCE","DESTINATION_INSTANCE","SUBMIT_TIME","START_TIME","END_TIME","SESSIONS_REQUESTED","SESSIONS_MIGRATED","STATUS","ERROR_MESSAGE") AS 
select job_name, alert_seq_id alert_sequence_id, service_name,
         source_instance, dest_instance destination_instance, submit_time,
         start_time, end_time, session_count sessions_requested,
         actual_count sessions_migrated,
         decode(status,
                0, 'SCHEDULED',
                1, 'WAITING',
                2, 'COMPLETED',
                3, 'FAILED',
                4, 'ABORTED') status,
         error_message
  from sys.dir$migrate_operations;

CREATE OR REPLACE FORCE VIEW "DBA_DB_LINKS"("OWNER","DB_LINK","USERNAME","HOST","CREATED") AS 
select u.name, l.name, l.userid, l.host, l.ctime
from sys.link$ l, sys.user$ u
where l.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "DBA_DDL_LOCKS"("SESSION_ID","OWNER","NAME","TYPE","MODE_HELD","MODE_REQUESTED") AS 
select  s.sid session_id,
          substr(ob.kglnaown,1,30) owner,
          substr(ob.kglnaobj,1,30) name,
    decode(ob.kglhdnsp, 0, 'Cursor', 1, 'Table/Procedure/Type', 2, 'Body',
           3, 'Trigger', 4, 'Index', 5, 'Cluster', 13, 'Java Source',
             14, 'Java Resource', 32, 'Java Data', to_char(ob.kglhdnsp)) type,
    decode(lk.kgllkmod, 0, 'None', 1, 'Null', 2, 'Share', 3, 'Exclusive',
	   'Unknown') mode_held,
    decode(lk.kgllkreq,  0, 'None', 1, 'Null', 2, 'Share', 3, 'Exclusive',
	   'Unknown') mode_requested
   from v$session s, x$kglob ob, x$kgllk lk
   where lk.kgllkhdl = ob.kglhdadr
   and   lk.kgllkuse = s.saddr
   and   ob.kglhdnsp != 0;

CREATE OR REPLACE FORCE VIEW "DBA_DEPENDENCIES"("OWNER","NAME","TYPE","REFERENCED_OWNER","REFERENCED_NAME","REFERENCED_TYPE","REFERENCED_LINK_NAME","DEPENDENCY_TYPE") AS 
select u.name, o.name,
       decode(o.type#, 0, 'NEXT OBJECT', 1, 'INDEX', 2, 'TABLE', 3, 'CLUSTER',
                      4, 'VIEW', 5, 'SYNONYM', 6, 'SEQUENCE', 7, 'PROCEDURE',
                      8, 'FUNCTION', 9, 'PACKAGE', 10, 'NON-EXISTENT',
                      11, 'PACKAGE BODY', 12, 'TRIGGER',
                      13, 'TYPE', 14, 'TYPE BODY', 22, 'LIBRARY',
                      28, 'JAVA SOURCE', 29, 'JAVA CLASS',
                      32, 'INDEXTYPE', 33, 'OPERATOR',
                      42, 'MATERIALIZED VIEW', 43, 'DIMENSION',
                      46, 'RULE SET', 55, 'XML SCHEMA', 56, 'JAVA DATA',
                      59, 'RULE', 62, 'EVALUATION CONTXT',
                      'UNDEFINED'),
       decode(po.linkname, null, pu.name, po.remoteowner), po.name,
       decode(po.type#, 0, 'NEXT OBJECT', 1, 'INDEX', 2, 'TABLE', 3, 'CLUSTER',
                      4, 'VIEW', 5, 'SYNONYM', 6, 'SEQUENCE', 7, 'PROCEDURE',
                      8, 'FUNCTION', 9, 'PACKAGE', 10, 'NON-EXISTENT',
                      11, 'PACKAGE BODY', 12, 'TRIGGER',
                      13, 'TYPE', 14, 'TYPE BODY', 22, 'LIBRARY',
                      28, 'JAVA SOURCE', 29, 'JAVA CLASS',
                      32, 'INDEXTYPE', 33, 'OPERATOR',
                      42, 'MATERIALIZED VIEW', 43, 'DIMENSION',
                      46, 'RULE SET', 55, 'XML SCHEMA', 56, 'JAVA DATA',
                      59, 'RULE', 62, 'EVALUATION CONTXT',
                      'UNDEFINED'),
       po.linkname,
       decode(bitand(d.property, 3), 2, 'REF', 'HARD')
from sys.obj$ o, sys.disk_and_fixed_objects po, sys.dependency$ d, sys.user$ u,
  sys.user$ pu
where o.obj# = d.d_obj#
  and o.owner# = u.user#
  and po.obj# = d.p_obj#
  and po.owner# = pu.user#;

CREATE OR REPLACE FORCE VIEW "DBA_DIMENSIONS"("OWNER","DIMENSION_NAME","INVALID","COMPILE_STATE","REVISION") AS 
select u.name, o.name,
       decode(o.status, 5, 'Y', 'N'),
       decode(o.status, 1, 'VALID', 5, 'NEEDS_COMPILE', 'ERROR'),
       1                  /* Metadata revision number */
from sys.dim$ d, sys.obj$ o, sys.user$ u
where o.owner# = u.user#
  and o.obj# = d.obj#;

CREATE OR REPLACE FORCE VIEW "DBA_DIM_ATTRIBUTES"("OWNER","DIMENSION_NAME","ATTRIBUTE_NAME","LEVEL_NAME","COLUMN_NAME","INFERRED") AS 
select u.name, o.name, da.attname, dl.levelname, c.name, 'N'
from sys.dimattr$ da, sys.obj$ o, sys.user$ u, sys.dimlevel$ dl, sys.col$ c
where da.dimobj# = o.obj#
  and o.owner# = u.user#
  and da.dimobj# = dl.dimobj#
  and da.levelid# = dl.levelid#
  and da.detailobj# = c.obj#
  and da.col# = c.intcol#;

CREATE OR REPLACE FORCE VIEW "DBA_DIM_CHILD_OF"("OWNER","DIMENSION_NAME","HIERARCHY_NAME","POSITION","CHILD_LEVEL_NAME","JOIN_KEY_ID","PARENT_LEVEL_NAME") AS 
select u.name, o.name, h.hiername, chl.pos#,
       cdl.levelname,
       decode(phl.joinkeyid#, 0, NULL, phl.joinkeyid#),
       pdl.levelname
from sys.obj$ o, sys.user$ u, sys.hier$ h,
     sys.hierlevel$ phl, sys.hierlevel$ chl,
     sys.dimlevel$ pdl,  sys.dimlevel$ cdl
where phl.dimobj# = o.obj#
  and o.owner# = u.user#
  and phl.dimobj# = h.dimobj#
  and phl.hierid# = h.hierid#
  and phl.dimobj# = pdl.dimobj#
  and phl.levelid# = pdl.levelid#
  and phl.dimobj# = chl.dimobj#
  and phl.hierid# = chl.hierid#
  and phl.pos# = chl.pos# + 1
  and chl.dimobj# = cdl.dimobj#
  and chl.levelid# = cdl.levelid#;

CREATE OR REPLACE FORCE VIEW "DBA_DIM_HIERARCHIES"("OWNER","DIMENSION_NAME","HIERARCHY_NAME") AS 
select u.name, o.name, h.hiername
from sys.hier$ h, sys.obj$ o, sys.user$ u
where h.dimobj# = o.obj#
  and o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "DBA_DIM_JOIN_KEY"("OWNER","DIMENSION_NAME","DIM_KEY_ID","LEVEL_NAME","KEY_POSITION","HIERARCHY_NAME","CHILD_JOIN_COLUMN") AS 
select u.name, o.name, djk.joinkeyid#, dl.levelname,
       djk.keypos#, h.hiername, c.name
from sys.dimjoinkey$ djk, sys.obj$ o, sys.user$ u,
     sys.dimlevel$ dl, sys.hier$ h, sys.col$ c
where djk.dimobj# = o.obj#
  and o.owner# = u.user#
  and djk.dimobj# = dl.dimobj#
  and djk.levelid# = dl.levelid#
  and djk.dimobj# = h.dimobj#
  and djk.hierid# = h.hierid#
  and djk.detailobj# = c.obj#
  and djk.col# = c.intcol#;

CREATE OR REPLACE FORCE VIEW "DBA_DIM_LEVELS"("OWNER","DIMENSION_NAME","LEVEL_NAME","NUM_COLUMNS","DETAILOBJ_OWNER","DETAILOBJ_NAME") AS 
select u.name, o.name, dl.levelname,
       temp.num_col,
       u1.name, o1.name
from (select dlk.dimobj#, dlk.levelid#, dlk.detailobj#,
             COUNT(*) as num_col
      from sys.dimlevelkey$ dlk
      group by dlk.dimobj#, dlk.levelid#, dlk.detailobj#) temp,
      sys.dimlevel$ dl, sys.obj$ o, sys.user$ u,
      sys.obj$ o1, sys.user$ u1
where dl.dimobj# = o.obj#   and
      o.owner# = u.user#    and
      dl.dimobj# = temp.dimobj# and
      dl.levelid# = temp.levelid# and
      temp.detailobj# = o1.obj# and
      o1.owner# = u1.user#;

CREATE OR REPLACE FORCE VIEW "DBA_DIM_LEVEL_KEY"("OWNER","DIMENSION_NAME","LEVEL_NAME","KEY_POSITION","COLUMN_NAME") AS 
select u.name, o.name, dl.levelname, dlk.keypos#, c.name
from sys.dimlevelkey$ dlk, sys.obj$ o, sys.user$ u, sys.dimlevel$ dl,
     sys.col$ c
where dlk.dimobj# = o.obj#
  and o.owner# = u.user#
  and dlk.dimobj# = dl.dimobj#
  and dlk.levelid# = dl.levelid#
  and dlk.detailobj# = c.obj#
  and dlk.col# = c.intcol#;

CREATE OR REPLACE FORCE VIEW "DBA_DIRECTORIES"("OWNER","DIRECTORY_NAME","DIRECTORY_PATH") AS 
select u.name, o.name, d.os_path
from sys.user$ u, sys.obj$ o, sys.dir$ d
where u.user# = o.owner#
  and o.obj# = d.obj#;

CREATE OR REPLACE FORCE VIEW "DBA_DIR_DATABASE_ATTRIBUTES"("DATABASE_NAME","ATTRIBUTE_NAME","ATTRIBUTE_VALUE") AS 
select database_name, attribute_name, attribute_value
  from sys.dir$database_attributes;

CREATE OR REPLACE FORCE VIEW "DBA_DIR_VICTIM_POLICY"("USER_NAME","POLICY_FUNCTION_NAME") AS 
select user_name, policy_function_name from sys.dir$victim_policy;

CREATE OR REPLACE FORCE VIEW "DBA_DML_LOCKS"("SESSION_ID","OWNER","NAME","MODE_HELD","MODE_REQUESTED","LAST_CONVERT","BLOCKING_OTHERS") AS 
select
	sid session_id,
        u.name owner,
        o.name,
	decode(lmode,
		0, 'None',           /* Mon Lock equivalent */
		1, 'Null',           /* N */
		2, 'Row-S (SS)',     /* L */
		3, 'Row-X (SX)',     /* R */
		4, 'Share',          /* S */
		5, 'S/Row-X (SSX)',  /* C */
		6, 'Exclusive',      /* X */
		'Invalid') mode_held,
         decode(request,
		0, 'None',           /* Mon Lock equivalent */
		1, 'Null',           /* N */
		2, 'Row-S (SS)',     /* L */
		3, 'Row-X (SX)',     /* R */
		4, 'Share',          /* S */
		5, 'S/Row-X (SSX)',  /* C */
		6, 'Exclusive',      /* X */
		'Invalid') mode_requested,
	 l.ctime last_convert,
	 decode(block,
	        0, 'Not Blocking',  /* Not blocking any other processes */
		1, 'Blocking',      /* This lock blocks other processes */
		2, 'Global',        /* This lock is global, so we can't tell */
		to_char(block)) blocking_others
      from (select l.laddr addr, l.kaddr kaddr,  /* 1040651: Defn for v$lock */
                   s.ksusenum sid, r.ksqrsidt type, r.ksqrsid1 id1,
                   r.ksqrsid2 id2, l.lmode lmode, l.request request,
                   l.ctime ctime, l.block block
              from v$_lock l, x$ksuse s, x$ksqrs r
              where l.saddr = s.addr and l.raddr = r.addr and
                    s.inst_id = USERENV('Instance')) l, obj$ o, user$ u
      where l.id1 = o.obj#
      and   o.owner# = u.user#
      and   l.type = 'TM';

CREATE OR REPLACE FORCE VIEW "DBA_DMT_FREE_SPACE"("TABLESPACE_ID","FILE_ID","BLOCK_ID","BLOCKS") AS 
select  ts#, file#, block#, length
from    fet$;

CREATE OR REPLACE FORCE VIEW "DBA_DMT_USED_EXTENTS"("SEGMENT_FILEID","SEGMENT_BLOCK","TABLESPACE_ID","EXTENT_ID","FILEID","BLOCK","LENGTH") AS 
select  u.segfile#, u.segblock#, u.ts#,
        u.ext#, u.file#, u.block#, u.length
from    sys.uet$ u
where   not exists (select * from sys.recyclebin$ rb
                    where u.ts# = rb.ts#
                      and u.segfile# = rb.file#
                      and u.segblock# = rb.block#);

CREATE OR REPLACE FORCE VIEW "DBA_ENABLED_AGGREGATIONS"("AGGREGATION_TYPE","PRIMARY_ID","QUALIFIER_ID1","QUALIFIER_ID2") AS 
select decode(trace_type, 1, 'CLIENT_ID', 3, 'SERVICE',
                 4, 'SERVICE_MODULE', 5, 'SERVICE_MODULE_ACTION', 'UNDEFINED'),
                 primary_id, qualifier_id1, qualifier_id2
  from WRI$_AGGREGATION_ENABLED;

CREATE OR REPLACE FORCE VIEW "DBA_ENABLED_TRACES"("TRACE_TYPE","PRIMARY_ID","QUALIFIER_ID1","QUALIFIER_ID2","WAITS","BINDS","INSTANCE_NAME") AS 
select decode(trace_type, 1, 'CLIENT_ID', 3, 'SERVICE',
                 4, 'SERVICE_MODULE', 5, 'SERVICE_MODULE_ACTION', 'UNDEFINED'),
                 primary_id, qualifier_id1, qualifier_id2,
                 decode(bitand(flags,8), 8, 'TRUE', 'FALSE'),
                 decode(bitand(flags,4), 4, 'TRUE', 'FALSE'),
                 instance_name
  from WRI$_TRACING_ENABLED;

CREATE OR REPLACE FORCE VIEW "DBA_ERRORS"("OWNER","NAME","TYPE","SEQUENCE","LINE","POSITION","TEXT","ATTRIBUTE","MESSAGE_NUMBER") AS 
select u.name, o.name,
decode(o.type#, 4, 'VIEW', 7, 'PROCEDURE', 8, 'FUNCTION', 9, 'PACKAGE',
               11, 'PACKAGE BODY', 12, 'TRIGGER', 13, 'TYPE', 14, 'TYPE BODY',
               22, 'LIBRARY', 28, 'JAVA SOURCE', 29, 'JAVA CLASS',
               43, 'DIMENSION', 'UNDEFINED'),
  e.sequence#, e.line, e.position#, e.text,
  decode(e.property, 0,'ERROR', 1, 'WARNING', 'UNDEFINED'), e.error#
from sys.obj$ o, sys.error$ e, sys.user$ u
where o.obj# = e.obj#
  and o.owner# = u.user#
  and o.type# in (4, 7, 8, 9, 11, 12, 13, 14, 22, 28, 29, 43);

CREATE OR REPLACE FORCE VIEW "DBA_EVALUATION_CONTEXTS"("EVALUATION_CONTEXT_OWNER","EVALUATION_CONTEXT_NAME","EVALUATION_FUNCTION","EVALUATION_CONTEXT_COMMENT") AS 
SELECT /*+ all_rows */
       u.name, o.name, ec.eval_func, ec.ec_comment
FROM   rule_ec$ ec, obj$ o, user$ u
WHERE  ec.obj# = o.obj# and o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "DBA_EVALUATION_CONTEXT_TABLES"("EVALUATION_CONTEXT_OWNER","EVALUATION_CONTEXT_NAME","TABLE_ALIAS","TABLE_NAME") AS 
SELECT /*+ all_rows */
       u.name, o.name, ect.tab_alias, ect.tab_name
FROM   rec_tab$ ect, obj$ o, user$ u
WHERE  ect.ec_obj# = o.obj# and o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "DBA_EVALUATION_CONTEXT_VARS"("EVALUATION_CONTEXT_OWNER","EVALUATION_CONTEXT_NAME","VARIABLE_NAME","VARIABLE_TYPE","VARIABLE_VALUE_FUNCTION","VARIABLE_METHOD_FUNCTION") AS 
SELECT /*+ all_rows */
       u.name, o.name, ecv.var_name, ecv.var_type, ecv.var_val_func,
       ecv.var_mthd_func
FROM   rec_var$ ecv, obj$ o, user$ u
WHERE  ecv.ec_obj# = o.obj# and o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "DBA_EXPORT_OBJECTS"("HET_TYPE","OBJECT_PATH","COMMENTS","NAMED") AS 
select a.htype,a.name,a.descrip,
 (select 'Y' from dual
  where exists (select 1 from sys.metafilter$ f
                 where f.filter='NAME' and f.type=a.name))
 from sys.metanametrans$ a
 where a.descrip is not null order by a.htype,a.name;

CREATE OR REPLACE FORCE VIEW "DBA_EXP_FILES"("EXP_VERSION","EXP_TYPE","FILE_NAME","USER_NAME","TIMESTAMP") AS 
select o.expid, decode(o.exptype, 'X', 'COMPLETE', 'C', 'CUMULATIVE',
                                  'I', 'INCREMENTAL', 'UNDEFINED'),
       o.expfile, o.expuser, o.expdate
from sys.incfil o;

CREATE OR REPLACE FORCE VIEW "DBA_EXP_OBJECTS"("OWNER","OBJECT_NAME","OBJECT_TYPE","CUMULATIVE","INCREMENTAL","EXPORT_VERSION") AS 
select u.name, o.name,
       decode(o.type#, 1, 'INDEX', 2, 'TABLE', 3, 'CLUSTER',
                      4, 'VIEW', 5, 'SYNONYM', 6, 'SEQUENCE', 7, 'PROCEDURE',
                      8, 'FUNCTION', 9, 'PACKAGE', 11, 'PACKAGE BODY',
                      12, 'TRIGGER', 13, 'TYPE', 14, 'TYPE BODY',
                      22, 'LIBRARY', 28, 'JAVA SOURCE', 29, 'JAVA CLASS',
                      30, 'JAVA RESOURCE', 'UNDEFINED'),
       o.ctime, o.itime, o.expid
from sys.incexp o, sys.user$ u
where o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "DBA_EXP_VERSION"("EXP_VERSION") AS 
select o.expid
from sys.incvid o;

CREATE OR REPLACE FORCE VIEW "DBA_EXTENTS"("OWNER","SEGMENT_NAME","PARTITION_NAME","SEGMENT_TYPE","TABLESPACE_NAME","EXTENT_ID","FILE_ID","BLOCK_ID","BYTES","BLOCKS","RELATIVE_FNO") AS 
select ds.owner, ds.segment_name, ds.partition_name, ds.segment_type,
       ds.tablespace_name,
       e.ext#, f.file#, e.block#, e.length * ds.blocksize, e.length, e.file#
from sys.uet$ e, sys.sys_dba_segs ds, sys.file$ f
where e.segfile# = ds.relative_fno
  and e.segblock# = ds.header_block
  and e.ts# = ds.tablespace_id
  and e.ts# = f.ts#
  and e.file# = f.relfile#
  and bitand(NVL(ds.segment_flags,0), 1) = 0
  and bitand(NVL(ds.segment_flags,0), 65536) = 0
union all
select /*+ ordered use_nl(e) use_nl(f) */
       ds.owner, ds.segment_name, ds.partition_name, ds.segment_type,
       ds.tablespace_name,
       e.ktfbueextno, f.file#, e.ktfbuebno,
       e.ktfbueblks * ds.blocksize, e.ktfbueblks, e.ktfbuefno
from sys.sys_dba_segs ds, sys.x$ktfbue e, sys.file$ f
where e.ktfbuesegfno = ds.relative_fno
  and e.ktfbuesegbno = ds.header_block
  and e.ktfbuesegtsn = ds.tablespace_id
  and e.ktfbuesegtsn = f.ts#
  and e.ktfbuefno = f.relfile#
  and bitand(NVL(ds.segment_flags, 0), 1) = 1
  and bitand(NVL(ds.segment_flags,0), 65536) = 0;

CREATE OR REPLACE FORCE VIEW "DBA_EXTERNAL_LOCATIONS"("OWNER","TABLE_NAME","LOCATION","DIRECTORY_OWNER","DIRECTORY_NAME") AS 
select u.name, o.name, xl.name, 'SYS', nvl(xl.dir, xt.default_dir)
from sys.external_location$ xl, sys.user$ u, sys.obj$ o, sys.external_tab$ xt
where o.owner# = u.user#
  and o.obj# = xl.obj#
  and o.obj# = xt.obj#;

CREATE OR REPLACE FORCE VIEW "DBA_EXTERNAL_TABLES"("OWNER","TABLE_NAME","TYPE_OWNER","TYPE_NAME","DEFAULT_DIRECTORY_OWNER","DEFAULT_DIRECTORY_NAME","REJECT_LIMIT","ACCESS_TYPE","ACCESS_PARAMETERS","PROPERTY") AS 
select u.name, o.name, 'SYS', xt.type$, 'SYS', xt.default_dir,
       decode(xt.reject_limit, 2147483647, 'UNLIMITED', xt.reject_limit),
       decode(xt.par_type, 1, 'BLOB', 2, 'CLOB',       'UNKNOWN'),
       decode(xt.par_type, 1, NULL,   2, xt.param_clob, NULL),
       decode(xt.property, 2, 'REFERENCED', 1, 'ALL',     'UNKNOWN')
from sys.external_tab$ xt, sys.obj$ o, sys.user$ u
where o.owner# = u.user#
  and o.obj# = xt.obj#;

CREATE OR REPLACE FORCE VIEW "DBA_FEATURE_USAGE_STATISTICS"("DBID","NAME","VERSION","DETECTED_USAGES","TOTAL_SAMPLES","CURRENTLY_USED","FIRST_USAGE_DATE","LAST_USAGE_DATE","AUX_COUNT","FEATURE_INFO","LAST_SAMPLE_DATE","LAST_SAMPLE_PERIOD","SAMPLE_INTERVAL","DESCRIPTION") AS 
select samp.dbid, fu.name, samp.version, detected_usages, total_samples,
  decode(to_char(last_usage_date, 'MM/DD/YYYY, HH:MI:SS'),
         NULL, 'FALSE',
         to_char(last_sample_date, 'MM/DD/YYYY, HH:MI:SS'), 'TRUE',
         'FALSE')
  currently_used, first_usage_date, last_usage_date, aux_count,
  feature_info, last_sample_date, last_sample_period,
  sample_interval, mt.description
 from wri$_dbu_usage_sample samp, wri$_dbu_feature_usage fu,
      wri$_dbu_feature_metadata mt
 where
  samp.dbid    = fu.dbid and
  samp.version = fu.version and
  fu.name      = mt.name and
  fu.name not like '_DBFUS_TEST%' and   /* filter out test features */
  bitand(mt.usg_det_method, 4) != 4     /* filter out disabled features */;

CREATE OR REPLACE FORCE VIEW "DBA_FGA_AUDIT_TRAIL"("SESSION_ID","TIMESTAMP","DB_USER","OS_USER","USERHOST","CLIENT_ID","EXT_NAME","OBJECT_SCHEMA","OBJECT_NAME","POLICY_NAME","SCN","SQL_TEXT","SQL_BIND","COMMENT$TEXT","STATEMENT_TYPE","EXTENDED_TIMESTAMP","PROXY_SESSIONID","GLOBAL_UID","INSTANCE_NUMBER","OS_PROCESS","TRANSACTIONID","STATEMENTID","ENTRYID") AS 
select
      sessionid,
      CAST (
        (FROM_TZ(ntimestamp#,'00:00') AT LOCAL) AS DATE
      ),
      dbuid, osuid, oshst, clientid, extid,
      obj$schema, obj$name, policyname, scn, to_nchar(lsqltext),
      to_nchar(lsqlbind), comment$text,
      DECODE(stmt_type, 1, 'SELECT', 2, 'INSERT', 4, 'UPDATE', 8, 'DELETE',
             'INVALID'),
      FROM_TZ(ntimestamp#,'00:00') AT LOCAL,
      proxy$sid, user$guid, instance#, process#,
      xid, statement, entryid
from sys.fga_log$;

CREATE OR REPLACE FORCE VIEW "DBA_FREE_SPACE"("TABLESPACE_NAME","FILE_ID","BLOCK_ID","BYTES","BLOCKS","RELATIVE_FNO") AS 
select ts.name, fi.file#, f.block#,
       f.length * ts.blocksize, f.length, f.file#
from sys.ts$ ts, sys.fet$ f, sys.file$ fi
where ts.ts# = f.ts#
  and f.ts# = fi.ts#
  and f.file# = fi.relfile#
  and ts.bitmapped = 0
union all
select /*+ ordered use_nl(f) use_nl(fi) */
       ts.name, fi.file#, f.ktfbfebno,
       f.ktfbfeblks * ts.blocksize, f.ktfbfeblks, f.ktfbfefno
from sys.ts$ ts, sys.x$ktfbfe f, sys.file$ fi
where ts.ts# = f.ktfbfetsn
  and f.ktfbfetsn = fi.ts#
  and f.ktfbfefno = fi.relfile#
  and ts.bitmapped <> 0 and ts.online$ in (1,4) and ts.contents$ = 0
union all
select /*+ ordered use_nl(u) use_nl(fi) */
       ts.name, fi.file#, u.ktfbuebno,
       u.ktfbueblks * ts.blocksize, u.ktfbueblks, u.ktfbuefno
from sys.recyclebin$ rb, sys.ts$ ts, sys.x$ktfbue u, sys.file$ fi
where ts.ts# = rb.ts#
  and rb.ts# = fi.ts#
  and rb.file# = fi.relfile#
  and u.ktfbuesegtsn = rb.ts#
  and u.ktfbuesegfno = rb.file#
  and u.ktfbuesegbno = rb.block#
  and ts.bitmapped <> 0 and ts.online$ in (1,4) and ts.contents$ = 0
union all
select ts.name, fi.file#, u.block#,
       u.length * ts.blocksize, u.length, u.file#
from sys.ts$ ts, sys.uet$ u, sys.file$ fi, sys.recyclebin$ rb
where ts.ts# = u.ts#
  and u.ts# = fi.ts#
  and u.segfile# = fi.relfile#
  and u.ts# = rb.ts#
  and u.segfile# = rb.file#
  and u.segblock# = rb.block#
  and ts.bitmapped = 0;

CREATE OR REPLACE FORCE VIEW "DBA_FREE_SPACE_COALESCED"("TABLESPACE_NAME","TOTAL_EXTENTS","EXTENTS_COALESCED","PERCENT_EXTENTS_COALESCED","TOTAL_BYTES","BYTES_COALESCED","TOTAL_BLOCKS","BLOCKS_COALESCED","PERCENT_BLOCKS_COALESCED") AS 
select name,total_extents, extents_coalesced,
       extents_coalesced/total_extents*100,total_blocks*c.blocksize,
       blocks_coalesced*c.blocksize, total_blocks, blocks_coalesced,
       blocks_coalesced/total_blocks*100
from DBA_FREE_SPACE_COALESCED_TMP1 a, DBA_FREE_SPACE_COALESCED_TMP2 b,
      sys.ts$ c
where a.ts#=b.ts# and a.ts#=c.ts#
union all
select name, total_extents, total_extents, 100, total_blocks*c.blocksize,
       total_blocks*c.blocksize, total_blocks, total_blocks, 100
from DBA_FREE_SPACE_COALESCED_TMP3 b, sys.ts$ c
where b.ts# = c.ts#;

CREATE OR REPLACE FORCE VIEW "DBA_FREE_SPACE_COALESCED_TMP1"("TS#","EXTENTS_COALESCED","BLOCKS_COALESCED") AS 
select ts#, count(*) extents_coalesced, sum(length) blocks_coalesced
from sys.fet$ a
where not exists (
  select * from sys.fet$ b
  where b.ts#=a.ts# and
        b.file#=a.file# and
        a.block#=b.block#+b.length)
group by ts#;

CREATE OR REPLACE FORCE VIEW "DBA_FREE_SPACE_COALESCED_TMP2"("TS#","TOTAL_EXTENTS","TOTAL_BLOCKS") AS 
select ts#, count(*), sum(length)
    from sys.fet$
  group by ts#;

CREATE OR REPLACE FORCE VIEW "DBA_FREE_SPACE_COALESCED_TMP3"("TS#","TOTAL_EXTENTS","TOTAL_BLOCKS") AS 
select ktfbfetsn, count(*), sum(ktfbfeblks)
    from sys.x$ktfbfe
  group by ktfbfetsn;

CREATE OR REPLACE FORCE VIEW "DBA_GLOBAL_CONTEXT"("NAMESPACE","SCHEMA","PACKAGE") AS 
select o.name, c.schema,c.package
from  context$ c, obj$ o
where c.obj# = o.obj#
and o.type# = 44
and c.flags= 2;

CREATE OR REPLACE FORCE VIEW "DBA_HIGH_WATER_MARK_STATISTICS"("DBID","NAME","VERSION","HIGHWATER","LAST_VALUE","DESCRIPTION") AS 
select dbid, hwm.name, version, highwater, last_value, description
 from wri$_dbu_high_water_mark hwm, wri$_dbu_hwm_metadata mt
 where hwm.name = mt.name and
       hwm.name not like '_HWM_TEST%' and             /* filter out test hwm */
       bitand(mt.method, 4) != 4                  /* filter out disabled hwm */;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_ACTIVE_SESS_HISTORY"("SNAP_ID","DBID","INSTANCE_NUMBER","SAMPLE_ID","SAMPLE_TIME","SESSION_ID","SESSION_SERIAL#","USER_ID","SQL_ID","SQL_CHILD_NUMBER","SQL_PLAN_HASH_VALUE","SERVICE_HASH","SESSION_TYPE","SQL_OPCODE","QC_SESSION_ID","QC_INSTANCE_ID","CURRENT_OBJ#","CURRENT_FILE#","CURRENT_BLOCK#","SEQ#","EVENT_ID","P1","P2","P3","WAIT_TIME","TIME_WAITED","PROGRAM","MODULE","ACTION","CLIENT_ID") AS 
select ash.snap_id, ash.dbid, ash.instance_number,
       sample_id, sample_time,
       session_id, session_serial#, user_id,
       sql_id, sql_child_number, sql_plan_hash_value,
       service_hash, session_type, sql_opcode, qc_session_id,
       qc_instance_id, current_obj#, current_file#, current_block#,
       seq#, event_id, p1, p2, p3, wait_time, time_waited, program,
       module, action, client_id
from WRM$_SNAPSHOT sn, WRH$_ACTIVE_SESSION_HISTORY ash
where      ash.snap_id          = sn.snap_id
      and  ash.dbid             = sn.dbid
      and  ash.instance_number  = sn.instance_number
      and  sn.status            = 0
      and  sn.bl_moved          = 0
union all
select ash.snap_id, ash.dbid, ash.instance_number,
       sample_id, sample_time,
       session_id, session_serial#, user_id,
       sql_id, sql_child_number, sql_plan_hash_value,
       service_hash, session_type, sql_opcode, qc_session_id,
       qc_instance_id, current_obj#, current_file#, current_block#,
       seq#, event_id, p1, p2, p3, wait_time, time_waited, program,
       module, action, client_id
from WRM$_SNAPSHOT sn, WRH$_ACTIVE_SESSION_HISTORY_BL ash
where      ash.snap_id          = sn.snap_id
      and  ash.dbid             = sn.dbid
      and  ash.instance_number  = sn.instance_number
      and  sn.status            = 0
      and  sn.bl_moved          = 1;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_BASELINE"("DBID","BASELINE_ID","BASELINE_NAME","START_SNAP_ID","START_SNAP_TIME","END_SNAP_ID","END_SNAP_TIME") AS 
select t1.dbid, t1.baseline_id,
       max(t1.baseline_name)     baseline_name,
       max(t1.start_snap_id)     start_snap_id,
       max(t1.start_snap_time)   start_snap_time,
       t1.end_snap_id            end_snap_id,
       max(s2.end_interval_time) end_snap_time
from
  (select bl.dbid, bl.baseline_id, max(bl.baseline_name) baseline_name,
          bl.start_snap_id, min(s1.end_interval_time) start_snap_time,
          max(bl.end_snap_id) end_snap_id
     from WRM$_BASELINE bl, WRM$_SNAPSHOT s1
    where bl.dbid = s1.dbid
      and bl.start_snap_id = s1.snap_id
    group by bl.dbid, baseline_id, start_snap_id) t1,
  WRM$_SNAPSHOT s2
where
  t1.dbid          = s2.dbid and
  t1.end_snap_id   = s2.snap_id
group by t1.dbid, baseline_id, end_snap_id;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_BG_EVENT_SUMMARY"("SNAP_ID","DBID","INSTANCE_NUMBER","EVENT_ID","EVENT_NAME","WAIT_CLASS_ID","WAIT_CLASS","TOTAL_WAITS","TOTAL_TIMEOUTS","TIME_WAITED_MICRO") AS 
select e.snap_id, e.dbid, e.instance_number,
       e.event_id, en.event_name, en.wait_class_id, en.wait_class,
       total_waits, total_timeouts, time_waited_micro
from WRM$_SNAPSHOT sn, WRH$_BG_EVENT_SUMMARY e, DBA_HIST_EVENT_NAME en
where     sn.snap_id         = e.snap_id
      and sn.dbid            = e.dbid
      and sn.instance_number = e.instance_number
      and sn.status          = 0
      and e.event_id         = en.event_id
      and e.dbid             = en.dbid;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_BUFFER_POOL_STAT"("SNAP_ID","DBID","INSTANCE_NUMBER","ID","NAME","BLOCK_SIZE","SET_MSIZE","CNUM_REPL","CNUM_WRITE","CNUM_SET","BUF_GOT","SUM_WRITE","SUM_SCAN","FREE_BUFFER_WAIT","WRITE_COMPLETE_WAIT","BUFFER_BUSY_WAIT","FREE_BUFFER_INSPECTED","DIRTY_BUFFERS_INSPECTED","DB_BLOCK_CHANGE","DB_BLOCK_GETS","CONSISTENT_GETS","PHYSICAL_READS","PHYSICAL_WRITES") AS 
select bp.snap_id, bp.dbid, bp.instance_number,
       id, name, block_size, set_msize,
       cnum_repl, cnum_write, cnum_set, buf_got, sum_write, sum_scan,
       free_buffer_wait, write_complete_wait, buffer_busy_wait,
       free_buffer_inspected, dirty_buffers_inspected,
       db_block_change, db_block_gets, consistent_gets,
       physical_reads, physical_writes
  from WRM$_SNAPSHOT sn, WRH$_BUFFER_POOL_STATISTICS bp
  where     sn.snap_id         = bp.snap_id
        and sn.dbid            = bp.dbid
        and sn.instance_number = bp.instance_number
        and sn.status          = 0;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_CLASS_CACHE_TRANSFER"("SNAP_ID","DBID","INSTANCE_NUMBER","CLASS","CR_TRANSFER","CURRENT_TRANSFER","X_2_NULL","X_2_NULL_FORCED_WRITE","X_2_NULL_FORCED_STALE","X_2_S","X_2_S_FORCED_WRITE","S_2_NULL","S_2_NULL_FORCED_STALE","NULL_2_X","S_2_X","NULL_2_S") AS 
select cct.snap_id, cct.dbid, cct.instance_number,
       class, cr_transfer, current_transfer,
       x_2_null, x_2_null_forced_write, x_2_null_forced_stale,
       x_2_s,    x_2_s_forced_write,
       s_2_null, s_2_null_forced_stale,
       null_2_x, s_2_x, null_2_s
  from wrm$_snapshot sn, WRH$_CLASS_CACHE_TRANSFER cct
  where     sn.snap_id         = cct.snap_id
        and sn.dbid            = cct.dbid
        and sn.instance_number = cct.instance_number
        and sn.status          = 0
        and sn.bl_moved        = 0
union all
select cct.snap_id, cct.dbid, cct.instance_number,
       class, cr_transfer, current_transfer,
       x_2_null, x_2_null_forced_write, x_2_null_forced_stale,
       x_2_s,    x_2_s_forced_write,
       s_2_null, s_2_null_forced_stale,
       null_2_x, s_2_x, null_2_s
  from wrm$_snapshot sn, WRH$_CLASS_CACHE_TRANSFER_BL cct
  where     sn.snap_id         = cct.snap_id
        and sn.dbid            = cct.dbid
        and sn.instance_number = cct.instance_number
        and sn.status          = 0
        and sn.bl_moved        = 1;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_CR_BLOCK_SERVER"("SNAP_ID","DBID","INSTANCE_NUMBER","CR_REQUESTS","CURRENT_REQUESTS","DATA_REQUESTS","UNDO_REQUESTS","TX_REQUESTS","CURRENT_RESULTS","PRIVATE_RESULTS","ZERO_RESULTS","DISK_READ_RESULTS","FAIL_RESULTS","FAIRNESS_DOWN_CONVERTS","FAIRNESS_CLEARS","FREE_GC_ELEMENTS","FLUSHES","FLUSHES_QUEUED","FLUSH_QUEUE_FULL","FLUSH_MAX_TIME","LIGHT_WORKS","ERRORS") AS 
select crb.snap_id, crb.dbid, crb.instance_number,
       cr_requests, current_requests,
       data_requests, undo_requests, tx_requests,
       current_results, private_results, zero_results,
       disk_read_results, fail_results,
       fairness_down_converts, fairness_clears, free_gc_elements,
       flushes, flushes_queued, flush_queue_full, flush_max_time,
       light_works, errors
  from wrm$_snapshot sn, WRH$_CR_BLOCK_SERVER crb
  where     sn.snap_id         = crb.snap_id
        and sn.dbid            = crb.dbid
        and sn.instance_number = crb.instance_number
        and sn.status          = 0;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_CURRENT_BLOCK_SERVER"("SNAP_ID","DBID","INSTANCE_NUMBER","PIN1","PIN10","PIN100","PIN1000","PIN10000","FLUSH1","FLUSH10","FLUSH100","FLUSH1000","FLUSH10000","WRITE1","WRITE10","WRITE100","WRITE1000","WRITE10000") AS 
select cub.snap_id, cub.dbid, cub.instance_number,
       pin1,   pin10,   pin100,   pin1000,   pin10000,
       flush1, flush10, flush100, flush1000, flush10000,
       write1, write10, write100, write1000, write10000
  from wrm$_snapshot sn, WRH$_CURRENT_BLOCK_SERVER cub
  where     sn.snap_id         = cub.snap_id
        and sn.dbid            = cub.dbid
        and sn.instance_number = cub.instance_number
        and sn.status          = 0;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_DATABASE_INSTANCE"("DBID","INSTANCE_NUMBER","STARTUP_TIME","PARALLEL","VERSION","DB_NAME","INSTANCE_NAME","HOST_NAME","LAST_ASH_SAMPLE_ID") AS 
select dbid, instance_number, startup_time, parallel, version,
       db_name, instance_name, host_name, last_ash_sample_id
from WRM$_DATABASE_INSTANCE;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_DATAFILE"("DBID","FILE#","CREATION_CHANGE#","FILENAME","TS#","TSNAME","BLOCK_SIZE") AS 
select dbid, file#, creation_change#,
       filename, ts#, tsname, block_size
from WRH$_DATAFILE;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_DB_CACHE_ADVICE"("SNAP_ID","DBID","INSTANCE_NUMBER","BPID","BUFFERS_FOR_ESTIMATE","NAME","BLOCK_SIZE","ADVICE_STATUS","SIZE_FOR_ESTIMATE","SIZE_FACTOR","PHYSICAL_READS","BASE_PHYSICAL_READS","ACTUAL_PHYSICAL_READS") AS 
select db.snap_id, db.dbid, db.instance_number,
       bpid, buffers_for_estimate,
       name, block_size, advice_status, size_for_estimate,
       size_factor, physical_reads, base_physical_reads,
       actual_physical_reads
from WRM$_SNAPSHOT sn, WRH$_DB_CACHE_ADVICE db
where      db.snap_id          = sn.snap_id
      and  db.dbid             = sn.dbid
      and  db.instance_number  = sn.instance_number
      and  sn.status           = 0
      and  sn.bl_moved         = 0
union all
select db.snap_id, db.dbid, db.instance_number,
       bpid, buffers_for_estimate,
       name, block_size, advice_status, size_for_estimate,
       size_factor, physical_reads, base_physical_reads,
       actual_physical_reads
from WRM$_SNAPSHOT sn, WRH$_DB_CACHE_ADVICE_BL db
where      db.snap_id          = sn.snap_id
      and  db.dbid             = sn.dbid
      and  db.instance_number  = sn.instance_number
      and  sn.status           = 0
      and  sn.bl_moved         = 1;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_DLM_MISC"("SNAP_ID","DBID","INSTANCE_NUMBER","STATISTIC#","NAME","VALUE") AS 
select dlm.snap_id, dlm.dbid, dlm.instance_number,
       statistic#, name, value
  from wrm$_snapshot sn, WRH$_DLM_MISC dlm
  where     sn.snap_id         = dlm.snap_id
        and sn.dbid            = dlm.dbid
        and sn.instance_number = dlm.instance_number
        and sn.status          = 0
        and sn.bl_moved        = 0
union all
select dlm.snap_id, dlm.dbid, dlm.instance_number,
       statistic#, name, value
  from wrm$_snapshot sn, WRH$_DLM_MISC_BL dlm
  where     sn.snap_id         = dlm.snap_id
        and sn.dbid            = dlm.dbid
        and sn.instance_number = dlm.instance_number
        and sn.status          = 0
        and sn.bl_moved        = 1;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_ENQUEUE_STAT"("SNAP_ID","DBID","INSTANCE_NUMBER","EQ_TYPE","REQ_REASON","TOTAL_REQ#","TOTAL_WAIT#","SUCC_REQ#","FAILED_REQ#","CUM_WAIT_TIME","EVENT#") AS 
select eq.snap_id, eq.dbid, eq.instance_number,
       eq_type, req_reason, total_req#,
       total_wait#, succ_req#, failed_req#, cum_wait_time, event#
  from wrm$_snapshot sn, WRH$_ENQUEUE_STAT eq
  where     sn.snap_id         = eq.snap_id
        and sn.dbid            = eq.dbid
        and sn.instance_number = eq.instance_number
        and sn.status          = 0;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_EVENT_NAME"("DBID","EVENT_ID","EVENT_NAME","WAIT_CLASS_ID","WAIT_CLASS") AS 
select dbid, event_id, event_name, wait_class_id, wait_class
  from WRH$_EVENT_NAME;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_FILEMETRIC_HISTORY"("SNAP_ID","DBID","INSTANCE_NUMBER","FILEID","CREATIONTIME","BEGIN_TIME","END_TIME","INTSIZE","GROUP_ID","AVGREADTIME","AVGWRITETIME","PHYSICALREAD","PHYSICALWRITE","PHYBLKREAD","PHYBLKWRITE") AS 
select fm.snap_id, fm.dbid, fm.instance_number,
       fileid, creationtime, begin_time,
       end_time, intsize, group_id, avgreadtime, avgwritetime,
       physicalread, physicalwrite, phyblkread, phyblkwrite
  from wrm$_snapshot sn, WRH$_FILEMETRIC_HISTORY fm
  where     sn.snap_id         = fm.snap_id
        and sn.dbid            = fm.dbid
        and sn.instance_number = fm.instance_number
        and sn.status          = 0;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_FILESTATXS"("SNAP_ID","DBID","INSTANCE_NUMBER","FILE#","CREATION_CHANGE#","FILENAME","TS#","TSNAME","BLOCK_SIZE","PHYRDS","PHYWRTS","SINGLEBLKRDS","READTIM","WRITETIM","SINGLEBLKRDTIM","PHYBLKRD","PHYBLKWRT","WAIT_COUNT","TIME") AS 
select f.snap_id, f.dbid, f.instance_number,
       f.file#, f.creation_change#, fn.filename,
       fn.ts#, fn.tsname, fn.block_size,
       phyrds, phywrts, singleblkrds, readtim, writetim,
       singleblkrdtim, phyblkrd, phyblkwrt, wait_count, time
from WRM$_SNAPSHOT sn, WRH$_FILESTATXS f, DBA_HIST_DATAFILE fn
where      f.dbid             = fn.dbid
      and  f.file#            = fn.file#
      and  f.creation_change# = fn.creation_change#
      and  f.snap_id          = sn.snap_id
      and  f.dbid             = sn.dbid
      and  f.instance_number  = sn.instance_number
      and  sn.status          = 0
      and  sn.bl_moved        = 0
union all
select f.snap_id, f.dbid, f.instance_number,
       f.file#, f.creation_change#, fn.filename,
       fn.ts#, fn.tsname, fn.block_size,
       phyrds, phywrts, singleblkrds, readtim, writetim,
       singleblkrdtim, phyblkrd, phyblkwrt, wait_count, time
from WRM$_SNAPSHOT sn, WRH$_FILESTATXS_BL f, DBA_HIST_DATAFILE fn
where      f.dbid              = fn.dbid
      and  f.file#             = fn.file#
      and  f.creation_change#  = fn.creation_change#
      and  f.snap_id           = sn.snap_id
      and  f.dbid              = sn.dbid
      and  f.instance_number   = sn.instance_number
      and  sn.status           = 0
      and  sn.bl_moved         = 1;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_INSTANCE_RECOVERY"("SNAP_ID","DBID","INSTANCE_NUMBER","RECOVERY_ESTIMATED_IOS","ACTUAL_REDO_BLKS","TARGET_REDO_BLKS","LOG_FILE_SIZE_REDO_BLKS","LOG_CHKPT_TIMEOUT_REDO_BLKS","LOG_CHKPT_INTERVAL_REDO_BLKS","FAST_START_IO_TARGET_REDO_BLKS","TARGET_MTTR","ESTIMATED_MTTR","CKPT_BLOCK_WRITES","OPTIMAL_LOGFILE_SIZE","ESTD_CLUSTER_AVAILABLE_TIME","WRITES_MTTR","WRITES_LOGFILE_SIZE","WRITES_LOG_CHECKPOINT_SETTINGS","WRITES_OTHER_SETTINGS","WRITES_AUTOTUNE","WRITES_FULL_THREAD_CKPT") AS 
select ir.snap_id, ir.dbid, ir.instance_number, recovery_estimated_ios,
       actual_redo_blks, target_redo_blks, log_file_size_redo_blks,
       log_chkpt_timeout_redo_blks, log_chkpt_interval_redo_blks,
       fast_start_io_target_redo_blks, target_mttr, estimated_mttr,
       ckpt_block_writes, optimal_logfile_size, estd_cluster_available_time,
       writes_mttr, writes_logfile_size, writes_log_checkpoint_settings,
       writes_other_settings, writes_autotune, writes_full_thread_ckpt
  from wrm$_snapshot sn, WRH$_INSTANCE_RECOVERY ir
  where     sn.snap_id         = ir.snap_id
        and sn.dbid            = ir.dbid
        and sn.instance_number = ir.instance_number
        and sn.status          = 0;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_JAVA_POOL_ADVICE"("SNAP_ID","DBID","INSTANCE_NUMBER","JAVA_POOL_SIZE_FOR_ESTIMATE","JAVA_POOL_SIZE_FACTOR","ESTD_LC_SIZE","ESTD_LC_MEMORY_OBJECTS","ESTD_LC_TIME_SAVED","ESTD_LC_TIME_SAVED_FACTOR","ESTD_LC_LOAD_TIME","ESTD_LC_LOAD_TIME_FACTOR","ESTD_LC_MEMORY_OBJECT_HITS") AS 
select jp.snap_id, jp.dbid, jp.instance_number,
       java_pool_size_for_estimate, java_pool_size_factor,
       estd_lc_size, estd_lc_memory_objects,
       estd_lc_time_saved, estd_lc_time_saved_factor,
       estd_lc_load_time, estd_lc_load_time_factor,
       estd_lc_memory_object_hits
  from wrm$_snapshot sn, WRH$_JAVA_POOL_ADVICE jp
  where     sn.snap_id         = jp.snap_id
        and sn.dbid            = jp.dbid
        and sn.instance_number = jp.instance_number
        and sn.status          = 0;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_LATCH"("SNAP_ID","DBID","INSTANCE_NUMBER","LATCH_HASH","LATCH_NAME","LEVEL#","GETS","MISSES","SLEEPS","IMMEDIATE_GETS","IMMEDIATE_MISSES","SPIN_GETS","SLEEP1","SLEEP2","SLEEP3","SLEEP4","WAIT_TIME") AS 
select l.snap_id, l.dbid, l.instance_number,
       l.latch_hash, ln.latch_name, level#,
       gets, misses, sleeps, immediate_gets, immediate_misses, spin_gets,
       sleep1, sleep2, sleep3, sleep4, wait_time
from WRM$_SNAPSHOT sn, WRH$_LATCH l, DBA_HIST_LATCH_NAME ln
where      l.latch_hash       = ln.latch_hash
      and  l.dbid             = ln.dbid
      and  l.snap_id          = sn.snap_id
      and  l.dbid             = sn.dbid
      and  l.instance_number  = sn.instance_number
      and  sn.status          = 0
      and  sn.bl_moved        = 0
union all
select l.snap_id, l.dbid, l.instance_number,
       l.latch_hash, ln.latch_name, level#,
       gets, misses, sleeps, immediate_gets, immediate_misses, spin_gets,
       sleep1, sleep2, sleep3, sleep4, wait_time
from WRM$_SNAPSHOT sn, WRH$_LATCH_BL l, DBA_HIST_LATCH_NAME ln
where      l.latch_hash        = ln.latch_hash
      and  l.dbid              = ln.dbid
      and  l.snap_id           = sn.snap_id
      and  l.dbid              = sn.dbid
      and  l.instance_number   = sn.instance_number
      and  sn.status           = 0
      and  sn.bl_moved         = 1;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_LATCH_CHILDREN"("SNAP_ID","DBID","INSTANCE_NUMBER","LATCH_HASH","LATCH_NAME","CHILD#","GETS","MISSES","SLEEPS","IMMEDIATE_GETS","IMMEDIATE_MISSES","SPIN_GETS","SLEEP1","SLEEP2","SLEEP3","SLEEP4","WAIT_TIME") AS 
select l.snap_id, l.dbid, l.instance_number,
       l.latch_hash, ln.latch_name, child#,
       gets, misses, sleeps, immediate_gets, immediate_misses, spin_gets,
       sleep1, sleep2, sleep3, sleep4, wait_time
from WRM$_SNAPSHOT sn, WRH$_LATCH_CHILDREN l, DBA_HIST_LATCH_NAME ln
where      l.latch_hash       = ln.latch_hash
      and  l.dbid             = ln.dbid
      and  l.snap_id          = sn.snap_id
      and  l.dbid             = sn.dbid
      and  l.instance_number  = sn.instance_number
      and  sn.status          = 0
      and  sn.bl_moved        = 0
union all
select l.snap_id, l.dbid, l.instance_number,
       l.latch_hash, ln.latch_name, child#,
       gets, misses, sleeps, immediate_gets, immediate_misses, spin_gets,
       sleep1, sleep2, sleep3, sleep4, wait_time
from WRM$_SNAPSHOT sn, WRH$_LATCH_CHILDREN_BL l, DBA_HIST_LATCH_NAME ln
where      l.latch_hash        = ln.latch_hash
      and  l.dbid              = ln.dbid
      and  l.snap_id           = sn.snap_id
      and  l.dbid              = sn.dbid
      and  l.instance_number   = sn.instance_number
      and  sn.status           = 0
      and  sn.bl_moved         = 1;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_LATCH_MISSES_SUMMARY"("SNAP_ID","DBID","INSTANCE_NUMBER","PARENT_NAME","WHERE_IN_CODE","NWFAIL_COUNT","SLEEP_COUNT","WTR_SLP_COUNT") AS 
select l.snap_id, l.dbid, l.instance_number, parent_name, where_in_code,
       nwfail_count, sleep_count, wtr_slp_count
from WRM$_SNAPSHOT sn, WRH$_LATCH_MISSES_SUMMARY l
where      l.snap_id          = sn.snap_id
      and  l.dbid             = sn.dbid
      and  l.instance_number  = sn.instance_number
      and  sn.status          = 0
      and  sn.bl_moved        = 0
union all
select l.snap_id, l.dbid, l.instance_number, parent_name, where_in_code,
       nwfail_count, sleep_count, wtr_slp_count
from WRM$_SNAPSHOT sn, WRH$_LATCH_MISSES_SUMMARY_BL l
where      l.snap_id          = sn.snap_id
      and  l.dbid             = sn.dbid
      and  l.instance_number  = sn.instance_number
      and  sn.status          = 0
      and  sn.bl_moved        = 1;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_LATCH_NAME"("DBID","LATCH_HASH","LATCH_NAME") AS 
select dbid, latch_hash, latch_name
from WRH$_LATCH_NAME;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_LATCH_PARENT"("SNAP_ID","DBID","INSTANCE_NUMBER","LATCH_HASH","LATCH_NAME","LEVEL#","GETS","MISSES","SLEEPS","IMMEDIATE_GETS","IMMEDIATE_MISSES","SPIN_GETS","SLEEP1","SLEEP2","SLEEP3","SLEEP4","WAIT_TIME") AS 
select l.snap_id, l.dbid, l.instance_number,
       l.latch_hash, ln.latch_name, level#,
       gets, misses, sleeps, immediate_gets, immediate_misses, spin_gets,
       sleep1, sleep2, sleep3, sleep4, wait_time
from WRM$_SNAPSHOT sn, WRH$_LATCH_PARENT l, DBA_HIST_LATCH_NAME ln
where      l.latch_hash       = ln.latch_hash
      and  l.dbid             = ln.dbid
      and  l.snap_id          = sn.snap_id
      and  l.dbid             = sn.dbid
      and  l.instance_number  = sn.instance_number
      and  sn.status          = 0
      and  sn.bl_moved        = 0
union all
select l.snap_id, l.dbid, l.instance_number,
       l.latch_hash, ln.latch_name, level#,
       gets, misses, sleeps, immediate_gets, immediate_misses, spin_gets,
       sleep1, sleep2, sleep3, sleep4, wait_time
from WRM$_SNAPSHOT sn, WRH$_LATCH_PARENT_BL l, DBA_HIST_LATCH_NAME ln
where      l.latch_hash        = ln.latch_hash
      and  l.dbid              = ln.dbid
      and  l.snap_id           = sn.snap_id
      and  l.dbid              = sn.dbid
      and  l.instance_number   = sn.instance_number
      and  sn.status           = 0
      and  sn.bl_moved         = 1;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_LIBRARYCACHE"("SNAP_ID","DBID","INSTANCE_NUMBER","NAMESPACE","GETS","GETHITS","PINS","PINHITS","RELOADS","INVALIDATIONS","DLM_LOCK_REQUESTS","DLM_PIN_REQUESTS","DLM_PIN_RELEASES","DLM_INVALIDATION_REQUESTS","DLM_INVALIDATIONS") AS 
select lc.snap_id, lc.dbid, lc.instance_number, namespace, gets,
       gethits, pins, pinhits, reloads, invalidations,
       dlm_lock_requests, dlm_pin_requests, dlm_pin_releases,
       dlm_invalidation_requests, dlm_invalidations
  from wrm$_snapshot sn, WRH$_LIBRARYCACHE lc
  where     sn.snap_id         = lc.snap_id
        and sn.dbid            = lc.dbid
        and sn.instance_number = lc.instance_number
        and sn.status          = 0;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_LOG"("SNAP_ID","DBID","INSTANCE_NUMBER","GROUP#","THREAD#","SEQUENCE#","BYTES","MEMBERS","ARCHIVED","STATUS","FIRST_CHANGE#","FIRST_TIME") AS 
select log.snap_id, log.dbid, log.instance_number,
       group#, thread#, sequence#, bytes, members,
       archived, log.status, first_change#, first_time
  from wrm$_snapshot sn, WRH$_LOG log
  where     sn.snap_id         = log.snap_id
        and sn.dbid            = log.dbid
        and sn.instance_number = log.instance_number
        and sn.status          = 0;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_METRIC_NAME"("DBID","GROUP_ID","GROUP_NAME","METRIC_ID","METRIC_NAME","METRIC_UNIT") AS 
select dbid, group_id, group_name, metric_id, metric_name, metric_unit
from WRH$_METRIC_NAME;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_MTTR_TARGET_ADVICE"("SNAP_ID","DBID","INSTANCE_NUMBER","MTTR_TARGET_FOR_ESTIMATE","ADVICE_STATUS","DIRTY_LIMIT","ESTD_CACHE_WRITES","ESTD_CACHE_WRITE_FACTOR","ESTD_TOTAL_WRITES","ESTD_TOTAL_WRITE_FACTOR","ESTD_TOTAL_IOS","ESTD_TOTAL_IO_FACTOR") AS 
select mt.snap_id, mt.dbid, mt.instance_number, mttr_target_for_estimate,
       advice_status, dirty_limit,
       estd_cache_writes, estd_cache_write_factor,
       estd_total_writes, estd_total_write_factor,
       estd_total_ios, estd_total_io_factor
  from wrm$_snapshot sn, WRH$_MTTR_TARGET_ADVICE mt
  where     sn.snap_id         = mt.snap_id
        and sn.dbid            = mt.dbid
        and sn.instance_number = mt.instance_number
        and sn.status          = 0;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_OPTIMIZER_ENV"("DBID","OPTIMIZER_ENV_HASH_VALUE","OPTIMIZER_ENV") AS 
select dbid, optimizer_env_hash_value, optimizer_env
from WRH$_OPTIMIZER_ENV;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_OSSTAT"("SNAP_ID","DBID","INSTANCE_NUMBER","STAT_ID","STAT_NAME","VALUE") AS 
select s.snap_id, s.dbid, s.instance_number, s.stat_id,
       nm.stat_name, value
from WRM$_SNAPSHOT sn, WRH$_OSSTAT s, DBA_HIST_OSSTAT_NAME nm
where     s.stat_id          = nm.stat_id
      and s.dbid             = nm.dbid
      and s.snap_id          = sn.snap_id
      and s.dbid             = sn.dbid
      and s.instance_number  = sn.instance_number
      and sn.status          = 0
      and sn.bl_moved        = 0
union all
select s.snap_id, s.dbid, s.instance_number, s.stat_id,
       nm.stat_name, value
from WRM$_SNAPSHOT sn, WRH$_OSSTAT_BL s, DBA_HIST_OSSTAT_NAME nm
where     s.stat_id          = nm.stat_id
      and s.dbid             = nm.dbid
      and s.snap_id          = sn.snap_id
      and s.dbid             = sn.dbid
      and s.instance_number  = sn.instance_number
      and sn.status          = 0
      and sn.bl_moved        = 1;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_OSSTAT_NAME"("DBID","STAT_ID","STAT_NAME") AS 
select dbid, stat_id, stat_name
from WRH$_OSSTAT_NAME;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_PARAMETER"("SNAP_ID","DBID","INSTANCE_NUMBER","PARAMETER_HASH","PARAMETER_NAME","VALUE","ISDEFAULT","ISMODIFIED") AS 
select p.snap_id, p.dbid, p.instance_number,
       p.parameter_hash, pn.parameter_name,
       value, isdefault, ismodified
from WRM$_SNAPSHOT sn, WRH$_PARAMETER p, WRH$_PARAMETER_NAME pn
where     p.parameter_hash   = pn.parameter_hash
      and p.dbid             = pn.dbid
      and p.snap_id          = sn.snap_id
      and p.dbid             = sn.dbid
      and p.instance_number  = sn.instance_number
      and sn.status          = 0
      and sn.bl_moved        = 0
union all
select p.snap_id, p.dbid, p.instance_number,
       p.parameter_hash, pn.parameter_name,
       value, isdefault, ismodified
from WRM$_SNAPSHOT sn, WRH$_PARAMETER_BL p, WRH$_PARAMETER_NAME pn
where     p.parameter_hash   = pn.parameter_hash
      and p.dbid             = pn.dbid
      and p.snap_id          = sn.snap_id
      and p.dbid             = sn.dbid
      and p.instance_number  = sn.instance_number
      and sn.status          = 0
      and sn.bl_moved        = 1;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_PARAMETER_NAME"("DBID","PARAMETER_HASH","PARAMETER_NAME") AS 
select dbid, parameter_hash, parameter_name
from WRH$_PARAMETER_NAME
where (translate(parameter_name,'_','#') not like '#%');

CREATE OR REPLACE FORCE VIEW "DBA_HIST_PGASTAT"("SNAP_ID","DBID","INSTANCE_NUMBER","NAME","VALUE") AS 
select pga.snap_id, pga.dbid, pga.instance_number, name, value
  from wrm$_snapshot sn, WRH$_PGASTAT pga
  where     sn.snap_id         = pga.snap_id
        and sn.dbid            = pga.dbid
        and sn.instance_number = pga.instance_number
        and sn.status          = 0;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_PGA_TARGET_ADVICE"("SNAP_ID","DBID","INSTANCE_NUMBER","PGA_TARGET_FOR_ESTIMATE","PGA_TARGET_FACTOR","ADVICE_STATUS","BYTES_PROCESSED","ESTD_EXTRA_BYTES_RW","ESTD_PGA_CACHE_HIT_PERCENTAGE","ESTD_OVERALLOC_COUNT") AS 
select pga.snap_id, pga.dbid, pga.instance_number,
       pga_target_for_estimate,
       pga_target_factor, advice_status, bytes_processed,
       estd_extra_bytes_rw, estd_pga_cache_hit_percentage,
       estd_overalloc_count
  from wrm$_snapshot sn, WRH$_PGA_TARGET_ADVICE pga
  where     sn.snap_id         = pga.snap_id
        and sn.dbid            = pga.dbid
        and sn.instance_number = pga.instance_number
        and sn.status          = 0;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_RESOURCE_LIMIT"("SNAP_ID","DBID","INSTANCE_NUMBER","RESOURCE_NAME","CURRENT_UTILIZATION","MAX_UTILIZATION","INITIAL_ALLOCATION","LIMIT_VALUE") AS 
select rl.snap_id, rl.dbid, rl.instance_number, resource_name,
       current_utilization, max_utilization, initial_allocation,
       limit_value
  from wrm$_snapshot sn, WRH$_RESOURCE_LIMIT rl
  where     sn.snap_id         = rl.snap_id
        and sn.dbid            = rl.dbid
        and sn.instance_number = rl.instance_number
        and sn.status          = 0;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_ROWCACHE_SUMMARY"("SNAP_ID","DBID","INSTANCE_NUMBER","PARAMETER","TOTAL_USAGE","USAGE","GETS","GETMISSES","SCANS","SCANMISSES","SCANCOMPLETES","MODIFICATIONS","FLUSHES","DLM_REQUESTS","DLM_CONFLICTS","DLM_RELEASES") AS 
select rc.snap_id, rc.dbid, rc.instance_number,
       parameter, total_usage,
       usage, gets, getmisses, scans, scanmisses, scancompletes,
       modifications, flushes, dlm_requests, dlm_conflicts,
       dlm_releases
  from WRM$_SNAPSHOT sn, WRH$_ROWCACHE_SUMMARY rc
  where     sn.snap_id         = rc.snap_id
        and sn.dbid            = rc.dbid
        and sn.instance_number = rc.instance_number
        and sn.status          = 0
        and sn.bl_moved        = 0
union all
select rc.snap_id, rc.dbid, rc.instance_number,
       parameter, total_usage,
       usage, gets, getmisses, scans, scanmisses, scancompletes,
       modifications, flushes, dlm_requests, dlm_conflicts,
       dlm_releases
  from WRM$_SNAPSHOT sn, WRH$_ROWCACHE_SUMMARY_BL rc
  where     sn.snap_id         = rc.snap_id
        and sn.dbid            = rc.dbid
        and sn.instance_number = rc.instance_number
        and sn.status          = 0
        and sn.bl_moved        = 1;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_SEG_STAT"("SNAP_ID","DBID","INSTANCE_NUMBER","TS#","OBJ#","DATAOBJ#","LOGICAL_READS_TOTAL","LOGICAL_READS_DELTA","BUFFER_BUSY_WAITS_TOTAL","BUFFER_BUSY_WAITS_DELTA","DB_BLOCK_CHANGES_TOTAL","DB_BLOCK_CHANGES_DELTA","PHYSICAL_READS_TOTAL","PHYSICAL_READS_DELTA","PHYSICAL_WRITES_TOTAL","PHYSICAL_WRITES_DELTA","PHYSICAL_READS_DIRECT_TOTAL","PHYSICAL_READS_DIRECT_DELTA","PHYSICAL_WRITES_DIRECT_TOTAL","PHYSICAL_WRITES_DIRECT_DELTA","ITL_WAITS_TOTAL","ITL_WAITS_DELTA","ROW_LOCK_WAITS_TOTAL","ROW_LOCK_WAITS_DELTA","GC_CR_BLOCKS_SERVED_TOTAL","GC_CR_BLOCKS_SERVED_DELTA","GC_CU_BLOCKS_SERVED_TOTAL","GC_CU_BLOCKS_SERVED_DELTA","SPACE_USED_TOTAL","SPACE_USED_DELTA","SPACE_ALLOCATED_TOTAL","SPACE_ALLOCATED_DELTA","TABLE_SCANS_TOTAL","TABLE_SCANS_DELTA") AS 
select seg.snap_id, seg.dbid, seg.instance_number, ts#, obj#, dataobj#,
       logical_reads_total, logical_reads_delta,
       buffer_busy_waits_total, buffer_busy_waits_delta,
       db_block_changes_total, db_block_changes_delta,
       physical_reads_total, physical_reads_delta,
       physical_writes_total, physical_writes_delta,
       physical_reads_direct_total, physical_reads_direct_delta,
       physical_writes_direct_total, physical_writes_direct_delta,
       itl_waits_total, itl_waits_delta,
       row_lock_waits_total, row_lock_waits_delta,
       gc_cr_blocks_served_total, gc_cr_blocks_served_delta,
       gc_cu_blocks_served_total, gc_cu_blocks_served_delta,
       space_used_total, space_used_delta,
       space_allocated_total, space_allocated_delta,
       table_scans_total, table_scans_delta
from WRM$_SNAPSHOT sn, WRH$_SEG_STAT seg
where     seg.snap_id         = sn.snap_id
      and seg.dbid            = sn.dbid
      and seg.instance_number = sn.instance_number
      and sn.status           = 0
      and sn.bl_moved         = 0
union all
select seg.snap_id, seg.dbid, seg.instance_number, ts#, obj#, dataobj#,
       logical_reads_total, logical_reads_delta,
       buffer_busy_waits_total, buffer_busy_waits_delta,
       db_block_changes_total, db_block_changes_delta,
       physical_reads_total, physical_reads_delta,
       physical_writes_total, physical_writes_delta,
       physical_reads_direct_total, physical_reads_direct_delta,
       physical_writes_direct_total, physical_writes_direct_delta,
       itl_waits_total, itl_waits_delta,
       row_lock_waits_total, row_lock_waits_delta,
       gc_cr_blocks_served_total, gc_cr_blocks_served_delta,
       gc_cu_blocks_served_total, gc_cu_blocks_served_delta,
       space_used_total, space_used_delta,
       space_allocated_total, space_allocated_delta,
       table_scans_total, table_scans_delta
from WRM$_SNAPSHOT sn, WRH$_SEG_STAT_BL seg
where     seg.snap_id          = sn.snap_id
      and seg.dbid             = sn.dbid
      and seg.instance_number  = sn.instance_number
      and sn.status            = 0
      and sn.bl_moved          = 1;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_SEG_STAT_OBJ"("DBID","TS#","OBJ#","DATAOBJ#","OWNER","OBJECT_NAME","SUBOBJECT_NAME","OBJECT_TYPE","TABLESPACE_NAME","PARTITION_TYPE") AS 
select dbid, ts#, obj#, dataobj#, owner, object_name,
       subobject_name, object_type, tablespace_name, partition_type
from WRH$_SEG_STAT_OBJ;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_SERVICE_NAME"("DBID","SERVICE_NAME_HASH","SERVICE_NAME") AS 
select dbid, service_name_hash, service_name
  from WRH$_SERVICE_NAME sn;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_SERVICE_STAT"("SNAP_ID","DBID","INSTANCE_NUMBER","SERVICE_NAME_HASH","SERVICE_NAME","STAT_ID","STAT_NAME","VALUE") AS 
select st.snap_id, st.dbid, st.instance_number,
       st.service_name_hash, sv.service_name,
       nm.stat_id, nm.stat_name, value
  from WRM$_SNAPSHOT sn, WRH$_SERVICE_STAT st,
       WRH$_SERVICE_NAME sv, WRH$_STAT_NAME nm
  where    st.service_name_hash = sv.service_name_hash
      and  st.dbid              = sv.dbid
      and  st.stat_id           = nm.stat_id
      and  st.dbid              = nm.dbid
      and  st.snap_id           = sn.snap_id
      and  st.dbid              = sn.dbid
      and  st.instance_number   = sn.instance_number
      and  sn.status            = 0
      and  sn.bl_moved          = 0
union all
select st.snap_id, st.dbid, st.instance_number,
       st.service_name_hash, sv.service_name,
       nm.stat_id, nm.stat_name, value
  from WRM$_SNAPSHOT sn, WRH$_SERVICE_STAT_BL st,
       WRH$_SERVICE_NAME sv, WRH$_STAT_NAME nm
  where    st.service_name_hash = sv.service_name_hash
      and  st.dbid              = sv.dbid
      and  st.stat_id           = nm.stat_id
      and  st.dbid              = nm.dbid
      and  st.snap_id           = sn.snap_id
      and  st.dbid              = sn.dbid
      and  st.instance_number   = sn.instance_number
      and  sn.status            = 0
      and  sn.bl_moved          = 1;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_SERVICE_WAIT_CLASS"("SNAP_ID","DBID","INSTANCE_NUMBER","SERVICE_NAME_HASH","SERVICE_NAME","WAIT_CLASS_ID","WAIT_CLASS","TOTAL_WAITS","TIME_WAITED") AS 
select st.snap_id, st.dbid, st.instance_number,
       st.service_name_hash, nm.service_name,
       wait_class_id, wait_class, total_waits, time_waited
  from WRM$_SNAPSHOT sn, WRH$_SERVICE_WAIT_CLASS st,
       WRH$_SERVICE_NAME nm
  where    st.service_name_hash = nm.service_name_hash
      and  st.dbid              = nm.dbid
      and  st.snap_id           = sn.snap_id
      and  st.dbid              = sn.dbid
      and  st.instance_number   = sn.instance_number
      and  sn.status            = 0
      and  sn.bl_moved          = 0
union all
select st.snap_id, st.dbid, st.instance_number,
       st.service_name_hash, nm.service_name,
       wait_class_id, wait_class, total_waits, time_waited
  from WRM$_SNAPSHOT sn, WRH$_SERVICE_WAIT_CLASS_BL st,
       WRH$_SERVICE_NAME nm
  where    st.service_name_hash = nm.service_name_hash
      and  st.dbid              = nm.dbid
      and  st.snap_id           = sn.snap_id
      and  st.dbid              = sn.dbid
      and  st.instance_number   = sn.instance_number
      and  sn.status            = 0
      and  sn.bl_moved          = 1;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_SESSMETRIC_HISTORY"("SNAP_ID","DBID","INSTANCE_NUMBER","BEGIN_TIME","END_TIME","SESSID","SERIAL#","INTSIZE","GROUP_ID","METRIC_ID","METRIC_NAME","VALUE","METRIC_UNIT") AS 
select m.snap_id, m.dbid, m.instance_number, begin_time, end_time, sessid,
       serial#, intsize, m.group_id, m.metric_id, mn.metric_name,
       value, mn.metric_unit
  from wrm$_snapshot sn, WRH$_SESSMETRIC_HISTORY m, DBA_HIST_METRIC_NAME mn
  where     m.group_id         = mn.group_id
        and m.metric_id        = mn.metric_id
        and m.dbid             = mn.dbid
        and sn.snap_id         = m.snap_id
        and sn.dbid            = m.dbid
        and sn.instance_number = m.instance_number
        and sn.status          = 0;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_SGA"("SNAP_ID","DBID","INSTANCE_NUMBER","NAME","VALUE") AS 
select sga.snap_id, sga.dbid, sga.instance_number, name, value
  from wrm$_snapshot sn, WRH$_SGA sga
  where     sn.snap_id         = sga.snap_id
        and sn.dbid            = sga.dbid
        and sn.instance_number = sga.instance_number
        and sn.status          = 0;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_SGASTAT"("SNAP_ID","DBID","INSTANCE_NUMBER","NAME","POOL","BYTES") AS 
select sga.snap_id, sga.dbid, sga.instance_number, name, pool, bytes
  from wrm$_snapshot sn, WRH$_SGASTAT sga
  where     sn.snap_id         = sga.snap_id
        and sn.dbid            = sga.dbid
        and sn.instance_number = sga.instance_number
        and sn.status          = 0
        and sn.bl_moved        = 0
union all
select sga.snap_id, sga.dbid, sga.instance_number, name, pool, bytes
  from wrm$_snapshot sn, WRH$_SGASTAT_BL sga
  where     sn.snap_id         = sga.snap_id
        and sn.dbid            = sga.dbid
        and sn.instance_number = sga.instance_number
        and sn.status          = 0
        and sn.bl_moved        = 1;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_SHARED_POOL_ADVICE"("SNAP_ID","DBID","INSTANCE_NUMBER","SHARED_POOL_SIZE_FOR_ESTIMATE","SHARED_POOL_SIZE_FACTOR","ESTD_LC_SIZE","ESTD_LC_MEMORY_OBJECTS","ESTD_LC_TIME_SAVED","ESTD_LC_TIME_SAVED_FACTOR","ESTD_LC_LOAD_TIME","ESTD_LC_LOAD_TIME_FACTOR","ESTD_LC_MEMORY_OBJECT_HITS") AS 
select sp.snap_id, sp.dbid, sp.instance_number,
       shared_pool_size_for_estimate,
       shared_pool_size_factor, estd_lc_size, estd_lc_memory_objects,
       estd_lc_time_saved, estd_lc_time_saved_factor,
       estd_lc_load_time, estd_lc_load_time_factor,
       estd_lc_memory_object_hits
  from wrm$_snapshot sn, WRH$_SHARED_POOL_ADVICE sp
  where     sn.snap_id         = sp.snap_id
        and sn.dbid            = sp.dbid
        and sn.instance_number = sp.instance_number
        and sn.status          = 0;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_SNAPSHOT"("SNAP_ID","DBID","INSTANCE_NUMBER","STARTUP_TIME","BEGIN_INTERVAL_TIME","END_INTERVAL_TIME","FLUSH_ELAPSED","SNAP_LEVEL","ERROR_COUNT") AS 
select snap_id, dbid, instance_number, startup_time,
       begin_interval_time, end_interval_time,
       flush_elapsed, snap_level, error_count
from WRM$_SNAPSHOT
where status = 0;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_SNAP_ERROR"("SNAP_ID","DBID","INSTANCE_NUMBER","TABLE_NAME","ERROR_NUMBER") AS 
select snap_id, dbid, instance_number, table_name, error_number
  from wrm$_snap_error;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_SQLBIND"("SNAP_ID","DBID","INSTANCE_NUMBER","SQL_ID","CHILD_NUMBER","NAME","POSITION","DUP_POSITION","DATATYPE","DATATYPE_STRING","CHARACTER_SID","PRECISION","SCALE","MAX_LENGTH","WAS_CAPTURED","LAST_CAPTURED","VALUE_STRING","VALUE_ANYDATA") AS 
select sql.snap_id, sql.dbid, sql.instance_number,
       sql_id, child_number,
       name, position, dup_position, datatype, datatype_string,
       character_sid, precision, scale, max_length, was_captured,
       last_captured, value_string, value_anydata
  from wrm$_snapshot sn, WRH$_SQLBIND sql
  where     sn.snap_id         = sql.snap_id
        and sn.dbid            = sql.dbid
        and sn.instance_number = sql.instance_number
        and sn.status          = 0
        and sn.bl_moved        = 0
union all
select bl.snap_id, bl.dbid, bl.instance_number,
       sql_id, child_number,
       name, position, dup_position, datatype, datatype_string,
       character_sid, precision, scale, max_length, was_captured,
       last_captured, value_string, value_anydata
  from wrm$_snapshot sn, WRH$_SQLBIND_BL bl
  where     sn.snap_id         = bl.snap_id
        and sn.dbid            = bl.dbid
        and sn.instance_number = bl.instance_number
        and sn.status          = 0
        and sn.bl_moved        = 1;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_SQLSTAT"("SNAP_ID","DBID","INSTANCE_NUMBER","SQL_ID","PLAN_HASH_VALUE","OPTIMIZER_COST","OPTIMIZER_MODE","OPTIMIZER_ENV_HASH_VALUE","SHARABLE_MEM","LOADED_VERSIONS","VERSION_COUNT","MODULE","ACTION","SQL_PROFILE","PARSING_SCHEMA_ID","FETCHES_TOTAL","FETCHES_DELTA","END_OF_FETCH_COUNT_TOTAL","END_OF_FETCH_COUNT_DELTA","SORTS_TOTAL","SORTS_DELTA","EXECUTIONS_TOTAL","EXECUTIONS_DELTA","LOADS_TOTAL","LOADS_DELTA","INVALIDATIONS_TOTAL","INVALIDATIONS_DELTA","PARSE_CALLS_TOTAL","PARSE_CALLS_DELTA","DISK_READS_TOTAL","DISK_READS_DELTA","BUFFER_GETS_TOTAL","BUFFER_GETS_DELTA","ROWS_PROCESSED_TOTAL","ROWS_PROCESSED_DELTA","CPU_TIME_TOTAL","CPU_TIME_DELTA","ELAPSED_TIME_TOTAL","ELAPSED_TIME_DELTA","IOWAIT_TOTAL","IOWAIT_DELTA","CLWAIT_TOTAL","CLWAIT_DELTA","APWAIT_TOTAL","APWAIT_DELTA","CCWAIT_TOTAL","CCWAIT_DELTA","DIRECT_WRITES_TOTAL","DIRECT_WRITES_DELTA","PLSEXEC_TIME_TOTAL","PLSEXEC_TIME_DELTA","JAVEXEC_TIME_TOTAL","JAVEXEC_TIME_DELTA") AS 
select sql.snap_id, sql.dbid, sql.instance_number,
       sql_id, plan_hash_value,
       optimizer_cost, optimizer_mode, optimizer_env_hash_value,
       sharable_mem, loaded_versions, version_count,
       module, action,
       sql_profile, parsing_schema_id,
       fetches_total, fetches_delta,
       end_of_fetch_count_total, end_of_fetch_count_delta,
       sorts_total, sorts_delta, executions_total,
       executions_delta, loads_total, loads_delta,
       invalidations_total, invalidations_delta,
       parse_calls_total, parse_calls_delta, disk_reads_total,
       disk_reads_delta, buffer_gets_total, buffer_gets_delta,
       rows_processed_total, rows_processed_delta, cpu_time_total,
       cpu_time_delta, elapsed_time_total, elapsed_time_delta,
       iowait_total, iowait_delta, clwait_total, clwait_delta,
       apwait_total, apwait_delta, ccwait_total, ccwait_delta,
       direct_writes_total, direct_writes_delta, plsexec_time_total,
       plsexec_time_delta, javexec_time_total, javexec_time_delta
from WRM$_SNAPSHOT sn, WRH$_SQLSTAT sql
  where     sn.snap_id         = sql.snap_id
        and sn.dbid            = sql.dbid
        and sn.instance_number = sql.instance_number
        and sn.status          = 0
        and sn.bl_moved        = 0
union all
select sql.snap_id, sql.dbid, sql.instance_number,
       sql_id, plan_hash_value,
       optimizer_cost, optimizer_mode, optimizer_env_hash_value,
       sharable_mem, loaded_versions, version_count,
       module, action,
       sql_profile, parsing_schema_id,
       fetches_total, fetches_delta,
       end_of_fetch_count_total, end_of_fetch_count_delta,
       sorts_total, sorts_delta, executions_total,
       executions_delta, loads_total, loads_delta,
       invalidations_total, invalidations_delta,
       parse_calls_total, parse_calls_delta, disk_reads_total,
       disk_reads_delta, buffer_gets_total, buffer_gets_delta,
       rows_processed_total, rows_processed_delta, cpu_time_total,
       cpu_time_delta, elapsed_time_total, elapsed_time_delta,
       iowait_total, iowait_delta, clwait_total, clwait_delta,
       apwait_total, apwait_delta, ccwait_total, ccwait_delta,
       direct_writes_total, direct_writes_delta, plsexec_time_total,
       plsexec_time_delta, javexec_time_total, javexec_time_delta
from WRM$_SNAPSHOT sn, WRH$_SQLSTAT_BL sql
  where     sn.snap_id         = sql.snap_id
        and sn.dbid            = sql.dbid
        and sn.instance_number = sql.instance_number
        and sn.status          = 0
        and sn.bl_moved        = 1;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_SQLTEXT"("DBID","SQL_ID","SQL_TEXT","COMMAND_TYPE") AS 
select dbid, sql_id, sql_text, command_type
from WRH$_SQLTEXT;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_SQL_PLAN"("DBID","SQL_ID","PLAN_HASH_VALUE","ID","OPERATION","OPTIONS","OBJECT_NODE","OBJECT#","OBJECT_OWNER","OBJECT_NAME","OBJECT_ALIAS","OBJECT_TYPE","OPTIMIZER","PARENT_ID","DEPTH","POSITION","SEARCH_COLUMNS","COST","CARDINALITY","BYTES","OTHER_TAG","PARTITION_START","PARTITION_STOP","PARTITION_ID","OTHER","DISTRIBUTION","CPU_COST","IO_COST","TEMP_SPACE","ACCESS_PREDICATES","FILTER_PREDICATES","PROJECTION","TIME","QBLOCK_NAME","REMARKS") AS 
select dbid, sql_id, plan_hash_value, id, operation, options,
       object_node, object#, object_owner, object_name,
       object_alias, object_type, optimizer,
       parent_id, depth, position, search_columns, cost, cardinality,
       bytes, other_tag, partition_start, partition_stop, partition_id,
       other, distribution, cpu_cost, io_cost, temp_space,
       access_predicates, filter_predicates,
       projection, time, qblock_name, remarks
from WRH$_SQL_PLAN;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_SQL_SUMMARY"("SNAP_ID","DBID","INSTANCE_NUMBER","TOTAL_SQL","TOTAL_SQL_MEM","SINGLE_USE_SQL","SINGLE_USE_SQL_MEM") AS 
select ss.snap_id, ss.dbid, ss.instance_number,
       total_sql, total_sql_mem,
       single_use_sql, single_use_sql_mem
from WRM$_SNAPSHOT sn, WRH$_SQL_SUMMARY ss
where     sn.snap_id         = ss.snap_id
      and sn.dbid            = ss.dbid
      and sn.instance_number = ss.instance_number
      and sn.status          = 0;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_SQL_WORKAREA_HSTGRM"("SNAP_ID","DBID","INSTANCE_NUMBER","LOW_OPTIMAL_SIZE","HIGH_OPTIMAL_SIZE","OPTIMAL_EXECUTIONS","ONEPASS_EXECUTIONS","MULTIPASSES_EXECUTIONS","TOTAL_EXECUTIONS") AS 
select swh.snap_id, swh.dbid, swh.instance_number, low_optimal_size,
       high_optimal_size, optimal_executions, onepass_executions,
       multipasses_executions, total_executions
  from wrm$_snapshot sn, WRH$_SQL_WORKAREA_HISTOGRAM swh
  where     sn.snap_id         = swh.snap_id
        and sn.dbid            = swh.dbid
        and sn.instance_number = swh.instance_number
        and sn.status          = 0;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_STAT_NAME"("DBID","STAT_ID","STAT_NAME") AS 
select dbid, stat_id, stat_name
from WRH$_STAT_NAME;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_SYSMETRIC_HISTORY"("SNAP_ID","DBID","INSTANCE_NUMBER","BEGIN_TIME","END_TIME","INTSIZE","GROUP_ID","METRIC_ID","METRIC_NAME","VALUE","METRIC_UNIT") AS 
select m.snap_id, m.dbid, m.instance_number,
       begin_time, end_time, intsize,
       m.group_id, m.metric_id, mn.metric_name, value, mn.metric_unit
from wrm$_snapshot sn, WRH$_SYSMETRIC_HISTORY m, DBA_HIST_METRIC_NAME mn
where       m.group_id       = mn.group_id
      and   m.metric_id      = mn.metric_id
      and   m.dbid           = mn.dbid
      and   sn.snap_id       = m.snap_id
      and sn.dbid            = m.dbid
      and sn.instance_number = m.instance_number
      and sn.status          = 0;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_SYSMETRIC_SUMMARY"("SNAP_ID","DBID","INSTANCE_NUMBER","BEGIN_TIME","END_TIME","INTSIZE","GROUP_ID","METRIC_ID","METRIC_NAME","METRIC_UNIT","NUM_INTERVAL","MINVAL","MAXVAL","AVERAGE","STANDARD_DEVIATION") AS 
select m.snap_id, m.dbid, m.instance_number,
       begin_time, end_time, intsize,
       m.group_id, m.metric_id, mn.metric_name, mn.metric_unit,
       num_interval, minval, maxval, average, standard_deviation
  from wrm$_snapshot sn, WRH$_SYSMETRIC_SUMMARY m, DBA_HIST_METRIC_NAME mn
  where     m.group_id         = mn.group_id
        and m.metric_id        = mn.metric_id
        and m.dbid             = mn.dbid
        and sn.snap_id         = m.snap_id
        and sn.dbid            = m.dbid
        and sn.instance_number = m.instance_number
        and sn.status          = 0;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_SYSSTAT"("SNAP_ID","DBID","INSTANCE_NUMBER","STAT_ID","STAT_NAME","VALUE") AS 
select s.snap_id, s.dbid, s.instance_number,
       s.stat_id, nm.stat_name, value
from WRM$_SNAPSHOT sn, WRH$_SYSSTAT s, DBA_HIST_STAT_NAME nm
where      s.stat_id          = nm.stat_id
      and  s.dbid             = nm.dbid
      and  s.snap_id          = sn.snap_id
      and  s.dbid             = sn.dbid
      and  s.instance_number  = sn.instance_number
      and  sn.status          = 0
      and  sn.bl_moved        = 0
union all
select s.snap_id, s.dbid, s.instance_number,
       s.stat_id, nm.stat_name, value
from WRM$_SNAPSHOT sn, WRH$_SYSSTAT_BL s, DBA_HIST_STAT_NAME nm
where      s.stat_id           = nm.stat_id
      and  s.dbid              = nm.dbid
      and  s.snap_id           = sn.snap_id
      and  s.dbid              = sn.dbid
      and  s.instance_number   = sn.instance_number
      and  sn.status           = 0
      and  sn.bl_moved         = 1;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_SYSTEM_EVENT"("SNAP_ID","DBID","INSTANCE_NUMBER","EVENT_ID","EVENT_NAME","WAIT_CLASS_ID","WAIT_CLASS","TOTAL_WAITS","TOTAL_TIMEOUTS","TIME_WAITED_MICRO") AS 
select e.snap_id, e.dbid, e.instance_number,
       e.event_id, en.event_name, en.wait_class_id, en.wait_class,
       total_waits, total_timeouts, time_waited_micro
from WRM$_SNAPSHOT sn, WRH$_SYSTEM_EVENT e,
     DBA_HIST_EVENT_NAME en
where     e.event_id         = en.event_id
      and e.dbid             = en.dbid
      and e.snap_id          = sn.snap_id
      and e.dbid             = sn.dbid
      and e.instance_number  = sn.instance_number
      and sn.status          = 0
      and sn.bl_moved        = 0
union all
select e.snap_id, e.dbid, e.instance_number,
       e.event_id, en.event_name, en.wait_class_id, en.wait_class,
       total_waits, total_timeouts, time_waited_micro
from WRM$_SNAPSHOT sn, WRH$_SYSTEM_EVENT_BL e,
     DBA_HIST_EVENT_NAME en
where     e.event_id         = en.event_id
      and e.dbid             = en.dbid
      and e.snap_id          = sn.snap_id
      and e.dbid             = sn.dbid
      and e.instance_number  = sn.instance_number
      and sn.status          = 0
      and sn.bl_moved        = 1;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_SYS_TIME_MODEL"("SNAP_ID","DBID","INSTANCE_NUMBER","STAT_ID","STAT_NAME","VALUE") AS 
select s.snap_id, s.dbid, s.instance_number, s.stat_id,
       nm.stat_name, value
from WRM$_SNAPSHOT sn, WRH$_SYS_TIME_MODEL s, DBA_HIST_STAT_NAME nm
where      s.stat_id          = nm.stat_id
      and  s.dbid             = nm.dbid
      and  s.snap_id          = sn.snap_id
      and  s.dbid             = sn.dbid
      and  s.instance_number  = sn.instance_number
      and  sn.status          = 0
      and  sn.bl_moved        = 0
union all
select s.snap_id, s.dbid, s.instance_number, s.stat_id,
       nm.stat_name, value
from WRM$_SNAPSHOT sn, WRH$_SYS_TIME_MODEL_BL s, DBA_HIST_STAT_NAME nm
where      s.stat_id           = nm.stat_id
      and  s.dbid              = nm.dbid
      and  s.snap_id           = sn.snap_id
      and  s.dbid              = sn.dbid
      and  s.instance_number   = sn.instance_number
      and  sn.status           = 0
      and  sn.bl_moved         = 1;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_TABLESPACE_STAT"("SNAP_ID","DBID","INSTANCE_NUMBER","TS#","TSNAME","CONTENTS","STATUS","SEGMENT_SPACE_MANAGEMENT","EXTENT_MANAGEMENT","IS_BACKUP") AS 
select tbs.snap_id, tbs.dbid, tbs.instance_number, ts#, tsname, contents,
       tbs.status, segment_space_management, extent_management,
       is_backup
from WRM$_SNAPSHOT sn, WRH$_TABLESPACE_STAT tbs
where      tbs.snap_id          = sn.snap_id
      and  tbs.dbid             = sn.dbid
      and  tbs.instance_number  = sn.instance_number
      and  sn.status            = 0
      and  sn.bl_moved          = 0
union all
select tbs.snap_id, tbs.dbid, tbs.instance_number, ts#, tsname, contents,
       tbs.status, segment_space_management, extent_management,
       is_backup
from WRM$_SNAPSHOT sn, WRH$_TABLESPACE_STAT_BL tbs
where      tbs.snap_id          = sn.snap_id
      and  tbs.dbid             = sn.dbid
      and  tbs.instance_number  = sn.instance_number
      and  sn.status            = 0
      and  sn.bl_moved          = 1;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_TBSPC_SPACE_USAGE"("SNAP_ID","DBID","TABLESPACE_ID","TABLESPACE_SIZE","TABLESPACE_MAXSIZE","TABLESPACE_USEDSIZE","RTIME") AS 
select tb.snap_id, tb.dbid, tablespace_id, tablespace_size,
       tablespace_maxsize, tablespace_usedsize, rtime
  from wrm$_snapshot sn, WRH$_TABLESPACE_SPACE_USAGE tb
  where     sn.snap_id         = tb.snap_id
        and sn.dbid            = tb.dbid
        and sn.status          = 0;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_TEMPFILE"("DBID","FILE#","CREATION_CHANGE#","FILENAME","TS#","TSNAME","BLOCK_SIZE") AS 
select dbid, file#, creation_change#,
       filename, ts#, tsname, block_size
from WRH$_TEMPFILE;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_TEMPSTATXS"("SNAP_ID","DBID","INSTANCE_NUMBER","FILE#","CREATION_CHANGE#","FILENAME","TS#","TSNAME","BLOCK_SIZE","PHYRDS","PHYWRTS","SINGLEBLKRDS","READTIM","WRITETIM","SINGLEBLKRDTIM","PHYBLKRD","PHYBLKWRT","WAIT_COUNT","TIME") AS 
select t.snap_id, t.dbid, t.instance_number,
       t.file#, t.creation_change#, tn.filename,
       tn.ts#, tn.tsname, tn.block_size,
       phyrds, phywrts, singleblkrds, readtim, writetim,
       singleblkrdtim, phyblkrd, phyblkwrt, wait_count, time
from WRM$_SNAPSHOT sn, WRH$_TEMPSTATXS t, DBA_HIST_TEMPFILE tn
where     t.dbid             = tn.dbid
      and t.file#            = tn.file#
      and t.creation_change# = tn.creation_change#
      and sn.snap_id         = t.snap_id
      and sn.dbid            = t.dbid
      and sn.instance_number = t.instance_number
      and sn.status          = 0;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_THREAD"("SNAP_ID","DBID","INSTANCE_NUMBER","THREAD#","THREAD_INSTANCE_NUMBER","STATUS","OPEN_TIME","CURRENT_GROUP#","SEQUENCE#") AS 
select th.snap_id, th.dbid, th.instance_number,
       thread#, thread_instance_number, th.status,
       open_time, current_group#, sequence#
  from wrm$_snapshot sn, WRH$_THREAD th
  where     sn.snap_id         = th.snap_id
        and sn.dbid            = th.dbid
        and sn.instance_number = th.instance_number
        and sn.status          = 0;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_UNDOSTAT"("BEGIN_TIME","END_TIME","DBID","INSTANCE_NUMBER","SNAP_ID","UNDOTSN","UNDOBLKS","TXNCOUNT","MAXQUERYLEN","MAXQUERYSQLID","MAXCONCURRENCY","UNXPSTEALCNT","UNXPBLKRELCNT","UNXPBLKREUCNT","EXPSTEALCNT","EXPBLKRELCNT","EXPBLKREUCNT","SSOLDERRCNT","NOSPACEERRCNT","ACTIVEBLKS","UNEXPIREDBLKS","EXPIREDBLKS","TUNED_UNDORETENTION") AS 
select begin_time, end_time, ud.dbid, ud.instance_number,
       ud.snap_id, undotsn,
       undoblks, txncount, maxquerylen, maxquerysqlid,
       maxconcurrency, unxpstealcnt, unxpblkrelcnt, unxpblkreucnt,
       expstealcnt, expblkrelcnt, expblkreucnt, ssolderrcnt,
       nospaceerrcnt, activeblks, unexpiredblks, expiredblks,
       tuned_undoretention
  from wrm$_snapshot sn, WRH$_UNDOSTAT ud
  where     sn.snap_id         = ud.snap_id
        and sn.dbid            = ud.dbid
        and sn.instance_number = ud.instance_number
        and sn.status          = 0;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_WAITCLASSMET_HISTORY"("SNAP_ID","DBID","INSTANCE_NUMBER","WAIT_CLASS_ID","WAIT_CLASS","BEGIN_TIME","END_TIME","INTSIZE","GROUP_ID","AVERAGE_WAITER_COUNT","DBTIME_IN_WAIT","TIME_WAITED","WAIT_COUNT") AS 
select em.snap_id, em.dbid, em.instance_number,
       em.wait_class_id, wn.wait_class, begin_time, end_time, intsize,
       group_id, average_waiter_count, dbtime_in_wait,
       time_waited, wait_count
  from wrm$_snapshot sn, WRH$_WAITCLASSMETRIC_HISTORY em,
       (select wait_class_id, wait_class from wrh$_event_name
        group by wait_class_id, wait_class) wn
  where     em.wait_class_id   = wn.wait_class_id
        and sn.snap_id         = em.snap_id
        and sn.dbid            = em.dbid
        and sn.instance_number = em.instance_number
        and sn.status          = 0;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_WAITSTAT"("SNAP_ID","DBID","INSTANCE_NUMBER","CLASS","WAIT_COUNT","TIME") AS 
select wt.snap_id, wt.dbid, wt.instance_number,
       class, wait_count, time
  from wrm$_snapshot sn, WRH$_WAITSTAT wt
  where     sn.snap_id         = wt.snap_id
        and sn.dbid            = wt.dbid
        and sn.instance_number = wt.instance_number
        and sn.status          = 0
        and sn.bl_moved        = 0
union all
select bl.snap_id, bl.dbid, bl.instance_number, class,
       wait_count, time
  from wrm$_snapshot sn, WRH$_WAITSTAT_BL bl
  where     sn.snap_id         = bl.snap_id
        and sn.dbid            = bl.dbid
        and sn.instance_number = bl.instance_number
        and sn.status          = 0
        and sn.bl_moved        = 1;

CREATE OR REPLACE FORCE VIEW "DBA_HIST_WR_CONTROL"("DBID","SNAP_INTERVAL","RETENTION") AS 
select dbid, snap_interval, retention
from WRM$_WR_CONTROL;

CREATE OR REPLACE FORCE VIEW "DBA_IAS_CONSTRAINT_EXP"("PKEXISTS","OBJ#") AS 
select 1 pkexists, cd.obj# from sys.cdef$ cd
where cd.type# = 2;

CREATE OR REPLACE FORCE VIEW "DBA_IAS_GEN_STMTS"("IAS_TEMPLATE_NAME","LINENO","DDL_TEXT") AS 
select rt.refresh_template_name ias_template_name,
  decode(ro.object_type, -1017, to_number(ro.object_name), 0) lineno, ddl_text
from system.repcat$_refresh_templates rt,
  system.repcat$_template_objects ro,
  system.repcat$_template_types tt
where rt.template_type_id = tt.template_type_id
and bitand(rawtohex(tt.flags),2) = 2
and rt.refresh_template_id = ro.refresh_template_id
and ro.object_type = -1017   -- object_type = dbms_ias_template.generated_ddl;

CREATE OR REPLACE FORCE VIEW "DBA_IAS_GEN_STMTS_EXP"("IAS_TEMPLATE_ID","LINENO","DDL_TEXT") AS 
select ro.refresh_template_id ias_template_id,
  decode(ro.object_type, -1017, to_number(ro.object_name), 0) lineno, ddl_text
from system.repcat$_template_objects ro
where ro.object_type = -1017;

CREATE OR REPLACE FORCE VIEW "DBA_IAS_OBJECTS"("IAS_TEMPLATE_NAME","SCHEMA_NAME","OBJECT_NAME","OBJECT_TYPE","DERIVED_FROM_SNAME","DERIVED_FROM_ONAME") AS 
select ro.ias_template_name,
  ro.schema_name,
  ro.object_name,
  ro.object_type,
  ro.derived_from_sname,
  ro.derived_from_oname
from sys.dba_ias_objects_base ro;

CREATE OR REPLACE FORCE VIEW "DBA_IAS_OBJECTS_BASE"("IAS_TEMPLATE_NAME","SCHEMA_NAME","OBJECT_NAME","OBJECT_TYPE_ID","OBJECT_TYPE","DERIVED_FROM_SNAME","DERIVED_FROM_ONAME") AS 
select rt.refresh_template_name ias_template_name,
  ro.schema_name,
  ro.object_name,
  ro.object_type object_type_id,
  ot.object_type_name object_type,
  ro.derived_from_sname,
  ro.derived_from_oname
from system.repcat$_refresh_templates rt,
  system.repcat$_template_objects ro,
  system.repcat$_object_types ot,
  system.repcat$_template_types tt
where rt.refresh_template_id = ro.refresh_template_id
and ro.object_type = ot.object_type_id
and rt.template_type_id = tt.template_type_id
and bitand(rawtohex(tt.flags),2) = 2;

CREATE OR REPLACE FORCE VIEW "DBA_IAS_OBJECTS_EXP"("TEMPLATE_ID","OBJECT_NAME","SCHEMA_NAME","OBJECT_TYPE") AS 
select ro.refresh_template_id template_id,
       ro.object_name,
       ro.schema_name,
       ot.object_type_name object_type
from system.repcat$_template_objects ro,
  system.repcat$_refresh_templates rt,
  system.repcat$_template_types tt,
  system.repcat$_object_types ot
where ro.refresh_template_id = rt.refresh_template_id
and ro.object_type = ot.object_type_id
and rt.template_type_id = tt.template_type_id
and bitand(rawtohex(tt.flags),2) = 2;

CREATE OR REPLACE FORCE VIEW "DBA_IAS_POSTGEN_STMTS"("IAS_TEMPLATE_ID","LINENO","DDL_TEXT") AS 
select "IAS_TEMPLATE_ID","LINENO","DDL_TEXT" from sys.dba_ias_gen_stmts_exp gs
  where gs.lineno > (select lineno from sys.dba_ias_gen_stmts_exp f
                       where to_char(f.ddl_text)='0'
                         and f.ias_template_id = gs.ias_template_id);

CREATE OR REPLACE FORCE VIEW "DBA_IAS_PREGEN_STMTS"("IAS_TEMPLATE_ID","LINENO","DDL_TEXT") AS 
select "IAS_TEMPLATE_ID","LINENO","DDL_TEXT" from sys.dba_ias_gen_stmts_exp gs
  where gs.lineno < (select lineno from sys.dba_ias_gen_stmts_exp f
                       where to_char(f.ddl_text)='0'
                         and f.ias_template_id = gs.ias_template_id);

CREATE OR REPLACE FORCE VIEW "DBA_IAS_SITES"("IAS_TEMPLATE_NAME","USER_NAME","SITE_NAME") AS 
select refresh_template_name, user_name, site_name
from system.repcat$_template_sites
where status = -100 /*secret code for IAS template sites? */;

CREATE OR REPLACE FORCE VIEW "DBA_IAS_TEMPLATES"("OWNER","REFRESH_GROUP_NAME","IAS_TEMPLATE_NAME","IAS_TEMPLATE_ID","TEMPLATE_COMMENT") AS 
select owner, refresh_group_name,
  refresh_template_name ias_template_name,
  refresh_template_id   ias_template_id,
  template_comment
from system.repcat$_refresh_templates rt,
  system.repcat$_template_types tt
where rt.template_type_id = tt.template_type_id
and bitand(rawtohex(tt.flags),2) = 2;

CREATE OR REPLACE FORCE VIEW "DBA_INDEXES"("OWNER","INDEX_NAME","INDEX_TYPE","TABLE_OWNER","TABLE_NAME","TABLE_TYPE","UNIQUENESS","COMPRESSION","PREFIX_LENGTH","TABLESPACE_NAME","INI_TRANS","MAX_TRANS","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENTS","MAX_EXTENTS","PCT_INCREASE","PCT_THRESHOLD","INCLUDE_COLUMN","FREELISTS","FREELIST_GROUPS","PCT_FREE","LOGGING","BLEVEL","LEAF_BLOCKS","DISTINCT_KEYS","AVG_LEAF_BLOCKS_PER_KEY","AVG_DATA_BLOCKS_PER_KEY","CLUSTERING_FACTOR","STATUS","NUM_ROWS","SAMPLE_SIZE","LAST_ANALYZED","DEGREE","INSTANCES","PARTITIONED","TEMPORARY","GENERATED","SECONDARY","BUFFER_POOL","USER_STATS","DURATION","PCT_DIRECT_ACCESS","ITYP_OWNER","ITYP_NAME","PARAMETERS","GLOBAL_STATS","DOMIDX_STATUS","DOMIDX_OPSTATUS","FUNCIDX_STATUS","JOIN_INDEX","IOT_REDUNDANT_PKEY_ELIM","DROPPED") AS 
select u.name, o.name,
       decode(bitand(i.property, 16), 0, '', 'FUNCTION-BASED ') ||
        decode(i.type#, 1, 'NORMAL'||
                          decode(bitand(i.property, 4), 0, '', 4, '/REV'),
                      2, 'BITMAP', 3, 'CLUSTER', 4, 'IOT - TOP',
                      5, 'IOT - NESTED', 6, 'SECONDARY', 7, 'ANSI', 8, 'LOB',
                      9, 'DOMAIN'),
       iu.name, io.name,
       decode(io.type#, 0, 'NEXT OBJECT', 1, 'INDEX', 2, 'TABLE', 3, 'CLUSTER',
                       4, 'VIEW', 5, 'SYNONYM', 6, 'SEQUENCE', 'UNDEFINED'),
       decode(bitand(i.property, 1), 0, 'NONUNIQUE', 1, 'UNIQUE', 'UNDEFINED'),
       decode(bitand(i.flags, 32), 0, 'DISABLED', 32, 'ENABLED', null),
       i.spare2,
       decode(bitand(i.property, 34), 0,
           decode(i.type#, 9, null, ts.name), null),
       decode(bitand(i.property, 2),0, i.initrans, null),
       decode(bitand(i.property, 2),0, i.maxtrans, null),
       s.iniexts * ts.blocksize,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                             s.extsize * ts.blocksize),
       s.minexts, s.maxexts,
        decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                     s.extpct),
       decode(i.type#, 4, mod(i.pctthres$,256), NULL), i.trunccnt,
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
         decode(bitand(o.flags, 2), 2, 1, decode(s.lists, 0, 1, s.lists))),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
         decode(bitand(o.flags, 2), 2, 1, decode(s.groups, 0, 1, s.groups))),
       decode(bitand(i.property, 2),0,i.pctfree$,null),
       decode(bitand(i.property, 2), 2, NULL,
                decode(bitand(i.flags, 4), 0, 'YES', 'NO')),
       i.blevel, i.leafcnt, i.distkey, i.lblkkey, i.dblkkey, i.clufac,
       decode(bitand(i.property, 2), 2,
                   decode(i.type#, 9, decode(bitand(i.flags, 8),
                                        8, 'INPROGRS', 'VALID'), 'N/A'),
                     decode(bitand(i.flags, 1), 1, 'UNUSABLE',
                            decode(bitand(i.flags, 8), 8, 'INPROGRS',
                                                            'VALID'))),
       rowcnt, samplesize, analyzetime,
       decode(i.degree, 32767, 'DEFAULT', nvl(i.degree,1)),
       decode(i.instances, 32767, 'DEFAULT', nvl(i.instances,1)),
       decode(bitand(i.property, 2), 2, 'YES', 'NO'),
       decode(bitand(o.flags, 2), 0, 'N', 2, 'Y', 'N'),
       decode(bitand(o.flags, 4), 0, 'N', 4, 'Y', 'N'),
       decode(bitand(o.flags, 16), 0, 'N', 16, 'Y', 'N'),
       decode(bitand(o.flags, 2), 2, 'DEFAULT',
             decode(s.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL)),
       decode(bitand(i.flags, 64), 0, 'NO', 'YES'),
       decode(bitand(o.flags, 2), 0, NULL,
           decode(bitand(i.property, 64), 64, 'SYS$SESSION', 'SYS$TRANSACTION')),
       decode(bitand(i.flags, 128), 128, mod(trunc(i.pctthres$/256),256),
              decode(i.type#, 4, mod(trunc(i.pctthres$/256),256), NULL)),
       itu.name, ito.name, i.spare4,
       decode(bitand(i.flags, 2048), 0, 'NO', 'YES'),
       decode(i.type#, 9, decode(o.status, 5, 'IDXTYP_INVLD',
                                           1, 'VALID'),  ''),
       decode(i.type#, 9, decode(bitand(i.flags, 16), 16, 'FAILED', 'VALID'), ''),
       decode(bitand(i.property, 16), 0, '',
              decode(bitand(i.flags, 1024), 0, 'ENABLED', 'DISABLED')),
       decode(bitand(i.property, 1024), 1024, 'YES', 'NO'),
       decode(bitand(i.property, 16384), 16384, 'YES', 'NO'),
       decode(bitand(o.flags, 128), 128, 'YES', 'NO')
from sys.ts$ ts, sys.seg$ s,
     sys.user$ iu, sys.obj$ io, sys.user$ u, sys.ind$ i, sys.obj$ o,
     sys.user$ itu, sys.obj$ ito
where u.user# = o.owner#
  and o.obj# = i.obj#
  and i.bo# = io.obj#
  and io.owner# = iu.user#
  and bitand(i.flags, 4096) = 0
  and bitand(o.flags, 128) = 0
  and i.ts# = ts.ts# (+)
  and i.file# = s.file# (+)
  and i.block# = s.block# (+)
  and i.ts# = s.ts# (+)
  and i.indmethod# = ito.obj# (+)
  and ito.owner# = itu.user# (+);

CREATE OR REPLACE FORCE VIEW "DBA_INDEXTYPES"("OWNER","INDEXTYPE_NAME","IMPLEMENTATION_SCHEMA","IMPLEMENTATION_NAME","INTERFACE_VERSION","IMPLEMENTATION_VERSION","NUMBER_OF_OPERATORS","PARTITIONING","ARRAY_DML") AS 
select u.name, o.name, u1.name, o1.name, i.interface_version#, t.version#,
io.opcount, decode(bitand(i.property, 48), 0, 'NONE', 16, 'RANGE', 32, 'HASH', 48, 'HASH,RANGE'),
decode(bitand(i.property, 2), 0, 'NO', 2, 'YES')
from sys.indtypes$ i, sys.user$ u, sys.obj$ o,
sys.user$ u1, (select it.obj#, count(*) opcount from
sys.indop$ io1, sys.indtypes$ it where
io1.obj# = it.obj# and bitand(io1.property, 4) != 4
group by it.obj#) io, sys.obj$ o1,
sys.type$ t
where i.obj# = o.obj# and o.owner# = u.user# and
u1.user# = o.owner# and io.obj# = i.obj# and
o1.obj# = i.implobj# and o1.oid$ = t.toid;

CREATE OR REPLACE FORCE VIEW "DBA_INDEXTYPE_ARRAYTYPES"("OWNER","INDEXTYPE_NAME","BASE_TYPE_SCHEMA","BASE_TYPE_NAME","BASE_TYPE","ARRAY_TYPE_SCHEMA","ARRAY_TYPE_NAME") AS 
select indtypu.name, indtypo.name,
decode(i.type, 121, (select baseu.name from user$ baseu
       where baseo.owner#=baseu.user#), null),
decode(i.type, 121, baseo.name, null),
decode(i.type,  /* DATA_TYPE */
0, null,
1, 'VARCHAR2',
2, 'NUMBER',
3, 'NATIVE INTEGER',
8, 'LONG',
9, 'VARCHAR',
11, 'ROWID',
12, 'DATE',
23, 'RAW',
24, 'LONG RAW',
29, 'BINARY_INTEGER',
69, 'ROWID',
96, 'CHAR',
100, 'BINARY_FLOAT',
101, 'BINARY_DOUBLE',
102, 'REF CURSOR',
104, 'UROWID',
105, 'MLSLABEL',
106, 'MLSLABEL',
110, 'REF',
111, 'REF',
112, 'CLOB',
113, 'BLOB', 114, 'BFILE', 115, 'CFILE',
121, 'OBJECT',
122, 'TABLE',
123, 'VARRAY',
178, 'TIME',
179, 'TIME WITH TIME ZONE',
180, 'TIMESTAMP',
181, 'TIMESTAMP WITH TIME ZONE',
231, 'TIMESTAMP WITH LOCAL TIME ZONE',
182, 'INTERVAL YEAR TO MONTH',
183, 'INTERVAL DAY TO SECOND',
250, 'PL/SQL RECORD',
251, 'PL/SQL TABLE',
252, 'PL/SQL BOOLEAN',
'UNDEFINED'),
arrayu.name, arrayo.name
from sys.user$ indtypu, sys.indarraytype$ i, sys.obj$ indtypo,
sys.obj$ baseo, sys.obj$ arrayo, sys.user$ arrayu
where i.obj# = indtypo.obj# and  indtypu.user# = indtypo.owner# and
      i.basetypeobj# = baseo.obj#(+) and i.arraytypeobj# = arrayo.obj# and
      arrayu.user# = arrayo.owner#;

CREATE OR REPLACE FORCE VIEW "DBA_INDEXTYPE_COMMENTS"("OWNER","INDEXTYPE_NAME","COMMENTS") AS 
select  u.name, o.name, c.comment$
from    sys.obj$ o, sys.user$ u, sys.indtypes$ i, sys.com$ c
where   o.obj# = i.obj# and u.user# = o.owner# and c.obj# = i.obj#;

CREATE OR REPLACE FORCE VIEW "DBA_INDEXTYPE_OPERATORS"("OWNER","INDEXTYPE_NAME","OPERATOR_SCHEMA","OPERATOR_NAME","BINDING#") AS 
select u.name, o.name, u1.name, op.name, i.bind#
from sys.user$ u, sys.indop$ i, sys.obj$ o,
sys.obj$ op, sys.user$ u1
where i.obj# = o.obj# and i.oper# = op.obj# and
      u.user# = o.owner# and bitand(i.property, 4) != 4 and
      u1.user#=op.owner#;

CREATE OR REPLACE FORCE VIEW "DBA_IND_COLUMNS"("INDEX_OWNER","INDEX_NAME","TABLE_OWNER","TABLE_NAME","COLUMN_NAME","COLUMN_POSITION","COLUMN_LENGTH","CHAR_LENGTH","DESCEND") AS 
select io.name, idx.name, bo.name, base.name,
       decode(bitand(c.property, 1024), 1024,
              (select decode(bitand(tc.property, 1), 1, ac.name, tc.name)
              from sys.col$ tc, attrcol$ ac
              where tc.intcol# = c.intcol#-1
                and tc.obj# = c.obj#
                and tc.obj# = ac.obj#(+)
                and tc.intcol# = ac.intcol#(+)),
              decode(ac.name, null, c.name, ac.name)),
       ic.pos#, c.length, c.spare3,
       decode(bitand(c.property, 131072), 131072, 'DESC', 'ASC')
from sys.col$ c, sys.obj$ idx, sys.obj$ base, sys.icol$ ic,
     sys.user$ io, sys.user$ bo, sys.ind$ i, sys.attrcol$ ac
where ic.bo# = c.obj#
  and decode(bitand(i.property,1024),0,ic.intcol#,ic.spare2) = c.intcol#
  and ic.bo# = base.obj#
  and io.user# = idx.owner#
  and bo.user# = base.owner#
  and ic.obj# = idx.obj#
  and idx.obj# = i.obj#
  and i.type# in (1, 2, 3, 4, 6, 7, 9)
  and c.obj# = ac.obj#(+)
  and c.intcol# = ac.intcol#(+);

CREATE OR REPLACE FORCE VIEW "DBA_IND_EXPRESSIONS"("INDEX_OWNER","INDEX_NAME","TABLE_OWNER","TABLE_NAME","COLUMN_EXPRESSION","COLUMN_POSITION") AS 
select io.name, idx.name, bo.name, base.name, c.default$, ic.pos#
from sys.col$ c, sys.obj$ idx, sys.obj$ base, sys.icol$ ic,
     sys.user$ io, sys.user$ bo, sys.ind$ i
where bitand(ic.spare1,1) = 1       /* an expression */
  and (bitand(i.property,1024) = 0) /* not bmji */
  and ic.bo# = c.obj#
  and ic.intcol# = c.intcol#
  and ic.bo# = base.obj#
  and io.user# = idx.owner#
  and bo.user# = base.owner#
  and ic.obj# = idx.obj#
  and idx.obj# = i.obj#
  and i.type# in (1, 2, 3, 4, 6, 7, 9);

CREATE OR REPLACE FORCE VIEW "DBA_IND_PARTITIONS"("INDEX_OWNER","INDEX_NAME","COMPOSITE","PARTITION_NAME","SUBPARTITION_COUNT","HIGH_VALUE","HIGH_VALUE_LENGTH","PARTITION_POSITION","STATUS","TABLESPACE_NAME","PCT_FREE","INI_TRANS","MAX_TRANS","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENT","MAX_EXTENT","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","LOGGING","COMPRESSION","BLEVEL","LEAF_BLOCKS","DISTINCT_KEYS","AVG_LEAF_BLOCKS_PER_KEY","AVG_DATA_BLOCKS_PER_KEY","CLUSTERING_FACTOR","NUM_ROWS","SAMPLE_SIZE","LAST_ANALYZED","BUFFER_POOL","USER_STATS","PCT_DIRECT_ACCESS","GLOBAL_STATS","DOMIDX_OPSTATUS","PARAMETERS") AS 
select u.name, io.name, 'NO', io.subname, 0,
       ip.hiboundval, ip.hiboundlen, ip.part#,
       decode(bitand(ip.flags, 1), 1, 'UNUSABLE', 'USABLE'), ts.name,
       ip.pctfree$,ip.initrans, ip.maxtrans, s.iniexts * ts.blocksize,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                               s.extsize * ts.blocksize),
       s.minexts, s.maxexts,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extpct),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
         decode(s.lists, 0, 1, s.lists)),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
         decode(s.groups, 0, 1, s.groups)),
       decode(mod(trunc(ip.flags / 4), 2), 0, 'YES', 'NO'),
       decode(bitand(ip.flags, 1024), 0, 'DISABLED', 1024, 'ENABLED', null),
       ip.blevel, ip.leafcnt, ip.distkey, ip.lblkkey, ip.dblkkey,
       ip.clufac, ip.rowcnt, ip.samplesize, ip.analyzetime,
       decode(s.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL),
       decode(bitand(ip.flags, 8), 0, 'NO', 'YES'), ip.pctthres$,
       decode(bitand(ip.flags, 16), 0, 'NO', 'YES'),'',''
from   obj$ io, indpartv$ ip, ts$ ts, sys.seg$ s, user$ u
where  io.obj# = ip.obj# and ts.ts# = ip.ts# and ip.file#=s.file# and
       ip.block#=s.block# and ip.ts#=s.ts# and io.owner# = u.user#
      union all
select u.name, io.name, 'YES', io.subname, icp.subpartcnt,
       icp.hiboundval, icp.hiboundlen, icp.part#, 'N/A', ts.name,
       icp.defpctfree, icp.definitrans, icp.defmaxtrans,
       icp.definiexts, icp.defextsize, icp.defminexts, icp.defmaxexts,
       icp.defextpct, icp.deflists, icp.defgroups,
       decode(icp.deflogging, 0, 'NONE', 1, 'YES', 2, 'NO', 'UNKNOWN'),
       decode(bitand(icp.flags, 1024), 0, 'DISABLED', 1024, 'ENABLED', null),
       icp.blevel, icp.leafcnt, icp.distkey, icp.lblkkey, icp.dblkkey,
       icp.clufac, icp.rowcnt, icp.samplesize, icp.analyzetime,
       decode(icp.defbufpool, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL),
       decode(bitand(icp.flags, 8), 0, 'NO', 'YES'), TO_NUMBER(NULL),
       decode(bitand(icp.flags, 16), 0, 'NO', 'YES'),'',''
from   obj$ io, indcompartv$ icp, ts$ ts, user$ u
where  io.obj# = icp.obj# and icp.defts# = ts.ts# (+) and u.user# = io.owner#
      union all
select u.name, io.name, 'NO', io.subname, 0,
       ip.hiboundval, ip.hiboundlen, ip.part#,
       decode(bitand(ip.flags, 1), 1, 'UNUSABLE',
                decode(bitand(ip.flags, 4096), 4096, 'INPROGRS', 'USABLE')),
       null, ip.pctfree$, ip.initrans, ip.maxtrans,
       0, 0, 0, 0, 0, 0, 0,
       decode(mod(trunc(ip.flags / 4), 2), 0, 'YES', 'NO'),
       decode(bitand(ip.flags, 1024), 0, 'DISABLED', 1024, 'ENABLED', null),
       ip.blevel, ip.leafcnt, ip.distkey, ip.lblkkey, ip.dblkkey,
       ip.clufac, ip.rowcnt, ip.samplesize, ip.analyzetime,
       'DEFAULT',
       decode(bitand(ip.flags, 8), 0, 'NO', 'YES'), ip.pctthres$,
       decode(bitand(ip.flags, 16), 0, 'NO', 'YES'),
       decode(i.type#,
             9, decode(bitand(ip.flags, 8192), 8192, 'FAILED', 'VALID'),
             ''),
       ipp.parameters
from   obj$ io, indpartv$ ip,  user$ u, ind$ i, indpart_param$ ipp
where  io.obj# = ip.obj# and io.owner# = u.user# and
       ip.bo# = i.obj# and ip.obj# = ipp.obj#;

CREATE OR REPLACE FORCE VIEW "DBA_IND_STATISTICS"("OWNER","INDEX_NAME","PARTITION_NAME","PARTITION_POSITION","SUBPARTITION_NAME","SUBPARTITION_POSITION","OBJECT_TYPE","BLEVEL","LEAF_BLOCKS","DISTINCT_KEYS","AVG_LEAF_BLOCKS_PER_KEY","AVG_DATA_BLOCKS_PER_KEY","CLUSTERING_FACTOR","NUM_ROWS","AVG_CACHED_BLOCKS","AVG_CACHE_HIT_RATIO","SAMPLE_SIZE","LAST_ANALYZED","GLOBAL_STATS","USER_STATS") AS 
SELECT
    u.name, o.name, NULL,NULL, NULL, NULL, 'INDEX',
    i.blevel, i.leafcnt, i.distkey, i.lblkkey, i.dblkkey, i.clufac, i.rowcnt,
    ins.cachedblk, ins.cachehit, i.samplesize, i.analyzetime,
    decode(bitand(i.flags, 2048), 0, 'NO', 'YES'),
    decode(bitand(i.flags, 64), 0, 'NO', 'YES')
  FROM
    sys.user$ u, sys.ind$ i, sys.obj$ o, sys.ind_stats$ ins
  WHERE
      u.user# = o.owner#
  and o.obj# = i.obj#
  and bitand(i.flags, 4096) = 0
  and i.type# in (1, 2, 3, 4, 6, 7, 8, 9)
  and i.obj# = ins.obj# (+)
  UNION ALL
  SELECT
    u.name, io.name, io.subname, ip.part#, NULL, NULL, 'PARTITION',
    ip.blevel, ip.leafcnt, ip.distkey, ip.lblkkey, ip.dblkkey,
    ip.clufac, ip.rowcnt, ins.cachedblk, ins.cachehit,
    ip.samplesize, ip.analyzetime,
    decode(bitand(ip.flags, 16), 0, 'NO', 'YES'),
    decode(bitand(ip.flags, 8), 0, 'NO', 'YES')
  FROM
    sys.obj$ io, sys.indpartv$ ip,
    sys.user$ u, sys.ind_stats$ ins
  WHERE
      io.obj# = ip.obj#
  and ip.file# > 0
  and ip.block# > 0
  and io.owner# = u.user#
  and ip.obj# = ins.obj# (+)
  UNION ALL
  SELECT
    u.name, io.name, io.subname, icp.part#, NULL, NULL, 'PARTITION',
    icp.blevel, icp.leafcnt, icp.distkey, icp.lblkkey, icp.dblkkey,
    icp.clufac, icp.rowcnt, ins.cachedblk, ins.cachehit,
    icp.samplesize, icp.analyzetime,
    decode(bitand(icp.flags, 16), 0, 'NO', 'YES'),
    decode(bitand(icp.flags, 8), 0, 'NO', 'YES')
  FROM
    obj$ io, indcompartv$ icp, user$ u, sys.ind_stats$ ins
  WHERE
      io.obj# = icp.obj#
  and io.owner# = u.user#
  and icp.obj# = ins.obj# (+)
  UNION ALL
  SELECT
    u.name, io.name, io.subname, ip.part#, NULL, NULL, 'PARTITION',
    ip.blevel, ip.leafcnt, ip.distkey, ip.lblkkey, ip.dblkkey,
    ip.clufac, ip.rowcnt, ins.cachedblk, ins.cachehit,
    ip.samplesize, ip.analyzetime,
    decode(bitand(ip.flags, 16), 0, 'NO', 'YES'),
    decode(bitand(ip.flags, 8), 0, 'NO', 'YES')
  FROM
    obj$ io, indpartv$ ip, sys.user$ u, indpart_param$ ipp,
    sys.ind_stats$ ins
  WHERE
      io.obj# = ip.obj#
  and io.owner# = u.user#
  and ip.obj# = ipp.obj#
  and ip.obj# = ins.obj# (+)
  UNION ALL
  SELECT
    u.name, po.name, po.subname, icp.part#, so.subname, isp.subpart#,
    'SUBPARTITION',
    isp.blevel, isp.leafcnt, isp.distkey, isp.lblkkey, isp.dblkkey,
    isp.clufac, isp.rowcnt, ins.cachedblk, ins.cachehit,
    isp.samplesize, isp.analyzetime,
    decode(bitand(isp.flags, 16), 0, 'NO', 'YES'),
    decode(bitand(isp.flags, 8), 0, 'NO', 'YES')
  FROM
    obj$ so, sys.obj$ po, indcompartv$ icp, indsubpartv$ isp,
    user$ u,  sys.ind_stats$ ins
  WHERE
      so.obj# = isp.obj#
  and po.obj# = icp.obj#
  and icp.obj# = isp.pobj#
  and isp.file# > 0
  and isp.block# > 0
  and u.user# = po.owner#
  and isp.obj# = ins.obj# (+);

CREATE OR REPLACE FORCE VIEW "DBA_IND_SUBPARTITIONS"("INDEX_OWNER","INDEX_NAME","PARTITION_NAME","SUBPARTITION_NAME","HIGH_VALUE","HIGH_VALUE_LENGTH","SUBPARTITION_POSITION","STATUS","TABLESPACE_NAME","PCT_FREE","INI_TRANS","MAX_TRANS","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENT","MAX_EXTENT","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","LOGGING","COMPRESSION","BLEVEL","LEAF_BLOCKS","DISTINCT_KEYS","AVG_LEAF_BLOCKS_PER_KEY","AVG_DATA_BLOCKS_PER_KEY","CLUSTERING_FACTOR","NUM_ROWS","SAMPLE_SIZE","LAST_ANALYZED","BUFFER_POOL","USER_STATS","GLOBAL_STATS") AS 
select u.name, po.name, po.subname, so.subname,
       isp.hiboundval, isp.hiboundlen, isp.subpart#,
       decode(bitand(isp.flags, 1), 1, 'UNUSABLE', 'USABLE'), ts.name,
       isp.pctfree$, isp.initrans, isp.maxtrans,
       s.iniexts * ts.blocksize,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extsize * ts.blocksize),
       s.minexts, s.maxexts,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extpct),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
         decode(s.lists, 0, 1, s.lists)),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
         decode(s.groups, 0, 1, s.groups)),
       decode(mod(trunc(isp.flags / 4), 2), 0, 'YES', 'NO'),
       decode(bitand(isp.flags, 1024), 0, 'DISABLED', 1024, 'ENABLED', null),
       isp.blevel, isp.leafcnt, isp.distkey, isp.lblkkey, isp.dblkkey,
       isp.clufac, isp.rowcnt, isp.samplesize, isp.analyzetime,
       decode(s.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL),
       decode(bitand(isp.flags, 8), 0, 'NO', 'YES'),
       decode(bitand(isp.flags, 16), 0, 'NO', 'YES')
from   sys.obj$ so, sys.obj$ po, sys.indsubpartv$ isp, sys.ts$ ts,
       sys.seg$ s, sys.user$ u
where  so.obj# = isp.obj# and po.obj# = isp.pobj# and isp.ts# = ts.ts# and
       u.user# = po.owner# and isp.file# = s.file# and isp.block# = s.block# and
       isp.ts# = s.ts#;

CREATE OR REPLACE FORCE VIEW "DBA_INTERNAL_TRIGGERS"("TABLE_NAME","OWNER_NAME","INTERNAL_TRIGGER_TYPE") AS 
select o.name, u.name, 'DEFERRED RPC QUEUE'
from sys.tab$ t, sys.obj$ o, sys.user$ u
where t.obj# = o.obj#
      and u.user# = o.owner#
      and bitand(t.trigflag,1) = 1
union
select o.name, u.name, 'MVIEW LOG'
from sys.tab$ t, sys.obj$ o, sys.user$ u
where t.obj# = o.obj#
      and u.user# = o.owner#
      and bitand(t.trigflag,2) = 2
union
select o.name, u.name, 'UPDATABLE MVIEW LOG'
from sys.tab$ t, sys.obj$ o, sys.user$ u
where t.obj# = o.obj#
      and u.user# = o.owner#
      and bitand(t.trigflag,4) = 4
union
select o.name, u.name, 'CONTEXT'
from sys.tab$ t, sys.obj$ o, sys.user$ u
where t.obj# = o.obj#
      and u.user# = o.owner#
      and bitand(t.trigflag,8) = 8;

CREATE OR REPLACE FORCE VIEW "DBA_JAVA_ARGUMENTS"("OWNER","NAME","METHOD_INDEX","METHOD_NAME","ARGUMENT_POSITION","ARRAY_DEPTH","BASE_TYPE","ARGUMENT_CLASS") AS 
select u.name, m.kln, m.mix, m.mnm, m.aix,
       m.aad,
       decode(m.abt, 10, 'int',
                     11, 'long',
                     6, 'float',
                     7, 'double',
                     4, 'boolean',
                     8, 'byte',
                     5, 'char',
                     9, 'short',
                     2, 'class',
                     NULL),
       m.aln
from sys.obj$ o, sys.x$joxfm m, sys.user$ u
where o.obj# = m.obn
  and o.type# = 29
  and o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "DBA_JAVA_CLASSES"("OWNER","NAME","MAJOR","MINOR","KIND","ACCESSIBILITY","IS_INNER","IS_ABSTRACT","IS_FINAL","IS_DEBUG","SOURCE","SUPER","OUTER") AS 
select u.name, m.kln, m.maj, m.min,
       decode(BITAND(m.acc, 512), 512, 'CLASS',
                                  0, 'INTERFACE'),
       decode(BITAND(m.acc, 1), 1, 'PUBLIC',
                                0, NULL),
       decode(BITAND(m.acc, 131072), 131072, 'YES',
                                     0, 'NO'),
       decode(BITAND(m.acc, 1024), 1024, 'YES',
                                   0, 'NO'),
       decode(BITAND(m.acc, 16), 16, 'YES',
                                 0, 'NO'),
       decode(m.dbg, 1, 'YES',
                     0, 'NO'),
       m.src, m.spl, m.oln
from sys.obj$ o, sys.x$joxfm m, sys.user$ u
where o.obj# = m.obn
  and o.type# = 29
  and o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "DBA_JAVA_DERIVATIONS"("OWNER","SOURCE_NAME","CLASS_INDEX","CLASS_NAME","RESOURCE_INDEX","RESOURCE_NAME") AS 
select u.name,
       dbms_java.longname(t.joxftderivedfrom),
       t.joxftderivedclassnumber,
       dbms_java.longname(t.joxftderivedclassname),
       t.joxftderivedresourcenumber,
       dbms_java.longname(t.joxftderivedresourcename)
from sys.obj$ o, sys.x$joxft t, sys.user$ u
where o.obj# = t.joxftobn
  and o.type# = 29
  and t.joxftderivedfrom IS NOT NULL
  and o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "DBA_JAVA_FIELDS"("OWNER","NAME","FIELD_INDEX","FIELD_NAME","ACCESSIBILITY","IS_STATIC","IS_FINAL","IS_VOLATILE","IS_TRANSIENT","ARRAY_DEPTH","BASE_TYPE","FIELD_CLASS") AS 
select u.name, m.kln, m.fix, m.fnm,
       decode(BITAND(m.fac, 7), 1, 'PUBLIC',
                                2, 'PRIVATE',
                                4, 'PROTECTED',
                                NULL),
       decode(BITAND(m.fac, 8), 8, 'YES',
                                0, 'NO'),
       decode(BITAND(m.fac, 16), 16, 'YES',
                                 0, 'NO'),
       decode(BITAND(m.fac, 64), 64, 'YES',
                                 0, 'NO'),
       decode(BITAND(m.fac, 128), 128, 'YES',
                                  0, 'NO'),
       m.fad,
       decode(m.fbt, 10, 'int',
                     11, 'long',
                     6, 'float',
                     7, 'double',
                     4, 'boolean',
                     8, 'byte',
                     5, 'char',
                     9, 'short',
                     2, 'class',
                     NULL),
       m.fln
from sys.obj$ o, sys.x$joxfm m, sys.user$ u
where o.obj# = m.obn
  and o.type# = 29
  and o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "DBA_JAVA_IMPLEMENTS"("OWNER","NAME","INTERFACE_INDEX","INTERFACE_NAME") AS 
select u.name, m.kln, m.ifx, m.iln
from sys.obj$ o, sys.x$joxfm m, sys.user$ u
where o.obj# = m.obn
  and o.type# = 29
  and o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "DBA_JAVA_INNERS"("OWNER","NAME","INNER_INDEX","SIMPLE_NAME","FULL_NAME","ACCESSIBILITY","IS_STATIC","IS_FINAL","IS_ABSTRACT","IS_INTERFACE") AS 
select u.name, m.kln, m.nix, m.nsm, m.nln,
       decode(BITAND(m.oac, 7), 1, 'PUBLIC',
                                2, 'PRIVATE',
                                4, 'PROTECTED',
                                NULL),
       decode(BITAND(m.acc, 8), 8, 'YES',
                                0, 'NO'),
       decode(BITAND(m.acc, 16), 16, 'YES',
                                 0, 'NO'),
       decode(BITAND(m.acc, 1024), 1024, 'YES',
                                   0, 'NO'),
       decode(BITAND(m.acc, 512), 512, 'YES',
                                  0, 'NO')
from sys.obj$ o, sys.x$joxfm m, sys.user$ u
where o.obj# = m.obn
  and o.type# = 29
  and o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "DBA_JAVA_LAYOUTS"("OWNER","NAME","INTERFACES","INNER_CLASSES","FIELDS","STATIC_FIELDS","METHODS","STATIC_METHODS","NATIVE_METHODS") AS 
select u.name, m.kln, m.lic, m.lnc,
              m.lfc, m.lsf,
              m.lmc, m.lsm, m.jnc
from sys.obj$ o, sys.x$joxfm m, sys.user$ u
where o.obj# = m.obn
  and o.type# = 29
  and o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "DBA_JAVA_METHODS"("OWNER","NAME","METHOD_INDEX","METHOD_NAME","ACCESSIBILITY","IS_STATIC","IS_FINAL","IS_SYNCHRONIZED","IS_NATIVE","IS_ABSTRACT","IS_STRICT","ARGUMENTS","THROWS","ARRAY_DEPTH","BASE_TYPE","RETURN_CLASS") AS 
select u.name, m.kln, m.mix, m.mnm,
       decode(BITAND(m.mac, 7), 1, 'PUBLIC',
                                2, 'PRIVATE',
                                4, 'PROTECTED',
                                NULL),
       decode(BITAND(m.mac, 8), 8, 'YES',
                                0, 'NO'),
       decode(BITAND(m.mac, 16), 16, 'YES',
                                 0, 'NO'),
       decode(BITAND(m.mac, 32), 32, 'YES',
                                 0, 'NO'),
       decode(BITAND(m.mac, 256), 256, 'YES',
                                  0, 'NO'),
       decode(BITAND(m.mac, 1024), 1024, 'YES',
                                   0, 'NO'),
       decode(BITAND(m.mac, 2048), 2048, 'YES',
                                   0, 'NO'),
       m.agc, m.exc, m.rad,
       decode(m.rbt, 10, 'int',
                     11, 'long',
                     6,  'float',
                     7,  'double',
                     4,  'boolean',
                     8,  'byte',
                     5,  'char',
                     9,  'short',
                     2,  'class',
                     12, 'void',
                     NULL),
       m.rln
from sys.obj$ o, sys.x$joxfm m, sys.user$ u
where o.obj# = m.obn
  and o.type# = 29
  and o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "DBA_JAVA_NCOMPS"("OWNER","NAME","SOURCE","INITIALIZER","LIBRARYFILE","LIBRARY") AS 
select u.name,
       dbms_java.longname(o.name),
       t.joxftncompsource,
       t.joxftncompinitializer,
       t.joxftncomplibraryfile,
       t.joxftncomplibrary
from sys.obj$ o, sys.x$joxft t, sys.user$ u
where o.obj# = t.joxftobn
  and o.type# = 29
  and o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "DBA_JAVA_POLICY"("KIND","GRANTEE","TYPE_SCHEMA","TYPE_NAME","NAME","ACTION","ENABLED","SEQ") AS 
select
   decode(jp.kind#, 0, 'GRANT', 1, 'RESTRICT'),
   u.name,
   ut.name,
   jp.type_name,
   jp.name,
   jp.action,
   decode(jp.status#, 2, 'ENABLED', 3, 'DISABLED'),
   jp.key
from
  java$policy$ jp, sys.user$ u, sys.user$ ut
where
  jp.grantee# = u.user# and jp.type_schema# = ut.user#
order by u.name, ut.name, jp.type_name, jp.name, jp.action;

CREATE OR REPLACE FORCE VIEW "DBA_JAVA_RESOLVERS"("OWNER","NAME","TERM_INDEX","PATTERN","SCHEMA") AS 
select u.name,
       dbms_java.longname(o.name),
       t.joxftresolvertermnumber,
       t.joxftresolvertermpattern,
       t.joxftresolvertermschema
from sys.obj$ o, sys.x$joxft t, sys.user$ u
where o.obj# = t.joxftobn
  and o.type# = 29
  and o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "DBA_JAVA_THROWS"("OWNER","NAME","METHOD_INDEX","METHOD_NAME","EXCEPTION_INDEX","EXCEPTION_CLASS") AS 
select u.name, m.kln, m.mix, m.mnm, m.xix, m.xln
from sys.obj$ o, sys.x$joxfm m, sys.user$ u
where o.obj# = m.obn
  and o.type# = 29
  and o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "DBA_JOBS"("JOB","LOG_USER","PRIV_USER","SCHEMA_USER","LAST_DATE","LAST_SEC","THIS_DATE","THIS_SEC","NEXT_DATE","NEXT_SEC","TOTAL_TIME","BROKEN","INTERVAL","FAILURES","WHAT","NLS_ENV","MISC_ENV","INSTANCE") AS 
select JOB, lowner LOG_USER, powner PRIV_USER, cowner SCHEMA_USER,
    LAST_DATE, substr(to_char(last_date,'HH24:MI:SS'),1,8) LAST_SEC,
    THIS_DATE, substr(to_char(this_date,'HH24:MI:SS'),1,8) THIS_SEC,
    NEXT_DATE, substr(to_char(next_date,'HH24:MI:SS'),1,8) NEXT_SEC,
    (total+(sysdate-nvl(this_date,sysdate)))*86400 TOTAL_TIME,
    decode(mod(FLAG,2),1,'Y',0,'N','?') BROKEN,
    INTERVAL# interval, FAILURES, WHAT,
    nlsenv NLS_ENV, env MISC_ENV, j.field1 INSTANCE
  from sys.job$ j;

CREATE OR REPLACE FORCE VIEW "DBA_JOBS_RUNNING"("SID","JOB","FAILURES","LAST_DATE","LAST_SEC","THIS_DATE","THIS_SEC","INSTANCE") AS 
select v.SID, v.id2 JOB, j.FAILURES,
    LAST_DATE, substr(to_char(last_date,'HH24:MI:SS'),1,8) LAST_SEC,
    THIS_DATE, substr(to_char(this_date,'HH24:MI:SS'),1,8) THIS_SEC,
    j.field1 INSTANCE
  from sys.job$ j, v$lock v
  where v.type = 'JQ' and j.job (+)= v.id2;

CREATE OR REPLACE FORCE VIEW "DBA_JOIN_IND_COLUMNS"("INDEX_OWNER","INDEX_NAME","INNER_TABLE_OWNER","INNER_TABLE_NAME","INNER_TABLE_COLUMN","OUTER_TABLE_OWNER","OUTER_TABLE_NAME","OUTER_TABLE_COLUMN") AS 
select
  ui.name, oi.name,
  uti.name, oti.name, ci.name,
  uto.name, oto.name, co.name
from
  sys.user$ ui, sys.user$ uti, sys.user$ uto,
  sys.obj$ oi, sys.obj$ oti, sys.obj$ oto,
  sys.col$ ci, sys.col$ co,
  sys.jijoin$ ji
where ji.obj# = oi.obj#
  and oi.owner# = ui.user#
  and ji.tab1obj# = oti.obj#
  and oti.owner# = uti.user#
  and ci.obj# = oti.obj#
  and ji.tab1col# = ci.intcol#
  and ji.tab2obj# = oto.obj#
  and oto.owner# = uto.user#
  and co.obj# = oto.obj#
  and ji.tab2col# = co.intcol#;

CREATE OR REPLACE FORCE VIEW "DBA_KEEPSIZES"("TOTSIZE","OWNER","NAME") AS 
select trunc((sum(parsed_size)+sum(code_size))/1000),
         owner, name
  from dba_object_size
  where type in ('PACKAGE','PROCEDURE','FUNCTION','PACKAGE BODY','TRIGGER',
                 'JAVA SOURCE','JAVA CLASS','JAVA RESOURCE','JAVA DATA')
  group by owner, name;

CREATE OR REPLACE FORCE VIEW "DBA_KGLLOCK"("KGLLKUSE","KGLLKHDL","KGLLKMOD","KGLLKREQ","KGLLKTYPE") AS 
select kgllkuse, kgllkhdl, kgllkmod, kgllkreq, 'Lock' kgllktype from x$kgllk
 union all
  select kglpnuse, kglpnhdl, kglpnmod, kglpnreq, 'Pin'  kgllktype from x$kglpn;

CREATE OR REPLACE FORCE VIEW "DBA_LIBRARIES"("OWNER","LIBRARY_NAME","FILE_SPEC","DYNAMIC","STATUS") AS 
select u.name,
       o.name,
       l.filespec,
       decode(bitand(l.property, 1), 0, 'Y', 1, 'N', NULL),
       decode(o.status, 0, 'N/A', 1, 'VALID', 'INVALID')
from sys.obj$ o, sys.library$ l, sys.user$ u
where o.owner# = u.user#
  and o.obj# = l.obj#;

CREATE OR REPLACE FORCE VIEW "DBA_LMT_FREE_SPACE"("TABLESPACE_ID","FILE_ID","BLOCK_ID","BLOCKS") AS 
select  ktfbfetsn, ktfbfefno, ktfbfebno, ktfbfeblks
from    x$ktfbfe;

CREATE OR REPLACE FORCE VIEW "DBA_LMT_USED_EXTENTS"("SEGMENT_FILEID","SEGMENT_BLOCK","TABLESPACE_ID","EXTENT_ID","FILEID","BLOCK","LENGTH") AS 
select  u.ktfbuesegfno, u.ktfbuesegbno, u.ktfbuesegtsn,
        u.ktfbueextno, u.ktfbuefno, u.ktfbuebno, u.ktfbueblks
from    sys.x$ktfbue u
where   not exists (select * from sys.recyclebin$ rb
                    where u.ktfbuesegtsn = rb.ts#
                      and u.ktfbuesegfno = rb.file#
                      and u.ktfbuesegbno = rb.block#);

CREATE OR REPLACE FORCE VIEW "DBA_LOBS"("OWNER","TABLE_NAME","COLUMN_NAME","SEGMENT_NAME","TABLESPACE_NAME","INDEX_NAME","CHUNK","PCTVERSION","RETENTION","FREEPOOLS","CACHE","LOGGING","IN_ROW","FORMAT","PARTITIONED") AS 
select u.name, o.name,
       decode(bitand(c.property, 1), 1, ac.name, c.name), lo.name,
       decode(bitand(l.property, 8), 8, ts1.name, ts.name),
       io.name,
       l.chunk * decode(bitand(l.property, 8), 8, ts1.blocksize,
                        ts.blocksize),
       decode(l.pctversion$, 101, to_number(NULL), 102, to_number(NULL),
                                   l.pctversion$),
       decode(l.retention, -1, to_number(NULL), l.retention),
       decode(l.freepools, 0, to_number(NULL), 65534, to_number(NULL),
              65535, to_number(NULL), l.freepools),
       decode(bitand(l.flags, 27), 1, 'NO', 2, 'NO', 8, 'CACHEREADS',
                                   16, 'CACHEREADS', 'YES'),
       decode(bitand(l.flags, 18), 2, 'NO', 16, 'NO', 'YES'),
       decode(bitand(l.property, 2), 2, 'YES', 'NO'),
       decode(c.type#, 113, 'NOT APPLICABLE ',
              decode(bitand(l.property, 512), 512,
                     'ENDIAN SPECIFIC', 'ENDIAN NEUTRAL ')),
       decode(bitand(ta.property, 32), 32, 'YES', 'NO')
from sys.obj$ o, sys.col$ c, sys.attrcol$ ac, sys.tab$ ta, sys.lob$ l,
     sys.obj$ lo, sys.obj$ io, sys.user$ u, sys.ts$ ts, sys.ts$ ts1
where o.owner# = u.user#
  and o.obj# = c.obj#
  and c.obj# = l.obj#
  and c.intcol# = l.intcol#
  and l.lobj# = lo.obj#
  and l.ind# = io.obj#
  and l.ts# = ts.ts#(+)
  and u.tempts# = ts1.ts#
  and c.obj# = ac.obj#(+)
  and c.intcol# = ac.intcol#(+)
  and bitand(c.property,32768) != 32768           /* not unused column */
  and o.obj# = ta.obj#
  and bitand(ta.property, 32) != 32           /* not partitioned table */
union all
select u.name, o.name,
       decode(bitand(c.property, 1), 1, ac.name, c.name),
       lo.name,
       decode(null, plob.defts#, ts2.name, ts1.name),
       io.name,
       plob.defchunk * (decode(null, plob.defts#,
                               ts2.blocksize, ts1.blocksize)),
       decode(plob.defpctver$, 101, to_number(NULL), 102, to_number(NULL),
                                           plob.defpctver$),
       decode(l.retention, -1, to_number(NULL), l.retention),
       decode(l.freepools, 0, to_number(NULL), 65534, to_number(NULL),
              65535, to_number(NULL), l.freepools),
       decode(bitand(plob.defflags, 27), 1, 'NO', 2, 'NO', 8, 'CACHEREADS',
                                         16, 'CACHEREADS', 'YES'),
       decode(bitand(plob.defflags,22), 0,'NONE', 4,'YES', 2,'NO',
                                        16,'NO', 'UNKNOWN'),
       decode(bitand(plob.defpro, 2), 2, 'YES', 'NO'),
       decode(c.type#, 113, 'NOT APPLICABLE ',
              decode(bitand(l.property, 512), 512,
                     'ENDIAN SPECIFIC', 'ENDIAN NEUTRAL ')),
       decode(bitand(ta.property, 32), 32, 'YES', 'NO')
from sys.obj$ o, sys.col$ c, sys.attrcol$ ac, sys.partlob$ plob,
     sys.lob$ l, sys.obj$ lo, sys.obj$ io, sys.ts$ ts1, sys.tab$ ta,
     sys.partobj$ po, sys.ts$ ts2, sys.user$ u
where o.owner# = u.user#
  and o.obj# = c.obj#
  and c.obj# = l.obj#
  and c.intcol# = l.intcol#
  and l.lobj# = lo.obj#
  and l.ind# = io.obj#
  and l.lobj# = plob.lobj#
  and plob.defts# = ts1.ts# (+)
  and c.obj# = ac.obj#(+)
  and c.intcol# = ac.intcol#(+)
  and bitand(c.property,32768) != 32768           /* not unused column */
  and o.obj# = ta.obj#
  and bitand(ta.property, 32) = 32                /* partitioned table */
  and o.obj# = po.obj#
  and po.defts# = ts2.ts#;

CREATE OR REPLACE FORCE VIEW "DBA_LOB_PARTITIONS"("TABLE_OWNER","TABLE_NAME","COLUMN_NAME","LOB_NAME","PARTITION_NAME","LOB_PARTITION_NAME","LOB_INDPART_NAME","PARTITION_POSITION","COMPOSITE","CHUNK","PCTVERSION","CACHE","IN_ROW","TABLESPACE_NAME","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENTS","MAX_EXTENTS","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","LOGGING","BUFFER_POOL") AS 
select u.name,
       o.name,
       decode(bitand(c.property, 1), 1, a.name, c.name),
       lo.name,
       po.subname,
       lpo.subname,
       lipo.subname,
       lf.frag#,
       'NO',
       lf.chunk * ts.blocksize,
       lf.pctversion$,
       decode(bitand(lf.fragflags,27), 1, 'NO', 2, 'NO', 8, 'CACHEREADS',
                                       16, 'CACHEREADS', 'YES'),
       decode(lf.fragpro, 0, 'NO', 'YES'),
       ts.name,
       to_char(s.iniexts * ts.blocksize),
       to_char(decode(bitand(ts.flags, 3), 1, to_number(NULL),
            s.extsize * ts.blocksize)),
       to_char(s.minexts),
       to_char(s.maxexts),
       to_char(decode(bitand(ts.flags, 3), 1, to_number(NULL),s.extpct)),
       to_char(decode(s.lists, 0, 1, s.lists)),
       to_char(decode(s.groups, 0, 1, s.groups)),
       decode(bitand(lf.fragflags, 18), 2, 'NO', 16, 'NO', 'YES'),
       decode(s.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL)
from   sys.obj$ o, sys.col$ c,
       sys.lob$ l, sys.obj$ lo,
       sys.lobfragv$ lf, sys.obj$ lpo,
       sys.obj$ po, sys.obj$ lipo,
       sys.partobj$ pobj,
       sys.ts$ ts, sys.seg$ s, sys.user$ u, attrcol$ a
where o.owner# = u.user#
  and pobj.obj# = o.obj#
  and mod(pobj.spare2, 256) = 0
  and o.obj# = c.obj#
  and c.obj# = l.obj#
  and c.intcol# = l.intcol#
  and l.lobj# = lo.obj#
  and l.lobj# = lf.parentobj#
  and lf.tabfragobj# = po.obj#
  and lf.fragobj# = lpo.obj#
  and lf.indfragobj# = lipo.obj#
  and lf.ts# = s.ts#
  and lf.file# = s.file#
  and lf.block# = s.block#
  and lf.ts# = ts.ts#
  and bitand(c.property,32768) != 32768           /* not unused column */
  and c.obj# = a.obj#(+) and c.intcol# = a.intcol#(+)
union all
select u.name,
       o.name,
       decode(bitand(c.property, 1), 1, a.name, c.name),
       lo.name,
       po.subname,
       lpo.subname,
       lipo.subname,
       lcp.part#,
       'YES',
       lcp.defchunk,
       lcp.defpctver$,
       decode(bitand(lcp.defflags, 27), 1, 'NO', 2, 'NO', 8, 'CACHEREADS',
                                       16, 'CACHEREADS', 'YES'),
       decode(lcp.defpro, 0, 'NO', 'YES'),
       ts.name,
       decode(lcp.definiexts, NULL, 'DEFAULT', lcp.definiexts),
       decode(lcp.defextsize, NULL, 'DEFAULT', lcp.defextsize),
       decode(lcp.defminexts, NULL, 'DEFAULT', lcp.defminexts),
       decode(lcp.defmaxexts, NULL, 'DEFAULT', lcp.defmaxexts),
       decode(lcp.defextpct,  NULL, 'DEFAULT', lcp.defextpct),
       decode(lcp.deflists,   NULL, 'DEFAULT', lcp.deflists),
       decode(lcp.defgroups,  NULL, 'DEFAULT', lcp.defgroups),
       decode(bitand(lcp.defflags,22), 0,'NONE', 4,'YES', 2,'NO', 16,'NO', 'UNKNOWN'),
       decode(lcp.defbufpool, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL)
from   sys.obj$ o, sys.col$ c,
       sys.lob$ l, sys.obj$ lo,
       sys.lobcomppartv$ lcp, sys.obj$ lpo,
       sys.obj$ po, sys.obj$ lipo,
       sys.ts$ ts, partobj$ pobj, sys.user$ u, attrcol$ a
where o.owner# = u.user#
  and pobj.obj# = o.obj#
  and mod(pobj.spare2, 256) != 0
  and o.obj# = c.obj#
  and c.obj# = l.obj#
  and c.intcol# = l.intcol#
  and l.lobj# = lo.obj#
  and l.lobj# = lcp.lobj#
  and lcp.tabpartobj# = po.obj#
  and lcp.partobj# = lpo.obj#
  and lcp.indpartobj# = lipo.obj#
  and lcp.defts# = ts.ts# (+)
  and bitand(c.property,32768) != 32768           /* not unused column */
  and c.obj# = a.obj#(+) and c.intcol# = a.intcol#(+);

CREATE OR REPLACE FORCE VIEW "DBA_LOB_SUBPARTITIONS"("TABLE_OWNER","TABLE_NAME","COLUMN_NAME","LOB_NAME","LOB_PARTITION_NAME","SUBPARTITION_NAME","LOB_SUBPARTITION_NAME","LOB_INDSUBPART_NAME","SUBPARTITION_POSITION","CHUNK","PCTVERSION","CACHE","IN_ROW","TABLESPACE_NAME","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENTS","MAX_EXTENTS","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","LOGGING","BUFFER_POOL") AS 
select u.name,
       o.name,
       decode(bitand(c.property, 1), 1, a.name, c.name),
       lo.name,
       lpo.subname,
       spo.subname,
       lspo.subname,
       lispo.subname,
       lf.frag#,
       lf.chunk * ts.blocksize,
       lf.pctversion$,
       decode(bitand(lf.fragflags,27), 1, 'NO', 2, 'NO', 8, 'CACHEREADS',
                                       16, 'CACHEREADS', 'YES'),
       decode(lf.fragpro, 0, 'NO', 'YES'),
       ts.name,
       s.iniexts * ts.blocksize,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
            s.extsize * ts.blocksize),
       s.minexts,
       s.maxexts,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),s.extpct),
       decode(s.lists, 0, 1, s.lists),
       decode(s.groups, 0, 1, s.groups),
       decode(bitand(lf.fragflags, 18), 2, 'NO', 16, 'NO', 'YES'),
       decode(s.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL)
from   sys.obj$ o, sys.col$ c,
       sys.lob$ l, sys.obj$ lo,
       sys.lobcomppartv$ lcp, sys.obj$ lpo,
       sys.lobfragv$ lf, sys.obj$ lspo,
       sys.obj$ spo, sys.obj$ lispo,
       sys.partobj$ pobj,
       sys.ts$ ts, sys.seg$ s, sys.user$ u, attrcol$ a
where o.owner# = u.user#
  and pobj.obj# = o.obj#
  and mod(pobj.spare2, 256) != 0
  and o.obj# = c.obj#
  and c.obj# = l.obj#
  and c.intcol# = l.intcol#
  and l.lobj# = lo.obj#
  and l.lobj# = lcp.lobj#
  and lcp.partobj# = lpo.obj#
  and lf.parentobj# = lcp.partobj#
  and lf.tabfragobj# = spo.obj#
  and lf.fragobj# = lspo.obj#
  and lf.indfragobj# = lispo.obj#
  and lf.ts# = s.ts#
  and lf.file# = s.file#
  and lf.block# = s.block#
  and lf.ts# = ts.ts#
  and bitand(c.property,32768) != 32768           /* not unused column */
  and c.obj# = a.obj#(+) and c.intcol# = a.intcol#(+);

CREATE OR REPLACE FORCE VIEW "DBA_LOB_TEMPLATES"("USER_NAME","TABLE_NAME","LOB_COL_NAME","SUBPARTITION_NAME","LOB_SEGMENT_NAME","TABLESPACE_NAME") AS 
select u.name, o.name, decode(bitand(c.property, 1), 1, ac.name, c.name),
       st.spart_name, lst.lob_spart_name, ts.name
from sys.obj$ o, sys.defsubpart$ st, sys.defsubpartlob$ lst, sys.ts$ ts,
     sys.col$ c, sys.attrcol$ ac, sys.user$ u
where o.obj# = lst.bo# and st.bo# = lst.bo# and
      st.spart_position =  lst.spart_position and
      lst.lob_spart_ts# = ts.ts#(+) and c.obj# = lst.bo# and
      c.intcol# = lst.intcol# and lst.intcol# = ac.intcol#(+) and
      o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "DBA_LOCK"("SESSION_ID","LOCK_TYPE","MODE_HELD","MODE_REQUESTED","LOCK_ID1","LOCK_ID2","LAST_CONVERT","BLOCKING_OTHERS") AS 
select
	sid session_id,
	decode(type,
		'MR', 'Media Recovery',
		'RT', 'Redo Thread',
		'UN', 'User Name',
		'TX', 'Transaction',
		'TM', 'DML',
		'UL', 'PL/SQL User Lock',
		'DX', 'Distributed Xaction',
		'CF', 'Control File',
		'IS', 'Instance State',
		'FS', 'File Set',
		'IR', 'Instance Recovery',
		'ST', 'Disk Space Transaction',
		'TS', 'Temp Segment',
		'IV', 'Library Cache Invalidation',
		'LS', 'Log Start or Switch',
		'RW', 'Row Wait',
		'SQ', 'Sequence Number',
		'TE', 'Extend Table',
		'TT', 'Temp Table',
		type) lock_type,
	decode(lmode,
		0, 'None',           /* Mon Lock equivalent */
		1, 'Null',           /* N */
		2, 'Row-S (SS)',     /* L */
		3, 'Row-X (SX)',     /* R */
		4, 'Share',          /* S */
		5, 'S/Row-X (SSX)',  /* C */
		6, 'Exclusive',      /* X */
		to_char(lmode)) mode_held,
         decode(request,
		0, 'None',           /* Mon Lock equivalent */
		1, 'Null',           /* N */
		2, 'Row-S (SS)',     /* L */
		3, 'Row-X (SX)',     /* R */
		4, 'Share',          /* S */
		5, 'S/Row-X (SSX)',  /* C */
		6, 'Exclusive',      /* X */
		to_char(request)) mode_requested,
         to_char(id1) lock_id1, to_char(id2) lock_id2,
	 ctime last_convert,
	 decode(block,
	        0, 'Not Blocking',  /* Not blocking any other processes */
		1, 'Blocking',      /* This lock blocks other processes */
		2, 'Global',        /* This lock is global, so we can't tell */
		to_char(block)) blocking_others
      from v$lock;

CREATE OR REPLACE FORCE VIEW "DBA_LOCK_INTERNAL"("SESSION_ID","LOCK_TYPE","MODE_HELD","MODE_REQUESTED","LOCK_ID1","LOCK_ID2") AS 
select
	sid session_id,
	decode(type,
		'MR', 'Media Recovery',
		'RT', 'Redo Thread',
		'UN', 'User Name',
		'TX', 'Transaction',
		'TM', 'DML',
		'UL', 'PL/SQL User Lock',
		'DX', 'Distributed Xaction',
		'CF', 'Control File',
		'IS', 'Instance State',
		'FS', 'File Set',
		'IR', 'Instance Recovery',
		'ST', 'Disk Space Transaction',
		'TS', 'Temp Segment',
		'IV', 'Library Cache Invalidation',
		'LS', 'Log Start or Switch',
		'RW', 'Row Wait',
		'SQ', 'Sequence Number',
		'TE', 'Extend Table',
		'TT', 'Temp Table',
		type) lock_type,
	decode(lmode,
		0, 'None',           /* Mon Lock equivalent */
		1, 'Null',           /* N */
		2, 'Row-S (SS)',     /* L */
		3, 'Row-X (SX)',     /* R */
		4, 'Share',          /* S */
		5, 'S/Row-X (SSX)',  /* C */
		6, 'Exclusive',      /* X */
		to_char(lmode)) mode_held,
         decode(request,
		0, 'None',           /* Mon Lock equivalent */
		1, 'Null',           /* N */
		2, 'Row-S (SS)',     /* L */
		3, 'Row-X (SX)',     /* R */
		4, 'Share',          /* S */
		5, 'S/Row-X (SSX)',  /* C */
		6, 'Exclusive',      /* X */
		to_char(request)) mode_requested,
         to_char(id1) lock_id1, to_char(id2) lock_id2
      from v$lock                /* processes waiting on or holding enqueues */
 union all                                          /* procs holding latches */
  select s.sid, 'LATCH', 'Exclusive', 'None', rawtohex(laddr), ' '
    from v$process p, v$session s, v$latchholder h
   where h.pid  = p.pid                       /* 6 = exclusive, 0 = not held */
    and  p.addr = s.paddr
 union all                                         /* procs waiting on latch */
  select sid, 'LATCH', 'None', 'Exclusive', rawtohex(latchwait), ' '
     from v$session s, v$process p
    where latchwait is not null
     and  p.addr = s.paddr
 union all                                            /* library cache locks */
  select  s.sid,
    decode(ob.kglhdnsp, 0, 'Cursor', 1, 'Table/Procedure/Type', 2, 'Body',
	     3, 'trigger', 4, 'Index', 5, 'Cluster', 13, 'Java Source',
             14, 'Java Resource', 32, 'Java Data', to_char(ob.kglhdnsp))
	  || ' Definition ' || lk.kgllktype,
    decode(lk.kgllkmod, 0, 'None', 1, 'Null', 2, 'Share', 3, 'Exclusive',
	   to_char(lk.kgllkmod)),
    decode(lk.kgllkreq,  0, 'None', 1, 'Null', 2, 'Share', 3, 'Exclusive',
	   to_char(lk.kgllkreq)),
    decode(ob.kglnaown, null, '', ob.kglnaown || '.') || ob.kglnaobj ||
    decode(ob.kglnadlk, null, '', '@' || ob.kglnadlk),
    rawtohex(lk.kgllkhdl)
   from v$session s, x$kglob ob, dba_kgllock lk
     where lk.kgllkhdl = ob.kglhdadr
      and  lk.kgllkuse = s.saddr;

CREATE OR REPLACE FORCE VIEW "DBA_LOGMNR_LOG"("LOGMNR_SESSION_ID","NAME","DBID","RESETLOGS_SCN","RESETLOGS_TIME","MODIFIED_TIME","THREAD#","SEQUENCE#","FIRST_SCN","NEXT_SCN","FIRST_TIME","NEXT_TIME","DICTIONARY_BEGIN","DICTIONARY_END","KEEP","SUSPECT") AS 
select
                  l.session#                    logmnr_session_id,
                  l.file_name                   name,
                  l.db_id                       dbid,
                  l.resetlogs_change#           resetlogs_scn,
                  l.reset_timestamp             resetlogs_time,
                  l.timestamp                   modified_time,
                  l.thread#                     thread#,
                  l.sequence#                   sequence#,
                  l.first_change#               first_scn,
                  l.next_change#                next_scn,
                  l.first_time                  first_time,
                  l.next_time                   next_time,
                  l.dict_begin                  dictionary_begin,
                  l.dict_end                    dictionary_end,
                  case
                  when (bitand(l.status, 2) = 2) then
                   'NO'
                  else
                   'YES'
                  end                           keep,
                  case
                  when (bitand(l.status, 4) = 4) then
                   'YES'
                  else
                   'N0'
                  end                           suspect

                from system.logmnr_log$ l;

CREATE OR REPLACE FORCE VIEW "DBA_LOGMNR_PURGED_LOG"("FILE_NAME") AS 
select distinct p.file_name from system.logmnr_log$ p
    where bitand(p.status, 2) = 2 and
    dbms_logmnr_internal.logmnr_krvicl(p.file_name) = 1
  minus
  select distinct q.file_name from system.logmnr_log$ q
    where bitand(q.status, 2) <> 2;

CREATE OR REPLACE FORCE VIEW "DBA_LOGMNR_SESSION"("ID","NAME","SOURCE_DATABASE","SOURCE_DBID","SOURCE_RESETLOGS_SCN","SOURCE_RESETLOGS_TIME","FIRST_SCN","END_SCN","BRANCH_SCN","WAIT_FOR_LOG","HOT_MINE","SAFE_PURGE_SCN","CHECKPOINT_SCN") AS 
select
        s.session#              id,
        s.session_name          name,
        s.global_db_name        source_database,
        s.db_id                 source_dbid,
        s.resetlogs_change#     source_resetlogs_scn,
        s.reset_timestamp       source_resetlogs_time,
        s.start_scn             first_scn,
        s.end_scn               end_scn,
        s.branch_scn            branch_scn,
        case
         when (bitand(s.session_attr, 16) = 16) then 'YES'
         else  'NO'
        end                     wait_for_log,
        case
          when (bitand(s.session_attr, 8388608) = 8388608) then 'YES'
         else  'NO'
        end                     hot_mine,
        /* safe_purge_scn is the scn below or at which it is safe to purge */
        /* pass this scn into dbms_logmnr_session.purge_session */
        case /* case#0 :streams or logical standby */
             /* KRVX_RESTART_CKPT_ENABLED = 268435456 */
          when (bitand(s.session_attr, 268435456) = 268435456) then
	    null
          else /* case #0 */
            s.spill_scn
          end    /* case #0 */
                                      safe_purge_scn,
        case /* case#0 :streams or logical standby */
          when (bitand(s.session_attr, 268435456) = 268435456) then
  	    get_max_checkpoint(s.session#)
          else
            null
          end
                                        checkpoint_scn
      from system.logmnr_session$ s;

CREATE OR REPLACE FORCE VIEW "DBA_LOGSTDBY_EVENTS"("EVENT_TIME","CURRENT_SCN","COMMIT_SCN","XIDUSN","XIDSLT","XIDSQN","EVENT","STATUS_CODE","STATUS") AS 
select event_time, current_scn, commit_scn,
         xidusn, xidslt, xidsqn, full_event event,
         errval status_code, error status
  from system.logstdby$events;

CREATE OR REPLACE FORCE VIEW "DBA_LOGSTDBY_HISTORY"("STREAM_SEQUENCE#","STATUS","SOURCE","DBID","FIRST_CHANGE#","LAST_CHANGE#","FIRST_TIME","LAST_TIME","DGNAME") AS 
select stream_sequence#, decode(status, 1, 'Past', 2, 'Immediate Past', 3,
         'Current', 4, 'Immediate Future', 5, 'Future', 6, 'Canceled', 7,
         'Invalid') status, decode(source, 1, 'Rfs', 2, 'User', 3, 'Synch', 4,
         'Redo') source, dbid, first_change#, last_change#, first_time,
         last_time, dgname
  from system.logstdby$history;

CREATE OR REPLACE FORCE VIEW "DBA_LOGSTDBY_LOG"("THREAD#","SEQUENCE#","FIRST_CHANGE#","NEXT_CHANGE#","FIRST_TIME","NEXT_TIME","FILE_NAME","TIMESTAMP","DICT_BEGIN","DICT_END","APPLIED") AS 
select thread#, sequence#, first_change#, next_change#,
         first_time, next_time, file_name, timestamp, dict_begin, dict_end,
    (case when l.next_change# < p.read_scn then 'YES'
          when l.first_change# < p.applied_scn then 'CURRENT'
          else 'NO' end) applied
  from system.logmnr_log$ l, dba_logstdby_progress p
  where session# =
        (select value from system.logstdby$parameters where name = 'LMNR_SID');

CREATE OR REPLACE FORCE VIEW "DBA_LOGSTDBY_NOT_UNIQUE"("OWNER","TABLE_NAME","BAD_COLUMN") AS 
select owner, name table_name,
         decode((select count(c.obj#)
                 from sys.col$ c
                 where c.obj# = l.obj#
                     and c.type# in (8,                              /* LONG */
                                     24,                         /* LONG RAW */
                                     112,                            /* CLOB */
                                     113)),                          /* BLOB */
                 0, 'N', 'Y') bad_column
  from logstdby_support l
  where generated_sby = 1
    and type# = 2
    and not exists                                    /* not null unique key */
       (select null
        from ind$ i, icol$ ic, col$ c
        where i.bo# = l.obj#
          and ic.obj# = i.obj#
          and c.col# = ic.col#
          and c.obj# = i.bo#
          and c.null$ > 0
          and i.type# = 1
          and bitand(i.property, 1) = 1)
    and not exists                            /* primary key rely constraint */
       (select null
        from cdef$ cd
        where cd.obj# = l.obj#
          and cd.type# = 2
          and bitand(cd.defer, 32) = 32);

CREATE OR REPLACE FORCE VIEW "DBA_LOGSTDBY_PARAMETERS"("NAME","VALUE") AS 
select name, value from system.logstdby$parameters
  where name != 'SHUTDOWN'
    and name != 'SEED_PRIMARY_DBID'
    and name != 'SEED_FIRST_SCN'
    and (type < 2 or type is null);

CREATE OR REPLACE FORCE VIEW "DBA_LOGSTDBY_PROGRESS"("APPLIED_SCN","APPLIED_THREAD#","APPLIED_SEQUENCE#","APPLIED_TIME","READ_SCN","READ_THREAD#","READ_SEQUENCE#","READ_TIME","NEWEST_SCN","NEWEST_THREAD#","NEWEST_SEQUENCE#","NEWEST_TIME") AS 
select
    applied_scn,
    /* thread# derived from applied_scn */
    (select min(thread#) from logstdby_log
     where sequence# =
       (select max(sequence#) from logstdby_log l
        where applied_scn >= first_change# and applied_scn <= next_change#)
    and applied_scn >= first_change#
    and applied_scn <= next_change#)
       applied_thread#,
    /* sequence# derived from applied_scn */
    (select max(sequence#) from logstdby_log l
     where applied_scn >= first_change# and applied_scn <= next_change#)
       applied_sequence#,
    /* estimated time derived from applied_scn */
    (select max(first_time +
        ((next_time - first_time) / (next_change# - first_change#) *
         (applied_scn - first_change#)))
     from logstdby_log l
     where applied_scn >= first_change# and applied_scn <= next_change#)
       applied_time,
    read_scn,
    /* thread# derived from read_scn */
    (select min(thread#) from logstdby_log
     where sequence# =
       (select max(sequence#) from logstdby_log l
        where read_scn >= first_change# and read_scn <= next_change#)
     and read_scn >= first_change#
     and read_scn <= next_change#)
       read_thread#,
    /* sequence# derived from read_scn */
    (select max(sequence#) from logstdby_log l
     where read_scn >= first_change# and read_scn <= next_change#)
       read_sequence#,
    /* estimated time derived from read_scn */
    (select min(first_time +
        ((next_time - first_time) / (next_change# - first_change#) *
         (read_scn - first_change#)))
     from logstdby_log l
     where read_scn >= first_change# and read_scn <= next_change#)
       read_time,
    newest_scn,
    /* thread# derived from newest_scn */
    (select min(thread#) from logstdby_log
     where sequence# =
       (select max(sequence#) from logstdby_log l
        where newest_scn >= first_change# and newest_scn <= next_change#)
     and newest_scn >= first_change#
     and newest_scn <= next_change#)
       newest_thread#,
    /* sequence# derived from newest_scn */
    (select max(sequence#) from logstdby_log l
     where newest_scn >= first_change# and newest_scn <= next_change#)
       newest_sequence#,
    /* estimated time derived from newest_scn */
    (select max(first_time +
        ((next_time - first_time) / (next_change# - first_change#) *
         (newest_scn - first_change#)))
     from logstdby_log l
     where newest_scn >= first_change# and newest_scn <= next_change#)
       newest_time
  from
    /* in-line view to calculate relavent scn values */
    (select /* APPLIED_SCN */
            greatest(nvl((select max(a.processed_scn) - 1
                          from system.logstdby$apply_milestone a),0),
                     nvl((select max(a.commit_scn)
                          from system.logstdby$apply_milestone a),0),
                     sx.start_scn) applied_scn,
            /* READ_SCN */
            greatest(nvl(sx.spill_scn,1), sx.start_scn) read_scn,
            /* NEWEST_SCN */
            nvl((select max(next_change#)-1 from logstdby_log),
                sx.start_scn) newest_scn
    from system.logmnr_session$ sx
    where sx.session# =
      (select value from system.logstdby$parameters where name = 'LMNR_SID')) x;

CREATE OR REPLACE FORCE VIEW "DBA_LOGSTDBY_SKIP"("ERROR","STATEMENT_OPT","OWNER","NAME","USE_LIKE","ESC","PROC") AS 
select "ERROR","STATEMENT_OPT","OWNER","NAME","USE_LIKE","ESC","PROC" from (
     select decode(error, 1, 'Y', 'N') error,
           statement_opt, schema owner, name,
           decode(use_like, 0, 'N', 'Y') use_like, esc, proc
     from system.logstdby$skip
    union all
     select 'N' error,
           'INTERNAL SCHEMA' statement_opt, username owner, '%' name,
           'Y' use_like, null esc, null proc
     from (select username from dba_users u,
             ((select schema name from dba_server_registry d
               union all
               select s.name from system.logstdby$skip_support s
               where s.action = 0)
              minus
               select s.name from system.logstdby$skip_support s
               where s.action = -1) i
           where u.username = i.name));

CREATE OR REPLACE FORCE VIEW "DBA_LOGSTDBY_SKIP_TRANSACTION"("XIDUSN","XIDSLT","XIDSQN") AS 
select xidusn, xidslt, xidsqn
  from system.logstdby$skip_transaction;

CREATE OR REPLACE FORCE VIEW "DBA_LOGSTDBY_UNSUPPORTED"("OWNER","TABLE_NAME","COLUMN_NAME","DATA_TYPE","ATTRIBUTES","TPROP","SEGSPARE1","TFLAGS") AS 
select c.owner, c.table_name, c.column_name, c.data_type,
    (case when bitand(tprop, 128) = 128
          then 'IOT with Overflow'
          when bitand(tprop, 262208) = 262208
          then 'IOT with LOB' /* user lob */
          when bitand(tflags, 536870912) = 536870912
          then 'Mapping table for physical rowid of IOT'
          when bitand(tprop, 2112) = 2112
          then 'IOT with LOB' /* internal lob */
          when (bitand(tprop, 64) = 64
           and bitand(tflags, 131072) = 131072)
          then 'IOT with row movement'
          when bitand(segspare1, 2048) = 2048
          then 'Table Compression'
          when bitand(tprop, 1) = 1
          then 'Object Table' /* typed table/object table */
          else null end) attributes, tprop, segspare1, tflags
  from
(select u.name owner, o.name table_name, c.name column_name, c.type#,
  o.obj#, t.property tprop, t.flags tflags, nvl(s.spare1,0) segspare1,
/* BEGIN SECTION 1 COMMON CODE: LOGSTDBY_SUPPORT - DBA_LOGSTDBY_UNSUPPORTED */
 (case
    /* The following are tables that are in an internal schema or
     * are tables like object not visible to the user or
     * are tables we support indirectly like an mv log or
     * are nested tables for which joining together column info eludes me. */
  when ((exists (select 1 from dba_server_registry d where d.schema = u.name)
         or
         exists (select 1 from system.logstdby$skip_support s
                 where s.name = u.name and action = 0))
        and not exists
               (select 1 from system.logstdby$skip_support s
                where s.name = u.name and action = -1))
    or bitand(o.flags,
                2                                       /* temporary object */
              + 4                                /* system generated object */
              + 16                                      /* secondary object */
              + 32                                  /* in-memory temp table */
              + 128                           /* dropped table (RecycleBin) */
             ) != 0
    or bitand(t.flags,
                262144     /* 0x00040000        Summary Container Table, MV */
              + 134217728  /* 0x08000000          in-memory temporary table */
             ) != 0
    or bitand(t.property,
                512        /* 0x00000200               iot OVeRflow segment */
              + 8192       /* 0x00002000                       nested table */
              + 131072     /* 0x00020000 table is used as an AQ queue table */
              + 4194304    /* 0x00400000             global temporary table */
              + 8388608    /* 0x00800000   session-specific temporary table */
              + 33554432   /* 0x02000000        Read Only Materialized View */
              + 67108864   /* 0x04000000            Materialized View table */
              + 134217728  /* 0x08000000                    Is a Sub object */
              + 2147483648 /* 0x80000000                     eXternal TaBle */
             ) != 0
    or exists                                                /* MVLOG table */
       (select 1
        from sys.mlog$ ml where ml.mowner = u.name and ml.log = o.name)
  then -1
    /* The following tables are user visible tables that we choose to
     * skip because of some unsupported attribute of the table or column */
  when bitand(t.property,
                  1        /* 0x00000001                        typed table */
              + 128        /* 0x00000080              IOT with row overflow */
              + 256        /* 0x00000100            IOT with row clustering */
             ) != 0
    or bitand(t.flags,
                536870912  /* 0x20000000  Mapping Tab for Phys rowid of IOT */
             ) != 0
    or bitand(t.property, 262208) = 262208   /* 0x40+0x40000 IOT + user LOB */
    or bitand(t.property, 2112) = 2112     /* 0x40+0x800 IOT + internal LOB */
    or                                           /* IOT with "Row Movement" */
       (bitand(t.property, 64) = 64 and bitand(t.flags, 131072) = 131072)
    or                                                       /* Compression */
       (bitand(nvl(s.spare1,0), 2048) = 2048 and bitand(t.property, 32) != 32)
    or o.oid$ is not null
/* END SECTION 1 COMMON CODE */
   or
/* BEGIN SECTION 2 COMMON CODE: LOGSTDBY_SUPPORT - DBA_LOGSTDBY_UNSUPPORTED */
 (c.type# not in (
                  1,                             /* VARCHAR2 */
                  2,                               /* NUMBER */
                  8,                                 /* LONG */
                  12,                                /* DATE */
                  24,                            /* LONG RAW */
                  96,                                /* CHAR */
                  100,                       /* BINARY FLOAT */
                  101,                      /* BINARY DOUBLE */
                  112,                     /* CLOB and NCLOB */
                  113,                               /* BLOB */
                  180,                     /* TIMESTAMP (..) */
                  181,       /* TIMESTAMP(..) WITH TIME ZONE */
                  182,         /* INTERVAL YEAR(..) TO MONTH */
                  183,     /* INTERVAL DAY(..) TO SECOND(..) */
                  231) /* TIMESTAMP(..) WITH LOCAL TIME ZONE */
  and (c.type# != 23                      /* RAW not RAW OID */
       or (c.type# = 23 and bitand(c.property, 2) = 2)))
/* END SECTION 2 COMMON CODE */
   then 0 else 1 end) gensby
 from sys.obj$ o, sys.user$ u, sys.tab$ t, sys.seg$ s, sys.col$ c
where o.owner# = u.user#
  and o.obj# = t.obj#
  and o.obj# = c.obj#
  and t.file# = s.file# (+)
  and t.ts# = s.ts# (+)
  and t.block# = s.block# (+)
  and t.obj# = o.obj#
  and bitand(c.property, 32) != 32                         /* Not hidden */
) l, dba_tab_columns c
  where l.owner = c.owner
    and l.table_name = c.table_name
    and l.column_name = c.column_name
    and l.gensby = 0;

CREATE OR REPLACE FORCE VIEW "DBA_LOG_GROUPS"("OWNER","LOG_GROUP_NAME","TABLE_NAME","LOG_GROUP_TYPE","ALWAYS","GENERATED") AS 
select ou.name, oc.name, o.name,
       case c.type# when 14 then 'PRIMARY KEY LOGGING'
                    when 15 then 'UNIQUE KEY LOGGING'
                    when 16 then 'FOREIGN KEY LOGGING'
                    when 17 then 'ALL COLUMN LOGGING'
                    else 'USER LOG GROUP'
       end,
       case bitand(c.defer,64) when 64 then 'ALWAYS'
                               else  'CONDITIONAL'
       end,
       case bitand(c.defer,8) when 8 then 'GENERATED NAME'
                              else  'USER NAME'
       end
from sys.con$ oc, sys.user$ ou, sys.obj$ o, sys.cdef$ c
where oc.owner# = ou.user#
  and oc.con# = c.con#
  and c.obj# = o.obj#
  and
  (c.type# = 12 or c.type# = 14 or
   c.type# = 15 or c.type# = 16 or
   c.type# = 17);

CREATE OR REPLACE FORCE VIEW "DBA_LOG_GROUP_COLUMNS"("OWNER","LOG_GROUP_NAME","TABLE_NAME","COLUMN_NAME","POSITION","LOGGING_PROPERTY") AS 
select u.name, c.name, o.name,
       decode(ac.name, null, col.name, ac.name), cc.pos#,
       decode(cc.spare1, 1, 'NO LOG', 'LOG')
from sys.user$ u, sys.con$ c, sys.col$ col, sys.ccol$ cc, sys.cdef$ cd,
     sys.obj$ o, sys.attrcol$ ac
where c.owner# = u.user#
  and c.con# = cd.con#
  and cd.type# = 12
  and cd.con# = cc.con#
  and cc.obj# = col.obj#
  and cc.intcol# = col.intcol#
  and cc.obj# = o.obj#
  and col.obj# = ac.obj#(+)
  and col.intcol# = ac.intcol#(+);

CREATE OR REPLACE FORCE VIEW "DBA_METHOD_PARAMS"("OWNER","TYPE_NAME","METHOD_NAME","METHOD_NO","PARAM_NAME","PARAM_NO","PARAM_MODE","PARAM_TYPE_MOD","PARAM_TYPE_OWNER","PARAM_TYPE_NAME","CHARACTER_SET_NAME") AS 
select u.name, o.name, m.name, m.method#,
       p.name, p.parameter#,
       decode(bitand(p.properties, 768), 768, 'IN OUT',
              decode(bitand(p.properties, 256), 256, 'IN',
                     decode(bitand(p.properties, 512), 512, 'OUT'))),
       decode(bitand(p.properties, 32768), 32768, 'REF',
              decode(bitand(p.properties, 16384), 16384, 'POINTER')),
       decode(bitand(pt.properties, 64), 64, null, pu.name),
       decode(pt.typecode,
              52, decode(p.charsetform, 2, 'NVARCHAR2', po.name),
              53, decode(p.charsetform, 2, 'NCHAR', po.name),
              54, decode(p.charsetform, 2, 'NCHAR VARYING', po.name),
              61, decode(p.charsetform, 2, 'NCLOB', po.name),
              po.name),
       decode(p.charsetform, 1, 'CHAR_CS',
                             2, 'NCHAR_CS',
                             3, NLS_CHARSET_NAME(p.charsetid),
                             4, 'ARG:'||p.charsetid)
from sys.user$ u, sys.obj$ o, sys.method$ m, sys.parameter$ p,
     sys.obj$ po, sys.user$ pu, sys.type$ pt
where o.owner# = u.user#
  and o.type# <> 10 -- must not be invalid
  and o.oid$ = m.toid
  and o.subname IS NULL -- get the latest version only
  and m.toid = p.toid
  and m.version# = p.version#
  and m.method# = p.method#
  and p.param_toid = po.oid$
  and po.owner# = pu.user#
  and p.param_toid = pt.toid
  and p.param_version# = pt.version#;

CREATE OR REPLACE FORCE VIEW "DBA_METHOD_RESULTS"("OWNER","TYPE_NAME","METHOD_NAME","METHOD_NO","RESULT_TYPE_MOD","RESULT_TYPE_OWNER","RESULT_TYPE_NAME","CHARACTER_SET_NAME") AS 
select u.name, o.name, m.name, m.method#,
       decode(bitand(r.properties, 32768), 32768, 'REF',
              decode(bitand(r.properties, 16384), 16384, 'POINTER')),
       decode(bitand(rt.properties, 64), 64, null, ru.name),
       decode(rt.typecode,
              52, decode(r.charsetform, 2, 'NVARCHAR2', ro.name),
              53, decode(r.charsetform, 2, 'NCHAR', ro.name),
              54, decode(r.charsetform, 2, 'NCHAR VARYING', ro.name),
              61, decode(r.charsetform, 2, 'NCLOB', ro.name),
              ro.name),
       decode(r.charsetform, 1, 'CHAR_CS',
                             2, 'NCHAR_CS',
                             3, NLS_CHARSET_NAME(r.charsetid),
                             4, 'ARG:'||r.charsetid)
from sys.user$ u, sys.obj$ o, sys.method$ m, sys.result$ r,
     sys.obj$ ro, sys.user$ ru, sys.type$ rt
where o.owner# = u.user#
  and o.type# <> 10 -- must not be invalid
  and o.oid$ = m.toid
  and o.subname IS NULL -- get the latest version only
  and m.toid = r.toid
  and m.version# = r.version#
  and m.method# = r.method#
  and r.result_toid = ro.oid$
  and ro.owner# = ru.user#
  and r.result_toid = rt.toid
  and r.result_version# = rt.version#;

CREATE OR REPLACE FORCE VIEW "DBA_MVIEWS"("OWNER","MVIEW_NAME","CONTAINER_NAME","QUERY","QUERY_LEN","UPDATABLE","UPDATE_LOG","MASTER_ROLLBACK_SEG","MASTER_LINK","REWRITE_ENABLED","REWRITE_CAPABILITY","REFRESH_MODE","REFRESH_METHOD","BUILD_MODE","FAST_REFRESHABLE","LAST_REFRESH_TYPE","LAST_REFRESH_DATE","STALENESS","AFTER_FAST_REFRESH","UNKNOWN_PREBUILT","UNKNOWN_PLSQL_FUNC","UNKNOWN_EXTERNAL_TABLE","UNKNOWN_CONSIDER_FRESH","UNKNOWN_IMPORT","UNKNOWN_TRUSTED_FD","COMPILE_STATE","USE_NO_INDEX","STALE_SINCE") AS 
select s.sowner, s.vname, s.tname, s.query_txt, s.query_len,
       decode(bitand(s.flag,2), 0, 'N', 'Y'),  /* updatable */
       s.uslog, s.mas_roll_seg, s.mlink,
       decode(w.mflags,
              '', '',  /* missing summary */
              decode(bitand(w.mflags, 4), 4, 'N', 'Y')),
       /* rewrite capability
        *   KKQS_NOGR_PFLAGS:
        *     QSMG_SUM_PART_EXT_NAME + QSMG_SUM_CONNECT_BY +
        *     QSMG_SUM_RAW_OUTPUT + QSMG_SUM_SUBQUERY_HAVING +
        *     QSMG_SUM_SUBQUERY_WHERE + QSMG_SUM_SET_OPERATOR +
        *     QSMG_SUM_NESTED_CURSOR + QSMG_SUM_OUT_MISSING_GRPCOL +
        *     QSMG_SUM_AGGREGATE_NOT_TOP
        *
        *   KKQS_NOGR_XPFLAGS:
        *     QSMG_SUM_WCLS
        *
        *   QSMG_SUM_DATA_IGNORE - 2nd-class summary
        */
       decode(w.pflags,
              '', '',  /* missing summary */
              decode(bitand(w.pflags, 1073741824), /* 2nd-class summary */
                     1073741824, 'NONE',
                     /* 2152929292 = 2147483648 + 2048 + 4096 + 65536 + 131072 +
                      *              1048576 + 4194304 + 8 + 4
                      */
                     decode(bitand(w.pflags, 2152929292),
                            0, decode(bitand(w.xpflags, 8192),
                                      8192, 'TEXTMATCH',
                                      'GENERAL'),
                            'TEXTMATCH'))),
       decode(s.auto_fast,
              'N', 'NEVER',
              decode(bitand(s.flag, 32768), 0, 'DEMAND', 'COMMIT')),
       decode(s.auto_fast,   /* refresh method */
              'C',  'COMPLETE',
              'F',  'FAST',
              '?',  'FORCE',
              'N',  'NEVER',
              NULL, 'FORCE', 'ERROR'),
       decode(bitand(s.flag, 131072),  /* build mode */
              131072, 'PREBUILT',
              decode(bitand(s.flag, 524288), 0, 'IMMEDIATE', 'DEFERRED')),
       /* fast refreshable
        *     rowid+primary key+object id+subquery+complex+MAV+MJV+MAV1
        *     536900016 = 16+32+536870912+128+256+4096+8192+16384
        */
       decode(bitand(s.flag, 536900016),
              16,        'DML',  /* rowid */
              32,        'DML',  /* primary key */
              536870912, 'DML',  /* object id */
              160,       'DML',  /* subquery - has both the primary key     */
                                 /* bit and the subquery bit  (32+128)      */
              536871040, 'DML',  /* subquery - has both the object id bit   */
                                 /* and the subquery bit (536870912+128)    */
              256,       'NO',   /* complex */
              4096,   decode(bitand(s.flag2,23),            /* KKZFAGG_INSO */
                             0,
                             'DIRLOAD_DML',                  /* regular MAV */
                             'DIRLOAD_LIMITEDDML'),      /* insert only MAV */
              8192,      'DIRLOAD_DML', /* MJV */
              16384,     'DIRLOAD_DML', /* MAV1 */
              decode(bitand(s.flag2, 16384),
                     16384,   'DIRLOAD_DML', /* UNION_ALL MV */
                     'ERROR')),
       /* fixing bug 923186 */
       decode(w.mflags,                    /*last refresh type */
              '','',                       /*missing summary */
              decode(bitand(w.mflags,16384+32768+4194304),
                     0, 'NA',
                     16384, 'COMPLETE',
                     32768, 'FAST',
                     4194304, 'FAST_PCT',
                     'ERROR')),
       /* end fixing bug 923186 */
       /* the last refresh date should be of date type and not varchar,
       ** SO BE CAREFUL WITH CHANGES IN THE FOLLOWING DECODE
       */
       decode(w.lastrefreshdate,  /* last refresh date */
              NULL, to_date(NULL, 'DD-MON-YYYY'),  /* missing summary */
              decode(to_char(w.lastrefreshdate,'DD-MON-YYYY'),'01-JAN-1950',
              to_date(NULL, 'DD-MON-YYYY'), w.lastrefreshdate)),
       /* staleness */
        decode(NVL(s.mlink,'null'),  /* not null implies remote */
              'null', decode(bitand(s.status, 4),  /* snapshot-invalid */
                             4, 'UNUSABLE',
                             decode(o.status,
                                    1, decode(w.mflags,
                                         '', '',  /* missing summary */
                                         decode(bitand(w.mflags, 8388608),
                                                8388608, 'IMPORT',            /* mv imported */
                                                decode(bitand(w.mflags, 64),  /* wh-unusable */
                                                       64, 'UNUSABLE',        /* unusable */
                                                       decode(bitand(w.mflags, 32),
                                                              0,    /* unknown */
                                            /* known stale */  decode(bitand(w.mflags, 1),
                                                              0, 'FRESH',
                                                              'STALE'), 'UNKNOWN')))),
                                    2, 'AUTHORIZATION_ERROR',
                                    3, 'COMPILATION_ERROR',
                                    5, 'NEEDS_COMPILE',
                                    'ERROR')),
              'UNDEFINED'),  /* remote MV */
       /* after fast refresh */
       /* in the decode for after fast refresh, we only have to check
        * whether w.mflags is null once.  all of the other occurences
        * fall under the first check.  if the summary information is not
        * null, we need to check for the warehouse unusable condition
        * before we check to see if the MV is complex.  if the summary
        * information is null, we still need to check whether the MV
        * is complex.
        */
       decode(NVL(s.mlink,'null'),  /* remote */
              'null', decode(s.auto_fast,  /* never refresh */
                         'N', 'NA',
                         decode(bitand(s.flag, 32768),  /* on commit */
                             32768, 'NA',
                             decode(bitand(s.status, 4),  /* snap-invalid */
                                4, 'NA',
                                decode(w.mflags,  /* missing summary */
                                   '', decode(bitand(s.flag, 256), /* complex */
                                              256, 'NA',
                                              ''),
                                   decode(o.status,
                                      1, decode(bitand(w.mflags, 8388608),
                                            8388608, 'UNKNOWN',        /* imported */
                  /* warehouse unusable */  decode(bitand(w.mflags, 64),
                                               64, 'NA',
                                               decode(bitand(s.flag, 256), /*complex*/
                                                  256, 'NA',
                                 /* unknown */    decode(bitand(w.mflags,32),
                                                     32, 'UNKNOWN',
                                 /* known stale */   decode(bitand(w.mflags, 1),
                                                        0, 'FRESH',
                  /* stale states (on-demand only)
                   * (This decode is the default clause for the known-stale
                   * decode statement.  It should be indented there, but there
                   * isn't enough room.)
                   */
                   decode(bitand(s.flag, 176), /* ri+pk+sq  */
                                               /* 16+32+128 */
                          0, decode(bitand(s.flag, 28672), /* mjv+mav1+mav  */
                                                         /* 8192+16384+4096 */
                                      0, 'ERROR', /* no mv type */
                /* mjv/mav/mav1 MV */ decode(bitand(w.mflags, 1576832),
                           /* 1576832 = 128+256+512+1024+2048+524288+1048576*/
                                      /*si + su + lsi + lsu + sf + sp + spu */
                                             128, 'FRESH',     /* si */
                                             256, 'UNKNOWN',   /* su */
                                             512, 'STALE',     /* sf */
                                             1024, 'FRESH',    /* lsi */
                                             2048, 'UNKNOWN',  /* lsu */
                                             524288, 'FRESH',  /* sp */
                                             1048576, 'UNKNOWN', /* spu */
                            /* 128+1024 */   1152, 'FRESH',    /* si+lsi*/
                            /* 256+2048 */   2304, 'UNKNOWN',  /* su+lsu*/
                                             'ERROR')),
   /* ri or pk or sq MV */  decode(bitand(w.mflags, 1576832),
                             /* 1576832 = 128+256+512+1024+2048+524288+1048576 */
                                   128, 'STALE',     /* si */
                                   256, 'STALE',     /* su */
                                   512, 'STALE',     /* sf */
                                   1024, 'FRESH',    /* lsi */
                                   2048, 'UNKNOWN',  /* lsu */
                                   524288, 'FRESH',  /* sp */
                                   1048576, 'UNKNOWN', /* spu */
                  /* 128+1024 */   1152, 'STALE',    /* si+lsi*/
                  /* 256+2048 */   2304, 'STALE',    /* su+lsu*/
                                   'ERROR'))))))),
                      2, 'AUTHORIZATION_ERROR',
                      3, 'COMPILATION_ERROR',
                      5, 'NEEDS_COMPILE',
                      'ERROR'))))),
              'UNDEFINED'), /* remote mv */
       /* UNKNOWN_PREBUILT */
       decode(w.pflags,
              '','', /* missing summary */
              decode(bitand(s.flag, 131072),
                    131072, 'Y', 'N')),
       /* UNKNOWN_PLSQL_FUNC */
       decode(w.pflags,
              '','', /* missing summary */
              decode(bitand(w.pflags, 268435456),
                     268435456, 'Y', 'N')),
       /* UNKNOWN_EXTERNAL_TABLE */
       decode(w.xpflags,
              '','', /* missing summary */
              decode(bitand(w.xpflags, 32768),
                     32768, 'Y', 'N')),
       /* UNKNOWN_CONSIDER_FRESH */
       decode(w.mflags,
              '','', /* missing summary */
              decode(bitand(w.mflags, 8192),
                     8192, 'Y', 'N')),
       /* UNKNOWN_IMPORT */
       decode(w.mflags,
              '','', /* missing summary */
              decode(bitand(w.mflags, 8388608),
                     8388608, 'Y', 'N')),
       /* UNKNOWN_TRUSTED_FD */
       decode(w.mflags,
              '','', /* missing summary */
              decode(bitand(w.mflags, 33554432),
                     33554432, 'Y', 'N')),
       decode(o.status,
              1, 'VALID',
              2, 'AUTHORIZATION_ERROR',
              3, 'COMPILATION_ERROR',
              5, 'NEEDS_COMPILE', 'ERROR'),/* compile st*/
       decode(bitand(s.flag2,1024), 0, 'N', 'Y'), /* USE NO INDEX ? */
       (select min(TIME_DP) from sys.SMON_SCN_TIME
        where (SCN_WRP*4294967295+ SCN_BAS) >
              (select min(t.spare3)
               from tab$ t, dependency$ d
               where t.obj#= d.p_obj# and w.obj#=d.d_obj# and
                     t.spare3 > w.lastrefreshscn))
from sys.user$ u, sys.sum$ w, sys.obj$ o, sys.snap$ s
where w.containernam(+) = s.vname
  and o.obj#(+) = w.obj#
  and o.owner# = u.user#(+)
  and ((u.name = s.sowner) or (u.name IS NULL))
  and s.instsite = 0
  and not (bitand(s.flag, 268435456) > 0       /* MV with user-defined types */
           and bitand(s.objflag, 32) > 0)                    /* secondary MV */;

CREATE OR REPLACE FORCE VIEW "DBA_MVIEW_AGGREGATES"("OWNER","MVIEW_NAME","POSITION_IN_SELECT","CONTAINER_COLUMN","AGG_FUNCTION","DISTINCTFLAG","MEASURE") AS 
select u.name, o.name, sa.sumcolpos#, c.name,
       decode(sa.aggfunction, 15, 'AVG', 16, 'SUM', 17, 'COUNT',
                              18, 'MIN', 19, 'MAX',
                              97, 'VARIANCE', 98, 'STDDEV',
                              440, 'USER'),
       decode(sa.flags, 0, 'N', 'Y'),
       sa.aggtext
from sys.sumagg$ sa, sys.obj$ o, sys.user$ u, sys.sum$ s, sys.col$ c
where sa.sumobj# = o.obj#
  AND o.owner# = u.user#
  AND sa.sumobj# = s.obj#
  AND c.obj# = s.containerobj#
  AND c.col# = sa.containercol#
  AND bitand(s.xpflags, 8388608) = 0 /* NOT REWRITE EQUIVALENCE SUMMARY */;

CREATE OR REPLACE FORCE VIEW "DBA_MVIEW_ANALYSIS"("OWNER","MVIEW_NAME","MVIEW_TABLE_OWNER","CONTAINER_NAME","LAST_REFRESH_SCN","LAST_REFRESH_DATE","REFRESH_METHOD","SUMMARY","FULLREFRESHTIM","INCREFRESHTIM","CONTAINS_VIEWS","UNUSABLE","RESTRICTED_SYNTAX","INC_REFRESHABLE","KNOWN_STALE","INVALID","REWRITE_ENABLED","QUERY_LEN","QUERY","REVISION") AS 
select u.name, o.name, u.name, s.containernam,
       s.lastrefreshscn, s.lastrefreshdate,
       decode (s.refreshmode, 0, 'NEVER', 1, 'FORCE', 2, 'FAST', 3,'COMPLETE'),
       decode(bitand(s.pflags, 25165824), 25165824, 'N', 'Y'),
       s.fullrefreshtim, s.increfreshtim,
       decode(bitand(s.pflags, 48), 0, 'N', 'Y'),
       decode(bitand(s.mflags, 64), 0, 'N', 'Y'), /* QSMQSUM_UNUSABLE */
       decode(bitand(s.pflags, 1294319), 0, 'Y', 'N'),
       decode(bitand(s.pflags, 236879743), 0, 'Y', 'N'),
       decode(bitand(s.mflags, 1), 0, 'N', 'Y'), /* QSMQSUM_KNOWNSTL */
       decode(o.status, 5, 'Y', 'N'),
       decode(bitand(s.mflags, 4), 0, 'Y', 'N'), /* QSMQSUM_DISABLED */
       s.sumtextlen,s.sumtext,
       s.metaversion/* Metadata revision number */
from sys.user$ u, sys.sum$ s, sys.obj$ o
where o.owner# = u.user#
  and o.obj# = s.obj#
  and bitand(s.xpflags, 8388608) = 0 /* NOT REWRITE EQUIVALENCE SUMMARY */;

CREATE OR REPLACE FORCE VIEW "DBA_MVIEW_COMMENTS"("OWNER","MVIEW_NAME","COMMENTS") AS 
select u.name, o.name, c.comment$
from sys.obj$ o, sys.user$ u, sys.com$ c, sys.tab$ t
  where o.owner# = u.user# AND o.type# = 2
  and (bitand(t.property, 67108864) = 67108864)         /*mv container table */
  and o.obj# = c.obj#(+)
  and c.col#(+) is NULL
  and o.obj# = t.obj#;

CREATE OR REPLACE FORCE VIEW "DBA_MVIEW_DETAIL_RELATIONS"("OWNER","MVIEW_NAME","DETAILOBJ_OWNER","DETAILOBJ_NAME","DETAILOBJ_TYPE","DETAILOBJ_ALIAS") AS 
select u.name, o.name, du.name,  do.name,
       decode (sd.detailobjtype, 1, 'TABLE', 2, 'VIEW',
                                3, 'SNAPSHOT', 4, 'CONTAINER', 'UNDEFINED'),
       sd.detailalias
from sys.user$ u, sys.sumdetail$ sd, sys.obj$ o, sys.obj$ do,
     sys.user$ du, sys.sum$ s
where o.owner# = u.user#
  and o.obj# = sd.sumobj#
  and do.obj# = sd.detailobj#
  and do.owner# = du.user#
  and s.obj# = sd.sumobj#
  and bitand(s.xpflags, 8388608) = 0 /* NOT REWRITE EQUIVALENCE SUMMARY */;

CREATE OR REPLACE FORCE VIEW "DBA_MVIEW_JOINS"("OWNER","MVIEW_NAME","DETAILOBJ1_OWNER","DETAILOBJ1_RELATION","DETAILOBJ1_COLUMN","OPERATOR","OPERATOR_TYPE","DETAILOBJ2_OWNER","DETAILOBJ2_RELATION","DETAILOBJ2_COLUMN") AS 
select u.name, o.name,
       u1.name, o1.name, c1.name, '=',
       decode(sj.flags, 0, 'I', 1, 'L', 2, 'R'),
       u2.name, o2.name, c2.name
from sys.sumjoin$ sj, sys.obj$ o, sys.user$ u,
     sys.obj$ o1, sys.user$ u1, sys.col$ c1,
     sys.obj$ o2, sys.user$ u2, sys.col$ c2,
     sys.sum$ s
where sj.sumobj# = o.obj#
  AND o.owner# = u.user#
  AND sj.tab1obj# = o1.obj#
  AND o1.owner# = u1.user#
  AND sj.tab1obj# = c1.obj#
  AND sj.tab1col# = c1.intcol#
  AND sj.tab2obj# = o2.obj#
  AND o2.owner# = u2.user#
  AND sj.tab2obj# = c2.obj#
  AND sj.tab2col# = c2.intcol#
  AND s.obj# = sj.sumobj#
  AND bitand(s.xpflags, 8388608) = 0 /* NOT REWRITE EQUIVALENCE SUMMARY */;

CREATE OR REPLACE FORCE VIEW "DBA_MVIEW_KEYS"("OWNER","MVIEW_NAME","POSITION_IN_SELECT","CONTAINER_COLUMN","DETAILOBJ_OWNER","DETAILOBJ_NAME","DETAILOBJ_ALIAS","DETAILOBJ_TYPE","DETAILOBJ_COLUMN") AS 
select u1.name, o1.name, sk.sumcolpos#, c1.name,
       u2.name, o2.name, sd.detailalias,
       decode(sk.detailobjtype, 1, 'TABLE', 2, 'VIEW'), c2.name
from sys.sumkey$ sk, sys.obj$ o1, sys.user$ u1, sys.col$ c1, sys.sum$ s,
     sys.sumdetail$ sd, sys.obj$ o2, sys.user$ u2, sys.col$ c2
where sk.sumobj# = o1.obj#
  AND o1.owner# = u1.user#
  AND sk.sumobj# = s.obj#
  AND s.containerobj# = c1.obj#
  AND c1.col# = sk.containercol#
  AND sk.detailobj# = o2.obj#
  AND o2.owner# = u2.user#
  AND sk.sumobj# = sd.sumobj#
  AND sk.detailobj# = sd.detailobj#
  AND sk.detailobj# = c2.obj#
  AND sk.detailcol# = c2.intcol#
  AND bitand(s.xpflags, 8388608) = 0 /* NOT REWRITE EQUIVALENCE SUMMARY */;

CREATE OR REPLACE FORCE VIEW "DBA_MVIEW_LOGS"("LOG_OWNER","MASTER","LOG_TABLE","LOG_TRIGGER","ROWIDS","PRIMARY_KEY","OBJECT_ID","FILTER_COLUMNS","SEQUENCE","INCLUDE_NEW_VALUES") AS 
select m.mowner, m.master, m.log, m.trig,
       decode(bitand(m.flag,1), 0, 'NO', 'YES'),
       decode(bitand(m.flag,2), 0, 'NO', 'YES'),
       decode(bitand(m.flag,512), 0, 'NO', 'YES'),
       decode(bitand(m.flag,4), 0, 'NO', 'YES'),
       decode(bitand(m.flag,1024), 0, 'NO', 'YES'),
       decode(bitand(m.flag,16), 0, 'NO', 'YES')
from sys.mlog$ m
union
select ct.source_schema_name, ct.source_table_name, ct.change_table_name,
       ct.mvl_v7trigger,
       decode(bitand(ct.mvl_flag,1), 0, 'NO', 'YES'),
       decode(bitand(ct.mvl_flag,2), 0, 'NO', 'YES'),
       decode(bitand(ct.mvl_flag,512), 0, 'NO', 'YES'),
       decode(bitand(ct.mvl_flag,4), 0, 'NO', 'YES'),
       decode(bitand(ct.mvl_flag,1024), 0, 'NO', 'YES'),
       decode(bitand(ct.mvl_flag,16), 0, 'NO', 'YES')
from sys.cdc_change_tables$ ct
where bitand(ct.mvl_flag, 128) = 128;

CREATE OR REPLACE FORCE VIEW "DBA_MVIEW_LOG_FILTER_COLS"("OWNER","NAME","COLUMN_NAME") AS 
select mowner, master, colname from sys.mlog_refcol$
union
select ct.source_schema_name, ct.source_table_name, cc.column_name
from sys.cdc_change_tables$ ct, sys.cdc_change_columns$ cc
where cc.change_table_obj# = ct.obj#
  and bitand(ct.mvl_flag, 128) = 128
  and cc.column_name not in
    ('RSID$','XIDUSN$','XIDSLT$','XIDSEQ$','OPERATION$',
     'CSCN$','COMMIT_TIMESTAMP$','SOURCE_COLMAP$','TARGET_COLMAP$',
     'USERNAME$', 'TIMESTAMP$', 'ROW_ID$','SYS_NC_OID$');

CREATE OR REPLACE FORCE VIEW "DBA_MVIEW_REFRESH_TIMES"("OWNER","NAME","MASTER_OWNER","MASTER","LAST_REFRESH") AS 
select sowner, vname, mowner, master, snaptime
from sys.snap_reftime$ t
where t.instsite = 0;

CREATE OR REPLACE FORCE VIEW "DBA_NESTED_TABLES"("OWNER","TABLE_NAME","TABLE_TYPE_OWNER","TABLE_TYPE_NAME","PARENT_TABLE_NAME","PARENT_TABLE_COLUMN","STORAGE_SPEC","RETURN_TYPE","ELEMENT_SUBSTITUTABLE") AS 
select u.name, o.name,
       nvl2(ct.synobj#, (select u.name from user$ u, obj$ o
            where o.owner#=u.user# and o.obj#=ct.synobj#), ut.name),
       nvl2(ct.synobj#, (select o.name from obj$ o
            where o.obj#=ct.synobj#), ot.name),
       op.name, ac.name,
       lpad(decode(bitand(ct.flags, 64), 64, 'USER_SPECIFIED', 'DEFAULT'), 30),
       lpad(decode(bitand(ct.flags, 32), 32, 'LOCATOR', 'VALUE'), 20),
       lpad((case when bitand(ct.flags, 5120)=0 and bitand(t.properties, 8)= 8
       then 'Y' else 'N' end), 25)
from sys.ntab$ n, sys.obj$ o, sys.obj$ op, sys.obj$ ot,
  sys.col$ c, sys.coltype$ ct, sys.user$ u, sys.user$ ut, sys.attrcol$ ac,
  sys.type$ t, sys.collection$ cl
where o.owner# = u.user#
  and op.owner# = u.user#
  and n.obj# = op.obj#
  and n.ntab# = o.obj#
  and c.obj# = op.obj#
  and n.intcol# = c.intcol#
  and c.obj# = ac.obj#
  and c.intcol# = ac.intcol#
  and op.obj# = ct.obj#
  and ct.toid = ot.oid$
  and ct.intcol#=n.intcol#
  and ot.owner# = ut.user#
  and ct.toid=cl.toid
  and cl.elem_toid=t.tvoid
  and bitand(ct.flags,4)=4
  and bitand(c.property,32768) != 32768           /* not unused column */
union all
select u.name, o.name,
       nvl2(ct.synobj#, (select u.name from user$ u, obj$ o
            where o.owner#=u.user# and o.obj#=ct.synobj#), ut.name),
       nvl2(ct.synobj#, (select o.name from obj$ o
            where o.obj#=ct.synobj#), ot.name),
       op.name, c.name,
       lpad(decode(bitand(ct.flags, 64), 64, 'USER_SPECIFIED', 'DEFAULT'), 30),
       lpad(decode(bitand(ct.flags, 32), 32, 'LOCATOR', 'VALUE'), 20),
       lpad((case when bitand(ct.flags, 5120)=0 and bitand(t.properties, 8)= 8
       then 'Y' else 'N' end), 25)
from sys.ntab$ n, sys.obj$ o, sys.obj$ op, sys.obj$ ot, sys.col$ c,
  sys.coltype$ ct, sys.user$ u, sys.user$ ut, sys.type$ t, sys.collection$ cl
where o.owner# = u.user#
  and op.owner# = u.user#
  and n.obj# = op.obj#
  and n.ntab# = o.obj#
  and c.obj# = op.obj#
  and n.intcol# = c.intcol#
  and bitand(c.property,1)=0
  and op.obj# = ct.obj#
  and ct.toid = ot.oid$
  and ct.intcol#=n.intcol#
  and ot.owner# = ut.user#
  and ct.toid=cl.toid
  and cl.elem_toid=t.tvoid
  and bitand(ct.flags,4)=4
  and bitand(c.property,32768) != 32768           /* not unused column */;

CREATE OR REPLACE FORCE VIEW "DBA_NESTED_TABLE_COLS"("OWNER","TABLE_NAME","COLUMN_NAME","DATA_TYPE","DATA_TYPE_MOD","DATA_TYPE_OWNER","DATA_LENGTH","DATA_PRECISION","DATA_SCALE","NULLABLE","COLUMN_ID","DEFAULT_LENGTH","DATA_DEFAULT","NUM_DISTINCT","LOW_VALUE","HIGH_VALUE","DENSITY","NUM_NULLS","NUM_BUCKETS","LAST_ANALYZED","SAMPLE_SIZE","CHARACTER_SET_NAME","CHAR_COL_DECL_LENGTH","GLOBAL_STATS","USER_STATS","AVG_COL_LEN","CHAR_LENGTH","CHAR_USED","V80_FMT_IMAGE","DATA_UPGRADED","HIDDEN_COLUMN","VIRTUAL_COLUMN","SEGMENT_COLUMN_ID","INTERNAL_COLUMN_ID","HISTOGRAM","QUALIFIED_COL_NAME") AS 
select u.name, o.name,
       c.name,
       decode(c.type#, 1, decode(c.charsetform, 2, 'NVARCHAR2', 'VARCHAR2'),
                       2, decode(c.scale, null,
                                 decode(c.precision#, null, 'NUMBER', 'FLOAT'),
                                 'NUMBER'),
                       8, 'LONG',
                       9, decode(c.charsetform, 2, 'NCHAR VARYING', 'VARCHAR'),
                       12, 'DATE',
                       23, 'RAW', 24, 'LONG RAW',
                       58, nvl2(ac.synobj#, (select o.name from obj$ o
                                where o.obj#=ac.synobj#), ot.name),
                       69, 'ROWID',
                       96, decode(c.charsetform, 2, 'NCHAR', 'CHAR'),
                       100, 'BINARY_FLOAT',
                       101, 'BINARY_DOUBLE',
                       105, 'MLSLABEL',
                       106, 'MLSLABEL',
                       111, nvl2(ac.synobj#, (select o.name from obj$ o
                                 where o.obj#=ac.synobj#), ot.name),
                       112, decode(c.charsetform, 2, 'NCLOB', 'CLOB'),
                       113, 'BLOB', 114, 'BFILE', 115, 'CFILE',
                       121, nvl2(ac.synobj#, (select o.name from obj$ o
                                 where o.obj#=ac.synobj#), ot.name),
                       122, nvl2(ac.synobj#, (select o.name from obj$ o
                                 where o.obj#=ac.synobj#), ot.name),
                       123, nvl2(ac.synobj#, (select o.name from obj$ o
                                 where o.obj#=ac.synobj#), ot.name),
                       178, 'TIME(' ||c.scale|| ')',
                       179, 'TIME(' ||c.scale|| ')' || ' WITH TIME ZONE',
                       180, 'TIMESTAMP(' ||c.scale|| ')',
                       181, 'TIMESTAMP(' ||c.scale|| ')' || ' WITH TIME ZONE',
                       231, 'TIMESTAMP(' ||c.scale|| ')' || ' WITH LOCAL TIME ZONE',
                       182, 'INTERVAL YEAR(' ||c.precision#||') TO MONTH',
                       183, 'INTERVAL DAY(' ||c.precision#||') TO SECOND(' ||
                             c.scale || ')',
                       208, 'UROWID',
                       'UNDEFINED'),
       decode(c.type#, 111, 'REF'),
       nvl2(ac.synobj#, (select u.name from user$ u, obj$ o
            where o.owner#=u.user# and o.obj#=ac.synobj#), ut.name),
       c.length, c.precision#, c.scale,
       decode(sign(c.null$),-1,'D', 0, 'Y', 'N'),
       decode(c.col#, 0, to_number(null), c.col#), c.deflength,
       c.default$, h.distcnt, h.lowval, h.hival, h.density, h.null_cnt,
       case when h.bucket_cnt > 255 then h.row_cnt else
         decode(h.row_cnt, h.distcnt, h.row_cnt, h.bucket_cnt)
       end,
       h.timestamp#, h.sample_size,
       decode(c.charsetform, 1, 'CHAR_CS',
                             2, 'NCHAR_CS',
                             3, NLS_CHARSET_NAME(c.charsetid),
                             4, 'ARG:'||c.charsetid),
       decode(c.charsetid, 0, to_number(NULL),
                           nls_charset_decl_len(c.length, c.charsetid)),
       decode(bitand(h.spare2, 2), 2, 'YES', 'NO'),
       decode(bitand(h.spare2, 1), 1, 'YES', 'NO'),
       h.avgcln,
       c.spare3,
       decode(c.type#, 1, decode(bitand(c.property, 8388608), 0, 'B', 'C'),
                      96, decode(bitand(c.property, 8388608), 0, 'B', 'C'),
                      null),
       decode(bitand(ac.flags, 128), 128, 'YES', 'NO'),
       decode(o.status, 1, decode(bitand(ac.flags, 256), 256, 'NO', 'YES'),
                        decode(bitand(ac.flags, 2), 2, 'NO',
                               decode(bitand(ac.flags, 4), 4, 'NO',
                                      decode(bitand(ac.flags, 8), 8, 'NO',
                                             'N/A')))),
       decode(c.property, 0, 'NO', decode(bitand(c.property, 32), 32, 'YES',
                                          'NO')),
       decode(c.property, 0, 'NO', decode(bitand(c.property, 8), 8, 'YES',
                                          'NO')),
       decode(c.segcol#, 0, to_number(null), c.segcol#), c.intcol#,
       case when h.bucket_cnt > 255 then 'FREQUENCY' else
         decode(nvl(h.row_cnt, 0), 0, 'NONE',
                                   h.distcnt, 'FREQUENCY', 'HEIGHT BALANCED')
       end,
       decode(bitand(c.property, 1024), 1024,
              (select decode(bitand(cl.property, 1), 1, rc.name, cl.name)
               from sys.col$ cl, attrcol$ rc where cl.intcol# = c.intcol#-1
               and cl.obj# = c.obj# and c.obj# = rc.obj#(+) and
               cl.intcol# = rc.intcol#(+)),
              decode(bitand(c.property, 1), 0, c.name,
                     (select tc.name from sys.attrcol$ tc
                      where c.obj# = tc.obj# and c.intcol# = tc.intcol#)))
from sys.col$ c, sys.obj$ o, sys.hist_head$ h, sys.user$ u,
     sys.coltype$ ac, sys.obj$ ot, sys.user$ ut, sys.tab$ t
where o.obj# = c.obj#
  and o.owner# = u.user#
  and c.obj# = h.obj#(+) and c.intcol# = h.intcol#(+)
  and c.obj# = ac.obj#(+) and c.intcol# = ac.intcol#(+)
  and ac.toid = ot.oid$(+)
  and ot.type#(+) = 13
  and ot.owner# = ut.user#(+)
  and o.obj# = t.obj#
  and bitand(t.property, 8192) = 8192            /* nested tables */;

CREATE OR REPLACE FORCE VIEW "DBA_OBJECTS"("OWNER","OBJECT_NAME","SUBOBJECT_NAME","OBJECT_ID","DATA_OBJECT_ID","OBJECT_TYPE","CREATED","LAST_DDL_TIME","TIMESTAMP","STATUS","TEMPORARY","GENERATED","SECONDARY") AS 
select u.name, o.name, o.subname, o.obj#, o.dataobj#,
       decode(o.type#, 0, 'NEXT OBJECT', 1, 'INDEX', 2, 'TABLE', 3, 'CLUSTER',
                      4, 'VIEW', 5, 'SYNONYM', 6, 'SEQUENCE',
                      7, 'PROCEDURE', 8, 'FUNCTION', 9, 'PACKAGE',
                      11, 'PACKAGE BODY', 12, 'TRIGGER',
                      13, 'TYPE', 14, 'TYPE BODY',
                      19, 'TABLE PARTITION', 20, 'INDEX PARTITION', 21, 'LOB',
                      22, 'LIBRARY', 23, 'DIRECTORY', 24, 'QUEUE',
                      28, 'JAVA SOURCE', 29, 'JAVA CLASS', 30, 'JAVA RESOURCE',
                      32, 'INDEXTYPE', 33, 'OPERATOR',
                      34, 'TABLE SUBPARTITION', 35, 'INDEX SUBPARTITION',
                      40, 'LOB PARTITION', 41, 'LOB SUBPARTITION',
                      42, NVL((SELECT distinct 'REWRITE EQUIVALENCE'
                               FROM sum$ s
                               WHERE s.obj#=o.obj#
                                     and bitand(s.xpflags, 8388608) = 8388608),
                              'MATERIALIZED VIEW'),
                      43, 'DIMENSION',
                      44, 'CONTEXT', 46, 'RULE SET', 47, 'RESOURCE PLAN',
                      48, 'CONSUMER GROUP',
                      51, 'SUBSCRIPTION', 52, 'LOCATION',
                      55, 'XML SCHEMA', 56, 'JAVA DATA',
                      57, 'SECURITY PROFILE', 59, 'RULE',
                      60, 'CAPTURE', 61, 'APPLY',
                      62, 'EVALUATION CONTEXT',
                      66, 'JOB', 67, 'PROGRAM', 68, 'JOB CLASS', 69, 'WINDOW',
                      72, 'WINDOW GROUP', 74, 'SCHEDULE',
                     'UNDEFINED'),
       o.ctime, o.mtime,
       to_char(o.stime, 'YYYY-MM-DD:HH24:MI:SS'),
       decode(o.status, 0, 'N/A', 1, 'VALID', 'INVALID'),
       decode(bitand(o.flags, 2), 0, 'N', 2, 'Y', 'N'),
       decode(bitand(o.flags, 4), 0, 'N', 4, 'Y', 'N'),
       decode(bitand(o.flags, 16), 0, 'N', 16, 'Y', 'N')
from sys.obj$ o, sys.user$ u
where o.owner# = u.user#
  and o.linkname is null
  and (o.type# not in (1  /* INDEX - handled below */,
                      10 /* NON-EXISTENT */)
       or
       (o.type# = 1 and 1 = (select 1
                              from sys.ind$ i
                             where i.obj# = o.obj#
                               and i.type# in (1, 2, 3, 4, 6, 7, 9))))
  and o.name != '_NEXT_OBJECT'
  and o.name != '_default_auditing_options_'
union all
select u.name, l.name, NULL, to_number(null), to_number(null),
       'DATABASE LINK',
       l.ctime, to_date(null), NULL, 'VALID','N','N', 'N'
from sys.link$ l, sys.user$ u
where l.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "DBA_OBJECT_SIZE"("OWNER","NAME","TYPE","SOURCE_SIZE","PARSED_SIZE","CODE_SIZE","ERROR_SIZE") AS 
select u.name, o.name,
  decode(o.type#, 2, 'TABLE', 4, 'VIEW', 5, 'SYNONYM', 6, 'SEQUENCE',
    7, 'PROCEDURE', 8, 'FUNCTION', 9, 'PACKAGE', 11, 'PACKAGE BODY',
    12, 'TRIGGER', 13, 'TYPE', 14, 'TYPE BODY',
    28, 'JAVA SOURCE', 29, 'JAVA CLASS', 30, 'JAVA RESOURCE', 56, 'JAVA DATA',
    'UNDEFINED'),
  nvl(s.bytes,0), nvl(p.bytes,0), nvl(c.bytes,0), nvl(e.bytes,0)
  from sys.obj$ o, sys.user$ u,
    sys.source_size s, sys.parsed_size p, sys.code_size c, sys.error_size e
  where o.type# in (2, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 28, 29, 30, 56)
    and o.owner# = u.user#
    and o.obj# = s.obj# (+)
    and o.obj# = p.obj# (+)
    and o.obj# = c.obj# (+)
    and o.obj# = e.obj# (+)
    and nvl(s.bytes,0) + nvl(p.bytes,0) + nvl(c.bytes,0) + nvl(e.bytes,0) > 0;

CREATE OR REPLACE FORCE VIEW "DBA_OBJECT_TABLES"("OWNER","TABLE_NAME","TABLESPACE_NAME","CLUSTER_NAME","IOT_NAME","PCT_FREE","PCT_USED","INI_TRANS","MAX_TRANS","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENTS","MAX_EXTENTS","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","LOGGING","BACKED_UP","NUM_ROWS","BLOCKS","EMPTY_BLOCKS","AVG_SPACE","CHAIN_CNT","AVG_ROW_LEN","AVG_SPACE_FREELIST_BLOCKS","NUM_FREELIST_BLOCKS","DEGREE","INSTANCES","CACHE","TABLE_LOCK","SAMPLE_SIZE","LAST_ANALYZED","PARTITIONED","IOT_TYPE","OBJECT_ID_TYPE","TABLE_TYPE_OWNER","TABLE_TYPE","TEMPORARY","SECONDARY","NESTED","BUFFER_POOL","ROW_MOVEMENT","GLOBAL_STATS","USER_STATS","DURATION","SKIP_CORRUPT","MONITORING","CLUSTER_OWNER","DEPENDENCIES","COMPRESSION","DROPPED") AS 
select u.name, o.name, decode(bitand(t.property,2151678048), 0, ts.name, null),
       decode(bitand(t.property, 1024), 0, null, co.name),
       decode((bitand(t.property, 512)+bitand(t.flags, 536870912)),
              0, null, co.name),
       decode(bitand(t.property, 32+64), 0, mod(t.pctfree$, 100), 64, 0, null),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
          decode(bitand(t.property, 32+64), 0, t.pctused$, 64, 0, null)),
       decode(bitand(t.property, 32), 0, t.initrans, null),
       decode(bitand(t.property, 32), 0, t.maxtrans, null),
       s.iniexts * ts.blocksize,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extsize * ts.blocksize),
       s.minexts, s.maxexts,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extpct),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
         decode(bitand(o.flags, 2), 2, 1, decode(s.lists, 0, 1, s.lists))),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
         decode(bitand(o.flags, 2), 2, 1, decode(s.groups, 0, 1, s.groups))),
       decode(bitand(t.property, 32), 32, null,
                decode(bitand(t.flags, 32), 0, 'YES', 'NO')),
       decode(bitand(t.flags,1), 0, 'Y', 1, 'N', '?'),
       t.rowcnt,
       decode(bitand(t.property, 64), 0, t.blkcnt, null),
       decode(bitand(t.property, 64), 0, t.empcnt, null),
       t.avgspc, t.chncnt, t.avgrln, t.avgspc_flb,
       decode(bitand(t.property, 64), 0, t.flbcnt, null),
       lpad(decode(t.degree, 32767, 'DEFAULT', nvl(t.degree,1)),10),
       lpad(decode(t.instances, 32767, 'DEFAULT', nvl(t.instances,1)),10),
       lpad(decode(bitand(t.flags, 8), 8, 'Y', 'N'),5),
       decode(bitand(t.flags, 6), 0, 'ENABLED', 'DISABLED'),
       t.samplesize, t.analyzetime,
       decode(bitand(t.property, 32), 32, 'YES', 'NO'),
       decode(bitand(t.property, 64), 64, 'IOT',
               decode(bitand(t.property, 512), 512, 'IOT_OVERFLOW',
               decode(bitand(t.flags, 536870912), 536870912, 'IOT_MAPPING', null))),
       decode(bitand(t.property, 4096), 4096, 'USER-DEFINED',
                                              'SYSTEM GENERATED'),
       nvl2(ac.synobj#, su.name, tu.name),
       nvl2(ac.synobj#, so.name, ty.name),
       decode(bitand(o.flags, 2), 0, 'N', 2, 'Y', 'N'),
       decode(bitand(o.flags, 16), 0, 'N', 16, 'Y', 'N'),
       decode(bitand(t.property, 8192), 8192, 'YES', 'NO'),
       decode(bitand(o.flags, 2), 2, 'DEFAULT',
             decode(s.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL)),
       decode(bitand(t.flags, 131072), 131072, 'ENABLED', 'DISABLED'),
       decode(bitand(t.flags, 512), 0, 'NO', 'YES'),
       decode(bitand(t.flags, 256), 0, 'NO', 'YES'),
       decode(bitand(o.flags, 2), 0, NULL,
          decode(bitand(t.property, 8388608), 8388608,
                 'SYS$SESSION', 'SYS$TRANSACTION')),
       decode(bitand(t.flags, 1024), 1024, 'ENABLED', 'DISABLED'),
       decode(bitand(o.flags, 2), 2, 'NO',
           decode(bitand(t.property, 2147483648), 2147483648, 'NO',
              decode(ksppcv.ksppstvl, 'TRUE', 'YES', 'NO'))),
       decode(bitand(t.property, 1024), 0, null, cu.name),
       decode(bitand(t.flags, 8388608), 8388608, 'ENABLED', 'DISABLED'),
       decode(bitand(t.property, 32), 32, null,
                decode(bitand(s.spare1, 2048), 2048, 'ENABLED', 'DISABLED')),
       decode(bitand(o.flags, 128), 128, 'YES', 'NO')
from sys.user$ u, sys.ts$ ts, sys.seg$ s, sys.obj$ co, sys.tab$ t, sys.obj$ o,
     sys.coltype$ ac, sys.obj$ ty, sys.user$ tu, sys.col$ tc,
     sys.obj$ cx, sys.user$ cu, sys.obj$ so, sys.user$ su,
     x$ksppcv ksppcv, x$ksppi ksppi
where o.owner# = u.user#
  and o.obj# = t.obj#
  and bitand(t.property, 1) = 1
  and bitand(o.flags, 128) = 0
  and t.obj# = tc.obj#
  and tc.name = 'SYS_NC_ROWINFO$'
  and tc.obj# = ac.obj#
  and tc.intcol# = ac.intcol#
  and ac.toid = ty.oid$
  and ty.owner# = tu.user#
  and ty.type# <> 10
  and t.bobj# = co.obj# (+)
  and t.ts# = ts.ts#
  and t.file# = s.file# (+)
  and t.block# = s.block# (+)
  and t.ts# = s.ts# (+)
  and t.dataobj# = cx.obj# (+)
  and cx.owner# = cu.user# (+)
  and ac.synobj# = so.obj# (+)
  and so.owner# = su.user# (+)
  and ksppi.indx = ksppcv.indx
  and ksppi.ksppinm = '_dml_monitoring_enabled';

CREATE OR REPLACE FORCE VIEW "DBA_OBJ_AUDIT_OPTS"("OWNER","OBJECT_NAME","OBJECT_TYPE","ALT","AUD","COM","DEL","GRA","IND","INS","LOC","REN","SEL","UPD","REF","EXE","CRE","REA","WRI","FBK") AS 
select u.name, o.name, 'TABLE',
       substr(t.audit$, 1, 1) || '/' || substr(t.audit$, 2, 1),
       substr(t.audit$, 3, 1) || '/' || substr(t.audit$, 4, 1),
       substr(t.audit$, 5, 1) || '/' || substr(t.audit$, 6, 1),
       substr(t.audit$, 7, 1) || '/' || substr(t.audit$, 8, 1),
       substr(t.audit$, 9, 1) || '/' || substr(t.audit$, 10, 1),
       substr(t.audit$, 11, 1) || '/' || substr(t.audit$, 12, 1),
       substr(t.audit$, 13, 1) || '/' || substr(t.audit$, 14, 1),
       substr(t.audit$, 15, 1) || '/' || substr(t.audit$, 16, 1),
       substr(t.audit$, 17, 1) || '/' || substr(t.audit$, 18, 1),
       substr(t.audit$, 19, 1) || '/' || substr(t.audit$, 20, 1),
       substr(t.audit$, 21, 1) || '/' || substr(t.audit$, 22, 1),
       '-/-',                                            /* dummy REF column */
       substr(t.audit$, 25, 1) || '/' || substr(t.audit$, 26, 1),
       substr(t.audit$, 27, 1) || '/' || substr(t.audit$, 28, 1),
       substr(t.audit$, 29, 1) || '/' || substr(t.audit$, 30, 1),
       substr(t.audit$, 31, 1) || '/' || substr(t.audit$, 32, 1),
       substr(t.audit$, 23, 1) || '/' || substr(t.audit$, 24, 1)
from sys.obj$ o, sys.user$ u, sys.tab$ t
where o.type# = 2
  and not (o.owner# = 0 and o.name = '_default_auditing_options_')
  and o.owner# = u.user#
  and o.obj# = t.obj#
union all
select u.name, o.name, 'VIEW',
       substr(v.audit$, 1, 1) || '/' || substr(v.audit$, 2, 1),
       substr(v.audit$, 3, 1) || '/' || substr(v.audit$, 4, 1),
       substr(v.audit$, 5, 1) || '/' || substr(v.audit$, 6, 1),
       substr(v.audit$, 7, 1) || '/' || substr(v.audit$, 8, 1),
       substr(v.audit$, 9, 1) || '/' || substr(v.audit$, 10, 1),
       substr(v.audit$, 11, 1) || '/' || substr(v.audit$, 12, 1),
       substr(v.audit$, 13, 1) || '/' || substr(v.audit$, 14, 1),
       substr(v.audit$, 15, 1) || '/' || substr(v.audit$, 16, 1),
       substr(v.audit$, 17, 1) || '/' || substr(v.audit$, 18, 1),
       substr(v.audit$, 19, 1) || '/' || substr(v.audit$, 20, 1),
       substr(v.audit$, 21, 1) || '/' || substr(v.audit$, 22, 1),
       '-/-',                                            /* dummy REF column */
       substr(v.audit$, 25, 1) || '/' || substr(v.audit$, 26, 1),
       substr(v.audit$, 27, 1) || '/' || substr(v.audit$, 28, 1),
       substr(v.audit$, 29, 1) || '/' || substr(v.audit$, 30, 1),
       substr(v.audit$, 31, 1) || '/' || substr(v.audit$, 32, 1),
       substr(v.audit$, 23, 1) || '/' || substr(v.audit$, 24, 1)
from sys.obj$ o, sys.user$ u, sys.view$ v
where o.type# = 4
  and o.owner# = u.user#
  and o.obj# = v.obj#
union all
select u.name, o.name, 'SEQUENCE',
       substr(s.audit$, 1, 1) || '/' || substr(s.audit$, 2, 1),
       substr(s.audit$, 3, 1) || '/' || substr(s.audit$, 4, 1),
       substr(s.audit$, 5, 1) || '/' || substr(s.audit$, 6, 1),
       substr(s.audit$, 7, 1) || '/' || substr(s.audit$, 8, 1),
       substr(s.audit$, 9, 1) || '/' || substr(s.audit$, 10, 1),
       substr(s.audit$, 11, 1) || '/' || substr(s.audit$, 12, 1),
       substr(s.audit$, 13, 1) || '/' || substr(s.audit$, 14, 1),
       substr(s.audit$, 15, 1) || '/' || substr(s.audit$, 16, 1),
       substr(s.audit$, 17, 1) || '/' || substr(s.audit$, 18, 1),
       substr(s.audit$, 19, 1) || '/' || substr(s.audit$, 20, 1),
       substr(s.audit$, 21, 1) || '/' || substr(s.audit$, 22, 1),
       '-/-',                                            /* dummy REF column */
       substr(s.audit$, 25, 1) || '/' || substr(s.audit$, 26, 1),
       substr(s.audit$, 27, 1) || '/' || substr(s.audit$, 28, 1),
       substr(s.audit$, 29, 1) || '/' || substr(s.audit$, 30, 1),
       substr(s.audit$, 31, 1) || '/' || substr(s.audit$, 32, 1),
       substr(s.audit$, 23, 1) || '/' || substr(s.audit$, 24, 1)
from sys.obj$ o, sys.user$ u, sys.seq$ s
where o.type# = 6
  and o.owner# = u.user#
  and o.obj# = s.obj#
union all
select u.name, o.name, 'PROCEDURE',
       substr(p.audit$, 1, 1) || '/' || substr(p.audit$, 2, 1),
       substr(p.audit$, 3, 1) || '/' || substr(p.audit$, 4, 1),
       substr(p.audit$, 5, 1) || '/' || substr(p.audit$, 6, 1),
       substr(p.audit$, 7, 1) || '/' || substr(p.audit$, 8, 1),
       substr(p.audit$, 9, 1) || '/' || substr(p.audit$, 10, 1),
       substr(p.audit$, 11, 1) || '/' || substr(p.audit$, 12, 1),
       substr(p.audit$, 13, 1) || '/' || substr(p.audit$, 14, 1),
       substr(p.audit$, 15, 1) || '/' || substr(p.audit$, 16, 1),
       substr(p.audit$, 17, 1) || '/' || substr(p.audit$, 18, 1),
       substr(p.audit$, 19, 1) || '/' || substr(p.audit$, 20, 1),
       substr(p.audit$, 21, 1) || '/' || substr(p.audit$, 22, 1),
       '-/-',                                            /* dummy REF column */
       substr(p.audit$, 25, 1) || '/' || substr(p.audit$, 26, 1),
       substr(p.audit$, 27, 1) || '/' || substr(p.audit$, 28, 1),
       substr(p.audit$, 29, 1) || '/' || substr(p.audit$, 30, 1),
       substr(p.audit$, 31, 1) || '/' || substr(p.audit$, 32, 1),
       substr(p.audit$, 23, 1) || '/' || substr(p.audit$, 24, 1)
from sys.obj$ o, sys.user$ u, sys.library$ p
where o.type# = 22
  and o.owner# = u.user#
  and o.obj# = p.obj#
union all
select u.name, o.name, 'PROCEDURE',
       substr(p.audit$, 1, 1) || '/' || substr(p.audit$, 2, 1),
       substr(p.audit$, 3, 1) || '/' || substr(p.audit$, 4, 1),
       substr(p.audit$, 5, 1) || '/' || substr(p.audit$, 6, 1),
       substr(p.audit$, 7, 1) || '/' || substr(p.audit$, 8, 1),
       substr(p.audit$, 9, 1) || '/' || substr(p.audit$, 10, 1),
       substr(p.audit$, 11, 1) || '/' || substr(p.audit$, 12, 1),
       substr(p.audit$, 13, 1) || '/' || substr(p.audit$, 14, 1),
       substr(p.audit$, 15, 1) || '/' || substr(p.audit$, 16, 1),
       substr(p.audit$, 17, 1) || '/' || substr(p.audit$, 18, 1),
       substr(p.audit$, 19, 1) || '/' || substr(p.audit$, 20, 1),
       substr(p.audit$, 21, 1) || '/' || substr(p.audit$, 22, 1),
       '-/-',                                            /* dummy REF column */
       substr(p.audit$, 25, 1) || '/' || substr(p.audit$, 26, 1),
       substr(p.audit$, 27, 1) || '/' || substr(p.audit$, 28, 1),
       substr(p.audit$, 29, 1) || '/' || substr(p.audit$, 30, 1),
       substr(p.audit$, 31, 1) || '/' || substr(p.audit$, 32, 1),
       substr(p.audit$, 23, 1) || '/' || substr(p.audit$, 24, 1)
from sys.obj$ o, sys.user$ u, sys.procedure$ p
where o.type# >= 7 and o.type# <= 9
  and o.owner# = u.user#
  and o.obj# = p.obj#
union all
select u.name, o.name, 'TYPE',
       substr(t.audit$, 1, 1) || '/' || substr(t.audit$, 2, 1),
       substr(t.audit$, 3, 1) || '/' || substr(t.audit$, 4, 1),
       substr(t.audit$, 5, 1) || '/' || substr(t.audit$, 6, 1),
       substr(t.audit$, 7, 1) || '/' || substr(t.audit$, 8, 1),
       substr(t.audit$, 9, 1) || '/' || substr(t.audit$, 10, 1),
       substr(t.audit$, 11, 1) || '/' || substr(t.audit$, 12, 1),
       substr(t.audit$, 13, 1) || '/' || substr(t.audit$, 14, 1),
       substr(t.audit$, 15, 1) || '/' || substr(t.audit$, 16, 1),
       substr(t.audit$, 17, 1) || '/' || substr(t.audit$, 18, 1),
       substr(t.audit$, 19, 1) || '/' || substr(t.audit$, 20, 1),
       substr(t.audit$, 21, 1) || '/' || substr(t.audit$, 22, 1),
       '-/-',                                            /* dummy REF column */
       substr(t.audit$, 25, 1) || '/' || substr(t.audit$, 26, 1),
       substr(t.audit$, 27, 1) || '/' || substr(t.audit$, 28, 1),
       substr(t.audit$, 29, 1) || '/' || substr(t.audit$, 30, 1),
       substr(t.audit$, 31, 1) || '/' || substr(t.audit$, 32, 1),
       substr(t.audit$, 23, 1) || '/' || substr(t.audit$, 24, 1)
from sys.obj$ o, sys.user$ u, sys.type_misc$ t
where o.type# = 13
  and o.owner# = u.user#
  and o.obj# = t.obj#
union all
select u.name, o.name, 'DIRECTORY',
       substr(t.audit$, 1, 1) || '/' || substr(t.audit$, 2, 1),
       substr(t.audit$, 3, 1) || '/' || substr(t.audit$, 4, 1),
       substr(t.audit$, 5, 1) || '/' || substr(t.audit$, 6, 1),
       substr(t.audit$, 7, 1) || '/' || substr(t.audit$, 8, 1),
       substr(t.audit$, 9, 1) || '/' || substr(t.audit$, 10, 1),
       substr(t.audit$, 11, 1) || '/' || substr(t.audit$, 12, 1),
       substr(t.audit$, 13, 1) || '/' || substr(t.audit$, 14, 1),
       substr(t.audit$, 15, 1) || '/' || substr(t.audit$, 16, 1),
       substr(t.audit$, 17, 1) || '/' || substr(t.audit$, 18, 1),
       substr(t.audit$, 19, 1) || '/' || substr(t.audit$, 20, 1),
       substr(t.audit$, 21, 1) || '/' || substr(t.audit$, 22, 1),
       '-/-',                                            /* dummy REF column */
       substr(t.audit$, 25, 1) || '/' || substr(t.audit$, 26, 1),
       substr(t.audit$, 27, 1) || '/' || substr(t.audit$, 28, 1),
       substr(t.audit$, 29, 1) || '/' || substr(t.audit$, 30, 1),
       substr(t.audit$, 31, 1) || '/' || substr(t.audit$, 32, 1),
       substr(t.audit$, 23, 1) || '/' || substr(t.audit$, 24, 1)
from sys.obj$ o, sys.user$ u, sys.dir$ t
where o.type# = 23
  and o.owner# = u.user#
  and o.obj# = t.obj#;

CREATE OR REPLACE FORCE VIEW "DBA_OBJ_COLATTRS"("OWNER","TABLE_NAME","COLUMN_NAME","SUBSTITUTABLE") AS 
select u.name, o.name, c.name,
  lpad(decode(bitand(ct.flags, 512), 512, 'Y', 'N'), 15)
from sys.coltype$ ct, sys.obj$ o, sys.col$ c, sys.user$ u
where o.owner# = u.user#
  and bitand(ct.flags, 2) = 2                                 /* ADT column */
  and o.obj#=ct.obj#
  and o.obj#=c.obj#
  and c.intcol#=ct.intcol#
  and bitand(c.property,32768) != 32768                 /* not unused column */
  and not exists (select null                   /* Doesn't exist in attrcol$ */
                  from sys.attrcol$ ac
                  where ac.intcol#=ct.intcol#
                        and ac.obj#=ct.obj#)
union all
select u.name, o.name, ac.name,
  lpad(decode(bitand(ct.flags, 512), 512, 'Y', 'N'), 15)
from sys.coltype$ ct, sys.obj$ o, sys.attrcol$ ac, sys.user$ u, col$ c
where o.owner# = u.user#
  and bitand(ct.flags, 2) = 2                                 /* ADT column */
  and o.obj#=ct.obj#
  and o.obj#=c.obj#
  and o.obj#=ac.obj#
  and c.intcol#=ct.intcol#
  and c.intcol#=ac.intcol#
  and bitand(c.property,32768) != 32768                /* not unused column */;

CREATE OR REPLACE FORCE VIEW "DBA_OPANCILLARY"("OWNER","OPERATOR_NAME","BINDING#","PRIMOP_OWNER","PRIMOP_NAME","PRIMOP_BIND#") AS 
select distinct u.name, o.name, a.bind#, u1.name, o1.name, a1.primbind#
from   sys.user$ u, sys.obj$ o, sys.opancillary$ a, sys.user$ u1, sys.obj$ o1,
       sys.opancillary$ a1
where  a.obj#=o.obj# and o.owner#=u.user#  AND
       a1.primop#=o1.obj# and o1.owner#=u1.user# and a.obj#=a1.obj#;

CREATE OR REPLACE FORCE VIEW "DBA_OPARGUMENTS"("OWNER","OPERATOR_NAME","BINDING#","POSITION","ARGUMENT_TYPE") AS 
select  c.name, b.name, a.bind#, a.position, a.type
  from  sys.oparg$ a, sys.obj$ b, sys.user$ c
  where a.obj# = b.obj# and b.owner# = c.user#;

CREATE OR REPLACE FORCE VIEW "DBA_OPBINDINGS"("OWNER","OPERATOR_NAME","BINDING#","FUNCTION_NAME","RETURN_SCHEMA","RETURN_TYPE","IMPLEMENTATION_TYPE_SCHEMA","IMPLEMENTATION_TYPE","PROPERTY") AS 
select c.name, b.name, a.bind#, a.functionname, a.returnschema,
        a.returntype, a.impschema, a.imptype,
        decode(bitand(a.property,31), 1, 'WITH INDEX CONTEXT',
               3 , 'COMPUTE ANCILLARY DATA', 4 , 'ANCILLARY TO' ,
               16 , 'WITH COLUMN CONTEXT' ,
               17,  'WITH INDEX, COLUMN CONTEXT',
               19, 'COMPUTE ANCILLARY DATA, WITH COLUMN CONTEXT')
  from  sys.opbinding$ a, sys.obj$ b, sys.user$ c
  where a.obj# = b.obj# and b.owner# = c.user#;

CREATE OR REPLACE FORCE VIEW "DBA_OPERATORS"("OWNER","OPERATOR_NAME","NUMBER_OF_BINDS") AS 
select c.name, b.name, a.numbind from
  sys.operator$ a, sys.obj$ b, sys.user$ c where
  a.obj# = b.obj# and b.owner# = c.user#;

CREATE OR REPLACE FORCE VIEW "DBA_OPERATOR_COMMENTS"("OWNER","OPERATOR_NAME","COMMENTS") AS 
select u.name, o.name, c.comment$
from   sys.obj$ o, sys.operator$ op, sys.com$ c, sys.user$ u
where  o.obj# = op.obj# and c.obj# = op.obj# and u.user# = o.owner#;

CREATE OR REPLACE FORCE VIEW "DBA_OPTSTAT_OPERATIONS"("OPERATION","TARGET","START_TIME","END_TIME") AS 
select operation, target, start_time, end_time
  from sys.wri$_optstat_opr;

CREATE OR REPLACE FORCE VIEW "DBA_OUTLINES"("NAME","OWNER","CATEGORY","USED","TIMESTAMP","VERSION","SQL_TEXT","SIGNATURE","COMPATIBLE","ENABLED","FORMAT") AS 
select ol_name, creator, category,
  decode(bitand(flags, 1), 0, 'UNUSED', 1, 'USED'),
  timestamp, version, sql_text, signature,
  decode(bitand(flags, 2), 0, 'COMPATIBLE', 2, 'INCOMPATIBLE'),
  decode(bitand(flags, 4), 0, 'ENABLED', 4, 'DISABLED'),
  decode(bitand(flags, 8), 0, 'NORMAL', 8, 'LOCAL')
from outln.ol$;

CREATE OR REPLACE FORCE VIEW "DBA_OUTLINE_HINTS"("NAME","OWNER","NODE","STAGE","JOIN_POS","HINT") AS 
select o.ol_name, o.creator, h.node#, h.stage#, h.table_pos, h.hint_text
from outln.ol$ o, outln.ol$hints h
where o.ol_name = h.ol_name;

CREATE OR REPLACE FORCE VIEW "DBA_OUTSTANDING_ALERTS"("SEQUENCE_ID","REASON_ID","OWNER","OBJECT_NAME","SUBOBJECT_NAME","OBJECT_TYPE","REASON","TIME_SUGGESTED","CREATION_TIME","SUGGESTED_ACTION","ADVISOR_NAME","METRIC_VALUE","MESSAGE_TYPE","MESSAGE_GROUP","MESSAGE_LEVEL","HOSTING_CLIENT_ID","MODULE_ID","PROCESS_ID","HOST_ID","HOST_NW_ADDR","INSTANCE_NAME","INSTANCE_NUMBER","USER_ID","EXECUTION_CONTEXT_ID","ERROR_INSTANCE_ID") AS 
SELECT sequence_id,
            reason_id,
            owner,
            object_name,
            subobject_name,
            typnam_keltosd AS object_type,
            dbms_server_alert.expand_message(userenv('LANGUAGE'),
                                             mid_keltsd,
                                             reason_argument_1,
                                             reason_argument_2,
                                             reason_argument_3,
                                             reason_argument_4,
                                             reason_argument_5) AS reason,
            time_suggested,
            creation_time,
            dbms_server_alert.expand_message(userenv('LANGUAGE'),
                                             amid_keltsd,
                                             action_argument_1,
                                             action_argument_2,
                                             action_argument_3,
                                             action_argument_4,
                                             action_argument_5)
              AS suggested_action,
            advisor_name,
            metric_value,
            decode(message_level, 32, 'Notification', 'Warning')
              AS message_type,
            nam_keltgsd AS message_group,
            message_level,
            hosting_client_id,
            mdid_keltsd AS module_id,
            process_id,
            host_id,
            host_nw_addr,
            instance_name,
            instance_number,
            user_id,
            execution_context_id,
            error_instance_id
  FROM wri$_alert_outstanding, X$KELTSD, X$KELTOSD, X$KELTGSD,
       dba_advisor_definitions
  WHERE reason_id = rid_keltsd
    AND otyp_keltsd = typid_keltosd
    AND grp_keltsd = id_keltgsd
    AND aid_keltsd = advisor_id(+);

CREATE OR REPLACE FORCE VIEW "DBA_PARTIAL_DROP_TABS"("OWNER","TABLE_NAME") AS 
select u.name, o.name
from sys.user$ u, sys.obj$ o, sys.tab$ t
where t.obj# = o.obj#
      and bitand(t.flags,32768) = 32768
      and u.user# = o.owner#
      group by u.name, o.name;

CREATE OR REPLACE FORCE VIEW "DBA_PART_COL_STATISTICS"("OWNER","TABLE_NAME","PARTITION_NAME","COLUMN_NAME","NUM_DISTINCT","LOW_VALUE","HIGH_VALUE","DENSITY","NUM_NULLS","NUM_BUCKETS","SAMPLE_SIZE","LAST_ANALYZED","GLOBAL_STATS","USER_STATS","AVG_COL_LEN","HISTOGRAM") AS 
select u.name, o.name, o.subname, tp.cname, h.distcnt, h.lowval, h.hival,
       h.density, h.null_cnt,
       case when h.bucket_cnt > 255 then h.row_cnt else
         decode(h.row_cnt, h.distcnt, h.row_cnt, h.bucket_cnt)
       end,
       h.sample_size, h.timestamp#,
       decode(bitand(h.spare2, 2), 2, 'YES', 'NO'),
       decode(bitand(h.spare2, 1), 1, 'YES', 'NO'),
       h.avgcln,
       case when h.bucket_cnt > 255 then 'FREQUENCY' else
         decode(nvl(h.row_cnt, 0), 0, 'NONE',
                                   h.distcnt, 'FREQUENCY', 'HEIGHT BALANCED')
       end
from sys.obj$ o, sys.hist_head$ h, tp$ tp, user$ u
where o.obj# = tp.obj# and o.owner# = u.user#
  and tp.obj# = h.obj#(+) and tp.intcol# = h.intcol#(+)
  and o.type# = 19 /* TABLE PARTITION */;

CREATE OR REPLACE FORCE VIEW "DBA_PART_HISTOGRAMS"("OWNER","TABLE_NAME","PARTITION_NAME","COLUMN_NAME","BUCKET_NUMBER","ENDPOINT_VALUE","ENDPOINT_ACTUAL_VALUE") AS 
select u.name,
       o.name, o.subname,
       tp.cname,
       h.bucket,
       h.endpoint,
       h.epvalue
from sys.obj$ o, sys.histgrm$ h, sys.user$ u, tp$ tp
where o.obj# = tp.obj# and tp.obj# = h.obj#
  and tp.intcol# = h.intcol#
  and o.type# = 19 /* TABLE PARTITION */
  and o.owner# = u.user#
union
select u.name,
       o.name, o.subname,
       tp.cname,
       0,
       h.minimum,
       null
from sys.obj$ o, sys.hist_head$ h, sys.user$ u, tp$ tp
where o.obj# = tp.obj# and tp.obj# = h.obj#
  and tp.intcol# = h.intcol#
  and o.type# = 19 /* TABLE PARTITION */
  and h.bucket_cnt = 1
  and o.owner# = u.user#
union
select u.name,
       o.name, o.subname,
       tp.cname,
       1,
       h.maximum,
       null
from sys.obj$ o, sys.hist_head$ h, sys.user$ u, tp$ tp
where o.obj# = tp.obj# and tp.obj# = h.obj#
  and tp.intcol# = h.intcol#
  and o.type# = 19 /* TABLE PARTITION */
  and h.bucket_cnt = 1
  and o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "DBA_PART_INDEXES"("OWNER","INDEX_NAME","TABLE_NAME","PARTITIONING_TYPE","SUBPARTITIONING_TYPE","PARTITION_COUNT","DEF_SUBPARTITION_COUNT","PARTITIONING_KEY_COUNT","SUBPARTITIONING_KEY_COUNT","LOCALITY","ALIGNMENT","DEF_TABLESPACE_NAME","DEF_PCT_FREE","DEF_INI_TRANS","DEF_MAX_TRANS","DEF_INITIAL_EXTENT","DEF_NEXT_EXTENT","DEF_MIN_EXTENTS","DEF_MAX_EXTENTS","DEF_PCT_INCREASE","DEF_FREELISTS","DEF_FREELIST_GROUPS","DEF_LOGGING","DEF_BUFFER_POOL","DEF_PARAMETERS") AS 
select u.name, io.name, o.name,
       decode(po.parttype, 1, 'RANGE', 2, 'HASH', 3, 'SYSTEM', 4, 'LIST',
                                                                  'UNKNOWN'),
       decode(mod(po.spare2, 256), 0, 'NONE', 2, 'HASH', 3, 'SYSTEM',
                                      4, 'LIST', 'UNKNOWN'),
       po.partcnt, mod(trunc(po.spare2/65536), 65536), po.partkeycols,
       mod(trunc(po.spare2/256), 256), decode(bitand(po.flags, 1), 1, 'LOCAL',    'GLOBAL'),
       decode(po.partkeycols, 0, 'NONE', decode(bitand(po.flags,2), 2, 'PREFIXED', 'NON_PREFIXED')),
       ts.name, po.defpctfree, po.definitrans,
       po.defmaxtrans,
       decode(po.deftiniexts, NULL, 'DEFAULT', po.deftiniexts),
       decode(po.defextsize, NULL, 'DEFAULT', po.defextsize),
       decode(po.defminexts, NULL, 'DEFAULT', po.defminexts),
       decode(po.defmaxexts, NULL, 'DEFAULT', po.defmaxexts),
       decode(po.defextpct,  NULL, 'DEFAULT', po.defextpct),
       po.deflists, po.defgroups,
       decode(po.deflogging, 0, 'NONE', 1, 'YES', 2, 'NO', 'UNKNOWN'),
       decode(po.spare1, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL),
       po.parameters
from   sys.obj$ io, sys.obj$ o, sys.partobj$ po, sys.ts$ ts, sys.ind$ i,
       sys.user$ u
where  io.obj# = po.obj# and po.defts# = ts.ts# (+) and
       i.obj# = io.obj# and o.obj# = i.bo# and u.user# = io.owner#;

CREATE OR REPLACE FORCE VIEW "DBA_PART_KEY_COLUMNS"("OWNER","NAME","OBJECT_TYPE","COLUMN_NAME","COLUMN_POSITION") AS 
select u.name, o.name, 'TABLE',
  decode(bitand(c.property, 1), 1, a.name, c.name), pc.pos#
from partcol$ pc, obj$ o, col$ c, user$ u, attrcol$ a
where pc.obj# = o.obj# and pc.obj# = c.obj# and c.intcol# = pc.intcol# and
      u.user# = o.owner# and c.obj# = a.obj#(+) and c.intcol# = a.intcol#(+)
union
select u.name, io.name, 'INDEX',
  decode(bitand(c.property, 1), 1, a.name, c.name), pc.pos#
from partcol$ pc, obj$ io, col$ c, user$ u, ind$ i, attrcol$ a
where pc.obj# = i.obj# and i.obj# = io.obj# and i.bo# = c.obj# and
        c.intcol# = pc.intcol# and u.user# = io.owner#
        and c.obj# = a.obj#(+) and c.intcol# = a.intcol#(+);

CREATE OR REPLACE FORCE VIEW "DBA_PART_LOBS"("TABLE_OWNER","TABLE_NAME","COLUMN_NAME","LOB_NAME","LOB_INDEX_NAME","DEF_CHUNK","DEF_PCTVERSION","DEF_CACHE","DEF_IN_ROW","DEF_TABLESPACE_NAME","DEF_INITIAL_EXTENT","DEF_NEXT_EXTENT","DEF_MIN_EXTENTS","DEF_MAX_EXTENTS","DEF_PCT_INCREASE","DEF_FREELISTS","DEF_FREELIST_GROUPS","DEF_LOGGING","DEF_BUFFER_POOL") AS 
select u.name,
       o.name,
       decode(bitand(c.property, 1), 1, a.name, c.name),
       lo.name,
       io.name,
       plob.defchunk,
       plob.defpctver$,
       decode(bitand(plob.defflags, 27), 1, 'NO', 2, 'NO', 8, 'CACHEREADS',
                                         16, 'CACHEREADS', 'YES'),
       decode(plob.defpro, 0, 'NO', 'YES'),
       ts.name,
       decode(plob.definiexts, NULL, 'DEFAULT', plob.definiexts),
       decode(plob.defextsize, NULL, 'DEFAULT', plob.defextsize),
       decode(plob.defminexts, NULL, 'DEFAULT', plob.defminexts),
       decode(plob.defmaxexts, NULL, 'DEFAULT', plob.defmaxexts),
       decode(plob.defextpct,  NULL, 'DEFAULT', plob.defextpct),
       decode(plob.deflists,   NULL, 'DEFAULT', plob.deflists),
       decode(plob.defgroups,  NULL, 'DEFAULT', plob.defgroups),
       decode(bitand(plob.defflags,22), 0,'NONE', 4,'YES', 2,'NO',
                                        16,'NO', 'UNKNOWN'),
       decode(plob.defbufpool, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL)
from   sys.obj$ o, sys.col$ c, sys.lob$ l, sys.partlob$ plob,
       sys.obj$ lo, sys.obj$ io, sys.ts$ ts, sys.user$ u, attrcol$ a
where o.owner# = u.user#
  and o.obj# = c.obj#
  and c.obj# = l.obj#
  and c.intcol# = l.intcol#
  and l.lobj# = lo.obj#
  and l.ind# = io.obj#
  and l.lobj# = plob.lobj#
  and plob.defts# = ts.ts# (+)
  and bitand(c.property,32768) != 32768           /* not unused column */
  and c.obj# = a.obj#(+) and c.intcol# = a.intcol#(+);

CREATE OR REPLACE FORCE VIEW "DBA_PART_TABLES"("OWNER","TABLE_NAME","PARTITIONING_TYPE","SUBPARTITIONING_TYPE","PARTITION_COUNT","DEF_SUBPARTITION_COUNT","PARTITIONING_KEY_COUNT","SUBPARTITIONING_KEY_COUNT","DEF_TABLESPACE_NAME","DEF_PCT_FREE","DEF_PCT_USED","DEF_INI_TRANS","DEF_MAX_TRANS","DEF_INITIAL_EXTENT","DEF_NEXT_EXTENT","DEF_MIN_EXTENTS","DEF_MAX_EXTENTS","DEF_PCT_INCREASE","DEF_FREELISTS","DEF_FREELIST_GROUPS","DEF_LOGGING","DEF_COMPRESSION","DEF_BUFFER_POOL") AS 
select u.name, o.name,
       decode(po.parttype, 1, 'RANGE', 2, 'HASH', 3, 'SYSTEM', 4, 'LIST',
                                                                  'UNKNOWN'),
       decode(mod(po.spare2, 256), 0, 'NONE', 2, 'HASH', 3, 'SYSTEM',
                                      4, 'LIST', 'UNKNOWN'),
       po.partcnt, mod(trunc(po.spare2/65536), 65536), po.partkeycols,
       mod(trunc(po.spare2/256), 256),
       ts.name, po.defpctfree,
       decode(bitand(ts.flags, 32), 32,  to_number(NULL),po.defpctused),
       po.definitrans,
       po.defmaxtrans,
       decode(po.deftiniexts, NULL, 'DEFAULT', po.deftiniexts),
       decode(po.defextsize, NULL, 'DEFAULT', po.defextsize),
       decode(po.defminexts, NULL, 'DEFAULT', po.defminexts),
       decode(po.defmaxexts, NULL, 'DEFAULT', po.defmaxexts),
       decode(po.defextpct, NULL, 'DEFAULT', po.defextpct),
       decode(bitand(ts.flags, 32), 32,  to_number(NULL),po.deflists),
       decode(bitand(ts.flags, 32), 32, to_number(NULL), po.defgroups),
       decode(po.deflogging, 0, 'NONE', 1, 'YES', 2, 'NO', 'UNKNOWN'),
       decode(mod(trunc(po.spare2/4294967296),256), 0, 'NONE', 1, 'ENABLED',
                     2, 'DISABLED', 'UNKNOWN'),
       decode(po.spare1, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL)
from   sys.obj$ o, sys.partobj$ po, sys.ts$ ts, sys.tab$ t, sys.user$ u
where  o.obj# = po.obj# and po.defts# = ts.ts# and t.obj# = o.obj# and
       o.owner# = u.user# and
       bitand(t.property, 64 + 128) = 0
union all -- NON-IOT and IOT
select u.name, o.name,
       decode(po.parttype, 1, 'RANGE', 2, 'HASH', 3, 'SYSTEM', 4, 'LIST',
                                                                  'UNKNOWN'),
       decode(mod(po.spare2, 256), 0, 'NONE', 2, 'HASH', 3, 'SYSTEM',
                                     4, 'LIST', 'UNKNOWN'),
       po.partcnt, mod(trunc(po.spare2/65536), 65536), po.partkeycols,
       mod(trunc(po.spare2/256), 256),
       NULL, TO_NUMBER(NULL),TO_NUMBER(NULL),TO_NUMBER(NULL),TO_NUMBER(NULL),
       NULL,--decode(po.deftiniexts, NULL, 'DEFAULT', po.deftiniexts),
       NULL,--decode(po.defextsize, NULL, 'DEFAULT', po.defextsize),
       NULL,--decode(po.defminexts, NULL, 'DEFAULT', po.defminexts),
       NULL,--decode(po.defmaxexts, NULL, 'DEFAULT', po.defmaxexts),
       NULL,--decode(po.defextpct, NULL, 'DEFAULT', po.defextpct),
       TO_NUMBER(NULL),TO_NUMBER(NULL),--po.deflists, po.defgroups,
       decode(po.deflogging, 0, 'NONE', 1, 'YES', 2, 'NO', 'UNKNOWN'),
       'N/A',
       decode(po.spare1, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL)
from   sys.obj$ o, sys.partobj$ po, sys.tab$ t, sys.user$ u
where  o.obj# = po.obj# and t.obj# = o.obj# and
       o.owner# = u.user# and
       bitand(t.property, 64 + 128) != 0;

CREATE OR REPLACE FORCE VIEW "DBA_PENDING_CONV_TABLES"("OWNER","TABLE_NAME") AS 
select u.name, o.name
from sys.obj$ o, user$ u
  where o.type# = 2 and o.status = 5
  and bitand(o.flags, 4096) = 4096  /* type evolved flg */
  and o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "DBA_PENDING_TRANSACTIONS"("FORMATID","GLOBALID","BRANCHID") AS 
(((select formatid, globalid, branchid
   from   gv$global_transaction
   where  preparecount > 0 and refcount = preparecount)
 minus
  (select global_tran_fmt, global_foreign_id, branch_id
   from   sys.pending_trans$ tran, sys.pending_sessions$ sess
   where  tran.local_tran_id = sess.local_tran_id
     and  tran.state != 'collecting'
     and  dbms_utility.is_bit_set(tran.session_vector, sess.session_id)=1)
 )
 union
  (select global_tran_fmt, global_foreign_id, branch_id
   from   sys.pending_trans$ tran, sys.pending_sessions$ sess
   where  tran.local_tran_id = sess.local_tran_id
     and  tran.state != 'collecting'
     and  dbms_utility.is_bit_set(tran.session_vector, sess.session_id)=1)
);

CREATE OR REPLACE FORCE VIEW "DBA_PLSQL_OBJECT_SETTINGS"("OWNER","NAME","TYPE","PLSQL_OPTIMIZE_LEVEL","PLSQL_CODE_TYPE","PLSQL_DEBUG","PLSQL_WARNINGS","NLS_LENGTH_SEMANTICS") AS 
select u.name, o.name,
decode(o.type#, 7, 'PROCEDURE', 8, 'FUNCTION', 9, 'PACKAGE',
                11, 'PACKAGE BODY', 12, 'TRIGGER',
                13, 'TYPE', 14, 'TYPE BODY', 'UNDEFINED'),
(select to_number(value) from settings$ s
  where s.obj# = o.obj# and param = 'plsql_optimize_level'),
(select value from settings$ s
  where s.obj# = o.obj# and param = 'plsql_code_type'),
(select value from settings$ s
  where s.obj# = o.obj# and param = 'plsql_debug'),
(select value from settings$ s
  where s.obj# = o.obj# and param = 'plsql_warnings'),
(select value from settings$ s
  where s.obj# = o.obj# and param = 'nls_length_semantics')
from sys.obj$ o, sys.user$ u
where o.owner# = u.user#
  and o.type# in (7, 8, 9, 11, 12, 13, 14);

CREATE OR REPLACE FORCE VIEW "DBA_POLICIES"("OBJECT_OWNER","OBJECT_NAME","POLICY_GROUP","POLICY_NAME","PF_OWNER","PACKAGE","FUNCTION","SEL","INS","UPD","DEL","IDX","CHK_OPTION","ENABLE","STATIC_POLICY","POLICY_TYPE","LONG_PREDICATE") AS 
select u.name, o.name, r.gname, r.pname, r.pfschma, r.ppname, r.pfname,
       decode(bitand(r.stmt_type,1), 0, 'NO', 'YES'),
       decode(bitand(r.stmt_type,2), 0, 'NO', 'YES'),
       decode(bitand(r.stmt_type,4), 0, 'NO', 'YES'),
       decode(bitand(r.stmt_type,8), 0, 'NO', 'YES'),
       decode(bitand(r.stmt_type,2048), 0, 'NO', 'YES'),
       decode(r.check_opt, 0, 'NO', 'YES'),
       decode(r.enable_flag, 0, 'NO', 'YES'),
       decode(bitand(r.stmt_type,16), 0, 'NO', 'YES'),
       case bitand(r.stmt_type,16)+
            bitand(r.stmt_type,64)+
            bitand(r.stmt_type,128)+
            bitand(r.stmt_type,256)
         when 16 then 'STATIC'
         when 64 then 'SHARED_STATIC'
         when 128 then 'CONTEXT_SENSITIVE'
         when 256 then 'SHARED_CONTEXT_SENSITIVE'
         else 'DYNAMIC'
       end,
   decode(bitand(r.stmt_type,512), 0, 'YES', 'NO')
from user$ u, obj$ o, rls$ r
where u.user# = o.owner#
and r.obj# = o.obj#;

CREATE OR REPLACE FORCE VIEW "DBA_POLICY_CONTEXTS"("OBJECT_OWNER","OBJECT_NAME","NAMESPACE","ATTRIBUTE") AS 
select u.name, o.name, c.ns, c.attr
from user$ u, obj$ o, rls_ctx$ c
where u.user# = o.owner#
and c.obj# = o.obj#;

CREATE OR REPLACE FORCE VIEW "DBA_POLICY_GROUPS"("OBJECT_OWNER","OBJECT_NAME","POLICY_GROUP") AS 
select u.name, o.name, g.gname
from user$ u, obj$ o, rls_grp$ g
where u.user# = o.owner#
and g.obj# = o.obj#;

CREATE OR REPLACE FORCE VIEW "DBA_PRIV_AUDIT_OPTS"("USER_NAME","PROXY_NAME","PRIVILEGE","SUCCESS","FAILURE") AS 
select decode(aud.user#, 0 /* client operations through proxy */, 'ANY CLIENT',
                         1 /* System wide auditing*/, null,
                         client.name) /* USER_NAME */,
       proxy.name       /* PROXY_NAME */,
       prv.name         /* PRIVILEGE */,
       decode(aud.success, 1, 'BY SESSION', 2, 'BY ACCESS', 'NOT SET')
                        /* SUCCESS */,
       decode(aud.failure, 1, 'BY SESSION', 2, 'BY ACCESS', 'NOT SET')
                        /* FAILURE */
from sys.user$ client, sys.user$ proxy, system_privilege_map prv,
     sys.audit$ aud
where aud.option# = -prv.privilege
  and aud.user# = client.user#
  and aud.proxy# = proxy.user#(+);

CREATE OR REPLACE FORCE VIEW "DBA_PROCEDURES"("OWNER","OBJECT_NAME","PROCEDURE_NAME","AGGREGATE","PIPELINED","IMPLTYPEOWNER","IMPLTYPENAME","PARALLEL","INTERFACE","DETERMINISTIC","AUTHID") AS 
select u.name, o.name, pi.procedurename,
decode(bitand(pi.properties,8),8,'YES','NO'),
decode(bitand(pi.properties,16),16,'YES','NO'),
u2.name, o2.name,
  decode(bitand(pi.properties,32),32,'YES','NO'),
  decode(bitand(pi.properties,512),512,'YES','NO'),
decode(bitand(pi.properties,256),256,'YES','NO'),
decode(bitand(pi.properties,1024),1024,'CURRENT_USER','DEFINER')
from obj$ o, user$ u, procedureinfo$ pi, obj$ o2, user$ u2
where u.user# = o.owner# and o.obj# = pi.obj#
and pi.itypeobj# = o2.obj# (+) and o2.owner#  = u2.user# (+);

CREATE OR REPLACE FORCE VIEW "DBA_PROFILES"("PROFILE","RESOURCE_NAME","RESOURCE_TYPE","LIMIT") AS 
select
   n.name, m.name,
   decode(u.type#, 0, 'KERNEL', 1, 'PASSWORD', 'INVALID'),
   decode(u.limit#,
          0, 'DEFAULT',
          2147483647, decode(u.resource#,
                             4, decode(u.type#,
                                       1, 'NULL', 'UNLIMITED'),
                             'UNLIMITED'),
          decode(u.resource#,
                 4, decode(u.type#, 1, o.name, u.limit#),
                 decode(u.type#,
                        0, u.limit#,
                        decode(u.resource#,
                               1, trunc(u.limit#/86400, 4),
                               2, trunc(u.limit#/86400, 4),
                               5, trunc(u.limit#/86400, 4),
                               6, trunc(u.limit#/86400, 4),
                               u.limit#))))
  from sys.profile$ u, sys.profname$ n, sys.resource_map m, sys.obj$ o
  where u.resource# = m.resource#
  and u.type#=m.type#
  and o.obj# (+) = u.limit#
  and n.profile# = u.profile#;

CREATE OR REPLACE FORCE VIEW "DBA_PROPAGATION"("PROPAGATION_NAME","SOURCE_QUEUE_OWNER","SOURCE_QUEUE_NAME","DESTINATION_QUEUE_OWNER","DESTINATION_QUEUE_NAME","DESTINATION_DBLINK","RULE_SET_OWNER","RULE_SET_NAME","NEGATIVE_RULE_SET_OWNER","NEGATIVE_RULE_SET_NAME") AS 
SELECT p.propagation_name, p.source_queue_schema, p.source_queue,
       p.destination_queue_schema, p.destination_queue, p.destination_dblink,
       p.ruleset_schema, p.ruleset, p.negative_ruleset_schema,
       p.negative_ruleset
  FROM sys.streams$_propagation_process p;

CREATE OR REPLACE FORCE VIEW "DBA_PROXIES"("PROXY","CLIENT","AUTHENTICATION","AUTHORIZATION_CONSTRAINT","ROLE") AS 
select u1.name,
       u2.name,
       decode(p.credential_type#, 0, 'NO',
                                  5, 'YES'),
       decode(p.flags, 0, null,
                       1, 'PROXY MAY ACTIVATE ALL CLIENT ROLES',
                       2, 'NO CLIENT ROLES MAY BE ACTIVATED',
                       4, 'PROXY MAY ACTIVATE ROLE',
                       5, 'PROXY MAY ACTIVATE ALL CLIENT ROLES',
                       8, 'PROXY MAY NOT ACTIVATE ROLE'),
       (select u.name from sys.user$ u where pr.role# = u.user#)
from sys.user$ u1, sys.user$ u2,
     sys.proxy_info$ p, sys.proxy_role_info$ pr
where u1.user#  = p.proxy#
  and u2.user#  = p.client#
  and p.proxy#  = pr.proxy#(+)
  and p.client# = pr.client#(+);

CREATE OR REPLACE FORCE VIEW "DBA_PUBLISHED_COLUMNS"("CHANGE_SET_NAME","CHANGE_TABLE_SCHEMA","CHANGE_TABLE_NAME","PUB_ID","SOURCE_SCHEMA_NAME","SOURCE_TABLE_NAME","COLUMN_NAME","DATA_TYPE","DATA_LENGTH","DATA_PRECISION","DATA_SCALE","NULLABLE") AS 
SELECT
   s.change_set_name, s.change_table_schema, s.change_table_name, s.obj#,
   s.source_schema_name, s.source_table_name, c.column_name,
   c.data_type, c.data_length, c.data_precision, c.data_scale, c.nullable
  FROM sys.cdc_change_tables$ s, all_tables t, all_tab_columns c
  WHERE s.change_table_schema=t.owner AND
        s.change_table_name=t.table_name AND
        c.owner=s.change_table_schema AND
        c.table_name=s.change_table_name AND
        c.column_name NOT LIKE '%$';

CREATE OR REPLACE FORCE VIEW "DBA_QUEUES"("OWNER","NAME","QUEUE_TABLE","QID","QUEUE_TYPE","MAX_RETRIES","RETRY_DELAY","ENQUEUE_ENABLED","DEQUEUE_ENABLED","RETENTION","USER_COMMENT") AS 
select u.name OWNER, q.name NAME, t.name QUEUE_TABLE, q.eventid QID,
       decode(q.usage, 1, 'EXCEPTION_QUEUE', 2, 'NON_PERSISTENT_QUEUE',
              'NORMAL_QUEUE') QUEUE_TYPE,
       q.max_retries MAX_RETRIES, q.retry_delay RETRY_DELAY,
       decode(bitand(q.enable_flag, 1), 1 , '  YES  ', '  NO  ')ENQUEUE_ENABLED,
       decode(bitand(q.enable_flag, 2), 2 , '  YES  ', '  NO  ')DEQUEUE_ENABLED,
       decode(q.ret_time, -1, ' FOREVER', q.ret_time) RETENTION,
       substr(q.queue_comment, 1, 50) USER_COMMENT
from system.aq$_queues q, system.aq$_queue_tables t, sys.user$ u
where u.name  = t.schema
and   q.table_objno = t.objno;

CREATE OR REPLACE FORCE VIEW "DBA_QUEUE_PUBLISHERS"("QUEUE_OWNER","QUEUE_NAME","PUBLISHER_NAME","PUBLISHER_ADDRESS","PUBLISHER_PROTOCOL","PUBLISHER_RULE","PUBLISHER_RULE_NAME","PUBLISHER_RULESET","PUBLISHER_TRANSFORMATION") AS 
select t.schema QUEUE_OWNER, q.name QUEUE_NAME,
        p.p_name PUBLISHER_NAME, p.p_address PUBLISHER_ADDRESS,
        p.p_protocol PUBLISHER_PROTOCOL, p.p_rule PUBLISHER_RULE,
        p.p_rule_name PUBLISHER_RULE_NAME, p.p_ruleset PUBLISHER_RULESET,
        p.p_transformation PUBLISHER_TRANSFORMATION
from
 system.aq$_queue_tables t,  system.aq$_queues q,
 sys.aq$_publisher p, sys.user$ u
where
 q.table_objno = t.objno and q.eventid = p.queue_id
 and u.name  = t.schema;

CREATE OR REPLACE FORCE VIEW "DBA_QUEUE_SCHEDULES"("SCHEMA","QNAME","DESTINATION","START_DATE","START_TIME","PROPAGATION_WINDOW","NEXT_TIME","LATENCY","SCHEDULE_DISABLED","PROCESS_NAME","SESSION_ID","INSTANCE","LAST_RUN_DATE","LAST_RUN_TIME","CURRENT_START_DATE","CURRENT_START_TIME","NEXT_RUN_DATE","NEXT_RUN_TIME","TOTAL_TIME","TOTAL_NUMBER","TOTAL_BYTES","MAX_NUMBER","MAX_BYTES","AVG_NUMBER","AVG_SIZE","AVG_TIME","FAILURES","LAST_ERROR_DATE","LAST_ERROR_TIME","LAST_ERROR_MSG") AS 
select t.schema SCHEMA, q.name QNAME,
       s.destination DESTINATION, s.start_time START_DATE,
       substr(to_char(s.start_time,'HH24:MI:SS'),1,8) START_TIME,
       to_number(s.duration) PROPAGATION_WINDOW,
       s.next_time NEXT_TIME, to_number(s.latency) LATENCY,
       s.disabled SCHEDULE_DISABLED, s.process_name PROCESS_NAME,
       decode(s.sid, NULL, NULL,
         concat(to_char(s.sid), concat(', ',to_char(s.serial)))) SESSION_ID,
       s.instance INSTANCE, s.last_run LAST_RUN_DATE,
       substr(to_char(s.last_run,'HH24:MI:SS'),1,8) LAST_RUN_TIME,
       s.cur_start_time CURRENT_START_DATE,
       substr(to_char(s.cur_start_time,'HH24:MI:SS'),1,8) CURRENT_START_TIME,
       s.next_run NEXT_RUN_DATE,
       substr(to_char(s.next_run,'HH24:MI:SS'),1,8) NEXT_RUN_TIME,
       s.total_time TOTAL_TIME, s.total_msgs TOTAL_NUMBER,
       s.total_bytes TOTAL_BYTES,
       s.max_num_per_win MAX_NUMBER, s.max_size MAX_BYTES,
       s.total_msgs/decode(s.total_windows, 0, 1, s.total_windows) AVG_NUMBER,
       s.total_bytes/decode(s.total_msgs, 0, 1, s.total_msgs) AVG_SIZE,
       s.total_time/decode(s.total_msgs, 0, 1, s.total_msgs) AVG_TIME,
       s.failures FAILURES, s.error_time LAST_ERROR_DATE,
       substr(to_char(s.error_time,'HH24:MI:SS'),1,8) LAST_ERROR_TIME,
       s.last_error_msg LAST_ERROR_MSG
from system.aq$_queues q, system.aq$_queue_tables t,
     sys.aq$_schedules s
where s.oid  = q.oid
and   q.table_objno = t.objno;

CREATE OR REPLACE FORCE VIEW "DBA_QUEUE_TABLES"("OWNER","QUEUE_TABLE","TYPE","OBJECT_TYPE","SORT_ORDER","RECIPIENTS","MESSAGE_GROUPING","COMPATIBLE","PRIMARY_INSTANCE","SECONDARY_INSTANCE","OWNER_INSTANCE","USER_COMMENT","SECURE") AS 
select t.schema OWNER, t.name QUEUE_TABLE,
     decode(t.udata_type, 1 , 'OBJECT', 2, 'VARIANT', 3, 'RAW') TYPE,
     u.name || '.' || o.name OBJECT_TYPE,
     decode(t.sort_cols, 0, 'NONE', 1, 'PRIORITY', 2, 'ENQUEUE_TIME',
                               3, 'PRIORITY, ENQUEUE_TIME',
                               7, 'ENQUEUE_TIME, PRIORITY') SORT_ORDER,
     decode(bitand(t.flags, 1), 1, 'MULTIPLE', 0, 'SINGLE') RECIPIENTS,
     decode(bitand(t.flags, 2), 2, 'TRANSACTIONAL', 0, 'NONE')MESSAGE_GROUPING,
     decode(bitand(t.flags, 8), 8, '8.1.3', 0, '8.0.3')COMPATIBLE,
     aft.primary_instance PRIMARY_INSTANCE,
     aft.secondary_instance SECONDARY_INSTANCE,
     aft.owner_instance OWNER_INSTANCE,
     substr(t.table_comment, 1, 50) USER_COMMENT,
     decode(bitand(t.flags, 4096), 4096, 'YES', 0, 'NO') SECURE
from system.aq$_queue_tables t, sys.col$ c, sys.coltype$ ct, sys.obj$ o,
sys.user$ u, sys.aq$_queue_table_affinities aft
where c.intcol# = ct.intcol#
and c.obj# = ct.obj#
and c.name = 'USER_DATA'
and t.objno = c.obj#
and o.oid$ = ct.toid
and o.type# = 13
and o.owner# = u.user#
and t.objno = aft.table_objno
union
select t.schema OWNER, t.name QUEUE_TABLE,
     decode(t.udata_type, 1 , 'OBJECT', 2, 'VARIANT', 3, 'RAW') TYPE,
     null OBJECT_TYPE,
     decode(t.sort_cols, 0, 'NONE', 1, 'PRIORITY', 2, 'ENQUEUE_TIME',
                               3, 'PRIORITY, ENQUEUE_TIME',
                               7, 'ENQUEUE_TIME, PRIORITY') SORT_ORDER,
     decode(bitand(t.flags, 1), 1, 'MULTIPLE', 0, 'SINGLE') RECIPIENTS,
     decode(bitand(t.flags, 2), 2, 'TRANSACTIONAL', 0, 'NONE')MESSAGE_GROUPING,
     decode(bitand(t.flags, 8), 8, '8.1.3', 0, '8.0.3')COMPATIBLE,
     aft.primary_instance PRIMARY_INSTANCE,
     aft.secondary_instance SECONDARY_INSTANCE,
     aft.owner_instance OWNER_INSTANCE,
     substr(t.table_comment, 1, 50) USER_COMMENT,
     decode(bitand(t.flags, 4096), 4096, 'YES', 0, 'NO') SECURE
from system.aq$_queue_tables t, sys.aq$_queue_table_affinities aft
where (t.udata_type = 2
or t.udata_type = 3)
and t.objno = aft.table_objno;

CREATE OR REPLACE FORCE VIEW "DBA_RCHILD"("REFGROUP","OWNER","NAME","TYPE#") AS 
select REFGROUP, OWNER, NAME, TYPE# from rgchild$ r
   where r.instsite = 0;

CREATE OR REPLACE FORCE VIEW "DBA_RECYCLEBIN"("OWNER","OBJECT_NAME","ORIGINAL_NAME","OPERATION","TYPE","TS_NAME","CREATETIME","DROPTIME","DROPSCN","PARTITION_NAME","CAN_UNDROP","CAN_PURGE","RELATED","BASE_OBJECT","PURGE_OBJECT","SPACE") AS 
select u.name, o.name, r.original_name,
       decode(r.operation, 0, 'DROP', 1, 'TRUNCATE', 'UNDEFINED'),
       decode(r.type#, 1, 'TABLE', 2, 'INDEX', 3, 'INDEX',
                       4, 'NESTED TABLE', 5, 'LOB', 6, 'LOB INDEX',
                       7, 'DOMAIN INDEX', 8, 'IOT TOP INDEX',
                       9, 'IOT OVERFLOW SEGMENT', 10, 'IOT MAPPING TABLE',
                       11, 'TRIGGER', 12, 'CONSTRAINT', 13, 'Table Partition',
                       14, 'Table Composite Partition', 15, 'Index Partition',
                       16, 'Index Composite Partition', 17, 'LOB Partition',
                       18, 'LOB Composite Partition',
                       'UNDEFINED'),
       t.name,
       to_char(o.ctime, 'YYYY-MM-DD:HH24:MI:SS'),
       to_char(r.droptime, 'YYYY-MM-DD:HH24:MI:SS'),
       r.dropscn, r.partition_name,
       decode(bitand(r.flags, 4), 0, 'NO', 4, 'YES', 'NO'),
       decode(bitand(r.flags, 2), 0, 'NO', 2, 'YES', 'NO'),
       r.related, r.bo, r.purgeobj, r.space
from sys.obj$ o, sys.recyclebin$ r, sys.user$ u, sys.ts$ t
where o.obj# = r.obj#
  and r.owner# = u.user#
  and r.ts# = t.ts#(+);

CREATE OR REPLACE FORCE VIEW "DBA_REDEFINITION_ERRORS"("OBJECT_TYPE","OBJECT_OWNER","OBJECT_NAME","BASE_TABLE_OWNER","BASE_TABLE_NAME","DDL_TXT") AS 
select decode(obj_type, 1, 'TABLE',
                        2, 'INDEX',
                        3, 'CONSTRAINT',
                        4, 'TRIGGER',
                        'UNKNOWN'),
       obj_owner, obj_name, bt_owner, bt_name, ddl_txt
from sys.redef_dep_error$;

CREATE OR REPLACE FORCE VIEW "DBA_REDEFINITION_OBJECTS"("OBJECT_TYPE","OBJECT_OWNER","OBJECT_NAME","BASE_TABLE_OWNER","BASE_TABLE_NAME","INTERIM_OBJECT_OWNER","INTERIM_OBJECT_NAME") AS 
select decode(obj_type, 1, 'TABLE',
                        2, 'INDEX',
                        3, 'CONSTRAINT',
                        4, 'TRIGGER',
                        'UNKNOWN'),
       obj_owner, obj_name, bt_owner, bt_name, int_obj_owner, int_obj_name
from sys.redef_object$;

CREATE OR REPLACE FORCE VIEW "DBA_REFRESH"("ROWNER","RNAME","REFGROUP","IMPLICIT_DESTROY","PUSH_DEFERRED_RPC","REFRESH_AFTER_ERRORS","ROLLBACK_SEG","JOB","NEXT_DATE","INTERVAL","BROKEN","PURGE_OPTION","PARALLELISM","HEAP_SIZE") AS 
select r.owner ROWNER, r.name RNAME, r.REFGROUP,
          decode(bitand(r.flag,1),1,'Y',0,'N','?') IMPLICIT_DESTROY,
          decode(bitand(r.flag,2),2,'Y',0,'N','?') PUSH_DEFERRED_RPC,
          decode(bitand(r.flag,4),4,'Y',0,'N','?') REFRESH_AFTER_ERRORS,
          r.rollback_seg ROLLBACK_SEG,
          j.JOB, j.NEXT_DATE, j.INTERVAL# interval,
          decode(bitand(j.flag,1),1,'Y',0,'N','?') BROKEN,
          r.purge_opt#   PURGE_OPTION,
          r.parallelism# PARALLELISM,
          r.heap_size#   HEAP_SIZE
  from rgroup$ r, job$ j
  where r.instsite = 0
  and   r.job = j.job(+);

CREATE OR REPLACE FORCE VIEW "DBA_REFRESH_CHILDREN"("OWNER","NAME","TYPE","ROWNER","RNAME","REFGROUP","IMPLICIT_DESTROY","PUSH_DEFERRED_RPC","REFRESH_AFTER_ERRORS","ROLLBACK_SEG","JOB","NEXT_DATE","INTERVAL","BROKEN","PURGE_OPTION","PARALLELISM","HEAP_SIZE") AS 
select rc.owner OWNER, rc.name NAME, rc.TYPE# TYPE,
          r.owner ROWNER, r.name RNAME, r.REFGROUP,
          decode(bitand(r.flag,1),1,'Y',0,'N','?') IMPLICIT_DESTROY,
          decode(bitand(r.flag,2),2,'Y',0,'N','?') PUSH_DEFERRED_RPC,
          decode(bitand(r.flag,4),4,'Y',0,'N','?') REFRESH_AFTER_ERRORS,
          r.rollback_seg ROLLBACK_SEG,
          j.job, j.NEXT_DATE, j.INTERVAL# interval,
          decode(bitand(j.flag,1),1,'Y',0,'N','?') BROKEN,
          r.purge_opt#   PURGE_OPTION,
          r.parallelism# PARALLELISM,
          r.heap_size#   HEAP_SIZE
  from rgroup$ r, rgchild$ rc, job$ j
  where r.refgroup = rc.refgroup
    and r.instsite = 0
    and rc.instsite = 0
    and r.job = j.job (+);

CREATE OR REPLACE FORCE VIEW "DBA_REFS"("OWNER","TABLE_NAME","COLUMN_NAME","WITH_ROWID","IS_SCOPED","SCOPE_TABLE_OWNER","SCOPE_TABLE_NAME","OBJECT_ID_TYPE") AS 
select distinct u.name, o.name,
       decode(bitand(c.property, 1), 1, ac.name, c.name),
       decode(bitand(rc.reftyp, 2), 2, 'YES', 'NO'),
       decode(bitand(rc.reftyp, 1), 1, 'YES', 'NO'),
       su.name, so.name,
       case
         when bitand(reftyp,4) = 4 then 'USER-DEFINED'
         when bitand(reftyp, 8) = 8 then 'SYSTEM GENERATED AND USER-DEFINED'
         else 'SYSTEM GENERATED'
       end
from sys.obj$ o, sys.col$ c, sys.user$ u, sys.refcon$ rc, sys.obj$ so,
     sys.user$ su, sys.attrcol$ ac
where o.owner# = u.user#
  and o.obj# = c.obj#
  and c.obj# = rc.obj#
  and c.col# = rc.col#
  and c.intcol# = rc.intcol#
  and rc.stabid = so.oid$(+)
  and so.owner# = su.user#(+)
  and c.obj# = ac.obj#(+)
  and c.intcol# = ac.intcol#(+)
  and bitand(c.property,32768) != 32768           /* not unused column */;

CREATE OR REPLACE FORCE VIEW "DBA_REGISTERED_ARCHIVED_LOG"("CONSUMER_NAME","SOURCE_DATABASE","THREAD#","SEQUENCE#","FIRST_SCN","NEXT_SCN","FIRST_TIME","NEXT_TIME","NAME","MODIFIED_TIME","DICTIONARY_BEGIN","DICTIONARY_END") AS 
select cp.capture_name, cp.source_dbname,
       l.thread#, l.sequence#, l.first_change#,
       l.next_change#, l.first_time, l.next_time,
       l.file_name, l.timestamp,
       l.dict_begin, l.dict_end
  from system.logmnr_log$ l, sys.streams$_capture_process cp
  where l.session# = cp.logmnr_sid;

CREATE OR REPLACE FORCE VIEW "DBA_REGISTERED_MVIEWS"("OWNER","NAME","MVIEW_SITE","CAN_USE_LOG","UPDATABLE","REFRESH_METHOD","MVIEW_ID","VERSION","QUERY_TXT") AS 
select sowner, snapname, snapsite,
   decode(bitand(flag,1), 0 , 'NO', 'YES'),
   decode(bitand(flag,2), 0 , 'NO', 'YES'),
   decode(bitand(flag, 32),               32, 'PRIMARY KEY',
          decode(bitand(flag, 536870912), 536870912, 'OBJECT ID', 'ROWID')),
   snapshot_id,
   decode(rep_type, 1, 'ORACLE 7 MATERIALIZED VIEW',
                    2, 'ORACLE 8 MATERIALIZED VIEW',
                    3, 'REPAPI MATERIALIZED VIEW',
                       'UNKNOWN'),
   query_txt
from sys.reg_snap$;

CREATE OR REPLACE FORCE VIEW "DBA_REGISTERED_MVIEW_GROUPS"("NAME","MVIEW_SITE","GROUP_COMMENT","VERSION","FNAME","OWNER") AS 
select s.gname, s.dblink, s.group_comment,
          decode(s.rep_type, 1, 'ORACLE 7',
                             2, 'ORACLE 8',
                             3, 'REPAPI',
                                'UNKNOWN'),
          f.fname, s.gowner
from system.repcat$_snapgroup s, system.repcat$_flavors f
  WHERE s.gname     = f.gname (+)
    AND s.flavor_id = f.flavor_id (+)
    AND s.gowner    = f.gowner (+);

CREATE OR REPLACE FORCE VIEW "DBA_REGISTERED_SNAPSHOTS"("OWNER","NAME","SNAPSHOT_SITE","CAN_USE_LOG","UPDATABLE","REFRESH_METHOD","SNAPSHOT_ID","VERSION","QUERY_TXT") AS 
select sowner, snapname, snapsite,
   decode(bitand(flag,1), 0 , 'NO', 'YES'),
   decode(bitand(flag,2), 0 , 'NO', 'YES'),
   decode(bitand(flag, 32),               32, 'PRIMARY KEY',
          decode(bitand(flag, 536870912), 536870912, 'OBJECT ID', 'ROWID')),
   snapshot_id,
   decode(rep_type, 1, 'ORACLE 7 SNAPSHOT',
                    2, 'ORACLE 8 SNAPSHOT',
                    3, 'REPAPI SNAPSHOT',
                       'UNKNOWN'),
   query_txt
from sys.reg_snap$;

CREATE OR REPLACE FORCE VIEW "DBA_REGISTERED_SNAPSHOT_GROUPS"("NAME","SNAPSHOT_SITE","GROUP_COMMENT","VERSION","FNAME","OWNER") AS 
select s.gname, s.dblink, s.group_comment,
          decode(s.rep_type, 1, 'ORACLE 7',
                             2, 'ORACLE 8',
                             3, 'REPAPI',
                                'UNKNOWN'),
          f.fname, s.gowner
from system.repcat$_snapgroup s, system.repcat$_flavors f
  WHERE s.gname     = f.gname (+)
    AND s.flavor_id = f.flavor_id (+)
    AND s.gowner    = f.gowner (+);

CREATE OR REPLACE FORCE VIEW "DBA_REGISTRY"("COMP_ID","COMP_NAME","VERSION","STATUS","MODIFIED","NAMESPACE","CONTROL","SCHEMA","PROCEDURE","STARTUP","PARENT_ID") AS 
SELECT r.cid, r.cname, r.version,
       DECODE(r.status, 0, 'INVALID',
                        1, 'VALID',
                        2, 'LOADING',
                        3, 'LOADED',
                        4, 'UPGRADING',
                        5, 'UPGRADED',
                        6, 'DOWNGRADING',
                        7, 'DOWNGRADED',
                        8, 'REMOVING',
                        9, 'OPTION OFF',
                        10, 'NO SCRIPT',
                        99, 'REMOVED',
                        NULL),
       TO_CHAR(r.modified,'DD-MON-YYYY HH24:MI:SS'),
       r.namespace, i.name, s.name, r.vproc,
       DECODE(bitand(r.flags,1),1,'REQUIRED',NULL), r.pid
FROM registry$ r, user$ s, user$ i
WHERE r.schema# = s.user# AND r.invoker#=i.user#;

CREATE OR REPLACE FORCE VIEW "DBA_REGISTRY_HIERARCHY"("NAMESPACE","COMP_ID","VERSION","STATUS","MODIFIED") AS 
SELECT namespace, LPAD(' ',2*(LEVEL-1)) || LEVEL || ' ' || cid, version,
       DECODE(status, 0, 'INVALID',
                      1, 'VALID',
                      2, 'LOADING',
                      3, 'LOADED',
                      4, 'UPGRADING',
                      5, 'UPGRADED',
                      6, 'DOWNGRADING',
                      7, 'DOWNGRADED',
                      8, 'REMOVING',
                      9, 'OPTION OFF',
                      10, 'NO SCRIPT',
                      99, 'REMOVED',
                      NULL),
       TO_CHAR(modified,'DD-MON-YYYY HH24:MI:SS')
FROM registry$
START WITH pid IS NULL
CONNECT BY PRIOR cid = pid and PRIOR namespace = namespace;

CREATE OR REPLACE FORCE VIEW "DBA_REPAUDIT_ATTRIBUTE"("ATTRIBUTE","DATA_TYPE","DATA_LENGTH","SOURCE") AS 
select
    attribute,
    decode(data_type_id,
           1, 'NUMBER',
           2, 'VARCHAR2',
           3, 'DATE',
           4, 'CHAR',
           5, 'RAW',
           6, 'NVARCHAR2',
           7, 'NCHAR',
           'UNDEFINED'),
    data_length,
    source
from  system.repcat$_audit_attribute;

CREATE OR REPLACE FORCE VIEW "DBA_REPAUDIT_COLUMN"("SNAME","ONAME","COLUMN_NAME","BASE_SNAME","BASE_ONAME","BASE_CONFLICT_TYPE","BASE_REFERENCE_NAME","ATTRIBUTE") AS 
select
    sname,
    oname,
    column_name,
    base_sname,
    base_oname,
    decode(base_conflict_type_id,
           1, 'UPDATE',
           2, 'UNIQUENESS',
           3, 'DELETE',
           'UNDEFINED'),
    base_reference_name,
    attribute
from  system.repcat$_audit_column;

CREATE OR REPLACE FORCE VIEW "DBA_REPCAT"("SNAME","MASTER","STATUS","SCHEMA_COMMENT","GNAME","FNAME","RPC_PROCESSING_DISABLED","OWNER") AS 
select "SNAME","MASTER","STATUS","SCHEMA_COMMENT","GNAME","FNAME","RPC_PROCESSING_DISABLED","OWNER" from DBA_REPGROUP;

CREATE OR REPLACE FORCE VIEW "DBA_REPCATLOG"("ID","SOURCE","STATUS","USERID","TIMESTAMP","ROLE","MASTER","SNAME","REQUEST","ONAME","TYPE","MESSAGE","ERRNUM","GNAME") AS 
select r.id, r.source, r.status, r.userid, r.timestamp, r.role, r.master,
  r.sname, r.request, r.oname, r.type, r.message, r.errnum, r.gname
from repcat_repcatlog r;

CREATE OR REPLACE FORCE VIEW "DBA_REPCAT_EXCEPTIONS"("EXCEPTION_ID","USER_NAME","REQUEST","JOB","ERROR_DATE","ERROR_NUMBER","ERROR_MESSAGE","LINE_NUMBER") AS 
select re.exception_id, re.user_name, re.request, re.job,
  re.error_date,re.error_number,re.error_message,re.line_number
from system.repcat$_exceptions re;

CREATE OR REPLACE FORCE VIEW "DBA_REPCAT_REFRESH_TEMPLATES"("REFRESH_TEMPLATE_NAME","OWNER","REFRESH_GROUP_NAME","TEMPLATE_COMMENT","PUBLIC_TEMPLATE") AS 
select refresh_template_name,owner,refresh_group_name,template_comment,
 nvl(public_template,'N') public_template
from system.repcat$_refresh_templates t,
  system.repcat$_template_types tt
where tt.template_type_id = t.template_type_id
and bitand(rawtohex(tt.flags),1) = 1;

CREATE OR REPLACE FORCE VIEW "DBA_REPCAT_TEMPLATE_OBJECTS"("REFRESH_TEMPLATE_NAME","OBJECT_NAME","OBJECT_TYPE","DDL_NUM","DDL_TEXT","MASTER_ROLLBACK_SEGMENT","DERIVED_FROM_SNAME","DERIVED_FROM_ONAME","FLAVOR_ID") AS 
select rt.refresh_template_name,
t.object_name, ot.object_type_name object_type,
t.ddl_num,t.ddl_text,t.master_rollback_seg,
t.derived_from_sname,t.derived_from_oname,t.flavor_id
from system.repcat$_refresh_templates rt,
  system.repcat$_template_objects t,
  system.repcat$_object_types ot,
  system.repcat$_template_types tt
where t.refresh_template_id = rt.refresh_template_id
and ot.object_type_id = t.object_type
and rt.template_type_id = tt.template_type_id
and bitand(rawtohex(tt.flags),1) = 1;

CREATE OR REPLACE FORCE VIEW "DBA_REPCAT_TEMPLATE_PARMS"("REFRESH_TEMPLATE_NAME","OWNER","REFRESH_GROUP_NAME","TEMPLATE_COMMENT","PUBLIC_TEMPLATE","PARAMETER_NAME","DEFAULT_PARM_VALUE","PROMPT_STRING","USER_OVERRIDE") AS 
select rt.refresh_template_name,rt.owner,
  rt.refresh_group_name,rt.template_comment,
  nvl(rt.public_template,'N'),tp.parameter_name,
  tp.default_parm_value, tp.prompt_string, tp.user_override
from system.repcat$_refresh_templates rt,
  system.repcat$_template_parms tp,
  system.repcat$_template_types tt
where tp.refresh_template_id = rt.refresh_template_id
and rt.template_type_id = tt.template_type_id
and bitand(rawtohex(tt.flags),1) = 1;

CREATE OR REPLACE FORCE VIEW "DBA_REPCAT_TEMPLATE_SITES"("REFRESH_TEMPLATE_NAME","REFRESH_GROUP_NAME","TEMPLATE_OWNER","USER_NAME","SITE_NAME","REPAPI_SITE_NAME","STATUS","INSTANTIATION_DATE") AS 
select ts.refresh_template_name, ts.refresh_group_name, ts.template_owner,
  ts.user_name,ts.site_name,ss.site_name,
  decode(status,-1,'DELETED',0,'INSTALLING',1,'INSTALLED','UNDEFINED'),
  instantiation_date
from system.repcat$_template_sites ts,
  sys.snap_site$ ss
where ts.status != -100
and ts.repapi_site_id = ss.site_id (+);

CREATE OR REPLACE FORCE VIEW "DBA_REPCAT_USER_AUTHORIZATIONS"("REFRESH_TEMPLATE_NAME","OWNER","REFRESH_GROUP_NAME","TEMPLATE_COMMENT","PUBLIC_TEMPLATE","USER_NAME") AS 
select rt.refresh_template_name,rt.owner,rt.refresh_group_name,
rt.template_comment, nvl(rt.public_template,'N'),
u.username
from system.repcat$_refresh_templates rt,
all_users u,
system.repcat$_user_authorizations ra,
system.repcat$_template_types tt
where u.user_id = ra.user_id
and ra.refresh_template_id = rt.refresh_template_id
and tt.template_type_id = rt.template_type_id
and bitand(rawtohex(tt.flags),1) = 1;

CREATE OR REPLACE FORCE VIEW "DBA_REPCAT_USER_PARM_VALUES"("REFRESH_TEMPLATE_NAME","OWNER","REFRESH_GROUP_NAME","TEMPLATE_COMMENT","PUBLIC_TEMPLATE","PARAMETER_NAME","DEFAULT_PARM_VALUE","PROMPT_STRING","PARM_VALUE","USER_NAME") AS 
select rt.refresh_template_name,rt.owner,
  rt.refresh_group_name,rt.template_comment,
  nvl(rt.public_template,'N'),tp.parameter_name,
  tp.default_parm_value, tp.prompt_string, sp.parm_value,
  u.username
from system.repcat$_refresh_templates rt,
  system.repcat$_template_parms tp,
  system.repcat$_user_parm_values sp,
  dba_users  u,
  system.repcat$_template_types tt
where tp.refresh_template_id = rt.refresh_template_id
and tp.template_parameter_id = sp.template_parameter_id
and sp.user_id = u.user_id
and rt.template_type_id = tt.template_type_id
and bitand(rawtohex(tt.flags),1) = 1;

CREATE OR REPLACE FORCE VIEW "DBA_REPCOLUMN"("SNAME","ONAME","TYPE","CNAME","ID","POS","COMPARE_OLD_ON_DELETE","COMPARE_OLD_ON_UPDATE","SEND_OLD_ON_DELETE","SEND_OLD_ON_UPDATE","CTYPE","CTYPE_TOID","CTYPE_OWNER","CTYPE_HASHCODE","CTYPE_MOD","DATA_LENGTH","DATA_PRECISION","DATA_SCALE","NULLABLE","CHARACTER_SET_NAME","TOP","CHAR_LENGTH","CHAR_USED") AS 
select sname, oname, type, cname, id, nvl(pos, lpos), compare_old_on_delete,
          compare_old_on_update, send_old_on_delete, send_old_on_update,
          ctype, ctype_toid, ctype_owner, ctype_hashcode, ctype_mod,
          data_length, data_precision, data_scale, nullable,
          character_set_name, top, char_length, char_used
from repcat_repcolumn_base;

CREATE OR REPLACE FORCE VIEW "DBA_REPCOLUMN_GROUP"("SNAME","ONAME","GROUP_NAME","GROUP_COMMENT") AS 
select
    sname,
    oname,
    group_name,
    group_comment
from  system.repcat$_column_group;

CREATE OR REPLACE FORCE VIEW "DBA_REPCONFLICT"("SNAME","ONAME","CONFLICT_TYPE","REFERENCE_NAME") AS 
select
    sname,
    oname,
    decode(conflict_type_id,
           1, 'UPDATE',
           2, 'UNIQUENESS',
           3, 'DELETE',
           'UNDEFINED'),
    reference_name
from  system.repcat$_conflict;

CREATE OR REPLACE FORCE VIEW "DBA_REPDDL"("LOG_ID","SOURCE","ROLE","MASTER","LINE","TEXT","DDL_NUM") AS 
select r.log_id, r.source, r.role, r.master, r.line, r.text, r.ddl_num
from system.repcat$_ddl r;

CREATE OR REPLACE FORCE VIEW "DBA_REPEXTENSIONS"("EXTENSION_ID","REQUEST","MASTERDEF","EXPORT_REQUIRED","REPCATLOG_ID","EXTENSION_STATUS","FLASHBACK_SCN","BREAK_TRANS_TO_MASTERDEF","BREAK_TRANS_TO_NEW_MASTERS","PERCENTAGE_FOR_CATCHUP_MDEF","CYCLE_SECONDS_MDEF","PERCENTAGE_FOR_CATCHUP_NEW","CYCLE_SECONDS_NEW") AS 
select
  r.extension_id,
  DECODE(r.extension_code,
         0, 'ADD_NEW_MASTERS') request,
  r.masterdef,
  DECODE(export_required, 'Y', 'YES', 'N', 'NO') export_required,
  r.repcatlog_id,
  DECODE(r.extension_status,
         0, 'READY',
         1, 'STOPPING',
         2, 'EXPORTING',
         3, 'INSTANTIATING',
         4, 'ERROR') extension_status,
  r.flashback_scn,
  DECODE(r.push_to_mdef, 'Y', 'YES', 'N', 'NO') break_trans_to_masterdef,
  DECODE(r.push_to_new, 'Y', 'YES', 'N', 'NO') break_trans_to_new_masters,
  r.percentage_for_catchup_mdef,
  r.cycle_seconds_mdef,
  r.percentage_for_catchup_new,
  r.cycle_seconds_new
from system.repcat$_extension r;

CREATE OR REPLACE FORCE VIEW "DBA_REPFLAVORS"("FLAVOR_ID","GNAME","FNAME","CREATION_DATE","CREATED_BY","PUBLISHED","GROUP_OWNER") AS 
select f.flavor_id, f.gname, f.fname, f.creation_date, u.name, f.published,
       f.gowner
from system.repcat$_flavors f, user$ u
where f.created_by = u.user# (+);

CREATE OR REPLACE FORCE VIEW "DBA_REPFLAVOR_COLUMNS"("FNAME","GNAME","SNAME","ONAME","CNAME","TYPE","POS","GROUP_OWNER","TYPE_TOID","TYPE_OWNER","TYPE_HASHCODE","TYPE_MOD","TOP") AS 
SELECT fname, gname, sname, oname, cname, type, pos, group_owner,
   type_toid, type_owner, type_hashcode, type_mod, top
  FROM repcat_repflavor_columns;

CREATE OR REPLACE FORCE VIEW "DBA_REPFLAVOR_OBJECTS"("FNAME","GNAME","SNAME","ONAME","TYPE","GROUP_OWNER") AS 
SELECT fl.fname, fo.gname, fo.sname, fo.oname,
       DECODE (fo.type,
        -1, 'SNAPSHOT',
         1, 'INDEX',
         2, 'TABLE',
         4, 'VIEW',
         5, 'SYNONYM',
         6, 'SEQUENCE',
         7, 'PROCEDURE',
         8, 'FUNCTION',
         9, 'PACKAGE',
        11, 'PACKAGE BODY',
        12, 'TRIGGER',
        13, 'TYPE',
        14, 'TYPE BODY',
        32, 'INDEXTYPE',
        33, 'OPERATOR',
            'UNDEFINED'),
        fo.gowner
from system.repcat$_flavors fl, system.repcat$_flavor_objects fo
where fo.gname     = fl.gname
  and fo.flavor_id = fl.flavor_id
  and fo.gowner    = fl.gowner;

CREATE OR REPLACE FORCE VIEW "DBA_REPGENERATED"("SNAME","ONAME","TYPE","BASE_SNAME","BASE_ONAME","BASE_TYPE","PACKAGE_PREFIX","PROCEDURE_PREFIX","DISTRIBUTED","REASON") AS 
select r.sname, r.oname, r.type, r.base_sname, r.base_oname, r.base_type,
  r.package_prefix, r.procedure_prefix, r.distributed, r.reason
from repcat_generated r
where ((r.reason  = 'PROCEDURAL REPLICATION WRAPPER' and r.type != 'SYNONYM')
     or r.reason != 'PROCEDURAL REPLICATION WRAPPER');

CREATE OR REPLACE FORCE VIEW "DBA_REPGENOBJECTS"("SNAME","ONAME","TYPE","BASE_SNAME","BASE_ONAME","BASE_TYPE","PACKAGE_PREFIX","PROCEDURE_PREFIX","DISTRIBUTED","REASON") AS 
select r.sname, r.oname, r.type, r.base_sname, r.base_oname, r.base_type,
  r.package_prefix, r.procedure_prefix, r.distributed, r.reason
from repcat_generated r;

CREATE OR REPLACE FORCE VIEW "DBA_REPGROUP"("SNAME","MASTER","STATUS","SCHEMA_COMMENT","GNAME","FNAME","RPC_PROCESSING_DISABLED","OWNER") AS 
select r.sname, r.master, r.status, r.schema_comment, r.sname, r.fname,
       r.rpc_processing_disabled, r.gowner
from repcat_repcat r;

CREATE OR REPLACE FORCE VIEW "DBA_REPGROUPED_COLUMN"("SNAME","ONAME","GROUP_NAME","COLUMN_NAME") AS 
select distinct
    gc.sname,
    gc.oname,
    gc.group_name,
    gc.column_name
from  system.repcat$_grouped_column gc;

CREATE OR REPLACE FORCE VIEW "DBA_REPGROUP_PRIVILEGES"("USERNAME","GNAME","CREATED","RECEIVER","PROXY_SNAPADMIN","OWNER") AS 
select u.username, rp.gname, rp.created,
       decode(bitand(rp.privilege, 1), 1, 'Y', 'N'),
       decode(bitand(rp.privilege, 2), 2, 'Y', 'N'),
       rp.gowner
from system.repcat$_repgroup_privs rp, dba_users u
where rp.username = u.username;

CREATE OR REPLACE FORCE VIEW "DBA_REPKEY_COLUMNS"("SNAME","ONAME","COL") AS 
select rk.sname, rk.oname, rc.lcname
from system.repcat$_key_columns rk, system.repcat$_repcolumn rc
where rk.sname   = rc.sname
  and rk.oname   = rc.oname
  and rk.col     = rc.cname  -- SYS column name;

CREATE OR REPLACE FORCE VIEW "DBA_REPOBJECT"("SNAME","ONAME","TYPE","STATUS","GENERATION_STATUS","ID","OBJECT_COMMENT","GNAME","MIN_COMMUNICATION","REPLICATION_TRIGGER_EXISTS","INTERNAL_PACKAGE_EXISTS","GROUP_OWNER","NESTED_TABLE") AS 
select r.sname, r.oname, r.type, r.status, r.generation_status, r.id,
       r.object_comment, r.gname, r.min_communication,
       r.trigflag replication_trigger_exists, r.internal_package_exists,
       r.gowner, r.nested_table
from repcat_repobject r
where r.type != 'INTERNAL PACKAGE';

CREATE OR REPLACE FORCE VIEW "DBA_REPPARAMETER_COLUMN"("SNAME","ONAME","CONFLICT_TYPE","REFERENCE_NAME","SEQUENCE_NO","METHOD_NAME","FUNCTION_NAME","PRIORITY_GROUP","PARAMETER_TABLE_NAME","PARAMETER_COLUMN_NAME","PARAMETER_SEQUENCE_NO") AS 
select
    p.sname,
    p.oname,
    decode(p.conflict_type_id,
           1, 'UPDATE',
           2, 'UNIQUENESS',
           3, 'DELETE',
           'UNDEFINED'),
    p.reference_name,
    p.sequence_no,
    r.method_name,
    r.function_name,
    r.priority_group,
    p.parameter_table_name,
    decode(method_name, 'USER FUNCTION', NVL(rc.top, rc.lcname),
                        'USER FLAVOR FUNCTION', NVL(rc.top, rc.lcname),
           rc.lcname),
    p.parameter_sequence_no
from  system.repcat$_parameter_column p,
      system.repcat$_resolution r,
      system.repcat$_repcolumn rc
where p.sname = r.sname
and   p.oname = r.oname
and   p.conflict_type_id = r.conflict_type_id
and   p.reference_name = r.reference_name
and   p.sequence_no = r.sequence_no
and   p.oname = p.parameter_table_name
and   p.attribute_sequence_no = 1
and   p.sname = rc.sname
and   p.oname = rc.oname
and   p.column_pos = rc.pos;

CREATE OR REPLACE FORCE VIEW "DBA_REPPRIORITY"("SNAME","PRIORITY_GROUP","PRIORITY","DATA_TYPE","FIXED_DATA_LENGTH","CHAR_VALUE","VARCHAR2_VALUE","NUMBER_VALUE","DATE_VALUE","RAW_VALUE","GNAME","NCHAR_VALUE","NVARCHAR2_VALUE","LARGE_CHAR_VALUE") AS 
select
    p.sname,
    p.priority_group,
    v.priority,
    decode(p.data_type_id,
           1, 'NUMBER',
           2, 'VARCHAR2',
           3, 'DATE',
           4, 'CHAR',
           5, 'RAW',
           6, 'NVARCHAR2',
           7, 'NCHAR',
           'UNDEFINED'),
    p.fixed_data_length,
    v.char_value,
    v.varchar2_value,
    v.number_value,
    v.date_value,
    v.raw_value,
    p.sname,
    v.nchar_value,
    v.nvarchar2_value,
    v.large_char_value
from  system.repcat$_priority v,
      system.repcat$_priority_group p
where v.sname = p.sname
and   v.priority_group = p.priority_group;

CREATE OR REPLACE FORCE VIEW "DBA_REPPRIORITY_GROUP"("SNAME","PRIORITY_GROUP","DATA_TYPE","FIXED_DATA_LENGTH","PRIORITY_COMMENT","GNAME") AS 
select
    sname,
    priority_group,
    decode(data_type_id,
           1, 'NUMBER',
           2, 'VARCHAR2',
           3, 'DATE',
           4, 'CHAR',
           5, 'RAW',
           6, 'NVARCHAR2',
           7, 'NCHAR',
           'UNDEFINED'),
    fixed_data_length,
    priority_comment,
    sname
from  system.repcat$_priority_group;

CREATE OR REPLACE FORCE VIEW "DBA_REPPROP"("SNAME","ONAME","TYPE","DBLINK","HOW","PROPAGATE_COMMENT") AS 
select r.sname, r.oname, r.type, r.dblink, r.how, r.propagate_comment
from repcat_repprop r, repcat_repobject ro
where r.sname = ro.sname
  and r.oname = ro.oname
  and r.type = ro.type
  and ro.type in ('PROCEDURE', 'PACKAGE', 'PACKAGE BODY', 'TABLE', 'SNAPSHOT');

CREATE OR REPLACE FORCE VIEW "DBA_REPRESOLUTION"("SNAME","ONAME","CONFLICT_TYPE","REFERENCE_NAME","SEQUENCE_NO","METHOD_NAME","FUNCTION_NAME","PRIORITY_GROUP","RESOLUTION_COMMENT") AS 
select
    sname,
    oname,
    decode(conflict_type_id,
           1, 'UPDATE',
           2, 'UNIQUENESS',
           3, 'DELETE',
           'UNDEFINED'),
    reference_name,
    sequence_no,
    method_name,
    function_name,
    priority_group,
    resolution_comment
from  system.repcat$_resolution;

CREATE OR REPLACE FORCE VIEW "DBA_REPRESOLUTION_METHOD"("CONFLICT_TYPE","METHOD_NAME") AS 
select
    decode(conflict_type_id,
           1, 'UPDATE',
           2, 'UNIQUENESS',
           3, 'DELETE',
           'UNDEFINED'),
    method_name
from  system.repcat$_resolution_method;

CREATE OR REPLACE FORCE VIEW "DBA_REPRESOLUTION_STATISTICS"("SNAME","ONAME","CONFLICT_TYPE","REFERENCE_NAME","METHOD_NAME","FUNCTION_NAME","PRIORITY_GROUP","RESOLVED_DATE","PRIMARY_KEY_VALUE") AS 
select
    sname,
    oname,
    decode(conflict_type_id,
           1, 'UPDATE',
           2, 'UNIQUENESS',
           3, 'DELETE',
           'UNDEFINED'),
    reference_name,
    method_name,
    decode(method_name,
           'USER FUNCTION', function_name,
           'USER FLAVOR FUNCTION', function_name,
           NULL),
    priority_group,
    resolved_date,
    primary_key_value
from  system.repcat$_resolution_statistics;

CREATE OR REPLACE FORCE VIEW "DBA_REPRESOL_STATS_CONTROL"("SNAME","ONAME","CREATED","STATUS","STATUS_UPDATE_DATE","PURGED_DATE","LAST_PURGE_START_DATE","LAST_PURGE_END_DATE") AS 
select
    sname,
    oname,
    created,
    decode(status,
           1, 'ACTIVE',
           2, 'CANCELLED',
           'UNDEFINED'),
    status_update_date,
    purged_date,
    last_purge_start_date,
    last_purge_end_date
from  system.repcat$_resol_stats_control;

CREATE OR REPLACE FORCE VIEW "DBA_REPSCHEMA"("SNAME","DBLINK","MASTERDEF","SNAPMASTER","MASTER_COMMENT","MASTER","PROP_UPDATES","MY_DBLINK","GNAME","GROUP_OWNER") AS 
select r.sname, r.dblink, r.masterdef, r.snapmaster, r.master_comment,
  r.master, r.prop_updates, r.my_dblink, r.sname, r.gowner
from system.repcat$_repschema r;

CREATE OR REPLACE FORCE VIEW "DBA_REPSITES"("GNAME","DBLINK","MASTERDEF","SNAPMASTER","MASTER_COMMENT","MASTER","PROP_UPDATES","MY_DBLINK","GROUP_OWNER") AS 
select r.sname, r.dblink, r.masterdef, r.snapmaster, r.master_comment,
  r.master, r.prop_updates, r.my_dblink, r.gowner
from system.repcat$_repschema r;

CREATE OR REPLACE FORCE VIEW "DBA_REPSITES_NEW"("EXTENSION_ID","GOWNER","GNAME","DBLINK","FULL_INSTANTIATION","MASTER_STATUS") AS 
select
  r.extension_id,
  r.gowner,
  r.gname,
  r.dblink,
  r.full_instantiation,
  DECODE(r.master_status,
         0, 'READY',
         1, 'INSTANTIATING',
         2, 'INSTANTIATED',
         3, 'PREPARED') master_status
from system.repcat$_sites_new r;

CREATE OR REPLACE FORCE VIEW "DBA_RESUMABLE"("USER_ID","SESSION_ID","INSTANCE_ID","COORD_INSTANCE_ID","COORD_SESSION_ID","STATUS","TIMEOUT","START_TIME","SUSPEND_TIME","RESUME_TIME","NAME","SQL_TEXT","ERROR_NUMBER","ERROR_PARAMETER1","ERROR_PARAMETER2","ERROR_PARAMETER3","ERROR_PARAMETER4","ERROR_PARAMETER5","ERROR_MSG") AS 
select distinct S.USER# as USER_ID, R.SID as SESSION_ID,
       R.INST_ID as INSTANCE_ID, P.QCINST_ID, P.QCSID,
       R.STATUS, R.TIMEOUT, NVL(T.START_TIME, R.SUSPEND_TIME) as START_TIME,
       R.SUSPEND_TIME, R.RESUME_TIME, R.NAME, Q.SQL_TEXT, R.ERROR_NUMBER,
       R.ERROR_PARAMETER1, R.ERROR_PARAMETER2, R.ERROR_PARAMETER3,
       R.ERROR_PARAMETER4, R.ERROR_PARAMETER5, R.ERROR_MSG
from GV$RESUMABLE R, GV$SESSION S, GV$TRANSACTION T, GV$SQL Q, GV$PX_SESSION P
where S.SID=R.SID and S.INST_ID=R.INST_ID
      and S.SADDR=T.SES_ADDR(+) and S.INST_ID=T.INST_ID(+)
      and S.SQL_ADDRESS=Q.ADDRESS(+) and S.INST_ID=Q.INST_ID(+)
      and S.SADDR=P.SADDR(+) and S.INST_ID=P.INST_ID(+)
      and R.ENABLED='YES' and NVL(T.SPACE,'NO')='NO';

CREATE OR REPLACE FORCE VIEW "DBA_REWRITE_EQUIVALENCES"("OWNER","NAME","SOURCE_STMT","DESTINATION_STMT","REWRITE_MODE") AS 
select u.name, o.name, s.src_stmt, s.dest_stmt,
       decode(s.rw_mode, 0, 'DISABLED',
                         1, 'TEXT_MATCH',
                         2, 'GENERAL',
                         3, 'RECURSIVE',
                         4, 'TUNE_MVIEW',
                         'UNDEFINED')
from sum$ s, obj$ o, user$ u
  where o.obj# = s.obj# and
  bitand(s.xpflags, 8388608) > 0 and  /* REWRITE EQUIVALENCE SUMMARY */
  o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "DBA_RGROUP"("REFGROUP","OWNER","NAME","IMPLICIT_DESTROY","PUSH_DEFERRED_RPC","REFRESH_AFTER_ERRORS","ROLLBACK_SEG","JOB","PURGE_OPTION","PARALLELISM","HEAP_SIZE") AS 
select REFGROUP, OWNER, NAME,
          decode(bitand(flag,1),1,'Y',0,'N','?') IMPLICIT_DESTROY,
          decode(bitand(flag,2),2,'Y',0,'N','?') PUSH_DEFERRED_RPC,
          decode(bitand(flag,4),4,'Y',0,'N','?') REFRESH_AFTER_ERRORS,
          ROLLBACK_SEG,
          JOB,
          purge_opt#   PURGE_OPTION,
          parallelism# PARALLELISM,
          heap_size#   HEAP_SIZE
  from rgroup$ r
   where r.instsite = 0;

CREATE OR REPLACE FORCE VIEW "DBA_ROLES"("ROLE","PASSWORD_REQUIRED") AS 
select name, decode(password, null, 'NO', 'EXTERNAL', 'EXTERNAL',
                      'GLOBAL', 'GLOBAL', 'YES')
from  user$
where type# = 0 and name not in ('PUBLIC', '_NEXT_USER');

CREATE OR REPLACE FORCE VIEW "DBA_ROLE_PRIVS"("GRANTEE","GRANTED_ROLE","ADMIN_OPTION","DEFAULT_ROLE") AS 
select /*+ ordered */ decode(sa.grantee#, 1, 'PUBLIC', u1.name), u2.name,
       decode(min(option$), 1, 'YES', 'NO'),
       decode(min(u1.defrole), 0, 'NO', 1, 'YES',
              2, decode(min(ud.role#),null,'NO','YES'),
              3, decode(min(ud.role#),null,'YES','NO'), 'NO')
from sysauth$ sa, user$ u1, user$ u2, defrole$ ud
where sa.grantee#=ud.user#(+)
  and sa.privilege#=ud.role#(+) and u1.user#=sa.grantee#
  and u2.user#=sa.privilege#
group by decode(sa.grantee#,1,'PUBLIC',u1.name),u2.name;

CREATE OR REPLACE FORCE VIEW "DBA_ROLLBACK_SEGS"("SEGMENT_NAME","OWNER","TABLESPACE_NAME","SEGMENT_ID","FILE_ID","BLOCK_ID","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENTS","MAX_EXTENTS","PCT_INCREASE","STATUS","INSTANCE_NUM","RELATIVE_FNO") AS 
select un.name, decode(un.user#,1,'PUBLIC','SYS'),
       ts.name, un.us#, f.file#, un.block#,
       s.iniexts * ts.blocksize,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extsize * ts.blocksize),
       s.minexts, s.maxexts,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extpct),
       decode(un.status$, 2, 'OFFLINE', 3, 'ONLINE',
                          4, 'UNDEFINED', 5, 'NEEDS RECOVERY',
                          6, 'PARTLY AVAILABLE', 'UNDEFINED'),
       decode(un.inst#, 0, NULL, un.inst#), un.file#
from sys.undo$ un, sys.seg$ s, sys.ts$ ts, sys.file$ f
where un.status$ != 1
  and un.ts# = s.ts#
  and un.file# = s.file#
  and un.block# = s.block#
  and s.type# in (1, 10)
  and s.ts# = ts.ts#
  and un.ts# = f.ts#
  and un.file# = f.relfile#;

CREATE OR REPLACE FORCE VIEW "DBA_RSRC_CONSUMER_GROUPS"("CONSUMER_GROUP","CPU_METHOD","COMMENTS","STATUS","MANDATORY") AS 
select name,cpu_method,description,status,decode(mandatory,1,'YES','NO')
from resource_consumer_group$;

CREATE OR REPLACE FORCE VIEW "DBA_RSRC_CONSUMER_GROUP_PRIVS"("GRANTEE","GRANTED_GROUP","GRANT_OPTION","INITIAL_GROUP") AS 
select ue.name, g.name,
       decode(min(mod(o.option$,2)), 1, 'YES', 'NO'),
       decode(nvl(cgm.consumer_group, 'DEFAULT_CONSUMER_GROUP'),
              g.name, 'YES', 'NO')
from sys.user$ ue left outer join sys.resource_group_mapping$ cgm on
     (cgm.attribute = 'ORACLE_USER' and cgm.status = 'ACTIVE' and
      cgm.value = ue.name),
     sys.resource_consumer_group$ g, sys.objauth$ o
where o.obj# = g.obj# and o.grantee# = ue.user#
group by ue.name, g.name,
      decode(nvl(cgm.consumer_group, 'DEFAULT_CONSUMER_GROUP'),
             g.name, 'YES', 'NO');

CREATE OR REPLACE FORCE VIEW "DBA_RSRC_GROUP_MAPPINGS"("ATTRIBUTE","VALUE","CONSUMER_GROUP","STATUS") AS 
select m.attribute, m.value, m.consumer_group, m.status
from sys.resource_group_mapping$ m
order by m.status,
         (select p.priority from sys.resource_mapping_priority$ p
          where m.status = p.status and m.attribute = p.attribute),
         m.consumer_group, m.value;

CREATE OR REPLACE FORCE VIEW "DBA_RSRC_MANAGER_SYSTEM_PRIVS"("GRANTEE","PRIVILEGE","ADMIN_OPTION") AS 
select u.name,spm.name,decode(min(sa.option$),1,'YES','NO')
from sys.user$ u, system_privilege_map spm, sys.sysauth$ sa
where sa.grantee# = u.user# and sa.privilege# = spm.privilege
and sa.privilege# = -227 group by u.name, spm.name;

CREATE OR REPLACE FORCE VIEW "DBA_RSRC_MAPPING_PRIORITY"("ATTRIBUTE","PRIORITY","STATUS") AS 
select attribute, priority, status
from sys.resource_mapping_priority$
where attribute <> 'CLIENT_ID'
order by status, priority;

CREATE OR REPLACE FORCE VIEW "DBA_RSRC_PLANS"("PLAN","NUM_PLAN_DIRECTIVES","CPU_METHOD","ACTIVE_SESS_POOL_MTH","PARALLEL_DEGREE_LIMIT_MTH","QUEUEING_MTH","COMMENTS","STATUS","MANDATORY") AS 
select name,num_plan_directives,cpu_method,mast_method,pdl_method,que_method,
description,status,decode(mandatory,1,'YES','NO') from resource_plan$;

CREATE OR REPLACE FORCE VIEW "DBA_RSRC_PLAN_DIRECTIVES"("PLAN","GROUP_OR_SUBPLAN","TYPE","CPU_P1","CPU_P2","CPU_P3","CPU_P4","CPU_P5","CPU_P6","CPU_P7","CPU_P8","ACTIVE_SESS_POOL_P1","QUEUEING_P1","PARALLEL_DEGREE_LIMIT_P1","SWITCH_GROUP","SWITCH_TIME","SWITCH_ESTIMATE","MAX_EST_EXEC_TIME","UNDO_POOL","MAX_IDLE_TIME","MAX_IDLE_BLOCKER_TIME","SWITCH_TIME_IN_CALL","COMMENTS","STATUS","MANDATORY") AS 
select plan, group_or_subplan, decode(is_subplan, 1, 'PLAN', 'CONSUMER_GROUP'),
decode(cpu_p1, 4294967295, 0, cpu_p1),
decode(cpu_p2, 4294967295, 0, cpu_p2),
decode(cpu_p3, 4294967295, 0, cpu_p3),
decode(cpu_p4, 4294967295, 0, cpu_p4),
decode(cpu_p5, 4294967295, 0, cpu_p5),
decode(cpu_p6, 4294967295, 0, cpu_p6),
decode(cpu_p7, 4294967295, 0, cpu_p7),
decode(cpu_p8, 4294967295, 0, cpu_p8),
decode(active_sess_pool_p1, 4294967295, to_number(null), active_sess_pool_p1),
decode(queueing_p1, 4294967295, to_number(null), queueing_p1),
decode(parallel_degree_limit_p1,
       4294967295, to_number(null),
       parallel_degree_limit_p1),
switch_group,
case when (switch_time = 4294967295) then to_number(null)
     when (switch_back <> 0) then to_number(null)
     else switch_time end,
decode(switch_estimate, 4294967295, 'FALSE', 0, 'FALSE', 1, 'TRUE'),
decode(max_est_exec_time, 4294967295, to_number(null), max_est_exec_time),
decode(undo_pool, 4294967295, to_number(null), undo_pool),
decode(max_idle_time, 4294967295, to_number(null), max_idle_time),
decode(max_idle_blocker_time, 4294967295, to_number(null),
       max_idle_blocker_time),
case when (switch_time = 4294967295) then to_number(null)
     when (switch_back = 0) then to_number(null)
     else switch_time end,
description, status, decode(mandatory, 1, 'YES', 'NO')
from resource_plan_directive$;

CREATE OR REPLACE FORCE VIEW "DBA_RULES"("RULE_OWNER","RULE_NAME","RULE_CONDITION","RULE_EVALUATION_CONTEXT_OWNER","RULE_EVALUATION_CONTEXT_NAME","RULE_ACTION_CONTEXT","RULE_COMMENT") AS 
SELECT /*+ all_rows */
       u.name, o.name, r.condition, bu.name, bo.name, r.r_action, r.r_comment
FROM   rule$ r, obj$ o, user$ u, obj$ bo, user$ bu
WHERE  r.obj# = o.obj# and o.owner# = u.user# and
       r.ectx# = bo.obj#(+) and bo.owner# = bu.user#(+);

CREATE OR REPLACE FORCE VIEW "DBA_RULESETS"("OWNER","RULESET_NAME","RULESET_STORAGE_TABLE","BASE_TABLE","RULESET_COMMENT") AS 
SELECT rule_set_owner, rule_set_name, NULL,
       decode(rule_set_eval_context_owner, NULL, NULL,
              rule_set_eval_context_owner||'.'||rule_set_eval_context_name),
       rule_set_comment
FROM   dba_rule_sets;

CREATE OR REPLACE FORCE VIEW "DBA_RULE_SETS"("RULE_SET_OWNER","RULE_SET_NAME","RULE_SET_EVAL_CONTEXT_OWNER","RULE_SET_EVAL_CONTEXT_NAME","RULE_SET_COMMENT") AS 
SELECT /*+ all_rows */
       u.name, o.name, bu.name, bo.name, r.rs_comment
FROM   rule_set$ r, obj$ o, user$ u, obj$ bo, user$ bu
WHERE  r.obj# = o.obj# and u.user# = o.owner#
       and r.ectx# = bo.obj#(+) and bo.owner# = bu.user#(+);

CREATE OR REPLACE FORCE VIEW "DBA_RULE_SET_RULES"("RULE_SET_OWNER","RULE_SET_NAME","RULE_OWNER","RULE_NAME","RULE_SET_RULE_ENABLED","RULE_SET_RULE_EVAL_CTX_OWNER","RULE_SET_RULE_EVAL_CTX_NAME","RULE_SET_RULE_COMMENT") AS 
SELECT /*+ all_rows */
       u.name, o.name, ru.name, ro.name,
       decode(bitand(rm.property, 1), 1, 'DISABLED', 'ENABLED'),
       eu.name, eo.name, rm.rm_comment
FROM   rule_map$ rm, obj$ o, user$ u, obj$ ro, user$ ru, obj$ eo, user$ eu
WHERE  rm.rs_obj# = o.obj# and o.owner# = u.user# and rm.r_obj# = ro.obj# and
       ro.owner# = ru.user# and rm.ectx# = eo.obj#(+) and
       eo.owner# = eu.user#(+);

CREATE OR REPLACE FORCE VIEW "DBA_SCHEDULER_GLOBAL_ATTRIBUTE"("ATTRIBUTE_NAME","VALUE") AS 
SELECT o.name, a.value
 FROM sys.obj$ o, sys.scheduler$_global_attribute a
 WHERE o.obj# = a.obj#;

CREATE OR REPLACE FORCE VIEW "DBA_SCHEDULER_JOBS"("OWNER","JOB_NAME","JOB_CREATOR","CLIENT_ID","GLOBAL_UID","PROGRAM_OWNER","PROGRAM_NAME","JOB_TYPE","JOB_ACTION","NUMBER_OF_ARGUMENTS","SCHEDULE_OWNER","SCHEDULE_NAME","START_DATE","REPEAT_INTERVAL","END_DATE","JOB_CLASS","ENABLED","AUTO_DROP","RESTARTABLE","STATE","JOB_PRIORITY","RUN_COUNT","MAX_RUNS","FAILURE_COUNT","MAX_FAILURES","RETRY_COUNT","LAST_START_DATE","LAST_RUN_DURATION","NEXT_RUN_DATE","SCHEDULE_LIMIT","MAX_RUN_DURATION","LOGGING_LEVEL","STOP_ON_WINDOW_CLOSE","INSTANCE_STICKINESS","SYSTEM","JOB_WEIGHT","NLS_ENV","SOURCE","DESTINATION","COMMENTS","FLAGS") AS 
SELECT ju.name, jo.name, j.creator, j.client_id, j.guid,
    DECODE(bitand(j.flags,4194304),4194304,
      substr(j.program_action,1,instr(j.program_action,'"')-1),NULL),
    DECODE(bitand(j.flags,4194304),4194304,
      substr(j.program_action,instr(j.program_action,'"')+1,
        length(j.program_action)-instr(j.program_action,'"')) ,NULL),
    DECODE(BITAND(j.flags,131072+262144+2097152),
      131072, 'PLSQL_BLOCK', 262144, 'STORED_PROCEDURE',
      2097152, 'EXECUTABLE', 524288, 'JOB_CHAIN', NULL),
    DECODE(bitand(j.flags,4194304),0,j.program_action,NULL), j.number_of_args,
    DECODE(bitand(j.flags,1024+4096),0,NULL,
      substr(j.schedule_expr,1,instr(j.schedule_expr,'"')-1)),
    DECODE(bitand(j.flags,1024+4096),0,NULL,
      substr(j.schedule_expr,instr(j.schedule_expr,'"') + 1,
        length(j.schedule_expr)-instr(j.schedule_expr,'"'))),
    j.start_date,
    DECODE(BITAND(j.flags,1024+4096), 0, j.schedule_expr, NULL),
    j.end_date, co.name,
    DECODE(BITAND(j.job_status,1+8388608),0,'FALSE','TRUE'),
    DECODE(BITAND(j.flags,32768),0,'TRUE','FALSE'),
    DECODE(BITAND(j.flags,65536),0,'FALSE','TRUE'),
    DECODE(BITAND(j.job_status,1+2+4+8+16+32+128),0,'DISABLED',1,
      (CASE WHEN j.retry_count>0 THEN 'RETRY SCHEDULED' ELSE 'SCHEDULED' END),
      2,'RUNNING',3,'RUNNING',4,'COMPLETED',8,'BROKEN',16,'FAILED',32,'SUCCEEDED'
      ,128,'REMOTE',NULL),
    j.priority, j.run_count, j.max_runs, j.failure_count, j.max_failures,
    j.retry_count,
    j.last_start_date,
    (CASE WHEN j.last_end_date>j.last_start_date THEN j.last_end_date-j.last_start_date
       ELSE NULL END), j.next_run_date,
    j.schedule_limit, j.max_run_duration,
    DECODE(BITAND(j.flags,32+64+128+256),32,'OFF',64,'RUNS',128,'',
      256,'FULL',NULL),
    DECODE(BITAND(j.flags,8),0,'FALSE','TRUE'),
    DECODE(BITAND(j.flags,16),0,'FALSE','TRUE'),
    DECODE(BITAND(j.flags,16777216),0,'FALSE','TRUE'),
    j.job_weight, j.nls_env,
    j.source, j.destination, j.comments, j.flags
  FROM obj$ jo, user$ ju, obj$ co, sys.scheduler$_job j
  WHERE j.obj# = jo.obj# AND jo.owner# = ju.user# AND j.class_oid = co.obj#(+);

CREATE OR REPLACE FORCE VIEW "DBA_SCHEDULER_JOB_ARGS"("OWNER","JOB_NAME","ARGUMENT_NAME","ARGUMENT_POSITION","ARGUMENT_TYPE","VALUE","ANYDATA_VALUE","OUT_ARGUMENT") AS 
SELECT u.name, o.name, b.name, t.position,
  CASE WHEN (b.user_type_num IS NULL) THEN
    DECODE(b.type_number,
0, null,
1, decode(b.flags, 512, 'NVARCHAR2', 'VARCHAR2'),
2, decode(b.flags, 512, 'FLOAT', 'NUMBER'),
3, 'NATIVE INTEGER',
8, 'LONG',
9, decode(b.flags, 512, 'NCHAR VARYING', 'VARCHAR'),
11, 'ROWID',
12, 'DATE',
23, 'RAW',
24, 'LONG RAW',
29, 'BINARY_INTEGER',
69, 'ROWID',
96, decode(b.flags, 512, 'NCHAR', 'CHAR'),
100, 'BINARY_FLOAT',
101, 'BINARY_DOUBLE',
102, 'REF CURSOR',
104, 'UROWID',
105, 'MLSLABEL',
106, 'MLSLABEL',
110, 'REF',
111, 'REF',
112, decode(b.flags, 512, 'NCLOB', 'CLOB'),
113, 'BLOB', 114, 'BFILE', 115, 'CFILE',
121, 'OBJECT',
122, 'TABLE',
123, 'VARRAY',
178, 'TIME',
179, 'TIME WITH TIME ZONE',
180, 'TIMESTAMP',
181, 'TIMESTAMP WITH TIME ZONE',
231, 'TIMESTAMP WITH LOCAL TIME ZONE',
182, 'INTERVAL YEAR TO MONTH',
183, 'INTERVAL DAY TO SECOND',
250, 'PL/SQL RECORD',
251, 'PL/SQL TABLE',
252, 'PL/SQL BOOLEAN',
'UNDEFINED')
    ELSE t_u.name ||'.'|| t_o.name END,
  dbms_scheduler.get_varchar2_value(t.value), t.value,
  DECODE(BITAND(b.flags,1),0,'FALSE',1,'TRUE')
  FROM obj$ o, user$ u, (SELECT a.oid job_oid, a.position position,
      j.program_oid program_oid, a.value value
    FROM sys.scheduler$_job j, sys.scheduler$_job_argument a
    WHERE a.oid = j.obj#) t, obj$ t_o, user$ t_u,
    sys.scheduler$_program_argument b
  WHERE t.job_oid = o.obj# AND u.user# = o.owner#
    AND b.user_type_num = t_o.obj#(+) AND t_o.owner# = t_u.user#(+)
    AND t.program_oid=b.oid(+) AND t.position=b.position(+);

CREATE OR REPLACE FORCE VIEW "DBA_SCHEDULER_JOB_CLASSES"("JOB_CLASS_NAME","RESOURCE_CONSUMER_GROUP","SERVICE","LOGGING_LEVEL","LOG_HISTORY","COMMENTS") AS 
SELECT co.name, c.res_grp_name,
    c.affinity ,
    DECODE(BITAND(c.flags,32+64+128+256),32,'OFF',64,'RUNS',128,'',
      256,'FULL',NULL),
    c.log_history, c.comments
  FROM obj$ co, sys.scheduler$_class c
  WHERE c.obj# = co.obj#;

CREATE OR REPLACE FORCE VIEW "DBA_SCHEDULER_JOB_LOG"("LOG_ID","LOG_DATE","OWNER","JOB_NAME","JOB_CLASS","OPERATION","STATUS","USER_NAME","CLIENT_ID","GLOBAL_UID","ADDITIONAL_INFO") AS 
(SELECT
        LOG_ID, LOG_DATE, OWNER,e.NAME,co.NAME, OPERATION,e.STATUS, USER_NAME,
        CLIENT_ID, GUID, ADDITIONAL_INFO
  FROM scheduler$_event_log e, obj$ co
  WHERE e.type# = 66 and e.class_id = co.obj#(+));

CREATE OR REPLACE FORCE VIEW "DBA_SCHEDULER_JOB_RUN_DETAILS"("LOG_ID","LOG_DATE","OWNER","JOB_NAME","STATUS","ERROR#","REQ_START_DATE","ACTUAL_START_DATE","RUN_DURATION","INSTANCE_ID","SESSION_ID","SLAVE_PID","CPU_USED","ADDITIONAL_INFO") AS 
(SELECT
        j.LOG_ID, j.LOG_DATE, e.OWNER, e.NAME, e.STATUS, j.ERROR#,
        j.REQ_START_DATE, j.START_DATE, j.RUN_DURATION, j.INSTANCE_ID,
        j.SESSION_ID, j.SLAVE_PID, j.CPU_USED, j.ADDITIONAL_INFO
   FROM scheduler$_job_run_details j, scheduler$_event_log e
   WHERE j.log_id = e.log_id
   AND e.type# = 66);

CREATE OR REPLACE FORCE VIEW "DBA_SCHEDULER_PROGRAMS"("OWNER","PROGRAM_NAME","PROGRAM_TYPE","PROGRAM_ACTION","NUMBER_OF_ARGUMENTS","ENABLED","COMMENTS") AS 
SELECT u.name, o.name,
  DECODE(bitand(p.flags,2+4+8+16+32), 2,'PLSQL_BLOCK',
         4,'STORED_PROCEDURE', 32, 'EXECUTABLE', ''),
  p.action, p.number_of_args, DECODE(BITAND(p.flags,1),0,'FALSE',1,'TRUE'),
  p.comments
  FROM obj$ o, user$ u, sys.scheduler$_program p
  WHERE p.obj# = o.obj# AND u.user# = o.owner#;

CREATE OR REPLACE FORCE VIEW "DBA_SCHEDULER_PROGRAM_ARGS"("OWNER","PROGRAM_NAME","ARGUMENT_NAME","ARGUMENT_POSITION","ARGUMENT_TYPE","METADATA_ATTRIBUTE","DEFAULT_VALUE","DEFAULT_ANYDATA_VALUE","OUT_ARGUMENT") AS 
SELECT u.name, o.name, a.name, a.position,
  CASE WHEN (a.user_type_num IS NULL) THEN
    DECODE(a.type_number,
0, null,
1, decode(a.flags, 512, 'NVARCHAR2', 'VARCHAR2'),
2, decode(a.flags, 512, 'FLOAT', 'NUMBER'),
3, 'NATIVE INTEGER',
8, 'LONG',
9, decode(a.flags, 512, 'NCHAR VARYING', 'VARCHAR'),
11, 'ROWID',
12, 'DATE',
23, 'RAW',
24, 'LONG RAW',
29, 'BINARY_INTEGER',
69, 'ROWID',
96, decode(a.flags, 512, 'NCHAR', 'CHAR'),
100, 'BINARY_FLOAT',
101, 'BINARY_DOUBLE',
102, 'REF CURSOR',
104, 'UROWID',
105, 'MLSLABEL',
106, 'MLSLABEL',
110, 'REF',
111, 'REF',
112, decode(a.flags, 512, 'NCLOB', 'CLOB'),
113, 'BLOB', 114, 'BFILE', 115, 'CFILE',
121, 'OBJECT',
122, 'TABLE',
123, 'VARRAY',
178, 'TIME',
179, 'TIME WITH TIME ZONE',
180, 'TIMESTAMP',
181, 'TIMESTAMP WITH TIME ZONE',
231, 'TIMESTAMP WITH LOCAL TIME ZONE',
182, 'INTERVAL YEAR TO MONTH',
183, 'INTERVAL DAY TO SECOND',
250, 'PL/SQL RECORD',
251, 'PL/SQL TABLE',
252, 'PL/SQL BOOLEAN',
'UNDEFINED')
    ELSE t_u.name ||'.'|| t_o.name END,
  DECODE(bitand(a.flags,2+4+64+128+256), 2,'JOB_NAME',4,'JOB_OWNER',
         64, 'JOB_START', 128, 'WINDOW_START',
         256, 'WINDOW_END', ''),
  dbms_scheduler.get_varchar2_value(a.value), a.value,
  DECODE(BITAND(a.flags,1),0,'FALSE',1,'TRUE')
  FROM obj$ o, user$ u, sys.scheduler$_program_argument a, obj$ t_o, user$ t_u
  WHERE a.oid = o.obj# AND u.user# = o.owner#
    AND a.user_type_num = t_o.obj#(+) AND t_o.owner# = t_u.user#(+);

CREATE OR REPLACE FORCE VIEW "DBA_SCHEDULER_RUNNING_JOBS"("OWNER","JOB_NAME","SESSION_ID","SLAVE_PROCESS_ID","RUNNING_INSTANCE","RESOURCE_CONSUMER_GROUP","ELAPSED_TIME","CPU_USED") AS 
SELECT ju.name, jo.name, rj.session_id, rj.process_id, rj.inst_id,
      vse.resource_consumer_group,
      CAST (systimestamp-j.last_start_date AS INTERVAL DAY(3) TO SECOND(2)),
      rj.session_stat_cpu
  FROM
        scheduler$_job j,
        obj$ jo,
        user$ ju,
        gv$scheduler_running_jobs rj,
        gv$session vse
  WHERE
      j.obj# = jo.obj#
  AND rj.job_id = j.obj#
  AND jo.owner# = ju.user#
  AND vse.sid = rj.session_id
  AND vse.serial# = rj.session_serial_num;

CREATE OR REPLACE FORCE VIEW "DBA_SCHEDULER_SCHEDULES"("OWNER","SCHEDULE_NAME","START_DATE","REPEAT_INTERVAL","END_DATE","COMMENTS") AS 
SELECT su.name, so.name, s.reference_date, s.recurrence_expr,
    s.end_date, s.comments
  FROM obj$ so, user$ su, sys.scheduler$_schedule s
  WHERE s.obj# = so.obj# AND so.owner# = su.user#;

CREATE OR REPLACE FORCE VIEW "DBA_SCHEDULER_WINDOWS"("WINDOW_NAME","RESOURCE_PLAN","SCHEDULE_OWNER","SCHEDULE_NAME","START_DATE","REPEAT_INTERVAL","END_DATE","DURATION","WINDOW_PRIORITY","NEXT_START_DATE","LAST_START_DATE","ENABLED","ACTIVE","COMMENTS") AS 
SELECT wo.name, w.res_plan,
    DECODE(bitand(w.flags,16),16,
      substr(w.schedule_expr,1,instr(w.schedule_expr,'"')-1),NULL),
    DECODE(bitand(w.flags,16),16,
      substr(w.schedule_expr,instr(w.schedule_expr,'"')+1,
        length(w.schedule_expr)-instr(w.schedule_expr,'"')) ,NULL),
     w.start_date,
    DECODE(bitand(w.flags,16),0,w.schedule_expr,NULL), w.end_date, w.duration,
    DECODE(w.priority,1,'HIGH',2,'LOW',NULL), w.next_start_date,
    w.actual_start_date,
    DECODE(bitand(w.flags, 1),0,'FALSE',1,'TRUE'),
    DECODE(bitand(w.flags,1+2),2,'TRUE',3,'TRUE','FALSE'), w.comments
  FROM obj$ wo, sys.scheduler$_window w
  WHERE w.obj# = wo.obj#;

CREATE OR REPLACE FORCE VIEW "DBA_SCHEDULER_WINDOW_DETAILS"("LOG_ID","LOG_DATE","WINDOW_NAME","REQ_START_DATE","ACTUAL_START_DATE","WINDOW_DURATION","ACTUAL_DURATION","INSTANCE_ID","ADDITIONAL_INFO") AS 
(SELECT
        w.LOG_ID, w.LOG_DATE, e.NAME, w.REQ_START_DATE, w.START_DATE,
        w.DURATION, w.ACTUAL_DURATION, w.INSTANCE_ID, w.ADDITIONAL_INFO
  FROM scheduler$_window_details w, scheduler$_event_log e
  WHERE e.log_id = w.log_id
  AND e.type# = 69);

CREATE OR REPLACE FORCE VIEW "DBA_SCHEDULER_WINDOW_GROUPS"("WINDOW_GROUP_NAME","ENABLED","NUMBER_OF_WINDOWS","COMMENTS") AS 
SELECT o.name, DECODE(BITAND(w.flags,1),0,'FALSE',1,'TRUE'),
    (SELECT COUNT(*) FROM scheduler$_wingrp_member wg WHERE wg.oid = w.obj#),
    w.comments
  FROM obj$ o, scheduler$_window_group w WHERE o.obj# = w.obj#;

CREATE OR REPLACE FORCE VIEW "DBA_SCHEDULER_WINDOW_LOG"("LOG_ID","LOG_DATE","WINDOW_NAME","OPERATION","STATUS","USER_NAME","CLIENT_ID","GLOBAL_UID","ADDITIONAL_INFO") AS 
(SELECT
        LOG_ID, LOG_DATE, NAME, OPERATION, STATUS, USER_NAME, CLIENT_ID,
        GUID, ADDITIONAL_INFO
  FROM scheduler$_event_log
  WHERE type# = 69);

CREATE OR REPLACE FORCE VIEW "DBA_SCHEDULER_WINGROUP_MEMBERS"("WINDOW_GROUP_NAME","WINDOW_NAME") AS 
SELECT o.name, wmo.name
  FROM obj$ o, obj$ wmo, scheduler$_wingrp_member wg
  WHERE o.type# = 72 AND o.obj# = wg.oid AND wg.member_oid = wmo.obj#;

CREATE OR REPLACE FORCE VIEW "DBA_SECONDARY_OBJECTS"("INDEX_OWNER","INDEX_NAME","SECONDARY_OBJECT_OWNER","SECONDARY_OBJECT_NAME") AS 
select u.name, o.name, u1.name, o1.name
from   sys.user$ u, sys.obj$ o, sys.user$ u1, sys.obj$ o1, sys.secobj$ s
where  s.obj# = o.obj# and o.owner# = u.user# and
       s.secobj# = o1.obj#  and  o1.owner# = u1.user#;

CREATE OR REPLACE FORCE VIEW "DBA_SEC_RELEVANT_COLS"("OBJECT_OWNER","OBJECT_NAME","POLICY_GROUP","POLICY_NAME","SEC_REL_COLUMN","COLUMN_OPTION") AS 
select u.name, o.name, r.gname, r.pname, c.name,
       decode(bitand(r.stmt_type, 4096), 0, 'NONE', 'ALL_ROWS')
from sys.rls$ r, sys.rls_sc$ sc, sys.user$ u, sys.obj$ o, sys.col$ c
where u.user# = o.owner#
  and r.obj# = o.obj#
  and r.obj# = sc.obj#
  and r.gname=sc.gname and r.pname=sc.pname
  and r.obj# = c.obj# and sc.intcol# = c.intcol#
  and bitand(c.property, 32) = 0;

CREATE OR REPLACE FORCE VIEW "DBA_SEGMENTS"("OWNER","SEGMENT_NAME","PARTITION_NAME","SEGMENT_TYPE","TABLESPACE_NAME","HEADER_FILE","HEADER_BLOCK","BYTES","BLOCKS","EXTENTS","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENTS","MAX_EXTENTS","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","RELATIVE_FNO","BUFFER_POOL") AS 
select owner, segment_name, partition_name, segment_type, tablespace_name,
       header_file, header_block,
       decode(bitand(segment_flags, 131072), 131072, blocks,
           (decode(bitand(segment_flags,1),1,
            dbms_space_admin.segment_number_blocks(tablespace_id, relative_fno,
            header_block, segment_type_id, buffer_pool_id, segment_flags,
            segment_objd, blocks), blocks)))*blocksize,
       decode(bitand(segment_flags, 131072), 131072, blocks,
           (decode(bitand(segment_flags,1),1,
            dbms_space_admin.segment_number_blocks(tablespace_id, relative_fno,
            header_block, segment_type_id, buffer_pool_id, segment_flags,
            segment_objd, blocks), blocks))),
       decode(bitand(segment_flags, 131072), 131072, extents,
           (decode(bitand(segment_flags,1),1,
           dbms_space_admin.segment_number_extents(tablespace_id, relative_fno,
           header_block, segment_type_id, buffer_pool_id, segment_flags,
           segment_objd, extents) , extents))),
       initial_extent, next_extent, min_extents, max_extents, pct_increase,
       freelists, freelist_groups, relative_fno,
       decode(buffer_pool_id, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL)
from sys_dba_segs;

CREATE OR REPLACE FORCE VIEW "DBA_SEGMENTS_OLD"("OWNER","SEGMENT_NAME","PARTITION_NAME","SEGMENT_TYPE","TABLESPACE_NAME","HEADER_FILE","HEADER_BLOCK","BYTES","BLOCKS","EXTENTS","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENTS","MAX_EXTENTS","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","RELATIVE_FNO","BUFFER_POOL") AS 
select owner, segment_name, partition_name, segment_type, tablespace_name,
       header_file, header_block,
       dbms_space_admin.segment_number_blocks(tablespace_id, relative_fno,
       header_block, segment_type_id, buffer_pool_id, segment_flags,
       segment_objd, blocks)*blocksize,
       dbms_space_admin.segment_number_blocks(tablespace_id, relative_fno,
       header_block, segment_type_id, buffer_pool_id, segment_flags,
       segment_objd, blocks),
       dbms_space_admin.segment_number_extents(tablespace_id, relative_fno,
       header_block, segment_type_id, buffer_pool_id, segment_flags,
       segment_objd, extents),
       initial_extent, next_extent, min_extents, max_extents, pct_increase,
       freelists, freelist_groups, relative_fno,
       decode(buffer_pool_id, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL)
from sys_dba_segs;

CREATE OR REPLACE FORCE VIEW "DBA_SEQUENCES"("SEQUENCE_OWNER","SEQUENCE_NAME","MIN_VALUE","MAX_VALUE","INCREMENT_BY","CYCLE_FLAG","ORDER_FLAG","CACHE_SIZE","LAST_NUMBER") AS 
select u.name, o.name,
      s.minvalue, s.maxvalue, s.increment$,
      decode (s.cycle#, 0, 'N', 1, 'Y'),
      decode (s.order$, 0, 'N', 1, 'Y'),
      s.cache, s.highwater
from sys.seq$ s, sys.obj$ o, sys.user$ u
where u.user# = o.owner#
  and o.obj# = s.obj#;

CREATE OR REPLACE FORCE VIEW "DBA_SERVER_REGISTRY"("COMP_ID","COMP_NAME","VERSION","STATUS","MODIFIED","CONTROL","SCHEMA","PROCEDURE","STARTUP","PARENT_ID") AS 
SELECT comp_id, comp_name, version, status,
       modified, control, schema, procedure,
       startup, parent_id
FROM dba_registry
WHERE namespace='SERVER';

CREATE OR REPLACE FORCE VIEW "DBA_SERVICES"("SERVICE_ID","NAME","NAME_HASH","NETWORK_NAME","CREATION_DATE","CREATION_DATE_HASH","FAILOVER_METHOD","FAILOVER_TYPE","FAILOVER_RETRIES","FAILOVER_DELAY") AS 
select SERVICE_ID, NAME, NAME_HASH, NETWORK_NAME,
          CREATION_DATE, CREATION_DATE_HASH,
          FAILOVER_METHOD, FAILOVER_TYPE, FAILOVER_RETRIES, FAILOVER_DELAY
   from service$
where DELETION_DATE is null;

CREATE OR REPLACE FORCE VIEW "DBA_SNAPSHOTS"("OWNER","NAME","TABLE_NAME","MASTER_VIEW","MASTER_OWNER","MASTER","MASTER_LINK","CAN_USE_LOG","UPDATABLE","REFRESH_METHOD","LAST_REFRESH","ERROR","FR_OPERATIONS","CR_OPERATIONS","TYPE","NEXT","START_WITH","REFRESH_GROUP","UPDATE_TRIG","UPDATE_LOG","QUERY","MASTER_ROLLBACK_SEG","STATUS","REFRESH_MODE","PREBUILT") AS 
select s.sowner, s.vname, tname, mview, t.mowner, t.master, mlink,
       decode(bitand(s.flag,1),  0, 'NO', 'YES'),
       decode(bitand(s.flag,2),  0, 'NO', 'YES'),
       decode(bitand(s.flag,16),             16, 'ROWID',
	      (decode(bitand(s.flag,32),     32, 'PRIMARY KEY',
	      (decode(bitand(s.flag,8192), 8192, 'JOIN VIEW',
	      (decode(bitand(s.flag,4096), 4096, 'AGGREGATE',
              (decode(bitand(s.flag,256),   256, 'COMPLEX',
              (decode(bitand(s.flag,536870912),   536870912, 'OBJECT ID',
                                                 'UNKNOWN'))))))))))),
       t.snaptime, s.error#,
       decode(bitand(s.status,1), 0, 'REGENERATE', 'VALID'),
       decode(bitand(s.status,2), 0, 'REGENERATE', 'VALID'),
       decode(s.auto_fast,
              'C',  'COMPLETE',
              'F',  'FAST',
              '?',  'FORCE',
              'N',  'NEVER',
              NULL, 'FORCE', 'ERROR'),
       s.auto_fun, s.auto_date, r.refgroup, s.ustrg, s.uslog,
       s.query_txt, s.mas_roll_seg,
       decode(bitand(s.status,4),         4, 'INVALID',
	      (decode(bitand(s.status,8), 8, 'UNKNOWN',
                                             'VALID'))),
       decode(NVL(s.auto_fun, 'null'),
              'null', decode(s.auto_fast,                  'N', 'NEVER',
                             (decode(bitand(s.flag, 32768),  0, 'DEMAND',
                                                                'COMMIT'))),
	      'PERIODIC'),
       decode(bitand(s.flag,131072), 0, 'NO', 'YES')
from sys.snap$ s, sys.rgchild$ r, sys.snap_reftime$ t
where t.sowner = s.sowner
and t.vname = s.vname
and t.instsite = 0
and s.instsite = 0
and not (bitand(s.flag, 268435456) > 0         /* MV with user-defined types */
         and bitand(s.objflag, 32) > 0)                      /* secondary MV */
and t.tablenum = 0
and t.sowner  = r.owner (+)
and t.vname = r.name (+)
and nvl(r.instsite,0) = 0
and r.type# (+) = 'SNAPSHOT';

CREATE OR REPLACE FORCE VIEW "DBA_SNAPSHOT_LOGS"("LOG_OWNER","MASTER","LOG_TABLE","LOG_TRIGGER","ROWIDS","PRIMARY_KEY","OBJECT_ID","FILTER_COLUMNS","SEQUENCE","INCLUDE_NEW_VALUES","CURRENT_SNAPSHOTS","SNAPSHOT_ID") AS 
select m.mowner, m.master, m.log, m.trig,
       decode(bitand(m.flag,1), 0, 'NO', 'YES'),
       decode(bitand(m.flag,2), 0, 'NO', 'YES'),
       decode(bitand(m.flag,512), 0, 'NO', 'YES'),
       decode(bitand(m.flag,4), 0, 'NO', 'YES'),
       decode(bitand(m.flag,1024), 0, 'NO', 'YES'),
       decode(bitand(m.flag,16), 0, 'NO', 'YES'),
       s.snaptime, s.snapid
from sys.mlog$ m, sys.slog$ s
where s.mowner (+) = m.mowner
  and s.master (+) = m.master
union
select ct.source_schema_name, ct.source_table_name, ct.change_table_name,
       ct.mvl_v7trigger,
       decode(bitand(ct.mvl_flag,1), 0, 'NO', 'YES'),
       decode(bitand(ct.mvl_flag,2), 0, 'NO', 'YES'),
       decode(bitand(ct.mvl_flag,512), 0, 'NO', 'YES'),
       decode(bitand(ct.mvl_flag,4), 0, 'NO', 'YES'),
       decode(bitand(ct.mvl_flag,1024), 0, 'NO', 'YES'),
       decode(bitand(ct.mvl_flag,16), 0, 'NO', 'YES'),
       s.snaptime, s.snapid
from sys.cdc_change_tables$ ct, sys.slog$ s
where s.mowner (+) = ct.source_schema_name
  and s.master (+) = ct.source_table_name
  and bitand(ct.mvl_flag, 128) = 128;

CREATE OR REPLACE FORCE VIEW "DBA_SOURCE"("OWNER","NAME","TYPE","LINE","TEXT") AS 
select u.name, o.name,
decode(o.type#, 7, 'PROCEDURE', 8, 'FUNCTION', 9, 'PACKAGE',
               11, 'PACKAGE BODY', 12, 'TRIGGER', 13, 'TYPE', 14, 'TYPE BODY',
               'UNDEFINED'),
s.line, s.source
from sys.obj$ o, sys.source$ s, sys.user$ u
where o.obj# = s.obj#
  and o.owner# = u.user#
  and ( o.type# in (7, 8, 9, 11, 12, 14) OR
       ( o.type# = 13 AND o.subname is null))
union all
select u.name, o.name, 'JAVA SOURCE', s.joxftlno, s.joxftsrc
from sys.obj$ o, x$joxfs s, sys.user$ u
where o.obj# = s.joxftobn
  and o.owner# = u.user#
  and o.type# = 28;

CREATE OR REPLACE FORCE VIEW "DBA_SOURCE_TABLES"("SOURCE_SCHEMA_NAME","SOURCE_TABLE_NAME") AS 
SELECT DISTINCT
   s.source_schema_name, s.source_table_name
  FROM sys.cdc_change_tables$ s, all_tables t
  WHERE s.change_table_schema=t.owner AND
        s.change_table_name=t.table_name;

CREATE OR REPLACE FORCE VIEW "DBA_SQLJ_TYPES"("OWNER","TYPE_NAME","TYPE_OID","EXTERNAL_NAME","USING","TYPECODE","ATTRIBUTES","METHODS","PREDEFINED","INCOMPLETE","FINAL","INSTANTIABLE","SUPERTYPE_OWNER","SUPERTYPE_NAME","LOCAL_ATTRIBUTES","LOCAL_METHODS") AS 
select decode(bitand(t.properties, 64), 64, null, u.name), o.name, t.toid,
       t.externname,
       decode(t.externtype, 1, 'SQLData',
                            2, 'CustomDatum',
                            3, 'Serializable',
                            4, 'Serializable Internal',
                            5, 'ORAData',
                            'unknown'),
       decode(t.typecode, 108, 'OBJECT',
                          122, 'COLLECTION',
                          o.name),
       t.attributes, t.methods,
       decode(bitand(t.properties, 16), 16, 'YES', 0, 'NO'),
       decode(bitand(t.properties, 256), 256, 'YES', 0, 'NO'),
       decode(bitand(t.properties, 8), 8, 'NO', 'YES'),
       decode(bitand(t.properties, 65536), 65536, 'NO', 'YES'),
       su.name, so.name, t.local_attrs, t.local_methods
from sys.user$ u, sys.type$ t, sys.obj$ o, sys.obj$ so, sys.user$ su
where o.owner# = u.user#
  and o.oid$ = t.tvoid
  and o.subname IS NULL -- only the latest version
  and o.type# <> 10 -- must not be invalid
  and bitand(t.properties, 2048) = 0 -- not system-generated
  and t.supertoid = so.oid$ (+) and so.owner# = su.user# (+)
  and t.externtype < 5;

CREATE OR REPLACE FORCE VIEW "DBA_SQLJ_TYPE_ATTRS"("OWNER","TYPE_NAME","ATTR_NAME","EXTERNAL_ATTR_NAME","ATTR_TYPE_MOD","ATTR_TYPE_OWNER","ATTR_TYPE_NAME","LENGTH","PRECISION","SCALE","CHARACTER_SET_NAME","ATTR_NO","INHERITED") AS 
select decode(bitand(t.properties, 64), 64, null, u.name),
       o.name, a.name, a.externname,
       decode(bitand(a.properties, 32768), 32768, 'REF',
              decode(bitand(a.properties, 16384), 16384, 'POINTER')),
       decode(bitand(at.properties, 64), 64, null, au.name),
       decode(at.typecode,
              52, decode(a.charsetform, 2, 'NVARCHAR2', ao.name),
              53, decode(a.charsetform, 2, 'NCHAR', ao.name),
              54, decode(a.charsetform, 2, 'NCHAR VARYING', ao.name),
              61, decode(a.charsetform, 2, 'NCLOB', ao.name),
              ao.name),
       a.length, a.precision#, a.scale,
       decode(a.charsetform, 1, 'CHAR_CS',
                             2, 'NCHAR_CS',
                             3, NLS_CHARSET_NAME(a.charsetid),
                             4, 'ARG:'||a.charsetid),
       a.attribute#, decode(bitand(nvl(a.xflags,0), 1), 1, 'YES', 'NO')
from sys.user$ u, sys.obj$ o, sys.type$ t, sys.attribute$ a,
     sys.obj$ ao, sys.user$ au, sys.type$ at
where o.owner# = u.user#
  and o.oid$ = t.toid
  and o.subname IS NULL -- get the latest version only
  and o.type# <> 10 -- must not be invalid
  and bitand(t.properties, 2048) = 0 -- not system-generated
  and t.toid = a.toid
  and t.version# = a.version#
  and a.attr_toid = ao.oid$
  and ao.owner# = au.user#
  and a.attr_toid = at.tvoid
  and a.attr_version# = at.version#
  and t.externtype < 5;

CREATE OR REPLACE FORCE VIEW "DBA_SQLJ_TYPE_METHODS"("OWNER","TYPE_NAME","METHOD_NAME","EXTERNAL_VAR_NAME","METHOD_NO","METHOD_TYPE","PARAMETERS","RESULTS","FINAL","INSTANTIABLE","OVERRIDING","INHERITED") AS 
select u.name, o.name, m.name, m.externVarName, m.method#,
       decode(bitand(m.properties, 512), 512, 'MAP',
              decode(bitand(m.properties, 2048), 2048, 'ORDER', 'PUBLIC')),
       m.parameters#, m.results,
       decode(bitand(m.properties, 8), 8, 'NO', 'YES'),
       decode(bitand(m.properties, 65536), 65536, 'NO', 'YES'),
       decode(bitand(m.properties, 131072), 131072, 'YES', 'NO'),
       decode(bitand(nvl(m.xflags,0), 1), 1, 'YES', 'NO')
from sys.user$ u, sys.obj$ o, sys.type$ t, sys.method$ m
where o.owner# = u.user#
  and o.oid$ = m.toid
  and o.subname IS NULL -- get the latest version only
  and o.type# <> 10 -- must not be invalid
  and bitand(t.properties, 2048) = 0 -- not system-generated
  and t.toid = m.toid
  and t.version# = m.version#
  and t.externtype < 5;

CREATE OR REPLACE FORCE VIEW "DBA_SQLSET"("ID","NAME","OWNER","DESCRIPTION","CREATED","LAST_MODIFIED","STATEMENT_COUNT") AS 
select ID, NAME, OWNER, DESCRIPTION, CREATED, LAST_MODIFIED, STATEMENT_COUNT
  from WRI$_SQLSET_DEFINITIONS;

CREATE OR REPLACE FORCE VIEW "DBA_SQLSET_BINDS"("SQLSET_ID","SQL_ID","POSITION","VALUE") AS 
select SQLSET_ID, SQL_ID, POSITION, VALUE
  from   WRI$_SQLSET_BINDS;

CREATE OR REPLACE FORCE VIEW "DBA_SQLSET_REFERENCES"("ID","SQLSET_ID","OWNER","CREATED","DESCRIPTION") AS 
select id, sqlset_id, owner, created, description
  from WRI$_SQLSET_REFERENCES;

CREATE OR REPLACE FORCE VIEW "DBA_SQLSET_STATEMENTS"("SQLSET_ID","SQL_ID","SQL_TEXT","PARSING_SCHEMA_ID","MODULE","ACTION","ELAPSED_TIME","CPU_TIME","BUFFER_GETS","DISK_READS","ROWS_PROCESSED","FETCHES","EXECUTIONS","END_OF_FETCH_COUNT","OPTIMIZER_COST","OPTIMIZER_ENV","PRIORITY","COMMAND_TYPE","STAT_PERIOD","ACTIVE_STAT_PERIOD") AS 
select SQLSET_ID, s.SQL_ID, SQL_TEXT,
         PARSING_SCHEMA_ID, MODULE, ACTION, ELAPSED_TIME, CPU_TIME,
         BUFFER_GETS, DISK_READS, ROWS_PROCESSED, FETCHES, EXECUTIONS,
         END_OF_FETCH_COUNT, OPTIMIZER_COST,
         OPTIMIZER_ENV, PRIORITY, s.COMMAND_TYPE,
         STAT_PERIOD, ACTIVE_STAT_PERIOD
 from WRI$_SQLSET_STATEMENTS s, WRH$_SQLTEXT t, V$DATABASE d
 where s.sql_id = t.sql_id and  t.dbid = d.dbid;

CREATE OR REPLACE FORCE VIEW "DBA_SQLTUNE_BINDS"("TASK_ID","OBJECT_ID","POSITION","VALUE") AS 
SELECT task_id, object_id, position, value
  FROM   wri$_adv_sqlt_binds;

CREATE OR REPLACE FORCE VIEW "DBA_SQLTUNE_PLANS"("TASK_ID","OBJECT_ID","ATTRIBUTE","STATEMENT_ID","PLAN_HASH_VALUE","PLAN_ID","TIMESTAMP","REMARKS","OPERATION","OPTIONS","OBJECT_NODE","OBJECT_OWNER","OBJECT_NAME","OBJECT_ALIAS","OBJECT_INSTANCE","OBJECT_TYPE","OPTIMIZER","SEARCH_COLUMNS","ID","PARENT_ID","DEPTH","POSITION","COST","CARDINALITY","BYTES","OTHER_TAG","PARTITION_START","PARTITION_STOP","PARTITION_ID","OTHER","DISTRIBUTION","CPU_COST","IO_COST","TEMP_SPACE","ACCESS_PREDICATES","FILTER_PREDICATES","PROJECTION","TIME","QBLOCK_NAME") AS 
SELECT task_id,
         object_id,
         decode(attribute,
                0, 'Original',
                1, 'Original with adjusted cost',
                2, 'Using SQL profile',
                3, 'Using new indices') AS attribute,
         statement_id,
         plan_hash_value,
         plan_id,
         timestamp,
         remarks,
         operation,
         options,
         object_node,
         object_owner,
         object_name,
         object_alias,
         object_instance,
         object_type,
         optimizer,
         search_columns,
         id,
         parent_id,
         depth,
         position,
         cost,
         cardinality,
         bytes,
         other_tag,
         partition_start,
         partition_stop,
         partition_id,
         other,
         distribution,
         cpu_cost,
         io_cost,
         temp_space,
         access_predicates,
         filter_predicates,
         projection,
         time,
         qblock_name
  FROM wri$_adv_sqlt_plans;

CREATE OR REPLACE FORCE VIEW "DBA_SQLTUNE_RATIONALE_PLAN"("TASK_ID","RATIONALE_ID","OBJECT_ID","OPERATION_ID","PLAN_ATTRIBUTE") AS 
SELECT task_id, rtn_id AS rationale_id, object_id,
         operation_id,
         decode(plan_attr,
                0, 'Original',
                1, 'Original with adjusted cost',
                2, 'Using SQL profile',
                3, 'Using new indices') AS plan_attribute
  FROM WRI$_adv_sqlt_rtn_plan;

CREATE OR REPLACE FORCE VIEW "DBA_SQLTUNE_STATISTICS"("TASK_ID","OBJECT_ID","PARSING_SCHEMA_ID","MODULE","ACTION","ELAPSED_TIME","CPU_TIME","BUFFER_GETS","DISK_READS","ROWS_PROCESSED","FETCHES","EXECUTIONS","END_OF_FETCH_COUNT","OPTIMIZER_COST","OPTIMIZER_ENV","COMMAND_TYPE") AS 
SELECT TASK_ID, OBJECT_ID, PARSING_SCHEMA_ID, MODULE, ACTION, ELAPSED_TIME,
         CPU_TIME, BUFFER_GETS, DISK_READS, ROWS_PROCESSED, FETCHES, EXECUTIONS,
         END_OF_FETCH_COUNT, OPTIMIZER_COST, OPTIMIZER_ENV, COMMAND_TYPE
  FROM   wri$_adv_sqlt_statistics;

CREATE OR REPLACE FORCE VIEW "DBA_SQL_PROFILES"("NAME","CATEGORY","SIGNATURE","SQL_TEXT","CREATED","LAST_MODIFIED","DESCRIPTION","TYPE","STATUS") AS 
select sp.sp_name, sp.category, sp.signature, st.sql_text, sp.created,
       sp.last_modified, sd.description,
       DECODE(sp.type, 1, 'MANUAL', 2, 'AUTO-TUNE', 'UNKNOWN'),
       DECODE(sp.status, 1, 'ENABLED', 2, 'DISABLED', 3, 'VOID', 'UNKNOWN')
from   sqlprof$ sp,
       sqlprof$desc sd,
       sql$text st
where sp.signature = st.signature
and sp.signature = sd.signature
and sp.category = sd.category;

CREATE OR REPLACE FORCE VIEW "DBA_STMT_AUDIT_OPTS"("USER_NAME","PROXY_NAME","AUDIT_OPTION","SUCCESS","FAILURE") AS 
select decode(aud.user#, 0 /* client operations through proxy */, 'ANY CLIENT',
                         1 /* System wide auditing*/, null,
                         client.name)
                        /* USER_NAME */,
       proxy.name       /* PROXY_NAME */,
       aom.name         /* AUDIT_OPTION */,
       decode(aud.success, 1, 'BY SESSION', 2, 'BY ACCESS', 'NOT SET')
                        /* SUCCESS */,
       decode(aud.failure, 1, 'BY SESSION', 2, 'BY ACCESS', 'NOT SET')
                        /* FAILURE */
from sys.user$ client, sys.user$ proxy, STMT_AUDIT_OPTION_MAP aom,
     sys.audit$ aud
where aud.option# = aom.option#
  and aud.user# = client.user#
  and aud.proxy# = proxy.user#(+);

CREATE OR REPLACE FORCE VIEW "DBA_STORED_SETTINGS"("OWNER","OBJECT_NAME","OBJECT_ID","OBJECT_TYPE","PARAM_NAME","PARAM_VALUE") AS 
SELECT u.name, o.name, o.obj#,
DECODE(o.type#,
        7, 'PROCEDURE',
        8, 'FUNCTION',
        9, 'PACKAGE',
       11, 'PACKAGE BODY',
       12, 'TRIGGER',
       13, 'TYPE',
       14, 'TYPE BODY',
       'UNDEFINED'),
p.param, p.value
FROM sys.obj$ o, sys.user$ u, sys.settings$ p
WHERE o.owner# = u.user#
AND o.linkname is null
AND p.obj# = o.obj#;

CREATE OR REPLACE FORCE VIEW "DBA_STREAMS_ADMINISTRATOR"("USERNAME","LOCAL_PRIVILEGES","ACCESS_FROM_REMOTE") AS 
select u.name, decode(bitand(pu.privs, 1), 0, 'NO', 'YES'),
       decode(bitand(pu.privs, 2), 0, 'NO', 'YES')
  from user$ u, "_DBA_STREAMS_PRIVILEGED_USER" pu
 where u.user# = pu.user# AND pu.privs != 0;

CREATE OR REPLACE FORCE VIEW "DBA_STREAMS_GLOBAL_RULES"("STREAMS_NAME","STREAMS_TYPE","RULE_TYPE","INCLUDE_TAGGED_LCR","SOURCE_DATABASE","RULE_NAME","RULE_OWNER","RULE_CONDITION") AS 
select streams_name, decode(streams_type, 1, 'CAPTURE',
                                          2, 'PROPAGATION',
                                          3, 'APPLY',
                                          4, 'DEQUEUE', 'UNDEFINED'),
       decode(rule_type, 1, 'DML',
                         2, 'DDL', 'UNKNOWN'),
       decode(include_tagged_lcr, 0, 'NO',
                                  1, 'YES'),
       source_database, rule_name, rule_owner, rule_condition
  from "_DBA_STREAMS_RULES"
 where object_type = 3;

CREATE OR REPLACE FORCE VIEW "DBA_STREAMS_MESSAGE_CONSUMERS"("STREAMS_NAME","QUEUE_NAME","QUEUE_OWNER","RULE_SET_NAME","RULE_SET_OWNER","NEGATIVE_RULE_SET_NAME","NEGATIVE_RULE_SET_OWNER","NOTIFICATION_TYPE","NOTIFICATION_ACTION","NOTIFICATION_CONTEXT") AS 
select streams_name, queue_name, queue_owner, rule_set_name, rule_set_owner,
       negative_rule_set_name, negative_rule_set_owner, notification_type,
       notification_action,
       decode(context_type,
              0, sys.anydata.ConvertRaw(user_context),
              1, any_context)
  from sys."_DBA_STREAMS_MSG_NOTIFICATIONS";

CREATE OR REPLACE FORCE VIEW "DBA_STREAMS_MESSAGE_RULES"("STREAMS_NAME","STREAMS_TYPE","MESSAGE_TYPE_NAME","MESSAGE_TYPE_OWNER","MESSAGE_RULE_VARIABLE","RULE_NAME","RULE_OWNER","RULE_CONDITION") AS 
select streams_name, decode(streams_type, 2, 'PROPAGATION',
                                          3, 'APPLY',
                                          4, 'DEQUEUE', 'UNDEFINED'),
       msg_type_name, msg_type_owner, msg_rule_var, rule_name,
       rule_owner, rule_condition
  from "_DBA_STREAMS_MESSAGE_RULES";

CREATE OR REPLACE FORCE VIEW "DBA_STREAMS_NEWLY_SUPPORTED"("OWNER","TABLE_NAME","REASON","COMPATIBLE") AS 
select owner, table_name, reason, compatible
    from "_DBA_STREAMS_NEWLY_SUPTED_10_1";

CREATE OR REPLACE FORCE VIEW "DBA_STREAMS_RULES"("STREAMS_TYPE","STREAMS_NAME","RULE_SET_OWNER","RULE_SET_NAME","RULE_OWNER","RULE_NAME","RULE_CONDITION","RULE_SET_TYPE","STREAMS_RULE_TYPE","SCHEMA_NAME","OBJECT_NAME","SUBSETTING_OPERATION","DML_CONDITION","INCLUDE_TAGGED_LCR","SOURCE_DATABASE","RULE_TYPE","MESSAGE_TYPE_OWNER","MESSAGE_TYPE_NAME","MESSAGE_RULE_VARIABLE","ORIGINAL_RULE_CONDITION","SAME_RULE_CONDITION") AS 
select decode(r.streams_type, 1, 'CAPTURE',
                              2, 'PROPAGATION',
                              3, 'APPLY',
                              4, 'DEQUEUE') streams_type,
       r.streams_name, r.rule_set_owner, r.rule_set_name,
       r.rule_owner, r.rule_name, r.rule_condition, r.rule_set_type,
       decode(sr.object_type, 1, 'TABLE',
                              2, 'SCHEMA',
                              3, 'GLOBAL') streams_rule_type,
       sr.schema_name, sr.object_name,
       decode(sr.subsetting_operation, 1, 'INSERT',
                                       2, 'UPDATE',
                                       3, 'DELETE') subsetting_operation,
       sr.dml_condition,
       decode(sr.include_tagged_lcr, 0, 'NO',
                                     1, 'YES') include_tagged_lcr,
       sr.source_database,
       decode(sr.rule_type, 1, 'DML',
                            2, 'DDL') rule_type,
       smr.msg_type_owner message_type_owner,
       smr.msg_type_name message_type_name,
       smr.msg_rule_var message_rule_variable,
       NVL(sr.rule_condition, smr.rule_condition) original_rule_condition,
       decode(NVL(sr.rule_condition, smr.rule_condition),
              NULL, NULL,
              dbms_lob.substr(r.rule_condition), 'YES',
              decode(least(4001,dbms_lob.getlength(r.rule_condition)),
                     4001, NULL, 'NO')) same_rule_condition
  from "_DBA_STREAMS_RULES_H" r, streams$_rules sr, streams$_message_rules smr
  where r.rule_name = sr.rule_name(+)
    and r.rule_owner = sr.rule_owner(+)
    and r.streams_name = sr.streams_name(+)
    and r.streams_type = sr.streams_type(+)
    and r.rule_name = smr.rule_name(+)
    and r.rule_owner = smr.rule_owner(+)
    and r.streams_name = smr.streams_name(+)
    and r.streams_type = smr.streams_type(+);

CREATE OR REPLACE FORCE VIEW "DBA_STREAMS_SCHEMA_RULES"("STREAMS_NAME","STREAMS_TYPE","SCHEMA_NAME","RULE_TYPE","INCLUDE_TAGGED_LCR","SOURCE_DATABASE","RULE_NAME","RULE_OWNER","RULE_CONDITION") AS 
select streams_name, decode(streams_type, 1, 'CAPTURE',
                                          2, 'PROPAGATION',
                                          3, 'APPLY',
                                          4, 'DEQUEUE', 'UNDEFINED'),
       schema_name, decode(rule_type, 1, 'DML',
                                      2, 'DDL', 'UNKNOWN'),
       decode(include_tagged_lcr, 0, 'NO',
                                  1, 'YES'),
       source_database, rule_name, rule_owner, rule_condition
  from "_DBA_STREAMS_RULES"
 where object_type = 2;

CREATE OR REPLACE FORCE VIEW "DBA_STREAMS_TABLE_RULES"("STREAMS_NAME","STREAMS_TYPE","TABLE_OWNER","TABLE_NAME","RULE_TYPE","DML_CONDITION","SUBSETTING_OPERATION","INCLUDE_TAGGED_LCR","SOURCE_DATABASE","RULE_NAME","RULE_OWNER","RULE_CONDITION") AS 
select streams_name, decode(streams_type, 1, 'CAPTURE',
                                          2, 'PROPAGATION',
                                          3, 'APPLY',
                                          4, 'DEQUEUE', 'UNDEFINED'),
       schema_name, object_name, decode(rule_type, 1, 'DML',
                                                   2, 'DDL', 'UNKNOWN'),
       dml_condition, decode(subsetting_operation, 1, 'INSERT',
                                                   2, 'UPDATE',
                                                   3, 'DELETE'),
       decode(include_tagged_lcr, 0, 'NO',
                                  1, 'YES'),
       source_database, rule_name, rule_owner, rule_condition
  from "_DBA_STREAMS_RULES"
 where object_type = 1;

CREATE OR REPLACE FORCE VIEW "DBA_STREAMS_TRANSFORM_FUNCTION"("RULE_OWNER","RULE_NAME","VALUE_TYPE","TRANSFORM_FUNCTION_NAME") AS 
select r.rule_owner, r.rule_name, SYS.ANYDATA.GetTypeName(ctx.nvn_value),
       DECODE(SYS.ANYDATA.GetTypeName(ctx.nvn_value),
              'SYS.VARCHAR2', SYS.ANYDATA.AccessVarchar2(ctx.nvn_value),
              NULL)
from   DBA_RULES r, table(r.rule_action_context.actx_list) ctx
where  ctx.nvn_name = 'STREAMS$_TRANSFORM_FUNCTION';

CREATE OR REPLACE FORCE VIEW "DBA_STREAMS_UNSUPPORTED"("OWNER","TABLE_NAME","REASON","AUTO_FILTERED") AS 
select owner, table_name, reason, auto_filtered
   from (select * from "_DBA_STREAMS_UNSUPPORTED_9_2" union
         select * from "_DBA_STREAMS_UNSUPPORTED_10_1")
   where compatible = dbms_logrep_util.get_str_compat();

CREATE OR REPLACE FORCE VIEW "DBA_SUBPARTITION_TEMPLATES"("USER_NAME","TABLE_NAME","SUBPARTITION_NAME","SUBPARTITION_POSITION","TABLESPACE_NAME","HIGH_BOUND") AS 
select u.name, o.name, st.spart_name, st.spart_position + 1, ts.name,
       st.hiboundval
from sys.obj$ o, sys.defsubpart$ st, sys.ts$ ts, sys.user$ u
where st.bo# = o.obj# and st.ts# = ts.ts#(+) and o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "DBA_SUBPART_COL_STATISTICS"("OWNER","TABLE_NAME","SUBPARTITION_NAME","COLUMN_NAME","NUM_DISTINCT","LOW_VALUE","HIGH_VALUE","DENSITY","NUM_NULLS","NUM_BUCKETS","SAMPLE_SIZE","LAST_ANALYZED","GLOBAL_STATS","USER_STATS","AVG_COL_LEN","HISTOGRAM") AS 
select u.name, o.name, o.subname, tsp.cname, h.distcnt, h.lowval, h.hival,
       h.density, h.null_cnt,
       case when h.bucket_cnt > 255 then h.row_cnt else
         decode(h.row_cnt, h.distcnt, h.row_cnt, h.bucket_cnt)
       end,
       h.sample_size, h.timestamp#,
       decode(bitand(h.spare2, 2), 2, 'YES', 'NO'),
       decode(bitand(h.spare2, 1), 1, 'YES', 'NO'),
       h.avgcln,
       case when h.bucket_cnt > 255 then 'FREQUENCY' else
         decode(nvl(h.row_cnt, 0), 0, 'NONE',
                                   h.distcnt, 'FREQUENCY', 'HEIGHT BALANCED')
       end
from sys.obj$ o, sys.hist_head$ h, tsp$ tsp, user$ u
where o.obj# = tsp.obj# and tsp.obj# = h.obj#(+)
  and tsp.intcol# = h.intcol#(+)
  and o.type# = 34 /* TABLE SUBPARTITION */
  and o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "DBA_SUBPART_HISTOGRAMS"("OWNER","TABLE_NAME","SUBPARTITION_NAME","COLUMN_NAME","BUCKET_NUMBER","ENDPOINT_VALUE","ENDPOINT_ACTUAL_VALUE") AS 
select u.name,
       o.name, o.subname,
       tsp.cname,
       h.bucket,
       h.endpoint,
       h.epvalue
from sys.obj$ o, sys.histgrm$ h, sys.user$ u, tsp$ tsp
where o.obj# = tsp.obj# and tsp.obj# = h.obj#
  and tsp.intcol# = h.intcol#
  and o.type# = 34 /* TABLE SUBPARTITION */
  and o.owner# = u.user#
union
select u.name,
       o.name, o.subname,
       tsp.cname,
       0,
       h.minimum,
       null
from sys.obj$ o, sys.hist_head$ h, sys.user$ u, tsp$ tsp
where o.obj# = tsp.obj# and tsp.obj# = h.obj#
  and tsp.intcol# = h.intcol#
  and o.type# = 34 /* TABLE SUBPARTITION */
  and h.bucket_cnt = 1
  and o.owner# = u.user#
union
select u.name,
       o.name, o.subname,
       tsp.cname,
       1,
       h.maximum,
       null
from sys.obj$ o, sys.hist_head$ h, sys.user$ u, tsp$ tsp
where o.obj# = tsp.obj# and tsp.obj# = h.obj#
  and tsp.intcol# = h.intcol#
  and o.type# = 34 /* TABLE SUBPARTITION */
  and h.bucket_cnt = 1
  and o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "DBA_SUBPART_KEY_COLUMNS"("OWNER","NAME","OBJECT_TYPE","COLUMN_NAME","COLUMN_POSITION") AS 
select u.name, o.name, 'TABLE',
  decode(bitand(c.property, 1), 1, a.name, c.name), spc.pos#
from   obj$ o, subpartcol$ spc, col$ c, user$ u, attrcol$ a
where  spc.obj# = o.obj# and spc.obj# = c.obj#
       and c.intcol# = spc.intcol#
       and u.user# = o.owner#
       and c.obj# = a.obj#(+) and c.intcol# = a.intcol#(+)
union
select u.name, o.name, 'INDEX',
  decode(bitand(c.property, 1), 1, a.name, c.name), spc.pos#
from   obj$ o, subpartcol$ spc, col$ c, user$ u, ind$ i, attrcol$ a
where  spc.obj# = i.obj# and i.obj# = o.obj# and i.bo# = c.obj#
       and c.intcol# = spc.intcol#
       and u.user# = o.owner#
       and c.obj# = a.obj#(+) and c.intcol# = a.intcol#(+);

CREATE OR REPLACE FORCE VIEW "DBA_SUBSCRIBED_COLUMNS"("HANDLE","SOURCE_SCHEMA_NAME","SOURCE_TABLE_NAME","COLUMN_NAME","SUBSCRIPTION_NAME") AS 
SELECT
   sc.handle, t.source_schema_name, t.source_table_name, sc.column_name,
   s.subscription_name
  FROM sys.cdc_subscribed_columns$ sc, sys.cdc_change_tables$ t,
       sys.cdc_subscribers$ s, sys.user$ u
  WHERE sc.change_table_obj#=t.obj# AND
        s.handle = sc.handle AND
        s.username = u.name AND
        u.user# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "DBA_SUBSCRIBED_TABLES"("HANDLE","SOURCE_SCHEMA_NAME","SOURCE_TABLE_NAME","VIEW_NAME","CHANGE_SET_NAME","SUBSCRIPTION_NAME") AS 
SELECT
   st.handle, t.source_schema_name, t.source_table_name, st.view_name,
   t.change_set_name, s.subscription_name
  FROM sys.cdc_subscribed_tables$ st, sys.cdc_change_tables$ t,
       sys.cdc_subscribers$ s
  WHERE st.change_table_obj#=t.obj# AND
        s.handle = st.handle;

CREATE OR REPLACE FORCE VIEW "DBA_SUBSCRIPTIONS"("HANDLE","SET_NAME","USERNAME","CREATED","STATUS","EARLIEST_SCN","LATEST_SCN","DESCRIPTION","LAST_PURGED","LAST_EXTENDED","SUBSCRIPTION_NAME") AS 
SELECT
   s.handle, s.set_name, s.username, s.created, s.status, s.earliest_scn,
   s.latest_scn, s.description, s.last_purged, s.last_extended,
   s.subscription_name
  FROM sys.cdc_subscribers$ s;

CREATE OR REPLACE FORCE VIEW "DBA_SUMMARIES"("OWNER","SUMMARY_NAME","CONTAINER_OWNER","CONTAINER_NAME","LAST_REFRESH_SCN","LAST_REFRESH_DATE","REFRESH_METHOD","SUMMARY","FULLREFRESHTIM","INCREFRESHTIM","CONTAINS_VIEWS","UNUSABLE","RESTRICTED_SYNTAX","INC_REFRESHABLE","KNOWN_STALE","QUERY_LEN","QUERY") AS 
select u.name, o.name, u.name, s.containernam,
       s.lastrefreshscn, s.lastrefreshdate,
       decode (s.refreshmode, 0, 'NONE', 1, 'ANY', 2, 'INCREMENTAL', 3,'FULL'),
       decode(bitand(s.pflags, 25165824), 25165824, 'N', 'Y'),
       s.fullrefreshtim, s.increfreshtim,
       decode(bitand(s.pflags, 48), 0, 'N', 'Y'),
       decode(bitand(s.mflags, 64), 0, 'N', 'Y'), /* QSMQSUM_UNUSABLE */
       decode(bitand(s.pflags, 1294319), 0, 'Y', 'N'),
       decode(bitand(s.pflags, 236879743), 0, 'Y', 'N'),
       decode(bitand(s.mflags, 1), 0, 'N', 'Y'), /* QSMQSUM_KNOWNSTL */
       s.sumtextlen,s.sumtext
from sys.user$ u, sys.sum$ s, sys.obj$ o
where o.owner# = u.user#
  and o.obj# = s.obj#
  and bitand(s.xpflags, 8388608) = 0  /* NOT REWRITE EQUIVALENCE SUMMARY */;

CREATE OR REPLACE FORCE VIEW "DBA_SUMMARY_AGGREGATES"("OWNER","SUMMARY_NAME","POSITION_IN_SELECT","CONTAINER_COLUMN","AGG_FUNCTION","DISTINCTFLAG","MEASURE") AS 
select u.name, o.name, sa.sumcolpos#, c.name,
       decode(sa.aggfunction, 15, 'AVG', 16, 'SUM', 17, 'COUNT',
                              18, 'MIN', 19, 'MAX',
                              97, 'VARIANCE', 98, 'STDDEV',
                              440, 'USER'),
       decode(sa.flags, 0, 'N', 'Y'),
       sa.aggtext
from sys.sumagg$ sa, sys.obj$ o, sys.user$ u, sys.sum$ s, sys.col$ c
where sa.sumobj# = o.obj#
  AND o.owner# = u.user#
  AND sa.sumobj# = s.obj#
  AND c.obj# = s.containerobj#
  AND c.col# = sa.containercol#
  AND bitand(s.xpflags, 8388608) = 0 /* NOT REWRITE EQUIVALENCE SUMMARY */;

CREATE OR REPLACE FORCE VIEW "DBA_SUMMARY_DETAIL_TABLES"("OWNER","SUMMARY_NAME","DETAIL_OWNER","DETAIL_RELATION","DETAIL_TYPE","DETAIL_ALIAS") AS 
select u.name, o.name, du.name,  do.name,
       decode (sd.detailobjtype, 1, 'TABLE', 2, 'VIEW',
                                3, 'SNAPSHOT', 4, 'CONTAINER', 'UNDEFINED'),
       sd.detailalias
from sys.user$ u, sys.sumdetail$ sd, sys.obj$ o, sys.obj$ do,
     sys.user$ du, sys.sum$ s
where o.owner# = u.user#
  and o.obj# = sd.sumobj#
  and do.obj# = sd.detailobj#
  and do.owner# = du.user#
  and s.obj# = sd.sumobj#
  and bitand(s.xpflags, 8388608) = 0 /* NOT REWRITE EQUIVALENCE SUMMARY */;

CREATE OR REPLACE FORCE VIEW "DBA_SUMMARY_JOINS"("OWNER","SUMMARY_NAME","DETAILOBJ1_OWNER","DETAILOBJ1_RELATION","DETAILOBJ1_COLUMN","OPERATOR","DETAILOBJ2_OWNER","DETAILOBJ2_RELATION","DETAILOBJ2_COLUMN") AS 
select u.name, o.name,
       u1.name, o1.name, c1.name, '=',
       u2.name, o2.name, c2.name
from sys.sumjoin$ sj, sys.obj$ o, sys.user$ u,
     sys.obj$ o1, sys.user$ u1, sys.col$ c1,
     sys.obj$ o2, sys.user$ u2, sys.col$ c2,
     sys.sum$ s
where sj.sumobj# = o.obj#
  AND o.owner# = u.user#
  AND sj.tab1obj# = o1.obj#
  AND o1.owner# = u1.user#
  AND sj.tab1obj# = c1.obj#
  AND sj.tab1col# = c1.intcol#
  AND sj.tab2obj# = o2.obj#
  AND o2.owner# = u2.user#
  AND sj.tab2obj# = c2.obj#
  AND sj.tab2col# = c2.intcol#
  AND s.obj# = sj.sumobj#
  AND bitand(s.xpflags, 8388608) = 0 /* NOT REWRITE EQUIVALENCE SUMMARY */;

CREATE OR REPLACE FORCE VIEW "DBA_SUMMARY_KEYS"("OWNER","SUMMARY_NAME","POSITION_IN_SELECT","CONTAINER_COLUMN","DETAILOBJ_OWNER","DETAILOBJ_NAME","DETAILOBJ_ALIAS","DETAILOBJ_TYPE","DETAILOBJ_COLUMN") AS 
select u1.name, o1.name, sk.sumcolpos#, c1.name,
       u2.name, o2.name, sd.detailalias,
       decode(sk.detailobjtype, 1, 'TABLE', 2, 'VIEW'), c2.name
from sys.sumkey$ sk, sys.obj$ o1, sys.user$ u1, sys.col$ c1, sys.sum$ s,
     sys.sumdetail$ sd, sys.obj$ o2, sys.user$ u2, sys.col$ c2
where sk.sumobj# = o1.obj#
  AND o1.owner# = u1.user#
  AND sk.sumobj# = s.obj#
  AND s.containerobj# = c1.obj#
  AND c1.col# = sk.containercol#
  AND sk.detailobj# = o2.obj#
  AND o2.owner# = u2.user#
  AND sk.sumobj# = sd.sumobj#
  AND sk.detailobj# = sd.detailobj#
  AND sk.detailobj# = c2.obj#
  AND sk.detailcol# = c2.intcol#
  AND bitand(s.xpflags, 8388608) = 0 /* NOT REWRITE EQUIVALENCE SUMMARY */;

CREATE OR REPLACE FORCE VIEW "DBA_SYNONYMS"("OWNER","SYNONYM_NAME","TABLE_OWNER","TABLE_NAME","DB_LINK") AS 
select u.name, o.name, s.owner, s.name, s.node
from sys.user$ u, sys.syn$ s, sys.obj$ o
where o.obj# = s.obj#
  and o.type# = 5
  and o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "DBA_SYS_PRIVS"("GRANTEE","PRIVILEGE","ADMIN_OPTION") AS 
select u.name,spm.name,decode(min(option$),1,'YES','NO')
from  sys.system_privilege_map spm, sys.sysauth$ sa, user$ u
where sa.grantee#=u.user# and sa.privilege#=spm.privilege
group by u.name,spm.name;

CREATE OR REPLACE FORCE VIEW "DBA_TABLES"("OWNER","TABLE_NAME","TABLESPACE_NAME","CLUSTER_NAME","IOT_NAME","PCT_FREE","PCT_USED","INI_TRANS","MAX_TRANS","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENTS","MAX_EXTENTS","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","LOGGING","BACKED_UP","NUM_ROWS","BLOCKS","EMPTY_BLOCKS","AVG_SPACE","CHAIN_CNT","AVG_ROW_LEN","AVG_SPACE_FREELIST_BLOCKS","NUM_FREELIST_BLOCKS","DEGREE","INSTANCES","CACHE","TABLE_LOCK","SAMPLE_SIZE","LAST_ANALYZED","PARTITIONED","IOT_TYPE","TEMPORARY","SECONDARY","NESTED","BUFFER_POOL","ROW_MOVEMENT","GLOBAL_STATS","USER_STATS","DURATION","SKIP_CORRUPT","MONITORING","CLUSTER_OWNER","DEPENDENCIES","COMPRESSION","DROPPED") AS 
select u.name, o.name, decode(bitand(t.property,2151678048), 0, ts.name, null),
       decode(bitand(t.property, 1024), 0, null, co.name),
       decode((bitand(t.property, 512)+bitand(t.flags, 536870912)),
              0, null, co.name),
       decode(bitand(t.property, 32+64), 0, mod(t.pctfree$, 100), 64, 0, null),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
          decode(bitand(t.property, 32+64), 0, t.pctused$, 64, 0, null)),
       decode(bitand(t.property, 32), 0, t.initrans, null),
       decode(bitand(t.property, 32), 0, t.maxtrans, null),
       s.iniexts * ts.blocksize,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extsize * ts.blocksize),
       s.minexts, s.maxexts,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extpct),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
         decode(bitand(o.flags, 2), 2, 1, decode(s.lists, 0, 1, s.lists))),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
         decode(bitand(o.flags, 2), 2, 1, decode(s.groups, 0, 1, s.groups))),
       decode(bitand(t.property, 32+64), 0,
                decode(bitand(t.flags, 32), 0, 'YES', 'NO'), null),
       decode(bitand(t.flags,1), 0, 'Y', 1, 'N', '?'),
       t.rowcnt,
       decode(bitand(t.property, 64), 0, t.blkcnt, null),
       decode(bitand(t.property, 64), 0, t.empcnt, null),
       t.avgspc, t.chncnt, t.avgrln, t.avgspc_flb,
       decode(bitand(t.property, 64), 0, t.flbcnt, null),
       lpad(decode(t.degree, 32767, 'DEFAULT', nvl(t.degree,1)),10),
       lpad(decode(t.instances, 32767, 'DEFAULT', nvl(t.instances,1)),10),
       lpad(decode(bitand(t.flags, 8), 8, 'Y', 'N'),5),
       decode(bitand(t.flags, 6), 0, 'ENABLED', 'DISABLED'),
       t.samplesize, t.analyzetime,
       decode(bitand(t.property, 32), 32, 'YES', 'NO'),
       decode(bitand(t.property, 64), 64, 'IOT',
               decode(bitand(t.property, 512), 512, 'IOT_OVERFLOW',
               decode(bitand(t.flags, 536870912), 536870912, 'IOT_MAPPING', null))),
       decode(bitand(o.flags, 2), 0, 'N', 2, 'Y', 'N'),
       decode(bitand(o.flags, 16), 0, 'N', 16, 'Y', 'N'),
       decode(bitand(t.property, 8192), 8192, 'YES',
              decode(bitand(t.property, 1), 0, 'NO', 'YES')),
       decode(bitand(o.flags, 2), 2, 'DEFAULT',
             decode(s.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL)),
       decode(bitand(t.flags, 131072), 131072, 'ENABLED', 'DISABLED'),
       decode(bitand(t.flags, 512), 0, 'NO', 'YES'),
       decode(bitand(t.flags, 256), 0, 'NO', 'YES'),
       decode(bitand(o.flags, 2), 0, NULL,
          decode(bitand(t.property, 8388608), 8388608,
                 'SYS$SESSION', 'SYS$TRANSACTION')),
       decode(bitand(t.flags, 1024), 1024, 'ENABLED', 'DISABLED'),
       decode(bitand(o.flags, 2), 2, 'NO',
           decode(bitand(t.property, 2147483648), 2147483648, 'NO',
              decode(ksppcv.ksppstvl, 'TRUE', 'YES', 'NO'))),
       decode(bitand(t.property, 1024), 0, null, cu.name),
       decode(bitand(t.flags, 8388608), 8388608, 'ENABLED', 'DISABLED'),
       decode(bitand(t.property, 32), 32, null,
                decode(bitand(s.spare1, 2048), 2048, 'ENABLED', 'DISABLED')),
       decode(bitand(o.flags, 128), 128, 'YES', 'NO')
from sys.user$ u, sys.ts$ ts, sys.seg$ s, sys.obj$ co, sys.tab$ t, sys.obj$ o,
     sys.obj$ cx, sys.user$ cu, x$ksppcv ksppcv, x$ksppi ksppi
where o.owner# = u.user#
  and o.obj# = t.obj#
  and bitand(t.property, 1) = 0
  and bitand(o.flags, 128) = 0
  and t.bobj# = co.obj# (+)
  and t.ts# = ts.ts#
  and t.file# = s.file# (+)
  and t.block# = s.block# (+)
  and t.ts# = s.ts# (+)
  and t.dataobj# = cx.obj# (+)
  and cx.owner# = cu.user# (+)
  and ksppi.indx = ksppcv.indx
  and ksppi.ksppinm = '_dml_monitoring_enabled';

CREATE OR REPLACE FORCE VIEW "DBA_TABLESPACES"("TABLESPACE_NAME","BLOCK_SIZE","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENTS","MAX_EXTENTS","PCT_INCREASE","MIN_EXTLEN","STATUS","CONTENTS","LOGGING","FORCE_LOGGING","EXTENT_MANAGEMENT","ALLOCATION_TYPE","PLUGGED_IN","SEGMENT_SPACE_MANAGEMENT","DEF_TAB_COMPRESSION","RETENTION","BIGFILE") AS 
select ts.name, ts.blocksize, ts.blocksize * ts.dflinit,
          decode(bitand(ts.flags, 3), 1, to_number(NULL),
                 ts.blocksize * ts.dflincr),
          ts.dflminext,
          decode(ts.contents$, 1, to_number(NULL), ts.dflmaxext),
          decode(bitand(ts.flags, 3), 1, to_number(NULL), ts.dflextpct),
          ts.blocksize * ts.dflminlen,
          decode(ts.online$, 1, 'ONLINE', 2, 'OFFLINE',
                 4, 'READ ONLY', 'UNDEFINED'),
          decode(ts.contents$, 0, (decode(bitand(ts.flags, 16), 16, 'UNDO',
                 'PERMANENT')), 1, 'TEMPORARY'),
          decode(bitand(ts.dflogging, 1), 0, 'NOLOGGING', 1, 'LOGGING'),
          decode(bitand(ts.dflogging, 2), 0, 'NO', 2, 'YES'),
          decode(ts.bitmapped, 0, 'DICTIONARY', 'LOCAL'),
          decode(bitand(ts.flags, 3), 0, 'USER', 1, 'SYSTEM', 2, 'UNIFORM',
                 'UNDEFINED'),
          decode(ts.plugged, 0, 'NO', 'YES'),
          decode(bitand(ts.flags,32), 32,'AUTO', 'MANUAL'),
          decode(bitand(ts.flags,64), 64,'ENABLED', 'DISABLED'),
          decode(bitand(ts.flags,16), 16, (decode(bitand(ts.flags, 512), 512,
                 'GUARANTEE', 'NOGUARANTEE')), 'NOT APPLY'),
          decode(bitand(ts.flags,256), 256, 'YES', 'NO')
from sys.ts$ ts
where ts.online$ != 3
and bitand(flags,2048) != 2048;

CREATE OR REPLACE FORCE VIEW "DBA_TABLESPACE_GROUPS"("GROUP_NAME","TABLESPACE_NAME") AS 
select ts2.name, ts.name
from ts$ ts, ts$ ts2
where ts.online$ != 3
and bitand(ts.flags,1024) = 1024
    and ts.dflmaxext  = ts2.ts#;

CREATE OR REPLACE FORCE VIEW "DBA_TABLESPACE_USAGE_METRICS"("TABLESPACE_NAME","USED_SPACE","TABLESPACE_SIZE","USED_PERCENT") AS 
SELECT t.name, sum(f.allocated_space), sum(f.file_maxsize),
     (sum(f.allocated_space)/sum(f.file_maxsize))*100
     FROM sys.ts$ t, v$filespace_usage f
     WHERE
     t.online$ != 3 and
     t.bitmapped <> 0 and
     t.contents$ = 0 and
     bitand(t.flags, 16) <> 16 and
     t.ts# = f.tablespace_id
     GROUP BY t.name, f.tablespace_id
union
 SELECT t.name, sum(f.allocated_space), sum(f.file_maxsize),
     (sum(f.allocated_space)/sum(f.file_maxsize))*100
     FROM sys.ts$ t, v$filespace_usage f
     WHERE
     t.online$ != 3 and
     t.bitmapped <> 0 and
     t.contents$ <> 0 and
     f.flag = 6 and
     t.ts# = f.tablespace_id
     GROUP BY t.name, f.tablespace_id
union
 SELECT t.name, sum(f.allocated_space), sum(f.file_maxsize),
     (sum(f.allocated_space)/sum(f.file_maxsize))*100
     FROM sys.ts$ t, gv$filespace_usage f, gv$parameter param
     WHERE
     t.online$ != 3 and
     t.bitmapped <> 0 and
     f.inst_id = param.inst_id and
     param.name = 'undo_tablespace' and
     t.name = param.value and
     f.flag = 6 and
     t.ts# = f.tablespace_id
     GROUP BY t.name, f.tablespace_id;

CREATE OR REPLACE FORCE VIEW "DBA_TAB_COLS"("OWNER","TABLE_NAME","COLUMN_NAME","DATA_TYPE","DATA_TYPE_MOD","DATA_TYPE_OWNER","DATA_LENGTH","DATA_PRECISION","DATA_SCALE","NULLABLE","COLUMN_ID","DEFAULT_LENGTH","DATA_DEFAULT","NUM_DISTINCT","LOW_VALUE","HIGH_VALUE","DENSITY","NUM_NULLS","NUM_BUCKETS","LAST_ANALYZED","SAMPLE_SIZE","CHARACTER_SET_NAME","CHAR_COL_DECL_LENGTH","GLOBAL_STATS","USER_STATS","AVG_COL_LEN","CHAR_LENGTH","CHAR_USED","V80_FMT_IMAGE","DATA_UPGRADED","HIDDEN_COLUMN","VIRTUAL_COLUMN","SEGMENT_COLUMN_ID","INTERNAL_COLUMN_ID","HISTOGRAM","QUALIFIED_COL_NAME") AS 
select u.name, o.name,
       c.name,
       decode(c.type#, 1, decode(c.charsetform, 2, 'NVARCHAR2', 'VARCHAR2'),
                       2, decode(c.scale, null,
                                 decode(c.precision#, null, 'NUMBER', 'FLOAT'),
                                 'NUMBER'),
                       8, 'LONG',
                       9, decode(c.charsetform, 2, 'NCHAR VARYING', 'VARCHAR'),
                       12, 'DATE',
                       23, 'RAW', 24, 'LONG RAW',
                       58, nvl2(ac.synobj#, (select o.name from obj$ o
                                where o.obj#=ac.synobj#), ot.name),
                       69, 'ROWID',
                       96, decode(c.charsetform, 2, 'NCHAR', 'CHAR'),
                       100, 'BINARY_FLOAT',
                       101, 'BINARY_DOUBLE',
                       105, 'MLSLABEL',
                       106, 'MLSLABEL',
                       111, nvl2(ac.synobj#, (select o.name from obj$ o
                                 where o.obj#=ac.synobj#), ot.name),
                       112, decode(c.charsetform, 2, 'NCLOB', 'CLOB'),
                       113, 'BLOB', 114, 'BFILE', 115, 'CFILE',
                       121, nvl2(ac.synobj#, (select o.name from obj$ o
                                 where o.obj#=ac.synobj#), ot.name),
                       122, nvl2(ac.synobj#, (select o.name from obj$ o
                                 where o.obj#=ac.synobj#), ot.name),
                       123, nvl2(ac.synobj#, (select o.name from obj$ o
                                 where o.obj#=ac.synobj#), ot.name),
                       178, 'TIME(' ||c.scale|| ')',
                       179, 'TIME(' ||c.scale|| ')' || ' WITH TIME ZONE',
                       180, 'TIMESTAMP(' ||c.scale|| ')',
                       181, 'TIMESTAMP(' ||c.scale|| ')' || ' WITH TIME ZONE',
                       231, 'TIMESTAMP(' ||c.scale|| ')' || ' WITH LOCAL TIME ZONE',
                       182, 'INTERVAL YEAR(' ||c.precision#||') TO MONTH',
                       183, 'INTERVAL DAY(' ||c.precision#||') TO SECOND(' ||
                             c.scale || ')',
                       208, 'UROWID',
                       'UNDEFINED'),
       decode(c.type#, 111, 'REF'),
       nvl2(ac.synobj#, (select u.name from user$ u, obj$ o
            where o.owner#=u.user# and o.obj#=ac.synobj#), ut.name),
       c.length, c.precision#, c.scale,
       decode(sign(c.null$),-1,'D', 0, 'Y', 'N'),
       decode(c.col#, 0, to_number(null), c.col#), c.deflength,
       c.default$, h.distcnt, h.lowval, h.hival, h.density, h.null_cnt,
       case when h.bucket_cnt > 255 then h.row_cnt else
         decode(h.row_cnt, h.distcnt, h.row_cnt, h.bucket_cnt)
       end,
       h.timestamp#, h.sample_size,
       decode(c.charsetform, 1, 'CHAR_CS',
                             2, 'NCHAR_CS',
                             3, NLS_CHARSET_NAME(c.charsetid),
                             4, 'ARG:'||c.charsetid),
       decode(c.charsetid, 0, to_number(NULL),
                           nls_charset_decl_len(c.length, c.charsetid)),
       decode(bitand(h.spare2, 2), 2, 'YES', 'NO'),
       decode(bitand(h.spare2, 1), 1, 'YES', 'NO'),
       h.avgcln,
       c.spare3,
       decode(c.type#, 1, decode(bitand(c.property, 8388608), 0, 'B', 'C'),
                      96, decode(bitand(c.property, 8388608), 0, 'B', 'C'),
                      null),
       decode(bitand(ac.flags, 128), 128, 'YES', 'NO'),
       decode(o.status, 1, decode(bitand(ac.flags, 256), 256, 'NO', 'YES'),
                        decode(bitand(ac.flags, 2), 2, 'NO',
                               decode(bitand(ac.flags, 4), 4, 'NO',
                                      decode(bitand(ac.flags, 8), 8, 'NO',
                                             'N/A')))),
       decode(c.property, 0, 'NO', decode(bitand(c.property, 32), 32, 'YES',
                                          'NO')),
       decode(c.property, 0, 'NO', decode(bitand(c.property, 8), 8, 'YES',
                                          'NO')),
       decode(c.segcol#, 0, to_number(null), c.segcol#), c.intcol#,
       case when h.bucket_cnt > 255 then 'FREQUENCY' else
         decode(nvl(h.row_cnt, 0), 0, 'NONE',
                                   h.distcnt, 'FREQUENCY', 'HEIGHT BALANCED')
       end,
       decode(bitand(c.property, 1024), 1024,
              (select decode(bitand(cl.property, 1), 1, rc.name, cl.name)
               from sys.col$ cl, attrcol$ rc where cl.intcol# = c.intcol#-1
               and cl.obj# = c.obj# and c.obj# = rc.obj#(+) and
               cl.intcol# = rc.intcol#(+)),
              decode(bitand(c.property, 1), 0, c.name,
                     (select tc.name from sys.attrcol$ tc
                      where c.obj# = tc.obj# and c.intcol# = tc.intcol#)))
from sys.col$ c, sys.obj$ o, sys.hist_head$ h, sys.user$ u,
     sys.coltype$ ac, sys.obj$ ot, sys.user$ ut
where o.obj# = c.obj#
  and o.owner# = u.user#
  and c.obj# = h.obj#(+) and c.intcol# = h.intcol#(+)
  and c.obj# = ac.obj#(+) and c.intcol# = ac.intcol#(+)
  and ac.toid = ot.oid$(+)
  and ot.type#(+) = 13
  and ot.owner# = ut.user#(+)
  and (o.type# in (3, 4)                                     /* cluster, view */
       or
       (o.type# = 2     /* tables, excluding iot - overflow and nested tables */
        and
        not exists (select null
                      from sys.tab$ t
                     where t.obj# = o.obj#
                       and (bitand(t.property, 512) = 512 or
                            bitand(t.property, 8192) = 8192))));

CREATE OR REPLACE FORCE VIEW "DBA_TAB_COLUMNS"("OWNER","TABLE_NAME","COLUMN_NAME","DATA_TYPE","DATA_TYPE_MOD","DATA_TYPE_OWNER","DATA_LENGTH","DATA_PRECISION","DATA_SCALE","NULLABLE","COLUMN_ID","DEFAULT_LENGTH","DATA_DEFAULT","NUM_DISTINCT","LOW_VALUE","HIGH_VALUE","DENSITY","NUM_NULLS","NUM_BUCKETS","LAST_ANALYZED","SAMPLE_SIZE","CHARACTER_SET_NAME","CHAR_COL_DECL_LENGTH","GLOBAL_STATS","USER_STATS","AVG_COL_LEN","CHAR_LENGTH","CHAR_USED","V80_FMT_IMAGE","DATA_UPGRADED","HISTOGRAM") AS 
select OWNER, TABLE_NAME,
       COLUMN_NAME, DATA_TYPE, DATA_TYPE_MOD, DATA_TYPE_OWNER,
       DATA_LENGTH, DATA_PRECISION, DATA_SCALE, NULLABLE, COLUMN_ID,
       DEFAULT_LENGTH, DATA_DEFAULT, NUM_DISTINCT, LOW_VALUE, HIGH_VALUE,
       DENSITY, NUM_NULLS, NUM_BUCKETS, LAST_ANALYZED, SAMPLE_SIZE,
       CHARACTER_SET_NAME, CHAR_COL_DECL_LENGTH,
       GLOBAL_STATS, USER_STATS, AVG_COL_LEN, CHAR_LENGTH, CHAR_USED,
       V80_FMT_IMAGE, DATA_UPGRADED, HISTOGRAM
  from DBA_TAB_COLS
 where HIDDEN_COLUMN = 'NO';

CREATE OR REPLACE FORCE VIEW "DBA_TAB_COL_STATISTICS"("OWNER","TABLE_NAME","COLUMN_NAME","NUM_DISTINCT","LOW_VALUE","HIGH_VALUE","DENSITY","NUM_NULLS","NUM_BUCKETS","LAST_ANALYZED","SAMPLE_SIZE","GLOBAL_STATS","USER_STATS","AVG_COL_LEN","HISTOGRAM") AS 
select owner, table_name, column_name, num_distinct, low_value, high_value,
       density, num_nulls, num_buckets, last_analyzed, sample_size,
       global_stats, user_stats, avg_col_len, HISTOGRAM
from dba_tab_columns
where last_analyzed is not null
union all
select /* fixed table column stats */
       'SYS', ft.kqftanam, c.kqfconam,
       h.distcnt, h.lowval, h.hival,
       h.density, h.null_cnt,
       case when h.bucket_cnt > 255 then h.row_cnt else
         decode(h.row_cnt, h.distcnt, h.row_cnt, h.bucket_cnt)
       end,
       h.timestamp#, h.sample_size,
       decode(bitand(h.spare2, 2), 2, 'YES', 'NO'),
       decode(bitand(h.spare2, 1), 1, 'YES', 'NO'),
       h.avgcln,
       case when h.bucket_cnt > 255 then 'FREQUENCY' else
         decode(nvl(h.row_cnt, 0), 0, 'NONE',
                                   h.distcnt, 'FREQUENCY', 'HEIGHT BALANCED')
       end
from   sys.x$kqfta ft, sys.fixed_obj$ fobj,
         sys.x$kqfco c, sys.hist_head$ h
where
       ft.kqftaobj = fobj. obj#
       and c.kqfcotob = ft.kqftaobj
       and h.obj# = ft.kqftaobj
       and h.intcol# = c.kqfcocno
       /*
        * if fobj and st are not in sync (happens when db open read only
        * after upgrade), do not display stats.
        */
       and ft.kqftaver =
             fobj.timestamp - to_date('01-01-1991', 'DD-MM-YYYY')
       and h.timestamp# is not null;

CREATE OR REPLACE FORCE VIEW "DBA_TAB_COMMENTS"("OWNER","TABLE_NAME","TABLE_TYPE","COMMENTS") AS 
select u.name, o.name,
       decode(o.type#, 0, 'NEXT OBJECT', 1, 'INDEX', 2, 'TABLE', 3, 'CLUSTER',
                      4, 'VIEW', 5, 'SYNONYM', 'UNDEFINED'),
       c.comment$
from sys.obj$ o, sys.user$ u, sys.com$ c
where o.owner# = u.user#
  and (o.type# in (4)                                                /* view */
       or
       (o.type# = 2                                                /* tables */
        AND         /* excluding iot-overflow, nested or mv container tables */
        not exists (select null
                      from sys.tab$ t
                     where t.obj# = o.obj#
                       and (bitand(t.property, 512) = 512 or
                            bitand(t.property, 8192) = 8192 OR
                            bitand(t.property, 67108864) = 67108864))))
  and o.obj# = c.obj#(+)
  and c.col#(+) is null;

CREATE OR REPLACE FORCE VIEW "DBA_TAB_HISTOGRAMS"("OWNER","TABLE_NAME","COLUMN_NAME","ENDPOINT_NUMBER","ENDPOINT_VALUE","ENDPOINT_ACTUAL_VALUE") AS 
select /*+ ordered */ u.name,
       o.name,
       decode(bitand(c.property, 1), 1, a.name, c.name),
       h.bucket,
       h.endpoint,
       h.epvalue
from sys.user$ u, sys.obj$ o, sys.col$ c, sys.histgrm$ h, sys.attrcol$ a
where o.obj# = c.obj#
  and o.owner# = u.user#
  and c.obj# = h.obj# and c.intcol# = h.intcol#
  and (o.type# in (3, 4)                                     /* cluster, view */
       or
       (o.type# = 2     /* tables, excluding iot - overflow and nested tables */
        and
        not exists (select null
                      from sys.tab$ t
                     where t.obj# = o.obj#
                       and (bitand(t.property, 512) = 512 or
                            bitand(t.property, 8192) = 8192))))
  and c.obj# = a.obj#(+)
  and c.intcol# = a.intcol#(+)
union all
select /*+ ordered */ u.name,
       o.name,
       decode(bitand(c.property, 1), 1, a.name, c.name),
       0,
       h.minimum,
       null
from sys.user$ u, sys.obj$ o, sys.col$ c, sys.hist_head$ h, sys.attrcol$ a
where o.obj# = c.obj#
  and o.owner# = u.user#
  and c.obj# = h.obj# and c.intcol# = h.intcol#
  and (o.type# in (3, 4)                                     /* cluster, view */
       or
       (o.type# = 2     /* tables, excluding iot - overflow and nested tables */
        and
        not exists (select null
                      from sys.tab$ t
                     where t.obj# = o.obj#
                       and (bitand(t.property, 512) = 512 or
                            bitand(t.property, 8192) = 8192))))
  and h.bucket_cnt = 1
  and c.obj# = a.obj#(+)
  and c.intcol# = a.intcol#(+)
union all
select /*+ ordered */ u.name,
       o.name,
       decode(bitand(c.property, 1), 1, a.name, c.name),
       1,
       h.maximum,
       null
from sys.user$ u, sys.obj$ o, sys.col$ c, sys.hist_head$ h, sys.attrcol$ a
where o.obj# = c.obj#
  and o.owner# = u.user#
  and c.obj# = h.obj# and c.intcol# = h.intcol#
  and (o.type# in (3, 4)                                     /* cluster, view */
       or
       (o.type# = 2     /* tables, excluding iot - overflow and nested tables */
        and
        not exists (select null
                      from sys.tab$ t
                     where t.obj# = o.obj#
                       and (bitand(t.property, 512) = 512 or
                            bitand(t.property, 8192) = 8192))))
  and h.bucket_cnt = 1
  and c.obj# = a.obj#(+)
  and c.intcol# = a.intcol#(+)
union all
select /*+ ordered */
       'SYS',
       ft.kqftanam,
       c.kqfconam,
       h.bucket,
       h.endpoint,
       h.epvalue
from   sys.x$kqfta ft, sys.fixed_obj$ fobj, sys.x$kqfco c, sys.histgrm$ h
where  ft.kqftaobj = fobj. obj#
  and c.kqfcotob = ft.kqftaobj
  and h.obj# = ft.kqftaobj
  and h.intcol# = c.kqfcocno
  /*
   * if fobj and st are not in sync (happens when db open read only
   * after upgrade), do not display stats.
   */
  and ft.kqftaver =
         fobj.timestamp - to_date('01-01-1991', 'DD-MM-YYYY');

CREATE OR REPLACE FORCE VIEW "DBA_TAB_MODIFICATIONS"("TABLE_OWNER","TABLE_NAME","PARTITION_NAME","SUBPARTITION_NAME","INSERTS","UPDATES","DELETES","TIMESTAMP","TRUNCATED","DROP_SEGMENTS") AS 
select u.name, o.name, null, null,
       m.inserts, m.updates, m.deletes, m.timestamp,
       decode(bitand(m.flags,1),1,'YES','NO'),
       m.drop_segments
from sys.mon_mods$ m, sys.obj$ o, sys.tab$ t, sys.user$ u
where o.obj# = m.obj# and o.obj# = t.obj# and o.owner# = u.user#
union all
select u.name, o.name, o.subname, null,
       m.inserts, m.updates, m.deletes, m.timestamp,
       decode(bitand(m.flags,1),1,'YES','NO'),
       m.drop_segments
from sys.mon_mods$ m, sys.obj$ o, sys.user$ u
where o.owner# = u.user# and o.obj# = m.obj# and o.type#=19
union all
select u.name, o.name, o2.subname, o.subname,
       m.inserts, m.updates, m.deletes, m.timestamp,
       decode(bitand(m.flags,1),1,'YES','NO'),
       m.drop_segments
from sys.mon_mods$ m, sys.obj$ o, sys.tabsubpart$ tsp, sys.obj$ o2,
     sys.user$ u
where o.obj# = m.obj# and o.owner# = u.user# and
      o.obj# = tsp.obj# and o2.obj# = tsp.pobj#;

CREATE OR REPLACE FORCE VIEW "DBA_TAB_PARTITIONS"("TABLE_OWNER","TABLE_NAME","COMPOSITE","PARTITION_NAME","SUBPARTITION_COUNT","HIGH_VALUE","HIGH_VALUE_LENGTH","PARTITION_POSITION","TABLESPACE_NAME","PCT_FREE","PCT_USED","INI_TRANS","MAX_TRANS","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENT","MAX_EXTENT","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","LOGGING","COMPRESSION","NUM_ROWS","BLOCKS","EMPTY_BLOCKS","AVG_SPACE","CHAIN_CNT","AVG_ROW_LEN","SAMPLE_SIZE","LAST_ANALYZED","BUFFER_POOL","GLOBAL_STATS","USER_STATS") AS 
select u.name, o.name, 'NO', o.subname, 0,
       tp.hiboundval, tp.hiboundlen, tp.part#, ts.name,
       tp.pctfree$,
       decode(bitand(ts.flags, 32), 32, to_number(NULL), tp.pctused$),
       initrans, maxtrans, s.iniexts * ts.blocksize,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                               s.extsize * ts.blocksize),
       s.minexts, s.maxexts,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extpct),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
          decode(s.lists, 0, 1, s.lists)),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
          decode(s.groups, 0, 1, s.groups)),
       decode(mod(trunc(tp.flags / 4), 2), 0, 'YES', 'NO'),
       decode(bitand(s.spare1, 2048), 2048, 'ENABLED', 'DISABLED'),
       tp.rowcnt, tp.blkcnt, tp.empcnt, tp.avgspc, tp.chncnt, tp.avgrln,
       tp.samplesize, tp.analyzetime,
       decode(s.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL),
       decode(bitand(tp.flags, 16), 0, 'NO', 'YES'),
       decode(bitand(tp.flags, 8), 0, 'NO', 'YES')
from   obj$ o, tabpartv$ tp, ts$ ts, sys.seg$ s, user$ u
where  o.obj# = tp.obj# and ts.ts# = tp.ts# and u.user# = o.owner# and
       tp.file#=s.file# and tp.block#=s.block# and tp.ts#=s.ts#
union all -- IOT Partitions
select u.name, o.name, 'NO', o.subname, 0,
       tp.hiboundval, tp.hiboundlen, tp.part#, NULL,
       TO_NUMBER(NULL),TO_NUMBER(NULL),TO_NUMBER(NULL),TO_NUMBER(NULL),
       TO_NUMBER(NULL),
       TO_NUMBER(NULL),TO_NUMBER(NULL),TO_NUMBER(NULL),TO_NUMBER(NULL),
       TO_NUMBER(NULL),TO_NUMBER(NULL),
       NULL,
       'N/A',
       tp.rowcnt, TO_NUMBER(NULL), TO_NUMBER(NULL), 0, tp.chncnt, tp.avgrln,
       tp.samplesize, tp.analyzetime, NULL,
       decode(bitand(tp.flags, 16), 0, 'NO', 'YES'),
       decode(bitand(tp.flags, 8), 0, 'NO', 'YES')
from   obj$ o, tabpartv$ tp, user$ u
where  o.obj# = tp.obj# and o.owner# = u.user# and
       tp.file#=0 and tp.block#=0
union all -- Composite Partitions
select u.name, o.name, 'YES', o.subname, tcp.subpartcnt,
       tcp.hiboundval, tcp.hiboundlen, tcp.part#, ts.name,
       tcp.defpctfree, decode(bitand(ts.flags, 32), 32, to_number(NULL),
       tcp.defpctused),
       tcp.definitrans, tcp.defmaxtrans,
       tcp.definiexts, tcp.defextsize, tcp.defminexts, tcp.defmaxexts,
       tcp.defextpct,
       decode(bitand(ts.flags, 32), 32, to_number(NULL), tcp.deflists),
       decode(bitand(ts.flags, 32), 32, to_number(NULL), tcp.defgroups),
       decode(tcp.deflogging, 0, 'NONE', 1, 'YES', 2, 'NO', 'UNKNOWN'),
       decode(mod(tcp.spare2,256), 0, 'NONE', 1, 'ENABLED',  2, 'DISABLED',
                                   'UNKNOWN'),
       tcp.rowcnt, tcp.blkcnt, tcp.empcnt, tcp.avgspc, tcp.chncnt, tcp.avgrln,
       tcp.samplesize, tcp.analyzetime,
       decode(tcp.defbufpool, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL),
       decode(bitand(tcp.flags, 16), 0, 'NO', 'YES'),
       decode(bitand(tcp.flags, 8), 0, 'NO', 'YES')
from   obj$ o, tabcompartv$ tcp, ts$ ts, user$ u
where  o.obj# = tcp.obj# and tcp.defts# = ts.ts# and u.user# = o.owner#;

CREATE OR REPLACE FORCE VIEW "DBA_TAB_PRIVS"("GRANTEE","OWNER","TABLE_NAME","GRANTOR","PRIVILEGE","GRANTABLE","HIERARCHY") AS 
select ue.name, u.name, o.name, ur.name, tpm.name,
       decode(mod(oa.option$,2), 1, 'YES', 'NO'),
       decode(bitand(oa.option$,2), 2, 'YES', 'NO')
from sys.objauth$ oa, sys.obj$ o, sys.user$ u, sys.user$ ur, sys.user$ ue,
     table_privilege_map tpm
where oa.obj# = o.obj#
  and oa.grantor# = ur.user#
  and oa.grantee# = ue.user#
  and oa.col# is null
  and oa.privilege# = tpm.privilege
  and u.user# = o.owner#;

CREATE OR REPLACE FORCE VIEW "DBA_TAB_STATISTICS"("OWNER","TABLE_NAME","PARTITION_NAME","PARTITION_POSITION","SUBPARTITION_NAME","SUBPARTITION_POSITION","OBJECT_TYPE","NUM_ROWS","BLOCKS","EMPTY_BLOCKS","AVG_SPACE","CHAIN_CNT","AVG_ROW_LEN","AVG_SPACE_FREELIST_BLOCKS","NUM_FREELIST_BLOCKS","AVG_CACHED_BLOCKS","AVG_CACHE_HIT_RATIO","SAMPLE_SIZE","LAST_ANALYZED","GLOBAL_STATS","USER_STATS","STATTYPE_LOCKED") AS 
SELECT /* TABLES */
    u.name, o.name, NULL, NULL, NULL, NULL, 'TABLE', t.rowcnt,
    decode(bitand(t.property, 64), 0, t.blkcnt, TO_NUMBER(NULL)),
    decode(bitand(t.property, 64), 0, t.empcnt, TO_NUMBER(NULL)),
    decode(bitand(t.property, 64), 0, t.avgspc, TO_NUMBER(NULL)),
    t.chncnt, t.avgrln, t.avgspc_flb,
    decode(bitand(t.property, 64), 0, t.flbcnt, TO_NUMBER(NULL)),
    ts.cachedblk, ts.cachehit, t.samplesize, t.analyzetime,
    decode(bitand(t.flags, 512), 0, 'NO', 'YES'),
    decode(bitand(t.flags, 256), 0, 'NO', 'YES'),
    decode(bitand(t.trigflag, 67108864) + bitand(t.trigflag, 134217728),
           0, NULL, 67108864, 'DATA', 134217728, 'CACHE', 'ALL')
  FROM
    sys.user$ u, sys.obj$ o, sys.tab$ t, sys.tab_stats$ ts
  WHERE
        o.owner# = u.user#
    and o.obj# = t.obj#
    and bitand(t.property, 1) = 0 /* not a typed table */
    and o.obj# = ts.obj# (+)
  UNION ALL
  SELECT /* PARTITIONS,  NOT IOT */
    u.name, o.name, o.subname, tp.part#, NULL, NULL, 'PARTITION',
    tp.rowcnt, tp.blkcnt, tp.empcnt, tp.avgspc,
    tp.chncnt, tp.avgrln, TO_NUMBER(NULL), TO_NUMBER(NULL),
    ts.cachedblk, ts.cachehit, tp.samplesize, tp.analyzetime,
    decode(bitand(tp.flags, 16), 0, 'NO', 'YES'),
    decode(bitand(tp.flags, 8), 0, 'NO', 'YES'),
    decode(bitand(tab.trigflag, 67108864) + bitand(tab.trigflag, 134217728),
           0, NULL, 67108864, 'DATA', 134217728, 'CACHE', 'ALL')
  FROM
    sys.user$ u, sys.obj$ o, sys.tabpartv$ tp, sys.tab_stats$ ts, sys.tab$ tab
  WHERE
        o.owner# = u.user#
    and o.obj# = tp.obj#
    and tp.bo# = tab.obj#
    and tp.file# > 0
    and tp.block# > 0
    and o.obj# = ts.obj# (+)
  UNION ALL
  SELECT /* IOT Partitions */
    u.name, o.name, o.subname, tp.part#, NULL, NULL, 'PARTITION',
    tp.rowcnt, TO_NUMBER(NULL), TO_NUMBER(NULL), TO_NUMBER(NULL),
    tp.chncnt, tp.avgrln, TO_NUMBER(NULL), TO_NUMBER(NULL),
    TO_NUMBER(NULL), TO_NUMBER(NULL), tp.samplesize, tp.analyzetime,
    decode(bitand(tp.flags, 16), 0, 'NO', 'YES'),
    decode(bitand(tp.flags, 8), 0, 'NO', 'YES'),
    decode(bitand(tab.trigflag, 67108864) + bitand(tab.trigflag, 134217728),
           0, NULL, 67108864, 'DATA', 134217728, 'CACHE', 'ALL')
  FROM
    sys.user$ u, sys.obj$ o, sys.tabpartv$ tp, sys.tab$ tab
  WHERE
        o.owner# = u.user#
    and o.obj# = tp.obj#
    and tp.bo# = tab.obj#
    and tp.file# = 0
    and tp.block# = 0
  UNION ALL
  SELECT /* COMPOSITE PARTITIONS */
    u.name, o.name, o.subname, tcp.part#, NULL, NULL, 'PARTITION',
    tcp.rowcnt, tcp.blkcnt, tcp.empcnt, tcp.avgspc,
    tcp.chncnt, tcp.avgrln, NULL, NULL, ts.cachedblk, ts.cachehit,
    tcp.samplesize, tcp.analyzetime,
    decode(bitand(tcp.flags, 16), 0, 'NO', 'YES'),
    decode(bitand(tcp.flags, 8), 0, 'NO', 'YES'),
    decode(bitand(tab.trigflag, 67108864) + bitand(tab.trigflag, 134217728),
           0, NULL, 67108864, 'DATA', 134217728, 'CACHE', 'ALL')
  FROM
    sys.user$ u, sys.obj$ o, sys.tabcompartv$ tcp,
    sys.tab_stats$ ts, sys.tab$ tab
  WHERE
        o.owner# = u.user#
    and o.obj# = tcp.obj#
    and tcp.bo# = tab.obj#
    and o.obj# = ts.obj# (+)
  UNION ALL
  SELECT /* SUBPARTITIONS */
    u.name, po.name, po.subname, tcp.part#,  so.subname, tsp.subpart#,
   'SUBPARTITION', tsp.rowcnt,
    tsp.blkcnt, tsp.empcnt, tsp.avgspc,
    tsp.chncnt, tsp.avgrln, NULL, NULL,
    ts.cachedblk, ts.cachehit, tsp.samplesize, tsp.analyzetime,
    decode(bitand(tsp.flags, 16), 0, 'NO', 'YES'),
    decode(bitand(tsp.flags, 8), 0, 'NO', 'YES'),
    decode(bitand(tab.trigflag, 67108864) + bitand(tab.trigflag, 134217728),
           0, NULL, 67108864, 'DATA', 134217728, 'CACHE', 'ALL')
  FROM
    sys.user$ u, sys.obj$ po, sys.obj$ so, sys.tabcompartv$ tcp,
    sys.tabsubpartv$ tsp,  sys.tab_stats$ ts, sys.tab$ tab
  WHERE
        so.obj# = tsp.obj#
    and po.obj# = tcp.obj#
    and tcp.obj# = tsp.pobj#
    and tcp.bo# = tab.obj#
    and u.user# = po.owner#
    and tsp.file# > 0
    and tsp.block# > 0
    and so.obj# = ts.obj# (+)
  UNION ALL
  SELECT /* FIXED TABLES */
    'SYS', t.kqftanam, NULL, NULL, NULL, NULL, 'FIXED TABLE',
    decode(nvl(fobj.obj#, 0), 0, TO_NUMBER(NULL), st.rowcnt),
    TO_NUMBER(NULL), TO_NUMBER(NULL), TO_NUMBER(NULL), TO_NUMBER(NULL),
    decode(nvl(fobj.obj#, 0), 0, TO_NUMBER(NULL), st.avgrln),
    TO_NUMBER(NULL), TO_NUMBER(NULL), TO_NUMBER(NULL), TO_NUMBER(NULL),
    decode(nvl(fobj.obj#, 0), 0, TO_NUMBER(NULL), st.samplesize),
    decode(nvl(fobj.obj#, 0), 0, TO_DATE(NULL), st.analyzetime),
    decode(nvl(fobj.obj#, 0), 0, NULL,
           decode(nvl(st.obj#, 0), 0, NULL, 'YES')),
    decode(nvl(fobj.obj#, 0), 0, NULL,
           decode(nvl(st.obj#, 0), 0, NULL,
                  decode(bitand(st.flags, 1), 0, 'NO', 'YES'))),
    decode(nvl(fobj.obj#, 0), 0, NULL,
           decode (bitand(fobj.flags, 67108864) +
                     bitand(fobj.flags, 134217728),
                   0, NULL, 67108864, 'DATA', 134217728, 'CACHE', 'ALL'))
    from sys.x$kqfta t, sys.fixed_obj$ fobj, sys.tab_stats$ st
    where
    t.kqftaobj = fobj.obj#(+)
    /*
     * if fobj and st are not in sync (happens when db open read only
     * after upgrade), do not display stats.
     */
    and t.kqftaver = fobj.timestamp (+) - to_date('01-01-1991', 'DD-MM-YYYY')
    and t.kqftaobj = st.obj#(+);

CREATE OR REPLACE FORCE VIEW "DBA_TAB_STATS_HISTORY"("OWNER","TABLE_NAME","PARTITION_NAME","SUBPARTITION_NAME","STATS_UPDATE_TIME") AS 
select u.name, o.name, null, null, h.savtime
  from   sys.user$ u, sys.obj$ o, sys.wri$_optstat_tab_history h
  where  h.obj# = o.obj# and o.type# = 2 and o.owner# = u.user#
  union all
  -- partitions
  select u.name, o.name, o.subname, null, h.savtime
  from   sys.user$ u, sys.obj$ o, sys.wri$_optstat_tab_history h
  where  h.obj# = o.obj# and o.type# = 19 and o.owner# = u.user#
  union all
  -- sub partitions
  select u.name, osp.name, ocp.subname, osp.subname, h.savtime
  from  sys.user$ u,  sys.obj$ osp, obj$ ocp,  sys.tabsubpart$ tsp,
        sys.wri$_optstat_tab_history h
  where h.obj# = osp.obj# and osp.type# = 34 and osp.obj# = tsp.obj# and
        tsp.pobj# = ocp.obj# and osp.owner# = u.user#
  union all
  -- fixed tables
  select 'SYS', t.kqftanam, null, null, h.savtime
  from  sys.x$kqfta t, sys.wri$_optstat_tab_history h
  where
  t.kqftaobj = h.obj#;

CREATE OR REPLACE FORCE VIEW "DBA_TAB_SUBPARTITIONS"("TABLE_OWNER","TABLE_NAME","PARTITION_NAME","SUBPARTITION_NAME","HIGH_VALUE","HIGH_VALUE_LENGTH","SUBPARTITION_POSITION","TABLESPACE_NAME","PCT_FREE","PCT_USED","INI_TRANS","MAX_TRANS","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENT","MAX_EXTENT","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","LOGGING","COMPRESSION","NUM_ROWS","BLOCKS","EMPTY_BLOCKS","AVG_SPACE","CHAIN_CNT","AVG_ROW_LEN","SAMPLE_SIZE","LAST_ANALYZED","BUFFER_POOL","GLOBAL_STATS","USER_STATS") AS 
select u.name, po.name, po.subname, so.subname,
       tsp.hiboundval, tsp.hiboundlen, tsp.subpart#,
       ts.name,  tsp.pctfree$,
       decode(bitand(ts.flags, 32), 32, to_number(NULL), tsp.pctused$),
       tsp.initrans, tsp.maxtrans,
       s.iniexts * ts.blocksize,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                               s.extsize * ts.blocksize),
       s.minexts, s.maxexts,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extpct),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
          decode(s.lists, 0, 1, s.lists)),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
          decode(s.groups, 0, 1, s.groups)),
       decode(mod(trunc(tsp.flags / 4), 2), 0, 'YES', 'NO'),
       decode(bitand(s.spare1, 2048), 2048, 'ENABLED', 'DISABLED'),
       tsp.rowcnt, tsp.blkcnt, tsp.empcnt, tsp.avgspc, tsp.chncnt,
       tsp.avgrln, tsp.samplesize, tsp.analyzetime,
       decode(s.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL),
       decode(bitand(tsp.flags, 16), 0, 'NO', 'YES'),
       decode(bitand(tsp.flags, 8), 0, 'NO', 'YES')
from   sys.obj$ so, sys.obj$ po, sys.tabsubpartv$ tsp, sys.ts$ ts,
       sys.seg$ s, sys.user$ u
where  so.obj# = tsp.obj# and po.obj# = tsp.pobj# and tsp.ts# = ts.ts# and
       u.user# = po.owner# and tsp.file# = s.file# and tsp.block# = s.block# and
       tsp.ts# = s.ts#;

CREATE OR REPLACE FORCE VIEW "DBA_TEMPLATE_REFGROUPS"("REFRESH_GROUP_ID","REFRESH_GROUP_NAME","REFRESH_TEMPLATE_ID","REFRESH_TEMPLATE_NAME","ROLLBACK_SEG","START_DATE","INTERVAL") AS 
select rg.refresh_group_id, rg.refresh_group_name, rt.refresh_template_id,
  rt.refresh_template_name, rg.rollback_seg, rg.start_date, rg.interval
from system.repcat$_refresh_templates rt,
  system.repcat$_template_refgroups rg,
  system.repcat$_template_types tt
where rt.refresh_template_id = rg.refresh_template_id
and rt.template_type_id = tt.template_type_id
and bitand(rawtohex(tt.flags),1) = 1;

CREATE OR REPLACE FORCE VIEW "DBA_TEMPLATE_TARGETS"("TEMPLATE_TARGET_ID","TARGET_DATABASE","TARGET_COMMENT","CONNECT_STRING") AS 
select tt.template_target_id, tt.target_database, tt.target_comment,
       tt.connect_string
from system.repcat$_template_targets tt;

CREATE OR REPLACE FORCE VIEW "DBA_TEMP_FILES"("FILE_NAME","FILE_ID","TABLESPACE_NAME","BYTES","BLOCKS","STATUS","RELATIVE_FNO","AUTOEXTENSIBLE","MAXBYTES","MAXBLOCKS","INCREMENT_BY","USER_BYTES","USER_BLOCKS") AS 
select /*+ ordered use_nl(hc) */
       v.fnnam, hc.ktfthctfno, ts.name,
       decode(hc.ktfthccval, 0, ts.blocksize * hc.ktfthcsz, NULL),
       decode(hc.ktfthccval, 0, hc.ktfthcsz, NULL), 'AVAILABLE',
       decode(hc.ktfthccval, 0, hc.ktfthcfno, NULL),
       decode(hc.ktfthccval, 0, decode(hc.ktfthcinc, 0, 'NO', 'YES'), NULL),
       decode(hc.ktfthccval, 0, ts.blocksize * hc.ktfthcmaxsz, NULL),
       decode(hc.ktfthccval, 0, hc.ktfthcmaxsz, NULL),
       decode(hc.ktfthccval, 0, hc.ktfthcinc, NULL),
       decode(hc.ktfthccval, 0, hc.ktfthcusz * ts.blocksize, NULL),
       decode(hc.ktfthccval, 0, hc.ktfthcusz, NULL)
from sys.x$kccfn v, sys.x$ktfthc hc, sys.ts$ ts
where v.fntyp = 7 and v.fnnam is not null
  and v.fnfno = hc.ktfthctfno
  and hc.ktfthctsn = ts.ts#;

CREATE OR REPLACE FORCE VIEW "DBA_THRESHOLDS"("METRICS_NAME","WARNING_OPERATOR","WARNING_VALUE","CRITICAL_OPERATOR","CRITICAL_VALUE","OBSERVATION_PERIOD","CONSECUTIVE_OCCURRENCES","INSTANCE_NAME","OBJECT_TYPE","OBJECT_NAME","STATUS") AS 
select m.name AS metrics_name,
            decode(a.warning_operator, 0, 'GT',
                                       1, 'EQ',
                                       2, 'LT',
                                       3, 'LE',
                                       4, 'GE',
                                       5, 'CONTAINS',
                                       6, 'NE',
                                       7, 'DO NOT CHECK',
                                          'NONE') AS warning_operator,
            a.warning_value AS warning_value,
            decode(a.critical_operator, 0, 'GT',
                                        1, 'EQ',
                                        2, 'LT',
                                        3, 'LE',
                                        4, 'GE',
                                        5, 'CONTAINS',
                                        6, 'NE',
                                        7, 'DO_NOT_CHECK',
                                           'NONE') AS critical_operator,
            a.critical_value AS critical_value,
            a.observation_period AS observation_period,
            a.consecutive_occurrences AS consecutive_occurrences,
            decode(a.metrics_id, 9000, null,
                                       instance_name) AS instance_name,
            o.typnam_keltosd AS object_type,
            a.object_name AS object_name,
            decode(a.flags, 1, 'VALID',
                            0, 'INVALID') AS status
  FROM table(dbms_server_alert.view_thresholds) a,
       X$KEWMDSM m,
       X$KELTOSD o
  WHERE a.object_type != 2
    AND m.metricid(+) = a.metrics_id
    AND a.object_type = o.typid_keltosd
  UNION
     select m.name AS metrics_name,
            decode(a.warning_operator, 0, 'GT',
                                       1, 'EQ',
                                       2, 'LT',
                                       3, 'LE',
                                       4, 'GE',
                                       5, 'CONTAINS',
                                       6, 'NE',
                                       7, 'DO_NOT_CHECK',
                                          'NONE') AS warning_operator,
            a.warning_value AS warning_value,
            decode(a.critical_operator, 0, 'GT',
                                        1, 'EQ',
                                        2, 'LT',
                                        3, 'LE',
                                        4, 'GE',
                                        5, 'CONTAINS',
                                        6, 'NE',
                                        7, 'DO NOT CHECK',
                                           'NONE') AS critical_operator,
            a.critical_value AS critical_value,
            a.observation_period AS observation_period,
            a.consecutive_occurrences AS consecutive_occurrences,
            a.instance_name AS instance_name,
            o.typnam_keltosd AS object_type,
            f.name AS object_name,
            decode(a.flags, 1, 'VALID',
                            0, 'INVALID') AS status
  FROM table(dbms_server_alert.view_thresholds) a,
       X$KEWMDSM m, sys.v$dbfile f, X$KELTOSD o
  WHERE a.object_type = 2
    AND m.metricid = a.metrics_id
    AND a.object_id = f.file#
    AND a.object_type = o.typid_keltosd;

CREATE OR REPLACE FORCE VIEW "DBA_TRANSFORMATIONS"("TRANSFORMATION_ID","OWNER","NAME","FROM_TYPE","TO_TYPE") AS 
SELECT t.transformation_id, u.name, t.name,
       t.from_schema||'.'||t.from_type, t.to_schema||'.'||t.to_type
FROM transformations$ t, sys.user$ u
WHERE  u.name = t.owner;

CREATE OR REPLACE FORCE VIEW "DBA_TRIGGERS"("OWNER","TRIGGER_NAME","TRIGGER_TYPE","TRIGGERING_EVENT","TABLE_OWNER","BASE_OBJECT_TYPE","TABLE_NAME","COLUMN_NAME","REFERENCING_NAMES","WHEN_CLAUSE","STATUS","DESCRIPTION","ACTION_TYPE","TRIGGER_BODY") AS 
select trigusr.name, trigobj.name,
decode(t.type#, 0, 'BEFORE STATEMENT',
                1, 'BEFORE EACH ROW',
                2, 'AFTER STATEMENT',
                3, 'AFTER EACH ROW',
                4, 'INSTEAD OF',
                   'UNDEFINED'),
decode(t.insert$*100 + t.update$*10 + t.delete$,
                 100, 'INSERT',
                 010, 'UPDATE',
                 001, 'DELETE',
                 110, 'INSERT OR UPDATE',
                 101, 'INSERT OR DELETE',
                 011, 'UPDATE OR DELETE',
                 111, 'INSERT OR UPDATE OR DELETE', 'ERROR'),
tabusr.name,
decode(bitand(t.property, 1), 1, 'VIEW',
                              0, 'TABLE',
                                 'UNDEFINED'),
tabobj.name, NULL,
'REFERENCING NEW AS '||t.refnewname||' OLD AS '||t.refoldname,
t.whenclause,decode(t.enabled, 0, 'DISABLED', 1, 'ENABLED', 'ERROR'),
t.definition,
decode(bitand(t.property, 2), 2, 'CALL',
                                 'PL/SQL     '),
t.action#
from sys.obj$ trigobj, sys.obj$ tabobj, sys.trigger$ t,
     sys.user$ tabusr, sys.user$ trigusr
where (trigobj.obj#   = t.obj# and
       tabobj.obj#    = t.baseobject and
       tabobj.owner#  = tabusr.user# and
       trigobj.owner# = trigusr.user# and
       bitand(t.property, 63)     < 8 )
union all
select trigusr.name, trigobj.name,
decode(t.type#, 0, 'BEFORE EVENT',
                2, 'AFTER EVENT',
                   'UNDEFINED'),
decode(bitand(t.sys_evts, 1), 1, 'STARTUP ') ||
decode(bitand(t.sys_evts, 2), 2,
       decode(sign(bitand(t.sys_evts, 1)), 1, 'OR SHUTDOWN ',
                                               'SHUTDOWN ')) ||
decode(bitand(t.sys_evts, 4), 4,
       decode(sign(bitand(t.sys_evts, 3)), 1, 'OR ERROR ',
                                              'ERROR ')) ||
decode(bitand(t.sys_evts, 8), 8,
       decode(sign(bitand(t.sys_evts, 7)), 1, 'OR LOGON ',
                                              'LOGON ')) ||
decode(bitand(t.sys_evts, 16), 16,
       decode(sign(bitand(t.sys_evts, 15)), 1, 'OR LOGOFF ',
                                               'LOGOFF ')) ||
decode(bitand(t.sys_evts, 262176), 32,
       decode(sign(bitand(t.sys_evts, 31)), 1, 'OR CREATE ',
                                               'CREATE ')) ||
decode(bitand(t.sys_evts, 262208), 64,
       decode(sign(bitand(t.sys_evts, 63)), 1, 'OR ALTER ',
                                               'ALTER ')) ||
decode(bitand(t.sys_evts, 262272), 128,
       decode(sign(bitand(t.sys_evts, 127)), 1, 'OR DROP ',
                                                'DROP ')) ||
decode (bitand(t.sys_evts, 262400), 256,
        decode(sign(bitand(t.sys_evts, 255)), 1, 'OR ANALYZE ',
                                                 'ANALYZE ')) ||
decode (bitand(t.sys_evts, 262656), 512,
        decode(sign(bitand(t.sys_evts, 511)), 1, 'OR COMMENT ',
                                                 'COMMENT ')) ||
decode (bitand(t.sys_evts, 263168), 1024,
        decode(sign(bitand(t.sys_evts, 1023)), 1, 'OR GRANT ',
                                                  'GRANT ')) ||
decode (bitand(t.sys_evts, 264192), 2048,
        decode(sign(bitand(t.sys_evts, 2047)), 1, 'OR REVOKE ',
                                                  'REVOKE ')) ||
decode (bitand(t.sys_evts, 266240), 4096,
        decode(sign(bitand(t.sys_evts, 4095)), 1, 'OR TRUNCATE ',
                                                  'TRUNCATE ')) ||
decode (bitand(t.sys_evts, 270336), 8192,
        decode(sign(bitand(t.sys_evts, 8191)), 1, 'OR RENAME ',
                                                  'RENAME ')) ||
decode (bitand(t.sys_evts, 278528), 16384,
        decode(sign(bitand(t.sys_evts, 16383)), 1, 'OR ASSOCIATE STATISTICS ',
                                                   'ASSOCIATE STATISTICS ')) ||
decode (bitand(t.sys_evts, 294912), 32768,
        decode(sign(bitand(t.sys_evts, 32767)), 1, 'OR AUDIT ',
                                                   'AUDIT ')) ||
decode (bitand(t.sys_evts, 327680), 65536,
        decode(sign(bitand(t.sys_evts, 65535)), 1,
               'OR DISASSOCIATE STATISTICS ', 'DISASSOCIATE STATISTICS ')) ||
decode (bitand(t.sys_evts, 393216), 131072,
        decode(sign(bitand(t.sys_evts, 131071)), 1, 'OR NOAUDIT ',
                                                    'NOAUDIT ')) ||
decode (bitand(t.sys_evts, 262144), 262144,
        decode(sign(bitand(t.sys_evts, 31)), 1, 'OR DDL ',
                                                   'DDL ')) ||
decode (bitand(t.sys_evts, 8388608), 8388608,
        decode(sign(bitand(t.sys_evts, 8388607)), 1, 'OR SUSPEND ',
                                                     'SUSPEND ')),
'SYS',
'DATABASE        ',
NULL,
NULL,
'REFERENCING NEW AS '||t.refnewname||' OLD AS '||t.refoldname
  || decode(bitand(t.property,32),32,' PARENT AS ' || t.refprtname,NULL),
t.whenclause,decode(t.enabled, 0, 'DISABLED', 1, 'ENABLED', 'ERROR'),
t.definition,
decode(bitand(t.property, 2), 2, 'CALL',
                                 'PL/SQL     '),
t.action#
from sys.obj$ trigobj, sys.trigger$ t, sys.user$ trigusr
where (trigobj.obj#   = t.obj# and
       trigobj.owner# = trigusr.user# and
       bitand(t.property, 63)    >= 8 and bitand(t.property, 63) < 16)
union all
select trigusr.name, trigobj.name,
decode(t.type#, 0, 'BEFORE EVENT',
                2, 'AFTER EVENT',
                   'UNDEFINED'),
decode(bitand(t.sys_evts, 1), 1, 'STARTUP ') ||
decode(bitand(t.sys_evts, 2), 2,
       decode(sign(bitand(t.sys_evts, 1)), 1, 'OR SHUTDOWN ',
                                               'SHUTDOWN ')) ||
decode(bitand(t.sys_evts, 4), 4,
       decode(sign(bitand(t.sys_evts, 3)), 1, 'OR ERROR ',
                                              'ERROR ')) ||
decode(bitand(t.sys_evts, 8), 8,
       decode(sign(bitand(t.sys_evts, 7)), 1, 'OR LOGON ',
                                              'LOGON ')) ||
decode(bitand(t.sys_evts, 16), 16,
       decode(sign(bitand(t.sys_evts, 15)), 1, 'OR LOGOFF ',
                                               'LOGOFF ')) ||
decode(bitand(t.sys_evts, 262176), 32,
       decode(sign(bitand(t.sys_evts, 31)), 1, 'OR CREATE ',
                                               'CREATE ')) ||
decode(bitand(t.sys_evts, 262208), 64,
       decode(sign(bitand(t.sys_evts, 63)), 1, 'OR ALTER ',
                                               'ALTER ')) ||
decode(bitand(t.sys_evts, 262272), 128,
       decode(sign(bitand(t.sys_evts, 127)), 1, 'OR DROP ',
                                                'DROP ')) ||
decode (bitand(t.sys_evts, 262400), 256,
        decode(sign(bitand(t.sys_evts, 255)), 1, 'OR ANALYZE ',
                                                 'ANALYZE ')) ||
decode (bitand(t.sys_evts, 262656), 512,
        decode(sign(bitand(t.sys_evts, 511)), 1, 'OR COMMENT ',
                                                 'COMMENT ')) ||
decode (bitand(t.sys_evts, 263168), 1024,
        decode(sign(bitand(t.sys_evts, 1023)), 1, 'OR GRANT ',
                                                  'GRANT ')) ||
decode (bitand(t.sys_evts, 264192), 2048,
        decode(sign(bitand(t.sys_evts, 2047)), 1, 'OR REVOKE ',
                                                  'REVOKE ')) ||
decode (bitand(t.sys_evts, 266240), 4096,
        decode(sign(bitand(t.sys_evts, 4095)), 1, 'OR TRUNCATE ',
                                                  'TRUNCATE ')) ||
decode (bitand(t.sys_evts, 270336), 8192,
        decode(sign(bitand(t.sys_evts, 8191)), 1, 'OR RENAME ',
                                                  'RENAME ')) ||
decode (bitand(t.sys_evts, 278528), 16384,
        decode(sign(bitand(t.sys_evts, 16383)), 1, 'OR ASSOCIATE STATISTICS ',
                                                   'ASSOCIATE STATISTICS ')) ||
decode (bitand(t.sys_evts, 294912), 32768,
        decode(sign(bitand(t.sys_evts, 32767)), 1, 'OR AUDIT ',
                                                   'AUDIT ')) ||
decode (bitand(t.sys_evts, 327680), 65536,
        decode(sign(bitand(t.sys_evts, 65535)), 1,
               'OR DISASSOCIATE STATISTICS ', 'DISASSOCIATE STATISTICS ')) ||
decode (bitand(t.sys_evts, 393216), 131072,
        decode(sign(bitand(t.sys_evts, 131071)), 1, 'OR NOAUDIT ',
                                                    'NOAUDIT ')) ||
decode (bitand(t.sys_evts, 262144), 262144,
        decode(sign(bitand(t.sys_evts, 31)), 1, 'OR DDL ',
                                                   'DDL ')) ||
decode (bitand(t.sys_evts, 8388608), 8388608,
        decode(sign(bitand(t.sys_evts, 8388607)), 1, 'OR SUSPEND ',
                                                     'SUSPEND ')),
tabusr.name,
'SCHEMA',
NULL,
NULL,
'REFERENCING NEW AS '||t.refnewname||' OLD AS '||t.refoldname,
t.whenclause,decode(t.enabled, 0, 'DISABLED', 1, 'ENABLED', 'ERROR'),
t.definition,
decode(bitand(t.property, 2), 2, 'CALL',
                                 'PL/SQL     '),
t.action#
from sys.obj$ trigobj, sys.trigger$ t, sys.user$ tabusr, sys.user$ trigusr
where (trigobj.obj#   = t.obj# and
       trigobj.owner# = trigusr.user# and
       bitand(t.property, 63) >= 16 and bitand(t.property, 63) < 32 and
       tabusr.user# = t.baseobject)
union all
select trigusr.name, trigobj.name,
decode(t.type#, 0, 'BEFORE STATEMENT',
               1, 'BEFORE EACH ROW',
               2, 'AFTER STATEMENT',
               3, 'AFTER EACH ROW',
               4, 'INSTEAD OF',
               'UNDEFINED'),
decode(t.insert$*100 + t.update$*10 + t.delete$,
                 100, 'INSERT',
                 010, 'UPDATE',
                 001, 'DELETE',
                 110, 'INSERT OR UPDATE',
                 101, 'INSERT OR DELETE',
                 011, 'UPDATE OR DELETE',
                 111, 'INSERT OR UPDATE OR DELETE', 'ERROR'),
tabusr.name,
decode(bitand(t.property, 1), 1, 'VIEW',
                              0, 'TABLE',
                                 'UNDEFINED'),
tabobj.name, ntcol.name,
'REFERENCING NEW AS '||t.refnewname||' OLD AS '||t.refoldname ||
  ' PARENT AS ' || t.refprtname,
t.whenclause,decode(t.enabled, 0, 'DISABLED', 1, 'ENABLED', 'ERROR'),
t.definition,
decode(bitand(t.property, 2), 2, 'CALL',
                                 'PL/SQL     '),
t.action#
from sys.obj$ trigobj, sys.obj$ tabobj, sys.trigger$ t,
     sys.user$ tabusr, sys.user$ trigusr, sys.viewtrcol$ ntcol
where (trigobj.obj#   = t.obj# and
       tabobj.obj#    = t.baseobject and
       tabobj.owner#  = tabusr.user# and
       trigobj.owner# = trigusr.user# and
       t.nttrigcol    = ntcol.intcol# and
       t.nttrigatt    = ntcol.attribute# and
       t.baseobject   = ntcol.obj# and
       bitand(t.property, 63)     >= 32);

CREATE OR REPLACE FORCE VIEW "DBA_TRIGGER_COLS"("TRIGGER_OWNER","TRIGGER_NAME","TABLE_OWNER","TABLE_NAME","COLUMN_NAME","COLUMN_LIST","COLUMN_USAGE") AS 
select /*+ ORDERED NOCOST */ u.name, o.name, u2.name, o2.name,c.name,
   max(decode(tc.type#,0,'YES','NO')) COLUMN_LIST,
   decode(sum(decode(tc.type#, 5,  1, -- one occurrence of new in
                              6,  2, -- one occurrence of old in
                              9,  4, -- one occurrence of new out
                             10,  8, -- one occurrence of old out (impossible)
                             13,  5, -- one occurrence of new in out
                             14, 10, -- one occurrence of old in out (imp.)
                             20, 16, -- one occurrence of parent in
                             24, 32, -- one occurrence of parent out (imp)
                             28, 64, -- one occurrence of parent in out (imp)
                              null)
                ), -- result in the following combinations across occurrences
           1, 'NEW IN',
           2, 'OLD IN',
           3, 'NEW IN OLD IN',
           4, 'NEW OUT',
           5, 'NEW IN OUT',
           6, 'NEW OUT OLD IN',
           7, 'NEW IN OUT OLD IN',
          16, 'PARENT IN',
          'NONE')
from sys.trigger$ t, sys.obj$ o, sys.user$ u, sys.user$ u2,
     sys.col$ c, sys.obj$ o2, sys.triggercol$ tc
where t.obj# = tc.obj#                -- find corresponding trigger definition
  and o.obj# = t.obj#                --    and corresponding trigger name
  and c.obj# = t.baseobject         -- and corresponding row in COL$ of
  and c.intcol# = tc.intcol#        --    the referenced column
  and bitand(c.property,32768) != 32768   -- not unused columns
  and o2.obj# = t.baseobject        -- and name of the table containing the trigger
  and u2.user# = o2.owner#        -- and name of the user who owns the table
  and u.user# = o.owner#        -- and name of user who owns the trigger
  and bitand(c.property,1) <> 1  -- and the col is not an ADT column
  and (bitand(t.property,32) <> 32 -- and it is not a nested table col
       or
      bitand(tc.type#,16) = 16) -- or it is a PARENT type column
group by u.name, o.name, u2.name, o2.name, c.name
union all
select /*+ ORDERED NOCOST */ u.name, o.name, u2.name, o2.name,ac.name,
   max(decode(tc.type#,0,'YES','NO')) COLUMN_LIST,
   decode(sum(decode(tc.type#, 5,  1, -- one occurrence of new in
                              6,  2, -- one occurrence of old in
                              9,  4, -- one occurrence of new out
                             10,  8, -- one occurrence of old out (impossible)
                             13,  5, -- one occurrence of new in out
                             14, 10, -- one occurrence of old in out (imp.)
                             20, 16, -- one occurrence of parent in
                             24, 32, -- one occurrence of parent out (imp)
                             28, 64, -- one occurrence of parent in out (imp)
                              null)
                ), -- result in the following combinations across occurrences
           1, 'NEW IN',
           2, 'OLD IN',
           3, 'NEW IN OLD IN',
           4, 'NEW OUT',
           5, 'NEW IN OUT',
           6, 'NEW OUT OLD IN',
           7, 'NEW IN OUT OLD IN',
          16, 'PARENT IN',
          'NONE')
from sys.trigger$ t, sys.obj$ o, sys.user$ u, sys.user$ u2,
     sys.col$ c, sys.obj$ o2, sys.triggercol$ tc, sys.attrcol$ ac
where t.obj# = tc.obj#                -- find corresponding trigger definition
  and o.obj# = t.obj#                --    and corresponding trigger name
  and c.obj# = t.baseobject         -- and corresponding row in COL$ of
  and c.intcol# = tc.intcol#        --    the referenced column
  and bitand(c.property,32768) != 32768   -- not unused columns
  and o2.obj# = t.baseobject        -- and name of the table containing the trigger
  and u2.user# = o2.owner#        -- and name of the user who owns the table
  and u.user# = o.owner#        -- and name of user who owns the trigger
  and bitand(c.property,1) = 1  -- and it is an ADT attribute
  and ac.intcol# = c.intcol#    -- and the attribute name
  and (bitand(t.property,32) <> 32 -- and it is not a nested table col
       or
      bitand(tc.type#,16) = 16) -- or it is a PARENT type column
group by u.name, o.name, u2.name, o2.name, ac.name
union all
select /*+ ORDERED NOCOST */ u.name, o.name, u2.name, o2.name,attr.name,
   max(decode(tc.type#,0,'YES','NO')) COLUMN_LIST,
   decode(sum(decode(tc.type#, 5,  1, -- one occurrence of new in
                              6,  2, -- one occurrence of old in
                              9,  4, -- one occurrence of new out
                             10,  8, -- one occurrence of old out (impossible)
                             13,  5, -- one occurrence of new in out
                             14, 10, -- one occurrence of old in out (imp.)
                              null)
                ), -- result in the following combinations across occurrences
           1, 'NEW IN',
           2, 'OLD IN',
           3, 'NEW IN OLD IN',
           4, 'NEW OUT',
           5, 'NEW IN OUT',
           6, 'NEW OUT OLD IN',
           7, 'NEW IN OUT OLD IN',
          'NONE')
from sys.trigger$ t, sys.obj$ o, sys.user$ u, sys.user$ u2,
     sys.obj$ o2, sys.triggercol$ tc,
     sys.collection$ coll, sys.coltype$ ctyp, sys.attribute$ attr
where t.obj# = tc.obj#                -- find corresponding trigger definition
  and o.obj# = t.obj#                --    and corresponding trigger name
  and o2.obj# = t.baseobject        -- and name of the table containing the trigger
  and u2.user# = o2.owner#        -- and name of the user who owns the table
  and u.user# = o.owner#        -- and name of user who owns the trigger
  and bitand(t.property,32) = 32 -- and it is not a nested table col
  and bitand(tc.type#,16) <> 16  -- and it is not a PARENT type column
  and ctyp.obj# = t.baseobject   -- find corresponding column type definition
  and ctyp.intcol# = t.nttrigcol -- and get the column type for the nested table
  and ctyp.toid = coll.toid      -- get the collection toid
  and ctyp.version# = coll.version# -- get the collection version
  and attr.attribute# = tc.intcol#  -- get the attribute number
  and attr.toid  = coll.elem_toid  -- get the attribute toid
  and attr.version# = coll.version#  -- get the attribute version
group by u.name, o.name, u2.name, o2.name, attr.name
union all
select /*+ ORDERED NOCOST */ u.name, o.name, u2.name, o2.name,'COLUMN_VALUE',
   max(decode(tc.type#,0,'YES','NO')) COLUMN_LIST,
   decode(sum(decode(tc.type#, 5,  1, -- one occurrence of new in
                              6,  2, -- one occurrence of old in
                              9,  4, -- one occurrence of new out
                             10,  8, -- one occurrence of old out (impossible)
                             13,  5, -- one occurrence of new in out
                             14, 10, -- one occurrence of old in out (imp.)
                              null)
                ), -- result in the following combinations across occurrences
           1, 'NEW IN',
           2, 'OLD IN',
           3, 'NEW IN OLD IN',
           4, 'NEW OUT',
           5, 'NEW IN OUT',
           6, 'NEW OUT OLD IN',
           7, 'NEW IN OUT OLD IN',
          'NONE')
from sys.trigger$ t, sys.obj$ o, sys.user$ u, sys.user$ u2,
     sys.obj$ o2, sys.triggercol$ tc
where t.obj# = tc.obj#                -- find corresponding trigger definition
  and o.obj# = t.obj#                --    and corresponding trigger name
  and o2.obj# = t.baseobject        -- and name of the table containing the trigger
  and u2.user# = o2.owner#        -- and name of the user who owns the table
  and u.user# = o.owner#        -- and name of user who owns the trigger
  and bitand(t.property,32) = 32 -- and it is not a nested table col
  and bitand(tc.type#,16) <> 16  -- and it is not a PARENT type column
  and tc.intcol# = 0
group by u.name, o.name, u2.name, o2.name,'COLUMN_VALUE';

CREATE OR REPLACE FORCE VIEW "DBA_TSM_HISTORY"("SOURCE_SID","SOURCE_SERIAL#","STATE","COST","SOURCE","DESTINATION","CONNECT_STRING","FAILURE_REASON","DESTINATION_SID","DESTINATION_SERIAL#","START_TIME","END_TIME") AS 
SELECT
  source_sid,
  source_serial#,
  decode(state,
          0, 'NONE',
          1, 'SELECTED',
          2, 'COMMITED SELECT',
          3, 'READY FOR PREPARE',
          4, 'PREPARED',
          5, 'READY FOR SWITCH',
          6, 'SWITCHED',
          7, 'FAILED',
          'UNKNOWN'),
  cost,
  source,
  destination,
  connect_string,
  decode(failure_reason,
          0, 'None',
          1, 'Instance shutdown before migration',
          2, 'End of session before migration',
          3, 'Invalid OCI operation',
          4, 'OCI Server Attach',
          5, 'OCI logon',
          6, 'OCI logoff',
          7, 'OCI disconnect',
          8, 'Invalid client state',
          9, 'End of migration',
         10, 'Session migration',
         11, 'Prepare from client failed',
         12, 'Session became non-migratable',
          NULL, '',
          'Unknown'),
  destination_sid,
  destination_serial#,
  start_time,
  end_time
FROM tsm_hist$;

CREATE OR REPLACE FORCE VIEW "DBA_TS_QUOTAS"("TABLESPACE_NAME","USERNAME","BYTES","MAX_BYTES","BLOCKS","MAX_BLOCKS") AS 
select ts.name, u.name,
       q.blocks * ts.blocksize,
       decode(q.maxblocks, -1, -1, q.maxblocks * ts.blocksize),
       q.blocks, q.maxblocks
from sys.tsq$ q, sys.ts$ ts, sys.user$ u
where q.ts# = ts.ts#
  and q.user# = u.user#
  and q.maxblocks != 0;

CREATE OR REPLACE FORCE VIEW "DBA_TUNE_MVIEW"("OWNER","TASK_NAME","ACTION_ID","SCRIPT_TYPE","STATEMENT") AS 
SELECT t.owner_name, t.name, a.id,
         decode(a.command, 3, 'IMPLEMENTATION', 4, 'IMPLEMENTATION',
                           18, 'UNDO', 23, 'IMPLEMENTATION',
                           24, 'UNDO', 25, 'IMPLEMENTATION',
                           26, 'UNDO', 27, 'IMPLEMENTATION',
                           'UNKNOWN'),
         decode(a.command,
                3,  'CREATE MATERIALIZED VIEW ' || a.attr1 ||
                    ' ' || a.attr6 || ' ' || a.attr3 || ' ' ||
                    a.attr4 || ' AS ' || a.attr5,
                4,  'CREATE MATERIALIZED VIEW LOG ON ' || a.attr1 ||
                    ' WITH ' || a.attr3 || ' ' || a.attr5 || ' ' ||
                    a.attr4,
                18, 'DROP MATERIALIZED VIEW ' || a.attr1 || ' ' || a.attr5,
                23, 'CREATE MATERIALIZED VIEW ' || a.attr1 ||
                    ' ' || a.attr6 || ' ' || a.attr3 || ' ' ||
                    a.attr4 || ' AS ' || a.attr5,
                24, 'DROP MATERIALIZED VIEW ' || a.attr1 || ' ' || a.attr5,
                25, 'DBMS_ADVANCED_REWRITE.BUILD_SAFE_REWRITE_EQUIVALENCE (''' ||
                    a.attr1 || ''',''' || a.attr5 || ''',''' || a.attr6 ||
                    ''',' || a.attr2 || ')',
                26, 'DBMS_ADVANCED_REWRITE.DROP_REWRITE_EQUIVALENCE(''' ||
                    a.attr1 || ''')' || a.attr5,
                27, 'ALTER MATERIALIZED VIEW LOG FORCE ON ' || a.attr1 ||
                    ' ADD ' || a.attr3 || ' ' || a.attr5 || ' ' ||
                    a.attr4,
                    a.attr5)
    FROM sys.wri$_adv_actions a, sys.wri$_adv_tasks t
    WHERE a.task_id = t.id;

CREATE OR REPLACE FORCE VIEW "DBA_TYPES"("OWNER","TYPE_NAME","TYPE_OID","TYPECODE","ATTRIBUTES","METHODS","PREDEFINED","INCOMPLETE","FINAL","INSTANTIABLE","SUPERTYPE_OWNER","SUPERTYPE_NAME","LOCAL_ATTRIBUTES","LOCAL_METHODS","TYPEID") AS 
select decode(bitand(t.properties, 64), 64, null, u.name), o.name, t.toid,
       decode(t.typecode, 108, 'OBJECT',
                          122, 'COLLECTION',
                          o.name),
       t.attributes, t.methods,
       decode(bitand(t.properties, 16), 16, 'YES', 0, 'NO'),
       decode(bitand(t.properties, 256), 256, 'YES', 0, 'NO'),
       decode(bitand(t.properties, 8), 8, 'NO', 'YES'),
       decode(bitand(t.properties, 65536), 65536, 'NO', 'YES'),
       su.name, so.name, t.local_attrs, t.local_methods, t.typeid
from sys.user$ u, sys.type$ t, sys.obj$ o, sys.obj$ so, sys.user$ su
where o.owner# = u.user#
  and o.oid$ = t.tvoid
  and o.subname IS NULL -- only the latest version
  and o.type# <> 10 -- must not be invalid
  and bitand(t.properties, 2048) = 0 -- not system-generated
  and t.supertoid = so.oid$ (+) and so.owner# = su.user# (+);

CREATE OR REPLACE FORCE VIEW "DBA_TYPE_ATTRS"("OWNER","TYPE_NAME","ATTR_NAME","ATTR_TYPE_MOD","ATTR_TYPE_OWNER","ATTR_TYPE_NAME","LENGTH","PRECISION","SCALE","CHARACTER_SET_NAME","ATTR_NO","INHERITED") AS 
select decode(bitand(t.properties, 64), 64, null, u.name), o.name, a.name,
       decode(bitand(a.properties, 32768), 32768, 'REF',
              decode(bitand(a.properties, 16384), 16384, 'POINTER')),
       nvl2(a.synobj#, (select u.name from user$ u, obj$ o
            where o.owner#=u.user# and o.obj#=a.synobj#),
            decode(bitand(at.properties, 64), 64, null, au.name)),
       nvl2(a.synobj#, (select o.name from obj$ o where o.obj#=a.synobj#),
            decode(at.typecode,
                   52, decode(a.charsetform, 2, 'NVARCHAR2', ao.name),
                   53, decode(a.charsetform, 2, 'NCHAR', ao.name),
                   54, decode(a.charsetform, 2, 'NCHAR VARYING', ao.name),
                   61, decode(a.charsetform, 2, 'NCLOB', ao.name),
                   ao.name)),
       a.length, a.precision#, a.scale,
       decode(a.charsetform, 1, 'CHAR_CS',
                             2, 'NCHAR_CS',
                             3, NLS_CHARSET_NAME(a.charsetid),
                             4, 'ARG:'||a.charsetid),
       a.attribute#, decode(bitand(nvl(a.xflags,0), 1), 1, 'YES', 'NO')
from sys.user$ u, sys.obj$ o, sys.type$ t, sys.attribute$ a,
     sys.obj$ ao, sys.user$ au, sys.type$ at
where o.owner# = u.user#
  and o.oid$ = t.toid
  and o.subname IS NULL -- get the latest version only
  and o.type# <> 10 -- must not be invalid
  and bitand(t.properties, 2048) = 0 -- not system-generated
  and t.toid = a.toid
  and t.version# = a.version#
  and a.attr_toid = ao.oid$
  and ao.owner# = au.user#
  and a.attr_toid = at.tvoid
  and a.attr_version# = at.version#;

CREATE OR REPLACE FORCE VIEW "DBA_TYPE_METHODS"("OWNER","TYPE_NAME","METHOD_NAME","METHOD_NO","METHOD_TYPE","PARAMETERS","RESULTS","FINAL","INSTANTIABLE","OVERRIDING","INHERITED") AS 
select u.name, o.name, m.name, m.method#,
       decode(bitand(m.properties, 512), 512, 'MAP',
              decode(bitand(m.properties, 2048), 2048, 'ORDER', 'PUBLIC')),
       m.parameters#, m.results,
       decode(bitand(m.properties, 8), 8, 'NO', 'YES'),
       decode(bitand(m.properties, 65536), 65536, 'NO', 'YES'),
       decode(bitand(m.properties, 131072), 131072, 'YES', 'NO'),
       decode(bitand(nvl(m.xflags,0), 1), 1, 'YES', 'NO')
from sys.user$ u, sys.obj$ o, sys.method$ m
where o.owner# = u.user#
  and o.type# <> 10 -- must not be invalid
  and o.oid$ = m.toid
  and o.subname IS NULL -- get the latest version only;

CREATE OR REPLACE FORCE VIEW "DBA_TYPE_VERSIONS"("OWNER","TYPE_NAME","VERSION#","TYPECODE","STATUS","LINE","TEXT","HASHCODE") AS 
select u.name, o.name, t.version#,
       decode(t.typecode, 108, 'OBJECT',
                          122, 'COLLECTION',
                          o.name),
       decode(o.status, 0, 'N/A', 1, 'VALID', 'INVALID'),
       s.line, s.source,
       t.hashcode
from sys.obj$ o, sys.source$ s, sys.type$ t, user$ u
  where o.obj# = s.obj# and o.oid$ = t.tvoid and o.type# = 13
  and o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "DBA_UNDO_EXTENTS"("OWNER","SEGMENT_NAME","TABLESPACE_NAME","EXTENT_ID","FILE_ID","BLOCK_ID","BYTES","BLOCKS","RELATIVE_FNO","COMMIT_JTIME","COMMIT_WTIME","STATUS") AS 
select /*+ ordered use_nl(e) use_nl(f) */
       'SYS', u.name, t.name,
       e.ktfbueextno, f.file#, e.ktfbuebno,
       e.ktfbueblks * t.BLOCKSIZE, e.ktfbueblks, e.ktfbuefno,
       nullif(e.ktfbuectm, e.ktfbuectm),
       nullif(e.ktfbuestt, e.ktfbuestt),
       decode(e.ktfbuesta, 1, 'ACTIVE', 2, 'EXPIRED', 3, 'UNEXPIRED',
              'UNDEFINED')
from undo$ u, ts$ t, sys.x$ktfbue e, sys.file$ f
where
e.ktfbuesegfno = u.file#
and e.ktfbuesegbno = u.block#
and e.ktfbuesegtsn = u.ts#
and u.spare1 = 1
and t.ts# = u.ts#
and e.ktfbuefno = f.relfile#
and u.ts# = f.ts#;

CREATE OR REPLACE FORCE VIEW "DBA_UNUSED_COL_TABS"("OWNER","TABLE_NAME","COUNT") AS 
select u.name, o.name, count(*)
from sys.user$ u, sys.obj$ o, sys.col$ c
where c.obj# = o.obj#
      and bitand(c.property,32768) = 32768          -- is unused column
      and bitand(c.property, 1) != 1                -- not ADT attribute col
      and bitand(c.property, 1024) != 1024          -- not NTAB's setid col
      and u.user# = o.owner#
      group by u.name, o.name;

CREATE OR REPLACE FORCE VIEW "DBA_UPDATABLE_COLUMNS"("OWNER","TABLE_NAME","COLUMN_NAME","UPDATABLE","INSERTABLE","DELETABLE") AS 
select u.name, o.name, c.name,
       decode(bitand(c.fixedstorage,2),
              2, decode(bitand(v.flags,8192), 8192, 'YES', 'NO'),
              decode(bitand(c.property,4096),4096,'NO','YES')),
       decode(bitand(c.fixedstorage,2),
              2, decode(bitand(v.flags,4096), 4096, 'YES', 'NO'),
              decode(bitand(c.property,2048),2048,'NO','YES')),
       decode(bitand(c.fixedstorage,2),
              2, decode(bitand(v.flags,16384), 16384, 'YES', 'NO'),
              decode(bitand(c.property,8192),8192,'NO','YES'))
from sys.obj$ o, sys.user$ u, sys.col$ c, sys.view$ v
where u.user# = o.owner#
  and c.obj#  = o.obj#
  and c.obj#  = v.obj#(+)
  and bitand(c.property, 32) = 0 /* not hidden column */;

CREATE OR REPLACE FORCE VIEW "DBA_USERS"("USERNAME","USER_ID","PASSWORD","ACCOUNT_STATUS","LOCK_DATE","EXPIRY_DATE","DEFAULT_TABLESPACE","TEMPORARY_TABLESPACE","CREATED","PROFILE","INITIAL_RSRC_CONSUMER_GROUP","EXTERNAL_NAME") AS 
select u.name, u.user#, u.password,
       m.status,
       decode(u.astatus, 4, u.ltime,
                         5, u.ltime,
                         6, u.ltime,
                         8, u.ltime,
                         9, u.ltime,
                         10, u.ltime, to_date(NULL)),
       decode(u.astatus,
              1, u.exptime,
              2, u.exptime,
              5, u.exptime,
              6, u.exptime,
              9, u.exptime,
              10, u.exptime,
              decode(u.ptime, '', to_date(NULL),
                decode(pr.limit#, 2147483647, to_date(NULL),
                 decode(pr.limit#, 0,
                   decode(dp.limit#, 2147483647, to_date(NULL), u.ptime +
                     dp.limit#/86400),
                   u.ptime + pr.limit#/86400)))),
       dts.name, tts.name, u.ctime, p.name,
       nvl(cgm.consumer_group, 'DEFAULT_CONSUMER_GROUP'),
       u.ext_username
       from sys.user$ u left outer join sys.resource_group_mapping$ cgm
            on (cgm.attribute = 'ORACLE_USER' and cgm.status = 'ACTIVE' and
                cgm.value = u.name),
            sys.ts$ dts, sys.ts$ tts, sys.profname$ p,
            sys.user_astatus_map m, sys.profile$ pr, sys.profile$ dp
       where u.datats# = dts.ts#
       and u.resource$ = p.profile#
       and u.tempts# = tts.ts#
       and u.astatus = m.status#
       and u.type# = 1
       and u.resource$ = pr.profile#
       and dp.profile# = 0
       and dp.type#=1
       and dp.resource#=1
       and pr.type# = 1
       and pr.resource# = 1;

CREATE OR REPLACE FORCE VIEW "DBA_USTATS"("OBJECT_OWNER","OBJECT_NAME","PARTITION_NAME","OBJECT_TYPE","ASSOCIATION","COLUMN_NAME","STATSTYPE_SCHEMA","STATSTYPE_NAME","STATISTICS") AS 
select u.name, o.name, o.subname,
         decode (bitand(s.property, 3), 1, 'INDEX', 2, 'COLUMN'),
         decode (bitand(s.property, 12), 8, 'DIRECT', 4, 'IMPLICIT'),
         c.name, u1.name, o1.name, s.statistics
  from   sys.user$ u, sys.obj$ o, sys.col$ c, sys.ustats$ s,
         sys.user$ u1, sys.obj$ o1
  where  bitand(s.property, 3)=2 and s.obj#=o.obj# and o.owner#=u.user#
  and    s.intcol#=c.intcol# and s.statstype#=o1.obj#
  and    o1.owner#=u1.user# and c.obj#=s.obj#
union all    -- partition case
  select u.name, o.name, o.subname,
         decode (bitand(s.property, 3), 1, 'INDEX', 2, 'COLUMN'),
         decode (bitand(s.property, 12), 8, 'DIRECT', 4, 'IMPLICIT'),
         c.name, u1.name, o1.name, s.statistics
  from   sys.user$ u, sys.user$ u1, sys.obj$ o, sys.obj$ o1, sys.col$ c,
         sys.ustats$ s, sys.tabpart$ t, sys.obj$ o2
  where  bitand(s.property, 3)=2 and s.obj# = o.obj#
  and    s.obj# = t.obj# and t.bo# = o2.obj# and o2.owner# = u.user#
  and    s.intcol# = c.intcol# and s.statstype#=o1.obj# and o1.owner#=u1.user#
  and    t.bo#=c.obj#
union all
  select u.name, o.name, o.subname,
         decode (bitand(s.property, 3), 1, 'INDEX', 2, 'COLUMN'),
         decode (bitand(s.property, 12), 8, 'DIRECT', 4, 'IMPLICIT'),
          NULL, u1.name, o1.name, s.statistics
  from   sys.user$ u, sys.obj$ o, sys.ustats$ s,
         sys.user$ u1, sys.obj$ o1
  where  bitand(s.property, 3)=1 and s.obj#=o.obj# and o.owner#=u.user#
  and    s.statstype#=o1.obj# and o1.owner#=u1.user# and o.type#=1
union all -- index partition
  select u.name, o.name, o.subname,
         decode (bitand(s.property, 3), 1, 'INDEX', 2, 'COLUMN'),
         decode (bitand(s.property, 12), 8, 'DIRECT', 4, 'IMPLICIT'),
         NULL, u1.name, o1.name, s.statistics
  from   sys.user$ u, sys.user$ u1, sys.obj$ o, sys.obj$ o1,
         sys.ustats$ s, sys.indpart$ i, sys.obj$ o2
  where  bitand(s.property, 3)=1 and s.obj# = o.obj#
  and    s.obj# = i.obj# and i.bo# = o2.obj# and o2.owner# = u.user#
  and    s.statstype#=o1.obj# and o1.owner#=u1.user#;

CREATE OR REPLACE FORCE VIEW "DBA_VARRAYS"("OWNER","PARENT_TABLE_NAME","PARENT_TABLE_COLUMN","TYPE_OWNER","TYPE_NAME","LOB_NAME","STORAGE_SPEC","RETURN_TYPE","ELEMENT_SUBSTITUTABLE") AS 
select u.name, op.name, ac.name,
       nvl2(ct.synobj#, (select u.name from user$ u, obj$ o
            where o.owner#=u.user# and o.obj#=ct.synobj#), ut.name),
       nvl2(ct.synobj#, (select o.name from obj$ o
            where o.obj#=ct.synobj#), ot.name),
       NULL,
       lpad(decode(bitand(ct.flags, 64), 64, 'USER_SPECIFIED', 'DEFAULT'), 30),
       lpad(decode(bitand(ct.flags, 32), 32, 'LOCATOR', 'VALUE'), 20),
       lpad((case when bitand(ct.flags, 5120)=0 and bitand(t.properties, 8)= 8
       then 'Y' else 'N' end), 25)
from sys.obj$ op, sys.obj$ ot, sys.col$ c, sys.coltype$ ct, sys.user$ u,
  sys.user$ ut, sys.attrcol$ ac, sys.type$ t, sys.collection$ cl
where op.owner# = u.user#
  and c.obj# = op.obj#
  and c.obj# = ac.obj#
  and c.intcol# = ac.intcol#
  and op.obj# = ct.obj#
  and ct.toid = ot.oid$
  and ct.intcol#=c.intcol#
  and ot.owner# = ut.user#
  and ct.toid=cl.toid
  and cl.elem_toid=t.tvoid
  and bitand(ct.flags,8)=8
  and bitand(c.property, 128) != 128
  and bitand(c.property,32768) != 32768           /* not unused column */
union all
select u.name, op.name, ac.name,
       nvl2(ct.synobj#, (select u.name from user$ u, obj$ o
            where o.owner#=u.user# and o.obj#=ct.synobj#), ut.name),
       nvl2(ct.synobj#, (select o.name from obj$ o
            where o.obj#=ct.synobj#), ot.name),
       o.name,
       lpad(decode(bitand(ct.flags, 64), 64, 'USER_SPECIFIED', 'DEFAULT'), 30),
       lpad(decode(bitand(ct.flags, 32), 32, 'LOCATOR', 'VALUE'), 20),
       lpad((case when bitand(ct.flags, 5120)=0 and bitand(t.properties, 8)= 8
       then 'Y' else 'N' end), 25)
from sys.lob$ l, sys.obj$ o, sys.obj$ op, sys.obj$ ot, sys.col$ c,
  sys.coltype$ ct, sys.user$ u, sys.user$ ut, sys.attrcol$ ac, sys.type$ t,
  sys.collection$ cl
where o.owner# = u.user#
  and l.obj# = op.obj#
  and l.lobj# = o.obj#
  and c.obj# = op.obj#
  and l.intcol# = c.intcol#
  and c.obj# = ac.obj#
  and c.intcol# = ac.intcol#
  and op.obj# = ct.obj#
  and ct.toid = ot.oid$
  and ct.intcol#=l.intcol#
  and ot.owner# = ut.user#
  and ct.toid=cl.toid
  and cl.elem_toid=t.tvoid
  and bitand(ct.flags,8)=8
  and bitand(c.property, 128) = 128
  and bitand(c.property,32768) != 32768           /* not unused column */
union all
select u.name, op.name, c.name,
       nvl2(ct.synobj#, (select u.name from user$ u, obj$ o
            where o.owner#=u.user# and o.obj#=ct.synobj#), ut.name),
       nvl2(ct.synobj#, (select o.name from obj$ o
            where o.obj#=ct.synobj#), ot.name),
       NULL,
       lpad(decode(bitand(ct.flags, 64), 64, 'USER_SPECIFIED', 'DEFAULT'), 30),
       lpad(decode(bitand(ct.flags, 32), 32, 'LOCATOR', 'VALUE'), 20),
       lpad((case when bitand(ct.flags, 5120)=0 and bitand(t.properties, 8)= 8
       then 'Y' else 'N' end), 25)
from sys.obj$ op, sys.obj$ ot, sys.col$ c, sys.coltype$ ct, sys.user$ u,
  sys.user$ ut, sys.type$ t, sys.collection$ cl
where op.owner# = u.user#
  and c.obj# = op.obj#
  and bitand(c.property,1)=0
  and op.obj# = ct.obj#
  and ct.toid = ot.oid$
  and ct.intcol#=c.intcol#
  and ot.owner# = ut.user#
  and ct.toid=cl.toid
  and cl.elem_toid=t.tvoid
  and bitand(ct.flags,8)=8
  and bitand(c.property, 128) != 128
  and bitand(c.property,32768) != 32768           /* not unused column */
union all
select u.name, op.name, c.name,
       nvl2(ct.synobj#, (select u.name from user$ u, obj$ o
            where o.owner#=u.user# and o.obj#=ct.synobj#), ut.name),
       nvl2(ct.synobj#, (select o.name from obj$ o
            where o.obj#=ct.synobj#), ot.name),
       o.name,
       lpad(decode(bitand(ct.flags, 64), 64, 'USER_SPECIFIED', 'DEFAULT'), 30),
       lpad(decode(bitand(ct.flags, 32), 32, 'LOCATOR', 'VALUE'), 20),
       lpad((case when bitand(ct.flags, 5120)=0 and bitand(t.properties, 8)= 8
       then 'Y' else 'N' end), 25)
from sys.lob$ l, sys.obj$ o, sys.obj$ op, sys.obj$ ot, sys.col$ c,
  sys.coltype$ ct, sys.user$ u, sys.user$ ut, sys.type$ t, sys.collection$ cl
where o.owner# = u.user#
  and l.obj# = op.obj#
  and l.lobj# = o.obj#
  and c.obj# = op.obj#
  and l.intcol# = c.intcol#
  and bitand(c.property,1)=0
  and op.obj# = ct.obj#
  and ct.toid = ot.oid$
  and ct.intcol#=l.intcol#
  and ot.owner# = ut.user#
  and ct.toid=cl.toid
  and cl.elem_toid=t.tvoid
  and bitand(ct.flags,8)=8
  and bitand(c.property, 128) = 128
  and bitand(c.property,32768) != 32768           /* not unused column */;

CREATE OR REPLACE FORCE VIEW "DBA_VIEWS"("OWNER","VIEW_NAME","TEXT_LENGTH","TEXT","TYPE_TEXT_LENGTH","TYPE_TEXT","OID_TEXT_LENGTH","OID_TEXT","VIEW_TYPE_OWNER","VIEW_TYPE","SUPERVIEW_NAME") AS 
select u.name, o.name, v.textlength, v.text, t.typetextlength, t.typetext,
       t.oidtextlength, t.oidtext, t.typeowner, t.typename,
       decode(bitand(v.property, 134217728), 134217728,
              (select sv.name from superobj$ h, obj$ sv
              where h.subobj# = o.obj# and h.superobj# = sv.obj#), null)
from sys.obj$ o, sys.view$ v, sys.user$ u, sys.typed_view$ t
where o.obj# = v.obj#
  and o.obj# = t.obj#(+)
  and o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "DBA_WAITERS"("WAITING_SESSION","HOLDING_SESSION","LOCK_TYPE","MODE_HELD","MODE_REQUESTED","LOCK_ID1","LOCK_ID2") AS 
select /*+ordered */ w.sid
      ,s.ksusenum
      ,decode(r.ksqrsidt,
                'MR', 'Media Recovery',
                'RT', 'Redo Thread',
                'UN', 'User Name',
                'TX', 'Transaction',
                'TM', 'DML',
                'UL', 'PL/SQL User Lock',
                'DX', 'Distributed Xaction',
                'CF', 'Control File',
                'IS', 'Instance State',
                'FS', 'File Set',
                'IR', 'Instance Recovery',
                'ST', 'Disk Space Transaction',
                'TS', 'Temp Segment',
                'IV', 'Library Cache Invalidation',
                'LS', 'Log Start or Switch',
                'RW', 'Row Wait',
                'SQ', 'Sequence Number',
                'TE', 'Extend Table',
                'TT', 'Temp Table',
                r.ksqrsidt)
      ,decode(l.lmode,
                0, 'None',           /* Mon Lock equivalent */
                1, 'Null',           /* N */
                2, 'Row-S (SS)',     /* L */
                3, 'Row-X (SX)',     /* R */
                4, 'Share',          /* S */
                5, 'S/Row-X (SSX)',  /* C */
                6, 'Exclusive',      /* X */
                l.lmode)
      ,decode(bitand(w.p1,65535),
                0, 'None',           /* Mon Lock equivalent */
                1, 'Null',           /* N */
                2, 'Row-S (SS)',     /* L */
                3, 'Row-X (SX)',     /* R */
                4, 'Share',          /* S */
                5, 'S/Row-X (SSX)',  /* C */
                6, 'Exclusive',      /* X */
                to_char(bitand(w.p1,65535)))
      ,r.ksqrsid1, r.ksqrsid2
  from v$session_wait w, x$ksqrs r, v$_lock l, x$ksuse s
 where w.wait_Time = 0
   and w.event like 'enq:%'
   and r.ksqrsid1 = w.p2
   and r.ksqrsid2 = w.p3
   and r.ksqrsidt = chr(bitand(p1,-16777216)/16777215)||
                   chr(bitand(p1,16711680)/65535)
   and l.block = 1
   and l.saddr = s.addr
   and l.raddr = r.addr
   and s.inst_id = userenv('Instance');

CREATE OR REPLACE FORCE VIEW "DBA_WARNING_SETTINGS"("OWNER","OBJECT_NAME","OBJECT_ID","OBJECT_TYPE","WARNING","SETTING") AS 
SELECT u.name, o.name, o.obj#,
         DECODE(o.type#,
                 7, 'PROCEDURE',
                 8, 'FUNCTION',
                 9, 'PACKAGE',
                11, 'PACKAGE BODY',
                12, 'TRIGGER',
                13, 'TYPE',
                14, 'TYPE BODY',
                    'UNDEFINED'),
         DECODE(w.warning,
                -1, 'INFORMATIONAL',
                -2, 'PERFORMANCE',
                -3, 'SEVERE',
                -4, 'ALL',
                w.warning),
         DECODE(w.setting,
                0, 'DISABLE',
                1, 'ENABLE',
                2, 'ERROR',
                   'INVALID')
    FROM sys.obj$ o, sys.user$ u,
    TABLE(dbms_warning_internal.show_warning_settings(o.obj#)) w
    WHERE o.owner# = u.user#
    AND o.linkname is null
    AND o.type# IN (7, 8, 9, 11, 12, 13, 14)
    AND w.obj_no = o.obj#;

CREATE OR REPLACE FORCE VIEW "DBA_WORKSPACES"("WORKSPACE","PARENT_WORKSPACE","PARENT_SAVEPOINT","OWNER","CREATETIME","DESCRIPTION","FREEZE_STATUS","FREEZE_MODE","FREEZE_WRITER","SID","SERIAL#","FREEZE_OWNER","SESSION_DURATION","CURRENT_SESSION","RESOLVE_STATUS","RESOLVE_USER","MP_ROOT_WORKSPACE") AS 
select asp.workspace, asp.parent_workspace, ssp.savepoint parent_savepoint,
       asp.owner, asp.createTime, asp.description,
       decode(asp.freeze_status,'LOCKED','FROZEN',
                              'UNLOCKED','UNFROZEN') freeze_status,
       decode(asp.oper_status, null, asp.freeze_mode,'INTERNAL') freeze_mode,
       decode(asp.freeze_mode, '1WRITER_SESSION', s.username, asp.freeze_writer) freeze_writer,
       decode(asp.freeze_mode, '1WRITER_SESSION', substr(asp.freeze_writer, 1, instr(asp.freeze_writer, ',')-1), null) sid,
       decode(asp.freeze_mode, '1WRITER_SESSION', substr(asp.freeze_writer, instr(asp.freeze_writer, ',')+1), null) serial#,
       decode(asp.session_duration, 0, asp.freeze_owner, s.username) freeze_owner,
       decode(asp.freeze_status, 'UNLOCKED', null, decode(asp.session_duration, 1, 'YES', 'NO')) session_duration,
       decode(asp.session_duration, 1,
                     decode((select 1 from dual
                             where s.sid=sys_context('lt_ctx', 'cid') and s.serial#=sys_context('lt_ctx', 'serial#')),
                           1, 'YES', 'NO'),
             null) current_session,
       decode(rst.workspace,null,'INACTIVE','ACTIVE') resolve_status,
       rst.resolve_user,
       mp_root mp_root_workspace
from   wmsys.wm$workspaces_table asp, wmsys.wm$workspace_savepoints_table ssp,
       wmsys.wm$resolve_workspaces_table  rst, V$session s
where  nvl(ssp.is_implicit,1) = 1 and
       asp.parent_version  = ssp.version (+) and
       asp.workspace = rst.workspace (+) and
       to_char(s.sid(+)) = substr(asp.freeze_owner, 1, instr(asp.freeze_owner, ',')-1)  and
       to_char(s.serial#(+)) = substr(asp.freeze_owner, instr(asp.freeze_owner, ',')+1)
WITH READ ONLY;

CREATE OR REPLACE FORCE VIEW "DBA_WORKSPACE_SESSIONS"("USERNAME","WORKSPACE","SID","STATUS") AS 
select sut.username,
       sut.workspace,
       sut.sid,
       decode(t.ses_addr, null, 'INACTIVE','ACTIVE') status
from   sys.wm$workspace_sessions_view sut,
       sys.v$transaction t
where  sut.saddr = t.ses_addr (+)
WITH READ ONLY;

CREATE OR REPLACE FORCE VIEW "DBA_XML_SCHEMAS"("OWNER","SCHEMA_URL","LOCAL","SCHEMA","INT_OBJNAME","QUAL_SCHEMA_URL") AS 
select s.xmldata.schema_owner, s.xmldata.schema_url,
          case when bitand(to_number(s.xmldata.flags,'xxxxxxxx'), 16) = 16
               then 'NO' else 'YES' end,
          value(s),
          xdb.xdb$Extname2Intname(s.xmldata.schema_url,s.xmldata.schema_owner),
          case when bitand(to_number(s.xmldata.flags,'xxxxxxxx'), 16) = 16
               then s.xmldata.schema_url
               else 'http://xmlns.oracle.com/xdb/schemas/' ||
                    s.xmldata.schema_owner || '/' ||
                    case when substr(s.xmldata.schema_url, 1, 7) = 'http://'
                         then substr(s.xmldata.schema_url, 8)
                         else s.xmldata.schema_url
                    end
          end
    from xdb.xdb$schema s;

CREATE OR REPLACE FORCE VIEW "DBA_XML_TABLES"("OWNER","TABLE_NAME","XMLSCHEMA","SCHEMA_OWNER","ELEMENT_NAME","STORAGE_TYPE") AS 
select u.name, o.name, null, null, null,
    decode(bitand(opq.flags,5),1,'OBJECT-RELATIONAL','CLOB')
 from sys.opqtype$ opq, sys.tab$ t, sys.user$ u, sys.obj$ o,
      sys.coltype$ ac, sys.col$ tc
 where o.owner# = u.user#
  and o.obj# = t.obj#
  and bitand(t.property, 1) = 1
  and t.obj# = tc.obj#
  and tc.name = 'SYS_NC_ROWINFO$'
  and tc.obj# = ac.obj#
  and tc.intcol# = ac.intcol#
  and ac.toid = '00000000000000000000000000020100'
  and tc.intcol# =  opq.intcol#
  and tc.obj# =  opq.obj#
  and bitand(opq.flags,2) = 0
 union all
 select u.name, o.name, schm.xmldata.schema_url, schm.xmldata.schema_owner,
        decode(xel.xmldata.property.name, null,
        xel.xmldata.property.propref_name.name, xel.xmldata.property.name),
        decode(bitand(opq.flags,5),1,'OBJECT-RELATIONAL','CLOB')
 from xdb.xdb$element xel, xdb.xdb$schema schm, sys.opqtype$ opq,
      sys.tab$ t, sys.user$ u, sys.obj$ o, sys.coltype$ ac, sys.col$ tc
where o.owner# = u.user#
  and o.obj# = t.obj#
  and bitand(t.property, 1) = 1
  and t.obj# = tc.obj#
  and tc.name = 'SYS_NC_ROWINFO$'
  and tc.obj# = ac.obj#
  and tc.intcol# = ac.intcol#
  and ac.toid = '00000000000000000000000000020100'
  and tc.intcol# =  opq.intcol#
  and tc.obj# =  opq.obj#
  and bitand(opq.flags,2) = 2
  and opq.schemaoid =  schm.sys_nc_oid$
  and ref(schm) =  xel.xmldata.property.parent_schema
  and opq.elemnum =  xel.xmldata.property.prop_number;

CREATE OR REPLACE FORCE VIEW "DBA_XML_TAB_COLS"("OWNER","TABLE_NAME","COLUMN_NAME","XMLSCHEMA","SCHEMA_OWNER","ELEMENT_NAME","STORAGE_TYPE") AS 
select u.name, o.name,
   decode(bitand(tc.property, 1), 1, attr.name, tc.name),
   null, null, null,
   decode(bitand(opq.flags,5),1,'OBJECT-RELATIONAL','CLOB')
from sys.opqtype$ opq, sys.tab$ t, sys.user$ u, sys.obj$ o,
     sys.coltype$ ac, sys.col$ tc, sys.attrcol$ attr
where o.owner# = u.user#
  and o.obj# = t.obj#
  and t.obj# = tc.obj#
  and tc.obj# = ac.obj#
  and tc.intcol# = ac.intcol#
  and tc.obj#    = attr.obj#(+)
  and tc.intcol# = attr.intcol#(+)
  and tc.name != 'SYS_NC_ROWINFO$'
  and ac.toid = '00000000000000000000000000020100'
  and tc.intcol# =  opq.intcol#
  and tc.obj# =  opq.obj#
  and bitand(opq.flags,2) = 0
 union all
  select u.name, o.name,
   decode(bitand(tc.property, 1), 1, attr.name, tc.name),
   schm.xmldata.schema_url, schm.xmldata.schema_owner,
decode(xel.xmldata.property.name, null,
        xel.xmldata.property.propref_name.name, xel.xmldata.property.name),
    decode(bitand(opq.flags,5),1,'OBJECT-RELATIONAL','CLOB')
from xdb.xdb$element xel, xdb.xdb$schema schm, sys.opqtype$ opq,
      sys.tab$ t, sys.user$ u, sys.obj$ o, sys.coltype$ ac, sys.col$ tc,
      sys.attrcol$ attr
where o.owner# = u.user#
  and o.obj# = t.obj#
  and t.obj# = tc.obj#
  and tc.obj# = ac.obj#
  and ac.toid = '00000000000000000000000000020100'
  and tc.intcol# = ac.intcol#
  and tc.obj#    = attr.obj#(+)
  and tc.intcol# = attr.intcol#(+)
  and tc.name != 'SYS_NC_ROWINFO$'
  and tc.intcol# =  opq.intcol#
  and tc.obj# =  opq.obj#
  and opq.schemaoid =  schm.sys_nc_oid$
  and bitand(opq.flags,2) = 2
  and ref(schm) =  xel.xmldata.property.parent_schema
  and opq.elemnum =  xel.xmldata.property.prop_number;

CREATE OR REPLACE FORCE VIEW "DBA_XML_VIEWS"("OWNER","VIEW_NAME","XMLSCHEMA","SCHEMA_OWNER","ELEMENT_NAME") AS 
select u.name, o.name, null, null, null
 from sys.opqtype$ opq, sys.view$ v, sys.user$ u, sys.obj$ o,
      sys.coltype$ ac, sys.col$ tc
 where o.owner# = u.user#
  and o.obj# = v.obj#
  and bitand(v.property, 1) = 1
  and v.obj# = tc.obj#
  and tc.name = 'SYS_NC_ROWINFO$'
  and tc.obj# = ac.obj#
  and tc.intcol# = ac.intcol#
  and ac.toid = '00000000000000000000000000020100'
  and tc.intcol# =  opq.intcol#
  and tc.obj# =  opq.obj#
  and bitand(opq.flags,2) = 0
 union all
  select u.name, o.name, schm.xmldata.schema_url, schm.xmldata.schema_owner,
decode(xel.xmldata.property.name, null,
        xel.xmldata.property.propref_name.name, xel.xmldata.property.name)
from xdb.xdb$element xel, xdb.xdb$schema schm, sys.opqtype$ opq,
      sys.view$ v, sys.user$ u, sys.obj$ o, sys.coltype$ ac, sys.col$ tc
where o.owner# = u.user#
  and o.obj# = v.obj#
  and bitand(v.property, 1) = 1
  and v.obj# = tc.obj#
  and tc.name = 'SYS_NC_ROWINFO$'
  and tc.obj# = ac.obj#
  and tc.intcol# = ac.intcol#
  and ac.toid = '00000000000000000000000000020100'
  and tc.intcol# =  opq.intcol#
  and tc.obj# =  opq.obj#
  and bitand(opq.flags,2) = 2
  and opq.schemaoid =  schm.sys_nc_oid$
  and ref(schm) =  xel.xmldata.property.parent_schema
  and opq.elemnum =  xel.xmldata.property.prop_number;

CREATE OR REPLACE FORCE VIEW "DBA_XML_VIEW_COLS"("OWNER","VIEW_NAME","COLUMN_NAME","XMLSCHEMA","SCHEMA_OWNER","ELEMENT_NAME") AS 
select u.name, o.name,
   decode(bitand(tc.property, 1), 1, attr.name, tc.name),
   null, null, null
from  sys.opqtype$ opq,
      sys.view$ v, sys.user$ u, sys.obj$ o, sys.coltype$ ac, sys.col$ tc,
      sys.attrcol$ attr
where o.owner# = u.user#
  and o.obj# = v.obj#
  and bitand(v.property, 1) = 1
  and v.obj# = tc.obj#
  and tc.obj# = ac.obj#
  and tc.intcol# = ac.intcol#
  and tc.obj#    = attr.obj#(+)
  and tc.intcol# = attr.intcol#(+)
  and ac.toid = '00000000000000000000000000020100'
  and tc.intcol# =  opq.intcol#
  and tc.obj# =  opq.obj#
  and bitand(opq.flags,2) = 0
union all
select u.name, o.name,
   decode(bitand(tc.property, 1), 1, attr.name, tc.name),
   schm.xmldata.schema_url, schm.xmldata.schema_owner,
decode(xel.xmldata.property.name, null,
        xel.xmldata.property.propref_name.name, xel.xmldata.property.name)
from xdb.xdb$element xel, xdb.xdb$schema schm, sys.opqtype$ opq,
      sys.view$ v, sys.user$ u, sys.obj$ o, sys.coltype$ ac, sys.col$ tc,
      sys.attrcol$ attr
where o.owner# = u.user#
  and o.obj# = v.obj#
  and bitand(v.property, 1) = 1
  and v.obj# = tc.obj#
  and tc.obj# = ac.obj#
  and tc.intcol# = ac.intcol#
  and tc.obj#    = attr.obj#(+)
  and tc.intcol# = attr.intcol#(+)
  and ac.toid = '00000000000000000000000000020100'
  and tc.intcol# =  opq.intcol#
  and tc.obj# =  opq.obj#
  and opq.schemaoid =  schm.sys_nc_oid$
  and ref(schm) =  xel.xmldata.property.parent_schema
  and opq.elemnum =  xel.xmldata.property.prop_number;

CREATE OR REPLACE FORCE VIEW "DBMSHSXP_SQL_PROFILE_ATTR"("PROFILE_NAME","ATTR_NUMBER","ATTR_VALUE") AS 
select sp.sp_name, sa.attr#, sa.attr_val
from  sqlprof$      sp,
      sqlprof$attr  sa
where sp.signature = sa.signature
and sp.category = sp.category;

CREATE OR REPLACE FORCE VIEW "DBMS_DBUPGRADE_USER_INITCAT"("USERNAME","USER_ID") AS 
SELECT username, user_id from dbms_dbupgrade_usercat$ WHERE which = 0;

CREATE OR REPLACE FORCE VIEW "DBMS_UPG_CURRENT_STATUS"("STATUS","SOURCE_SCHEMA","TARGET_SCHEMA","MESSAGE","START_AT","END_AT") AS 
SELECT status, source_schema, target_schema, message,
         to_char(st_time, 'mon yyyy: hh:mi:ss'),
         to_char(en_time, 'mon yyyy: hh:mi:ss')
  FROM dbms_upg_status$
  WHERE sequence# = (SELECT max(sequence#) FROM dbms_upg_status$);

CREATE OR REPLACE FORCE VIEW "DBMS_UPG_STATUS"("SEQ#","STATUS","SOURCE_SCHEMA","TARGET_SCHEMA","MESSAGE","START_AT","END_AT") AS 
SELECT sequence#, source_schema, target_schema, status, message,
         to_char(st_time, 'mon yyyy: hh:mi:ss'),
         to_char(en_time, 'mon yyyy: hh:mi:ss')
  FROM dbms_upg_status$;

CREATE OR REPLACE FORCE VIEW "DEFCALL"("CALLNO","DEFERRED_TRAN_ID","SCHEMANAME","PACKAGENAME","PROCNAME","ARGCOUNT") AS 
SELECT step_no callno,
       enq_tid deferred_tran_id,
       substrb(sys.dbms_defer_query_utl.key_to_schema_name(
		   recipient_key,
		   enq_tid,
		   step_no), 1, 30) schemaname,
       substrb(sys.dbms_defer_query_utl.key_to_package_name(
		   recipient_key,
		   enq_tid,
		   step_no), 1, 30) packagename,
       substrb(sys.dbms_defer_query_utl.procedure_name(
		   1, --dbms_defer_query_utl.loc_normal_call,
                   chain_no,
                   user_data,
                   recipient_key), 1, 30) procname,
       chain_no argcount
  FROM system.def$_aqcall
    WHERE substrb(sys.dbms_defer_query_utl.key_to_schema_name(
		   recipient_key,
		   enq_tid,
		   step_no), 1, 30) != '** NO DATA FOUND **'
       AND substrb(sys.dbms_defer_query_utl.key_to_package_name(
		   recipient_key,
		   enq_tid,
		   step_no), 1, 30) != '** NO DATA FOUND **'
UNION ALL
SELECT step_no callno,
       enq_tid deferred_tran_id,
       substrb(sys.dbms_defer_query_utl.schema_name(
                  2, --dbms_defer_query_utl.loc_error_call,
                  chain_no,
                  user_data), 1, 30) schemaname,
       substrb(sys.dbms_defer_query_utl.package_name(
                  2, --dbms_defer_query_utl.loc_error_call,
                  chain_no,
                  user_data), 1, 30) packagename,
       substrb(sys.dbms_defer_query_utl.procedure_name(
                  2, --dbms_defer_query_utl.loc_error_call,
                  chain_no,
                  user_data,
                  0), 1, 30) procname,
       chain_no argcount
  FROM system.def$_aqerror;

CREATE OR REPLACE FORCE VIEW "DEFCALLDEST"("CALLNO","DEFERRED_TRAN_ID","DBLINK") AS 
select C1.step_no callno, C.enq_tid deferred_tran_id,
         D.dblink
    from system.def$_aqcall C, system.def$_aqcall C1,
         system.def$_destination D
    where C.cscn IS NOT NULL
      and C1.enq_tid = c.enq_tid
      AND C.cscn >= D.last_delivered
      AND (C.cscn > D.last_delivered
            OR
            (C.cscn = D.last_delivered
             AND (C.enq_tid > D.last_enq_tid)))
      and (( C1.recipient_key = 0
            AND EXISTS (
              select NULL
                from system.def$_calldest CD
                where  CD.enq_tid=C1.enq_tid
                  AND  CD.step_no=C1.step_no
                  AND  CD.dblink = D.dblink
                  AND  CD.catchup = D.catchup))
          OR ( C1.recipient_key > 0
              AND EXISTS (
              SELECT NULL
                from  system.repcat$_repprop P
                WHERE  D.dblink = P.dblink
                  AND  D.catchup = P.extension_id
                  AND  P.how = 1
                  AND  P.recipient_key = C1.recipient_key
                  AND  ((P.delivery_order is NULL) OR
                        (P.delivery_order < C.cscn)))));

CREATE OR REPLACE FORCE VIEW "DEFDEFAULTDEST"("DBLINK") AS 
SELECT "DBLINK" from system.def$_defaultdest;

CREATE OR REPLACE FORCE VIEW "DEFERRCOUNT"("ERRCOUNT","DESTINATION") AS 
SELECT count(1) errcount, destination
    FROM deferror GROUP BY destination;

CREATE OR REPLACE FORCE VIEW "DEFERROR"("DEFERRED_TRAN_ID","ORIGIN_TRAN_DB","ORIGIN_TRAN_ID","CALLNO","DESTINATION","START_TIME","ERROR_NUMBER","ERROR_MSG","RECEIVER") AS 
SELECT
   e.enq_tid deferred_tran_id,
   e.origin_tran_db,
   e.origin_enq_tid origin_tran_id,
   e.step_no callno,
   e.destination,
   e.enq_time start_time, e.error_number, e.error_msg, u.name receiver
    FROM system.def$_error e, sys.user$ u
    WHERE e.receiver = u.user# (+);

CREATE OR REPLACE FORCE VIEW "DEFLOB"("ID","DEFERRED_TRAN_ID","BLOB_COL","CLOB_COL","NCLOB_COL") AS 
SELECT
     d.id,
     d.enq_tid,
     d.blob_col,
     d.clob_col,
     d.nclob_col
  FROM sys.def$_lob d;

CREATE OR REPLACE FORCE VIEW "DEFPROPAGATOR"("USERNAME","USERID","STATUS","CREATED") AS 
SELECT
       p.username,
       p.userid,
       DECODE(u.name, NULL, 'INVALID', 'VALID'),
       p.created
     FROM system.def$_propagator p, sys.user$ u
     WHERE p.userid = u.user# (+);

CREATE OR REPLACE FORCE VIEW "DEFSCHEDULE"("DBLINK","JOB","INTERVAL","NEXT_DATE","LAST_DATE","DISABLED","LAST_TXN_COUNT","LAST_ERROR_NUMBER","LAST_ERROR_MESSAGE","CATCHUP","TOTAL_TXN_COUNT","AVG_THROUGHPUT","AVG_LATENCY","TOTAL_BYTES_SENT","TOTAL_BYTES_RECEIVED","TOTAL_ROUND_TRIPS","TOTAL_ADMIN_COUNT","TOTAL_ERROR_COUNT","TOTAL_SLEEP_TIME","DISABLED_INTERNALLY_SET") AS 
SELECT dblink, job, interval, next_date,
         last_date, disabled, last_txn_count, last_error_number,
         last_error_message, catchup,
         total_txn_count,
         avg_throughput,
         avg_latency,
         total_bytes_sent,
         total_bytes_received,
         total_round_trips,
         total_admin_count,
         total_error_count,
         total_sleep_time,
         disabled_internally_set
    FROM sys."_DEFSCHEDULE";

CREATE OR REPLACE FORCE VIEW "DEFTRAN"("DEFERRED_TRAN_ID","DELIVERY_ORDER","DESTINATION_LIST","START_TIME") AS 
SELECT
  enq_tid deferred_tran_id,
  cscn delivery_order,
  decode(recipient_key, 0, 'D', 'R') destination_list,
  enq_time start_time
  FROM system.def$_aqcall t
  WHERE cscn is NOT NULL
UNION ALL
SELECT enq_tid deferred_tran_id,
  cscn delivery_order,
  'D' destination_list,
  enq_time start_time
  FROM system.def$_aqerror t
  WHERE cscn is NOT NULL;

CREATE OR REPLACE FORCE VIEW "DEFTRANDEST"("DEFERRED_TRAN_ID","DELIVERY_ORDER","DBLINK") AS 
select deferred_tran_id, delivery_order, dblink
    from "_DEFTRANDEST";

CREATE OR REPLACE FORCE VIEW "DICTIONARY"("TABLE_NAME","COMMENTS") AS 
select o.name, c.comment$
from sys.obj$ o, sys.com$ c
where o.obj# = c.obj#(+)
  and c.col# is null
  and o.owner# = 0
  and o.type# = 4
  and (o.name like 'USER%'
       or o.name like 'ALL%'
       or (o.name like 'DBA%'
           and exists
                   (select null
                    from sys.v$enabledprivs
                    where priv_number = -47 /* SELECT ANY TABLE */)
           )
      )
union all
select o.name, c.comment$
from sys.obj$ o, sys.com$ c
where o.obj# = c.obj#(+)
  and o.owner# = 0
  and o.name in ('AUDIT_ACTIONS', 'COLUMN_PRIVILEGES', 'DICTIONARY',
        'DICT_COLUMNS', 'DUAL', 'GLOBAL_NAME', 'INDEX_HISTOGRAM',
        'INDEX_STATS', 'RESOURCE_COST', 'ROLE_ROLE_PRIVS', 'ROLE_SYS_PRIVS',
        'ROLE_TAB_PRIVS', 'SESSION_PRIVS', 'SESSION_ROLES',
        'TABLE_PRIVILEGES','NLS_SESSION_PARAMETERS','NLS_INSTANCE_PARAMETERS',
        'NLS_DATABASE_PARAMETERS', 'DATABASE_COMPATIBLE_LEVEL',
        'DBMS_ALERT_INFO', 'DBMS_LOCK_ALLOCATED')
  and c.col# is null
union all
select so.name, 'Synonym for ' || sy.name
from sys.obj$ ro, sys.syn$ sy, sys.obj$ so
where so.type# = 5
  and ro.linkname is null
  and so.owner# = 1
  and so.obj# = sy.obj#
  and so.name <> sy.name
  and sy.owner = 'SYS'
  and sy.name = ro.name
  and ro.owner# = 0
  and ro.type# = 4
  and (ro.owner# = userenv('SCHEMAID')
       or ro.obj# in
           (select oa.obj#
            from sys.objauth$ oa
            where grantee# in (select kzsrorol from x$kzsro))
       or exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                  ));

CREATE OR REPLACE FORCE VIEW "DICT_COLUMNS"("TABLE_NAME","COLUMN_NAME","COMMENTS") AS 
select o.name, c.name, co.comment$
from sys.com$ co, sys.col$ c, sys.obj$ o
where o.owner# = 0
  and o.type# = 4
  and (o.name like 'USER%'
       or o.name like 'ALL%'
       or (o.name like 'DBA%'
           and exists
                   (select null
                    from sys.v$enabledprivs
                    where priv_number = -47 /* SELECT ANY TABLE */)
           )
      )
  and o.obj# = c.obj#
  and c.obj# = co.obj#(+)
  and c.col# = co.col#(+)
  and bitand(c.property, 32) = 0 /* not hidden column */
union all
select o.name, c.name, co.comment$
from sys.com$ co, sys.col$ c, sys.obj$ o
where o.owner# = 0
  and o.name in ('AUDIT_ACTIONS','DUAL','DICTIONARY', 'DICT_COLUMNS')
  and o.obj# = c.obj#
  and c.obj# = co.obj#(+)
  and c.col# = co.col#(+)
  and bitand(c.property, 32) = 0 /* not hidden column */
union all
select so.name, c.name, co.comment$
from sys.com$ co,sys.col$ c, sys.obj$ ro, sys.syn$ sy, sys.obj$ so
where so.type# = 5
  and so.owner# = 1
  and so.obj# = sy.obj#
  and so.name <> sy.name
  and sy.owner = 'SYS'
  and sy.name = ro.name
  and ro.owner# = 0
  and ro.type# = 4
  and ro.obj# = c.obj#
  and c.col# = co.col#(+)
  and bitand(c.property, 32) = 0 /* not hidden column */
  and c.obj# = co.obj#(+);

CREATE OR REPLACE FORCE VIEW "DISK_AND_FIXED_OBJECTS"("OBJ#","OWNER#","NAME","TYPE#","REMOTEOWNER","LINKNAME") AS 
select obj#, owner#, name, type#, remoteowner, linkname
from sys.obj$
union all
select kobjn_kqfp, 0, name_kqfp,
decode(type_kqfp, 1, 9, 2, 11, 3, 10, 0), NULL, NULL
from sys.x$kqfp
union all
select kqftaobj, 0, kqftanam, 2, NULL, NULL
from sys.x$kqfta
union all
select kqfviobj, 0, kqfvinam, 4, NULL, NULL
from sys.x$kqfvi;

CREATE OR REPLACE FORCE VIEW "ERROR_SIZE"("OBJ#","BYTES") AS 
select e.obj#, sum(e.textlength)
  from sys.error$ e
  group by e.obj#;

CREATE OR REPLACE FORCE VIEW "EXPCOMPRESSEDPART"("SPARE1","TOBJ$") AS 
SELECT s.spare1, t.obj#
        FROM   sys.tabpart$ t, sys.seg$ s
        WHERE  t.ts#    = s.ts#
        AND    t.file#  = s.file#
        AND    t.block# = s.block#
        AND    s.type#  = 5
        AND    (bitand(s.spare1,4096) = 4096 OR bitand(s.spare1,2048) = 2048);

CREATE OR REPLACE FORCE VIEW "EXPCOMPRESSEDSUB"("SPARE1","TOBJ$") AS 
SELECT s.spare1, t.obj#
        FROM   sys.tabsubpart$ t, sys.seg$ s
        WHERE  t.ts#    = s.ts#
        AND    t.file#  = s.file#
        AND    t.block# = s.block#
        AND    s.type#  = 5
        AND    (bitand(s.spare1,4096) = 4096 OR bitand(s.spare1,2048) = 2048);

CREATE OR REPLACE FORCE VIEW "EXPCOMPRESSEDTAB"("SPARE1","TOBJ$") AS 
SELECT s.spare1, t.obj#
        FROM   sys.tab$ t, sys.seg$ s
        WHERE  t.ts#    = s.ts#
        AND    t.file#  = s.file#
        AND    t.block# = s.block#
        AND    s.type#  = 5
        AND    (bitand(s.spare1,4096) = 4096 OR bitand(s.spare1,2048) = 2048);

CREATE OR REPLACE FORCE VIEW "EXPEXEMPT"("COUNT") AS 
SELECT  COUNT(*)
        FROM    sys.sysauth$
        WHERE   (privilege# =
                        (SELECT privilege
                         FROM   sys.system_privilege_map
                         WHERE  name = 'EXEMPT ACCESS POLICY'))
        AND     grantee# = UID   /* user directly has priv */
        OR      (grantee# = UID   /* user has role with priv */
                        AND privilege# > 0
                        AND privilege# IN
                                (SELECT u1.privilege#
                                 FROM sys.sysauth$ u1, sys.sysauth$ u2
                                 WHERE u1.grantee# = UID
                                 AND u1.privilege# = u2.grantee#
                                 AND u2.privilege# =
                                      (SELECT privilege
                                       FROM   sys.system_privilege_map
                                       WHERE  name = 'EXEMPT ACCESS POLICY')));

CREATE OR REPLACE FORCE VIEW "EXPTABSUBPART"("OBJNO","POBJNO","SUBPARTNO","BHIBOUNDVAL","TSNO") AS 
SELECT
              tsp.obj#                                                 OBJNO,
              tsp.pobj#                                                POBJNO,
              row_number() OVER
                   (partition by tsp.pobj# order by tsp.subpart#) - 1  SUBPARTNO,
              bhiboundval                                              BHIBOUNDVAL,
              ts#                                                      TSNO
        FROM sys.tabsubpart$ tsp;

CREATE OR REPLACE FORCE VIEW "EXPTABSUBPARTDATA_VIEW"("SPBND","DSPBND","PONO","SPTS","DSPTS","PDEFTS","TDEFTS","UDEFTS") AS 
SELECT
              sp.bhiboundval       SPBND,
              dsp.bhiboundval      DSPBND,
              p.obj#               PONO,
              sp.tsno              SPTS,
              dsp.ts#              DSPTS,
              p.defts#             PDEFTS,
              tpo.defts#           TDEFTS,
              u.datats#            UDEFTS
        FROM sys.tabcompart$ p, sys.partobj$ tpo, sys.exptabsubpart sp,
             sys.defsubpart$ dsp, sys.obj$ po, sys.obj$ spo, sys.user$ u
        WHERE
             p.bo# = tpo.obj# AND
             p.subpartcnt = MOD(TRUNC(tpo.spare2/65536), 65536) AND
             sp.pobjno = p.obj# AND
             po.obj# = p.obj# AND
             spo.obj# = sp.objno AND
             sp.subpartno = dsp.spart_position AND
             dsp.bo# = p.bo# AND
             u.user# = po.owner# and
             (spo.subname = (po.subname || '_' || dsp.spart_name) OR
                            (po.subname LIKE 'SYS_P%' AND
                             spo.subname LIKE 'SYS_SUBP%'));

CREATE OR REPLACE FORCE VIEW "EXPTABSUBPARTLOBFRAG"("PARENTOBJNO","TSNO","FRAGOBJNO","FRAGNO","TABFRAGOBJNO") AS 
SELECT
              lf.parentobj#                                         PARENTOBJNO,
              lf.ts#                                                TSNO,
              lf.fragobj#                                           FRAGOBJNO,
              row_number() OVER
                 (partition by lf.parentobj# order by lf.frag#) - 1 FRAGNO,
              lf.tabfragobj#                                        TABFRAGOBJNO
        FROM sys.lobfrag$ lf;

CREATE OR REPLACE FORCE VIEW "EXPTABSUBPARTLOB_VIEW"("PONO","LPDEFTS","LFTS","LCDEFTS","LSPDEFTS","SPTS") AS 
SELECT
              tp.obj#            PONO,
              lp.defts#          LPDEFTS,
              lf.tsno            LFTS,
              lb.defts#          LCDEFTS,
              dsp.lob_spart_ts#  LSPDEFTS,
              tsp.ts#            SPTS
        FROM  sys.tabcompart$ tp, sys.lobcomppart$ lp, sys.partlob$ lb,
              sys.exptabsubpartlobfrag lf, sys.defsubpartlob$ dsp,
              sys.obj$ lspo, sys.obj$ tpo, sys.tabsubpart$ tsp
        WHERE
              lp.tabpartobj# = tp.obj# AND
              lp.lobj# = lb.lobj# and
              lf.parentobjno = lp.partobj# AND
              dsp.bo# = tp.bo# and
              dsp.intcol# = lb.intcol# AND
              lspo.obj# = lf.fragobjno AND
              tpo.obj# = tp.obj# AND
              (lspo.subname = tpo.subname || '_' || dsp.lob_spart_name OR
               (tpo.subname LIKE 'SYS_P%' AND lspo.subname LIKE 'SYS_LOB_SUBP%')) AND
              dsp.spart_position = lf.fragno AND
              tsp.obj# = lf.tabfragobjno
     UNION ALL
        SELECT tp.obj#           PONO,
               lp.defts#         LPDEFTS,
               lf.tsno           LFTS,
               lb.defts#         LCDEFTS,
                                 NULL,
               tsp.ts#           SPTS
        FROM sys.tabcompart$ tp, sys.lobcomppart$ lp, sys.partlob$ lb,
             sys.exptabsubpartlobfrag lf, sys.obj$ lspo, sys.obj$ tpo,
             sys.tabsubpart$ tsp
        WHERE lp.tabpartobj# = tp.obj# AND
              lp.lobj# = lb.lobj# AND
              lf.parentobjno = lp.partobj# AND
              lb.intcol# NOT IN
                (SELECT distinct dsp.intcol#
                  FROM sys.defsubpartlob$ dsp
                  WHERE dsp.bo# = tp.bo#) AND
              lspo.obj# = lf.fragobjno AND
              tpo.obj# = tp.obj# AND
              lspo.subname LIKE 'SYS_LOB_SUBP%' AND
              tsp.obj# = lf.tabfragobjno;

CREATE OR REPLACE FORCE VIEW "EXU10ADEFPSWITCHES"("NLSLENSEM","OPTLEVEL","CODETYPE","WARNINGS") AS 
SELECT  a.value, b.value, c.value, d.value
        FROM    sys.v$parameter a, sys.v$parameter b, sys.v$parameter c,
                sys.v$parameter d
        WHERE   a.name = 'nls_length_semantics' AND
                b.name = 'plsql_optimize_level' AND
                c.name = 'plsql_code_type'      AND
                d.name = 'plsql_warnings';

CREATE OR REPLACE FORCE VIEW "EXU10AOBJSWITCH"("OBJID","NLSLENSEM","OPTLEVEL","CODETYPE","DEBUG","WARNINGS") AS 
SELECT  a.obj#, a.value, b.value, c.value, d.value, e.value
        FROM    sys.settings$ a, sys.settings$ b, sys.settings$ c,
                sys.settings$ d, sys.settings$ e, sys.obj$ o
        WHERE   o.obj#  = a.obj# AND
                a.obj#  = b.obj# AND
                b.obj#  = c.obj# AND
                c.obj#  = d.obj# AND
                d.obj#  = e.obj# AND
                a.param = 'nls_length_semantics'         AND
                b.param = 'plsql_optimize_level'         AND
                c.param = 'plsql_code_type'              AND
                d.param = 'plsql_debug'                  AND
                e.param = 'plsql_warnings'               AND
                (UID IN (o.owner#, 0) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'));

CREATE OR REPLACE FORCE VIEW "EXU10ASC"("TOBJID","POBJID","TOWNERID","COLNAME","INTCOL","DISTCOUNT","LOWVAL","HIVAL","DENSITY","NULLCOUNT","AVGCLN","CFLAGS","PROPERTY") AS 
SELECT  c$.obj#, hh$.obj#, o$.owner#, c$.name, hh$.intcol#,
                hh$.distcnt, hh$.lowval, hh$.hival, hh$.density, hh$.null_cnt,
                hh$.avgcln, hh$.spare2, c$.property
        FROM    sys.hist_head$ hh$, sys.obj$ o$, sys.obj$ ot$, sys.col$ c$
        WHERE   hh$.obj# = o$.obj# AND
                c$.obj# = ot$.obj# AND
                o$.owner# = ot$.owner# AND
                hh$.intcol# = c$.intcol#;

CREATE OR REPLACE FORCE VIEW "EXU10ASCU"("TOBJID","POBJID","TOWNERID","COLNAME","INTCOL","DISTCOUNT","LOWVAL","HIVAL","DENSITY","NULLCOUNT","AVGCLN","CFLAGS","PROPERTY") AS 
SELECT  "TOBJID","POBJID","TOWNERID","COLNAME","INTCOL","DISTCOUNT","LOWVAL","HIVAL","DENSITY","NULLCOUNT","AVGCLN","CFLAGS","PROPERTY"
        FROM    sys.exu10asc
        WHERE   townerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU10CCL"("OWNERID","OWNERNAME","CNO","COLNAME","COLNO","INTCOL","PROPERTY","NOLOG") AS 
SELECT  o.owner#, u.name, cc.con#,
                DECODE(BITAND(c.property, 1), 1, at.name, c.name),
                cc.pos#, c.intcol#, c.property,
                DECODE(BITAND(cc.spare1, 1), 1, 1, 0)
        FROM    sys.obj$ o, sys.col$ c, sys.ccol$ cc, sys.attrcol$ at,
                sys.user$ u
        WHERE   o.obj# = cc.obj# AND
                o.owner# = u.user# AND
                c.obj# = cc.obj# AND
                c.intcol# = cc.intcol# AND
                BITAND(c.property, 2097152) = 0 AND               /* Not REA */
                BITAND(c.property, 1024) = 0 AND                /* Not SETID */
                c.obj# = at.obj# (+) AND
                c.intcol# = at.intcol# (+) AND
                NOT EXISTS (
                    SELECT  owner, name
                    FROM    sys.noexp$ ne
                    WHERE   ne.owner = u.name AND
                            ne.name = o.name AND
                            ne.obj_type = 2)
 UNION /* Nested Tables - SETID column */
        SELECT  o.owner#, u.name, cc.con#,
                DECODE(BITAND(c.property, 1), 1, at.name, c.name),
                cc.pos#, c.intcol#, c.property,
                DECODE(BITAND(cc.spare1, 1), 1, 1, 0)
        FROM    sys.obj$ o, sys.col$ c, sys.ccol$ cc, sys.attrcol$ at,
                sys.user$ u, sys.col$ cn
        WHERE   o.obj# = cc.obj# AND
                o.owner# = u.user# AND
                cn.obj# = cc.obj# AND
                cn.intcol# = cc.intcol# AND
                BITAND(cn.property, 1024) = 1024 AND                /* SETID */
                c.obj# = cc.obj# AND
                c.col# = cn.col# AND
                c.intcol# = (cn.intcol# - 1) AND
                c.segcol# = 0 AND
                c.obj# = at.obj# (+) AND
                c.intcol# = at.intcol# (+) AND
                NOT EXISTS (
                    SELECT  owner, name
                    FROM    sys.noexp$ ne
                    WHERE   ne.owner = u.name AND
                            ne.name = o.name AND
                            ne.obj_type = 2)
 UNION /* REFs - REF attribute columns */
        SELECT  o.owner#, u.name, cc.con#,
                DECODE(BITAND(rc.property, 1), 1, at.name, rc.name),
                cc.pos#, rc.intcol#, rc.property,
                DECODE(BITAND(cc.spare1, 1), 1, 1, 0)
        FROM    sys.obj$ o, sys.col$ c, sys.ccol$ cc, sys.attrcol$ at,
                sys.user$ u, sys.coltype$ ct, sys.col$ rc
        WHERE   o.obj# = cc.obj# AND
                o.owner# = u.user# AND
                c.obj# = cc.obj# AND
                c.intcol# = cc.intcol# AND
                BITAND(c.property, 2097152) = 2097152 AND             /* REA */
                ct.obj# = cc.obj# AND
                ct.col# = cc.col# AND
                UTL_RAW.CAST_TO_BINARY_INTEGER(SUBSTRB(ct.intcol#s, 1,2), 3) =
                  cc.intcol# AND            /* first list col# = constr col# */
                rc.obj# = cc.obj# AND
                rc.intcol# = ct.intcol# AND
                rc.obj# = at.obj# (+) AND
                rc.intcol# = at.intcol# (+) AND
                NOT EXISTS (
                    SELECT  owner, name
                    FROM    sys.noexp$ ne
                    WHERE   ne.owner = u.name AND
                            ne.name = o.name AND
                            ne.obj_type = 2);

CREATE OR REPLACE FORCE VIEW "EXU10CCLO"("OWNERID","CNO","COLNAME","COLNO","PROPERTY","NOLOG") AS 
SELECT  a.ownerid, a.cno, a.colname, a.colno, a.property, a.nolog
        FROM    sys.exu10ccl a, sys.con$ b , sys.cdef$ c
        WHERE   b.owner# = UID AND
                b.con# = c.con# AND
                c.rcon# = a.cno;

CREATE OR REPLACE FORCE VIEW "EXU10CCLU"("OWNERID","OWNERNAME","CNO","COLNAME","COLNO","INTCOL","PROPERTY","NOLOG") AS 
SELECT  "OWNERID","OWNERNAME","CNO","COLNAME","COLNO","INTCOL","PROPERTY","NOLOG"
        FROM    sys.exu10ccl
        WHERE   UID = ownerid;

CREATE OR REPLACE FORCE VIEW "EXU10COE"("TOBJID","TOWNER","TOWNERID","TNAME","NAME","LENGTH","PRECISION","SCALE","TYPE","ISNULL","CONNAME","COLID","INTCOLID","SEGCOLID","COMMENT$","DEFAULT$","DFLTLEN","ENABLED","DEFER","FLAGS","COLPROP","ADTNAME","ADTOWNER","COLCLASS","CHARSETID","CHARSETFORM","FSPRECISION","LFPRECISION","CHARLEN","TFLAGS","TYPESYN") AS 
SELECT  "TOBJID","TOWNER","TOWNERID","TNAME","NAME","LENGTH","PRECISION","SCALE","TYPE","ISNULL","CONNAME","COLID","INTCOLID","SEGCOLID","COMMENT$","DEFAULT$","DFLTLEN","ENABLED","DEFER","FLAGS","COLPROP","ADTNAME","ADTOWNER","COLCLASS","CHARSETID","CHARSETFORM","FSPRECISION","LFPRECISION","CHARLEN","TFLAGS","TYPESYN"
        FROM    sys.exu9coe
      UNION ALL
        SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
                v$.precision, v$.scale, v$.type, v$.isnull, v$.conname,
                v$.colid, v$.intcolid, v$.segcolid, v$.comment$, default$,
                v$.dfltlen, v$.enabled, v$.defer, v$.flags, v$.colprop,
                o$.name, u$.name,
                DECODE (v$.name, 'SYS_NC_OID$', 1, 'NESTED_TABLE_ID', 2,
                        'SYS_NC_ROWINFO$', 3, 100),
                v$.charsetid, v$.charsetform, v$.fsprecision, v$.lfprecision,
                v$.charlen, NVL(ct$.flags, 0), NULL
        FROM    sys.exu8col_temp v$, sys.col$ c$, sys.coltype$ ct$,
                sys.obj$ o$, sys.user$ u$
        WHERE   c$.obj# = v$.tobjid AND
                c$.intcol# = v$.intcolid AND
                c$.intcol# = ct$.intcol# (+) AND
                (BITAND(v$.colprop, 32)      != 32 OR          /* not hidden */
                 BITAND(v$.colprop, 1048608) = 1048608 OR  /* snapsht hidden */
                 BITAND(v$.colprop, 4194304) = 4194304) AND    /* RLS Hidden */
                c$.obj# = ct$.obj# (+) AND
                NVL(ct$.toid, HEXTORAW('00')) = o$.oid$ (+) AND
                NVL(o$.owner#, -1) = u$.user# (+) AND
                NVL(o$.type#, -1) != 10 /* bug 882543: no non-existent types */;

CREATE OR REPLACE FORCE VIEW "EXU10COEU"("TOBJID","TOWNER","TOWNERID","TNAME","NAME","LENGTH","PRECISION","SCALE","TYPE","ISNULL","CONNAME","COLID","INTCOLID","SEGCOLID","COMMENT$","DEFAULT$","DFLTLEN","ENABLED","DEFER","FLAGS","COLPROP","ADTNAME","ADTOWNER","COLCLASS","CHARSETID","CHARSETFORM","FSPRECISION","LFPRECISION","CHARLEN","TFLAGS","TYPESYN") AS 
SELECT  "TOBJID","TOWNER","TOWNERID","TNAME","NAME","LENGTH","PRECISION","SCALE","TYPE","ISNULL","CONNAME","COLID","INTCOLID","SEGCOLID","COMMENT$","DEFAULT$","DFLTLEN","ENABLED","DEFER","FLAGS","COLPROP","ADTNAME","ADTOWNER","COLCLASS","CHARSETID","CHARSETFORM","FSPRECISION","LFPRECISION","CHARLEN","TFLAGS","TYPESYN"
        FROM    sys.exu10coe
        WHERE   townerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU10DEFPSWITCHES"("COMPFLGS","NLSLENSEM","OPTLEVEL") AS 
SELECT  a.value, b.value, c.value
        FROM    sys.v$parameter a, sys.v$parameter b, sys.v$parameter c
        WHERE   a.name = 'plsql_compiler_flags' AND
                b.name = 'nls_length_semantics' AND
                c.name = 'plsql_optimize_level';

CREATE OR REPLACE FORCE VIEW "EXU10DOSO"("OBJ#","TABLENAME","OWNERID","TABLESPACE") AS 
SELECT  pi_obj.obj#, c_obj.name, c_obj.owner#,
                /* decode below needed for ConText IOTs - copied from */
                /* USER_TABLES in catalog.sql */
                decode(bitand(tab.property, 2151678048), 0, ts.name, null)
        FROM    sys.obj$ pi_obj, sys.obj$ c_obj, sys.user$ us2,
                sys.secobj$ secobj, sys.tab$ tab, sys.ts$ ts
        WHERE   pi_obj.obj# = secobj.obj# AND       /* has secondary objects */
                c_obj.obj# = secobj.secobj# AND /*object is secondary object */
                c_obj.owner# = us2.user#  AND /* secondary obj is same owner */
                c_obj.type# = 2 AND             /* Secondary Object is TABLE */
                BITAND(c_obj.flags, 128) != 128 AND
                secobj.secobj# = tab.obj# AND
                tab.ts# = ts.ts# AND
                (UID = 0 OR (UID = pi_obj.owner# AND UID = us2.user#) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'));

CREATE OR REPLACE FORCE VIEW "EXU10IND_BASE"("IOBJID","IDOBJID","INAME","IOWNER","IOWNERID","ISPACE","ITSNO","IFILENO","IBLOCKNO","BTNAME","BTOBJID","BTOWNER","BTOWNERID","BTPROPERTY","BTCLUSTERFLAG","PROPERTY","CLUSTER$","PCTFREE$","INITRANS","MAXTRANS","BLEVEL","BITMAP","DEFLOG","TSDEFLOG","DEGREE","INSTANCES","TYPE","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","PRECCNT","IFLAGS","SYSGENCONST") AS 
SELECT  i$.obj#, i$.dataobj#, i$.name, ui$.name, i$.owner#, ts$.name,
                ind$.ts#, ind$.file#, ind$.block#, t$.name, t$.obj#, ut$.name,
                t$.owner#, NVL(tb$.property, 0), NVL(tb$.bobj#, 0),
                ind$.property, DECODE(t$.type#, 3, 1, 0), ind$.pctfree$,
                ind$.initrans, ind$.maxtrans, NVL(ind$.blevel, -1),
                DECODE(ind$.type#, 2, 1, 0),
                DECODE(BITAND(ind$.flags, 4), 4, 1, 0), ts$.dflogging,
                NVL(ind$.degree, 1), NVL(ind$.instances, 1), ind$.type#,
                NVL(ind$.rowcnt, -1), NVL(ind$.leafcnt, -1),
                NVL(ind$.distkey, -1), NVL(ind$.lblkkey, -1),
                NVL(ind$.dblkkey, -1), NVL(ind$.clufac, -1),
                NVL(ind$.spare2, 0), ind$.flags,
                DECODE(BITAND(i$.flags, 4), 4, 1, 0)
        FROM    sys.obj$ t$, sys.obj$ i$, sys.ind$ ind$, sys.user$ ui$,
                sys.user$ ut$, sys.ts$ ts$, sys.tab$ tb$
        WHERE   ind$.bo# = t$.obj# AND
                ind$.obj# = i$.obj# AND
                ind$.bo# = tb$.obj# (+) AND
                ts$.ts# = ind$.ts# AND
                i$.owner# = ui$.user# AND
                t$.owner# = ut$.user# AND
                BITAND(ind$.flags, 4096) = 0 AND          /* skip fake index */
                BITAND(ind$.property, 8208) != 8208 AND /* skip Fn Ind on MV */
                (UID = 0 OR (UID = i$.owner# AND UID = t$.owner#) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'));

CREATE OR REPLACE FORCE VIEW "EXU10MVL"("CTOBJ#","LOG_OWNER","LOG_NAME","LOG_OWNERID","CREATED_TIME","FILE_VERSION","USING_ROWID_FLAG","USING_PRIMARYKEY_FLAG","USING_OID_FLAG","USING_SEQUENCE_FLAG","CHANGE_SET_NAME","SOURCE_SCHEMA_NAME","SOURCE_TABLE_NAME","CREATED_SCN","MVL_FLAG","CAPTURED_VALUES","MVL_TEMP_LOG","MVL_V7TRIGGER","LAST_ALTERED","LOWEST_SCN","MVL_OLDEST_RID","MVL_OLDEST_PK","MVL_OLDEST_OID","MVL_OLDEST_NEW","MVL_OLDEST_RID_TIME","MVL_OLDEST_PK_TIME","MVL_OLDEST_OID_TIME","MVL_OLDEST_NEW_TIME","MVL_BACKCOMPAT_VIEW","MVL_PHYSMVL","HIGHEST_SCN","HIGHEST_TIMESTAMP","MVL_OLDEST_SEQ","MVL_OLDEST_SEQ_TIME") AS 
SELECT  ct.obj#, ct.change_table_schema, ct.change_table_name, u.user#,
                ct.created, 7, DECODE(BITAND(ct.mvl_flag, 1), 1, 1, 0),
                DECODE(BITAND(ct.mvl_flag, 2), 2, 1, 0),
                DECODE(BITAND(ct.mvl_flag, 512), 512, 1, 0),
                DECODE(BITAND(ct.mvl_flag, 1024), 1024, 1, 0),
                ct.change_set_name, ct.source_schema_name,
                ct.source_table_name, ct.created_scn, ct.mvl_flag,
                ct.captured_values, ct.mvl_temp_log, ct.mvl_v7trigger,
                ct.last_altered, ct.lowest_scn, ct.mvl_oldest_rid,
                ct.mvl_oldest_pk, ct.mvl_oldest_oid, ct.mvl_oldest_new,
                ct.mvl_oldest_rid_time, ct.mvl_oldest_pk_time,
                ct.mvl_oldest_oid_time, ct.mvl_oldest_new_time,
                ct.mvl_backcompat_view, ct.mvl_physmvl, ct.highest_scn,
                ct.highest_timestamp, ct.mvl_oldest_seq, ct.mvl_oldest_seq_time
        FROM    sys.cdc_change_tables$ ct, sys.user$ u
        WHERE   ct.change_table_schema = u.name AND
                ct.mvl_flag IS NOT NULL AND
                BITAND(ct.mvl_flag, 128) = 128 AND
                (UID IN (0, u.user#) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'));

CREATE OR REPLACE FORCE VIEW "EXU10MVLU"("CTOBJ#","LOG_OWNER","LOG_NAME","LOG_OWNERID","CREATED_TIME","FILE_VERSION","USING_ROWID_FLAG","USING_PRIMARYKEY_FLAG","USING_OID_FLAG","USING_SEQUENCE_FLAG","CHANGE_SET_NAME","SOURCE_SCHEMA_NAME","SOURCE_TABLE_NAME","CREATED_SCN","MVL_FLAG","CAPTURED_VALUES","MVL_TEMP_LOG","MVL_V7TRIGGER","LAST_ALTERED","LOWEST_SCN","MVL_OLDEST_RID","MVL_OLDEST_PK","MVL_OLDEST_OID","MVL_OLDEST_NEW","MVL_OLDEST_RID_TIME","MVL_OLDEST_PK_TIME","MVL_OLDEST_OID_TIME","MVL_OLDEST_NEW_TIME","MVL_BACKCOMPAT_VIEW","MVL_PHYSMVL","HIGHEST_SCN","HIGHEST_TIMESTAMP","MVL_OLDEST_SEQ","MVL_OLDEST_SEQ_TIME") AS 
SELECT  "CTOBJ#","LOG_OWNER","LOG_NAME","LOG_OWNERID","CREATED_TIME","FILE_VERSION","USING_ROWID_FLAG","USING_PRIMARYKEY_FLAG","USING_OID_FLAG","USING_SEQUENCE_FLAG","CHANGE_SET_NAME","SOURCE_SCHEMA_NAME","SOURCE_TABLE_NAME","CREATED_SCN","MVL_FLAG","CAPTURED_VALUES","MVL_TEMP_LOG","MVL_V7TRIGGER","LAST_ALTERED","LOWEST_SCN","MVL_OLDEST_RID","MVL_OLDEST_PK","MVL_OLDEST_OID","MVL_OLDEST_NEW","MVL_OLDEST_RID_TIME","MVL_OLDEST_PK_TIME","MVL_OLDEST_OID_TIME","MVL_OLDEST_NEW_TIME","MVL_BACKCOMPAT_VIEW","MVL_PHYSMVL","HIGHEST_SCN","HIGHEST_TIMESTAMP","MVL_OLDEST_SEQ","MVL_OLDEST_SEQ_TIME"
        FROM    sys.exu10mvl
        WHERE   log_ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU10NTA"("CLIENT","PROXY","FLAGS","ROLE_CLAUSE","AUTH") AS 
SELECT  u$.name, up$.name, pd$.flags,
                DECODE(pd$.flags,
                       2, 'WITH NO ROLES',
                       4, 'WITH ROLE',
                       8, 'WITH ROLE ALL EXCEPT', ' '),
                DECODE(pd$.credential_type#,
                       5, 'AUTHENTICATION REQUIRED', ' ')
        FROM    sys.user$ u$, sys.user$ up$, sys.proxy_info$ pd$
        WHERE   pd$.client# = u$.user# AND
                pd$.proxy# = up$.user#;

CREATE OR REPLACE FORCE VIEW "EXU10NTAROLE"("ROLEID","ROLE","CLIENT","PROXY") AS 
SELECT  prd$.role#, ur$.name, uc$.name, up$.name
        FROM    sys.user$ ur$, sys.proxy_role_info$ prd$,
                sys.user$ uc$, sys.user$ up$
        WHERE   prd$.role#   = ur$.user# AND
                prd$.client# = uc$.user# AND
                prd$.proxy#  = up$.user#;

CREATE OR REPLACE FORCE VIEW "EXU10OBJSWITCH"("OBJID","COMPFLGS","NLSLENSEM","OPTLEVEL") AS 
SELECT  a.obj#, a.value, b.value, c.value
        FROM    sys.settings$ a, sys.settings$ b, sys.settings$ c, sys.obj$ o
        WHERE   o.obj#  = a.obj# AND
                a.obj#  = b.obj# AND
                b.obj#  = c.obj# AND
                a.param = 'plsql_compiler_flags' AND
                b.param = 'nls_length_semantics' AND
                c.param = 'plsql_optimize_level' AND
                (UID IN (o.owner#, 0) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'));

CREATE OR REPLACE FORCE VIEW "EXU10SNAPL"("LOG_OWNER","LOG_OWNERID","MASTER","LOG_TABLE","LOG_TRIGGER","FLAG","YOUNGEST","OLDEST","OLDEST_PK","MTIME","ROWID_SNAPL","PRIMKEY_SNAPL","OID_SNAPL","SEQ_SNAPL","INV_SNAPL","FILE_VER","TEMP_LOG","OLDEST_OID","OLDEST_NEW","OLDEST_SEQ") AS 
SELECT  m.mowner, u.user#, m.master, m.log, m.trig, NVL(m.flag, 0),
                m.youngest, m.oldest, m.oldest_pk, m.mtime,
                /* have a flag for each snapshot log types: rowid, primary key
                ** for compatibility purpose */
                DECODE(BITAND(NVL(m.flag, 0), 1), 1, 1, 0),
                DECODE(BITAND(NVL(m.flag, 0), 2), 2, 1, 0),
                DECODE(BITAND(NVL(m.flag, 0), 512), 512, 1, 0),
                DECODE(BITAND(NVL(m.flag, 0), 1024), 1024, 1, 0),
                DECODE(BITAND(NVL(m.flag, 0), 16), 16, 1, 0),
                7, m.temp_log, m.oldest_oid, m.oldest_new, m.oldest_seq
        FROM    sys.mlog$ m, sys.user$ u
        WHERE   m.mowner = u.name;

CREATE OR REPLACE FORCE VIEW "EXU10SNAPLC"("LOG_OWNER","LOG_OWNERID","MASTER","LOG_TABLE","LOG_TRIGGER","FLAG","YOUNGEST","OLDEST","OLDEST_PK","MTIME","ROWID_SNAPL","PRIMKEY_SNAPL","OID_SNAPL","SEQ_SNAPL","INV_SNAPL","FILE_VER","TEMP_LOG","OLDEST_OID","OLDEST_NEW","OLDEST_SEQ") AS 
SELECT  s."LOG_OWNER",s."LOG_OWNERID",s."MASTER",s."LOG_TABLE",s."LOG_TRIGGER",s."FLAG",s."YOUNGEST",s."OLDEST",s."OLDEST_PK",s."MTIME",s."ROWID_SNAPL",s."PRIMKEY_SNAPL",s."OID_SNAPL",s."SEQ_SNAPL",s."INV_SNAPL",s."FILE_VER",s."TEMP_LOG",s."OLDEST_OID",s."OLDEST_NEW",s."OLDEST_SEQ"
        FROM    sys.exu10snapl s, sys.incexp i, sys.incvid v
        WHERE   s.master = i.name(+) AND
                s.log_ownerid = i.owner#(+) AND
                NVL(i.type#, 98) = 98 AND
                (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
                 NVL(i.expid, 9999) > v.expid);

CREATE OR REPLACE FORCE VIEW "EXU10SNAPLI"("LOG_OWNER","LOG_OWNERID","MASTER","LOG_TABLE","LOG_TRIGGER","FLAG","YOUNGEST","OLDEST","OLDEST_PK","MTIME","ROWID_SNAPL","PRIMKEY_SNAPL","OID_SNAPL","SEQ_SNAPL","INV_SNAPL","FILE_VER","TEMP_LOG","OLDEST_OID","OLDEST_NEW","OLDEST_SEQ") AS 
SELECT  s."LOG_OWNER",s."LOG_OWNERID",s."MASTER",s."LOG_TABLE",s."LOG_TRIGGER",s."FLAG",s."YOUNGEST",s."OLDEST",s."OLDEST_PK",s."MTIME",s."ROWID_SNAPL",s."PRIMKEY_SNAPL",s."OID_SNAPL",s."SEQ_SNAPL",s."INV_SNAPL",s."FILE_VER",s."TEMP_LOG",s."OLDEST_OID",s."OLDEST_NEW",s."OLDEST_SEQ"
        FROM    sys.exu10snapl s, sys.incexp i, sys.incvid v
        WHERE   s.master = i.name(+) AND
                s.log_ownerid = i.owner#(+) AND
                /* snapshot log also creates a table with the same name */
                NVL(i.type#, 98) IN (2, 98) AND
                (s.mtime > i.itime OR NVL(i.expid, 9999) > v.expid);

CREATE OR REPLACE FORCE VIEW "EXU10SNAPLU"("LOG_OWNER","LOG_OWNERID","MASTER","LOG_TABLE","LOG_TRIGGER","FLAG","YOUNGEST","OLDEST","OLDEST_PK","MTIME","ROWID_SNAPL","PRIMKEY_SNAPL","OID_SNAPL","SEQ_SNAPL","INV_SNAPL","FILE_VER","TEMP_LOG","OLDEST_OID","OLDEST_NEW","OLDEST_SEQ") AS 
SELECT  "LOG_OWNER","LOG_OWNERID","MASTER","LOG_TABLE","LOG_TRIGGER","FLAG","YOUNGEST","OLDEST","OLDEST_PK","MTIME","ROWID_SNAPL","PRIMKEY_SNAPL","OID_SNAPL","SEQ_SNAPL","INV_SNAPL","FILE_VER","TEMP_LOG","OLDEST_OID","OLDEST_NEW","OLDEST_SEQ"
        FROM    sys.exu10snapl
        WHERE   log_ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU10TAB"("OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL") AS 
SELECT  "OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL"
        FROM    sys.exu10tabs t$
        WHERE   t$.secondaryobj = 0;

CREATE OR REPLACE FORCE VIEW "EXU10TABS"("OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL") AS 
SELECT
                o$.obj#, o$.dataobj#, o$.name, u$.name, o$.owner#, ts$.name,
                t$.ts#, t$.file#, t$.block#, t$.audit$, c$.comment$,
                NVL(t$.bobj#, 0), o$.mtime,
                DECODE(BITAND(t$.flags, 1), 1, 1, 0), NVL(t$.tab#, 0),
                MOD(t$.pctfree$, 100), t$.pctused$, t$.initrans, t$.maxtrans,
                NVL(t$.degree, 1), NVL(t$.instances, 1),
                DECODE(BITAND(t$.flags, 8), 8, 1, 0),
                MOD(TRUNC(o$.flags / 2), 2), t$.property,
                DECODE(BITAND(t$.flags, 32), 32, 1, 0), ts$.dflogging, o$.oid$,
                t$.spare1, DECODE(BITAND(o$.flags, 16), 16, 1, 0),
                NVL(t$.rowcnt, -1), NVL(t$.blkcnt, -1), NVL(t$.avgrln, -1),
                t$.flags, t$.trigflag, o$.status,
                (SELECT COUNT(*)
                    FROM sys.opqtype$ opq$
                    WHERE opq$.obj# = o$.obj# AND
                          BITAND(opq$.flags, 32) = 32 )
        FROM    sys.tab$ t$, sys.obj$ o$, sys.ts$ ts$, sys.user$ u$,
                sys.com$ c$
        WHERE   t$.obj# = o$.obj# AND
                t$.ts# = ts$.ts# AND
                u$.user# = o$.owner# AND
                o$.obj# = c$.obj#(+) AND
                c$.col#(+) IS NULL AND
                BITAND(o$.flags,128) != 128 AND      /* Skip recycle bin */
                BITAND(t$.property, 64+512) = 0 AND /*skip IOT and ovflw segs*/
                BITAND(t$.flags, 536870912) = 0    /* skip IOT mapping table */
      UNION ALL                                         /* Index-only tables */
        SELECT  o$.obj#, o$.dataobj#, o$.name, u$.name, o$.owner#, ts$.name,
                i$.ts#, t$.file#, t$.block#, t$.audit$, c$.comment$,
                NVL(t$.bobj#, 0), o$.mtime,
                DECODE(BITAND(t$.flags, 1), 1, 1, 0),
                NVL(t$.tab#, 0), 0, 0, 0, 0, 1, 1,
                DECODE(BITAND(t$.flags, 8), 8, 1, 0),
                MOD(TRUNC(o$.flags / 2), 2), t$.property,
                DECODE(BITAND(t$.flags, 32), 32, 1, 0), ts$.dflogging, o$.oid$,
                t$.spare1, DECODE(BITAND(o$.flags, 16), 16, 1, 0),
                NVL(t$.rowcnt, -1), NVL(t$.blkcnt, -1), NVL(t$.avgrln, -1),
                t$.flags, t$.trigflag, o$.status,
                (SELECT COUNT(*)
                    FROM sys.opqtype$ opq$
                    WHERE opq$.obj# = o$.obj# AND
                          BITAND(opq$.flags, 32) = 32 )
        FROM    sys.tab$ t$, sys.obj$ o$, sys.ts$ ts$, sys.user$ u$,
                sys.com$ c$, sys.ind$ i$
        WHERE   t$.obj# = o$.obj# AND
                u$.user# = o$.owner# AND
                o$.obj# = c$.obj#(+) AND
                c$.col#(+) IS NULL AND
                BITAND(o$.flags,128) != 128 AND      /* Skip recycle bin */
                BITAND(t$.property, 64+512) = 64 AND /* IOT, but not overflow*/
                t$.pctused$ = i$.obj# AND/* For IOTs, pctused has index obj# */
                i$.ts# = ts$.ts#;

CREATE OR REPLACE FORCE VIEW "EXU10TABSU"("OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL") AS 
SELECT  "OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL"
        FROM    sys.exu10tabs
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU10TABU"("OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL") AS 
SELECT  "OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL"
        FROM    sys.exu10tab
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU816CTX"("CTXNAME","SHMNAME","PKGNAME","FLAGS") AS 
SELECT  o$.name, c$.schema, c$.package, c$.flags
        FROM    sys.exu81obj o$, sys.context$ c$
        WHERE   o$.type# = 44 AND
                o$.obj# = c$.obj#;

CREATE OR REPLACE FORCE VIEW "EXU816MAXSQV"("VERSION#","SQL_VERSION") AS 
SELECT  sv.version#, sv.sql_version
        FROM    sys.sql_version$ sv
        WHERE   sv.version# = (
                    SELECT  MAX(sv2.version#)
                    FROM    sys.sql_version$ sv2);

CREATE OR REPLACE FORCE VIEW "EXU816SQV"("VERSION#","SQL_VERSION") AS 
SELECT  sv."VERSION#",sv."SQL_VERSION"
        FROM    sys.sql_version$ sv
        WHERE   sv.version# < (
                    SELECT  m.version#
                    FROM    sys.exu816maxsqv m);

CREATE OR REPLACE FORCE VIEW "EXU816TCTX"("COLS") AS 
SELECT  cols
        FROM    sys.tab$ t, sys.obj$ o
        WHERE   t.obj# = o.obj# AND
                o.name = 'CONTEXT$' AND
                o.type# = 2 AND
                o.owner# = 0;

CREATE OR REPLACE FORCE VIEW "EXU816TGR"("OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","SYS_EVTS","SQLVER","ACTIONSIZE") AS 
SELECT  o.owner#, u.name, t.baseobject, t.definition, t.whenclause,
                t.action#, t.enabled, t.property, o.name,
                DECODE(BITAND(t.property, 24), 0, (
                    SELECT  o2.name
                    FROM    sys.exu81obj o2
                    WHERE   t.baseobject = o2.obj#), ''),
                DECODE(BITAND(t.property, 24), 0, (
                    SELECT  o2.type#
                    FROM    sys.exu81obj o2
                    WHERE   t.baseobject = o2.obj#), 0),
                NVL((
                    SELECT  tb.property
                    FROM    sys.tab$ tb
                    WHERE   t.baseobject = tb.obj#), 0),
                NVL((
                    SELECT  ut.name
                    FROM    sys.user$ ut, sys.exu81obj o2
                    WHERE   t.baseobject = o2.obj# AND
                            o2.owner# = ut.user#), ''),
                NVL((
                    SELECT  ut.user#
                    FROM    sys.user$ ut, sys.exu81obj o2
                    WHERE   t.baseobject = o2.obj# AND
                            o2.owner# = ut.user#), 0),
                t.sys_evts,
                (   SELECT  sv.sql_version
                    FROM    sys.exu816sqv sv
                    WHERE   o.spare1 = sv.version#),
                t.actionsize
        FROM    sys.exu81obj o, sys.trigger$ t, sys.user$ u
        WHERE   o.obj# = t.obj# AND
                u.user# = o.owner#;

CREATE OR REPLACE FORCE VIEW "EXU816TGRC"("OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","SYS_EVTS","SQLVER","ACTIONSIZE") AS 
SELECT "OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","SYS_EVTS","SQLVER","ACTIONSIZE"
        FROM    sys.exu816tgr
        WHERE   (ownerid, basename) IN (
                    SELECT  ownerid, name
                    FROM    sys.exu81tabc)
      UNION ALL
        SELECT  "OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","SYS_EVTS","SQLVER","ACTIONSIZE"
        FROM    sys.exu816tgr
        WHERE   (ownerid, basename) IN (
                    SELECT  ownerid, name
                    FROM    sys.exu8vinfc);

CREATE OR REPLACE FORCE VIEW "EXU816TGRI"("OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","SYS_EVTS","SQLVER","ACTIONSIZE") AS 
SELECT  "OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","SYS_EVTS","SQLVER","ACTIONSIZE"
        FROM    sys.exu816tgr
        WHERE   (ownerid, basename) IN (
                    SELECT  ownerid, name
                    FROM    sys.exu81tabi)
      UNION ALL
        SELECT  "OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","SYS_EVTS","SQLVER","ACTIONSIZE"
        FROM    sys.exu816tgr
        WHERE   (ownerid, basename) IN (
                    SELECT  ownerid, name
                    FROM    sys.exu8vinfi);

CREATE OR REPLACE FORCE VIEW "EXU816TGRIC"("OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","SYS_EVTS","SQLVER","ACTIONSIZE") AS 
SELECT  "OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","SYS_EVTS","SQLVER","ACTIONSIZE"
        FROM    sys.exu816tgr
        WHERE   (ownerid, basename) IN (
                    SELECT  i.owner#, i.name
                    FROM    sys.incexp i, sys.incvid v
                    WHERE   i.expid > v.expid AND
                            i.type# IN (2, 4));

CREATE OR REPLACE FORCE VIEW "EXU816TGRU"("OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","SYS_EVTS","SQLVER","ACTIONSIZE") AS 
SELECT  "OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","SYS_EVTS","SQLVER","ACTIONSIZE"
        FROM    sys.exu816tgr
        WHERE   UID = ownerid;

CREATE OR REPLACE FORCE VIEW "EXU81ACTIONOBJ"("NAME","OBJID","OWNER","OWNERID","PROPERTY","TYPE#","LEVEL#","PACKAGE","PKG_SCHEMA") AS 
SELECT  oa.name, oa.objid, oa.owner, oa.ownerid, oa.property,
                oa.type#, oa.level#, oa.package, oa.pkg_schema
        FROM    sys.exu9actionobj oa
        WHERE   oa.class = 3;

CREATE OR REPLACE FORCE VIEW "EXU81ACTIONPKG"("PACKAGE","PKG_SCHEMA","CLASS","LEVEL#") AS 
SELECT  package, schema, class, level#
        FROM    sys.exppkgact$;

CREATE OR REPLACE FORCE VIEW "EXU81APPROLE"("ROLE","SCHEMA","PACKAGE") AS 
SELECT  u$.name, r$.schema, r$.package
        FROM    sys.user$ u$, sys.approle$ r$
        WHERE   u$.user# = r$.role#;

CREATE OR REPLACE FORCE VIEW "EXU81ASSOC"("OBJOWNER","OBJOWNER#","OBJTYPE","OBJNAME","OBJCOL","STATSSCHEMA","STATSNAME","SELECTIVITY","CPU_COST","IO_COST","NET_COST") AS 
SELECT  ou$.name, oo$.owner#, a$.property, oo$.name, NVL(c$.name, ''),
                NVL(su$.name, ''), NVL(so$.name, ''),
                NVL(a$.default_selectivity, 0), NVL(a$.default_cpu_cost, 0),
                NVL(a$.default_io_cost, 0), NVL(a$.default_net_cost, 0)
        FROM    sys.association$ a$, sys.exu81obj oo$, sys.user$ ou$,
                sys.col$ c$, sys.obj$ so$, sys.user$ su$
        WHERE   a$.obj# = oo$.obj# AND
                oo$.owner# = ou$.user# AND
                a$.intcol# = c$.intcol# (+) AND
                a$.obj# = c$.obj# (+) AND
                a$.statstype# = so$.obj# (+) AND
                so$.owner# = su$.user# (+) AND
                (UID IN (0, oo$.owner#) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'));

CREATE OR REPLACE FORCE VIEW "EXU81CSC"("RELEASE") AS 
SELECT  '8.1.0.0.0'
        FROM    DUAL;

CREATE OR REPLACE FORCE VIEW "EXU81CTX"("CTXNAME","SHMNAME","PKGNAME","OBJNO") AS 
SELECT  o$.name, c$.schema, c$.package, o$.obj#
        FROM    sys.exu81obj o$, sys.context$ c$
        WHERE   o$.type# = 44 AND                                 /* context */
                o$.obj# = c$.obj#;

CREATE OR REPLACE FORCE VIEW "EXU81DOI"("IOBJID","IOWNERID","IPARAMS","ITNAME","ITOWNER","IMPLNAME","IMPLOWNER","DIVERSION","IPROPERTY","GMFLAGS") AS 
SELECT  "IOBJID","IOWNERID","IPARAMS","ITNAME","ITOWNER","IMPLNAME","IMPLOWNER","DIVERSION","IPROPERTY","GMFLAGS"
        FROM    sys.exu9doi
        WHERE   diversion = 1;

CREATE OR REPLACE FORCE VIEW "EXU81DOIU"("IOBJID","IOWNERID","IPARAMS","ITNAME","ITOWNER","IMPLNAME","IMPLOWNER","DIVERSION","IPROPERTY","GMFLAGS") AS 
SELECT  "IOBJID","IOWNERID","IPARAMS","ITNAME","ITOWNER","IMPLNAME","IMPLOWNER","DIVERSION","IPROPERTY","GMFLAGS"
        FROM    sys.exu81doi
        WHERE   iownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU81FIL"("FNAME","FSIZE","MAXEXTEND","INC","TSID","BITMAP") AS 
SELECT  f.fname,
                NVL2(f.fsize, DECODE(f.fsize, -1, -1,
                    CEIL(f.fsize * ((
                    SELECT  t1$.blocksize
                    FROM    sys.ts$ t1$
                    WHERE   t1$.ts# = f.tsid) / (
                    SELECT  t0$.blocksize
                    FROM    sys.ts$ t0$
                    WHERE   t0$.ts# = 0)))), NULL),
                NVL2(f.maxextend, CEIL(f.maxextend * ((
                    SELECT  t1$.blocksize
                    FROM    sys.ts$ t1$
                    WHERE   t1$.ts# = f.tsid) / (
                    SELECT  t0$.blocksize
                    FROM    sys.ts$ t0$
                    WHERE   t0$.ts# = 0))), NULL),
                NVL2(f.inc, CEIL(f.inc * ((
                    SELECT  t1$.blocksize
                    FROM    sys.ts$ t1$
                    WHERE   t1$.ts# = f.tsid) / (
                    SELECT  t0$.blocksize
                    FROM    sys.ts$ t0$
                    WHERE t0$.ts# = 0))), NULL),
                f.tsid, f.bitmap
        FROM    sys.exu9fil f;

CREATE OR REPLACE FORCE VIEW "EXU81IND"("IOBJID","IDOBJID","INAME","IOWNER","IOWNERID","ISPACE","ITSNO","IFILENO","IBLOCKNO","BTNAME","BTOBJID","BTOWNER","BTOWNERID","BTPROPERTY","BTCLUSTERFLAG","PROPERTY","CLUSTER$","PCTFREE$","INITRANS","MAXTRANS","BLEVEL","BITMAP","DEFLOG","TSDEFLOG","DEGREE","INSTANCES","TYPE","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","PRECCNT","IFLAGS","SYSGENCONST") AS 
SELECT  "IOBJID","IDOBJID","INAME","IOWNER","IOWNERID","ISPACE","ITSNO","IFILENO","IBLOCKNO","BTNAME","BTOBJID","BTOWNER","BTOWNERID","BTPROPERTY","BTCLUSTERFLAG","PROPERTY","CLUSTER$","PCTFREE$","INITRANS","MAXTRANS","BLEVEL","BITMAP","DEFLOG","TSDEFLOG","DEGREE","INSTANCES","TYPE","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","PRECCNT","IFLAGS","SYSGENCONST"
        FROM    sys.exu9ind
        WHERE   sysgenconst = 0 AND
                BITAND(property, 1) = 0 OR                     /* not unique */
                NOT EXISTS (
                    SELECT  *
                    FROM    sys.con$ c$, sys.cdef$ cd$
                    WHERE   c$.name = iname AND   /* same name as constraint */
                            c$.owner# = iownerid AND
                            c$.con# = cd$.con# AND
                            NVL(cd$.enabled, 0) = iobjid AND  /* cons enable */
                            ((BITAND(cd$.defer, 8) = 8)))       /* sys gen'd */;

CREATE OR REPLACE FORCE VIEW "EXU81INDC"("IOBJID","IDOBJID","INAME","IOWNER","IOWNERID","ISPACE","ITSNO","IFILENO","IBLOCKNO","BTNAME","BTOBJID","BTOWNER","BTOWNERID","BTPROPERTY","BTCLUSTERFLAG","PROPERTY","CLUSTER$","PCTFREE$","INITRANS","MAXTRANS","BLEVEL","BITMAP","DEFLOG","TSDEFLOG","DEGREE","INSTANCES","TYPE","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","PRECCNT","IFLAGS","SYSGENCONST") AS 
SELECT  "IOBJID","IDOBJID","INAME","IOWNER","IOWNERID","ISPACE","ITSNO","IFILENO","IBLOCKNO","BTNAME","BTOBJID","BTOWNER","BTOWNERID","BTPROPERTY","BTCLUSTERFLAG","PROPERTY","CLUSTER$","PCTFREE$","INITRANS","MAXTRANS","BLEVEL","BITMAP","DEFLOG","TSDEFLOG","DEGREE","INSTANCES","TYPE","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","PRECCNT","IFLAGS","SYSGENCONST"
        FROM    sys.exu81ind
        WHERE   sysgenconst = 0 AND                /* not sys gen constraint */
                (bitmap = 1 OR                             /* select bitmap, */
                 BITAND(property, 16) = 16 OR                 /* functional, */
                 type = 9) AND                         /* and domain indexes */
                (iownerid, btname) IN ((
                    SELECT  ownerid, name
                    FROM    sys.exu81tabc)
                  UNION (
                    SELECT  r.ownerid, r.tname
                    FROM    sys.exu81tabc cc, sys.exu8ref r
                    WHERE   r.robjid = cc.objid))   /* table included in cum */;

CREATE OR REPLACE FORCE VIEW "EXU81INDI"("IOBJID","IDOBJID","INAME","IOWNER","IOWNERID","ISPACE","ITSNO","IFILENO","IBLOCKNO","BTNAME","BTOBJID","BTOWNER","BTOWNERID","BTPROPERTY","BTCLUSTERFLAG","PROPERTY","CLUSTER$","PCTFREE$","INITRANS","MAXTRANS","BLEVEL","BITMAP","DEFLOG","TSDEFLOG","DEGREE","INSTANCES","TYPE","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","PRECCNT","IFLAGS","SYSGENCONST") AS 
SELECT  "IOBJID","IDOBJID","INAME","IOWNER","IOWNERID","ISPACE","ITSNO","IFILENO","IBLOCKNO","BTNAME","BTOBJID","BTOWNER","BTOWNERID","BTPROPERTY","BTCLUSTERFLAG","PROPERTY","CLUSTER$","PCTFREE$","INITRANS","MAXTRANS","BLEVEL","BITMAP","DEFLOG","TSDEFLOG","DEGREE","INSTANCES","TYPE","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","PRECCNT","IFLAGS","SYSGENCONST"
        FROM    sys.exu81ind
        WHERE   sysgenconst = 0 AND                /* not sys gen constraint */
                (bitmap = 1 OR                             /* select bitmap, */
                 BITAND(property, 16) = 16 OR                 /* functional, */
                 type = 9) AND                         /* and domain indexes */
                (iownerid, btname) IN ((
                    SELECT  ownerid, name
                    FROM    sys.exu81tabi)
                  UNION (
                    SELECT  r.ownerid, r.tname
                    FROM    sys.exu9tabi ii, sys.exu8ref r
                    WHERE   r.robjid = ii.objid))   /* table included in inc */;

CREATE OR REPLACE FORCE VIEW "EXU81INDIC"("IOBJID","IDOBJID","INAME","IOWNER","IOWNERID","ISPACE","ITSNO","IFILENO","IBLOCKNO","BTNAME","BTOBJID","BTOWNER","BTOWNERID","BTPROPERTY","BTCLUSTERFLAG","PROPERTY","CLUSTER$","PCTFREE$","INITRANS","MAXTRANS","BLEVEL","BITMAP","DEFLOG","TSDEFLOG","DEGREE","INSTANCES","TYPE","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","PRECCNT","IFLAGS","SYSGENCONST") AS 
SELECT  "IOBJID","IDOBJID","INAME","IOWNER","IOWNERID","ISPACE","ITSNO","IFILENO","IBLOCKNO","BTNAME","BTOBJID","BTOWNER","BTOWNERID","BTPROPERTY","BTCLUSTERFLAG","PROPERTY","CLUSTER$","PCTFREE$","INITRANS","MAXTRANS","BLEVEL","BITMAP","DEFLOG","TSDEFLOG","DEGREE","INSTANCES","TYPE","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","PRECCNT","IFLAGS","SYSGENCONST"
        FROM    sys.exu9indic;

CREATE OR REPLACE FORCE VIEW "EXU81IND_BASE"("IOBJID","IDOBJID","INAME","IOWNER","IOWNERID","ISPACE","ITSNO","IFILENO","IBLOCKNO","BTNAME","BTOBJID","BTOWNER","BTOWNERID","BTPROPERTY","BTCLUSTERFLAG","PROPERTY","CLUSTER$","PCTFREE$","INITRANS","MAXTRANS","BLEVEL","BITMAP","DEFLOG","TSDEFLOG","DEGREE","INSTANCES","TYPE","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","PRECCNT","IFLAGS","SYSGENCONST") AS 
SELECT  "IOBJID","IDOBJID","INAME","IOWNER","IOWNERID","ISPACE","ITSNO","IFILENO","IBLOCKNO","BTNAME","BTOBJID","BTOWNER","BTOWNERID","BTPROPERTY","BTCLUSTERFLAG","PROPERTY","CLUSTER$","PCTFREE$","INITRANS","MAXTRANS","BLEVEL","BITMAP","DEFLOG","TSDEFLOG","DEGREE","INSTANCES","TYPE","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","PRECCNT","IFLAGS","SYSGENCONST"
        FROM    sys.exu9ind_base
        WHERE   sysgenconst = 0;

CREATE OR REPLACE FORCE VIEW "EXU81ITY"("NAME","OBJID","OWNER","OWNERID") AS 
SELECT  o.name, o.obj#, u.name, o.owner#
        FROM    sys.exu81obj o, sys.user$ u, sys.indtypes$ i
        WHERE   o.obj# = i.obj# AND
                o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "EXU81ITYC"("NAME","OBJID","OWNER","OWNERID") AS 
SELECT  it."NAME",it."OBJID",it."OWNER",it."OWNERID"
        FROM    sys.exu81ity it, sys.incexp i, sys.incvid v
        WHERE   it.name = i.name(+) AND
                it.ownerid = i.owner#(+) AND
                NVL(i.type#, 32) = 32 AND
                (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
                 v.expid < NVL(i.expid, 9999));

CREATE OR REPLACE FORCE VIEW "EXU81ITYI"("NAME","OBJID","OWNER","OWNERID") AS 
SELECT  it."NAME",it."OBJID",it."OWNER",it."OWNERID"
        FROM    sys.exu81ity it, sys.incexp i, sys.incvid v
        WHERE   it.name = i.name(+) AND
                it.ownerid = i.owner#(+) AND
                NVL(i.type#, 32) = 32 AND
                v.expid < NVL(i.expid, 9999);

CREATE OR REPLACE FORCE VIEW "EXU81ITYU"("NAME","OBJID","OWNER","OWNERID") AS 
SELECT  "NAME","OBJID","OWNER","OWNERID"
        FROM    sys.exu81ity
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU81IXCP"("OBJID","DOBJID","BOBJID","OWNERID","COMPNAME","PARTNO","HIBOUNDLEN","HIBOUNDVAL","PROWCNT","PBLKCNT","PAVGRLEN","TSNAME","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","INIEXTS","EXTSIZE","MINEXTS","MAXEXTS","EXTPCT","FLISTS","FREEGRP","PCACHE","DEFLOG","TSDEFLOG","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC") AS 
SELECT  p.objid, p.dobjid, p.bobjid, p.ownerid, p.compname, p.partno,
                p.hiboundlen, p.hiboundval, p.prowcnt, p.pblkcnt, p.pavgrlen,
                p.tsname, p.pctfree$, p.pctused$, p.initrans, p.maxtrans,
                CEIL(p.iniexts * (p.blocksize / (
                    SELECT  t$.blocksize
                    FROM    sys.ts$ t$
                    WHERE   t$.ts# = 0))),
                CEIL(p.extsize * (p.blocksize / (
                    SELECT  t$.blocksize
                    FROM    sys.ts$ t$
                    WHERE   t$.ts# = 0))),
                p.minexts, p.maxexts, p.extpct, p.flists, p.freegrp, p.pcache,
                p.deflog, p.tsdeflog, p.blevel, p.leafcnt, p.distkey,
                p.lblkkey, p.dblkkey, p.clufac
        FROM    sys.exu9ixcp p;

CREATE OR REPLACE FORCE VIEW "EXU81IXCPU"("OBJID","DOBJID","BOBJID","OWNERID","COMPNAME","PARTNO","HIBOUNDLEN","HIBOUNDVAL","PROWCNT","PBLKCNT","PAVGRLEN","TSNAME","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","INIEXTS","EXTSIZE","MINEXTS","MAXEXTS","EXTPCT","FLISTS","FREEGRP","PCACHE","DEFLOG","TSDEFLOG","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC") AS 
SELECT  "OBJID","DOBJID","BOBJID","OWNERID","COMPNAME","PARTNO","HIBOUNDLEN","HIBOUNDVAL","PROWCNT","PBLKCNT","PAVGRLEN","TSNAME","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","INIEXTS","EXTSIZE","MINEXTS","MAXEXTS","EXTPCT","FLISTS","FREEGRP","PCACHE","DEFLOG","TSDEFLOG","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC"
        FROM    sys.exu81ixcp
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU81IXSP"("OBJID","DOBJID","POBJID","OWNERID","SUBPARTNO","SUBPNAME","TSNAME","FILENO","BLOCKNO","TSNO","PROWCNT","PBLKCNT","PAVGRLEN","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","HIBOUNDLEN","HIBOUNDVAL") AS 
SELECT  o.obj#, o.dataobj#, isp.pobj#, o.owner#, isp.subpart#,
                o.subname, ts.name, isp.file#, isp.block#, isp.ts#,
                NVL(isp.rowcnt, -1), -1, -1, NVL(isp.blevel, -1),
                NVL(isp.leafcnt, -1), NVL(isp.distkey, -1),
                NVL(isp.lblkkey, -1), NVL(isp.dblkkey, -1),
                NVL(isp.clufac, -1), isp.hiboundlen, isp.hiboundval
        FROM    sys.obj$ o, sys.indsubpart$ isp, sys.ts$ ts
        WHERE   o.type# = 35 AND
                isp.obj# = o.obj# AND
                ts.ts# = isp.ts#;

CREATE OR REPLACE FORCE VIEW "EXU81IXSPU"("OBJID","DOBJID","POBJID","OWNERID","SUBPARTNO","SUBPNAME","TSNAME","FILENO","BLOCKNO","TSNO","PROWCNT","PBLKCNT","PAVGRLEN","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","HIBOUNDLEN","HIBOUNDVAL") AS 
SELECT  "OBJID","DOBJID","POBJID","OWNERID","SUBPARTNO","SUBPNAME","TSNAME","FILENO","BLOCKNO","TSNO","PROWCNT","PBLKCNT","PAVGRLEN","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","HIBOUNDLEN","HIBOUNDVAL"
        FROM    sys.exu81ixsp
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU81JAV"("OWNERID","UNAME","ID","SHORTNAME","TYPEID","TYPE") AS 
SELECT  o.owner#, u.name, o.obj#, o.name, o.type#,
                DECODE(o.type#, 28, 'JAVA SOURCE', 29, 'JAVA CLASS',
                       30, 'JAVA RESOURCE')
        FROM    sys.exu81obj o, sys.user$ u
        WHERE   o.owner# = u.user# AND
                o.type# IN (28, 29, 30) AND
                (UID IN (0, o.owner#) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'));

CREATE OR REPLACE FORCE VIEW "EXU81JAVC"("OWNERID","UNAME","ID","SHORTNAME","TYPEID","TYPE") AS 
SELECT  j."OWNERID",j."UNAME",j."ID",j."SHORTNAME",j."TYPEID",j."TYPE"
        FROM    sys.exu81jav j, sys.incexp i, sys.incvid v
        WHERE   j.shortname = i.name(+) AND
                j.ownerid = i.owner#(+) AND
                NVL(i.type#, 28) IN (28, 29, 30, 31) AND
                (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
                 v.expid < NVL(i.expid, 9999));

CREATE OR REPLACE FORCE VIEW "EXU81JAVI"("OWNERID","UNAME","ID","SHORTNAME","TYPEID","TYPE") AS 
SELECT  j."OWNERID",j."UNAME",j."ID",j."SHORTNAME",j."TYPEID",j."TYPE"
        FROM    sys.exu81jav j, sys.incexp i, sys.incvid v
        WHERE   j.shortname = i.name(+) AND
                j.ownerid = i.owner#(+) AND
                NVL(i.type#, 28) IN (28, 29, 30, 31) AND
                v.expid < NVL(i.expid, 9999);

CREATE OR REPLACE FORCE VIEW "EXU81JAVT"("OBJID") AS 
SELECT  obj#
        FROM    sys.obj$
        WHERE   name LIKE '%DbmsJava' AND
                type# = 29 AND
                owner# = 0 AND
                status = 1;

CREATE OR REPLACE FORCE VIEW "EXU81LBCP"("POBJID","OWNERID","CNAME","LOBCPNAME","TSNAME","SGFLAGS","CHUNK","VERSIONP","FLAGS","PROPERTY","INIEXTS","EXTSIZE","MINEXTS","MAXEXTS","EXTPCT","FLISTS","FGROUPS","PCACHE","COLTYPE","COLTYPFLG") AS 
SELECT  l.pobjid, l.ownerid, l.cname, l.lobcpname, l.tsname, l.sgflags,
                CEIL(l.chunk * (l.blocksize / (
                    SELECT  t$.blocksize
                    FROM    sys.ts$ t$
                    WHERE   t$.ts# = 0))),
                l.versionp, l.flags, l.property,
                CEIL(l.iniexts * (l.blocksize / (
                    SELECT  t$.blocksize
                    FROM    sys.ts$ t$
                    WHERE t$.ts# = 0))),
                CEIL(l.extsize * (l.blocksize / (
                    SELECT  t$.blocksize
                    FROM    sys.ts$ t$
                    WHERE   t$.ts# = 0))),
                l.minexts, l.maxexts, l.extpct, l.flists, l.fgroups, l.pcache,
                l.coltype, l.coltypflg
        FROM    sys.exu9lbcp l;

CREATE OR REPLACE FORCE VIEW "EXU81LBCPU"("POBJID","OWNERID","CNAME","LOBCPNAME","TSNAME","SGFLAGS","CHUNK","VERSIONP","FLAGS","PROPERTY","INIEXTS","EXTSIZE","MINEXTS","MAXEXTS","EXTPCT","FLISTS","FGROUPS","PCACHE","COLTYPE","COLTYPFLG") AS 
SELECT  "POBJID","OWNERID","CNAME","LOBCPNAME","TSNAME","SGFLAGS","CHUNK","VERSIONP","FLAGS","PROPERTY","INIEXTS","EXTSIZE","MINEXTS","MAXEXTS","EXTPCT","FLISTS","FGROUPS","PCACHE","COLTYPE","COLTYPFLG"
        FROM    sys.exu81lbcp
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU81LBP"("POBJID","OWNERID","CNAME","LOBPNAME","TSNAME","SGFLAGS","CHUNK","VERSIONP","FLAGS","PROPERTY","TSNO","FILENO","BLOCKNO","DOBJID","INAME","ISGFLAG","ITSNAME","ITSNO","IFILE","IBLOCK","IDOBJID","IINITRANS","IMAXTRANS","COLTYPE","COLTYPFLG") AS 
SELECT  l.pobjid, l.ownerid, l.cname, l.lobpname, l.tsname, l.sgflags,
                CEIL(l.chunk * (l.blocksize / (
                    SELECT  t$.blocksize
                    FROM    sys.ts$ t$
                    WHERE   t$.ts# = 0))),
                l.versionp, l.flags, l.property, l.tsno, l.fileno, l.blockno,
                l.dobjid, l.iname, l.isgflag, l.itsname, l.itsno, l.ifile,
                l.iblock, l.idobjid, l.iinitrans, l.imaxtrans, l.coltype,
                l.coltypflg
        FROM    sys.exu9lbp l;

CREATE OR REPLACE FORCE VIEW "EXU81LBPU"("POBJID","OWNERID","CNAME","LOBPNAME","TSNAME","SGFLAGS","CHUNK","VERSIONP","FLAGS","PROPERTY","TSNO","FILENO","BLOCKNO","DOBJID","INAME","ISGFLAG","ITSNAME","ITSNO","IFILE","IBLOCK","IDOBJID","IINITRANS","IMAXTRANS","COLTYPE","COLTYPFLG") AS 
SELECT  "POBJID","OWNERID","CNAME","LOBPNAME","TSNAME","SGFLAGS","CHUNK","VERSIONP","FLAGS","PROPERTY","TSNO","FILENO","BLOCKNO","DOBJID","INAME","ISGFLAG","ITSNAME","ITSNO","IFILE","IBLOCK","IDOBJID","IINITRANS","IMAXTRANS","COLTYPE","COLTYPFLG"
        FROM    sys.exu81lbp
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU81LBSP"("POBJID","TOBJID","OWNERID","CNAME","LOBSPNAME","TSNAME","SGFLAGS","TSNO","FILENO","BLOCKNO","DOBJID","INAME","ISGFLAG","ITSNAME","ITSNO","IFILE","IBLOCK","IDOBJID","IINITRANS","IMAXTRANS","COLTYPE","COLTYPFLG","BLOCKSIZE") AS 
SELECT  /*+ NO_INDEX(i_obj1) +*/
                spo.obj#, o.obj#, o.owner#,
                DECODE(bitand(c.property,1), 0, '"'||c.name||'"', 1, ac.name),
                lspo.subname,
                ts.name, lspo.flags, ts.ts#, lf.file#, lf.block#,
                lspo.dataobj#, lispo.name, lispo.flags, its.name, its.ts#,
                isp.file#, isp.block#, lispo.dataobj#, isp.initrans,
                isp.maxtrans, NVL(c.type#, 0),
                (select NVL(ct.flags, 0) from sys.coltype$ ct
                        where ct.obj# = c.obj# AND ct.intcol# = c.intcol#),
                ts.blocksize
        FROM    sys.lobfrag$ lf, sys.indsubpart$ isp, sys.lobcomppart$ lcp,
                sys.partobj$ pobj, sys.obj$ o, sys.col$ c,
                sys.attrcol$ ac, sys.lob$ l,
                sys.obj$ spo, sys.obj$ lspo, sys.obj$ lispo, sys.ts$ its,
                sys.ts$ ts
        WHERE   pobj.obj# = o.obj# AND
                MOD(pobj.spare2, 256) != 0 AND
                o.obj# = c.obj# AND
                c.obj# = l.obj# AND
                c.intcol# = l.intcol# AND
                l.obj# = ac.obj#(+) AND
                l.intcol# = ac.intcol#(+) AND
                l.lobj# = lcp.lobj# AND
                lf.parentobj# = lcp.partobj# AND
                lf.fragobj# = lspo.obj# AND
                lf.tabfragobj# = spo.obj# AND
                lf.indfragobj# = lispo.obj# AND
                lf.indfragobj# = isp.obj# AND
                isp.ts# = its.ts# AND
                lf.ts# = ts.ts# AND
                BITAND(c.property, 32768) != 32768 AND  /* not unused column */
                BITAND(c.property, 256) != 256          /* not sys generated */;

CREATE OR REPLACE FORCE VIEW "EXU81LBSPU"("POBJID","TOBJID","OWNERID","CNAME","LOBSPNAME","TSNAME","SGFLAGS","TSNO","FILENO","BLOCKNO","DOBJID","INAME","ISGFLAG","ITSNAME","ITSNO","IFILE","IBLOCK","IDOBJID","IINITRANS","IMAXTRANS","COLTYPE","COLTYPFLG","BLOCKSIZE") AS 
SELECT  /*+ NO_INDEX(xx1.o i_obj2) +*/ "POBJID","TOBJID","OWNERID","CNAME","LOBSPNAME","TSNAME","SGFLAGS","TSNO","FILENO","BLOCKNO","DOBJID","INAME","ISGFLAG","ITSNAME","ITSNO","IFILE","IBLOCK","IDOBJID","IINITRANS","IMAXTRANS","COLTYPE","COLTYPFLG","BLOCKSIZE"
        FROM    sys.exu81lbsp
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU81NOS"("TOBJID","TOWNER") AS 
SELECT  to$.obj#, to$.owner#
        FROM    sys.obj$ to$, sys.obj$ io$, sys.ind$ ind$
        WHERE   ind$.bo# = to$.obj# AND
                ind$.obj# = io$.obj# AND
                ind$.blevel != -1 AND
                (BITAND(io$.flags, 4) = 4 OR             /* system generated */
                 ind$.type# = 8) AND                            /* LOB index */
                (UID IN (to$.owner#, 0) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'))
      UNION ALL                            /* Table cannot have associations */
        SELECT  to$.obj#, to$.owner#
        FROM    sys.obj$ to$, sys.association$ a$
        WHERE   to$.obj# = a$.obj# AND
                to$.type# = 2 AND                                   /* Table */
                (UID IN (to$.owner#, 0) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'))
      UNION ALL               /* Type used in table cannot have associations */
        SELECT  to$.obj#, to$.owner#
        FROM    sys.obj$ to$, sys.obj$ tt$, sys.coltype$ ct$,
                sys.association$ a$
        WHERE   to$.obj# = ct$.obj# AND
                ct$.toid = tt$.oid$ AND
                tt$.obj# = a$.obj# AND
                (UID IN (to$.owner#, 0) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'));

CREATE OR REPLACE FORCE VIEW "EXU81OBJ"("OBJ#","DATAOBJ#","OWNER#","NAME","NAMESPACE","SUBNAME","TYPE#","CTIME","MTIME","STIME","STATUS","REMOTEOWNER","LINKNAME","FLAGS","OID$","SPARE1","SPARE2","SPARE3","SPARE4","SPARE5","SPARE6") AS 
SELECT  o$."OBJ#",o$."DATAOBJ#",o$."OWNER#",o$."NAME",o$."NAMESPACE",o$."SUBNAME",o$."TYPE#",o$."CTIME",o$."MTIME",o$."STIME",o$."STATUS",o$."REMOTEOWNER",o$."LINKNAME",o$."FLAGS",o$."OID$",o$."SPARE1",o$."SPARE2",o$."SPARE3",o$."SPARE4",o$."SPARE5",o$."SPARE6"
        FROM    sys.obj$ o$, sys.user$ u$
        WHERE   BITAND(o$.flags, 16) != 16 AND
                /* Ignore recycle bin objects */
                BITAND(o$.flags, 128) != 128 AND
                o$.owner# = u$.user# AND
                u$.name NOT IN ('ORDSYS',  'MDSYS', 'CTXSYS', 'ORDPLUGINS',
                                'LBACSYS', 'XDB',   'SI_INFORMTN_SCHEMA',
                                'DIP',     'DMSYS', 'DBSNMP');

CREATE OR REPLACE FORCE VIEW "EXU81OBJECTPKG"("PACKAGE","PKG_SCHEMA","CLASS","TYPE#","LEVEL#") AS 
SELECT  package, schema, class, type#, level#
        FROM    sys.exppkgobj$;

CREATE OR REPLACE FORCE VIEW "EXU81OPR"("NAME","OBJID","OWNER","OWNERID","SQLVER") AS 
SELECT  o.name, o.obj#, u.name, o.owner#, sv.sql_version
        FROM    sys.exu81obj o, sys.user$ u, sys.operator$ op, sys.exu816sqv sv
        WHERE   o.obj# = op.obj# AND
                o.owner# = u.user# AND
                o.spare1 = sv.version# (+);

CREATE OR REPLACE FORCE VIEW "EXU81OPRC"("NAME","OBJID","OWNER","OWNERID","SQLVER") AS 
SELECT  op."NAME",op."OBJID",op."OWNER",op."OWNERID",op."SQLVER"
        FROM    sys.exu81opr op, sys.incexp i, sys.incvid v
        WHERE   op.name = i.name(+) AND
                op.ownerid = i.owner#(+) AND
                NVL(i.type#, 33) = 33 AND
                (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
                 v.expid < NVL(i.expid, 9999));

CREATE OR REPLACE FORCE VIEW "EXU81OPRI"("NAME","OBJID","OWNER","OWNERID","SQLVER") AS 
SELECT  op."NAME",op."OBJID",op."OWNER",op."OWNERID",op."SQLVER"
        FROM    sys.exu81opr op, sys.incexp i, sys.incvid v
        WHERE   op.name = i.name(+) AND
                op.ownerid = i.owner#(+) AND
                NVL(i.type#, 33) = 33 AND
                v.expid < NVL(i.expid, 9999);

CREATE OR REPLACE FORCE VIEW "EXU81OPRU"("NAME","OBJID","OWNER","OWNERID","SQLVER") AS 
SELECT  "NAME","OBJID","OWNER","OWNERID","SQLVER"
        FROM    sys.exu81opr
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU81PLB"("TOBJID","OWNERID","CNAME","LOBNAME","TSNAME","SGFLAGS","PROPERTY","CHUNK","VERSIONP","FLAGS","INIEXTS","EXTSIZE","MINEXTS","MAXEXTS","EXTPCT","FLISTS","FREEGRP","PCACHE","COLTYPE","COLTYPFLG") AS 
SELECT  l.tobjid, l.ownerid, l.cname, l.lobname, l.tsname, l.sgflags,
                l.property,
                CEIL(l.chunk * (l.blocksize / (
                    SELECT  t$.blocksize
                    FROM    sys.ts$ t$
                    WHERE   t$.ts# = 0))),
                l.versionp, l.flags,
                CEIL(l.iniexts * (l.blocksize / (
                    SELECT  t$.blocksize
                    FROM    sys.ts$ t$
                    WHERE   t$.ts# = 0))),
                CEIL(l.extsize * (l.blocksize / (
                    SELECT  t$.blocksize
                    FROM    sys.ts$ t$
                    WHERE   t$.ts# = 0))),
                l.minexts, l.maxexts, l.extpct, l.flists, l.freegrp, l.pcache,
                l.coltype, l.coltypflg
        FROM    sys.exu9plb l;

CREATE OR REPLACE FORCE VIEW "EXU81PLBU"("TOBJID","OWNERID","CNAME","LOBNAME","TSNAME","SGFLAGS","PROPERTY","CHUNK","VERSIONP","FLAGS","INIEXTS","EXTSIZE","MINEXTS","MAXEXTS","EXTPCT","FLISTS","FREEGRP","PCACHE","COLTYPE","COLTYPFLG") AS 
SELECT  "TOBJID","OWNERID","CNAME","LOBNAME","TSNAME","SGFLAGS","PROPERTY","CHUNK","VERSIONP","FLAGS","INIEXTS","EXTSIZE","MINEXTS","MAXEXTS","EXTPCT","FLISTS","FREEGRP","PCACHE","COLTYPE","COLTYPFLG"
        FROM    sys.exu81plb
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU81PROCOBJ"("NAME","OBJID","OWNER","OWNERID","TYPE#","CLASS","PREPOST","LEVEL#","PACKAGE","PKG_SCHEMA") AS 
SELECT  o.name, o.obj#, u.name, o.owner#, o.type#, p.class, p.prepost,
                p.level#, p.package, p.schema
        FROM    sys.exu81obj o, sys.user$ u, sys.exppkgobj$ p
        WHERE   p.type# = o.type# AND
                o.owner# = u.user# AND
                (UID IN (o.owner#, 0) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'));

CREATE OR REPLACE FORCE VIEW "EXU81PROCOBJINSTANCE"("NAME","OBJID","OWNER","OWNERID","TYPE#","CLASS","PREPOST","LEVEL#","PACKAGE","PKG_SCHEMA","PAR_NAME","PAR_OBJID","PAR_PROPERTY") AS 
SELECT  o.name, o.objid, o.owner, o.ownerid, o.type#, o.class,
                o.prepost, o.level#, o.package, o.pkg_schema, op.name,
                d.p_obj#, t.property
        FROM    sys.exu81procobj o, sys.expdepobj$ d, sys.exu81obj op,
                sys.tab$ t
        WHERE   o.class = 3 AND
                d.d_obj# = o.objid AND
                d.p_obj# = op.obj# AND
                d.p_obj# = t.obj#;

CREATE OR REPLACE FORCE VIEW "EXU81PSTC"("OWNER","OWNERID","TNAME","TOBJID","CALLORDER","CALLARG","OBJTYPE","USRARG","PROPERTY") AS 
SELECT  "OWNER","OWNERID","TNAME","TOBJID","CALLORDER","CALLARG","OBJTYPE","USRARG","PROPERTY"
        FROM    sys.exu8pst
        WHERE   (ownerid, tname) IN (
                    SELECT  ownerid, name
                    FROM    sys.exu81tabc);

CREATE OR REPLACE FORCE VIEW "EXU81PSTI"("OWNER","OWNERID","TNAME","TOBJID","CALLORDER","CALLARG","OBJTYPE","USRARG","PROPERTY") AS 
SELECT  "OWNER","OWNERID","TNAME","TOBJID","CALLORDER","CALLARG","OBJTYPE","USRARG","PROPERTY"
        FROM    sys.exu8pst
        WHERE   (ownerid, tname) IN (
                    SELECT  ownerid, name
                    FROM    sys.exu81tabi);

CREATE OR REPLACE FORCE VIEW "EXU81REFC"("OBJID","OWNER","OWNERID","TNAME","ROWNER","RTNAME","CNAME","CNO","RCNO","ACTION","ENABLED","DEFER","PROPERTY","ROBJID","ROWNERID","REFTYPE","REFCONSTR","TYPE") AS 
SELECT  "OBJID","OWNER","OWNERID","TNAME","ROWNER","RTNAME","CNAME","CNO","RCNO","ACTION","ENABLED","DEFER","PROPERTY","ROBJID","ROWNERID","REFTYPE","REFCONSTR","TYPE"
        FROM    sys.exu8ref
        WHERE   (ownerid, tname) IN (
                    SELECT  ownerid, name
                    FROM    sys.exu81tabc);

CREATE OR REPLACE FORCE VIEW "EXU81REFI"("OBJID","OWNER","OWNERID","TNAME","ROWNER","RTNAME","CNAME","CNO","RCNO","ACTION","ENABLED","DEFER","PROPERTY","ROBJID","ROWNERID","REFTYPE","REFCONSTR","TYPE") AS 
SELECT  "OBJID","OWNER","OWNERID","TNAME","ROWNER","RTNAME","CNAME","CNO","RCNO","ACTION","ENABLED","DEFER","PROPERTY","ROBJID","ROWNERID","REFTYPE","REFCONSTR","TYPE"
        FROM    sys.exu8ref
        WHERE   (ownerid, tname) IN (
                    SELECT  ownerid, name
                    FROM    sys.exu81tabi);

CREATE OR REPLACE FORCE VIEW "EXU81RGC"("OWNER","OWNERID","CHILD","TYPE","REFGROUP","INSTSITE") AS 
SELECT  rc$.owner, u$.user#, rc$.name, rc$.type#, NVL(rc$.refgroup, 0),
                rc$.instsite
        FROM    sys.rgchild$ rc$, sys.user$ u$
        WHERE   rc$.owner = u$.name;

CREATE OR REPLACE FORCE VIEW "EXU81RGCU"("OWNER","OWNERID","CHILD","TYPE","REFGROUP","INSTSITE") AS 
SELECT  "OWNER","OWNERID","CHILD","TYPE","REFGROUP","INSTSITE"
        FROM    sys.exu81rgc
        WHERE   UID = ownerid;

CREATE OR REPLACE FORCE VIEW "EXU81RGS"("REFGROUP","OWNERID","OWNER","INSTSITE") AS 
SELECT  NVL(r$.refgroup, 0), u$.user#, r$.owner, r$.instsite
        FROM    sys.rgroup$ r$, sys.user$ u$
        WHERE   r$.owner = u$.name;

CREATE OR REPLACE FORCE VIEW "EXU81RGSU"("REFGROUP","OWNERID","OWNER","INSTSITE") AS 
SELECT  "REFGROUP","OWNERID","OWNER","INSTSITE"
        FROM    sys.exu81rgs
        WHERE   UID = ownerid;

CREATE OR REPLACE FORCE VIEW "EXU81RLS"("OBJOWN","OBJNAM","POLICY","POLOWN","POLSCH","POLFUN","STMTS","CHKOPT","ENABLED","SPOLICY") AS 
SELECT  u.name, o.name, r.pname, r.pfschma, r.ppname, r.pfname,
                DECODE(BITAND(r.stmt_type, 1), 0, '', 'SELECT,') ||
                DECODE(BITAND(r.stmt_type, 2), 0, '', 'INSERT,') ||
                DECODE(BITAND(r.stmt_type, 4), 0, '', 'UPDATE,') ||
                DECODE(BITAND(r.stmt_type, 8), 0, '', 'DELETE,'),
                r.check_opt, r.enable_flag,
                DECODE(BITAND(r.stmt_type, 16), 0, 0, 1)
        FROM    sys.user$ u, sys.obj$ o, sys.rls$ r
        WHERE   u.user# = o.owner# AND
                r.obj# = o.obj# AND
                (UID IN (0, o.owner#) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'));

CREATE OR REPLACE FORCE VIEW "EXU81SCM"("SOWNER","SOWNERID","VNAME","TABNUM","SNACOL","MASCOL","MASPOS","ROLE","INSTSITE","SNAPOS") AS 
SELECT  sc.sowner, u.user#, sc.vname, sc.tabnum, sc.snacol, sc.mascol,
                NVL(sc.maspos, 0), NVL(sc.colrole, 0), instsite, sc.snapos
        FROM    sys.snap_colmap$ sc, sys.user$ u
        WHERE   u.name = sc.sowner;

CREATE OR REPLACE FORCE VIEW "EXU81SCMU"("SOWNER","SOWNERID","VNAME","TABNUM","SNACOL","MASCOL","MASPOS","ROLE","INSTSITE","SNAPOS") AS 
SELECT  "SOWNER","SOWNERID","VNAME","TABNUM","SNACOL","MASCOL","MASPOS","ROLE","INSTSITE","SNAPOS"
        FROM    sys.exu81scm
        WHERE   sownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU81SLFC"("MOWNER","MOWNERID","MASTER","COLNAME","OLDEST","FLAG") AS 
SELECT  mr.mowner, u.user#, mr.master, mr.colname, mr.oldest,
                NVL(mr.flag, 0)
        FROM    sys.mlog_refcol$ mr, sys.user$ u
        WHERE   u.name = mr.mowner;

CREATE OR REPLACE FORCE VIEW "EXU81SLFCU"("MOWNER","MOWNERID","MASTER","COLNAME","OLDEST","FLAG") AS 
SELECT  "MOWNER","MOWNERID","MASTER","COLNAME","OLDEST","FLAG"
        FROM    sys.exu81slfc
        WHERE   mownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU81SNAP"("OWNER","OWNERID","NAME","TABLE_NAME","MASTER_VIEW","MASTER_LINK","MTIME","CAN_USE_LOG","ERROR","TYPE","QUERY","FLAG","ROWID_SNAP","PRIMKEY_SNAP","UPDATE_SNAP","UPDATE_TRIG","UPDATE_LOG","MASTABS","MASVER","LOB_VECTOR","SNAPSHOT","SNAPID","INSTSITE","FLAVOR_ID","FILE_VER","SQL_VER") AS 
SELECT  owner, ownerid, name, table_name, master_view, master_link,
                mtime, can_use_log, error, type, query, flag, rowid_snap,
                primkey_snap, update_snap, update_trig, update_log, mastabs,
                masver, lob_vector, snapshot, snapid, instsite, flavor_id,
                3, sql_ver
        FROM    exu9snap
        WHERE   BITAND(NVL(flag, 0), 16) +     /* supported snapshots: rowid */
                BITAND(NVL(flag, 0), 32) +                    /* primary key */
                BITAND(NVL(flag, 0), 256) +                       /* complex */
                BITAND(NVL(flag, 0), 4096) > 0                  /* aggregate */;

CREATE OR REPLACE FORCE VIEW "EXU81SNAPC"("OWNER","OWNERID","NAME","TABLE_NAME","MASTER_VIEW","MASTER_LINK","MTIME","CAN_USE_LOG","ERROR","TYPE","QUERY","FLAG","ROWID_SNAP","PRIMKEY_SNAP","UPDATE_SNAP","UPDATE_TRIG","UPDATE_LOG","MASTABS","MASVER","LOB_VECTOR","SNAPSHOT","SNAPID","INSTSITE","FLAVOR_ID","FILE_VER","SQL_VER") AS 
SELECT  s."OWNER",s."OWNERID",s."NAME",s."TABLE_NAME",s."MASTER_VIEW",s."MASTER_LINK",s."MTIME",s."CAN_USE_LOG",s."ERROR",s."TYPE",s."QUERY",s."FLAG",s."ROWID_SNAP",s."PRIMKEY_SNAP",s."UPDATE_SNAP",s."UPDATE_TRIG",s."UPDATE_LOG",s."MASTABS",s."MASVER",s."LOB_VECTOR",s."SNAPSHOT",s."SNAPID",s."INSTSITE",s."FLAVOR_ID",s."FILE_VER",s."SQL_VER"
        FROM    sys.exu81snap s, sys.incexp i, sys.incvid v
        WHERE   s.name = i.name(+) AND
                s.ownerid = i.owner#(+) AND
                NVL(i.type#, 99) = 99 AND
                (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
                 NVL(i.expid, 9999) > v.expid);

CREATE OR REPLACE FORCE VIEW "EXU81SNAPI"("OWNER","OWNERID","NAME","TABLE_NAME","MASTER_VIEW","MASTER_LINK","MTIME","CAN_USE_LOG","ERROR","TYPE","QUERY","FLAG","ROWID_SNAP","PRIMKEY_SNAP","UPDATE_SNAP","UPDATE_TRIG","UPDATE_LOG","MASTABS","MASVER","LOB_VECTOR","SNAPSHOT","SNAPID","INSTSITE","FLAVOR_ID","FILE_VER","SQL_VER") AS 
SELECT  s."OWNER",s."OWNERID",s."NAME",s."TABLE_NAME",s."MASTER_VIEW",s."MASTER_LINK",s."MTIME",s."CAN_USE_LOG",s."ERROR",s."TYPE",s."QUERY",s."FLAG",s."ROWID_SNAP",s."PRIMKEY_SNAP",s."UPDATE_SNAP",s."UPDATE_TRIG",s."UPDATE_LOG",s."MASTABS",s."MASVER",s."LOB_VECTOR",s."SNAPSHOT",s."SNAPID",s."INSTSITE",s."FLAVOR_ID",s."FILE_VER",s."SQL_VER"
        FROM    sys.exu81snap s, sys.incexp i, sys.incvid v
        WHERE   s.name = i.name(+) AND
                s.ownerid = i.owner#(+) AND
                /*
                ** Since snapshot also creates a view with the same name,
                ** we need to check for both type view(4) and snapshot(99).
                ** Note: there will be duplicate entry in sys.incexp for this
                */
                NVL(i.type#, 99) in (4, 99) AND
                (s.mtime > i.itime OR
                 NVL(i.expid, 9999) > v.expid);

CREATE OR REPLACE FORCE VIEW "EXU81SNAPL"("LOG_OWNER","LOG_OWNERID","MASTER","LOG_TABLE","LOG_TRIGGER","FLAG","YOUNGEST","OLDEST","OLDEST_PK","MTIME","ROWID_SNAPL","PRIMKEY_SNAPL","FILE_VER","TEMP_LOG") AS 
SELECT  log_owner, log_ownerid, master, log_table, log_trigger,
                /* Clear the bits (0x0080) and higher */
                BITAND(flag, 127), youngest, oldest, oldest_pk, mtime,
                rowid_snapl, primkey_snapl, 3, temp_log
        FROM    sys.exu9snapl
        WHERE   rowid_snapl = 1 OR
                primkey_snapl = 1;

CREATE OR REPLACE FORCE VIEW "EXU81SNAPLC"("LOG_OWNER","LOG_OWNERID","MASTER","LOG_TABLE","LOG_TRIGGER","FLAG","YOUNGEST","OLDEST","OLDEST_PK","MTIME","ROWID_SNAPL","PRIMKEY_SNAPL","FILE_VER","TEMP_LOG") AS 
SELECT  s."LOG_OWNER",s."LOG_OWNERID",s."MASTER",s."LOG_TABLE",s."LOG_TRIGGER",s."FLAG",s."YOUNGEST",s."OLDEST",s."OLDEST_PK",s."MTIME",s."ROWID_SNAPL",s."PRIMKEY_SNAPL",s."FILE_VER",s."TEMP_LOG"
        FROM    sys.exu81snapl s, sys.incexp i, sys.incvid v
        WHERE   s.master = i.name(+) AND
                s.log_ownerid = i.owner#(+) AND
                NVL(i.type#, 98) = 98 AND
                (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
                 NVL(i.expid, 9999) > v.expid);

CREATE OR REPLACE FORCE VIEW "EXU81SNAPLI"("LOG_OWNER","LOG_OWNERID","MASTER","LOG_TABLE","LOG_TRIGGER","FLAG","YOUNGEST","OLDEST","OLDEST_PK","MTIME","ROWID_SNAPL","PRIMKEY_SNAPL","FILE_VER","TEMP_LOG") AS 
SELECT  s."LOG_OWNER",s."LOG_OWNERID",s."MASTER",s."LOG_TABLE",s."LOG_TRIGGER",s."FLAG",s."YOUNGEST",s."OLDEST",s."OLDEST_PK",s."MTIME",s."ROWID_SNAPL",s."PRIMKEY_SNAPL",s."FILE_VER",s."TEMP_LOG"
        FROM    sys.exu81snapl s, sys.incexp i, sys.incvid v
        WHERE   s.master = i.name(+) AND
                s.log_ownerid = i.owner#(+) AND
                /* snapshot log also creates a table with the same name */
                NVL(i.type#, 98) IN (2, 98) AND
                (s.mtime > i.itime OR
                 NVL(i.expid, 9999) > v.expid);

CREATE OR REPLACE FORCE VIEW "EXU81SNAPLU"("LOG_OWNER","LOG_OWNERID","MASTER","LOG_TABLE","LOG_TRIGGER","FLAG","YOUNGEST","OLDEST","OLDEST_PK","MTIME","ROWID_SNAPL","PRIMKEY_SNAPL","FILE_VER","TEMP_LOG") AS 
SELECT  "LOG_OWNER","LOG_OWNERID","MASTER","LOG_TABLE","LOG_TRIGGER","FLAG","YOUNGEST","OLDEST","OLDEST_PK","MTIME","ROWID_SNAPL","PRIMKEY_SNAPL","FILE_VER","TEMP_LOG"
        FROM    sys.exu81snapl
        WHERE   log_ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU81SNAPU"("OWNER","OWNERID","NAME","TABLE_NAME","MASTER_VIEW","MASTER_LINK","MTIME","CAN_USE_LOG","ERROR","TYPE","QUERY","FLAG","ROWID_SNAP","PRIMKEY_SNAP","UPDATE_SNAP","UPDATE_TRIG","UPDATE_LOG","MASTABS","MASVER","LOB_VECTOR","SNAPSHOT","SNAPID","INSTSITE","FLAVOR_ID","FILE_VER","SQL_VER") AS 
SELECT  "OWNER","OWNERID","NAME","TABLE_NAME","MASTER_VIEW","MASTER_LINK","MTIME","CAN_USE_LOG","ERROR","TYPE","QUERY","FLAG","ROWID_SNAP","PRIMKEY_SNAP","UPDATE_SNAP","UPDATE_TRIG","UPDATE_LOG","MASTABS","MASVER","LOB_VECTOR","SNAPSHOT","SNAPID","INSTSITE","FLAVOR_ID","FILE_VER","SQL_VER"
        FROM    sys.exu81snap
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU81SPOK"("OBJID","OWNERID","POSNO","NAME","PROPERTY","FUNCTION","FUNCLEN") AS 
SELECT  o.obj#, o.owner#, spc.pos#,
                DECODE(BITAND(c.property, 1), 1, a.name, c.name),
                c.property, c.default$, c.deflength
        FROM    sys.obj$ o, sys.subpartcol$ spc, sys.col$ c, sys.attrcol$ a
        WHERE   o.obj# = c.obj# AND
                o.obj# = spc.obj# AND
                spc.intcol# = c.intcol# AND
                spc.obj# = a.obj# (+) AND
                spc.intcol# = a.intcol# (+);

CREATE OR REPLACE FORCE VIEW "EXU81SPOKI"("OBJID","OWNERID","POSNO","NAME","PROPERTY","FUNCTION","FUNCLEN") AS 
SELECT  o.obj#, o.owner#, sp.pos#, c.name, c.property, c.default$,
                c.deflength
        FROM    sys.obj$ o, sys.subpartcol$ sp, sys.ind$ i, sys.col$ c
        WHERE   o.obj# = sp.obj# AND
                i.obj# = o.obj# AND
                i.bo# = c.obj# AND
                sp.intcol# = c.intcol#;

CREATE OR REPLACE FORCE VIEW "EXU81SPOKIU"("OBJID","OWNERID","POSNO","NAME","PROPERTY","FUNCTION","FUNCLEN") AS 
SELECT  "OBJID","OWNERID","POSNO","NAME","PROPERTY","FUNCTION","FUNCLEN"
        FROM    sys.exu81spoki
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU81SPOKU"("OBJID","OWNERID","POSNO","NAME","PROPERTY","FUNCTION","FUNCLEN") AS 
SELECT  "OBJID","OWNERID","POSNO","NAME","PROPERTY","FUNCTION","FUNCLEN"
        FROM    sys.exu81spok
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU81SRT"("SOWNER","SOWNERID","VNAME","MASTER_OWNER","MASTER","TABNUM","REFRESH_TIME","MASTER_FLAG","MASTER_OBJNUM","LOADERTIME","INSTSITE","LASTSUCCESS","FCMASKVEC","EJMASKVEC","REFSCN","SUB_HANDLE","CHANGE_VIEW") AS 
SELECT  srt.sowner, u.user#, srt.vname, srt.mowner, srt.master,
                srt.tablenum, srt.snaptime, srt.masflag, srt.masobj#,
                srt.loadertime, srt.instsite, srt.lastsuccess,
                RAWTOHEX(srt.fcmaskvec), RAWTOHEX(srt.ejmaskvec),
                srt.refscn, srt.sub_handle, srt.change_view
        FROM    sys.snap_reftime$ srt, sys.user$ u
        WHERE   u.name = srt.sowner;

CREATE OR REPLACE FORCE VIEW "EXU81SRTU"("SOWNER","SOWNERID","VNAME","MASTER_OWNER","MASTER","TABNUM","REFRESH_TIME","MASTER_FLAG","MASTER_OBJNUM","LOADERTIME","INSTSITE","LASTSUCCESS","FCMASKVEC","EJMASKVEC","REFSCN","SUB_HANDLE","CHANGE_VIEW") AS 
SELECT  "SOWNER","SOWNERID","VNAME","MASTER_OWNER","MASTER","TABNUM","REFRESH_TIME","MASTER_FLAG","MASTER_OBJNUM","LOADERTIME","INSTSITE","LASTSUCCESS","FCMASKVEC","EJMASKVEC","REFSCN","SUB_HANDLE","CHANGE_VIEW"
        FROM    sys.exu81srt
        WHERE   sownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU81TAB"("OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL") AS 
SELECT  "OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL"
        FROM    sys.exu81tabs
        WHERE   secondaryobj = 0 AND
                ( NOT EXISTS (
                         SELECT  *
                         FROM    sys.col$ c$, sys.coltype$ ct$, sys.type$ t$
                         WHERE   c$.obj# = objid AND
                                 ct$.toid = t$.toid AND
                                 c$.obj# = ct$.obj# AND
                                 c$.col# = ct$.col# AND
                                 ((BITAND(t$.PROPERTIES, 8) = 8) OR
                                 (BITAND(t$.PROPERTIES, 8192) = 8192))));

CREATE OR REPLACE FORCE VIEW "EXU81TABC"("OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL") AS 
SELECT  "OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL"
        FROM    sys.exu9tabc
        WHERE   BITAND(trigflag, 31) = trigflag;

CREATE OR REPLACE FORCE VIEW "EXU81TABI"("OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL") AS 
SELECT  "OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL"
        FROM    sys.exu9tabi
        WHERE   BITAND(trigflag, 31) = trigflag;

CREATE OR REPLACE FORCE VIEW "EXU81TABS"("OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL") AS 
SELECT  "OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL"
        FROM    sys.exu9tabs
        WHERE   BITAND(trigflag, 31) = trigflag;

CREATE OR REPLACE FORCE VIEW "EXU81TABSU"("OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL") AS 
SELECT  "OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL"
        FROM    sys.exu81tabs
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU81TABU"("OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL") AS 
SELECT  "OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL"
        FROM    sys.exu81tab
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU81TBCP"("OBJID","DOBJID","BOBJID","OWNERID","COMPNAME","PARTNO","HIBOUNDLEN","HIBOUNDVAL","PROWCNT","PBLKCNT","PAVGRLEN","TSNAME","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","INIEXTS","EXTSIZE","MINEXTS","MAXEXTS","EXTPCT","FLISTS","FREEGRP","PCACHE","DEFLOG","TSDEFLOG","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC") AS 
SELECT  p.objid, p.dobjid, p.bobjid, p.ownerid, p.compname, p.partno,
                p.hiboundlen, p.hiboundval, p.prowcnt, p.pblkcnt, p.pavgrlen,
                p.tsname, p.pctfree$, p.pctused$, p.initrans, p.maxtrans,
                CEIL(p.iniexts * (p.blocksize / (
                    SELECT  t$.blocksize
                    FROM    sys.ts$ t$
                    WHERE   t$.ts# = 0))),
                CEIL(p.extsize * (p.blocksize / (
                    SELECT  t$.blocksize
                    FROM    sys.ts$ t$
                    WHERE   t$.ts# = 0))),
                p.minexts, p.maxexts, p.extpct, p.flists, p.freegrp, p.pcache,
                p.deflog, p.tsdeflog, p.blevel, p.leafcnt, p.distkey,
                p.lblkkey, p.dblkkey, p.clufac
        FROM    sys.exu9tbcp p;

CREATE OR REPLACE FORCE VIEW "EXU81TBCPU"("OBJID","DOBJID","BOBJID","OWNERID","COMPNAME","PARTNO","HIBOUNDLEN","HIBOUNDVAL","PROWCNT","PBLKCNT","PAVGRLEN","TSNAME","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","INIEXTS","EXTSIZE","MINEXTS","MAXEXTS","EXTPCT","FLISTS","FREEGRP","PCACHE","DEFLOG","TSDEFLOG","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC") AS 
SELECT  "OBJID","DOBJID","BOBJID","OWNERID","COMPNAME","PARTNO","HIBOUNDLEN","HIBOUNDVAL","PROWCNT","PBLKCNT","PAVGRLEN","TSNAME","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","INIEXTS","EXTSIZE","MINEXTS","MAXEXTS","EXTPCT","FLISTS","FREEGRP","PCACHE","DEFLOG","TSDEFLOG","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC"
        FROM    sys.exu81tbcp
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU81TBS"("ID","OWNER","NAME","ISONLINE","CONTENT","INIEXT","SEXT","PCTINC","MINEXT","MAXEXT","MINLEN","DEFLOG","EXT_MGT","ALLOC_TYPE") AS 
SELECT  t.id, t.owner, t.name, t.isonline, t.content,
                CEIL(t.iniext * (t.blocksize / (
                    SELECT  t$.blocksize
                    FROM    sys.ts$ t$
                    WHERE   t$.ts# = 0))),
                CEIL(t.sext * (t.blocksize / (
                    SELECT  t$.blocksize
                    FROM    sys.ts$ t$
                    WHERE   t$.ts# = 0))),
                t.pctinc, t.minext, t.maxext,
                CEIL(t.minlen * (t.blocksize / (
                    SELECT  t$.blocksize
                    FROM    sys.ts$ t$
                    WHERE   t$.ts# = 0))),
                t.deflog,
                CEIL(t.ext_mgt * (t.blocksize / (
                    SELECT  t$.blocksize
                    FROM    sys.ts$ t$
                    WHERE   t$.ts# = 0))),
                t.alloc_type
        FROM    sys.exu9tbs t;

CREATE OR REPLACE FORCE VIEW "EXU81TBSP"("OBJID","DOBJID","POBJID","OWNERID","SUBPARTNO","SUBPNAME","TSNAME","FILENO","BLOCKNO","TSNO","PROWCNT","PBLKCNT","PAVGRLEN","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","HIBOUNDLEN","HIBOUNDVAL") AS 
SELECT  o.obj#, o.dataobj#, sp.pobj#, o.owner#, sp.subpart#, o.subname,
                ts.name, sp.file#, sp.block#, sp.ts#, NVL(sp.rowcnt, -1),
                NVL(sp.blkcnt, -1), NVL(sp.avgrln, -1), -1, -1, -1, -1, -1, -1,
                sp.hiboundlen, sp.hiboundval
        FROM    sys.obj$ o, sys.tabsubpart$ sp, sys.ts$ ts
        WHERE   o.type# = 34 AND
                sp.obj# = o.obj# AND
                ts.ts# = sp.ts#;

CREATE OR REPLACE FORCE VIEW "EXU81TBSPU"("OBJID","DOBJID","POBJID","OWNERID","SUBPARTNO","SUBPNAME","TSNAME","FILENO","BLOCKNO","TSNO","PROWCNT","PBLKCNT","PAVGRLEN","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","HIBOUNDLEN","HIBOUNDVAL") AS 
SELECT  "OBJID","DOBJID","POBJID","OWNERID","SUBPARTNO","SUBPNAME","TSNAME","FILENO","BLOCKNO","TSNO","PROWCNT","PBLKCNT","PAVGRLEN","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","HIBOUNDLEN","HIBOUNDVAL"
        FROM    sys.exu81tbsp
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU81TGR"("OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE") AS 
SELECT  ownerid, owner, baseobject, definition, whenclause, action,
                enabled, tproperty, name, basename, basetype, property,
                btowner, btownerid, actionsize
        FROM    sys.exu816tgr
        WHERE   BITAND(sys_evts, 255) = sys_evts;

CREATE OR REPLACE FORCE VIEW "EXU81TGRC"("OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE") AS 
SELECT  "OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE"
        FROM    sys.exu81tgr
        WHERE   (ownerid, basename) IN (
                    SELECT  ownerid, name
                    FROM    sys.exu81tabc)
      UNION ALL
        SELECT  "OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE"
        FROM    sys.exu81tgr
        WHERE   (ownerid, basename) IN (
                    SELECT  ownerid, name
                    FROM    sys.exu8vinfc);

CREATE OR REPLACE FORCE VIEW "EXU81TGRI"("OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE") AS 
SELECT  "OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE"
        FROM    sys.exu81tgr
        WHERE   (ownerid, basename) IN (
                    SELECT  ownerid, name
                    FROM    sys.exu81tabi)
      UNION ALL
        SELECT  "OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE"
        FROM    sys.exu81tgr
        WHERE   (ownerid, basename) IN (
                    SELECT  ownerid, name
                    FROM    sys.exu8vinfi);

CREATE OR REPLACE FORCE VIEW "EXU81TGRIC"("OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE") AS 
SELECT  "OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE"
        FROM    sys.exu81tgr
        WHERE   (ownerid, basename) IN (
                    SELECT  i.owner#, i.name
                    FROM    sys.incexp i, sys.incvid v
                    WHERE   i.expid > v.expid AND
                            i.type# IN (2, 4));

CREATE OR REPLACE FORCE VIEW "EXU81TGRU"("OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE") AS 
SELECT  "OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE"
        FROM    sys.exu81tgr
        WHERE   UID = ownerid;

CREATE OR REPLACE FORCE VIEW "EXU81TNTC"("OBJID","OWNERID","TNAME") AS 
SELECT  objid, ownerid, name
        FROM    sys.exu81tabc                       /* tables in this export */
        WHERE   BITAND(property, 4) = 4           /* table has nested tables */;

CREATE OR REPLACE FORCE VIEW "EXU81TNTI"("OBJID","OWNERID","TNAME") AS 
SELECT  objid, ownerid, name
        FROM    sys.exu81tabi                       /* tables in this export */
        WHERE   BITAND(property, 4) = 4           /* table has nested tables */;

CREATE OR REPLACE FORCE VIEW "EXU81TTS"("DOBJID","NAME","OWNERID","TABNO","CLUSTERFLAG","TSNAME","HAKAN") AS 
SELECT  NVL(t$.dataobj#, t$.obj#), o$.name, o$.owner#, NVL(t$.tab#, 0),
                NVL(t$.bobj#, 0), ts$.name, t$.spare1
        FROM    sys.tab$ t$, sys.obj$ o$, sys.ts$ ts$
        WHERE   t$.obj# = o$.obj# AND
                t$.ts# = ts$.ts# AND
                BITAND(o$.flags, 128) != 128 AND       /* Recycle bin object */
                BITAND(t$.property, 64+512+8192) = 0    /* Not nested or IOT */
      UNION ALL                                   /* 1st Partition is simple */
        SELECT  t$.obj#, o$.name, o$.owner#, NVL(t$.tab#, 0), NVL(t$.bobj#, 0),
                ts$.name, t$.spare1
        FROM    sys.tab$ t$, sys.obj$ o$, sys.ts$ ts$,
                (SELECT  bo#,
                         MIN(ts#) KEEP (DENSE_RANK FIRST ORDER BY part#) ts#
                FROM     sys.tabpart$
                GROUP BY bo#) tp1$
        WHERE   t$.obj# = o$.obj# AND
                t$.obj# = tp1$.bo# AND
                tp1$.ts# = ts$.ts# AND
                BITAND(o$.flags, 128) != 128 AND
                BITAND(t$.property, 64+512+8192) = 0
      UNION ALL                           /* 1st Partition is subpartitioned */
        SELECT  t$.obj#, o$.name, o$.owner#, NVL(t$.tab#, 0), NVL(t$.bobj#, 0),
                ts$.name, t$.spare1
        FROM    sys.tab$ t$, sys.obj$ o$, sys.ts$ ts$,
                (SELECT  tcp$.bo#,
                         MIN(tsp$.ts#) KEEP
                           (DENSE_RANK FIRST ORDER BY
                             tcp$.part#, tsp$.subpart#) ts#
                FROM     sys.tabcompart$ tcp$, sys.tabsubpart$ tsp$
                WHERE    tcp$.obj# = tsp$.pobj#
                GROUP BY tcp$.bo#) tcp1$
        WHERE   t$.obj# = o$.obj# AND
                t$.obj# = tcp1$.bo# AND
                tcp1$.ts# = ts$.ts# AND
                BITAND(o$.flags, 128) != 128 AND       /* recycle bin object */
                BITAND(t$.property, 64+512+8192) = 0
      UNION ALL                                        /* Unpartitioned IOTs */
        SELECT  i$.dataobj#, o$.name, o$.owner#, NVL(t$.tab#, 0),
                NVL(t$.bobj#, 0), ts$.name, t$.spare1
        FROM    sys.tab$ t$, sys.obj$ o$, sys.ts$ ts$, sys.ind$ i$
        WHERE   t$.obj# = o$.obj# AND
                t$.pctused$ = i$.obj# AND /*For IOTs, pctused has index obj# */
                i$.ts# = ts$.ts# AND
                BITAND(o$.flags, 128) != 128 AND       /* recycle bin object */
                BITAND(t$.property, 64+512+8192) = 64
      UNION ALL                                      /* 1st Partition of IOT */
        SELECT  t$.obj#, o$.name, o$.owner#, NVL(t$.tab#, 0), NVL(t$.bobj#, 0),
                ts$.name, t$.spare1
        FROM    sys.tab$ t$, sys.obj$ o$, sys.ts$ ts$,
                (SELECT  bo#,
                         MIN(ts#) KEEP (DENSE_RANK FIRST ORDER BY part#) ts#
                FROM     sys.indpart$
                GROUP BY bo#) ip1$
        WHERE   t$.obj# = o$.obj# AND
                t$.pctused$ = ip1$.bo# AND
                ip1$.ts# = ts$.ts# AND
                BITAND(o$.flags, 128) != 128 AND       /* recycle bin object */
                BITAND(t$.property, 64+512+8192) = 64;

CREATE OR REPLACE FORCE VIEW "EXU81TYP"("TNAME","TOWNER","OWNERID","TOID","MTIME","OBJNO","AUDIT$","SECONDARYOBJ","SQLVER","TYPOBJSTATUS","TVERSION","THASHCODE") AS 
SELECT  o.name, u.name, o.owner#, t.toid,
                TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, tm.audit$,
                DECODE(BITAND(o.flags, 16), 16, 1, 0), sv.sql_version,
                o.status, t.version#, t.hashcode
        FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.type_misc$ tm,
                sys.exu816sqv sv
        WHERE   o.type# = 13 AND
                o.oid$ = t.toid AND
                u.user# = o.owner# AND
                tm.obj# = o.obj# AND
                t.toid  = t.tvoid AND                 /* Only the latest rev */
                BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
                u.name NOT IN ('ORDSYS', 'MDSYS', 'CTXSYS', 'ORDPLUGINS',
                               'LBACSYS', 'XDB',  'SI_INFORMTN_SCHEMA',
                                'DIP',    'DMSYS','DBSNMP') AND
                o.spare1 = sv.version# (+) AND
                BITAND(t.properties, 8) = 0 AND           /* skip NOT FINAL */
                BITAND(t.properties, 8192) = 0             /* skip subtypes */;

CREATE OR REPLACE FORCE VIEW "EXU81TYPU"("TNAME","TOWNER","OWNERID","TOID","MTIME","OBJNO","AUDIT$","SECONDARYOBJ","SQLVER","TYPOBJSTATUS","TVERSION","THASHCODE") AS 
SELECT  "TNAME","TOWNER","OWNERID","TOID","MTIME","OBJNO","AUDIT$","SECONDARYOBJ","SQLVER","TYPOBJSTATUS","TVERSION","THASHCODE"
        FROM    sys.exu81typ
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU81USCI"("IPCTTHRES","IPRECCNT","IOBJID","TOBJID","OVFOBJID","OWNERID","ITSNO","IFILENO","IBLOCKNO","IPCTFREE","IINITR","IMAXTR","DEFLOG","IDOBJID") AS 
SELECT  MOD(i$.pctthres$, 256), NVL(i$.spare2, 0), i$.obj#, i$.bo#,
                NVL(t$.bobj#, 0), o$.owner#, i$.ts#, i$.file#, i$.block#,
                i$.pctfree$, i$.initrans, i$.maxtrans,
                DECODE(BITAND(i$.flags, 4), 4, 1, 0), NVL(i$.dataobj#, 0)
        FROM    sys.ind$ i$, sys.obj$ o$, sys.tab$ t$
        WHERE   i$.bo# = t$.obj# AND
                t$.obj# = o$.obj# AND
                i$.type# = 4;

CREATE OR REPLACE FORCE VIEW "EXU81USCIU"("IPCTTHRES","IPRECCNT","IOBJID","TOBJID","OVFOBJID","OWNERID","ITSNO","IFILENO","IBLOCKNO","IPCTFREE","IINITR","IMAXTR","DEFLOG","IDOBJID") AS 
SELECT  "IPCTTHRES","IPRECCNT","IOBJID","TOBJID","OVFOBJID","OWNERID","ITSNO","IFILENO","IBLOCKNO","IPCTFREE","IINITR","IMAXTR","DEFLOG","IDOBJID"
        FROM    sys.exu81usci
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8ANAL"("ID","ROWCNT") AS 
SELECT  obj#, SIGN(NVL(rowcnt, -1))
        FROM    sys.tab$;

CREATE OR REPLACE FORCE VIEW "EXU8ASC"("TOBJID","POBJID","TOWNERID","COLNAME","INTCOL","DISTCOUNT","LOWVAL","HIVAL","DENSITY","NULLCOUNT","AVGCLN","CFLAGS") AS 
SELECT  c$.obj#, hh$.obj#, o$.owner#, c$.name, hh$.intcol#,
                hh$.distcnt, hh$.lowval, hh$.hival, hh$.density, hh$.null_cnt,
                hh$.avgcln, hh$.spare2
        FROM    sys.hist_head$ hh$, sys.obj$ o$, sys.obj$ ot$, sys.col$ c$
        WHERE   hh$.obj# = o$.obj# AND
                c$.obj# = ot$.obj# AND
                o$.owner# = ot$.owner# AND
                hh$.intcol# = c$.intcol#;

CREATE OR REPLACE FORCE VIEW "EXU8ASCU"("TOBJID","POBJID","TOWNERID","COLNAME","INTCOL","DISTCOUNT","LOWVAL","HIVAL","DENSITY","NULLCOUNT","AVGCLN","CFLAGS") AS 
SELECT  "TOBJID","POBJID","TOWNERID","COLNAME","INTCOL","DISTCOUNT","LOWVAL","HIVAL","DENSITY","NULLCOUNT","AVGCLN","CFLAGS"
        FROM    sys.exu8asc
        WHERE   townerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8AUD"("USERID","NAME","ACTION","SUCCESS","FAILURE") AS 
SELECT  a.user#, u.name, m.name, NVL(a.success, 0), NVL(a.failure, 0)
        FROM    sys.audit$ a, sys.user$ u, sys.stmt_audit_option_map m
        WHERE   a.user# = u.user# AND
                a.option# = m.option# AND
                BITAND(m.property, 1) != 1;

CREATE OR REPLACE FORCE VIEW "EXU8BSZ"("BLOCKSIZE") AS 
SELECT  ts$.blocksize
        FROM    sys.ts$ ts$;

CREATE OR REPLACE FORCE VIEW "EXU8CCL"("OWNERID","OWNERNAME","CNO","COLNAME","COLNO","INTCOL","PROPERTY") AS 
SELECT  o.owner#, u.name, cc.con#,
                DECODE(BITAND(c.property, 1), 1, at.name, c.name),
                cc.pos#, cc.intcol#, c.property
        FROM    sys.obj$ o, sys.col$ c, sys.ccol$ cc, sys.attrcol$ at,
                sys.user$ u
        WHERE   o.obj# = cc.obj# AND
                c.obj# = cc.obj# AND
                cc.intcol# = c.intcol# AND
                o.owner# = u.user# AND
                c.obj# = at.obj# (+) AND
                c.intcol# = at.intcol# (+) AND
                NOT EXISTS (
                    SELECT  owner, name
                    FROM    sys.noexp$ ne
                    WHERE   ne.owner = u.name AND
                            ne.name = o.name AND
                            ne.obj_type = 2);

CREATE OR REPLACE FORCE VIEW "EXU8CCLO"("OWNERID","CNO","COLNAME","COLNO","PROPERTY") AS 
SELECT  a.ownerid, a.cno, a.colname, a.colno, a.property
        FROM    sys.exu8ccl a, sys.con$ b , sys.cdef$ c
        WHERE   b.owner# = UID AND
                b.con# = c.con# AND
                c.rcon# = a.cno;

CREATE OR REPLACE FORCE VIEW "EXU8CCLU"("OWNERID","OWNERNAME","CNO","COLNAME","COLNO","INTCOL","PROPERTY") AS 
SELECT  "OWNERID","OWNERNAME","CNO","COLNAME","COLNO","INTCOL","PROPERTY"
        FROM    sys.exu8ccl
        WHERE   UID = ownerid;

CREATE OR REPLACE FORCE VIEW "EXU8CCO"("TNAME","TOWNER","TOWNERID","CLUSTER$","TCOLNAM","SEQ","PROPERTY") AS 
SELECT  t$.name, u$.name, t$.owner#, c$.name,
                DECODE(BITAND(tc$.property, 1), 1, a$.name, tc$.name),
                cc$.col#, tc$.property
        FROM    sys.obj$ t$, sys.tab$ tab$, sys.obj$ c$, sys.col$ tc$,
                sys.col$ cc$, sys.user$ u$, sys.attrcol$ a$
        WHERE   t$.type# = 2 AND
                t$.obj# = tab$.obj# AND
                tab$.bobj# = cc$.obj# AND
                tab$.obj# = tc$.obj# AND
                tab$.bobj# = c$.obj# AND
                cc$.segcol# = tc$.segcol# AND
                t$.owner# = u$.user# AND
                tc$.obj# = a$.obj# (+) AND
                tc$.intcol# = a$.intcol# (+);

CREATE OR REPLACE FORCE VIEW "EXU8CCOU"("TNAME","TOWNER","TOWNERID","CLUSTER$","TCOLNAM","SEQ","PROPERTY") AS 
SELECT  "TNAME","TOWNER","TOWNERID","CLUSTER$","TCOLNAM","SEQ","PROPERTY"
        FROM    sys.exu8cco
        WHERE   townerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8CGR"("OBJID","GRANTOR","GRANTORID","GRANTEE","CREATORID","CNAME","PRIV","SEQUENCE","WGO") AS 
SELECT  c$.obj#, ur$.name, c$.grantor#, ue$.name, o$.owner#, cl$.name,
                m$.name, c$.sequence#, MOD(NVL(c$.option$, 0), 2)
        FROM    sys.objauth$ c$, sys.obj$ o$, sys.user$ ur$, sys.user$ ue$,
                sys.table_privilege_map m$, sys.col$ cl$
        WHERE   c$.grantor# = ur$.user# AND
                c$.grantee# = ue$.user# AND
                c$.obj# = o$.obj# AND
                c$.privilege# = m$.privilege AND
                c$.obj# = cl$.obj# AND
                c$.col# = cl$.col#;

CREATE OR REPLACE FORCE VIEW "EXU8CGRU"("OBJID","GRANTOR","GRANTORID","GRANTEE","CREATORID","CNAME","PRIV","SEQUENCE","WGO") AS 
SELECT  "OBJID","GRANTOR","GRANTORID","GRANTEE","CREATORID","CNAME","PRIV","SEQUENCE","WGO"
        FROM    sys.exu8cgr
        WHERE   grantorid = UID AND
                creatorid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8CLU"("OBJID","DOBJID","OWNER","OWNERID","NAME","TBLSPACE","SIZE$","TSNO","FILENO","BLOCKNO","MTIME","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","HASHKEYS","FUNCTION","AVGCHN","DEGREE","INSTANCES","CACHE","FUNCTXT","FUNCLEN","SINGLE_TABLE","SQLVER","TFLAGS") AS 
SELECT  o$.obj#, o$.dataobj#, u$.name, o$.owner#, o$.name, ts$.name,
                NVL(c$.size$, -1), ts$.ts#, c$.file#, c$.block#, o$.mtime,
                MOD(c$.pctfree$, 100), c$.pctused$, c$.initrans, c$.maxtrans,
                NVL(c$.hashkeys, 0), NVL(c$.func, 1), NVL(c$.avgchn, -1),
                NVL(c$.degree, 1), NVL(c$.instances, 1),
                DECODE(BITAND(c$.flags, 8), 8, 1, 0), cd$.condition,
                cd$.condlength, DECODE(BITAND(c$.flags, 65536), 65536, 1, 0),
                sv$.sql_version, c$.flags
        FROM    sys.obj$ o$, sys.clu$ c$, sys.ts$ ts$, sys.user$ u$,
                sys.cdef$ cd$, sys.exu816sqv sv$
        WHERE   o$.obj# = c$.obj# AND
                c$.ts# = ts$.ts# AND
                o$.owner# = u$.user# AND
                cd$.obj#(+) = c$.obj# AND
                o$.spare1 = sv$.version# (+);

CREATE OR REPLACE FORCE VIEW "EXU8CLUC"("OBJID","DOBJID","OWNER","OWNERID","NAME","TBLSPACE","SIZE$","TSNO","FILENO","BLOCKNO","MTIME","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","HASHKEYS","FUNCTION","AVGCHN","DEGREE","INSTANCES","CACHE","FUNCTXT","FUNCLEN","SINGLE_TABLE","SQLVER","TFLAGS") AS 
SELECT  c."OBJID",c."DOBJID",c."OWNER",c."OWNERID",c."NAME",c."TBLSPACE",c."SIZE$",c."TSNO",c."FILENO",c."BLOCKNO",c."MTIME",c."PCTFREE$",c."PCTUSED$",c."INITRANS",c."MAXTRANS",c."HASHKEYS",c."FUNCTION",c."AVGCHN",c."DEGREE",c."INSTANCES",c."CACHE",c."FUNCTXT",c."FUNCLEN",c."SINGLE_TABLE",c."SQLVER",c."TFLAGS"
        FROM    sys.exu8clu c, sys.incexp i, sys.incvid v
        WHERE   c.name = i.name(+) AND
                c.ownerid = i.owner#(+) AND
                NVL(i.type#, 3) = 3 AND
                (i.itime > NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) OR
                 c.mtime > i.itime OR
                 NVL(i.expid, 9999) > v.expid);

CREATE OR REPLACE FORCE VIEW "EXU8CLUI"("OBJID","DOBJID","OWNER","OWNERID","NAME","TBLSPACE","SIZE$","TSNO","FILENO","BLOCKNO","MTIME","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","HASHKEYS","FUNCTION","AVGCHN","DEGREE","INSTANCES","CACHE","FUNCTXT","FUNCLEN","SINGLE_TABLE","SQLVER","TFLAGS") AS 
SELECT  c."OBJID",c."DOBJID",c."OWNER",c."OWNERID",c."NAME",c."TBLSPACE",c."SIZE$",c."TSNO",c."FILENO",c."BLOCKNO",c."MTIME",c."PCTFREE$",c."PCTUSED$",c."INITRANS",c."MAXTRANS",c."HASHKEYS",c."FUNCTION",c."AVGCHN",c."DEGREE",c."INSTANCES",c."CACHE",c."FUNCTXT",c."FUNCLEN",c."SINGLE_TABLE",c."SQLVER",c."TFLAGS"
        FROM    sys.exu8clu c, sys.incexp i, sys.incvid v
        WHERE   c.name = i.name(+) AND
                c.ownerid = i.owner#(+) AND
                (c.mtime > i.itime OR
                 NVL(i.expid, 9999) > v.expid);

CREATE OR REPLACE FORCE VIEW "EXU8CLUU"("OBJID","DOBJID","OWNER","OWNERID","NAME","TBLSPACE","SIZE$","TSNO","FILENO","BLOCKNO","MTIME","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","HASHKEYS","FUNCTION","AVGCHN","DEGREE","INSTANCES","CACHE","FUNCTXT","FUNCLEN","SINGLE_TABLE","SQLVER","TFLAGS") AS 
SELECT  "OBJID","DOBJID","OWNER","OWNERID","NAME","TBLSPACE","SIZE$","TSNO","FILENO","BLOCKNO","MTIME","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","HASHKEYS","FUNCTION","AVGCHN","DEGREE","INSTANCES","CACHE","FUNCTXT","FUNCLEN","SINGLE_TABLE","SQLVER","TFLAGS"
        FROM    sys.exu8clu
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8CMT"("USERID","OBJID","COLNO","COLNAME","CMNT") AS 
SELECT  o$.owner#, cm$.obj#, cm$.col#, c$.name, cm$.comment$
        FROM    sys.com$ cm$, sys.obj$ o$, sys.col$ c$
        WHERE   o$.obj# = cm$.obj# AND
                c$.obj# = cm$.obj# AND
                c$.intcol# = cm$.col#;

CREATE OR REPLACE FORCE VIEW "EXU8CMTU"("USERID","OBJID","COLNO","COLNAME","CMNT") AS 
SELECT  "USERID","OBJID","COLNO","COLNAME","CMNT"
        FROM    sys.exu8cmt
        WHERE   userid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8COE"("TOBJID","TOWNER","TOWNERID","TNAME","NAME","LENGTH","PRECISION","SCALE","TYPE","ISNULL","CONNAME","COLID","INTCOLID","SEGCOLID","COMMENT$","DEFAULT$","DFLTLEN","ENABLED","DEFER","FLAGS","COLPROP","ADTNAME","ADTOWNER","COLCLASS","CHARSETID","CHARSETFORM","FSPRECISION","LFPRECISION","CHARLEN","TFLAGS") AS 
SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
                v$.precision, v$.scale, v$.type, v$.isnull, v$.conname,
                v$.colid, v$.intcolid, v$.segcolid, v$.comment$, default$,
                v$.dfltlen, v$.enabled, v$.defer, v$.flags, v$.colprop,
                o$.name, u$.name,
                DECODE (v$.name, 'SYS_NC_OID$', 1, 'NESTED_TABLE_ID', 2,
                        'SYS_NC_ROWINFO$', 3, 100),
                v$.charsetid, v$.charsetform, v$.fsprecision, v$.lfprecision,
                v$.charlen, NVL(ct$.flags, 0)
        FROM    sys.exu8col_temp v$, sys.col$ c$, sys.coltype$ ct$,
                sys.obj$ o$, sys.user$ u$
        WHERE   c$.obj# = v$.tobjid AND
                c$.intcol# = v$.intcolid AND
                (BITAND(v$.colprop, 2) = 2 OR                 /* SYS_NC_OID$ */
                 BITAND(v$.colprop, 16) = 16 OR           /* NESTED_TABLE_ID */
                 BITAND(v$.colprop, 512) = 512) AND       /* SYS_NC_ROWINFO$ */
                c$.obj# = ct$.obj# (+) AND
                c$.intcol# = ct$.intcol# (+) AND
                NVL(ct$.toid, HEXTORAW('00')) = o$.oid$ (+) AND
                NVL(o$.owner#, -1) = u$.user# (+) AND
                NVL(o$.type#, -1) != 10 /* bug 882543: no non-existent types */;

CREATE OR REPLACE FORCE VIEW "EXU8COEU"("TOBJID","TOWNER","TOWNERID","TNAME","NAME","LENGTH","PRECISION","SCALE","TYPE","ISNULL","CONNAME","COLID","INTCOLID","SEGCOLID","COMMENT$","DEFAULT$","DFLTLEN","ENABLED","DEFER","FLAGS","COLPROP","ADTNAME","ADTOWNER","COLCLASS","CHARSETID","CHARSETFORM","FSPRECISION","LFPRECISION","CHARLEN","TFLAGS") AS 
SELECT  "TOBJID","TOWNER","TOWNERID","TNAME","NAME","LENGTH","PRECISION","SCALE","TYPE","ISNULL","CONNAME","COLID","INTCOLID","SEGCOLID","COMMENT$","DEFAULT$","DFLTLEN","ENABLED","DEFER","FLAGS","COLPROP","ADTNAME","ADTOWNER","COLCLASS","CHARSETID","CHARSETFORM","FSPRECISION","LFPRECISION","CHARLEN","TFLAGS"
        FROM    sys.exu8coe
        WHERE   townerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8COL"("TOBJID","TOWNER","TOWNERID","TNAME","NAME","LENGTH","PRECISION","SCALE","TYPE","ISNULL","CONNAME","COLID","INTCOLID","SEGCOLID","COMMENT$","DEFAULT$","DFLTLEN","ENABLED","DEFER","FLAGS","COLPROP","ADTNAME","ADTOWNER","CHARSETID","CHARSETFORM","FSPRECISION","LFPRECISION","CHARLEN","TFLAGS") AS 
SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
                v$.precision, v$.scale, type, isnull, conname, colid, intcolid,
                segcolid, comment$, default$, dfltlen, enabled, defer,
                v$.flags, colprop, '', '', v$.charsetid, v$.charsetform,
                v$.fsprecision, v$.lfprecision, v$.charlen,  NVL(ct$.flags, 0)
        FROM    sys.exu8col_temp v$, sys.col$ c$, sys.coltype$ ct$
        WHERE   c$.obj# = v$.tobjid AND
                c$.intcol# = v$.intcolid AND
                v$.tobjid = ct$.obj# (+) AND
                (BITAND(v$.colprop, 32) != 32 OR      /* not a hidden column */
                 BITAND(v$.colprop, 1048608)= 1048608 OR/*snapshot hidden col*/
                 BITAND(v$.colprop, 4194304) = 4194304) /* RLS hidden column */;

CREATE OR REPLACE FORCE VIEW "EXU8COLNN"("TOBJID","INTCOLID","CONNAME","ISNULL","ENABLED","DEFER") AS 
SELECT  cc$.obj#, cc$.intcol#, con$.name, 1, NVL(cd$.enabled, 0),
                NVL(cd$.defer, 0)
        FROM    sys.con$ con$, sys.cdef$ cd$, sys.ccol$ cc$
        WHERE   cc$.con# = cd$.con# AND
                cd$.con# = con$.con# AND
                cd$.type# IN (7, 11);

CREATE OR REPLACE FORCE VIEW "EXU8COLU"("TOBJID","TOWNER","TOWNERID","TNAME","NAME","LENGTH","PRECISION","SCALE","TYPE","ISNULL","CONNAME","COLID","INTCOLID","SEGCOLID","COMMENT$","DEFAULT$","DFLTLEN","ENABLED","DEFER","FLAGS","COLPROP","ADTNAME","ADTOWNER","CHARSETID","CHARSETFORM","FSPRECISION","LFPRECISION","CHARLEN","TFLAGS") AS 
SELECT  "TOBJID","TOWNER","TOWNERID","TNAME","NAME","LENGTH","PRECISION","SCALE","TYPE","ISNULL","CONNAME","COLID","INTCOLID","SEGCOLID","COMMENT$","DEFAULT$","DFLTLEN","ENABLED","DEFER","FLAGS","COLPROP","ADTNAME","ADTOWNER","CHARSETID","CHARSETFORM","FSPRECISION","LFPRECISION","CHARLEN","TFLAGS"
        FROM    sys.exu8col
        WHERE   townerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8COL_TEMP"("TOBJID","TOWNER","TOWNERID","TNAME","NAME","LENGTH","PRECISION","SCALE","TYPE","ISNULL","CONNAME","COLID","INTCOLID","SEGCOLID","COLPROP","COMMENT$","DFLTLEN","ENABLED","DEFER","FLAGS","CHARSETID","CHARSETFORM","FSPRECISION","LFPRECISION","CHARLEN") AS 
SELECT  o$.obj#, u$.name, o$.owner#, o$.name, c$.name, c$.length,
                c$.precision#, c$.scale, c$.type#, NVL(cn.isnull, 0),
                cn.conname, c$.col#, c$.intcol#, c$.segcol#, c$.property,
                com$.comment$, NVL(c$.deflength, 0), cn.enabled, cn.defer,
                NVL(o$.flags, 0), NVL(c$.charsetid, 0), NVL(c$.charsetform, 0),
                c$.scale, c$.precision#, c$.spare3
        FROM    sys.col$ c$, sys.obj$ o$, sys.user$ u$, sys.com$ com$,
                sys.exu8colnn cn
        WHERE   c$.obj# = o$.obj# AND
                o$.owner# = u$.user# AND
                c$.obj# = com$.obj#(+) AND
                c$.segcol# = com$.col#(+) AND
                c$.obj# = cn.tobjid AND
                c$.intcol# = cn.intcolid
      UNION ALL
        SELECT  o$.obj#, u$.name, o$.owner#, o$.name, c$.name, c$.length,
                c$.precision#, c$.scale, c$.type#, 0, NULL, c$.col#,
                c$.intcol#, c$.segcol#, c$.property, com$.comment$,
                NVL(c$.deflength, 0), 0, 0, NVL(o$.flags, 0),
                NVL(c$.charsetid, 0), NVL(c$.charsetform, 0), c$.scale,
                c$.precision#, c$.spare3
        FROM    sys.col$ c$, sys.obj$ o$, sys.user$ u$, sys.com$ com$
        WHERE   c$.obj# = o$.obj# AND
                o$.owner# = u$.user# AND
                c$.obj# = com$.obj#(+) AND
                c$.segcol# = com$.col#(+) AND
                BITAND(c$.property, 32768) != 32768 AND /* not unused column */
                NOT EXISTS (
                    SELECT  NULL
                    FROM    sys.exu8colnn cn
                    WHERE   c$.obj# = cn.tobjid AND
                            c$.intcol# = cn.intcolid);

CREATE OR REPLACE FORCE VIEW "EXU8COL_TEMP_TTS_UNUSED_COL"("TOBJID","TOWNER","TOWNERID","TNAME","NAME","LENGTH","PRECISION","SCALE","TYPE","ISNULL","CONNAME","COLID","INTCOLID","SEGCOLID","COLPROP","COMMENT$","DFLTLEN","ENABLED","DEFER","FLAGS","CHARSETID","CHARSETFORM","FSPRECISION","LFPRECISION","CHARLEN") AS 
SELECT  o$.obj#, u$.name, o$.owner#, o$.name, c$.name, c$.length,
                c$.precision#, c$.scale, c$.type#, NVL(cn.isnull, 0),
                cn.conname, c$.col#, c$.intcol#, c$.segcol#, c$.property,
                com$.comment$, NVL(c$.deflength, 0), cn.enabled, cn.defer,
                NVL(o$.flags, 0), NVL(c$.charsetid, 0), NVL(c$.charsetform, 0),
                c$.scale, c$.precision#, c$.spare3
        FROM    sys.col$ c$, sys.obj$ o$, sys.user$ u$, sys.com$ com$,
                sys.exu8colnn cn
        WHERE   c$.obj# = o$.obj# AND
                o$.owner# = u$.user# AND
                c$.obj# = com$.obj#(+) AND
                c$.segcol# = com$.col#(+) AND
                c$.obj# = cn.tobjid AND
                c$.intcol# = cn.intcolid
      UNION ALL
        SELECT  o$.obj#, u$.name, o$.owner#, o$.name, c$.name, c$.length,
                c$.precision#, c$.scale, c$.type#, 0, NULL, c$.col#,
                c$.intcol#, c$.segcol#, c$.property, com$.comment$,
                NVL(c$.deflength, 0), 0, 0, NVL(o$.flags, 0),
                NVL(c$.charsetid, 0), NVL(c$.charsetform, 0), c$.scale,
                c$.precision#, c$.spare3
        FROM    sys.col$ c$, sys.obj$ o$, sys.user$ u$, sys.com$ com$
        WHERE   c$.obj# = o$.obj# AND
                o$.owner# = u$.user# AND
                c$.obj# = com$.obj#(+) AND
                c$.segcol# = com$.col#(+) AND
                NOT EXISTS (
                    SELECT  NULL
                    FROM    sys.exu8colnn cn
                    WHERE   c$.obj# = cn.tobjid AND
                            c$.intcol# = cn.intcolid);

CREATE OR REPLACE FORCE VIEW "EXU8COL_TTS_UNUSED_COL"("TOBJID","TOWNER","TOWNERID","TNAME","NAME","LENGTH","PRECISION","SCALE","TYPE","ISNULL","CONNAME","COLID","INTCOLID","SEGCOLID","COMMENT$","DEFAULT$","DFLTLEN","ENABLED","DEFER","FLAGS","COLPROP","ADTNAME","ADTOWNER","CHARSETID","CHARSETFORM","FSPRECISION","LFPRECISION","CHARLEN","TFLAGS") AS 
SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
                v$.precision, v$.scale, type, isnull, conname, colid, intcolid,
                segcolid, comment$, default$, dfltlen, enabled, defer,
                v$.flags, colprop, '', '', v$.charsetid, v$.charsetform,
                v$.fsprecision, v$.lfprecision, v$.charlen,  NVL(ct$.flags, 0)
        FROM    sys.exu8col_temp_tts_unused_col v$, sys.col$ c$,
                sys.coltype$ ct$
        WHERE   c$.obj# = v$.tobjid AND
                c$.intcol# = v$.intcolid AND
                v$.tobjid = ct$.obj# (+)  AND
                (BITAND(v$.colprop,32768) = 32768 OR        /* unused column */
                 BITAND(v$.colprop, 32) != 32 OR      /* not a hidden column */
                 BITAND(v$.colprop, 1048608)= 1048608 OR/*snapshot hidden col*/
                 BITAND(v$.colprop, 4194304) = 4194304) /* RLS hidden column */;

CREATE OR REPLACE FORCE VIEW "EXU8CON"("OBJID","OWNER","OWNERID","TNAME","TYPE","CNAME","CNO","CONDITION","CONDLENGTH","ENABLED","DEFER","SQLVER","INAME","IDXSYSGEND") AS 
SELECT  o.obj#, u.name, c.owner#, o.name, cd.type#, c.name, c.con#,
                cd.condition, cd.condlength, NVL(cd.enabled, 0),
                NVL(cd.defer, 0), sv.sql_version, NVL(oi.name, ''),
                DECODE(BITAND(NVL(oi.flags, 0), 4), 4, 1, 0)
        FROM    sys.obj$ o, sys.user$ u, sys.con$ c, sys.cdef$ cd,
                sys.exu816sqv sv, sys.obj$ oi
        WHERE   u.user# = c.owner# AND
                o.obj# = cd.obj# AND
                cd.con# = c.con# AND
                cd.spare1 = sv.version# (+) AND
                cd.enabled = oi.obj# (+) AND
                NOT EXISTS (
                    SELECT  owner, name
                    FROM    sys.noexp$ ne
                    WHERE   ne.owner = u.name AND
                            ne.name = o.name AND
                            ne.obj_type = 2);

CREATE OR REPLACE FORCE VIEW "EXU8CONU"("OBJID","OWNER","OWNERID","TNAME","TYPE","CNAME","CNO","CONDITION","CONDLENGTH","ENABLED","DEFER","SQLVER","INAME","IDXSYSGEND") AS 
SELECT  "OBJID","OWNER","OWNERID","TNAME","TYPE","CNAME","CNO","CONDITION","CONDLENGTH","ENABLED","DEFER","SQLVER","INAME","IDXSYSGEND"
        FROM    sys.exu8con
        WHERE   UID = ownerid;

CREATE OR REPLACE FORCE VIEW "EXU8COO"("TOBJID","TOWNER","TOWNERID","TNAME","NAME","LENGTH","PRECISION","SCALE","TYPE","ISNULL","CONNAME","COLID","INTCOLID","SEGCOLID","COMMENT$","DEFAULT$","DFLTLEN","ENABLED","DEFER","FLAGS","COLPROP","ADTNAME","ADTOWNER","CHARSETID","CHARSETFORM","FSPRECISION","LFPRECISION","CHARLEN","TFLAGS") AS 
SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
                v$.precision, v$.scale, v$.type, v$.isnull, v$.conname,
                v$.colid, v$.intcolid, v$.segcolid, v$.comment$, default$,
                v$.dfltlen, v$.enabled, v$.defer, v$.flags, v$.colprop,
                o$.name, u$.name, v$.charsetid, v$.charsetform, v$.fsprecision,
                v$.lfprecision, v$.charlen, NVL(ct$.flags,0)
        FROM    sys.exu8col_temp v$, sys.col$ c$, sys.coltype$ ct$,
                sys.obj$ o$, sys.user$ u$
        WHERE   (BITAND (v$.colprop, 32) != 32 OR     /* not a hidden column */
                 BITAND(v$.colprop, 1048608)= 1048608 OR/*snapshot hidden col*/
                 BITAND (v$.colprop, 4194304) = 4194304) AND/* RLS hidden col*/
                v$.tobjid = c$.obj# (+) AND
                v$.intcolid = c$.intcol# (+) AND
                v$.tobjid = ct$.obj# (+) AND
                v$.intcolid = ct$.intcol# (+) AND
                NVL(ct$.toid, HEXTORAW('00')) = o$.oid$ (+) AND
                NVL(o$.owner#, -1) = u$.user# (+) AND
                NVL(o$.type#,13) = 13;

CREATE OR REPLACE FORCE VIEW "EXU8COOU"("TOBJID","TOWNER","TOWNERID","TNAME","NAME","LENGTH","PRECISION","SCALE","TYPE","ISNULL","CONNAME","COLID","INTCOLID","SEGCOLID","COMMENT$","DEFAULT$","DFLTLEN","ENABLED","DEFER","FLAGS","COLPROP","ADTNAME","ADTOWNER","CHARSETID","CHARSETFORM","FSPRECISION","LFPRECISION","CHARLEN","TFLAGS") AS 
SELECT  "TOBJID","TOWNER","TOWNERID","TNAME","NAME","LENGTH","PRECISION","SCALE","TYPE","ISNULL","CONNAME","COLID","INTCOLID","SEGCOLID","COMMENT$","DEFAULT$","DFLTLEN","ENABLED","DEFER","FLAGS","COLPROP","ADTNAME","ADTOWNER","CHARSETID","CHARSETFORM","FSPRECISION","LFPRECISION","CHARLEN","TFLAGS"
        FROM    sys.exu8coo
        WHERE   townerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8CPO"("PARAMETER","VALUE") AS 
SELECT  parameter, DECODE(value, 'TRUE', 1, 'FALSE', 0, 2)
        FROM    sys.v$option
        WHERE   parameter IN ('procedural', 'replication');

CREATE OR REPLACE FORCE VIEW "EXU8CSET"("NAME","VALUE") AS 
SELECT  name, DECODE (value$,'AL16UTF16','UTF8', value$)
        FROM    sys.props$
        WHERE   name IN ('NLS_CHARACTERSET',
                         'NLS_NCHAR_CHARACTERSET');

CREATE OR REPLACE FORCE VIEW "EXU8CSN"("TOBJID","TOWNER","TOWNERID","TNAME","NAME","LENGTH","PRECISION","SCALE","TYPE","ISNULL","CONNAME","COLID","INTCOLID","SEGCOLID","COMMENT$","DEFAULT$","DFLTLEN","ENABLED","DEFER","FLAGS","COLPROP","ADTNAME","ADTOWNER","COLCLASS","CHARSETID","CHARSETFORM","FSPRECISION","LFPRECISION","CHARLEN","TFLAGS") AS 
SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
                v$.precision, v$.scale, v$.type, v$.isnull, v$.conname,
                v$.colid, v$.intcolid, v$.segcolid, v$.comment$, default$,
                v$.dfltlen, v$.enabled, v$.defer, v$.flags, v$.colprop,
                o$.name, u$.name,
                DECODE (v$.name, 'NESTED_TABLE_ID', 2, 'COLUMN_VALUE', 3, 100),
                v$.charsetid, v$.charsetform, v$.fsprecision, v$.lfprecision,
                v$.charlen, NVL(ct$.flags, 0)
        FROM    sys.exu8col_temp v$, sys.col$ c$, sys.coltype$ ct$,
                sys.obj$ o$, sys.user$ u$
        WHERE   c$.obj# = v$.tobjid AND
                c$.intcol# = v$.intcolid AND
                c$.obj# = ct$.obj# (+) AND
                c$.intcol# = ct$.intcol# (+) AND
                NVL(ct$.toid, HEXTORAW('00')) = o$.oid$ (+) AND
                NVL(o$.owner#, -1) = u$.user# (+) AND
                NVL(o$.type#, -1) != 10 /* bug 882543: no non-existent types */;

CREATE OR REPLACE FORCE VIEW "EXU8CSNU"("TOBJID","TOWNER","TOWNERID","TNAME","NAME","LENGTH","PRECISION","SCALE","TYPE","ISNULL","CONNAME","COLID","INTCOLID","SEGCOLID","COMMENT$","DEFAULT$","DFLTLEN","ENABLED","DEFER","FLAGS","COLPROP","ADTNAME","ADTOWNER","COLCLASS","CHARSETID","CHARSETFORM","FSPRECISION","LFPRECISION","CHARLEN","TFLAGS") AS 
SELECT  "TOBJID","TOWNER","TOWNERID","TNAME","NAME","LENGTH","PRECISION","SCALE","TYPE","ISNULL","CONNAME","COLID","INTCOLID","SEGCOLID","COMMENT$","DEFAULT$","DFLTLEN","ENABLED","DEFER","FLAGS","COLPROP","ADTNAME","ADTOWNER","COLCLASS","CHARSETID","CHARSETFORM","FSPRECISION","LFPRECISION","CHARLEN","TFLAGS"
        FROM    sys.exu8csn
        WHERE   townerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8DEL"("OWNER","NAME","TYPE","TYPE#") AS 
SELECT  u$.name, i$.name,
                DECODE(i$.type#, 2, 'TABLE', 3, 'CLUSTER', 4, 'VIEW',
                       5, 'SYNONYM', 6, 'SEQUENCE', 7, 'PROCEDURE', 8,
                       'FUNCTION', 9, 'PACKAGE', 12, 'TRIGGER', 11,
                       'PACKAGE BODY', 28, 'JAVA SOURCE', 29, 'JAVA CLASS', 30,
                       'JAVA RESOURCE', 32, 'INDEXTYPE', 33, 'OPERATOR', 43,
                       'DIMENSION', 56, 'JAVA DATA'), i$.type#
        FROM    sys.incexp i$, sys.user$ u$, sys.obj$ o$
        WHERE   i$.owner# = u$.user# AND
                i$.type# NOT IN (99, 98) AND
                i$.owner# = o$.owner# (+) AND /*"+ 0" for sort-merge outer jn*/
                i$.name = o$.name (+) AND
                i$.type# = o$.type# (+) AND
                o$.owner# IS NULL AND
                o$.linkname IS NULL;

CREATE OR REPLACE FORCE VIEW "EXU8DELSNAP"("OWNER","NAME","TYPE") AS 
SELECT  u$.name, i$.name, 'SNAPSHOT'
        FROM    sys.incexp i$, sys.user$ u$
        WHERE   i$.owner# = u$.user# AND
                i$.type# = 99 AND
                (u$.name, i$.name) NOT IN (
                    SELECT  s$.sowner, s$.vname
                    FROM    sys.snap$ s$
                    WHERE   s$.instsite = 0);

CREATE OR REPLACE FORCE VIEW "EXU8DELSNAPL"("OWNER","NAME","TYPE") AS 
SELECT  u$.name, i$.name, 'SNAPSHOT LOG'
        FROM    sys.incexp i$, sys.user$ u$
        WHERE   i$.owner# = u$.user# AND
                i$.type# = 98 AND
                (u$.name, i$.name) NOT IN (
                    SELECT  m$.mowner, m$.master
                    FROM    sys.mlog$ m$);

CREATE OR REPLACE FORCE VIEW "EXU8DFR"("NAME","USERID","ROLE","ROLEID") AS 
SELECT  u$.name, u$.user#, u1$.name, u1$.user#
        FROM    sys.user$ u$, sys.user$ u1$, sys.defrole$ d$
        WHERE   u$.user# = d$.user# AND
                u1$.user# = d$.role#;

CREATE OR REPLACE FORCE VIEW "EXU8DIM"("OWNERID","OWNER","DIMNAME","DIMTEXT") AS 
SELECT  o.owner#, u.name, o.name, dm.dimtext
        FROM    sys.obj$ o, sys.user$ u, sys.dim$ dm
        WHERE   u.user# = o.owner# AND
                dm.obj# = o.obj# AND
                (UID IN (0, o.owner#) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'));

CREATE OR REPLACE FORCE VIEW "EXU8DIMC"("OWNERID","OWNER","DIMNAME","DIMTEXT") AS 
SELECT  dm."OWNERID",dm."OWNER",dm."DIMNAME",dm."DIMTEXT"
        FROM    sys.exu8dim dm, sys.incexp i, sys.incvid v
        WHERE   dm.dimname = i.name(+) AND
                dm.ownerid = i.owner#(+) AND
                NVL(i.type#, 43) = 43 AND
                (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
                 v.expid < NVL(i.expid, 9999));

CREATE OR REPLACE FORCE VIEW "EXU8DIMI"("OWNERID","OWNER","DIMNAME","DIMTEXT") AS 
SELECT  dm."OWNERID",dm."OWNER",dm."DIMNAME",dm."DIMTEXT"
        FROM    sys.exu8dim dm, sys.incexp i, sys.incvid v
        WHERE   dm.dimname = i.name(+) AND
                dm.ownerid = i.owner#(+) AND
                NVL(i.type#, 43) = 43 AND
                v.expid < NVL(i.expid, 9999);

CREATE OR REPLACE FORCE VIEW "EXU8DIMU"("OWNERID","OWNER","DIMNAME","DIMTEXT") AS 
SELECT  "OWNERID","OWNER","DIMNAME","DIMTEXT"
        FROM    sys.exu8dim;

CREATE OR REPLACE FORCE VIEW "EXU8DIR"("DIRNAME","PATHNAME","OBJNO","AUDIT$") AS 
SELECT  o$.name, d$.os_path, o$.obj#, d$.audit$
        FROM    sys.exu81obj o$, sys.dir$ d$
        WHERE   o$.type# = 23 AND                       /* directory aliases */
                o$.obj# = d$.obj#;

CREATE OR REPLACE FORCE VIEW "EXU8ERC"("RESOURCE_NAME","UNIT_COST") AS 
SELECT  m.name, c.cost
        FROM    sys.resource_cost$ c, sys.resource_map m
        WHERE   c.resource# = m.resource# AND
                m.type# = 0 AND
                c.resource# IN (2, 4, 7, 8);

CREATE OR REPLACE FORCE VIEW "EXU8FIL"("FNAME","FSIZE","MAXEXTEND","INC","TSID") AS 
SELECT  fname, fsize, maxextend, inc, tsid
        FROM    sys.exu81fil
        WHERE   bitmap = 0;

CREATE OR REPLACE FORCE VIEW "EXU8FPT"("TNAME","TOWNER","OWNERID","TOID","MTIME","OBJNO","DOBJNO","AUDIT$","SQLVER","PROPERTY","TYPOBJSTATUS","TVERSION","THASHCODE","TYPEID","ROOTTOID") AS 
SELECT  o.name, u.name, o.owner#, t.toid,
                TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, d.d_obj#,
                tm.audit$, sv.sql_version, t.properties,
                o.status, t.version#, t.hashcode, t.typeid,
                NVL(t.roottoid,HEXTORAW('00'))
        FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.dependency$ d,
                sys.type_misc$ tm, sys.exu816sqv sv
        WHERE   o.obj# = d.p_obj# AND
                o.type# = 13 AND
                o.oid$ = t.toid AND
                o.owner# = u.user# AND
                o.obj# = tm.obj# AND
                BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
                o.spare1 = sv.version# (+) AND
                t.toid = t.tvoid                     /* Only the latest type */
     UNION      /* Subtypes */
        SELECT  o.name, u.name, o.owner#, t.toid,
                TO_CHAR(o.mtime,  'YYYY-MM-DD:HH24:MI:SS'), o.obj#, so.obj#,
                tm.audit$, sv.sql_version, t.properties,
                o.status, t.version#, t.hashcode, t.typeid,
                NVL(t.roottoid,HEXTORAW('00'))
        FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.obj$ so,
                sys.type_misc$ tm, sys.exu816sqv sv
        WHERE   o.type# = 13 AND
                o.oid$ = t.toid AND
                o.owner# = u.user# AND
                so.oid$ = t.roottoid AND
                o.obj# = tm.obj# AND
                BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
                o.spare1 = sv.version# (+) AND
                t.toid = t.tvoid                     /* Only the latest type */;

CREATE OR REPLACE FORCE VIEW "EXU8FPTU"("TNAME","TOWNER","OWNERID","TOID","MTIME","OBJNO","DOBJNO","AUDIT$","SQLVER","PROPERTY","TYPOBJSTATUS","TVERSION","THASHCODE","TYPEID","ROOTTOID") AS 
SELECT  o.name, u.name, o.owner#, t.toid,
                TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, d.d_obj#,
                tm.audit$, sv.sql_version, t.properties,
                o.status, t.version#, t.hashcode, t.typeid,
                NVL(t.roottoid,HEXTORAW('00'))
        FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.dependency$ d,
                sys.type_misc$ tm, sys.exu816sqv sv
        WHERE   o.obj# = d.p_obj# AND
                o.type# = 13 AND
                o.oid$ = t.toid AND
                o.owner# = u.user# AND
                o.obj# = tm.obj# AND
                BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
                (o.owner# = UID OR                  /* owned by current user */
                /* current user or public role have execute access to type */
                o.obj# IN (
                    SELECT  oa.obj#
                    FROM    sys.objauth$ oa
                    WHERE   oa.obj# = o.obj# AND
                            oa.privilege# = 12 AND                /* execute */
                            oa.grantee# IN (UID, 1)) OR
                EXISTS ( /* current user or public role can execute any type */
                    SELECT  NULL
                    FROM    sys.sysauth$ sa
                    WHERE   sa.grantee# IN (UID, 1) AND
                            sa.privilege# = -184)) AND
                o.spare1 = sv.version# (+) AND
                t.toid   = t.tvoid                   /* Only the latest type */
     UNION
        SELECT  o.name, u.name, o.owner#, t.toid,
                TO_CHAR(o.mtime,  'YYYY-MM-DD:HH24:MI:SS'), o.obj#, so.obj#,
                tm.audit$, sv.sql_version, t.properties,
                o.status, t.version#, t.hashcode, t.typeid,
                NVL(t.roottoid,HEXTORAW('00'))
        FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.obj$ so,
                sys.type_misc$ tm, sys.exu816sqv sv
        WHERE   o.type# = 13 AND
                o.oid$ = t.toid AND
                o.owner# = u.user# AND
                so.oid$ = t.roottoid AND
                o.obj# = tm.obj# AND
                BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
                (o.owner# = UID OR                  /* owned by current user */
                /* current user or public role have execute access to type */
                o.obj# IN (
                        SELECT  oa.obj#
                        FROM    sys.objauth$ oa
                        WHERE   oa.obj# = o.obj# AND
                                oa.privilege# = 12 AND            /* execute */
                                (oa.grantee# = UID OR
                                 oa.grantee# = 1)) OR
                /* current user or public role can execute any type */
                EXISTS (
                        SELECT  NULL
                        FROM    sys.sysauth$ sa
                        WHERE   (sa.grantee# = UID OR
                                 sa.grantee# = 1) AND
                                sa.privilege# = -184 )) AND
                o.spare1 = sv.version# (+)  AND
                t.toid   = t.tvoid                   /* Only the latest type */;

CREATE OR REPLACE FORCE VIEW "EXU8FUL"("ROLE") AS 
SELECT  u.name
        FROM    sys.x$kzsro, sys.user$ u
        WHERE   kzsrorol != UID AND
                kzsrorol != 1 AND
                u.user# = kzsrorol;

CREATE OR REPLACE FORCE VIEW "EXU8GLOB"("GLOBAL_NAME") AS 
SELECT  value$
        FROM    sys.props$
        WHERE   name = 'GLOBAL_DB_NAME';

CREATE OR REPLACE FORCE VIEW "EXU8GRN"("OBJID","GRANTOR","GRANTORID","GRANTEE","PRIV","WHO","WGO","CREATORID","SEQUENCE","ISDIR","TYPE") AS 
SELECT  t$.obj#, ur$.name, t$.grantor#, ue$.name, m$.name,
                MOD(NVL(t$.option$/2, 0), 2), MOD(NVL(t$.option$, 0), 2),
                o$.owner#, t$.sequence#,
                DECODE ((o$.type#), 23, 1, 0), o$.type#
        FROM    sys.objauth$ t$, sys.obj$ o$, sys.user$ ur$,
                sys.table_privilege_map m$, sys.user$ ue$
        WHERE   o$.obj# = t$.obj# AND
                t$.privilege# = m$.privilege AND
                t$.col# IS NULL AND
                t$.grantor# = ur$.user# AND
                t$.grantee# = ue$.user# AND
                ue$.name NOT IN ('ORDSYS',  'MDSYS', 'CTXSYS', 'ORDPLUGINS',
                                 'LBACSYS', 'XDB',   'SI_INFORMTN_SCHEMA',
                                 'DIP',     'DMSYS', 'DBSNMP');

CREATE OR REPLACE FORCE VIEW "EXU8GRNU"("OBJID","GRANTOR","GRANTORID","GRANTEE","PRIV","WHO","WGO","CREATORID","SEQUENCE","ISDIR","TYPE") AS 
SELECT  "OBJID","GRANTOR","GRANTORID","GRANTEE","PRIV","WHO","WGO","CREATORID","SEQUENCE","ISDIR","TYPE"
        FROM    sys.exu8grn
        WHERE   grantorid = UID AND
                creatorid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8GRS"("OBJID","NAME") AS 
SELECT  t$.obj#, o$.name
        FROM    sys.objauth$ t$, sys.obj$ o$
        WHERE   o$.obj# = t$.obj# AND
                t$.col# IS NULL AND
                t$.grantor# = 0 AND
                o$.type# NOT IN (
                    SELECT  type#
                    FROM    sys.exppkgobj$);

CREATE OR REPLACE FORCE VIEW "EXU8HST"("POBJID","TOWNERID","INTCOL","BUCKET","ENDPTHASH","ENDPTVAL") AS 
SELECT  h$.obj#, o$.owner#, h$.intcol#, h$.bucket, h$.endpoint,
                h$.epvalue
        FROM    sys.histgrm$ h$, sys.obj$ o$
        WHERE   h$.obj# = o$.obj#
      UNION ALL
        SELECT  h$.obj#, o$.owner#, h$.intcol#, 0, h$.minimum, NULL
        FROM    sys.hist_head$ h$, sys.obj$ o$
        WHERE   h$.obj# = o$.obj# AND
                h$.bucket_cnt = 1
      UNION ALL
        SELECT  h$.obj#, o$.owner#, h$.intcol#, 1, h$.maximum, NULL
        FROM    sys.hist_head$ h$, sys.obj$ o$
        WHERE   h$.obj# = o$.obj# AND
                h$.bucket_cnt = 1;

CREATE OR REPLACE FORCE VIEW "EXU8HSTU"("POBJID","TOWNERID","INTCOL","BUCKET","ENDPTHASH","ENDPTVAL") AS 
SELECT  "POBJID","TOWNERID","INTCOL","BUCKET","ENDPTHASH","ENDPTVAL"
        FROM    sys.exu8hst
        WHERE   townerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8ICO"("TOBJID","TOWNER","TOWNERID","TNAME","NAME","BTNAME","COLID","COLNUM","PROPERTY","BOBJID","FUNCTION","FUNCLEN") AS 
SELECT  io$.obj#, u$.name, io$.owner#, io$.name,
                DECODE(BITAND(c$.property, 1), 1, a$.name, c$.name), to$.name,
                ic$.pos#,
                DECODE(BITAND(i$.property, 1024), 0, i$.cols, i$.intcols),
                c$.property, ic$.bo#, c$.default$, c$.deflength
        FROM    sys.col$ c$, sys.icol$ ic$, sys.obj$ io$, sys.user$ u$,
                sys.attrcol$ a$, sys.obj$ to$, sys.ind$ i$
        WHERE   c$.obj# = ic$.bo# AND
                ((BITAND(i$.property, 1024) = 1024 AND
                  c$.intcol# = ic$.spare2) OR
                 ((NOT (BITAND(i$.property, 1024) = 1024)) AND
                 c$.intcol# = ic$.intcol#)) AND
                ic$.obj# = io$.obj# AND
                io$.owner# = u$.user# AND
                i$.bo# = to$.obj# AND
                i$.obj# = io$.obj# AND
                c$.obj# = a$.obj# (+) AND
                c$.intcol# = a$.intcol# (+) AND
                (UID = 0 OR (UID = io$.owner# AND UID = to$.owner#) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'));

CREATE OR REPLACE FORCE VIEW "EXU8ICOU"("TOBJID","TOWNER","TOWNERID","TNAME","NAME","BTNAME","COLID","COLNUM","PROPERTY","BOBJID","FUNCTION","FUNCLEN") AS 
SELECT  "TOBJID","TOWNER","TOWNERID","TNAME","NAME","BTNAME","COLID","COLNUM","PROPERTY","BOBJID","FUNCTION","FUNCLEN"
        FROM    sys.exu8ico
        WHERE   townerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8ICPLSQL"("VALUE") AS 
SELECT  value$
        FROM    sys.props$
        WHERE   name = 'ICACHE_IMP_PLSQL';

CREATE OR REPLACE FORCE VIEW "EXU8IND"("IOBJID","IDOBJID","INAME","IOWNER","IOWNERID","ISPACE","ITSNO","IFILENO","IBLOCKNO","BTNAME","BTOBJID","BTOWNER","BTOWNERID","BTPROPERTY","BTCLUSTERFLAG","PROPERTY","CLUSTER$","PCTFREE$","INITRANS","MAXTRANS","BLEVEL","BITMAP","DEFLOG","TSDEFLOG","DEGREE","INSTANCES","TYPE","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","PRECCNT","IFLAGS","SYSGENCONST") AS 
SELECT  "IOBJID","IDOBJID","INAME","IOWNER","IOWNERID","ISPACE","ITSNO","IFILENO","IBLOCKNO","BTNAME","BTOBJID","BTOWNER","BTOWNERID","BTPROPERTY","BTCLUSTERFLAG","PROPERTY","CLUSTER$","PCTFREE$","INITRANS","MAXTRANS","BLEVEL","BITMAP","DEFLOG","TSDEFLOG","DEGREE","INSTANCES","TYPE","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","PRECCNT","IFLAGS","SYSGENCONST"
        FROM    sys.exu81ind
        WHERE   BITAND(property, 16) != 16 AND      /* skip functional index */
                type != 9                               /* skip domain index */;

CREATE OR REPLACE FORCE VIEW "EXU8INDC"("IOBJID","IDOBJID","INAME","IOWNER","IOWNERID","ISPACE","ITSNO","IFILENO","IBLOCKNO","BTNAME","BTOBJID","BTOWNER","BTOWNERID","BTPROPERTY","BTCLUSTERFLAG","PROPERTY","CLUSTER$","PCTFREE$","INITRANS","MAXTRANS","BLEVEL","BITMAP","DEFLOG","TSDEFLOG","DEGREE","INSTANCES","TYPE","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","PRECCNT","IFLAGS","SYSGENCONST") AS 
SELECT  "IOBJID","IDOBJID","INAME","IOWNER","IOWNERID","ISPACE","ITSNO","IFILENO","IBLOCKNO","BTNAME","BTOBJID","BTOWNER","BTOWNERID","BTPROPERTY","BTCLUSTERFLAG","PROPERTY","CLUSTER$","PCTFREE$","INITRANS","MAXTRANS","BLEVEL","BITMAP","DEFLOG","TSDEFLOG","DEGREE","INSTANCES","TYPE","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","PRECCNT","IFLAGS","SYSGENCONST"
        FROM    sys.exu81indc
        WHERE   BITAND(property, 16) != 16 AND/*Get bitmap but not functional*/
                type != 9                              /* nor domain indexes */;

CREATE OR REPLACE FORCE VIEW "EXU8INDI"("IOBJID","IDOBJID","INAME","IOWNER","IOWNERID","ISPACE","ITSNO","IFILENO","IBLOCKNO","BTNAME","BTOBJID","BTOWNER","BTOWNERID","BTPROPERTY","BTCLUSTERFLAG","PROPERTY","CLUSTER$","PCTFREE$","INITRANS","MAXTRANS","BLEVEL","BITMAP","DEFLOG","TSDEFLOG","DEGREE","INSTANCES","TYPE","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","PRECCNT","IFLAGS","SYSGENCONST") AS 
SELECT  "IOBJID","IDOBJID","INAME","IOWNER","IOWNERID","ISPACE","ITSNO","IFILENO","IBLOCKNO","BTNAME","BTOBJID","BTOWNER","BTOWNERID","BTPROPERTY","BTCLUSTERFLAG","PROPERTY","CLUSTER$","PCTFREE$","INITRANS","MAXTRANS","BLEVEL","BITMAP","DEFLOG","TSDEFLOG","DEGREE","INSTANCES","TYPE","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","PRECCNT","IFLAGS","SYSGENCONST"
        FROM    sys.exu81indi
        WHERE   BITAND(property, 16) != 16 AND/*Get bitmap but not functional*/
                type != 9                              /* nor domain indexes */;

CREATE OR REPLACE FORCE VIEW "EXU8INDIC"("IOBJID","IDOBJID","INAME","IOWNER","IOWNERID","ISPACE","ITSNO","IFILENO","IBLOCKNO","BTNAME","BTOBJID","BTOWNER","BTOWNERID","BTPROPERTY","BTCLUSTERFLAG","PROPERTY","CLUSTER$","PCTFREE$","INITRANS","MAXTRANS","BLEVEL","BITMAP","DEFLOG","TSDEFLOG","DEGREE","INSTANCES","TYPE","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","PRECCNT","IFLAGS","SYSGENCONST") AS 
SELECT  "IOBJID","IDOBJID","INAME","IOWNER","IOWNERID","ISPACE","ITSNO","IFILENO","IBLOCKNO","BTNAME","BTOBJID","BTOWNER","BTOWNERID","BTPROPERTY","BTCLUSTERFLAG","PROPERTY","CLUSTER$","PCTFREE$","INITRANS","MAXTRANS","BLEVEL","BITMAP","DEFLOG","TSDEFLOG","DEGREE","INSTANCES","TYPE","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","PRECCNT","IFLAGS","SYSGENCONST"
        FROM    sys.exu81indic
        WHERE   BITAND(property, 16) != 16 AND/*Get bitmap but not functional*/
                type != 9                              /* nor domain indexes */;

CREATE OR REPLACE FORCE VIEW "EXU8INDU"("IOBJID","IDOBJID","INAME","IOWNER","IOWNERID","ISPACE","ITSNO","IFILENO","IBLOCKNO","BTNAME","BTOBJID","BTOWNER","BTOWNERID","BTPROPERTY","BTCLUSTERFLAG","PROPERTY","CLUSTER$","PCTFREE$","INITRANS","MAXTRANS","BLEVEL","BITMAP","DEFLOG","TSDEFLOG","DEGREE","INSTANCES","TYPE","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","PRECCNT","IFLAGS","SYSGENCONST") AS 
SELECT  "IOBJID","IDOBJID","INAME","IOWNER","IOWNERID","ISPACE","ITSNO","IFILENO","IBLOCKNO","BTNAME","BTOBJID","BTOWNER","BTOWNERID","BTPROPERTY","BTCLUSTERFLAG","PROPERTY","CLUSTER$","PCTFREE$","INITRANS","MAXTRANS","BLEVEL","BITMAP","DEFLOG","TSDEFLOG","DEGREE","INSTANCES","TYPE","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","PRECCNT","IFLAGS","SYSGENCONST"
        FROM    sys.exu8ind;

CREATE OR REPLACE FORCE VIEW "EXU8INK"("OBJID","OWNERID","INTCOLID","NAME") AS 
SELECT  o$.obj#, o$.owner#, c$.intcol#, c$.name
        FROM    sys.obj$ o$, sys.ind$ i$, sys.col$ c$
        WHERE   i$.bo# = o$.obj# AND
                c$.obj# = o$.obj# AND
                c$.col# = i$.trunccnt AND
                i$.trunccnt != 0;

CREATE OR REPLACE FORCE VIEW "EXU8INKU"("OBJID","OWNERID","INTCOLID","NAME") AS 
SELECT  "OBJID","OWNERID","INTCOLID","NAME"
        FROM    sys.exu8ink
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8IOV"("OBJID","DOBJID","NAME","BOBJID","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG") AS 
SELECT  o$.obj#, o$.dataobj#, o$.name, t$.bobj#, u$.name, o$.owner#,
                ts$.name, t$.ts#, t$.file#, t$.block#, t$.audit$, c$.comment$,
                NVL(t$.bobj#, 0), o$.mtime,
                DECODE(BITAND(t$.flags, 1), 1, 1, 0), MOD(t$.pctfree$, 100),
                t$.pctused$, t$.initrans, t$.maxtrans, NVL(t$.degree, 1),
                NVL(t$.instances, 1), DECODE(BITAND(t$.flags, 128), 128, 1, 0),
                MOD(TRUNC(o$.flags / 2), 2), t$.property,
                DECODE(BITAND(t$.flags, 32), 32, 1, 0), ts$.dflogging
        FROM    sys.tab$ t$, sys.obj$ o$, sys.ts$ ts$, sys.user$ u$,
                sys.com$ c$
        WHERE   t$.obj# = o$.obj# AND
                t$.ts# = ts$.ts# AND
                u$.user# = o$.owner# AND
                o$.obj# = c$.obj#(+) AND
                c$.col#(+) IS NULL AND
                BITAND(t$.property, 512) = 512;

CREATE OR REPLACE FORCE VIEW "EXU8IOVU"("OBJID","DOBJID","NAME","BOBJID","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG") AS 
SELECT  "OBJID","DOBJID","NAME","BOBJID","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG"
        FROM    sys.exu8iov
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8IXP"("OBJID","DOBJID","BOBJID","OWNERID","PNAME","PROWCNT","PBLKCNT","PAVGRLEN","PFLAGS","PARTNO","HIBOUNDLEN","HIBOUNDVAL","TSNAME","TSNO","FILENO","BLOCKNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEFLOG","TSDEFLOG","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","IFLAGS") AS 
SELECT  o$.obj#, o$.dataobj#, ip$.bo#, o$.owner#, o$.subname,
                NVL(ip$.rowcnt, -1),
                NVL2((
                    SELECT  i$.bo#
                    FROM    sys.ind$ i$
                    WHERE   i$.type# = 4 AND
                            i$.obj# = ip$.bo#),
                    NVL(ip$.leafcnt, -1), -1),  /* leafcnt (blkcnt) if table */
                NVL((
                    SELECT  tp$.avgrln
                    FROM    sys.tabpart$ tp$              /* avglen if table */
                    WHERE   tp$.part# = ip$.part# AND
                            tp$.bo# = (
                                SELECT  i$.bo#
                                FROM    sys.ind$ i$
                                WHERE   i$.type# = 4 AND        /* iot - top */
                                        i$.obj# = ip$.bo#)), -1),
                NVL2((
                    SELECT  i$.bo#
                    FROM    sys.ind$ i$              /* stats flags if table */
                    WHERE   i$.type# = 4 AND
                            i$.obj# = ip$.bo#),
                    ip$.flags, -1),
                ip$.part#, ip$.hiboundlen, ip$.hiboundval, ts$.name, ip$.ts#,
                ip$.file#, ip$.block#, MOD(ip$.pctfree$, 100), 0, ip$.initrans,
                ip$.maxtrans, DECODE(BITAND(ip$.flags, 4), 4, 1, 0),
                ts$.dflogging, NVL(ip$.blevel, -1), NVL(ip$.leafcnt, -1),
                NVL(ip$.distkey, -1), NVL(ip$.lblkkey, -1),
                NVL(ip$.dblkkey, -1), NVL(ip$.clufac, -1), ip$.flags
        FROM    sys.obj$ o$, sys.indpart$ ip$, sys.ts$ ts$
        WHERE   o$.type# = 20 AND
                ip$.obj# = o$.obj# AND
                ts$.ts# = ip$.ts#;

CREATE OR REPLACE FORCE VIEW "EXU8IXPU"("OBJID","DOBJID","BOBJID","OWNERID","PNAME","PROWCNT","PBLKCNT","PAVGRLEN","PFLAGS","PARTNO","HIBOUNDLEN","HIBOUNDVAL","TSNAME","TSNO","FILENO","BLOCKNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEFLOG","TSDEFLOG","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","IFLAGS") AS 
SELECT  "OBJID","DOBJID","BOBJID","OWNERID","PNAME","PROWCNT","PBLKCNT","PAVGRLEN","PFLAGS","PARTNO","HIBOUNDLEN","HIBOUNDVAL","TSNAME","TSNO","FILENO","BLOCKNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEFLOG","TSDEFLOG","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","IFLAGS"
        FROM    sys.exu8ixp
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8JBQ"("JOB","OWNERID","OWNER","LOWNER","COWNER","NEXT_DATE","FLAG","INTERVAL#","WHAT","NLSENV","ENV","INSTANCE") AS 
SELECT  j$.job, u$.user#, j$.powner, j$.lowner, j$.cowner,
                TO_CHAR(j$.next_date, 'YYYY-MM-DD:HH24:MI:SS'),
                DECODE(j$.flag, 1, 'TRUE', 0, 'FALSE'),
                REPLACE(j$.interval#, '''', ''''''),
                REPLACE(j$.what, '''', ''''''),
                REPLACE(j$.nlsenv, '''', ''''''), j$.env, j$.field1
        FROM    sys.job$ j$, sys.user$ u$
        WHERE   j$.powner = u$.name;

CREATE OR REPLACE FORCE VIEW "EXU8JBQU"("JOB","OWNERID","OWNER","LOWNER","COWNER","NEXT_DATE","FLAG","INTERVAL#","WHAT","NLSENV","ENV","INSTANCE") AS 
SELECT  "JOB","OWNERID","OWNER","LOWNER","COWNER","NEXT_DATE","FLAG","INTERVAL#","WHAT","NLSENV","ENV","INSTANCE"
        FROM    sys.exu8jbq
        WHERE   UID = ownerid;

CREATE OR REPLACE FORCE VIEW "EXU8LIB"("LOWNER","LIBNAME","OWNERID","FILENAME","AUDIT$","MTIME","OBJNO","ISSTATIC","ISTRUSTED") AS 
SELECT  u$.name, o$.name, o$.owner#, lb$.filespec, lb$.audit$,
                TO_CHAR(o$.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o$.obj#,
                DECODE(BITAND(lb$.property, 1), 1, 1, 0),
                DECODE(BITAND(lb$.property, 2), 2, 1, 0)
        FROM    sys.exu81obj o$, sys.user$ u$, sys.library$ lb$
        WHERE   o$.type# = 22 AND                            /* library name */
                o$.owner# = u$.user# AND
                o$.obj# = lb$.obj#;

CREATE OR REPLACE FORCE VIEW "EXU8LIBU"("LOWNER","LIBNAME","OWNERID","FILENAME","AUDIT$","MTIME","OBJNO","ISSTATIC","ISTRUSTED") AS 
SELECT  "LOWNER","LIBNAME","OWNERID","FILENAME","AUDIT$","MTIME","OBJNO","ISSTATIC","ISTRUSTED"
        FROM    sys.exu8lib
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8LNK"("OWNER","OWNERID","NAME","USER$","PASSWD","HOST","PUBLIC$") AS 
SELECT  owner, ownerid, name, user$, passwd, host, public$
        FROM    sys.exu9lnk;

CREATE OR REPLACE FORCE VIEW "EXU8LNKU"("OWNER","OWNERID","NAME","USER$","PASSWD","HOST","PUBLIC$") AS 
SELECT  "OWNER","OWNERID","NAME","USER$","PASSWD","HOST","PUBLIC$"
        FROM    sys.exu8lnk
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8LOB"("TOBJID","OWNERID","CNAME","SNAME","SSGFLAG","STSNAME","STSNO","SFILE","SBLOCK","SDOBJID","SCHUNKING","SVPOOL","SFLAGS","INAME","ISGFLAG","ITSNAME","ITSNO","IFILE","IBLOCK","IDOBJID","IINITRANS","IMAXTRANS","SPROPERTY","COLTYPE","COLTYPFLG") AS 
SELECT  l.tobjid, l.ownerid, l.cname, l.sname, l.ssgflag, l.stsname,
                l.stsno, l.sfile, l.sblock, l.sdobjid,
                CEIL(l.schunking * (l.blocksize / (
                    SELECT  t$.blocksize
                    FROM    sys.ts$ t$
                    WHERE   t$.ts# = 0))),
                l.svpool, l.sflags, l.iname, l.isgflag, l.itsname, l.itsno,
                l.ifile, l.iblock, l.idobjid, l.iinitrans, l.imaxtrans,
                l.sproperty, l.coltype, l.coltypflg
        FROM    sys.exu9lob l;

CREATE OR REPLACE FORCE VIEW "EXU8LOBU"("TOBJID","OWNERID","CNAME","SNAME","SSGFLAG","STSNAME","STSNO","SFILE","SBLOCK","SDOBJID","SCHUNKING","SVPOOL","SFLAGS","INAME","ISGFLAG","ITSNAME","ITSNO","IFILE","IBLOCK","IDOBJID","IINITRANS","IMAXTRANS","SPROPERTY","COLTYPE","COLTYPFLG") AS 
SELECT  "TOBJID","OWNERID","CNAME","SNAME","SSGFLAG","STSNAME","STSNO","SFILE","SBLOCK","SDOBJID","SCHUNKING","SVPOOL","SFLAGS","INAME","ISGFLAG","ITSNAME","ITSNO","IFILE","IBLOCK","IDOBJID","IINITRANS","IMAXTRANS","SPROPERTY","COLTYPE","COLTYPFLG"
        FROM    sys.exu8lob
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8NTB"("POBJID","OBJID","NAME","DOBJID","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","COLPROP","EXPNAME","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","NTCOLFLGS","INTCOLID","OBJSTATUS","COLTYPE") AS 
SELECT  nt$.obj#, o$.obj#, o$.name, o$.dataobj#, u$.name, o$.owner#,
                ts$.name, t$.ts#, t$.file#, t$.block#, t$.audit$, c$.comment$,
                NVL(t$.bobj#, 0), o$.mtime,
                DECODE(BITAND(t$.flags, 1), 1, 1, 0), MOD(t$.pctfree$, 100),
                t$.pctused$, t$.initrans, t$.maxtrans, NVL(t$.degree, 1),
                NVL(t$.instances, 1), DECODE(BITAND(t$.flags, 128), 128, 1, 0),
                MOD(TRUNC(o$.flags/2), 2), t$.property,
                DECODE(BITAND(t$.flags, 32), 32, 1, 0), ts$.dflogging, o$.oid$,
                cl$.property,
                DECODE(BITAND(cl$.property, 1), 1, a$.name, cl$.name),
                NVL(t$.rowcnt, -1), NVL(t$.blkcnt, -1), NVL(t$.avgrln, -1),
                t$.flags, NVL(ct$.flags, 0), cl$.intcol#, o$.status,
                cl$.type#
        FROM    sys.tab$ t$, sys.obj$ o$, sys.ts$ ts$, sys.user$ u$,
                sys.com$ c$, sys.ntab$ nt$, sys.col$ cl$, sys.attrcol$ a$,
                sys.coltype$ ct$
        WHERE   t$.obj# = o$.obj# AND
                t$.ts# = ts$.ts# AND
                u$.user# = o$.owner# AND
                o$.obj# = c$.obj#(+) AND
                c$.col#(+) IS NULL AND
                nt$.ntab# = o$.obj# AND
                cl$.obj# = ct$.obj# (+) AND
                cl$.intcol# = ct$.intcol# (+)  AND
                nt$.obj# = cl$.obj# AND
                nt$.intcol# = cl$.intcol# AND
                cl$.obj# = a$.obj# (+) AND
                cl$.intcol# = a$.intcol# (+) AND
                BITAND(cl$.property, 32768) != 32768    /* not unused column */;

CREATE OR REPLACE FORCE VIEW "EXU8NTBU"("POBJID","OBJID","NAME","DOBJID","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","COLPROP","EXPNAME","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","NTCOLFLGS","INTCOLID","OBJSTATUS","COLTYPE") AS 
SELECT  "POBJID","OBJID","NAME","DOBJID","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","COLPROP","EXPNAME","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","NTCOLFLGS","INTCOLID","OBJSTATUS","COLTYPE"
        FROM    sys.exu8ntb
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8NXP"("OWNERID","OWNER","NAME","TYPE") AS 
SELECT  u$.user#, n$.owner, n$.name, n$.obj_type
        FROM    sys.noexp$ n$, sys.user$ u$
        WHERE   n$.owner = u$.name;

CREATE OR REPLACE FORCE VIEW "EXU8NXPU"("OWNER","NAME","TYPE") AS 
SELECT  owner, name, type
        FROM    sys.exu8nxp
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8OID"("TOBJID","INTCOL","INAME","IDEFER","OWNERID","PCTFREE$","INITRANS","MAXTRANS","ITSNO","IFILE","IBLOCK","ITSNAME","IDOBJID") AS 
SELECT  cc$.obj#, cc$.intcol#, co$.name, cd$.defer, co$.owner#,
                i$.pctfree$, i$.initrans, i$.maxtrans, i$.ts#, i$.file#,
                i$.block#, ts$.name, i$.dataobj#
        FROM    sys.ccol$ cc$, sys.con$ co$, sys.cdef$ cd$, sys.obj$ o$,
                sys.ind$ i$, sys.ts$ ts$
        WHERE   cc$.con# = co$.con# AND
                cc$.con# = cd$.con# AND
                cd$.type# = 3 AND
                co$.owner# = o$.owner# AND
                co$.name = o$.name AND
                o$.obj# = i$.obj# AND
                i$.ts# = ts$.ts#;

CREATE OR REPLACE FORCE VIEW "EXU8OIDU"("TOBJID","INTCOL","INAME","IDEFER","OWNERID","PCTFREE$","INITRANS","MAXTRANS","ITSNO","IFILE","IBLOCK","ITSNAME","IDOBJID") AS 
SELECT  "TOBJID","INTCOL","INAME","IDEFER","OWNERID","PCTFREE$","INITRANS","MAXTRANS","ITSNO","IFILE","IBLOCK","ITSNAME","IDOBJID"
        FROM    sys.exu8oid
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8OPT"("PARAMETER","VALUE") AS 
SELECT  parameter, DECODE(value, 'TRUE', 1, 'FALSE', 0, 2)
        FROM    sys.v$option;

CREATE OR REPLACE FORCE VIEW "EXU8ORD"("DLEVEL","OBJ#","D_OWNER#") AS 
SELECT                                              /*+ no_filtering */
                MAX(level), d1.d_obj#, d1.owner#
        FROM    (
                    SELECT                                      /*+ no_merge */
                            d.d_obj#, d.p_obj#, v.owner#
                    FROM    sys.dependency$ d,
                    (select obj#, owner# from sys.obj$ where type#=4) v
                    WHERE   v.obj# = d.d_obj#) d1
        CONNECT BY PRIOR d1.d_obj# = d1.p_obj#
        GROUP BY d1.d_obj#, d1.owner#;

CREATE OR REPLACE FORCE VIEW "EXU8ORDU"("DLEVEL","OBJ#","D_OWNER#") AS 
SELECT  "DLEVEL","OBJ#","D_OWNER#"
        FROM    sys.exu8ord
        WHERE   d_owner# = UID;

CREATE OR REPLACE FORCE VIEW "EXU8ORFS"("OBJNO","OWNERID","PROPERTY","COLNAME","REFTYP","SOID","ROBJID","RNAME") AS 
SELECT  o$.obj#, o$.owner#, c$.property,
                DECODE(BITAND(c$.property, 1), 1, a$.name, c$.name),
                rf$.reftyp, rf$.stabid, ro$.obj#, ro$.name
        FROM    sys.refcon$ rf$, sys.obj$ o$, sys.col$ c$, sys.attrcol$ a$,
                sys.obj$ ro$
        WHERE   rf$.obj# = o$.obj# AND
                rf$.obj# = c$.obj# AND
                rf$.intcol# = c$.intcol# AND
                rf$.obj# = a$.obj# (+) AND
                rf$.intcol# = a$.intcol# (+) AND
                rf$.reftyp != 0 AND
                BITAND(c$.property, 32768) != 32768 AND /* not unused column */
                rf$.stabid = ro$.oid$ AND
                (UID IN (o$.owner#, 0) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'));

CREATE OR REPLACE FORCE VIEW "EXU8PDS"("OBJID","TYPE","OWNERID","PTYPE","SUBPTYPE","PFLAG","PCNT","PKCNT","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","INIEXTS","EXTSIZE","MINEXTS","MAXEXTS","EXTPCT","FLISTS","FREEGRP","TSNAME","DEFLOG","PCACHE") AS 
SELECT  p.objid, p.type, p.ownerid, p.ptype, p.subptype, p.pflag,
                p.pcnt, p.pkcnt, p.pctfree$, p.pctused$, p.initrans,
                p.maxtrans,
                NVL(CEIL(p.iniexts * (p.blocksize / (
                    SELECT  t$.blocksize
                    FROM    sys.ts$ t$
                    WHERE   t$.ts# = 0))),
                    NULL),
                NVL(CEIL(p.extsize * (p.blocksize / (
                    SELECT  t$.blocksize
                    FROM    sys.ts$ t$
                    WHERE   t$.ts# = 0))),
                    NULL),
                p.minexts, p.maxexts, p.extpct, p.flists, p.freegrp, p.tsname,
                p.deflog, p.pcache
        FROM    sys.exu9pds p;

CREATE OR REPLACE FORCE VIEW "EXU8PDSU"("OBJID","TYPE","OWNERID","PTYPE","SUBPTYPE","PFLAG","PCNT","PKCNT","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","INIEXTS","EXTSIZE","MINEXTS","MAXEXTS","EXTPCT","FLISTS","FREEGRP","TSNAME","DEFLOG","PCACHE") AS 
SELECT  "OBJID","TYPE","OWNERID","PTYPE","SUBPTYPE","PFLAG","PCNT","PKCNT","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","INIEXTS","EXTSIZE","MINEXTS","MAXEXTS","EXTPCT","FLISTS","FREEGRP","TSNAME","DEFLOG","PCACHE"
        FROM    sys.exu8pds
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8PHS"("USERID","UNAME","PASSWORD","PASSWORD_DATE") AS 
SELECT  h.user#, u.name, h.password, h.password_date
        FROM    sys.user_history$ h, sys.user$ u
        WHERE   h.user# = u.user#;

CREATE OR REPLACE FORCE VIEW "EXU8PNT"("POBJNO","PNAME","POWNERID","COBJNO") AS 
SELECT  nt$.obj#, o$.name, o$.owner#, nt$.ntab#
        FROM    sys.obj$ o$, sys.ntab$ nt$
        WHERE   nt$.obj# = o$.obj#;

CREATE OR REPLACE FORCE VIEW "EXU8PNTU"("POBJNO","PNAME","POWNERID","COBJNO") AS 
SELECT  "POBJNO","PNAME","POWNERID","COBJNO"
        FROM    sys.exu8pnt
        WHERE   pownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8POK"("OBJID","OWNERID","POSNO","NAME","PROPERTY","FUNCTION","FUNCLEN") AS 
SELECT  o$.obj#, o$.owner#, p$.pos#,
                DECODE(BITAND(c$.property, 1), 1, a$.name, c$.name),
                c$.property, c$.default$, c$.deflength
        FROM    sys.obj$ o$, sys.partcol$ p$, sys.col$ c$, sys.attrcol$ a$
        WHERE   o$.obj# = c$.obj# AND
                o$.obj# = p$.obj# AND
                p$.intcol# = c$.intcol# AND
                p$.obj# = a$.obj# (+) AND
                p$.intcol# = a$.intcol# (+);

CREATE OR REPLACE FORCE VIEW "EXU8POKI"("OBJID","OWNERID","POSNO","NAME","PROPERTY","FUNCTION","FUNCLEN") AS 
SELECT  o.obj#, o.owner#, p.pos#,
                DECODE(BITAND(c.property, 1), 1, a.name, c.name),
                c.property, c.default$, c.deflength
        FROM    sys.obj$ o, sys.partcol$ p, sys.ind$ i, sys.col$ c,
                sys.attrcol$ a
        WHERE   o.obj# = p.obj# AND
                i.obj# = o.obj# AND
                i.bo# = c.obj# AND
                p.intcol# = c.intcol# AND
                c.obj# = a.obj# (+) AND
                c.intcol# = a.intcol# (+);

CREATE OR REPLACE FORCE VIEW "EXU8POKIU"("OBJID","OWNERID","POSNO","NAME","PROPERTY","FUNCTION","FUNCLEN") AS 
SELECT  "OBJID","OWNERID","POSNO","NAME","PROPERTY","FUNCTION","FUNCLEN"
        FROM    sys.exu8poki
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8POKU"("OBJID","OWNERID","POSNO","NAME","PROPERTY","FUNCTION","FUNCLEN") AS 
SELECT  "OBJID","OWNERID","POSNO","NAME","PROPERTY","FUNCTION","FUNCLEN"
        FROM    sys.exu8pok
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8PRF"("PROFILE#","NAME") AS 
SELECT  profile#, name
        FROM    sys.profname$
        WHERE   profile# != 0;

CREATE OR REPLACE FORCE VIEW "EXU8PRR"("PROFILE#","RESOURCE#","RESNAME","TYPE","LIMIT") AS 
SELECT  p.profile#, p.resource#, r.name, p.type#, p.limit#
        FROM    sys.profile$ p, sys.resource_map r
        WHERE   p.resource# != 9 AND
                p.resource# = r.resource# AND
                p.type# = r.type#;

CREATE OR REPLACE FORCE VIEW "EXU8PST"("OWNER","OWNERID","TNAME","TOBJID","CALLORDER","CALLARG","OBJTYPE","USRARG","PROPERTY") AS 
SELECT  a$.owner, u$.user#, a$.name, o$.obj#, a$.callorder, a$.callarg,
                a$.obj_type, a$.user_arg, t$.property
        FROM    sys.expact$ a$, sys.user$ u$, sys.obj$ o$, sys.tab$ t$
        WHERE   u$.name = a$.owner AND
                o$.owner# = u$.user# AND
                o$.name = a$.name AND
                t$.obj# = o$.obj#;

CREATE OR REPLACE FORCE VIEW "EXU8PSTC"("OWNER","OWNERID","TNAME","TOBJID","CALLORDER","CALLARG","OBJTYPE","USRARG","PROPERTY") AS 
SELECT  "OWNER","OWNERID","TNAME","TOBJID","CALLORDER","CALLARG","OBJTYPE","USRARG","PROPERTY"
        FROM    sys.exu8pst
        WHERE   (ownerid, tname) IN (
                    SELECT  ownerid, name
                    FROM    sys.exu8tabc);

CREATE OR REPLACE FORCE VIEW "EXU8PSTI"("OWNER","OWNERID","TNAME","TOBJID","CALLORDER","CALLARG","OBJTYPE","USRARG","PROPERTY") AS 
SELECT  "OWNER","OWNERID","TNAME","TOBJID","CALLORDER","CALLARG","OBJTYPE","USRARG","PROPERTY"
        FROM    sys.exu8pst
        WHERE   (ownerid, tname) IN (
                    SELECT  ownerid, name
                    FROM    sys.exu8tabi);

CREATE OR REPLACE FORCE VIEW "EXU8PSTIC"("OWNER","OWNERID","TNAME","TOBJID","CALLORDER","CALLARG","OBJTYPE","USRARG","PROPERTY") AS 
SELECT  "OWNER","OWNERID","TNAME","TOBJID","CALLORDER","CALLARG","OBJTYPE","USRARG","PROPERTY"
        FROM    sys.exu8pst
        WHERE   (ownerid, tname) IN (
                    SELECT  i.owner#, i.name
                    FROM    sys.incexp i, sys.incvid v
                    WHERE   i.expid > v.expid AND
                            i.type# = 2);

CREATE OR REPLACE FORCE VIEW "EXU8PSTU"("OWNER","OWNERID","TNAME","TOBJID","CALLORDER","CALLARG","OBJTYPE","USRARG","PROPERTY") AS 
SELECT  "OWNER","OWNERID","TNAME","TOBJID","CALLORDER","CALLARG","OBJTYPE","USRARG","PROPERTY"
        FROM    sys.exu8pst
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8PVF"("FUNCID","FUNCNAME","LINE","SOURCE") AS 
SELECT  o.obj#, o.name, s.line, s.source
        FROM    sys.obj$ o, sys.source$ s
        WHERE   o.type# = 8 AND
                o.owner# = 0 AND
                o.obj# = s.obj#;

CREATE OR REPLACE FORCE VIEW "EXU8REF"("OBJID","OWNER","OWNERID","TNAME","ROWNER","RTNAME","CNAME","CNO","RCNO","ACTION","ENABLED","DEFER","PROPERTY","ROBJID","ROWNERID","REFTYPE","REFCONSTR","TYPE") AS 
SELECT  o.obj#, u.name, c.owner#, o.name, ru.name, ro.name, c.name,
                c.con#, cd.rcon#, NVL(cd.refact, 0), NVL(cd.enabled, 0),
                NVL(cd.defer, 0), NVL(t.property, 0), cd.robj#, ro.owner#,
                DECODE((SELECT COUNT (*)
                        FROM   sys.refcon$ rf
                        WHERE  rf.obj# = o.obj# AND
                               BITAND(rf.reftyp, 4) = 4),
                       1, 4, 0),            /* if 1, EXURUID, else not a REF */
                DECODE((SELECT COUNT (*)
                        FROM   sys.ccol$ cc, sys.col$ c
                        WHERE  cc.con# = cd.con# AND
                               c.obj# = cc.obj# AND
                               c.intcol# = cc.intcol# AND
                               BITAND(c.property, 2097152)= 2097152), /* REA */
                       0, 0, 1),                /* if none, FALSE, else TRUE */
                o.type#
        FROM    sys.user$ u, sys.user$ ru, sys.exu81obj o, sys.obj$ ro,
                sys.con$ c, sys.cdef$ cd, sys.tab$ t
        WHERE   u.user# = c.owner# AND
                o.obj# = cd.obj# AND
                ro.obj# = cd.robj# AND
                cd.con# = c.con# AND
                cd.type# = 4 AND
                ru.user# = ro.owner# AND
                o.obj# = t.obj# (+) AND
                u.name NOT IN ('ORDSYS', 'MDSYS', 'CTXSYS', 'ORDPLUGINS',
                               'LBACSYS', 'XDB',  'SI_INFORMTN_SCHEMA',
                               'DIP',     'DMSYS','DBSNMP') AND
                NOT EXISTS (
                    SELECT  name, owner, obj_type
                    FROM    sys.noexp$ ne
                    WHERE   ne.owner = u.name AND
                            ne.name = o.name  AND
                            ne.obj_type = 2);

CREATE OR REPLACE FORCE VIEW "EXU8REFC"("OBJID","OWNER","OWNERID","TNAME","ROWNER","RTNAME","CNAME","CNO","RCNO","ACTION","ENABLED","DEFER","PROPERTY","ROBJID","ROWNERID","REFTYPE","REFCONSTR","TYPE") AS 
SELECT  "OBJID","OWNER","OWNERID","TNAME","ROWNER","RTNAME","CNAME","CNO","RCNO","ACTION","ENABLED","DEFER","PROPERTY","ROBJID","ROWNERID","REFTYPE","REFCONSTR","TYPE"
        FROM    sys.exu8ref
        WHERE   (ownerid, tname) IN (
                    SELECT  ownerid, name
                    FROM    sys.exu8tabc);

CREATE OR REPLACE FORCE VIEW "EXU8REFI"("OBJID","OWNER","OWNERID","TNAME","ROWNER","RTNAME","CNAME","CNO","RCNO","ACTION","ENABLED","DEFER","PROPERTY","ROBJID","ROWNERID","REFTYPE","REFCONSTR","TYPE") AS 
SELECT  "OBJID","OWNER","OWNERID","TNAME","ROWNER","RTNAME","CNAME","CNO","RCNO","ACTION","ENABLED","DEFER","PROPERTY","ROBJID","ROWNERID","REFTYPE","REFCONSTR","TYPE"
        FROM    sys.exu8ref
        WHERE   (ownerid, tname) IN (
                    SELECT  ownerid, name
                    FROM    sys.exu8tabi);

CREATE OR REPLACE FORCE VIEW "EXU8REFIC"("OBJID","OWNER","OWNERID","TNAME","ROWNER","RTNAME","CNAME","CNO","RCNO","ACTION","ENABLED","DEFER","PROPERTY","ROBJID","ROWNERID","REFTYPE","REFCONSTR","TYPE") AS 
SELECT  "OBJID","OWNER","OWNERID","TNAME","ROWNER","RTNAME","CNAME","CNO","RCNO","ACTION","ENABLED","DEFER","PROPERTY","ROBJID","ROWNERID","REFTYPE","REFCONSTR","TYPE"
        FROM    sys.exu8ref
        WHERE   (ownerid, tname) IN (
                    SELECT  i.owner#, i.name
                    FROM    sys.incexp i, sys.incvid v
                    WHERE   i.expid > v.expid AND
                            i.type# = 2);

CREATE OR REPLACE FORCE VIEW "EXU8REFU"("OBJID","OWNER","OWNERID","TNAME","ROWNER","RTNAME","CNAME","CNO","RCNO","ACTION","ENABLED","DEFER","PROPERTY","ROBJID","ROWNERID","REFTYPE","REFCONSTR","TYPE") AS 
SELECT  "OBJID","OWNER","OWNERID","TNAME","ROWNER","RTNAME","CNAME","CNO","RCNO","ACTION","ENABLED","DEFER","PROPERTY","ROBJID","ROWNERID","REFTYPE","REFCONSTR","TYPE"
        FROM    sys.exu8ref
        WHERE   UID = ownerid;

CREATE OR REPLACE FORCE VIEW "EXU8RFS"("OBJNO","OWNERID","PROPERTY","COLNAME","REFTYP","SOID","ROBJID","PKEYCNO","PKEYOWNER") AS 
SELECT  o$.obj#, o$.owner#, c$.property,
                DECODE(BITAND(c$.property, 1), 1, a$.name, c$.name),
                rf$.reftyp, NVL(rf$.stabid, HEXTORAW('00')),
                NVL2(rf$.stabid, (SELECT  ro$.obj#
                                  FROM    sys.obj$ ro$
                                  WHERE   ro$.oid$ = rf$.stabid),
                     0),
                DECODE(BITAND(rf$.reftyp, 4),
                       4, (SELECT  rcd$.con#
                           FROM    sys.obj$ ro$, sys.cdef$ rcd$
                           WHERE   ro$.oid$ = rf$.stabid AND
                                   rcd$.obj# = ro$.obj# AND
                                   rcd$.type# = 2),
                       0),
                DECODE(BITAND(rf$.reftyp, 4),
                       4, (SELECT  ru$.name
                           FROM    sys.obj$ ro$, sys.user$ ru$
                           WHERE   ro$.oid$ = rf$.stabid AND
                                   ru$.user# = ro$.owner#),
                       '')
        FROM    sys.refcon$ rf$, sys.obj$ o$, sys.col$ c$, sys.attrcol$ a$
        WHERE   rf$.obj# = o$.obj# AND
                rf$.obj# = c$.obj# AND
                rf$.intcol# = c$.intcol# AND
                rf$.obj# = a$.obj# (+) AND
                rf$.intcol# = a$.intcol# (+) AND
                rf$.reftyp != 0 AND
                BITAND(c$.property, 32768) != 32768     /* not unused column */;

CREATE OR REPLACE FORCE VIEW "EXU8RFSU"("OBJNO","OWNERID","PROPERTY","COLNAME","REFTYP","SOID","ROBJID","PKEYCNO","PKEYOWNER") AS 
SELECT  "OBJNO","OWNERID","PROPERTY","COLNAME","REFTYP","SOID","ROBJID","PKEYCNO","PKEYOWNER"
        FROM    sys.exu8rfs
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8RGC"("OWNER","OWNERID","CHILD","TYPE","REFGROUP") AS 
SELECT  owner, ownerid, child, type, refgroup
        FROM    sys.exu81rgc
        WHERE   instsite = 0              /* Do not include RepAPI snapshots */;

CREATE OR REPLACE FORCE VIEW "EXU8RGCU"("OWNER","OWNERID","CHILD","TYPE","REFGROUP") AS 
SELECT  "OWNER","OWNERID","CHILD","TYPE","REFGROUP"
        FROM    sys.exu8rgc
        WHERE   UID = ownerid;

CREATE OR REPLACE FORCE VIEW "EXU8RGS"("REFGROUP","OWNERID","OWNER") AS 
SELECT  refgroup, ownerid, owner
        FROM    sys.exu81rgs
        WHERE   instsite = 0              /* Do not include RepAPI refgroups */;

CREATE OR REPLACE FORCE VIEW "EXU8RGSU"("REFGROUP","OWNERID","OWNER") AS 
SELECT  "REFGROUP","OWNERID","OWNER"
        FROM    sys.exu8rgs
        WHERE   UID = ownerid;

CREATE OR REPLACE FORCE VIEW "EXU8RIF"("OBJID","OWNER","OWNERID","TNAME","ROWNER","RTNAME","CNAME","CNO","RCNO","ACTION","ENABLED","ROBJID","DEFER","PROPERTY") AS 
SELECT  o.obj#, u.name, c.owner#, o.name, ru.name, ro.name, c.name,
                c.con#, cd.rcon#, NVL(cd.refact, 0), NVL(cd.enabled, 0),
                cd.robj#, NVL(cd.defer, 0), t.property
        FROM    sys.user$ u, sys.user$ ru, sys.obj$ o, sys.obj$ ro, sys.con$ c,
                sys.cdef$ cd, sys.tab$ t
        WHERE   u.user# = c.owner# AND
                o.obj# = cd.obj# AND
                ro.obj# = cd.robj# AND
                cd.con# = c.con# AND
                cd.type# = 4 AND
                ru.user# = ro.owner# AND
                t.obj# = o.obj#;

CREATE OR REPLACE FORCE VIEW "EXU8RLG"("GRANTEE","GRANTEEID","ROLE","ROLEID","ADMIN","SEQUENCE") AS 
SELECT  u1$.name, u1$.user#, u2$.name, u2$.user#, NVL(g$.option$, 0),
                g$.sequence#
        FROM    sys.user$ u1$, sys.user$ u2$, sys.sysauth$ g$
        WHERE   u1$.user# = g$.grantee# AND
                u2$.user# = g$.privilege# AND
                g$.privilege# > 0 AND
                u1$.name NOT IN ('ORDSYS',  'MDSYS', 'CTXSYS', 'ORDPLUGINS',
                                'LBACSYS', 'XDB',   'SI_INFORMTN_SCHEMA',
                                'DIP',     'DMSYS', 'DBSNMP');

CREATE OR REPLACE FORCE VIEW "EXU8ROL"("ROLE","PASSWORD") AS 
SELECT  name, password
        FROM    sys.user$
        WHERE   type# = 0 AND
                name NOT IN ('CONNECT', 'RESOURCE', 'DBA', 'PUBLIC',
                             '_NEXT_USER', 'EXP_FULL_DATABASE',
                             'IMP_FULL_DATABASE');

CREATE OR REPLACE FORCE VIEW "EXU8RSG"("OWNER","NAME","SPACE$","TSNO","FILENO","BLOCKNO","MINEXT","PUBLIC$") AS 
SELECT  'SYSTEM', r$.name, ts$.name, r$.ts#, r$.file#, r$.block#,
                s$.minexts, DECODE(r$.user#, 1, 1, 0)
        FROM    sys.ts$ ts$, sys.undo$ r$, sys.seg$ s$
        WHERE   r$.status$ != 1 AND
                r$.file# = s$.file# AND
                r$.block# = s$.block# AND
                s$.ts# = ts$.ts# AND
                r$.ts# = s$.ts# AND
                r$.us# != 0 AND
                BITAND(ts$.flags, 16) = 0                 /* undo tablespace */;

CREATE OR REPLACE FORCE VIEW "EXU8SCM"("SOWNER","SOWNERID","VNAME","TABNUM","SNACOL","MASCOL","MASPOS","ROLE") AS 
SELECT  sowner, sownerid, vname, tabnum, snacol, mascol, maspos, role
        FROM    sys.exu81scm
        WHERE   instsite = 0;

CREATE OR REPLACE FORCE VIEW "EXU8SCMU"("SOWNER","SOWNERID","VNAME","TABNUM","SNACOL","MASCOL","MASPOS","ROLE") AS 
SELECT  "SOWNER","SOWNERID","VNAME","TABNUM","SNACOL","MASCOL","MASPOS","ROLE"
        FROM    sys.exu8scm
        WHERE   sownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8SEQ"("OWNER","OWNERID","NAME","OBJID","CURVAL","MINVAL","MAXVAL","INCR","CACHE","CYCLE","ORDER$","AUDT") AS 
SELECT  u.name, u.user#, o.name, o.obj#, s.highwater, s.minvalue,
                s.maxvalue, s.increment$, s.cache, s.cycle#, s.order$, s.audit$
        FROM    sys.exu81obj o, sys.user$ u, sys.seq$ s
        WHERE   o.obj# = s.obj# AND
                o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "EXU8SEQU"("OWNER","OWNERID","NAME","OBJID","CURVAL","MINVAL","MAXVAL","INCR","CACHE","CYCLE","ORDER$","AUDT") AS 
SELECT  "OWNER","OWNERID","NAME","OBJID","CURVAL","MINVAL","MAXVAL","INCR","CACHE","CYCLE","ORDER$","AUDT"
        FROM    sys.exu8seq
        WHERE   UID = ownerid;

CREATE OR REPLACE FORCE VIEW "EXU8SLFC"("MOWNER","MOWNERID","MASTER","COLNAME","OLDEST","FLAG") AS 
SELECT  mowner, mownerid, master, colname, oldest, 0
        FROM    sys.exu81slfc
        WHERE   BITAND(flag, 2) != 2;

CREATE OR REPLACE FORCE VIEW "EXU8SLFCU"("MOWNER","MOWNERID","MASTER","COLNAME","OLDEST","FLAG") AS 
SELECT  "MOWNER","MOWNERID","MASTER","COLNAME","OLDEST","FLAG"
        FROM    sys.exu8slfc
        WHERE   mownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8SLOG"("MOWNER","MOWNERID","MASTER","SNAPID","SNAPTIME") AS 
SELECT  sl.mowner, u.user#, sl.master, NVL(sl.snapid, 0), sl.snaptime
        FROM    sys.slog$ sl, sys.user$ u
        WHERE   u.name = sl.mowner;

CREATE OR REPLACE FORCE VIEW "EXU8SLOGU"("MOWNER","MOWNERID","MASTER","SNAPID","SNAPTIME") AS 
SELECT  "MOWNER","MOWNERID","MASTER","SNAPID","SNAPTIME"
        FROM    sys.exu8slog
        WHERE   mownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8SNAP"("OWNER","OWNERID","NAME","TABLE_NAME","MASTER_VIEW","MASTER_LINK","MTIME","CAN_USE_LOG","ERROR","TYPE","QUERY","FLAG","ROWID_SNAP","PRIMKEY_SNAP","UPDATE_SNAP","UPDATE_TRIG","UPDATE_LOG","MASTABS","MASVER","LOB_VECTOR","SNAPSHOT","SNAPID","FILE_VER") AS 
SELECT  owner, ownerid, name, table_name, master_view, master_link,
                mtime, can_use_log, error, type, query, MOD(flag, 65536),
                rowid_snap, primkey_snap, update_snap, update_trig, update_log,
                mastabs, masver, lob_vector, snapshot, snapid, 2
        FROM    sys.exu81snap
        WHERE   BITAND(flag, 28672) = 0 AND   /* Do not include MAVs or MJVs */
                instsite = 0 AND          /* Do not include RepAPI snapshots */
                table_name LIKE 'SNAP$_%';

CREATE OR REPLACE FORCE VIEW "EXU8SNAPC"("OWNER","OWNERID","NAME","TABLE_NAME","MASTER_VIEW","MASTER_LINK","MTIME","CAN_USE_LOG","ERROR","TYPE","QUERY","FLAG","ROWID_SNAP","PRIMKEY_SNAP","UPDATE_SNAP","UPDATE_TRIG","UPDATE_LOG","MASTABS","MASVER","LOB_VECTOR","SNAPSHOT","SNAPID","FILE_VER") AS 
SELECT  s."OWNER",s."OWNERID",s."NAME",s."TABLE_NAME",s."MASTER_VIEW",s."MASTER_LINK",s."MTIME",s."CAN_USE_LOG",s."ERROR",s."TYPE",s."QUERY",s."FLAG",s."ROWID_SNAP",s."PRIMKEY_SNAP",s."UPDATE_SNAP",s."UPDATE_TRIG",s."UPDATE_LOG",s."MASTABS",s."MASVER",s."LOB_VECTOR",s."SNAPSHOT",s."SNAPID",s."FILE_VER"
        FROM    sys.exu8snap s, sys.incexp i, sys.incvid v
        WHERE   s.name = i.name(+) AND
                s.ownerid = i.owner#(+) AND
                NVL(i.type#, 99) = 99 AND
                (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
                 NVL(i.expid, 9999) > v.expid);

CREATE OR REPLACE FORCE VIEW "EXU8SNAPI"("OWNER","OWNERID","NAME","TABLE_NAME","MASTER_VIEW","MASTER_LINK","MTIME","CAN_USE_LOG","ERROR","TYPE","QUERY","FLAG","ROWID_SNAP","PRIMKEY_SNAP","UPDATE_SNAP","UPDATE_TRIG","UPDATE_LOG","MASTABS","MASVER","LOB_VECTOR","SNAPSHOT","SNAPID","FILE_VER") AS 
SELECT  s."OWNER",s."OWNERID",s."NAME",s."TABLE_NAME",s."MASTER_VIEW",s."MASTER_LINK",s."MTIME",s."CAN_USE_LOG",s."ERROR",s."TYPE",s."QUERY",s."FLAG",s."ROWID_SNAP",s."PRIMKEY_SNAP",s."UPDATE_SNAP",s."UPDATE_TRIG",s."UPDATE_LOG",s."MASTABS",s."MASVER",s."LOB_VECTOR",s."SNAPSHOT",s."SNAPID",s."FILE_VER"
        FROM    sys.exu8snap s, sys.incexp i, sys.incvid v
        WHERE   s.name = i.name(+) AND
                s.ownerid = i.owner#(+) AND
                /*
                ** Since snapshot also creates a view with the same name,
                ** we need to check for both type view(4) and snapshot(99).
                ** Note: there will be duplicate entry in sys.incexp for this
                */
                NVL(i.type#, 99) IN (4, 99) AND
                (s.mtime > i.itime OR NVL(i.expid, 9999) > v.expid);

CREATE OR REPLACE FORCE VIEW "EXU8SNAPL"("LOG_OWNER","LOG_OWNERID","MASTER","LOG_TABLE","LOG_TRIGGER","FLAG","YOUNGEST","OLDEST","OLDEST_PK","MTIME","ROWID_SNAPL","PRIMKEY_SNAPL","FILE_VER") AS 
SELECT  log_owner, log_ownerid, master, log_table, log_trigger,
                /* Clear bit (0x0040) indicating a temporary log was created */
                DECODE(BITAND(flag, 64), 64, flag - 64, flag), youngest,
                oldest, oldest_pk, mtime, rowid_snapl, primkey_snapl, 2
        FROM    sys.exu81snapl;

CREATE OR REPLACE FORCE VIEW "EXU8SNAPLC"("LOG_OWNER","LOG_OWNERID","MASTER","LOG_TABLE","LOG_TRIGGER","FLAG","YOUNGEST","OLDEST","OLDEST_PK","MTIME","ROWID_SNAPL","PRIMKEY_SNAPL","FILE_VER") AS 
SELECT  s."LOG_OWNER",s."LOG_OWNERID",s."MASTER",s."LOG_TABLE",s."LOG_TRIGGER",s."FLAG",s."YOUNGEST",s."OLDEST",s."OLDEST_PK",s."MTIME",s."ROWID_SNAPL",s."PRIMKEY_SNAPL",s."FILE_VER"
        FROM    sys.exu8snapl s, sys.incexp i, sys.incvid v
        WHERE   s.master = i.name(+) AND
                s.log_ownerid = i.owner#(+) AND
                NVL(i.type#, 98) = 98 AND
                (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
                 NVL(i.expid, 9999) > v.expid);

CREATE OR REPLACE FORCE VIEW "EXU8SNAPLI"("LOG_OWNER","LOG_OWNERID","MASTER","LOG_TABLE","LOG_TRIGGER","FLAG","YOUNGEST","OLDEST","OLDEST_PK","MTIME","ROWID_SNAPL","PRIMKEY_SNAPL","FILE_VER") AS 
SELECT  s."LOG_OWNER",s."LOG_OWNERID",s."MASTER",s."LOG_TABLE",s."LOG_TRIGGER",s."FLAG",s."YOUNGEST",s."OLDEST",s."OLDEST_PK",s."MTIME",s."ROWID_SNAPL",s."PRIMKEY_SNAPL",s."FILE_VER"
        FROM    sys.exu8snapl s, sys.incexp i, sys.incvid v
        WHERE   s.master = i.name(+) AND
                s.log_ownerid = i.owner#(+) AND
                /* snapshot log also creates a table with the same name */
                NVL(i.type#, 98) IN (2, 98) AND
                (s.mtime > i.itime OR
                 NVL(i.expid, 9999) > v.expid);

CREATE OR REPLACE FORCE VIEW "EXU8SNAPLU"("LOG_OWNER","LOG_OWNERID","MASTER","LOG_TABLE","LOG_TRIGGER","FLAG","YOUNGEST","OLDEST","OLDEST_PK","MTIME","ROWID_SNAPL","PRIMKEY_SNAPL","FILE_VER") AS 
SELECT  "LOG_OWNER","LOG_OWNERID","MASTER","LOG_TABLE","LOG_TRIGGER","FLAG","YOUNGEST","OLDEST","OLDEST_PK","MTIME","ROWID_SNAPL","PRIMKEY_SNAPL","FILE_VER"
        FROM    sys.exu8snapl
        WHERE   log_ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8SNAPU"("OWNER","OWNERID","NAME","TABLE_NAME","MASTER_VIEW","MASTER_LINK","MTIME","CAN_USE_LOG","ERROR","TYPE","QUERY","FLAG","ROWID_SNAP","PRIMKEY_SNAP","UPDATE_SNAP","UPDATE_TRIG","UPDATE_LOG","MASTABS","MASVER","LOB_VECTOR","SNAPSHOT","SNAPID","FILE_VER") AS 
SELECT  "OWNER","OWNERID","NAME","TABLE_NAME","MASTER_VIEW","MASTER_LINK","MTIME","CAN_USE_LOG","ERROR","TYPE","QUERY","FLAG","ROWID_SNAP","PRIMKEY_SNAP","UPDATE_SNAP","UPDATE_TRIG","UPDATE_LOG","MASTABS","MASVER","LOB_VECTOR","SNAPSHOT","SNAPID","FILE_VER"
        FROM    sys.exu8snap
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8SPR"("OWNERID","UNAME","ID","NAME","TIME","TYPEID","TYPE","AUDT","SQLVER") AS 
SELECT  o.owner#, u.name, o.obj#, o.name,
                TO_CHAR(o.stime, 'YYYY-MM-DD:HH24:MI:SS'), o.type#,
                DECODE(o.type#, 7, 'PROCEDURE', 8, 'FUNCTION', 9, 'PACKAGE',
                       11, 'PACKAGE BODY'),
                p.audit$, sv.sql_version
        FROM    sys.exu81obj o, sys.user$ u, sys.procedure$ p, sys.exu816sqv sv
        WHERE   o.owner# = u.user# AND
                o.type# IN (7, 8, 9, 11) AND
                o.obj# = p.obj# AND
                o.spare1 = sv.version# (+);

CREATE OR REPLACE FORCE VIEW "EXU8SPRC"("OWNERID","UNAME","ID","NAME","TIME","TYPEID","TYPE","AUDT","SQLVER") AS 
SELECT  s."OWNERID",s."UNAME",s."ID",s."NAME",s."TIME",s."TYPEID",s."TYPE",s."AUDT",s."SQLVER"
        FROM    sys.exu8spr s, sys.incexp i, sys.incvid v
        WHERE   s.name = i.name(+) AND
                s.ownerid = i.owner#(+) AND
                NVL(i.type#, 7) IN (7, 8, 9, 11) AND
                (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
                 NVL(i.expid, 9999) > v.expid);

CREATE OR REPLACE FORCE VIEW "EXU8SPRI"("OWNERID","UNAME","ID","NAME","TIME","TYPEID","TYPE","AUDT","SQLVER") AS 
SELECT  s."OWNERID",s."UNAME",s."ID",s."NAME",s."TIME",s."TYPEID",s."TYPE",s."AUDT",s."SQLVER"
        FROM    sys.exu8spr s, sys.incexp i, sys.incvid v
        WHERE   s.name = i.name(+) AND
                s.ownerid = i.owner#(+) AND
                NVL(i.type#, 7) IN (7, 8, 9, 11) AND
                NVL(i.expid, 9999) > v.expid;

CREATE OR REPLACE FORCE VIEW "EXU8SPS"("OBJ#","LINE","SOURCE") AS 
SELECT  obj#, line, source
        FROM    sys.source$;

CREATE OR REPLACE FORCE VIEW "EXU8SPSU"("OBJ#","LINE","SOURCE") AS 
SELECT  o.obj#, s.line, s.source
        FROM    sys.source$ s, sys.obj$ o
        WHERE   s.obj# = o.obj# AND
                o.owner# = UID;

CREATE OR REPLACE FORCE VIEW "EXU8SPU"("OWNERID","UNAME","ID","NAME","TIME","TYPEID","TYPE","AUDT","SQLVER") AS 
SELECT  "OWNERID","UNAME","ID","NAME","TIME","TYPEID","TYPE","AUDT","SQLVER"
        FROM    sys.exu8spr
        WHERE   UID = ownerid;

CREATE OR REPLACE FORCE VIEW "EXU8SPV"("GRANTEE","GRANTEEID","PRIV","WGO","SEQUENCE") AS 
SELECT  u1$.name, u1$.user#, m$.name, NVL(a$.option$, 0), a$.sequence#
        FROM    sys.sysauth$ a$, sys.system_privilege_map m$, sys.user$ u1$
        WHERE   a$.grantee# = u1$.user# AND
                a$.privilege# = m$.privilege AND
                BITAND(m$.property, 1) != 1 AND
                u1$.name NOT IN ('CONNECT', 'RESOURCE', 'DBA', '_NEXT_USER',
                                 'EXP_FULL_DATABASE', 'IMP_FULL_DATABASE',
                                 'ORDSYS', 'MDSYS', 'CTXSYS', 'ORDPLUGINS',
                                 'LBACSYS', 'XDB', 'SI_INFORMTN_SCHEMA',
                                 'DIP', 'DMSYS', 'DBSNMP');

CREATE OR REPLACE FORCE VIEW "EXU8SRT"("SOWNER","SOWNERID","VNAME","MASTER_OWNER","MASTER","TABNUM","REFRESH_TIME") AS 
SELECT  sowner, sownerid, vname, master_owner, master, tabnum,
                refresh_time
        FROM    sys.exu81srt
        WHERE   instsite = 0              /* Do not include RepAPI snapshots */;

CREATE OR REPLACE FORCE VIEW "EXU8SRTU"("SOWNER","SOWNERID","VNAME","MASTER_OWNER","MASTER","TABNUM","REFRESH_TIME") AS 
SELECT  "SOWNER","SOWNERID","VNAME","MASTER_OWNER","MASTER","TABNUM","REFRESH_TIME"
        FROM    sys.exu8srt
        WHERE   sownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8STO"("OWNERID","TSNO","FILENO","BLOCKNO","INIEXT","SEXT","MINEXT","MAXEXT","PCTINC","BLOCKS","LISTS","GROUPS","EXTENTS","PCACHE","TS_TYPE","TSNAME","ISONLINE") AS 
SELECT  s.ownerid, s.tsno, s.fileno, s.blockno,
                CEIL(s.iniext * (s.blocksize / (
                    SELECT  t$.blocksize
                    FROM    sys.ts$ t$
                    WHERE   t$.ts# = 0))),
                CEIL(s.sext * (s.blocksize / (
                    SELECT  t$.blocksize
                    FROM    sys.ts$ t$
                    WHERE   t$.ts# = 0))),
                s.minext, s.maxext, s.pctinc,
                CEIL(s.blocks * (s.blocksize / (
                    SELECT  t$.blocksize
                    FROM    sys.ts$ t$
                    WHERE   t$.ts# = 0))),
                s.lists, s.groups, s.extents, s.pcache, s.ts_type, s.tsname,
                s.isonline
        FROM    sys.exu9sto s;

CREATE OR REPLACE FORCE VIEW "EXU8STOU"("OWNERID","TSNO","FILENO","BLOCKNO","INIEXT","SEXT","MINEXT","MAXEXT","PCTINC","BLOCKS","LISTS","GROUPS","EXTENTS","PCACHE","TS_TYPE","TSNAME","ISONLINE") AS 
SELECT  "OWNERID","TSNO","FILENO","BLOCKNO","INIEXT","SEXT","MINEXT","MAXEXT","PCTINC","BLOCKS","LISTS","GROUPS","EXTENTS","PCACHE","TS_TYPE","TSNAME","ISONLINE"
        FROM    sys.exu8sto
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8SYN"("SYNNAM","SYNNAM2","SYNTAB","TABOWN","TABNODE","PUBLIC$","SYNOWN","SYNOWNID","SYNTIME") AS 
SELECT  o$.name, o$.name, s$.name, s$.owner, s$.node,
                DECODE(o$.owner#, 1, 1, 0), uo$.name, o$.owner#, o$.ctime
        FROM    sys.exu81obj o$, sys.syn$ s$, sys.user$ us$, sys.user$ uo$
        WHERE   s$.obj# = o$.obj# AND
                o$.owner# = uo$.user# AND
                s$.owner = us$.name(+) AND
                NVL(s$.owner, 'SYS') NOT IN
                   ('ORDSYS', 'MDSYS', 'CTXSYS', 'ORDPLUGINS', 'LBACSYS',
                    'XDB', 'SI_INFORMTN_SCHEMA', 'DIP', 'DMSYS', 'DBSNMP');

CREATE OR REPLACE FORCE VIEW "EXU8SYNC"("SYNNAM","SYNNAM2","SYNTAB","TABOWN","TABNODE","PUBLIC$","SYNOWN","SYNOWNID","SYNTIME") AS 
SELECT  s."SYNNAM",s."SYNNAM2",s."SYNTAB",s."TABOWN",s."TABNODE",s."PUBLIC$",s."SYNOWN",s."SYNOWNID",s."SYNTIME"
        FROM    sys.exu8syn s, sys.incexp i, sys.incvid v
        WHERE   s.synnam = i.name(+) AND
                s.synownid = i.owner#(+) AND
                NVL(i.type#, 5) = 5 AND
                (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
                 NVL(i.expid, 9999) > v.expid);

CREATE OR REPLACE FORCE VIEW "EXU8SYNI"("SYNNAM","SYNNAM2","SYNTAB","TABOWN","TABNODE","PUBLIC$","SYNOWN","SYNOWNID","SYNTIME") AS 
SELECT  s."SYNNAM",s."SYNNAM2",s."SYNTAB",s."TABOWN",s."TABNODE",s."PUBLIC$",s."SYNOWN",s."SYNOWNID",s."SYNTIME"
        FROM    sys.exu8syn s, sys.incexp i, sys.incvid v
        WHERE   s.synnam = i.name(+) AND
                s.synownid = i.owner#(+) AND
                NVL(i.type#, 5) = 5 AND
                NVL(i.expid, 9999) > v.expid;

CREATE OR REPLACE FORCE VIEW "EXU8SYNU"("SYNNAM","SYNNAM2","SYNTAB","TABOWN","TABNODE","PUBLIC$","SYNOWN","SYNOWNID","SYNTIME") AS 
SELECT  "SYNNAM","SYNNAM2","SYNTAB","TABOWN","TABNODE","PUBLIC$","SYNOWN","SYNOWNID","SYNTIME"
        FROM    sys.exu8syn
        WHERE   synownid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8TAB"("OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL") AS 
SELECT  "OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL"
        FROM    sys.exu81tab
        WHERE   NOT EXISTS (
                    SELECT  *
                    FROM    sys.col$ c$
                    WHERE   c$.obj# = objid AND
                            (c$.type# = 208 OR
                             (c$.type# >= 178 AND
                              c$.type# <= 183) OR
                             (c$.type# = 112 AND
                              ((c$.charsetid > 800 AND
                                c$.charsetid < 1000) OR
                               c$.charsetid > 2000))));

CREATE OR REPLACE FORCE VIEW "EXU8TABC"("OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL") AS 
SELECT  "OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL"
        FROM    sys.exu81tabc
        WHERE   NOT EXISTS (
                    SELECT  *
                    FROM    sys.col$ c$
                    WHERE   c$.obj# = objid AND
                            c$.type# = 208);

CREATE OR REPLACE FORCE VIEW "EXU8TABI"("OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL") AS 
SELECT  "OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL"
        FROM    sys.exu81tabi
        WHERE   NOT EXISTS (
                    SELECT  *
                    FROM    sys.col$ c$
                    WHERE   c$.obj# = objid AND
                            c$.type# = 208);

CREATE OR REPLACE FORCE VIEW "EXU8TABU"("OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL") AS 
SELECT  "OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL"
        FROM    sys.exu8tab
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8TBP"("OBJID","DOBJID","BOBJID","OWNERID","PNAME","PROWCNT","PBLKCNT","PAVGRLEN","PFLAGS","PARTNO","HIBOUNDLEN","HIBOUNDVAL","TSNAME","TSNO","FILENO","BLOCKNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEFLOG","TSDEFLOG","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","IFLAGS") AS 
SELECT  o$.obj#, o$.dataobj#, tp$.bo#, o$.owner#, o$.subname,
                NVL(tp$.rowcnt, -1), NVL(tp$.blkcnt, -1), NVL(tp$.avgrln, -1),
                tp$.flags, tp$.part#, tp$.hiboundlen, tp$.hiboundval, ts$.name,
                tp$.ts#, tp$.file#, tp$.block#, MOD(tp$.pctfree$, 100),
                tp$.pctused$, tp$.initrans, tp$.maxtrans,
                DECODE(BITAND(tp$.flags, 4), 4, 1, 0), ts$.dflogging, -1, -1,
                -1, -1, -1, -1, -1
        FROM    sys.obj$ o$, sys.tabpart$ tp$, sys.ts$ ts$
        WHERE   o$.type# = 19 AND
                tp$.obj# = o$.obj# AND
                ts$.ts# = tp$.ts#;

CREATE OR REPLACE FORCE VIEW "EXU8TBPU"("OBJID","DOBJID","BOBJID","OWNERID","PNAME","PROWCNT","PBLKCNT","PAVGRLEN","PFLAGS","PARTNO","HIBOUNDLEN","HIBOUNDVAL","TSNAME","TSNO","FILENO","BLOCKNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEFLOG","TSDEFLOG","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","IFLAGS") AS 
SELECT  "OBJID","DOBJID","BOBJID","OWNERID","PNAME","PROWCNT","PBLKCNT","PAVGRLEN","PFLAGS","PARTNO","HIBOUNDLEN","HIBOUNDVAL","TSNAME","TSNO","FILENO","BLOCKNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEFLOG","TSDEFLOG","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","IFLAGS"
        FROM    sys.exu8tbp
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8TBS"("ID","OWNER","NAME","ISONLINE","CONTENT","INIEXT","SEXT","PCTINC","MINEXT","MAXEXT","DEFLOG") AS 
SELECT  tbs$.id, tbs$.owner, tbs$.name, tbs$.isonline, tbs$.content,
                tbs$.iniext, tbs$.sext, tbs$.pctinc, tbs$.minext, tbs$.maxext,
                tbs$.deflog
        FROM    sys.exu81tbs tbs$
        WHERE   tbs$.ext_mgt = 0;

CREATE OR REPLACE FORCE VIEW "EXU8TGR"("OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE") AS 
SELECT  ownerid, owner, baseobject, definition, whenclause, action,
                enabled, name, basename, basetype, property, btowner,
                btownerid, actionsize
        FROM    sys.exu816tgr
        WHERE   BITAND(tproperty, 127) in (0, 1);

CREATE OR REPLACE FORCE VIEW "EXU8TGRC"("OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE") AS 
SELECT  "OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE"
        FROM    sys.exu8tgr
        WHERE   (ownerid, basename) IN (
                    SELECT  ownerid, name
                    FROM    sys.exu8tabc)
      UNION ALL
        SELECT  "OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE"
        FROM    sys.exu8tgr
        WHERE   (ownerid, basename) IN (
                    SELECT  ownerid, name
                    FROM    sys.exu8vinfc);

CREATE OR REPLACE FORCE VIEW "EXU8TGRI"("OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE") AS 
SELECT  "OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE"
        FROM    sys.exu8tgr
        WHERE   (ownerid, basename) IN (
                    SELECT  ownerid, name
                    FROM    sys.exu8tabi)
      UNION ALL
        SELECT  "OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE"
        FROM    sys.exu8tgr
        WHERE   (ownerid, basename) IN (
                    SELECT  ownerid, name
                    FROM    sys.exu8vinfi);

CREATE OR REPLACE FORCE VIEW "EXU8TGRIC"("OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE") AS 
SELECT  "OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE"
        FROM    sys.exu8tgr
        WHERE   (ownerid, basename) IN (
                    SELECT  i.owner#, i.name
                    FROM    sys.incexp i, sys.incvid v
                    WHERE   i.expid > v.expid AND
                            i.type# IN (2, 4));

CREATE OR REPLACE FORCE VIEW "EXU8TGRU"("OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE") AS 
SELECT  "OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE"
        FROM    sys.exu8tgr
        WHERE   UID = ownerid;

CREATE OR REPLACE FORCE VIEW "EXU8TNE"("TSNO","FILENO","BLOCKNO","LENGTH") AS 
SELECT  e.tsno, e.fileno, e.blockno,
                CEIL(e.length * ((
                    SELECT  t1$.blocksize
                    FROM    sys.ts$ t1$
                    WHERE   t1$.ts# = e.tsno) / (
                    SELECT  t0$.blocksize
                    FROM    sys.ts$ t0$
                    WHERE   t0$.ts# = 0)))
        FROM    sys.exu9tne e;

CREATE OR REPLACE FORCE VIEW "EXU8TNEB"("TSNO","FILENO","BLOCKNO","LENGTH") AS 
SELECT  e.tsno, e.fileno, e.blockno,
                CEIL(e.length * ((
                    SELECT  t1$.blocksize
                    FROM    sys.ts$ t1$
                    WHERE   t1$.ts# = e.tsno) / (
                    SELECT  t0$.blocksize
                    FROM    sys.ts$ t0$
                    WHERE   t0$.ts# = 0)))
        FROM    sys.exu9tneb e;

CREATE OR REPLACE FORCE VIEW "EXU8TNTC"("OBJID","OWNERID","TNAME") AS 
SELECT  objid, ownerid, name
        FROM    sys.exu8tabc                        /* tables in this export */
        WHERE   BITAND(property, 4) = 4           /* table has nested tables */;

CREATE OR REPLACE FORCE VIEW "EXU8TNTI"("OBJID","OWNERID","TNAME") AS 
SELECT  objid, ownerid, name
        FROM    sys.exu8tabi                        /* tables in this export */
        WHERE   BITAND(property, 4) = 4           /* table has nested tables */;

CREATE OR REPLACE FORCE VIEW "EXU8TNTIC"("OBJID","OWNERID","TNAME") AS 
SELECT  o$.obj#, o$.owner#, o$.name
        FROM    sys.obj$ o$, sys.tab$ t$
        WHERE   (o$.owner#, o$.name) IN (
                    SELECT  i$.owner#, i$.name      /* tables in this export */
                    FROM    sys.incexp i$, sys.incvid v$
                    WHERE   i$.expid > v$.expid AND
                            i$.type# = 2) AND
                t$.obj# = o$.obj# AND
                BITAND(t$.property, 4) = 4              /* has nested tables */;

CREATE OR REPLACE FORCE VIEW "EXU8TSL"("FUNCTION","DBNAME","TYPE") AS 
SELECT  DECODE(tl.dbname, '+*', 'allow_all', '-*', 'deny_all',
                       fdef.function),
                DECODE(tl.dbname, '+*', '', '-*', '', '('''||tl.dbname||''')'),
                DECODE(tl.dbname, '+*', 0, '-*', 0, 1)
        FROM    sys.trusted_list$ tl, (
                    SELECT  DECODE (dbname, '+*', 'deny_server ', '-*',
                                    'allow_server ') function
                    FROM    sys.trusted_list$
                    WHERE   dbname like '%*') fdef;

CREATE OR REPLACE FORCE VIEW "EXU8TSN"("TSNAME","TSID") AS 
SELECT  t$.name, t$.ts#
        FROM    sys.ts$ t$;

CREATE OR REPLACE FORCE VIEW "EXU8TSQ"("TSNAME","TSID","UNAME","USERID","MAXBLOCKS") AS 
SELECT  q.tsname, q.tsid, q.uname, q.userid,
                CEIL(q.maxblocks * (q.blocksize / (
                    SELECT  t$.blocksize
                    FROM    sys.ts$ t$
                    WHERE   t$.ts# = 0)))
        FROM    sys.exu9tsq q;

CREATE OR REPLACE FORCE VIEW "EXU8TYP"("TNAME","TOWNER","OWNERID","TOID","MTIME","OBJNO","AUDIT$","SECONDARYOBJ","SQLVER","TYPOBJSTATUS","TVERSION","THASHCODE") AS 
SELECT  "TNAME","TOWNER","OWNERID","TOID","MTIME","OBJNO","AUDIT$","SECONDARYOBJ","SQLVER","TYPOBJSTATUS","TVERSION","THASHCODE"
        FROM    sys.exu81typ
        WHERE   secondaryobj = 0;

CREATE OR REPLACE FORCE VIEW "EXU8TYPB"("TNAME","TOWNER","TOWNERID","OBJNO","SQLVER") AS 
SELECT  o.name, u.name, o.owner#, o.obj#, sv.sql_version
        FROM    sys.obj$ o, sys.user$ u, sys.exu816sqv sv
        WHERE   o.type# = 14 AND
                u.user# = o.owner# AND
                o.spare1 = sv.version# (+);

CREATE OR REPLACE FORCE VIEW "EXU8TYPBU"("TNAME","TOWNER","TOWNERID","OBJNO","SQLVER") AS 
SELECT  "TNAME","TOWNER","TOWNERID","OBJNO","SQLVER"
        FROM    sys.exu8typb
        WHERE   townerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8TYPT"("TNAME","TOWNER","OWNERID","TOID","MTIME","TYPOBJNO","TABOBJNO","AUDIT$","SQLVER","PROPERTY","TYPOBJSTATUS","TVERSION","THASHCODE","DEPORDER","TYPEID","ROOTTOID") AS 
SELECT  o.name, u.name, o.owner#, t.toid,
                TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, c.obj#,
                tm.audit$, sv.sql_version, t.properties,
                o.status, t.version#, t.hashcode, d.order#, t.typeid,
                NVL(t.roottoid,HEXTORAW('00'))
        FROM    sys.coltype$ c, sys.user$ u, sys.obj$ o, sys.type$ t,
                sys.type_misc$ tm, sys.exu816sqv sv, sys.dependency$ d
        WHERE   t.toid = c.toid AND
                o.oid$ = c.toid AND
                u.user# = o.owner# AND
                o.obj# = tm.obj# AND
                BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
                NVL(o.type#, -1) != 10 AND
                t.toid  = t.tvoid AND                    /* Latest type only */
                o.spare1 = sv.version# (+) AND
                c.obj# = d.d_obj# AND
                d.p_obj# = o.obj#;

CREATE OR REPLACE FORCE VIEW "EXU8TYPTU"("TNAME","TOWNER","OWNERID","TOID","MTIME","TYPOBJNO","TABOBJNO","AUDIT$","SQLVER","PROPERTY","TYPOBJSTATUS","TVERSION","THASHCODE","DEPORDER","TYPEID","ROOTTOID") AS 
SELECT  o.name, u.name, o.owner#, t.toid,
                TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, c.obj#,
                tm.audit$, sv.sql_version, t.properties,
                o.status, t.version#, t.hashcode, d.order#, t.typeid,
                NVL(t.roottoid,HEXTORAW('00'))
        FROM    sys.coltype$ c, sys.user$ u, sys.obj$ o, sys.type$ t,
                sys.type_misc$ tm, sys.exu816sqv sv, sys.dependency$ d
        WHERE   t.toid = c.toid AND
                o.oid$ = c.toid AND
                u.user# = o.owner# AND
                o.obj# = tm.obj# AND
                BITAND(t.properties, 2128) = 0 AND/* skip system gen'd types */
                t.toid  = t.tvoid AND                    /* Latest type only */
                NVL(o.type#, -1) != 10 AND
                c.obj# = d.d_obj# AND
                d.p_obj# = o.obj# AND
                (o.owner# = UID OR                  /* owned by current user */
                /* current user or public role have execute access to type */
                o.obj# IN (
                    SELECT  oa.obj#
                    FROM    sys.objauth$ oa
                    WHERE   oa.obj# = o.obj# AND
                            oa.privilege# = 12 AND                /* execute */
                            oa.grantee# IN (UID, 1)) OR
                EXISTS ( /* current user or public role can execute any type */
                    SELECT  NULL
                    FROM    sys.sysauth$ sa
                    WHERE   sa.grantee# IN (UID, 1) AND
                            sa.privilege# = -184)) AND
                o.spare1 = sv.version# (+);

CREATE OR REPLACE FORCE VIEW "EXU8TYPU"("TNAME","TOWNER","OWNERID","TOID","MTIME","OBJNO","AUDIT$","SECONDARYOBJ","SQLVER","TYPOBJSTATUS","TVERSION","THASHCODE") AS 
SELECT  "TNAME","TOWNER","OWNERID","TOID","MTIME","OBJNO","AUDIT$","SECONDARYOBJ","SQLVER","TYPOBJSTATUS","TVERSION","THASHCODE"
        FROM    sys.exu8typ
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8USCU"("IOBJID","IDOBJID","INAME","ITSNO","IFILENO","IBLOCKNO","IBOBJID","IPCTFREE","IINITR","IMAXTR","IPCTTHRES","TSPNAME","PROPERTY","PRECCNT","DEFLOG","IPBOBJID") AS 
SELECT  o$.obj#, o$.dataobj#, o$.name, i$.ts#, i$.file#, i$.block#,
                i$.bo#, i$.pctfree$, i$.initrans, i$.maxtrans,
                MOD(i$.pctthres$, 256), t$.name, i$.property, i$.spare2,
                DECODE(BITAND(i$.flags, 4), 4, 1, 0), 0
        FROM    sys.obj$ o$, sys.ind$ i$, sys.file$ f$, sys.ts$ t$
        WHERE   o$.obj# = i$.obj# AND
                f$.relfile# = i$.file# AND
                f$.ts# = i$.ts# AND
                f$.ts# = t$.ts#
      UNION ALL
        SELECT  o$.obj#, o$.dataobj#, o$.name, ip$.ts#, ip$.file#, ip$.block#,
                ind$.bo#, ip$.pctfree$, ip$.initrans, ip$.maxtrans,
                MOD(ip$.pctthres$, 256), ts$.name, ind$.property, ip$.spare2,
                DECODE(BITAND(ind$.flags, 4), 4, 1, 0), ip$.bo#
        FROM    sys.obj$ o$, sys.indpart$ ip$, sys.ts$ ts$, sys.ind$ ind$,
                sys.tab$ t$
        WHERE   ip$.obj# = o$.obj# AND
                ts$.ts# = ip$.ts# AND
                ip$.bo# = ind$.obj# AND
                o$.type# = 20 AND                        /* Index partitions */
                ind$.bo# = t$.obj#
                AND BITAND(t$.property, 64) = 0                  /* Non-IOTs */;

CREATE OR REPLACE FORCE VIEW "EXU8USR"("NAME","USERID","PASSWD","DEFROLE","DATATS","TEMPTS","PROFILE#","PROFNAME","ASTATUS","EXT_USERNAME") AS 
SELECT  u.name, u.user#, DECODE(u.password, 'N', '', u.password),
                DECODE(u.defrole, 0, 'N', 1, 'A', 2, 'L', 3, 'E', 'X'),
                ts1.name, DECODE(BITAND(ts2.flags,2048),2048,'SYSTEM',ts2.name),
                u.resource$, p.name, u.astatus,
                u.ext_username
        FROM    sys.user$ u, sys.ts$ ts1, sys.ts$ ts2, sys.profname$ p
        WHERE   u.datats# = ts1.ts# AND
                u.tempts# = ts2.ts# AND
                u.type# = 1 AND
                u.resource$ = p.profile# AND
                u.name NOT IN ( 'ORDSYS',  'MDSYS', 'CTXSYS', 'ORDPLUGINS',
                                'LBACSYS', 'XDB',   'SI_INFORMTN_SCHEMA',
                                'DIP',     'DMSYS', 'DBSNMP');

CREATE OR REPLACE FORCE VIEW "EXU8USRU"("NAME","USERID","PASSWD","DEFROLE","DATATS","TEMPTS","PROFILE#","PROFNAME","ASTATUS","EXT_USERNAME") AS 
SELECT  "NAME","USERID","PASSWD","DEFROLE","DATATS","TEMPTS","PROFILE#","PROFNAME","ASTATUS","EXT_USERNAME"
        FROM    sys.exu8usr
        WHERE   userid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8VDPT"("PARENT","CHILD","POWNER","COWNER") AS 
SELECT  d$.p_obj#, d$.d_obj#, o1$.owner#, o2$.owner#
        FROM    sys.dependency$ d$, sys.obj$ o1$, sys.obj$ o2$, sys.view$ v1$,
                sys.view$ v2$
        WHERE   d$.p_obj# = v1$.obj# AND
                v1$.obj# = o1$.obj# AND
                d$.d_obj# = v2$.obj# AND
                v2$.obj# = o2$.obj#;

CREATE OR REPLACE FORCE VIEW "EXU8VDPTU"("PARENT","CHILD","POWNER","COWNER") AS 
SELECT  "PARENT","CHILD","POWNER","COWNER"
        FROM    sys.exu8vdpt;

CREATE OR REPLACE FORCE VIEW "EXU8VER"("VERSION") AS 
SELECT  TO_NUMBER(value$)
        FROM    sys.props$
        WHERE   name = 'EXPORT_VIEWS_VERSION';

CREATE OR REPLACE FORCE VIEW "EXU8VEW"("VOBJID","VNAME","VTEXT","VOWNER","VOWNERID","VAUDIT","VCOMMENT","VCNAME","VLEVEL","PROPERTY","DEFER","FLAGS","OIDLEN","OIDCLAUSE","TYPEOWNER","TYPENAME","VLEN","SQLVER","UNDERLEN","UNDERCLAUSE") AS 
SELECT  o$.obj#, o$.name, v$.text, u$.name, o$.owner#, v$.audit$,
                com$.comment$, c$.name, d$.dlevel, v$.property,
                NVL(cd$.defer, 0), NVL(o$.flags, 0), NVL(vt$.oidtextlength, 0),
                vt$.oidtext, vt$.typeowner, vt$.typename, v$.textlength,
                sv$.sql_version, NVL(vt$.undertextlength, 0), vt$.undertext
        FROM    sys.exu81obj o$, sys.view$ v$, sys.user$ u$, sys.cdef$ cd$,
                sys.con$ c$, sys.com$ com$, sys.exu8ord d$,
                sys.typed_view$ vt$, sys.exu816sqv sv$
        WHERE   v$.obj# = o$.obj# AND
                o$.owner# = u$.user# AND
                o$.obj# = cd$.obj#(+) AND
                cd$.con# = c$.con#(+) AND
                o$.obj# = com$.obj#(+) AND
                com$.col#(+) IS NULL AND
                o$.obj# = d$.obj#(+) AND
                v$.obj# = vt$.obj# (+) AND
                o$.spare1 = sv$.version# (+);

CREATE OR REPLACE FORCE VIEW "EXU8VEWC"("VOBJID","VNAME","VTEXT","VOWNER","VOWNERID","VAUDIT","VCOMMENT","VCNAME","VLEVEL","PROPERTY","DEFER","FLAGS","OIDLEN","OIDCLAUSE","TYPEOWNER","TYPENAME","VLEN","SQLVER","UNDERLEN","UNDERCLAUSE") AS 
SELECT  vw."VOBJID",vw."VNAME",vw."VTEXT",vw."VOWNER",vw."VOWNERID",vw."VAUDIT",vw."VCOMMENT",vw."VCNAME",vw."VLEVEL",vw."PROPERTY",vw."DEFER",vw."FLAGS",vw."OIDLEN",vw."OIDCLAUSE",vw."TYPEOWNER",vw."TYPENAME",vw."VLEN",vw."SQLVER",vw."UNDERLEN",vw."UNDERCLAUSE"
        FROM    sys.exu8vew vw, sys.incexp i, sys.incvid v
        WHERE   vw.vname = i.name(+) AND
                vw.vownerid = i.owner#(+) AND
                NVL(i.type#, 4) = 4 AND
                (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
                 v.expid < NVL(i.expid, 9999));

CREATE OR REPLACE FORCE VIEW "EXU8VEWI"("VOBJID","VNAME","VTEXT","VOWNER","VOWNERID","VAUDIT","VCOMMENT","VCNAME","VLEVEL","PROPERTY","DEFER","FLAGS","OIDLEN","OIDCLAUSE","TYPEOWNER","TYPENAME","VLEN","SQLVER","UNDERLEN","UNDERCLAUSE") AS 
SELECT  vw."VOBJID",vw."VNAME",vw."VTEXT",vw."VOWNER",vw."VOWNERID",vw."VAUDIT",vw."VCOMMENT",vw."VCNAME",vw."VLEVEL",vw."PROPERTY",vw."DEFER",vw."FLAGS",vw."OIDLEN",vw."OIDCLAUSE",vw."TYPEOWNER",vw."TYPENAME",vw."VLEN",vw."SQLVER",vw."UNDERLEN",vw."UNDERCLAUSE"
        FROM    sys.exu8vew vw, sys.incexp i, sys.incvid v
        WHERE   i.name(+) = vw.vname AND
                i.owner#(+) = vw.vownerid AND
                v.expid < NVL(i.expid, 9999) AND
                NVL(i.type#, 4) = 4;

CREATE OR REPLACE FORCE VIEW "EXU8VEWU"("VOBJID","VNAME","VTEXT","VOWNER","VOWNERID","VAUDIT","VCOMMENT","VCNAME","VLEVEL","PROPERTY","DEFER","FLAGS","OIDLEN","OIDCLAUSE","TYPEOWNER","TYPENAME","VLEN","SQLVER","UNDERLEN","UNDERCLAUSE") AS 
SELECT  o$.obj#, o$.name, v$.text, u$.name, o$.owner#, v$.audit$,
                com$.comment$, c$.name, d$.dlevel, v$.property,
                NVL(cd$.defer, 0), NVL(o$.flags, 0), NVL(vt$.oidtextlength, 0),
                vt$.oidtext, vt$.typeowner, vt$.typename, v$.textlength,
                sv$.sql_version, NVL(vt$.undertextlength, 0), vt$.undertext
        FROM    sys.exu81obj o$, sys.view$ v$, sys.user$ u$, sys.cdef$ cd$,
                sys.con$ c$, sys.com$ com$, sys.exu8ordu d$,
                sys.typed_view$ vt$, sys.exu816sqv sv$
        WHERE   v$.obj# = o$.obj# AND
                o$.owner# = u$.user# AND
                o$.obj# = cd$.obj#(+) AND
                cd$.con# = c$.con#(+) AND
                o$.obj# = com$.obj#(+) AND
                com$.col#(+) IS NULL AND
                o$.obj# = d$.obj#(+) AND
                v$.obj# = vt$.obj#(+) AND
                u$.user# = UID AND
                o$.spare1 = sv$.version# (+);

CREATE OR REPLACE FORCE VIEW "EXU8VINF"("VOBJID","VNAME","VTEXT","VOWNER","VOWNERID","VAUDIT","VCOMMENT","VCNAME","PROPERTY","DEFER","FLAGS","OIDLEN","OIDCLAUSE","TYPEOWNER","TYPENAME","VLEN") AS 
SELECT  o$.obj#, o$.name, v$.text, u$.name, o$.owner#, v$.audit$,
                com$.comment$, c$.name, v$.property, NVL(cd$.defer, 0),
                NVL(o$.flags, 0), NVL(vt$.oidtextlength, 0), vt$.oidtext,
                vt$.typeowner, vt$.typename, v$.textlength
        FROM    sys.obj$ o$, sys.view$ v$, sys.user$ u$, sys.cdef$ cd$,
                sys.con$ c$, sys.com$ com$, sys.typed_view$ vt$
        WHERE   v$.obj# = o$.obj# AND
                o$.owner# = u$.user# AND
                o$.obj# = cd$.obj#(+) AND
                cd$.con# = c$.con#(+) AND
                o$.obj# = com$.obj#(+) AND
                com$.col#(+) IS NULL AND
                v$.obj# = vt$.obj# (+);

CREATE OR REPLACE FORCE VIEW "EXU8VINFC"("VOBJID","VNAME","VTEXT","VOWNER","VOWNERID","VAUDIT","VCOMMENT","VCNAME","PROPERTY","DEFER","FLAGS","OIDLEN","OIDCLAUSE","TYPEOWNER","TYPENAME","VLEN") AS 
SELECT  vw."VOBJID",vw."VNAME",vw."VTEXT",vw."VOWNER",vw."VOWNERID",vw."VAUDIT",vw."VCOMMENT",vw."VCNAME",vw."PROPERTY",vw."DEFER",vw."FLAGS",vw."OIDLEN",vw."OIDCLAUSE",vw."TYPEOWNER",vw."TYPENAME",vw."VLEN"
        FROM    sys.exu8vinf vw, sys.incexp i, sys.incvid v
        WHERE   vw.vname = i.name(+) AND
                vw.vownerid = i.owner#(+) AND
                NVL(i.type#, 4) = 4 AND
                (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
                v.expid < NVL(i.expid, 9999));

CREATE OR REPLACE FORCE VIEW "EXU8VINFI"("VOBJID","VNAME","VTEXT","VOWNER","VOWNERID","VAUDIT","VCOMMENT","VCNAME","PROPERTY","DEFER","FLAGS","OIDLEN","OIDCLAUSE","TYPEOWNER","TYPENAME","VLEN") AS 
SELECT  vw."VOBJID",vw."VNAME",vw."VTEXT",vw."VOWNER",vw."VOWNERID",vw."VAUDIT",vw."VCOMMENT",vw."VCNAME",vw."PROPERTY",vw."DEFER",vw."FLAGS",vw."OIDLEN",vw."OIDCLAUSE",vw."TYPEOWNER",vw."TYPENAME",vw."VLEN"
        FROM    sys.exu8vinf vw, sys.incexp i, sys.incvid v
        WHERE   i.name(+) = vw.vname AND
                i.owner#(+) = vw.vownerid AND
                v.expid < NVL(i.expid, 9999) AND
                NVL(i.type#, 4) = 4;

CREATE OR REPLACE FORCE VIEW "EXU8VINFU"("VOBJID","VNAME","VTEXT","VOWNER","VOWNERID","VAUDIT","VCOMMENT","VCNAME","PROPERTY","DEFER","FLAGS","OIDLEN","OIDCLAUSE","TYPEOWNER","TYPENAME","VLEN") AS 
SELECT  "VOBJID","VNAME","VTEXT","VOWNER","VOWNERID","VAUDIT","VCOMMENT","VCNAME","PROPERTY","DEFER","FLAGS","OIDLEN","OIDCLAUSE","TYPEOWNER","TYPENAME","VLEN"
        FROM    sys.exu8vinf
        WHERE   vownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU8VNC"("VOBJID","VNAME","VTEXT","VOWNER","VOWNERID","VAUDIT","VCOMMENT","VCNAME","PROPERTY","DEFER","FLAGS","OIDLEN","OIDCLAUSE","TYPEOWNER","TYPENAME","VLEN") AS 
SELECT  "VOBJID","VNAME","VTEXT","VOWNER","VOWNERID","VAUDIT","VCOMMENT","VCNAME","PROPERTY","DEFER","FLAGS","OIDLEN","OIDCLAUSE","TYPEOWNER","TYPENAME","VLEN"
        FROM    sys.exu8vinf vf$
        WHERE   NOT EXISTS (
                    SELECT  0
                    FROM    sys.exu8vdpt vd$
                    WHERE   vd$.parent = vf$.vobjid);

CREATE OR REPLACE FORCE VIEW "EXU8VNCC"("VOBJID","VNAME","VTEXT","VOWNER","VOWNERID","VAUDIT","VCOMMENT","VCNAME","PROPERTY","DEFER","FLAGS","OIDLEN","OIDCLAUSE","TYPEOWNER","TYPENAME","VLEN") AS 
SELECT  vw."VOBJID",vw."VNAME",vw."VTEXT",vw."VOWNER",vw."VOWNERID",vw."VAUDIT",vw."VCOMMENT",vw."VCNAME",vw."PROPERTY",vw."DEFER",vw."FLAGS",vw."OIDLEN",vw."OIDCLAUSE",vw."TYPEOWNER",vw."TYPENAME",vw."VLEN"
        FROM    sys.exu8vnc vw, sys.incexp i, sys.incvid v
        WHERE   vw.vname = i.name(+) AND
                vw.vownerid = i.owner#(+) AND
                NVL(i.type#, 4) = 4 AND
                (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
                v.expid < NVL(i.expid, 9999));

CREATE OR REPLACE FORCE VIEW "EXU8VNCI"("VOBJID","VNAME","VTEXT","VOWNER","VOWNERID","VAUDIT","VCOMMENT","VCNAME","PROPERTY","DEFER","FLAGS","OIDLEN","OIDCLAUSE","TYPEOWNER","TYPENAME","VLEN") AS 
SELECT  vw."VOBJID",vw."VNAME",vw."VTEXT",vw."VOWNER",vw."VOWNERID",vw."VAUDIT",vw."VCOMMENT",vw."VCNAME",vw."PROPERTY",vw."DEFER",vw."FLAGS",vw."OIDLEN",vw."OIDCLAUSE",vw."TYPEOWNER",vw."TYPENAME",vw."VLEN"
        FROM    sys.exu8vnc vw, sys.incexp i, sys.incvid v
        WHERE   i.name(+) = vw.vname AND
                i.owner#(+) = vw.vownerid AND
                v.expid < NVL(i.expid, 9999) AND
                NVL(i.type#, 4) = 4;

CREATE OR REPLACE FORCE VIEW "EXU8VNCU"("VOBJID","VNAME","VTEXT","VOWNER","VOWNERID","VAUDIT","VCOMMENT","VCNAME","PROPERTY","DEFER","FLAGS","OIDLEN","OIDCLAUSE","TYPEOWNER","TYPENAME","VLEN") AS 
SELECT  "VOBJID","VNAME","VTEXT","VOWNER","VOWNERID","VAUDIT","VCOMMENT","VCNAME","PROPERTY","DEFER","FLAGS","OIDLEN","OIDCLAUSE","TYPEOWNER","TYPENAME","VLEN"
        FROM    sys.exu8vinfu vf$
        WHERE   NOT EXISTS (
                    SELECT  0
                    FROM    sys.exu8vdptu vd$
                    WHERE   vd$.parent = vf$.vobjid);

CREATE OR REPLACE FORCE VIEW "EXU92FPT"("TNAME","TOWNER","OWNERID","TOID","MTIME","OBJNO","DOBJNO","AUDIT$","SQLVER","PROPERTY","TYPOBJSTATUS","TVERSION","THASHCODE","DEPORDER","TYPEID","ROOTTOID") AS 
SELECT  o.name, u.name, o.owner#, t.toid,
                TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, d.d_obj#,
                tm.audit$, sv.sql_version, t.properties,
                o.status, t.version#, t.hashcode, d.order#, t.typeid,
                NVL(t.roottoid,HEXTORAW('00'))
        FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.dependency$ d,
                sys.type_misc$ tm, sys.exu816sqv sv
        WHERE   o.obj# = d.p_obj# AND
                o.type# = 13 AND
                o.oid$ = t.toid AND
                o.owner# = u.user# AND
                o.obj# = tm.obj# AND
                BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
                o.spare1 = sv.version# (+) AND
                t.toid = t.tvoid                     /* Only the latest type */
     UNION      /* Subtypes */
        SELECT  sto.name, u.name, sto.owner#, t.toid,
                TO_CHAR(sto.mtime,  'YYYY-MM-DD:HH24:MI:SS'), sto.obj#,
                d.p_obj#, tm.audit$, sv.sql_version, t.properties,
                sto.status, t.version#, t.hashcode, d.order#, t.typeid,
                NVL(t.roottoid,HEXTORAW('00'))
        FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.obj$ sto,
                /*   o.obj$ is for the type is question */
                /* sto.obj$ is for the Sub Types of o.obj$ */
                sys.type_misc$ tm, sys.exu816sqv sv, sys.dependency$ d
        WHERE   o.obj# = d.p_obj# AND
                o.type# = 13 AND
                sto.type# = 13 AND
                sto.oid$ = t.toid AND
                sto.owner# = u.user# AND
                sto.obj# = tm.obj# AND
                BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
                sto.spare1 = sv.version# (+) AND
                t.toid = t.tvoid AND                 /* Only the latest type */
                sto.obj# = d.d_obj#;

CREATE OR REPLACE FORCE VIEW "EXU92FPTP"("TNAME","TOWNER","OWNERID","TOID","MTIME","OBJNO","DOBJNO","AUDIT$","SQLVER","PROPERTY","TYPOBJSTATUS","TVERSION","THASHCODE","DEPORDER","TYPEID","ROOTTOID") AS 
SELECT  o.name, u.name, o.owner#, t.toid,
                TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, d.d_obj#,
                tm.audit$, sv.sql_version, t.properties,
                o.status, t.version#, t.hashcode, d.order#, t.typeid,
                NVL(t.roottoid,HEXTORAW('00'))
        FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.dependency$ d,
                sys.type_misc$ tm, sys.exu816sqv sv
        WHERE   o.obj# = d.p_obj# AND
                o.type# = 13 AND
                o.oid$ = t.toid AND
                o.owner# = u.user# AND
                o.obj# = tm.obj# AND
                BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
                o.spare1 = sv.version# (+) AND
                t.toid = t.tvoid                     /* Only the latest type */;

CREATE OR REPLACE FORCE VIEW "EXU92FPTPU"("TNAME","TOWNER","OWNERID","TOID","MTIME","OBJNO","DOBJNO","AUDIT$","SQLVER","PROPERTY","TYPOBJSTATUS","TVERSION","THASHCODE","DEPORDER","TYPEID","ROOTTOID") AS 
SELECT  o.name, u.name, o.owner#, t.toid,
                TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, d.d_obj#,
                tm.audit$, sv.sql_version, t.properties,
                o.status, t.version#, t.hashcode, d.order#, t.typeid,
                NVL(t.roottoid,HEXTORAW('00'))
        FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.dependency$ d,
                sys.type_misc$ tm, sys.exu816sqv sv
        WHERE   o.obj# = d.p_obj# AND
                o.type# = 13 AND
                o.oid$ = t.toid AND
                o.owner# = u.user# AND
                o.obj# = tm.obj# AND
                BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
                (o.owner# = UID OR                  /* owned by current user */
                /* current user or public role have execute access to type */
                o.obj# IN (
                    SELECT  oa.obj#
                    FROM    sys.objauth$ oa
                    WHERE   oa.obj# = o.obj# AND
                            oa.privilege# = 12 AND                /* execute */
                            oa.grantee# IN (UID, 1)) OR
                EXISTS ( /* current user or public role can execute any type */
                    SELECT  NULL
                    FROM    sys.sysauth$ sa
                    WHERE   sa.grantee# IN (UID, 1) AND
                            sa.privilege# = -184)) AND
                o.spare1 = sv.version# (+) AND
                t.toid   = t.tvoid                   /* Only the latest type */;

CREATE OR REPLACE FORCE VIEW "EXU92FPTU"("TNAME","TOWNER","OWNERID","TOID","MTIME","OBJNO","DOBJNO","AUDIT$","SQLVER","PROPERTY","TYPOBJSTATUS","TVERSION","THASHCODE","DEPORDER","TYPEID","ROOTTOID") AS 
SELECT  o.name, u.name, o.owner#, t.toid,
                TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, d.d_obj#,
                tm.audit$, sv.sql_version, t.properties,
                o.status, t.version#, t.hashcode, d.order#, t.typeid,
                NVL(t.roottoid,HEXTORAW('00'))
        FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.dependency$ d,
                sys.type_misc$ tm, sys.exu816sqv sv
        WHERE   o.obj# = d.p_obj# AND
                o.type# = 13 AND
                o.oid$ = t.toid AND
                o.owner# = u.user# AND
                o.obj# = tm.obj# AND
                BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
                (o.owner# = UID OR                  /* owned by current user */
                /* current user or public role have execute access to type */
                o.obj# IN (
                    SELECT  oa.obj#
                    FROM    sys.objauth$ oa
                    WHERE   oa.obj# = o.obj# AND
                            oa.privilege# = 12 AND                /* execute */
                            oa.grantee# IN (UID, 1)) OR
                EXISTS ( /* current user or public role can execute any type */
                    SELECT  NULL
                    FROM    sys.sysauth$ sa
                    WHERE   sa.grantee# IN (UID, 1) AND
                            sa.privilege# = -184)) AND
                o.spare1 = sv.version# (+) AND
                t.toid   = t.tvoid                   /* Only the latest type */
     UNION      /* Subtypes */
        SELECT  sto.name, u.name, sto.owner#, t.toid,
                TO_CHAR(sto.mtime,  'YYYY-MM-DD:HH24:MI:SS'), sto.obj#,
                d.p_obj#, tm.audit$, sv.sql_version, t.properties,
                sto.status, t.version#, t.hashcode, d.order#, t.typeid,
                NVL(t.roottoid,HEXTORAW('00'))
        FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.obj$ sto,
                /*   o.obj$ is for the type is question */
                /* sto.obj$ is for the Sub Types of o.obj$ */
                sys.type_misc$ tm, sys.exu816sqv sv, sys.dependency$ d
        WHERE   o.obj# = d.p_obj# AND
                o.type# = 13 AND
                sto.type# = 13 AND
                sto.oid$ = t.toid AND
                sto.owner# = u.user# AND
                sto.obj# = tm.obj# AND
                BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
                (sto.owner# = UID OR                /* owned by current user */
                /* current user or public role have execute access to type */
                sto.obj# IN (
                        SELECT  oa.obj#
                        FROM    sys.objauth$ oa
                        WHERE   oa.obj# = sto.obj# AND
                                oa.privilege# = 12 AND            /* execute */
                                (oa.grantee# = UID OR
                                 oa.grantee# = 1)) OR
                /* current user or public role can execute any type */
                EXISTS (
                        SELECT  NULL
                        FROM    sys.sysauth$ sa
                        WHERE   (sa.grantee# = UID OR
                                 sa.grantee# = 1) AND
                                sa.privilege# = -184 )) AND
                sto.spare1 = sv.version# (+) AND
                t.toid = t.tvoid AND                 /* Only the latest type */
                sto.obj# = d.d_obj#;

CREATE OR REPLACE FORCE VIEW "EXU92ITGR"("OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE","TRIG_OBJNO") AS 
SELECT  ownerid, owner, baseobject, definition, whenclause, action,
                enabled, tproperty, name, basename, basetype, property,
                btowner, btownerid, actionsize, trig_objno
        FROM    sys.exu92tgr
        WHERE   BITAND(sys_evts, 255) = sys_evts;

CREATE OR REPLACE FORCE VIEW "EXU92TGR"("OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","SYS_EVTS","SQLVER","ACTIONSIZE","TRIG_OBJNO") AS 
SELECT  o.owner#, u.name, t.baseobject, t.definition, t.whenclause,
                t.action#, t.enabled, t.property, o.name,
                DECODE(BITAND(t.property, 24), 0, (
                    SELECT  o2.name
                    FROM    sys.exu81obj o2
                    WHERE   t.baseobject = o2.obj#), ''),
                DECODE(BITAND(t.property, 24), 0, (
                    SELECT  o2.type#
                    FROM    sys.exu81obj o2
                    WHERE   t.baseobject = o2.obj#), 0),
                NVL((
                    SELECT  tb.property
                    FROM    sys.tab$ tb
                    WHERE   t.baseobject = tb.obj#), 0),
                NVL((
                    SELECT  ut.name
                    FROM    sys.user$ ut, sys.exu81obj o2
                    WHERE   t.baseobject = o2.obj# AND
                            o2.owner# = ut.user#), ''),
                NVL((
                    SELECT  ut.user#
                    FROM    sys.user$ ut, sys.exu81obj o2
                    WHERE   t.baseobject = o2.obj# AND
                            o2.owner# = ut.user#), 0),
                t.sys_evts,
                (   SELECT  sv.sql_version
                    FROM    sys.exu816sqv sv
                    WHERE   o.spare1 = sv.version#),
                t.actionsize, t.obj#
        FROM    sys.exu81obj o, sys.trigger$ t, sys.user$ u
        WHERE   o.obj# = t.obj# AND
                u.user# = o.owner#;

CREATE OR REPLACE FORCE VIEW "EXU92TGRC"("OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE","TRIG_OBJNO") AS 
SELECT  "OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE","TRIG_OBJNO"
        FROM    sys.exu92itgr
        WHERE   (ownerid, basename) IN (
                    SELECT  ownerid, name
                    FROM    sys.exu9tabc)
      UNION ALL
        SELECT  "OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE","TRIG_OBJNO"
        FROM    sys.exu92itgr
        WHERE   (ownerid, basename) IN (
                    SELECT  ownerid, name
                    FROM    sys.exu8vinfc);

CREATE OR REPLACE FORCE VIEW "EXU92TGRI"("OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE","TRIG_OBJNO") AS 
SELECT  "OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE","TRIG_OBJNO"
        FROM    sys.exu92itgr
        WHERE   (ownerid, basename) IN (
                    SELECT  ownerid, name
                    FROM    sys.exu9tabi)
      UNION ALL
        SELECT  "OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE","TRIG_OBJNO"
        FROM    sys.exu92itgr
        WHERE   (ownerid, basename) IN (
                    SELECT  ownerid, name
                    FROM    sys.exu8vinfi);

CREATE OR REPLACE FORCE VIEW "EXU92TGRIC"("OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","SYS_EVTS","SQLVER","ACTIONSIZE","TRIG_OBJNO") AS 
SELECT  "OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","SYS_EVTS","SQLVER","ACTIONSIZE","TRIG_OBJNO"
        FROM    sys.exu92tgr
        WHERE   (ownerid, basename) IN (
                    SELECT  i.owner#, i.name
                    FROM    sys.incexp i, sys.incvid v
                    WHERE   i.expid > v.expid AND
                            i.type# IN (2, 4));

CREATE OR REPLACE FORCE VIEW "EXU92TGRU"("OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","SYS_EVTS","SQLVER","ACTIONSIZE","TRIG_OBJNO") AS 
SELECT  "OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","SYS_EVTS","SQLVER","ACTIONSIZE","TRIG_OBJNO"
        FROM    sys.exu92tgr
        WHERE   UID = ownerid;

CREATE OR REPLACE FORCE VIEW "EXU92TSP"("OBJID","OWNERID","SPART_POSITION","SUBPNAME","TSNAME","TSNO","FLAGS","HIBOUNDLEN","HIBOUNDVAL") AS 
SELECT  dsp.bo#, o.owner#, dsp.spart_position, dsp.spart_name,
                ts.name, dsp.ts#, dsp.flags, dsp.hiboundlen,
                dsp.hiboundval
        FROM    sys.defsubpart$ dsp, sys.obj$ o, sys.ts$ ts
        WHERE   dsp.bo# = o.obj# AND
                dsp.ts# = ts.ts# (+) AND
                (UID IN (0, o.owner#) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'));

CREATE OR REPLACE FORCE VIEW "EXU92TSPL"("OBJID","OWNERID","CNAME","SPART_POSITION","INTCOL#","LOBSPNAME","TSNAME","TSNO") AS 
SELECT  dspl.bo#, o.owner#, '"'||c.name||'"', dspl.spart_position,
                dspl.intcol#, dspl.lob_spart_name, ts.name,
                dspl.lob_spart_ts#
        FROM    sys.defsubpartlob$ dspl, sys.obj$ o, sys.ts$ ts, sys.col$ c
        WHERE   dspl.bo# = o.obj# AND
                dspl.lob_spart_ts# = ts.ts# (+) AND
                o.obj# = c.obj# AND
                dspl.intcol# = c.col# AND
                (UID IN (0, o.owner#) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'));

CREATE OR REPLACE FORCE VIEW "EXU9ACTIONOBJ"("NAME","OBJID","OWNER","OWNERID","PROPERTY","TYPE#","LEVEL#","PACKAGE","PKG_SCHEMA","NAMESPACE","CLASS") AS 
SELECT  o.name, d.obj#, u.name, o.owner#, t.property, o.type#,
                p.level#, p.package, p.schema, o.namespace, p.class
        FROM    sys.exu81obj o, sys.user$ u, sys.exppkgact$ p, sys.tab$ t,
                sys.expdepact$ d
        WHERE   d.obj# = o.obj# AND
                o.owner# = u.user# AND
                d.package = p.package AND
                d.schema = p.schema AND
                ((p.class = 3) OR (p.class = 4)) AND
                d.obj# = t.obj# AND
                (UID IN (o.owner#, 0) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'));

CREATE OR REPLACE FORCE VIEW "EXU9BJF"("IOBJID","TABNAME","TOWNER","TOBJID") AS 
SELECT  io$.obj#, to$.name, u$.name, to$.obj#
        FROM    sys.jijoin$ ji$, sys.obj$ to$, sys.user$ u$, sys.obj$ io$
        WHERE   to$.obj# IN (ji$.tab1obj#, ji$.tab2obj#) AND
                to$.owner# = u$.user# AND
                ji$.obj# = io$.obj# AND
                (UID IN (0, io$.owner#) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'))
        GROUP BY io$.obj#, to$.name, u$.name, to$.obj#;

CREATE OR REPLACE FORCE VIEW "EXU9BJW"("IOBJID","COL1NAME","T1OBJID","COL2NAME","T2OBJID") AS 
SELECT  ji$.obj#, c1$.name, ji$.tab1obj#, c2$.name, ji$.tab2obj#
        FROM    sys.jijoin$ ji$, sys.col$ c1$, sys.col$ c2$, sys.obj$ io$
        WHERE   ji$.tab1col# = c1$.intcol# AND
                ji$.tab1obj# = c1$.obj# AND
                ji$.tab2col# = c2$.intcol# AND
                ji$.tab2obj# = c2$.obj# AND
                ji$.obj# = io$.obj# AND
                (UID IN (0, io$.owner#) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'));

CREATE OR REPLACE FORCE VIEW "EXU9CCL"("OWNERID","OWNERNAME","CNO","COLNAME","COLNO","INTCOL","PROPERTY") AS 
SELECT  o.owner#, u.name, cc.con#,
                DECODE(BITAND(c.property, 1), 1, at.name, c.name),
                cc.pos#, c.intcol#, c.property
        FROM    sys.obj$ o, sys.col$ c, sys.ccol$ cc, sys.attrcol$ at,
                sys.user$ u
        WHERE   o.obj# = cc.obj# AND
                o.owner# = u.user# AND
                c.obj# = cc.obj# AND
                c.intcol# = cc.intcol# AND
                BITAND(c.property, 2097152) = 0 AND               /* Not REA */
                BITAND(c.property, 1024) = 0 AND                /* Not SETID */
                c.obj# = at.obj# (+) AND
                c.intcol# = at.intcol# (+) AND
                NOT EXISTS (
                    SELECT  owner, name
                    FROM    sys.noexp$ ne
                    WHERE   ne.owner = u.name AND
                            ne.name = o.name AND
                            ne.obj_type = 2)
 UNION /* Nested Tables - SETID column */
        SELECT  o.owner#, u.name, cc.con#,
                DECODE(BITAND(c.property, 1), 1, at.name, c.name),
                cc.pos#, c.intcol#, c.property
        FROM    sys.obj$ o, sys.col$ c, sys.ccol$ cc, sys.attrcol$ at,
                sys.user$ u, sys.col$ cn
        WHERE   o.obj# = cc.obj# AND
                o.owner# = u.user# AND
                cn.obj# = cc.obj# AND
                cn.intcol# = cc.intcol# AND
                BITAND(cn.property, 1024) = 1024 AND                /* SETID */
                c.obj# = cc.obj# AND
                c.col# = cn.col# AND
                c.intcol# = (cn.intcol# - 1) AND
                c.segcol# = 0 AND
                c.obj# = at.obj# (+) AND
                c.intcol# = at.intcol# (+) AND
                NOT EXISTS (
                    SELECT  owner, name
                    FROM    sys.noexp$ ne
                    WHERE   ne.owner = u.name AND
                            ne.name = o.name AND
                            ne.obj_type = 2)
 UNION /* REFs - REF attribute columns */
        SELECT  o.owner#, u.name, cc.con#,
                DECODE(BITAND(rc.property, 1), 1, at.name, rc.name),
                cc.pos#, rc.intcol#, rc.property
        FROM    sys.obj$ o, sys.col$ c, sys.ccol$ cc, sys.attrcol$ at,
                sys.user$ u, sys.coltype$ ct, sys.col$ rc
        WHERE   o.obj# = cc.obj# AND
                o.owner# = u.user# AND
                c.obj# = cc.obj# AND
                c.intcol# = cc.intcol# AND
                BITAND(c.property, 2097152) = 2097152 AND             /* REA */
                ct.obj# = cc.obj# AND
                ct.col# = cc.col# AND
                UTL_RAW.CAST_TO_BINARY_INTEGER(SUBSTRB(ct.intcol#s, 1,2), 3) =
                  cc.intcol# AND            /* first list col# = constr col# */
                rc.obj# = cc.obj# AND
                rc.intcol# = ct.intcol# AND
                rc.obj# = at.obj# (+) AND
                rc.intcol# = at.intcol# (+) AND
                NOT EXISTS (
                    SELECT  owner, name
                    FROM    sys.noexp$ ne
                    WHERE   ne.owner = u.name AND
                            ne.name = o.name AND
                            ne.obj_type = 2);

CREATE OR REPLACE FORCE VIEW "EXU9CCLO"("OWNERID","CNO","COLNAME","COLNO","PROPERTY") AS 
SELECT  a.ownerid, a.cno, a.colname, a.colno, a.property
        FROM    sys.exu9ccl a, sys.con$ b , sys.cdef$ c
        WHERE   b.owner# = UID AND
                b.con# = c.con# AND
                c.rcon# = a.cno;

CREATE OR REPLACE FORCE VIEW "EXU9CCLU"("OWNERID","OWNERNAME","CNO","COLNAME","COLNO","INTCOL","PROPERTY") AS 
SELECT  "OWNERID","OWNERNAME","CNO","COLNAME","COLNO","INTCOL","PROPERTY"
        FROM    sys.exu9ccl
        WHERE   UID = ownerid;

CREATE OR REPLACE FORCE VIEW "EXU9COE"("TOBJID","TOWNER","TOWNERID","TNAME","NAME","LENGTH","PRECISION","SCALE","TYPE","ISNULL","CONNAME","COLID","INTCOLID","SEGCOLID","COMMENT$","DEFAULT$","DFLTLEN","ENABLED","DEFER","FLAGS","COLPROP","ADTNAME","ADTOWNER","COLCLASS","CHARSETID","CHARSETFORM","FSPRECISION","LFPRECISION","CHARLEN","TFLAGS","TYPESYN") AS 
SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
                v$.precision, v$.scale, v$.type, v$.isnull, v$.conname,
                v$.colid, v$.intcolid, v$.segcolid, v$.comment$, default$,
                v$.dfltlen, v$.enabled, v$.defer, v$.flags, v$.colprop,
                o$.name, u$.name,
                DECODE (v$.name, 'SYS_NC_OID$', 1, 'NESTED_TABLE_ID', 2,
                        'SYS_NC_ROWINFO$', 3, 100),
                v$.charsetid, v$.charsetform, v$.fsprecision, v$.lfprecision,
                v$.charlen, NVL(ct$.flags, 0), s$.name
        FROM    sys.exu8col_temp v$, sys.col$ c$, sys.coltype$ ct$,
                sys.obj$ o$, sys.user$ u$, sys.obj$ s$
        WHERE   c$.obj# = v$.tobjid AND
                c$.intcol# = v$.intcolid AND
                (BITAND(v$.colprop, 2) = 2 OR                 /* SYS_NC_OID$ */
                 BITAND(v$.colprop, 16) = 16 OR           /* NESTED_TABLE_ID */
                 BITAND(v$.colprop, 512) = 512) AND       /* SYS_NC_ROWINFO$ */
                c$.obj# = ct$.obj# (+) AND
                c$.intcol# = ct$.intcol# (+) AND
                NVL(ct$.toid, HEXTORAW('00')) = o$.oid$ (+) AND
                NVL(o$.owner#, -1) = u$.user# (+) AND
                NVL(o$.type#, -1) != 10 /* bug 882543: no non-existent types */
                AND ct$.synobj# IS NOT NULL AND /* has type synonym */
                ct$.synobj# = s$.obj#
      UNION ALL
        SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
                v$.precision, v$.scale, v$.type, v$.isnull, v$.conname,
                v$.colid, v$.intcolid, v$.segcolid, v$.comment$, default$,
                v$.dfltlen, v$.enabled, v$.defer, v$.flags, v$.colprop,
                o$.name, u$.name,
                DECODE (v$.name, 'SYS_NC_OID$', 1, 'NESTED_TABLE_ID', 2,
                        'SYS_NC_ROWINFO$', 3, 100),
                v$.charsetid, v$.charsetform, v$.fsprecision, v$.lfprecision,
                v$.charlen, NVL(ct$.flags, 0), NULL
        FROM    sys.exu8col_temp v$, sys.col$ c$, sys.coltype$ ct$,
                sys.obj$ o$, sys.user$ u$
        WHERE   c$.obj# = v$.tobjid AND
                c$.intcol# = v$.intcolid AND
                (BITAND(v$.colprop, 2) = 2 OR                 /* SYS_NC_OID$ */
                 BITAND(v$.colprop, 16) = 16 OR           /* NESTED_TABLE_ID */
                 BITAND(v$.colprop, 512) = 512) AND       /* SYS_NC_ROWINFO$ */
                c$.obj# = ct$.obj# (+) AND
                c$.intcol# = ct$.intcol# (+) AND
                NVL(ct$.toid, HEXTORAW('00')) = o$.oid$ (+) AND
                NVL(o$.owner#, -1) = u$.user# (+) AND
                NVL(o$.type#, -1) != 10 /* bug 882543: no non-existent types */
                AND ct$.synobj# IS NULL /* does not have type synonym */;

CREATE OR REPLACE FORCE VIEW "EXU9COEU"("TOBJID","TOWNER","TOWNERID","TNAME","NAME","LENGTH","PRECISION","SCALE","TYPE","ISNULL","CONNAME","COLID","INTCOLID","SEGCOLID","COMMENT$","DEFAULT$","DFLTLEN","ENABLED","DEFER","FLAGS","COLPROP","ADTNAME","ADTOWNER","COLCLASS","CHARSETID","CHARSETFORM","FSPRECISION","LFPRECISION","CHARLEN","TFLAGS","TYPESYN") AS 
SELECT  "TOBJID","TOWNER","TOWNERID","TNAME","NAME","LENGTH","PRECISION","SCALE","TYPE","ISNULL","CONNAME","COLID","INTCOLID","SEGCOLID","COMMENT$","DEFAULT$","DFLTLEN","ENABLED","DEFER","FLAGS","COLPROP","ADTNAME","ADTOWNER","COLCLASS","CHARSETID","CHARSETFORM","FSPRECISION","LFPRECISION","CHARLEN","TFLAGS","TYPESYN"
        FROM    sys.exu9coe
        WHERE   townerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU9COO"("TOBJID","TOWNER","TOWNERID","TNAME","NAME","LENGTH","PRECISION","SCALE","TYPE","ISNULL","CONNAME","COLID","INTCOLID","SEGCOLID","COMMENT$","DEFAULT$","DFLTLEN","ENABLED","DEFER","FLAGS","COLPROP","ADTNAME","ADTOWNER","CHARSETID","CHARSETFORM","FSPRECISION","LFPRECISION","CHARLEN","TFLAGS","TYPESYN") AS 
SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
                v$.precision, v$.scale, v$.type, v$.isnull, v$.conname,
                v$.colid, v$.intcolid, v$.segcolid, v$.comment$, default$,
                v$.dfltlen, v$.enabled, v$.defer, v$.flags, v$.colprop,
                o$.name, u$.name, v$.charsetid, v$.charsetform, v$.fsprecision,
                v$.lfprecision, v$.charlen, NVL(ct$.flags,0), NULL
        FROM    sys.exu8col_temp v$, sys.col$ c$, sys.coltype$ ct$,
                sys.obj$ o$, sys.user$ u$
        WHERE   (BITAND (v$.colprop, 32) != 32 OR     /* not a hidden column */
                 BITAND(v$.colprop, 1048608)= 1048608 OR/*snapshot hidden col*/
                 BITAND (v$.colprop, 4194304) = 4194304) AND/* RLS hidden col*/
                v$.tobjid = c$.obj# (+) AND
                v$.intcolid = c$.intcol# (+) AND
                v$.tobjid = ct$.obj# (+) AND
                v$.intcolid = ct$.intcol# (+) AND
                NVL(ct$.toid, HEXTORAW('00')) = o$.oid$ (+) AND
                NVL(o$.owner#, -1) = u$.user# (+) AND
                NVL(o$.type#,13) = 13 AND
                ct$.synobj# IS NULL
      UNION ALL
        SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
                v$.precision, v$.scale, v$.type, v$.isnull, v$.conname,
                v$.colid, v$.intcolid, v$.segcolid, v$.comment$, default$,
                v$.dfltlen, v$.enabled, v$.defer, v$.flags, v$.colprop,
                o$.name, u$.name, v$.charsetid, v$.charsetform,
                v$.fsprecision, v$.lfprecision, v$.charlen, NVL(ct$.flags,0),
                so$.name
        FROM    sys.exu8col_temp v$, sys.col$ c$, sys.coltype$ ct$,
                sys.obj$ o$, sys.user$ u$, sys.obj$ so$
        WHERE   (BITAND (v$.colprop, 32) != 32 OR     /* not a hidden column */
                 BITAND(v$.colprop, 1048608)= 1048608 OR/*snapshot hidden col*/
                 BITAND (v$.colprop, 4194304) = 4194304) AND/* RLS hidden col*/
                v$.tobjid = c$.obj# (+) AND
                v$.intcolid = c$.intcol# (+) AND
                v$.tobjid = ct$.obj# (+) AND
                v$.intcolid = ct$.intcol# (+) AND
                NVL(ct$.toid, HEXTORAW('00')) = o$.oid$ (+) AND
                NVL(o$.owner#, -1) = u$.user# (+) AND
                NVL(o$.type#,13) = 13 AND so$.obj# = ct$.synobj#;

CREATE OR REPLACE FORCE VIEW "EXU9COOU"("TOBJID","TOWNER","TOWNERID","TNAME","NAME","LENGTH","PRECISION","SCALE","TYPE","ISNULL","CONNAME","COLID","INTCOLID","SEGCOLID","COMMENT$","DEFAULT$","DFLTLEN","ENABLED","DEFER","FLAGS","COLPROP","ADTNAME","ADTOWNER","CHARSETID","CHARSETFORM","FSPRECISION","LFPRECISION","CHARLEN","TFLAGS","TYPESYN") AS 
SELECT  "TOBJID","TOWNER","TOWNERID","TNAME","NAME","LENGTH","PRECISION","SCALE","TYPE","ISNULL","CONNAME","COLID","INTCOLID","SEGCOLID","COMMENT$","DEFAULT$","DFLTLEN","ENABLED","DEFER","FLAGS","COLPROP","ADTNAME","ADTOWNER","CHARSETID","CHARSETFORM","FSPRECISION","LFPRECISION","CHARLEN","TFLAGS","TYPESYN"
        FROM    sys.exu9coo
        WHERE   townerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU9DEFPSWITCHES"("COMPFLGS","NLSLENSEM") AS 
SELECT  a.value, b.value
        FROM    sys.v$parameter a, sys.v$parameter b
        WHERE   a.name = 'plsql_compiler_flags' AND
                b.name = 'nls_length_semantics';

CREATE OR REPLACE FORCE VIEW "EXU9DOI"("IOBJID","IOWNERID","IPARAMS","ITNAME","ITOWNER","IMPLNAME","IMPLOWNER","DIVERSION","IPROPERTY","GMFLAGS") AS 
SELECT  ind$.obj#, indo$.owner#, ind$.spare4, o2$.name, u2$.name,
                o3$.name, u3$.name, it$.interface_version#, it$.property, 0
        FROM    sys.ind$ ind$, sys.obj$ indo$, sys.obj$ o2$, sys.obj$ o3$,
                sys.user$ u2$, sys.user$ u3$, sys.indtypes$ it$
        WHERE   ind$.type# = 9 AND                           /* Domain Index */
                ind$.indmethod# = it$.obj#  AND
                ind$.obj# = indo$.obj# AND
                it$.obj# = o2$.obj# AND
                it$.implobj# = o3$.obj# AND
                o2$.owner# = u2$.user# AND
                o3$.owner# = u3$.user# AND
                BITAND(ind$.property, 2) != 2                 /* partitioned */
      UNION ALL         /* Grab domain indexes that have partition info also */
        SELECT  ind$.obj#, indo$.owner#, ind$.spare4, o2$.name, u2$.name,
                o3$.name, u3$.name, it$.interface_version#, it$.property,
                DECODE(BITAND (ind$.property, 512), 512, 64,0)+/*0x200=iot di*/
                DECODE(BITAND(po$.flags, 1), 1, 1, 0) +         /* 1 = local */
                DECODE(po$.parttype, 1, 2, 2, 4, 0)   /* 1 = range, 2 = hash */
        FROM    sys.ind$ ind$, sys.obj$ indo$, sys.obj$ o2$, sys.obj$ o3$,
                sys.user$ u2$, sys.user$ u3$, sys.indtypes$ it$,
                sys.partobj$ po$
        WHERE   ind$.type# = 9 AND
                ind$.indmethod# = it$.obj# AND
                ind$.obj# = indo$.obj# AND
                it$.obj# = o2$.obj# AND
                it$.implobj# = o3$.obj# AND
                o2$.owner# = u2$.user# AND
                o3$.owner# = u3$.user# AND
                BITAND(po$.flags, 8) = 8 AND
                po$.obj# = ind$.obj# AND
                BITAND(ind$.property, 2) = 2                  /* partitioned */;

CREATE OR REPLACE FORCE VIEW "EXU9DOIU"("IOBJID","IOWNERID","IPARAMS","ITNAME","ITOWNER","IMPLNAME","IMPLOWNER","DIVERSION","IPROPERTY","GMFLAGS") AS 
SELECT  "IOBJID","IOWNERID","IPARAMS","ITNAME","ITOWNER","IMPLNAME","IMPLOWNER","DIVERSION","IPROPERTY","GMFLAGS"
        FROM    sys.exu9doi
        WHERE   iownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU9DOSO"("OBJ#","TABLENAME","OWNERID") AS 
SELECT  pi_obj.obj#, c_obj.name, c_obj.owner#
        FROM    sys.obj$ pi_obj, sys.obj$ c_obj, sys.user$ us2,
                sys.secobj$ secobj
        WHERE   pi_obj.obj# = secobj.obj# AND       /* has secondary objects */
                c_obj.obj# = secobj.secobj# AND /*object is secondary object */
                c_obj.owner# = us2.user#  AND /* secondary obj is same owner */
                c_obj.type# = 2 AND             /* Secondary Object is TABLE */
                BITAND(c_obj.flags, 128) != 128 AND
                (UID = 0 OR (UID = pi_obj.owner# AND UID = us2.user#) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'));

CREATE OR REPLACE FORCE VIEW "EXU9EIP"("OBJID","BOBJID","OWNERID","PNAME","PARTNO","PARAMETERS") AS 
SELECT  o$.obj#, ip$.bo#, o$.owner#, o$.subname, ip$.part#,
                idpp$.parameters
        FROM    sys.obj$ o$, sys.indpart$ ip$, sys.indpart_param$ idpp$
        WHERE   o$.type# = 20 AND                       /* Partitioned Index */
                ip$.obj# = o$.obj# AND
                idpp$.obj# = o$.obj# AND
                (UID IN (0, o$.owner#) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'));

CREATE OR REPLACE FORCE VIEW "EXU9FGA"("OBJOWN","OBJNAM","POLICY","POLTXT","POLCOL","POLOWN","POLPKG","POLFUN","ENABLED") AS 
SELECT  u.name, o.name, f.pname,
                replace(f.ptxt,'''',''''''),
                f.pcol, f.pfschma, f.ppname,
                f.pfname, f.enable_flag
        FROM    sys.user$ u, sys.obj$ o, sys.fga$ f
        WHERE   u.user# = o.owner# AND
                f.obj# = o.obj# AND
                (UID IN (o.owner#, 0) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'));

CREATE OR REPLACE FORCE VIEW "EXU9FIL"("FNAME","FSIZE","MAXEXTEND","INC","TSID","BITMAP") AS 
SELECT  v$.name, f$.blocks, f$.maxextend, f$.inc, f$.ts#, 0
        FROM    sys.file$ f$, sys.v$dbfile v$
        WHERE   f$.file# = v$.file# AND
                f$.spare1 IS NULL
      UNION ALL
        SELECT  /* ignore hint, perf problem - ordered use_nl(f$) use_nl(hc) */
                v$.name, DECODE(hc.ktfbhccval, 0, hc.ktfbhcsz, -1),
                DECODE(hc.ktfbhccval, 0, hc.ktfbhcmaxsz, NULL),
                DECODE(hc.ktfbhccval, 0, hc.ktfbhcinc, NULL), f$.ts#,
                ts$.bitmapped
        FROM    sys.v$dbfile v$, sys.file$ f$, sys.x$ktfbhc hc, sys.ts$ ts$
        WHERE   v$.file# = f$.file# AND
                f$.spare1 IS NOT NULL AND
                f$.file# = hc.ktfbhcafno AND
                hc.ktfbhctsn(+) = ts$.ts#
      UNION ALL
        SELECT                                       /*+ ordered use_nl(hc) +*/
                v$.fnnam, DECODE(hc.ktfthccval, 0, hc.ktfthcsz, -1),
                DECODE(hc.ktfthccval, 0, hc.ktfthcmaxsz, NULL),
                DECODE(hc.ktfthccval, 0, hc.ktfthcinc, NULL), ts$.ts#,
                ts$.bitmapped
        FROM    sys.x$kccfn v$, sys.x$ktfthc hc, sys.ts$ ts$
        WHERE   v$.fntyp = 7 AND
                v$.fnnam IS NOT NULL AND
                v$.fnfno = hc.ktfthctfno AND
                hc.ktfthctsn(+) = ts$.ts#;

CREATE OR REPLACE FORCE VIEW "EXU9GSAS"("VALUE") AS 
SELECT  value
        FROM    sys.v$parameter
        WHERE   name = 'sort_area_size';

CREATE OR REPLACE FORCE VIEW "EXU9IND"("IOBJID","IDOBJID","INAME","IOWNER","IOWNERID","ISPACE","ITSNO","IFILENO","IBLOCKNO","BTNAME","BTOBJID","BTOWNER","BTOWNERID","BTPROPERTY","BTCLUSTERFLAG","PROPERTY","CLUSTER$","PCTFREE$","INITRANS","MAXTRANS","BLEVEL","BITMAP","DEFLOG","TSDEFLOG","DEGREE","INSTANCES","TYPE","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","PRECCNT","IFLAGS","SYSGENCONST") AS 
SELECT  "IOBJID","IDOBJID","INAME","IOWNER","IOWNERID","ISPACE","ITSNO","IFILENO","IBLOCKNO","BTNAME","BTOBJID","BTOWNER","BTOWNERID","BTPROPERTY","BTCLUSTERFLAG","PROPERTY","CLUSTER$","PCTFREE$","INITRANS","MAXTRANS","BLEVEL","BITMAP","DEFLOG","TSDEFLOG","DEGREE","INSTANCES","TYPE","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","PRECCNT","IFLAGS","SYSGENCONST"
        FROM    sys.exu9ind_base
        WHERE   NOT EXISTS (
                    SELECT  *
                    FROM    sys.con$ c$, sys.cdef$ cd$
                    WHERE   c$.name = iname AND   /* same name as constraint */
                            c$.owner# = iownerid AND
                            c$.con# = cd$.con# AND
                            NVL(cd$.enabled, 0) = iobjid AND  /* cons enable */
                            (cd$.intcols = 1 AND           /* single column */
                             EXISTS (
                                SELECT  *
                                FROM    sys.ccol$ cc$, sys.col$ co$
                                WHERE   cc$.con# = c$.con# AND
                                        co$.obj# = cc$.obj# AND
                                        co$.intcol# = cc$.intcol# AND
                                        BITAND(co$.property, 2) = 2)));

CREATE OR REPLACE FORCE VIEW "EXU9INDC"("IOBJID","IDOBJID","INAME","IOWNER","IOWNERID","ISPACE","ITSNO","IFILENO","IBLOCKNO","BTNAME","BTOBJID","BTOWNER","BTOWNERID","BTPROPERTY","BTCLUSTERFLAG","PROPERTY","CLUSTER$","PCTFREE$","INITRANS","MAXTRANS","BLEVEL","BITMAP","DEFLOG","TSDEFLOG","DEGREE","INSTANCES","TYPE","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","PRECCNT","IFLAGS","SYSGENCONST") AS 
SELECT  "IOBJID","IDOBJID","INAME","IOWNER","IOWNERID","ISPACE","ITSNO","IFILENO","IBLOCKNO","BTNAME","BTOBJID","BTOWNER","BTOWNERID","BTPROPERTY","BTCLUSTERFLAG","PROPERTY","CLUSTER$","PCTFREE$","INITRANS","MAXTRANS","BLEVEL","BITMAP","DEFLOG","TSDEFLOG","DEGREE","INSTANCES","TYPE","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","PRECCNT","IFLAGS","SYSGENCONST"
        FROM    sys.exu9ind
        WHERE   sysgenconst = 0 AND                /* not sys gen constraint */
                (bitmap = 1 OR                             /* select bitmap, */
                 BITAND(property, 16) = 16 OR                 /* functional, */
                 type = 9) AND                         /* and domain indexes */
                (iownerid, btname) IN ((
                    SELECT  ownerid, name
                    FROM    sys.exu9tabc)
                  UNION (
                    SELECT  r.ownerid, r.tname
                    FROM    sys.exu81tabc cc, sys.exu8ref r
                    WHERE   r.robjid = cc.objid))   /* table included in cum */;

CREATE OR REPLACE FORCE VIEW "EXU9INDI"("IOBJID","IDOBJID","INAME","IOWNER","IOWNERID","ISPACE","ITSNO","IFILENO","IBLOCKNO","BTNAME","BTOBJID","BTOWNER","BTOWNERID","BTPROPERTY","BTCLUSTERFLAG","PROPERTY","CLUSTER$","PCTFREE$","INITRANS","MAXTRANS","BLEVEL","BITMAP","DEFLOG","TSDEFLOG","DEGREE","INSTANCES","TYPE","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","PRECCNT","IFLAGS","SYSGENCONST") AS 
SELECT  "IOBJID","IDOBJID","INAME","IOWNER","IOWNERID","ISPACE","ITSNO","IFILENO","IBLOCKNO","BTNAME","BTOBJID","BTOWNER","BTOWNERID","BTPROPERTY","BTCLUSTERFLAG","PROPERTY","CLUSTER$","PCTFREE$","INITRANS","MAXTRANS","BLEVEL","BITMAP","DEFLOG","TSDEFLOG","DEGREE","INSTANCES","TYPE","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","PRECCNT","IFLAGS","SYSGENCONST"
        FROM    sys.exu9ind
        WHERE   sysgenconst = 0 AND                /* not sys gen constraint */
                (bitmap = 1 OR                             /* select bitmap, */
                 BITAND(property, 16) = 16 OR                 /* functional, */
                 type = 9) AND                         /* and domain indexes */
                (iownerid, btname) IN ((
                    SELECT  ownerid, name
                    FROM    sys.exu9tabi)
                  UNION (
                    SELECT  r.ownerid, r.tname
                    FROM    sys.exu9tabi ii, sys.exu8ref r
                    WHERE   r.robjid = ii.objid))   /* table included in inc */;

CREATE OR REPLACE FORCE VIEW "EXU9INDIC"("IOBJID","IDOBJID","INAME","IOWNER","IOWNERID","ISPACE","ITSNO","IFILENO","IBLOCKNO","BTNAME","BTOBJID","BTOWNER","BTOWNERID","BTPROPERTY","BTCLUSTERFLAG","PROPERTY","CLUSTER$","PCTFREE$","INITRANS","MAXTRANS","BLEVEL","BITMAP","DEFLOG","TSDEFLOG","DEGREE","INSTANCES","TYPE","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","PRECCNT","IFLAGS","SYSGENCONST") AS 
SELECT  "IOBJID","IDOBJID","INAME","IOWNER","IOWNERID","ISPACE","ITSNO","IFILENO","IBLOCKNO","BTNAME","BTOBJID","BTOWNER","BTOWNERID","BTPROPERTY","BTCLUSTERFLAG","PROPERTY","CLUSTER$","PCTFREE$","INITRANS","MAXTRANS","BLEVEL","BITMAP","DEFLOG","TSDEFLOG","DEGREE","INSTANCES","TYPE","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","PRECCNT","IFLAGS","SYSGENCONST"
        FROM    sys.exu9ind
        WHERE   sysgenconst = 0 AND               /* not sys gen constraints */
                (bitmap = 1 OR                             /* select bitmap, */
                 BITAND(property, 16) = 16 OR                 /* functional, */
                 type = 9) AND                         /* and domain indexes */
                (iownerid, btname) IN ((
                    SELECT  i.owner#, i.name
                    FROM    sys.incexp i, sys.incvid v
                    WHERE   i.expid > v.expid AND
                            i.type# = 2)
                  UNION (
                    SELECT  r.ownerid, r.tname
                    FROM    sys.incexp ii, sys.incvid vv, sys.exu8ref r
                    WHERE              /*refs a table included in the export */
                            r.rtname = ii.name AND
                            r.rownerid = ii.owner# AND
                            ii.expid > vv.expid AND
                            ii.type# = 2));

CREATE OR REPLACE FORCE VIEW "EXU9IND_BASE"("IOBJID","IDOBJID","INAME","IOWNER","IOWNERID","ISPACE","ITSNO","IFILENO","IBLOCKNO","BTNAME","BTOBJID","BTOWNER","BTOWNERID","BTPROPERTY","BTCLUSTERFLAG","PROPERTY","CLUSTER$","PCTFREE$","INITRANS","MAXTRANS","BLEVEL","BITMAP","DEFLOG","TSDEFLOG","DEGREE","INSTANCES","TYPE","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","PRECCNT","IFLAGS","SYSGENCONST") AS 
SELECT  "IOBJID","IDOBJID","INAME","IOWNER","IOWNERID","ISPACE","ITSNO","IFILENO","IBLOCKNO","BTNAME","BTOBJID","BTOWNER","BTOWNERID","BTPROPERTY","BTCLUSTERFLAG","PROPERTY","CLUSTER$","PCTFREE$","INITRANS","MAXTRANS","BLEVEL","BITMAP","DEFLOG","TSDEFLOG","DEGREE","INSTANCES","TYPE","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","PRECCNT","IFLAGS","SYSGENCONST"
        FROM    sys.exu10ind_base
        WHERE   type != 8 AND                        /* skip LOB index */
                type != 4                            /* skip IOT top */;

CREATE OR REPLACE FORCE VIEW "EXU9INHCOLCONS"("TOBJID","INTCOLID","CNAME","TYPEFLAGS","SUBTYPEFLAGS","TYPEOWNERID","TYPEOWNER","TYPENAME") AS 
SELECT
        ct$.obj#, ct$.intcol#,
        DECODE(BITAND(c$.property,1), 0, '"'||c$.name||'"', 1, ac$.name),
        ct$.flags, NVL(sc$.flags,0),
        NVL(so$.owner#,0), NVL(su$.name,' '), NVL(so$.name,' ')
    FROM
        sys.coltype$ ct$, sys.col$ c$, sys.attrcol$ ac$, sys.subcoltype$ sc$,
        sys.obj$ so$, sys.user$ su$, sys.obj$ to$
    WHERE
        bitand (ct$.flags, (512+1024+2048+4096)) != 0 AND
        ct$.obj# = c$.obj# AND
        ct$.intcol# = c$.intcol# AND
        ct$.obj# = ac$.obj# (+) AND
        ct$.intcol# = ac$.intcol# (+) AND
        ct$.obj# = sc$.obj# (+) AND
        ct$.intcol# = sc$.intcol# (+) AND
        bitand(NVL(sc$.flags,1),1+2) != 0 AND
        sc$.toid = so$.oid$ (+) AND
        so$.owner# = su$.user# (+) AND
        ct$.obj# = to$.obj# AND
        (UID = 0 OR (UID = to$.owner#) OR
         EXISTS(SELECT * FROM session_roles WHERE role='SELECT_CATALOG_ROLE'));

CREATE OR REPLACE FORCE VIEW "EXU9IXCP"("OBJID","DOBJID","BOBJID","OWNERID","COMPNAME","PARTNO","HIBOUNDLEN","HIBOUNDVAL","PROWCNT","PBLKCNT","PAVGRLEN","TSNAME","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","INIEXTS","EXTSIZE","MINEXTS","MAXEXTS","EXTPCT","FLISTS","FREEGRP","PCACHE","DEFLOG","TSDEFLOG","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","BLOCKSIZE","HSCOMPRESS") AS 
SELECT  o.obj#, o.dataobj#, icp.bo#, o.owner#, o.subname, icp.part#,
                icp.hiboundlen, icp.hiboundval, NVL(icp.rowcnt, -1), -1, -1,
                ts.name, MOD(icp.defpctfree, 100), 0, icp.definitrans,
                icp.defmaxtrans, NVL(icp.definiexts, 0),
                NVL(icp.defextsize, 0), NVL(icp.defminexts, 0),
                NVL(icp.defmaxexts, 0), NVL(icp.defextpct, -1),
                NVL(icp.deflists, 0), NVL(icp.defgroups, 0),
                DECODE(icp.defbufpool, 1, 'KEEP', 2, 'RECYCLE', NULL),
                icp.deflogging, ts.dflogging, NVL(icp.blevel, -1),
                NVL(icp.leafcnt, -1), NVL(icp.distkey, -1),
                NVL(icp.lblkkey, -1), NVL(icp.dblkkey, -1),
                NVL(icp.clufac, -1),
                NVL(ts.blocksize, (
                    SELECT  t$.blocksize
                    FROM    sys.ts$ t$
                    WHERE   t$.ts# = (NVL((
                                SELECT  i$.ts#
                                FROM    sys.ind$ i$
                                WHERE   i$.obj# = icp.bo# AND
                                        i$.type# != 8 AND
                                        i$.type# != 4 AND
                                        BITAND(i$.flags, 4096) = 0),
                                           0)))),
                0
        FROM    sys.obj$ o, sys.indcompart$ icp, sys.ts$ ts
        WHERE   icp.obj# = o.obj# AND
                icp.defts# = ts.ts# (+);

CREATE OR REPLACE FORCE VIEW "EXU9IXCPU"("OBJID","DOBJID","BOBJID","OWNERID","COMPNAME","PARTNO","HIBOUNDLEN","HIBOUNDVAL","PROWCNT","PBLKCNT","PAVGRLEN","TSNAME","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","INIEXTS","EXTSIZE","MINEXTS","MAXEXTS","EXTPCT","FLISTS","FREEGRP","PCACHE","DEFLOG","TSDEFLOG","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","BLOCKSIZE","HSCOMPRESS") AS 
SELECT  "OBJID","DOBJID","BOBJID","OWNERID","COMPNAME","PARTNO","HIBOUNDLEN","HIBOUNDVAL","PROWCNT","PBLKCNT","PAVGRLEN","TSNAME","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","INIEXTS","EXTSIZE","MINEXTS","MAXEXTS","EXTPCT","FLISTS","FREEGRP","PCACHE","DEFLOG","TSDEFLOG","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","BLOCKSIZE","HSCOMPRESS"
        FROM    sys.exu9ixcp
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU9LBCP"("POBJID","OWNERID","CNAME","LOBCPNAME","TSNAME","SGFLAGS","CHUNK","VERSIONP","FLAGS","PROPERTY","INIEXTS","EXTSIZE","MINEXTS","MAXEXTS","EXTPCT","FLISTS","FGROUPS","PCACHE","COLTYPE","COLTYPFLG","BLOCKSIZE") AS 
SELECT  po.obj#, o.owner#,
                DECODE(bitand(c.property,1), 0, '"'||c.name||'"', 1, ac.name),
                lpo.subname, ts.name,
                lpo.flags, lcp.defchunk, lcp.defpctver$, lcp.defflags,
                lcp.defpro, NVL(lcp.definiexts, 0), NVL(lcp.defextsize, 0),
                NVL(lcp.defminexts, 0), NVL(lcp.defmaxexts, 0),
                NVL(lcp.defextpct, -1), NVL(lcp.deflists, 0),
                NVL(lcp.defgroups, 0),
                DECODE(lcp.defbufpool, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE',
                       NULL),
                NVL(c.type#, 0), NVL(ct.flags, 0),
                NVL(ts.blocksize, (/*should be avail. thru tabcompart if null*/
                    SELECT  t$.blocksize
                    FROM    sys.ts$ t$
                    WHERE   t$.ts# = (NVL((
                                SELECT  tcp$.defts#
                                FROM    sys.tabcompart$ tcp$
                                WHERE   tcp$.obj# = lcp.tabpartobj#),
                                           0))))
        FROM    sys.obj$ o, sys.lob$ l, sys.col$ c, sys.attrcol$ ac,
                sys.obj$ lo, sys.obj$ lpo,
                sys.lobcomppart$ lcp, sys.obj$ po, sys.ts$ ts,
                sys.partobj$ pobj, sys.coltype$ ct
        WHERE   pobj.obj# = o.obj# AND
                MOD(pobj.spare2, 256) != 0 AND
                o.obj# = c.obj# AND
                c.obj# = l.obj# AND
                l.obj# = ac.obj#(+) AND
                l.intcol# = ac.intcol#(+) AND
                l.intcol# = c.intcol# AND
                l.lobj# = lo.obj# AND
                l.lobj# = lcp.lobj# AND
                lcp.tabpartobj# = po.obj# AND
                lcp.partobj# = lpo.obj# AND
                lcp.defts# = ts.ts# (+) AND
                c.obj# = ct.obj# (+) AND
                c.intcol# = ct.intcol# (+) AND
                BITAND(c.property, 32768) != 32768 AND  /* not unused column */
                BITAND(c.property, 256) != 256          /* not sys generated */;

CREATE OR REPLACE FORCE VIEW "EXU9LBCPU"("POBJID","OWNERID","CNAME","LOBCPNAME","TSNAME","SGFLAGS","CHUNK","VERSIONP","FLAGS","PROPERTY","INIEXTS","EXTSIZE","MINEXTS","MAXEXTS","EXTPCT","FLISTS","FGROUPS","PCACHE","COLTYPE","COLTYPFLG","BLOCKSIZE") AS 
SELECT  "POBJID","OWNERID","CNAME","LOBCPNAME","TSNAME","SGFLAGS","CHUNK","VERSIONP","FLAGS","PROPERTY","INIEXTS","EXTSIZE","MINEXTS","MAXEXTS","EXTPCT","FLISTS","FGROUPS","PCACHE","COLTYPE","COLTYPFLG","BLOCKSIZE"
        FROM    sys.exu9lbcp
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU9LBP"("POBJID","TOBJID","OWNERID","CNAME","LOBPNAME","TSNAME","SGFLAGS","CHUNK","VERSIONP","FLAGS","PROPERTY","TSNO","FILENO","BLOCKNO","DOBJID","INAME","ISGFLAG","ITSNAME","ITSNO","IFILE","IBLOCK","IDOBJID","IINITRANS","IMAXTRANS","COLTYPE","COLTYPFLG","BLOCKSIZE") AS 
SELECT  /*+ NO_INDEX(i_obj1) +*/
                po.obj#, o.obj#, o.owner#,
                DECODE(bitand(c.property,1), 0, '"'||c.name||'"', 1, ac.name),
                lpo.subname,
                ts.name, lpo.flags, lf.chunk, lf.pctversion$, lf.fragflags,
                lf.fragpro, lf.ts#, lf.file#, lf.block#, lpo.dataobj#,
                lipo.name, lipo.flags, its.name, its.ts#, ip.file#, ip.block#,
                lipo.dataobj#, ip.initrans , ip.maxtrans, NVL(c.type#, 0),
                (select NVL(ct.flags, 0) from sys.coltype$ ct
                        where ct.obj# = c.obj# AND ct.intcol# = c.intcol#),
                ts.blocksize
        FROM    sys.indpart$ ip, sys.obj$ o, sys.col$ c,
                sys.attrcol$ ac, sys.obj$ lpo,
                sys.lob$ l, sys.partobj$ pobj, sys.ts$ ts, sys.obj$ lipo,
                sys.lobfrag$ lf, sys.obj$ po, sys.ts$ its
        WHERE   pobj.obj# = o.obj# AND
                MOD(pobj.spare2, 256) = 0 AND
                o.obj# = c.obj# AND
                c.obj# = l.obj# AND
                l.obj# = ac.obj#(+) AND
                l.intcol# = ac.intcol#(+) AND
                c.intcol# = l.intcol# AND
                l.lobj# = lf.parentobj# AND
                lf.fragobj# = lpo.obj# AND
                lf.tabfragobj# = po.obj# AND
                lf.indfragobj# = lipo.obj# AND
                lf.indfragobj# = ip.obj# AND
                ip.ts# = its.ts# AND
                lf.ts# = ts.ts# AND
                BITAND(c.property, 32768) != 32768 AND  /* not unused column */
                BITAND(c.property, 256) != 256          /* not sys generated */
      UNION ALL                                                      /* PIOT */
        SELECT  /*+ NO_INDEX(i_obj1) +*/
                ipt.obj#, o.obj#, o.owner#,
                DECODE(bitand(c.property,1), 0, '"'||c.name||'"', 1, ac.name),
                lpo.subname,
                ts.name, lpo.flags, lf.chunk, lf.pctversion$, lf.fragflags,
                lf.fragpro, lf.ts#, lf.file#, lf.block#, lpo.dataobj#,
                lipo.name, lipo.flags, its.name, its.ts#, ip.file#, ip.block#,
                lipo.dataobj#, ip.initrans , ip.maxtrans, NVL(c.type#, 0),
                (select NVL(ct.flags, 0) from sys.coltype$ ct
                        where ct.obj# = c.obj# AND ct.intcol# = c.intcol#),
                ts.blocksize
        FROM    sys.indpart$ ipt, sys.indpart$ ip, sys.ind$ i, sys.tabpart$ tp,
                sys.obj$ o, sys.col$ c, sys.attrcol$ ac,
                sys.obj$ lpo, sys.lob$ l,
                sys.partobj$ pobj, sys.ts$ ts, sys.obj$ lipo, sys.lobfrag$ lf,
                sys.ts$ its
        WHERE   i.obj# = ipt.bo# AND
                tp.bo# = i.bo# AND
                tp.part# = ipt.part# AND
                pobj.obj# = o.obj# AND
                MOD(pobj.spare2, 256) = 0 AND
                o.obj# = c.obj# AND
                c.obj# = l.obj# AND
                l.obj# = ac.obj#(+) AND
                l.intcol# = ac.intcol#(+) AND
                c.intcol# = l.intcol# AND
                l.lobj# = lf.parentobj# AND
                lf.fragobj# = lpo.obj# AND
                lf.tabfragobj# = tp.obj#  AND
                lf.indfragobj# = lipo.obj# AND
                lf.indfragobj# = ip.obj# AND
                ip.ts# = its.ts# AND
                lf.ts# = ts.ts# AND
                BITAND(c.property, 32768) != 32768 AND  /* not unused column */
                BITAND(c.property, 256) != 256          /* not sys generated */;

CREATE OR REPLACE FORCE VIEW "EXU9LBPU"("POBJID","TOBJID","OWNERID","CNAME","LOBPNAME","TSNAME","SGFLAGS","CHUNK","VERSIONP","FLAGS","PROPERTY","TSNO","FILENO","BLOCKNO","DOBJID","INAME","ISGFLAG","ITSNAME","ITSNO","IFILE","IBLOCK","IDOBJID","IINITRANS","IMAXTRANS","COLTYPE","COLTYPFLG","BLOCKSIZE") AS 
SELECT  "POBJID","TOBJID","OWNERID","CNAME","LOBPNAME","TSNAME","SGFLAGS","CHUNK","VERSIONP","FLAGS","PROPERTY","TSNO","FILENO","BLOCKNO","DOBJID","INAME","ISGFLAG","ITSNAME","ITSNO","IFILE","IBLOCK","IDOBJID","IINITRANS","IMAXTRANS","COLTYPE","COLTYPFLG","BLOCKSIZE"
        FROM    sys.exu9lbp
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU9LNK"("OWNER","OWNERID","NAME","USER$","PASSWD","HOST","PUBLIC$","AUTH_USER","AUTH_PASSWD","FLAG") AS 
SELECT  DECODE(l$.owner#, 1, 'SYSTEM', u$.name), l$.owner#, l$.name,
                l$.userid, l$.password, l$.host, DECODE(l$.owner#, 1, 1, 0),
                l$.authusr, l$.authpwd, l$.flag
        FROM    sys.user$ u$, sys.link$ l$
        WHERE   u$.user# = l$.owner#;

CREATE OR REPLACE FORCE VIEW "EXU9LNKU"("OWNER","OWNERID","NAME","USER$","PASSWD","HOST","PUBLIC$","AUTH_USER","AUTH_PASSWD","FLAG") AS 
SELECT  "OWNER","OWNERID","NAME","USER$","PASSWD","HOST","PUBLIC$","AUTH_USER","AUTH_PASSWD","FLAG"
        FROM    sys.exu9lnk
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU9LOB"("TOBJID","OWNERID","CNAME","SNAME","SSGFLAG","STSNAME","STSNO","SFILE","SBLOCK","SDOBJID","SCHUNKING","SVPOOL","SFLAGS","INAME","ISGFLAG","ITSNAME","ITSNO","IFILE","IBLOCK","IDOBJID","IINITRANS","IMAXTRANS","SPROPERTY","COLTYPE","COLTYPFLG","BLOCKSIZE","INTCOLID","OPAQUETYPE") AS 
SELECT  l$.obj#, so$.owner#,
                DECODE(BITAND(c$.property, 1), 0, '"'||c$.name||'"', 1,
                       ac$.name),
                so$.name, so$.flags, sts$.name, sts$.ts#, l$.file#, l$.block#,
                so$.dataobj#, l$.chunk, l$.pctversion$, l$.flags, io$.name,
                io$.flags, its$.name, its$.ts#, i$.file#, i$.block#,
                io$.dataobj#, i$.initrans, i$.maxtrans, l$.property,
                NVL(c$.type#, 0), NVL(ct$.flags, 0), sts$.blocksize,
                c$.intcol#,
                NVL((SELECT opq.type
                     FROM   sys.opqtype$ opq
                     WHERE  c$.type# = 58 AND
                            c$.obj# = opq.obj# AND
                            c$.intcol# = opq.intcol#), -1)
        FROM    sys.lob$ l$, sys.obj$ so$, sys.col$ c$, sys.attrcol$ ac$,
                sys.seg$ ss$, sys.ts$ sts$, sys.ind$ i$, sys.obj$ io$,
                sys.ts$ its$, sys.coltype$ ct$
        WHERE   l$.lobj# = so$.obj# AND
                l$.obj# = c$.obj# AND
                l$.intcol# =
                     NVL((SELECT opq.lobcol
                          FROM   sys.opqtype$ opq
                          WHERE  c$.type# = 58 AND                 /* opaque */
                                 c$.obj# = opq.obj# AND
                                 c$.intcol# = opq.intcol# AND
                                 opq.type = 1 AND                /* XMLType */
                                 BITAND(opq.flags, 4) = 4  /* stored as lob */
                         ), c$.intcol#) AND
                c$.obj# = ac$.obj#(+) AND
                c$.intcol# = ac$.intcol#(+) AND
                l$.file# = ss$.file# AND
                l$.block# = ss$.block# AND
                ss$.ts# = sts$.ts# AND
                l$.ind# = i$.obj# AND
                l$.ind# = io$.obj# AND
                i$.ts# = its$.ts# AND
                sts$.ts# = its$.ts# AND
                c$.obj# = ct$.obj# (+) AND
                c$.intcol# = ct$.intcol# (+) AND
                BITAND(c$.property, 32768) != 32768 AND /* not unused column */
                BITAND(c$.property, 256) != 256         /* not sys generated */;

CREATE OR REPLACE FORCE VIEW "EXU9LOBU"("TOBJID","OWNERID","CNAME","SNAME","SSGFLAG","STSNAME","STSNO","SFILE","SBLOCK","SDOBJID","SCHUNKING","SVPOOL","SFLAGS","INAME","ISGFLAG","ITSNAME","ITSNO","IFILE","IBLOCK","IDOBJID","IINITRANS","IMAXTRANS","SPROPERTY","COLTYPE","COLTYPFLG","BLOCKSIZE","INTCOLID","OPAQUETYPE") AS 
SELECT  "TOBJID","OWNERID","CNAME","SNAME","SSGFLAG","STSNAME","STSNO","SFILE","SBLOCK","SDOBJID","SCHUNKING","SVPOOL","SFLAGS","INAME","ISGFLAG","ITSNAME","ITSNO","IFILE","IBLOCK","IDOBJID","IINITRANS","IMAXTRANS","SPROPERTY","COLTYPE","COLTYPFLG","BLOCKSIZE","INTCOLID","OPAQUETYPE"
        FROM    sys.exu9lob
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU9LTTS"("DOBJID","NAME","OWNERID","TABNO","CLUSTERFLAG","TSNAME") AS 
SELECT  0, o$.name, o$.owner#, 0, NVL(t$.bobj#, 0), ts$.name
        FROM    sys.tab$ t$, sys.exu81obj o$, sys.ts$ ts$
        WHERE   t$.obj# = o$.obj# AND
                t$.ts# = ts$.ts# AND
                o$.owner# != 0 AND
                BITAND(t$.property, 32+64+512+8192) = 0 /* Not nested or IOT */
      UNION ALL                                         /* Simple Partitions */
        SELECT  0, o$.name, o$.owner#, 0, NVL(t$.bobj#, 0), ts$.name
        FROM    sys.tab$ t$, sys.obj$ o$, sys.tabpart$ tp$, sys.ts$ ts$
        WHERE   t$.obj# = o$.obj# AND
                t$.obj# = tp$.bo# AND
                tp$.ts# = ts$.ts# AND
                o$.owner# != 0 AND
                BITAND(t$.property, 32+64+512+8192) = 32
      UNION ALL                                      /* Composite partitions */
        SELECT  0, o$.name, o$.owner#, 0, NVL(t$.bobj#, 0), ts$.name
        FROM    sys.tab$ t$, sys.obj$ o$, sys.tabcompart$ tcp$,
                sys.tabsubpart$ tsp$, sys.ts$ ts$
        WHERE   t$.obj# = o$.obj# AND
                t$.obj# = tcp$.bo# AND
                tcp$.obj# = tsp$.pobj# AND
                tsp$.ts# = ts$.ts# AND
                o$.owner# != 0 AND
                BITAND(t$.property, 32+64+512+8192) = 32
      UNION ALL                                        /* Unpartitioned IOTs */
        SELECT  0, o$.name, o$.owner#, 0, NVL(t$.bobj#, 0), ts$.name
        FROM    sys.tab$ t$, sys.obj$ o$, sys.ts$ ts$, sys.ind$ i$
        WHERE   t$.obj# = o$.obj# AND
                t$.pctused$ = i$.obj# AND /* For IOTs, pctused has index obj#*/
                i$.ts# = ts$.ts# AND
                o$.owner# != 0 AND
                BITAND(t$.property, 32+64+512+8192) = 64
      UNION ALL                                      /* 1st Partition of IOT */
        SELECT  0, o$.name, o$.owner#, 0, NVL(t$.bobj#, 0), ts$.name
        FROM    sys.tab$ t$, sys.obj$ o$, sys.indpart$ ip$, sys.ts$ ts$
        WHERE   t$.obj# = o$.obj# AND
                t$.pctused$ = ip$.bo# AND
                ip$.ts# = ts$.ts# AND
                o$.owner# != 0 AND
                BITAND(t$.property, 32+64+512+8192) = 32+64;

CREATE OR REPLACE FORCE VIEW "EXU9MVL"("CTOBJ#","LOG_OWNER","LOG_NAME","LOG_OWNERID","CREATED_TIME","FILE_VERSION","USING_ROWID_FLAG","USING_PRIMARYKEY_FLAG","USING_OID_FLAG","USING_SEQUENCE_FLAG","CHANGE_SET_NAME","SOURCE_SCHEMA_NAME","SOURCE_TABLE_NAME","CREATED_SCN","MVL_FLAG","CAPTURED_VALUES","MVL_TEMP_LOG","MVL_V7TRIGGER","LAST_ALTERED","LOWEST_SCN","MVL_OLDEST_RID","MVL_OLDEST_PK","MVL_OLDEST_OID","MVL_OLDEST_NEW","MVL_OLDEST_RID_TIME","MVL_OLDEST_PK_TIME","MVL_OLDEST_OID_TIME","MVL_OLDEST_NEW_TIME","MVL_BACKCOMPAT_VIEW","MVL_PHYSMVL","HIGHEST_SCN","HIGHEST_TIMESTAMP") AS 
SELECT  ct.obj#, ct.change_table_schema, ct.change_table_name, u.user#,
                ct.created, 5, DECODE(BITAND(ct.mvl_flag, 1), 1, 1, 0),
                DECODE(BITAND(ct.mvl_flag, 2), 2, 1, 0),
                DECODE(BITAND(ct.mvl_flag, 512), 512, 1, 0),
                DECODE(BITAND(ct.mvl_flag, 1024), 1024, 1, 0),
                ct.change_set_name, ct.source_schema_name,
                ct.source_table_name, ct.created_scn, ct.mvl_flag,
                ct.captured_values, ct.mvl_temp_log, ct.mvl_v7trigger,
                ct.last_altered, ct.lowest_scn, ct.mvl_oldest_rid,
                ct.mvl_oldest_pk, ct.mvl_oldest_oid, ct.mvl_oldest_new,
                ct.mvl_oldest_rid_time, ct.mvl_oldest_pk_time,
                ct.mvl_oldest_oid_time, ct.mvl_oldest_new_time,
                ct.mvl_backcompat_view, ct.mvl_physmvl, ct.highest_scn,
                ct.highest_timestamp
        FROM    sys.cdc_change_tables$ ct, sys.user$ u
        WHERE   ct.change_table_schema = u.name AND
                ct.mvl_flag IS NOT NULL AND
                BITAND(ct.mvl_flag, 128) = 128 AND
                (UID IN (0, u.user#) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'));

CREATE OR REPLACE FORCE VIEW "EXU9MVLCDCCC"("COLUMN_NAME","CREATED","CREATED_SCN","CHANGE_TABLE_OBJ#") AS 
SELECT  column_name, created, created_scn, change_table_obj#
        FROM    sys.cdc_change_columns$
        WHERE   change_table_obj# IN (
                    SELECT  obj#
                    FROM    sys.cdc_change_tables$ ct, sys.user$ u
                    WHERE   (UID = u.user# AND
                             ct.change_table_schema = u.name) OR
                            (UID = 0 AND
                             ct.change_table_schema = u.name) OR
                            EXISTS (
                                SELECT  role
                                FROM    sys.session_roles
                                WHERE   role = 'SELECT_CATALOG_ROLE'));

CREATE OR REPLACE FORCE VIEW "EXU9MVLCDCS"("SET_NAME","USERNAME","CREATED","STATUS","EARLIEST_SCN","LATEST_SCN","DESCRIPTION","LAST_PURGED","LAST_EXTENDED","MVL_INVALID","HANDLE") AS 
SELECT  s.set_name, s.username, s.created, s.status, s.earliest_scn,
                s.latest_scn, s.description, s.last_purged, s.last_extended,
                s.mvl_invalid, s.handle
        FROM    sys.cdc_subscribers$ s
        WHERE   s.handle IN (
                    SELECT  t.handle
                    FROM    sys.cdc_subscribed_tables$ t
                    WHERE   t.change_table_obj# IN (
                                SELECT  obj#
                                FROM    sys.cdc_change_tables$ ct, sys.user$ u
                                WHERE   (ct.change_table_schema = u.name AND
                                         u.user# = UID) OR
                                        UID = 0 OR
                                        EXISTS (
                                            SELECT  role
                                            FROM    sys.session_roles
                                            WHERE   role =
                                                    'SELECT_CATALOG_ROLE')));

CREATE OR REPLACE FORCE VIEW "EXU9MVLCDCSC"("COLUMN_NAME","HANDLE","CHANGE_TABLE_OBJ#") AS 
SELECT  column_name, handle, change_table_obj#
        FROM    sys.cdc_subscribed_columns$
        WHERE   handle IN (
                    SELECT  t.handle
                    FROM    sys.cdc_subscribed_tables$ t
                    WHERE   t.change_table_obj# IN (
                                SELECT  obj#
                                FROM    sys.cdc_change_tables$ ct, sys.user$ u
                                WHERE   (ct.change_table_schema = u.name AND
                                         u.user# = UID) OR
                                        UID = 0 OR
                                        EXISTS (
                                            SELECT  role
                                            FROM    sys.session_roles
                                            WHERE   role =
                                                    'SELECT_CATALOG_ROLE')));

CREATE OR REPLACE FORCE VIEW "EXU9MVLCDCST"("HANDLE","VIEW_NAME","VIEW_STATUS","MV_FLAG","MV_COLVEC","CHANGE_TABLE_OBJ#") AS 
SELECT  handle, view_name, view_status, mv_flag, mv_colvec,
                change_table_obj#
        FROM    sys.cdc_subscribed_tables$
        WHERE   handle IN (
                    SELECT  t.handle
                    FROM    sys.cdc_subscribed_tables$ t
                    WHERE   t.change_table_obj# IN (
                                SELECT  obj#
                                FROM    sys.cdc_change_tables$ ct, sys.user$ u
                                WHERE   (ct.change_table_schema = u.name AND
                                         u.user# = UID) OR
                                        UID = 0 OR
                                        EXISTS (
                                            SELECT  role
                                            FROM    sys.session_roles
                                            WHERE   role =
                                                    'SELECT_CATALOG_ROLE')));

CREATE OR REPLACE FORCE VIEW "EXU9MVLU"("CTOBJ#","LOG_OWNER","LOG_NAME","LOG_OWNERID","CREATED_TIME","FILE_VERSION","USING_ROWID_FLAG","USING_PRIMARYKEY_FLAG","USING_OID_FLAG","USING_SEQUENCE_FLAG","CHANGE_SET_NAME","SOURCE_SCHEMA_NAME","SOURCE_TABLE_NAME","CREATED_SCN","MVL_FLAG","CAPTURED_VALUES","MVL_TEMP_LOG","MVL_V7TRIGGER","LAST_ALTERED","LOWEST_SCN","MVL_OLDEST_RID","MVL_OLDEST_PK","MVL_OLDEST_OID","MVL_OLDEST_NEW","MVL_OLDEST_RID_TIME","MVL_OLDEST_PK_TIME","MVL_OLDEST_OID_TIME","MVL_OLDEST_NEW_TIME","MVL_BACKCOMPAT_VIEW","MVL_PHYSMVL","HIGHEST_SCN","HIGHEST_TIMESTAMP") AS 
SELECT  "CTOBJ#","LOG_OWNER","LOG_NAME","LOG_OWNERID","CREATED_TIME","FILE_VERSION","USING_ROWID_FLAG","USING_PRIMARYKEY_FLAG","USING_OID_FLAG","USING_SEQUENCE_FLAG","CHANGE_SET_NAME","SOURCE_SCHEMA_NAME","SOURCE_TABLE_NAME","CREATED_SCN","MVL_FLAG","CAPTURED_VALUES","MVL_TEMP_LOG","MVL_V7TRIGGER","LAST_ALTERED","LOWEST_SCN","MVL_OLDEST_RID","MVL_OLDEST_PK","MVL_OLDEST_OID","MVL_OLDEST_NEW","MVL_OLDEST_RID_TIME","MVL_OLDEST_PK_TIME","MVL_OLDEST_OID_TIME","MVL_OLDEST_NEW_TIME","MVL_BACKCOMPAT_VIEW","MVL_PHYSMVL","HIGHEST_SCN","HIGHEST_TIMESTAMP"
        FROM    sys.exu9mvl
        WHERE   log_ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU9NLS"("NAME","VALUE") AS 
SELECT  name, value$
        FROM    sys.props$
        WHERE   name IN ('NLS_CHARACTERSET',
                         'NLS_NCHAR_CHARACTERSET',
                         'NLS_LENGTH_SEMANTICS');

CREATE OR REPLACE FORCE VIEW "EXU9NOS"("TOBJID","TOWNER") AS 
SELECT  to$.obj#, to$.owner#
        FROM    sys.obj$ to$, sys.obj$ io$, sys.ind$ ind$
        WHERE   ind$.bo# = to$.obj# AND
                ind$.obj# = io$.obj# AND
                ind$.blevel != -1 AND
                ind$.type# = 8 AND                              /* LOB index */
                (UID IN (to$.owner#, 0) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'))
      UNION ALL                            /* Table cannot have associations */
        SELECT  to$.obj#, to$.owner#
        FROM    sys.obj$ to$, sys.association$ a$
        WHERE   to$.obj# = a$.obj# AND
                to$.type# = 2 AND                                   /* Table */
                (UID IN (to$.owner#, 0) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'))
      UNION ALL               /* Type used in table cannot have associations */
        SELECT  to$.obj#, to$.owner#
        FROM    sys.obj$ to$, sys.obj$ tt$, sys.coltype$ ct$,
                sys.association$ a$
        WHERE   to$.obj# = ct$.obj# AND
                ct$.toid = tt$.oid$ AND
                tt$.obj# = a$.obj# AND
                (UID IN (to$.owner#, 0) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'));

CREATE OR REPLACE FORCE VIEW "EXU9NTA"("CLIENT","PROXY","FLAGS","ROLE_CLAUSE","CRED_TYPE","CRED_VER","CRED_MINOR") AS 
SELECT  u$.name, up$.name, pd$.flags,
                DECODE(pd$.flags,
                       2, 'WITH NO ROLES',
                       4, 'WITH ROLE',
                       8, 'WITH ROLE ALL EXCEPT', ' '),
                DECODE(pd$.credential_type#,
                       1, 'AUTHENTICATED USING CERTIFICATE',
                       2, 'AUTHENTICATED USING DISTINGUISHED NAME',
                       3, 'AUTHENTICATED USING KERBEROS',
                       4, 'AUTHENTICATED USING PASSWORD', ' '),
                DECODE(pd$.credential_version#,
                       1, DECODE(pd$.credential_type#,
                                 1, 'TYPE ''X.509''',
                                 3, 'VERSION ''1.0''', ' '), ' '),
                DECODE(pd$.credential_minor#,
                       1, DECODE(pd$.credential_type#,
                                 1, 'VERSION ''3''', ' '), ' ')
        FROM    sys.user$ u$, sys.user$ up$, sys.proxy_data$ pd$
        WHERE   pd$.client# = u$.user# AND
                pd$.proxy# = up$.user#;

CREATE OR REPLACE FORCE VIEW "EXU9NTAROLE"("ROLEID","ROLE","CLIENT","PROXY") AS 
SELECT  prd$.role#, ur$.name, uc$.name, up$.name
        FROM    sys.user$ ur$, sys.proxy_role_data$ prd$,
                sys.user$ uc$, sys.user$ up$
        WHERE   prd$.role#   = ur$.user# AND
                prd$.client# = uc$.user# AND
                prd$.proxy#  = up$.user#;

CREATE OR REPLACE FORCE VIEW "EXU9OBJSWITCH"("OBJID","COMPFLGS","NLSLENSEM") AS 
SELECT  a.obj#, a.value, b.value
        FROM    sys.settings$ a, sys.settings$ b, sys.obj$ o
        WHERE   o.obj#  = a.obj# AND
                a.obj#  = b.obj# AND
                a.param = 'plsql_compiler_flags' AND
                b.param = 'nls_length_semantics' AND
                (UID IN (o.owner#, 0) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'));

CREATE OR REPLACE FORCE VIEW "EXU9OTNNULL"("TOBJID","NAME","CONNAME","DEFER") AS 
SELECT  tobjid, name, conname, defer
  FROM    sys.exu8col_temp
  WHERE   isnull = 1 AND
          BITAND(colprop, 32) != 32       /* Not hidden (exploded col/attrs) */;

CREATE OR REPLACE FORCE VIEW "EXU9PCT"("NAMESPACE","ATTRIBUTE","OBJOWN","OBJNAM") AS 
SELECT  c.ns, c.attr, u.name, o.name
        FROM    sys.rls_ctx$ c, sys.user$ u, sys.obj$ o
        WHERE   c.obj# = o.obj# AND
                u.user# = o.owner# AND
                (UID IN (o.owner#, 0) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'));

CREATE OR REPLACE FORCE VIEW "EXU9PDS"("OBJID","TYPE","OWNERID","PTYPE","SUBPTYPE","PFLAG","PCNT","PKCNT","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","INIEXTS","EXTSIZE","MINEXTS","MAXEXTS","EXTPCT","FLISTS","FREEGRP","TSNAME","DEFLOG","PCACHE","BLOCKSIZE","HSCOMPRESS","DEFSUBPCNT") AS 
SELECT  o$.obj#, o$.type#, o$.owner#, po$.parttype,
                MOD(po$.spare2, 256), NVL(po$.flags, 0), po$.partcnt,
                po$.partkeycols, MOD(po$.defpctfree, 100), po$.defpctused,
                po$.definitrans, po$.defmaxtrans, po$.deftiniexts,
                po$.defextsize, po$.defminexts, po$.defmaxexts, po$.defextpct,
                po$.deflists, po$.defgroups, ts$.name, po$.deflogging,
                DECODE(po$.spare1, 1, 'KEEP', 2, 'RECYCLE', NULL),
                NVL(ts$.blocksize, 2048),      /* non null for table/indexes */
                (po$.spare2/4294967296),  /* divide by ^x80000000 for byte 4 */
                MOD(TRUNC(po$.spare2/65536), 65536)
        FROM    sys.partobj$ po$, sys.obj$ o$, sys.ts$ ts$
        WHERE   po$.defts# = ts$.ts# (+) AND
                po$.obj# = o$.obj#;

CREATE OR REPLACE FORCE VIEW "EXU9PDSU"("OBJID","TYPE","OWNERID","PTYPE","SUBPTYPE","PFLAG","PCNT","PKCNT","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","INIEXTS","EXTSIZE","MINEXTS","MAXEXTS","EXTPCT","FLISTS","FREEGRP","TSNAME","DEFLOG","PCACHE","BLOCKSIZE","HSCOMPRESS","DEFSUBPCNT") AS 
SELECT  "OBJID","TYPE","OWNERID","PTYPE","SUBPTYPE","PFLAG","PCNT","PKCNT","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","INIEXTS","EXTSIZE","MINEXTS","MAXEXTS","EXTPCT","FLISTS","FREEGRP","TSNAME","DEFLOG","PCACHE","BLOCKSIZE","HSCOMPRESS","DEFSUBPCNT"
        FROM    sys.exu9pds
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU9PGP"("POLGRP","OBJOWN","OBJNAM") AS 
SELECT  g.gname, u.name, o.name
        FROM    sys.rls_grp$ g, sys.user$ u, sys.obj$ o
        WHERE   g.obj# = o.obj# AND
                u.user# = o.owner# AND
                (UID IN (o.owner#, 0) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'));

CREATE OR REPLACE FORCE VIEW "EXU9PLB"("TOBJID","OWNERID","CNAME","LOBNAME","TSNAME","SGFLAGS","PROPERTY","CHUNK","VERSIONP","FLAGS","INIEXTS","EXTSIZE","MINEXTS","MAXEXTS","EXTPCT","FLISTS","FREEGRP","PCACHE","COLTYPE","COLTYPFLG","BLOCKSIZE","INTCOLID","OPAQUETYPE") AS 
SELECT  o.obj#, o.owner#,
                DECODE(bitand(c.property,1), 0, '"'||c.name||'"', 1, ac.name),
                lo.name, ts.name, lo.flags,
                plob.defpro, plob.defchunk, plob.defpctver$, plob.defflags,
                NVL(plob.definiexts, 0), NVL(plob.defextsize, 0),
                NVL(plob.defminexts, 0), NVL(plob.defmaxexts, 0),
                NVL(plob.defextpct, -1), NVL(plob.deflists, 0),
                NVL(plob.defgroups, 0),
                DECODE(plob.defbufpool, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE',
                       NULL),
                NVL(c.type#, 0), NVL(ct.flags, 0),
                NVL(ts.blocksize, ( /* should be avail. thru partobj if null */
                    SELECT  t$.blocksize
                    FROM    sys.ts$ t$
                    WHERE   t$.ts# = (NVL((
                                SELECT  pob$.defts#
                                FROM    sys.partobj$ pob$
                                WHERE   pob$.obj# = plob.tabobj#),
                                           0)))),
                c.intcol#,
                NVL((SELECT opq.type
                     FROM   sys.opqtype$ opq
                     WHERE  c.type# = 58 AND
                            c.obj# = opq.obj# AND
                            c.intcol# = opq.intcol#), -1)
        FROM    sys.partlob$ plob, sys.obj$ o, sys.lob$ l, sys.col$ c,
                sys.attrcol$ ac, sys.coltype$ ct, sys.obj$ lo, sys.ts$ ts
        WHERE   o.obj# = c.obj# AND
                l.obj# = c.obj# AND
                l.intcol# =
                     NVL((SELECT opq.lobcol
                          FROM   sys.opqtype$ opq
                          WHERE  c.type# = 58 AND                  /* opaque */
                                 c.obj# = opq.obj# AND
                                 c.intcol# = opq.intcol# AND
                                 opq.type = 1 AND                 /* XMLType */
                                 BITAND(opq.flags, 4) = 4   /* stored as lob */
                         ), c.intcol#) AND
                l.obj# = ac.obj#(+) and
                l.intcol# = ac.intcol#(+) and
                l.lobj# = lo.obj# AND
                l.lobj# = plob.lobj#  AND
                plob.defts# = ts.ts# (+) AND
                c.obj# = ct.obj# (+) AND
                c.intcol# = ct.intcol# (+) AND
                BITAND(c.property, 32768) != 32768 AND  /* not unused column */
                BITAND(c.property, 256) != 256          /* not sys generated */;

CREATE OR REPLACE FORCE VIEW "EXU9PLBU"("TOBJID","OWNERID","CNAME","LOBNAME","TSNAME","SGFLAGS","PROPERTY","CHUNK","VERSIONP","FLAGS","INIEXTS","EXTSIZE","MINEXTS","MAXEXTS","EXTPCT","FLISTS","FREEGRP","PCACHE","COLTYPE","COLTYPFLG","BLOCKSIZE","INTCOLID","OPAQUETYPE") AS 
SELECT  "TOBJID","OWNERID","CNAME","LOBNAME","TSNAME","SGFLAGS","PROPERTY","CHUNK","VERSIONP","FLAGS","INIEXTS","EXTSIZE","MINEXTS","MAXEXTS","EXTPCT","FLISTS","FREEGRP","PCACHE","COLTYPE","COLTYPFLG","BLOCKSIZE","INTCOLID","OPAQUETYPE"
        FROM    sys.exu9plb
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU9PSTC"("OWNER","OWNERID","TNAME","TOBJID","CALLORDER","CALLARG","OBJTYPE","USRARG","PROPERTY") AS 
SELECT  "OWNER","OWNERID","TNAME","TOBJID","CALLORDER","CALLARG","OBJTYPE","USRARG","PROPERTY"
        FROM    sys.exu8pst
        WHERE   (ownerid, tname) IN (
                    SELECT  ownerid, name
                    FROM    sys.exu9tabc);

CREATE OR REPLACE FORCE VIEW "EXU9PSTI"("OWNER","OWNERID","TNAME","TOBJID","CALLORDER","CALLARG","OBJTYPE","USRARG","PROPERTY") AS 
SELECT  "OWNER","OWNERID","TNAME","TOBJID","CALLORDER","CALLARG","OBJTYPE","USRARG","PROPERTY"
        FROM    sys.exu8pst
        WHERE   (ownerid, tname) IN (
                    SELECT  ownerid, name
                    FROM    sys.exu9tabi);

CREATE OR REPLACE FORCE VIEW "EXU9PTS"("SYNNAM","SYNNAM2","SYNTAB","TABOWN","TABNODE","PUBLIC$","SYNOWN","SYNOWNID","TABOWNID","SYNOBJNO","SYNTIME") AS 
SELECT  o$.name, o$.name, s$.name, s$.owner, s$.node,
                DECODE(o$.owner#, 1, 1, 0), uo$.name, o$.owner#, us$.user#,
                s$.obj#, o$.ctime
        FROM    sys.exu81obj o$, sys.syn$ s$, sys.user$ us$, sys.user$ uo$
        WHERE   s$.obj# = o$.obj# AND
                o$.owner# = uo$.user# AND
                s$.owner = us$.name(+) AND
                NVL(s$.owner, 'SYS') NOT IN
                   ('ORDSYS', 'MDSYS', 'CTXSYS', 'ORDPLUGINS', 'LBACSYS',
                    'XDB', 'SI_INFORMTN_SCHEMA', 'DIP', 'DMSYS', 'DBSNMP') AND
                o$.owner# = 1 AND
                EXISTS (
                    SELECT obj#
                    FROM sys.obj$ e
                    WHERE e.name = s$.name AND
                          e.owner# = us$.user# AND
                          e.type# = 13 );

CREATE OR REPLACE FORCE VIEW "EXU9REFC"("OBJID","OWNER","OWNERID","TNAME","ROWNER","RTNAME","CNAME","CNO","RCNO","ACTION","ENABLED","DEFER","PROPERTY","ROBJID","ROWNERID","REFTYPE","REFCONSTR","TYPE") AS 
SELECT  "OBJID","OWNER","OWNERID","TNAME","ROWNER","RTNAME","CNAME","CNO","RCNO","ACTION","ENABLED","DEFER","PROPERTY","ROBJID","ROWNERID","REFTYPE","REFCONSTR","TYPE"
        FROM    sys.exu8ref
        WHERE   (ownerid, tname) IN (
                    SELECT  ownerid, name
                    FROM    sys.exu9tabc);

CREATE OR REPLACE FORCE VIEW "EXU9REFI"("OBJID","OWNER","OWNERID","TNAME","ROWNER","RTNAME","CNAME","CNO","RCNO","ACTION","ENABLED","DEFER","PROPERTY","ROBJID","ROWNERID","REFTYPE","REFCONSTR","TYPE") AS 
SELECT  "OBJID","OWNER","OWNERID","TNAME","ROWNER","RTNAME","CNAME","CNO","RCNO","ACTION","ENABLED","DEFER","PROPERTY","ROBJID","ROWNERID","REFTYPE","REFCONSTR","TYPE"
        FROM    sys.exu8ref
        WHERE   (ownerid, tname) IN (
                    SELECT  ownerid, name
                    FROM    sys.exu9tabi);

CREATE OR REPLACE FORCE VIEW "EXU9RLS"("OBJOWN","OBJNAM","POLGRP","POLICY","POLOWN","POLSCH","POLFUN","STMT","CHKOPT","ENABLED","SPOLICY") AS 
SELECT  u.name, o.name, r.gname, r.pname, r.pfschma, r.ppname,
                r.pfname,
                DECODE(BITAND(r.stmt_type, 1), 0, '', 'SELECT,') ||
                DECODE(BITAND(r.stmt_type, 2), 0, '', 'INSERT,') ||
                DECODE(BITAND(r.stmt_type, 4), 0, '', 'UPDATE,') ||
                DECODE(BITAND(r.stmt_type, 8), 0, '', 'DELETE,'),
                r.check_opt, r.enable_flag,
                DECODE(BITAND(r.stmt_type, 16), 0, 0, 1)
        FROM    sys.user$ u, sys.obj$ o, sys.rls$ r
        WHERE   u.user# = o.owner# AND
                r.obj# = o.obj# AND
                (UID IN (o.owner#, 0) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'));

CREATE OR REPLACE FORCE VIEW "EXU9SNAP"("OWNER","OWNERID","NAME","TABLE_NAME","MASTER_VIEW","MASTER_LINK","MTIME","CAN_USE_LOG","ERROR","TYPE","QUERY","FLAG","ROWID_SNAP","PRIMKEY_SNAP","UPDATE_SNAP","UPDATE_TRIG","UPDATE_LOG","MASTABS","MASVER","LOB_VECTOR","SNAPSHOT","SNAPID","INSTSITE","FLAVOR_ID","RSCN","OBJFLAG","FLAG2","STATUS","SNA_TYPE_OWNER","SNA_TYPE_NAME","PARENT_SOWNER","PARENT_VNAME","FILE_VER","SQL_VER","ALIAS_TXT","MVIEW_COMMENT") AS 
SELECT  s.sowner, u.user#, s.vname, s.tname, s.mview, s.mlink, s.mtime,
                DECODE(s.can_use_log, NULL, 'NO', 'YES'), NVL(s.error#, 0),
                DECODE(s.auto_fast, 'C', 'COMPLETE', 'F', 'FAST', '?', 'FORCE',
                       NULL, 'FORCE', 'N', 'NEVER', 'ERROR'),
                s.query_txt, NVL(s.flag, 0),
                /*
                ** have a flag for each snapshot types: rowid, primary key and
                ** updatable for compatibility purpose
                */
                DECODE(BITAND(NVL(s.flag, 0), 16), 16, 1, 0),
                DECODE(BITAND(NVL(s.flag, 0), 32), 32, 1, 0),
                DECODE(BITAND(NVL(s.flag, 0), 2), 2, 1, 0),
                s.ustrg, s.uslog, s.tables, NVL(s.master_version, 0),
                RAWTOHEX(s.lobmaskvec), s.snapshot, NVL(s.snapid, 0),
                s.instsite, NVL(s.flavor_id, 0),
                s.rscn, s.objflag, s.flag2, s.status, s.sna_type_owner,
                s.sna_type_name, s.parent_sowner, s.parent_vname,
                5, 0, s.alias_txt, c.comment$
        FROM    sys.snap$ s, sys.user$ u, sys.com$ c, sys.obj$ o, sys.tab$ t
        WHERE   u.name = s.sowner AND
                o.owner# = u.user# AND
                o.name = s.vname AND
                o.type# = 2 AND
                o.obj# = t.obj# AND
                (bitand(t.property, 67108864) = 67108864) AND
                o.obj# = c.obj#(+) AND c.col#(+) IS NULL;

CREATE OR REPLACE FORCE VIEW "EXU9SNAPC"("OWNER","OWNERID","NAME","TABLE_NAME","MASTER_VIEW","MASTER_LINK","MTIME","CAN_USE_LOG","ERROR","TYPE","QUERY","FLAG","ROWID_SNAP","PRIMKEY_SNAP","UPDATE_SNAP","UPDATE_TRIG","UPDATE_LOG","MASTABS","MASVER","LOB_VECTOR","SNAPSHOT","SNAPID","INSTSITE","FLAVOR_ID","RSCN","OBJFLAG","FLAG2","STATUS","SNA_TYPE_OWNER","SNA_TYPE_NAME","PARENT_SOWNER","PARENT_VNAME","FILE_VER","SQL_VER","ALIAS_TXT","MVIEW_COMMENT") AS 
SELECT  s."OWNER",s."OWNERID",s."NAME",s."TABLE_NAME",s."MASTER_VIEW",s."MASTER_LINK",s."MTIME",s."CAN_USE_LOG",s."ERROR",s."TYPE",s."QUERY",s."FLAG",s."ROWID_SNAP",s."PRIMKEY_SNAP",s."UPDATE_SNAP",s."UPDATE_TRIG",s."UPDATE_LOG",s."MASTABS",s."MASVER",s."LOB_VECTOR",s."SNAPSHOT",s."SNAPID",s."INSTSITE",s."FLAVOR_ID",s."RSCN",s."OBJFLAG",s."FLAG2",s."STATUS",s."SNA_TYPE_OWNER",s."SNA_TYPE_NAME",s."PARENT_SOWNER",s."PARENT_VNAME",s."FILE_VER",s."SQL_VER",s."ALIAS_TXT",s."MVIEW_COMMENT"
        FROM    sys.exu9snap s, sys.incexp i, sys.incvid v
        WHERE   s.name = i.name(+) AND
                s.ownerid = i.owner#(+) AND
                NVL(i.type#, 99) = 99 AND
                (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
                 NVL(i.expid, 9999) > v.expid);

CREATE OR REPLACE FORCE VIEW "EXU9SNAPI"("OWNER","OWNERID","NAME","TABLE_NAME","MASTER_VIEW","MASTER_LINK","MTIME","CAN_USE_LOG","ERROR","TYPE","QUERY","FLAG","ROWID_SNAP","PRIMKEY_SNAP","UPDATE_SNAP","UPDATE_TRIG","UPDATE_LOG","MASTABS","MASVER","LOB_VECTOR","SNAPSHOT","SNAPID","INSTSITE","FLAVOR_ID","RSCN","OBJFLAG","FLAG2","STATUS","SNA_TYPE_OWNER","SNA_TYPE_NAME","PARENT_SOWNER","PARENT_VNAME","FILE_VER","SQL_VER","ALIAS_TXT","MVIEW_COMMENT") AS 
SELECT  s."OWNER",s."OWNERID",s."NAME",s."TABLE_NAME",s."MASTER_VIEW",s."MASTER_LINK",s."MTIME",s."CAN_USE_LOG",s."ERROR",s."TYPE",s."QUERY",s."FLAG",s."ROWID_SNAP",s."PRIMKEY_SNAP",s."UPDATE_SNAP",s."UPDATE_TRIG",s."UPDATE_LOG",s."MASTABS",s."MASVER",s."LOB_VECTOR",s."SNAPSHOT",s."SNAPID",s."INSTSITE",s."FLAVOR_ID",s."RSCN",s."OBJFLAG",s."FLAG2",s."STATUS",s."SNA_TYPE_OWNER",s."SNA_TYPE_NAME",s."PARENT_SOWNER",s."PARENT_VNAME",s."FILE_VER",s."SQL_VER",s."ALIAS_TXT",s."MVIEW_COMMENT"
        FROM    sys.exu9snap s, sys.incexp i, sys.incvid v
        WHERE   s.name = i.name(+) AND
                s.ownerid = i.owner#(+) AND
                /*
                ** Since snapshot also creates a view with the same name,
                ** we need to check for both type view(4) and snapshot(99).
                ** Note: there will be duplicate entry in sys.incexp for this
                */
                NVL(i.type#, 99) in (4, 99) AND
                (s.mtime > i.itime OR
                 NVL(i.expid, 9999) > v.expid);

CREATE OR REPLACE FORCE VIEW "EXU9SNAPL"("LOG_OWNER","LOG_OWNERID","MASTER","LOG_TABLE","LOG_TRIGGER","FLAG","YOUNGEST","OLDEST","OLDEST_PK","MTIME","ROWID_SNAPL","PRIMKEY_SNAPL","OID_SNAPL","SEQ_SNAPL","INV_SNAPL","FILE_VER","TEMP_LOG","OLDEST_OID","OLDEST_NEW") AS 
SELECT  m.mowner, u.user#, m.master, m.log, m.trig, NVL(m.flag, 0),
                m.youngest, m.oldest, m.oldest_pk, m.mtime,
                /* have a flag for each snapshot log types: rowid, primary key
                ** for compatibility purpose */
                DECODE(BITAND(NVL(m.flag, 0), 1), 1, 1, 0),
                DECODE(BITAND(NVL(m.flag, 0), 2), 2, 1, 0),
                DECODE(BITAND(NVL(m.flag, 0), 512), 512, 1, 0),
                DECODE(BITAND(NVL(m.flag, 0), 1024), 1024, 1, 0),
                DECODE(BITAND(NVL(m.flag, 0), 16), 16, 1, 0),
                5, m.temp_log, m.oldest_oid, m.oldest_new
        FROM    sys.mlog$ m, sys.user$ u
        WHERE   m.mowner = u.name;

CREATE OR REPLACE FORCE VIEW "EXU9SNAPLC"("LOG_OWNER","LOG_OWNERID","MASTER","LOG_TABLE","LOG_TRIGGER","FLAG","YOUNGEST","OLDEST","OLDEST_PK","MTIME","ROWID_SNAPL","PRIMKEY_SNAPL","OID_SNAPL","SEQ_SNAPL","INV_SNAPL","FILE_VER","TEMP_LOG","OLDEST_OID","OLDEST_NEW") AS 
SELECT  s."LOG_OWNER",s."LOG_OWNERID",s."MASTER",s."LOG_TABLE",s."LOG_TRIGGER",s."FLAG",s."YOUNGEST",s."OLDEST",s."OLDEST_PK",s."MTIME",s."ROWID_SNAPL",s."PRIMKEY_SNAPL",s."OID_SNAPL",s."SEQ_SNAPL",s."INV_SNAPL",s."FILE_VER",s."TEMP_LOG",s."OLDEST_OID",s."OLDEST_NEW"
        FROM    sys.exu9snapl s, sys.incexp i, sys.incvid v
        WHERE   s.master = i.name(+) AND
                s.log_ownerid = i.owner#(+) AND
                NVL(i.type#, 98) = 98 AND
                (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
                 NVL(i.expid, 9999) > v.expid);

CREATE OR REPLACE FORCE VIEW "EXU9SNAPLI"("LOG_OWNER","LOG_OWNERID","MASTER","LOG_TABLE","LOG_TRIGGER","FLAG","YOUNGEST","OLDEST","OLDEST_PK","MTIME","ROWID_SNAPL","PRIMKEY_SNAPL","OID_SNAPL","SEQ_SNAPL","INV_SNAPL","FILE_VER","TEMP_LOG","OLDEST_OID","OLDEST_NEW") AS 
SELECT  s."LOG_OWNER",s."LOG_OWNERID",s."MASTER",s."LOG_TABLE",s."LOG_TRIGGER",s."FLAG",s."YOUNGEST",s."OLDEST",s."OLDEST_PK",s."MTIME",s."ROWID_SNAPL",s."PRIMKEY_SNAPL",s."OID_SNAPL",s."SEQ_SNAPL",s."INV_SNAPL",s."FILE_VER",s."TEMP_LOG",s."OLDEST_OID",s."OLDEST_NEW"
        FROM    sys.exu9snapl s, sys.incexp i, sys.incvid v
        WHERE   s.master = i.name(+) AND
                s.log_ownerid = i.owner#(+) AND
                /* snapshot log also creates a table with the same name */
                NVL(i.type#, 98) IN (2, 98) AND
                (s.mtime > i.itime OR NVL(i.expid, 9999) > v.expid);

CREATE OR REPLACE FORCE VIEW "EXU9SNAPLU"("LOG_OWNER","LOG_OWNERID","MASTER","LOG_TABLE","LOG_TRIGGER","FLAG","YOUNGEST","OLDEST","OLDEST_PK","MTIME","ROWID_SNAPL","PRIMKEY_SNAPL","OID_SNAPL","SEQ_SNAPL","INV_SNAPL","FILE_VER","TEMP_LOG","OLDEST_OID","OLDEST_NEW") AS 
SELECT  "LOG_OWNER","LOG_OWNERID","MASTER","LOG_TABLE","LOG_TRIGGER","FLAG","YOUNGEST","OLDEST","OLDEST_PK","MTIME","ROWID_SNAPL","PRIMKEY_SNAPL","OID_SNAPL","SEQ_SNAPL","INV_SNAPL","FILE_VER","TEMP_LOG","OLDEST_OID","OLDEST_NEW"
        FROM    sys.exu9snapl
        WHERE   log_ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU9SNAPU"("OWNER","OWNERID","NAME","TABLE_NAME","MASTER_VIEW","MASTER_LINK","MTIME","CAN_USE_LOG","ERROR","TYPE","QUERY","FLAG","ROWID_SNAP","PRIMKEY_SNAP","UPDATE_SNAP","UPDATE_TRIG","UPDATE_LOG","MASTABS","MASVER","LOB_VECTOR","SNAPSHOT","SNAPID","INSTSITE","FLAVOR_ID","RSCN","OBJFLAG","FLAG2","STATUS","SNA_TYPE_OWNER","SNA_TYPE_NAME","PARENT_SOWNER","PARENT_VNAME","FILE_VER","SQL_VER","ALIAS_TXT","MVIEW_COMMENT") AS 
SELECT  "OWNER","OWNERID","NAME","TABLE_NAME","MASTER_VIEW","MASTER_LINK","MTIME","CAN_USE_LOG","ERROR","TYPE","QUERY","FLAG","ROWID_SNAP","PRIMKEY_SNAP","UPDATE_SNAP","UPDATE_TRIG","UPDATE_LOG","MASTABS","MASVER","LOB_VECTOR","SNAPSHOT","SNAPID","INSTSITE","FLAVOR_ID","RSCN","OBJFLAG","FLAG2","STATUS","SNA_TYPE_OWNER","SNA_TYPE_NAME","PARENT_SOWNER","PARENT_VNAME","FILE_VER","SQL_VER","ALIAS_TXT","MVIEW_COMMENT"
        FROM    exu9snap
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU9STO"("OWNERID","TSNO","FILENO","BLOCKNO","INIEXT","SEXT","MINEXT","MAXEXT","PCTINC","BLOCKS","LISTS","GROUPS","EXTENTS","PCACHE","TS_TYPE","TSNAME","ISONLINE","BLOCKSIZE","HSCOMPRESS") AS 
SELECT  s$.user#, s$.ts#, s$.file#, s$.block#, s$.iniexts, s$.extsize,
                s$.minexts, s$.maxexts, s$.extpct, s$.blocks,
                DECODE(s$.lists, NULL, 1, 65535, 1, lists),
                DECODE(s$.groups, NULL, 1, 65535, 1, groups), extents,
                DECODE(s$.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE'),
                DECODE(BITAND(s$.spare1, 1), 1,
                       DECODE(BITAND(ts$.flags, 3), 0, 0, 1, 1, 2, 2, -1),
                       0, -1, -1),
                ts$.name, DECODE(ts$.online$, 1, 1, 4, 1, 0),
                NVL(ts$.blocksize, 2048), s$.spare1
        FROM    sys.seg$ s$, sys.ts$ ts$
        WHERE   s$.ts# = ts$.ts#(+);

CREATE OR REPLACE FORCE VIEW "EXU9STOU"("OWNERID","TSNO","FILENO","BLOCKNO","INIEXT","SEXT","MINEXT","MAXEXT","PCTINC","BLOCKS","LISTS","GROUPS","EXTENTS","PCACHE","TS_TYPE","TSNAME","ISONLINE","BLOCKSIZE","HSCOMPRESS") AS 
SELECT  "OWNERID","TSNO","FILENO","BLOCKNO","INIEXT","SEXT","MINEXT","MAXEXT","PCTINC","BLOCKS","LISTS","GROUPS","EXTENTS","PCACHE","TS_TYPE","TSNAME","ISONLINE","BLOCKSIZE","HSCOMPRESS"
        FROM    sys.exu9sto
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU9SYN"("SYNNAM","SYNNAM2","SYNTAB","TABOWN","TABNODE","PUBLIC$","SYNOWN","SYNOWNID","TABOWNID","SYNOBJNO","SYNTIME") AS 
SELECT  o$.name, o$.name, s$.name, s$.owner, s$.node,
                DECODE(o$.owner#, 1, 1, 0), uo$.name, o$.owner#, us$.user#,
                s$.obj#, o$.ctime
        FROM    sys.exu81obj o$, sys.syn$ s$, sys.user$ us$, sys.user$ uo$
        WHERE   s$.obj# = o$.obj# AND
                o$.owner# = uo$.user# AND
                s$.owner = us$.name(+) AND
                NVL(s$.owner, 'SYS') NOT IN
                   ('ORDSYS', 'MDSYS', 'CTXSYS', 'ORDPLUGINS', 'LBACSYS',
                    'XDB', 'SI_INFORMTN_SCHEMA', 'DIP', 'DMSYS', 'DBSNMP') AND
                NOT EXISTS (
                    SELECT obj#
                    FROM sys.obj$ ne
                    WHERE ne.name = s$.name AND
                          ne.owner# = us$.user# AND
                          ne.type# = 13 );

CREATE OR REPLACE FORCE VIEW "EXU9SYNU"("SYNNAM","SYNNAM2","SYNTAB","TABOWN","TABNODE","PUBLIC$","SYNOWN","SYNOWNID","TABOWNID","SYNOBJNO","SYNTIME") AS 
SELECT  "SYNNAM","SYNNAM2","SYNTAB","TABOWN","TABNODE","PUBLIC$","SYNOWN","SYNOWNID","TABOWNID","SYNOBJNO","SYNTIME"
        FROM    sys.exu9syn
        WHERE   synownid = UID;

CREATE OR REPLACE FORCE VIEW "EXU9TAB"("OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL") AS 
SELECT  "OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL"
        FROM    sys.exu9tabs t$
        WHERE   t$.secondaryobj = 0;

CREATE OR REPLACE FORCE VIEW "EXU9TABC"("OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL") AS 
SELECT  t."OBJID",t."DOBJID",t."NAME",t."OWNER",t."OWNERID",t."TABLESPACE",t."TSNO",t."FILENO",t."BLOCKNO",t."AUDIT$",t."COMMENT$",t."CLUSTERFLAG",t."MTIME",t."MODIFIED",t."TABNO",t."PCTFREE$",t."PCTUSED$",t."INITRANS",t."MAXTRANS",t."DEGREE",t."INSTANCES",t."CACHE",t."TEMPFLAGS",t."PROPERTY",t."DEFLOG",t."TSDEFLOG",t."ROID",t."RECPBLK",t."SECONDARYOBJ",t."ROWCNT",t."BLKCNT",t."AVGRLEN",t."TFLAGS",t."TRIGFLAG",t."OBJSTATUS",t."XDBOOL"
        FROM    sys.exu9tab t, sys.incexp i, sys.incvid v
        WHERE   t.name = i.name(+) AND
                t.ownerid = i.owner#(+) AND
                NVL(i.type#, 2) = 2 AND
                BITAND(t.property, 8192) = 0 AND          /* not inner table */
                (BITAND(t.modified, 1) = 1 OR
                 i.itime > NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) OR
                 t.mtime > i.itime OR
                 NVL(i.expid, 9999) > v.expid OR
                 /* determine if it has inner tables that have been
                 ** changed since last incremental export */
                 (BITAND(t.property, 4) = 4 AND          /* has inner tables */
                  EXISTS (
                    SELECT  0
                    FROM    sys.obj$ o2, sys.tab$ t2
                    WHERE   o2.obj# = t2.obj# AND
                            BITAND(t2.property, 8192) = 8192 AND
                            (o2.mtime > i.itime OR
                             BITAND(t2.flags, 1) = 1) AND
                            o2.obj# IN (
                                SELECT  nt.ntab#
                                FROM    sys.ntab$ nt
                                START WITH nt.obj# = t.objid
                                CONNECT BY PRIOR nt.ntab# = nt.obj#))));

CREATE OR REPLACE FORCE VIEW "EXU9TABI"("OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL") AS 
SELECT  t."OBJID",t."DOBJID",t."NAME",t."OWNER",t."OWNERID",t."TABLESPACE",t."TSNO",t."FILENO",t."BLOCKNO",t."AUDIT$",t."COMMENT$",t."CLUSTERFLAG",t."MTIME",t."MODIFIED",t."TABNO",t."PCTFREE$",t."PCTUSED$",t."INITRANS",t."MAXTRANS",t."DEGREE",t."INSTANCES",t."CACHE",t."TEMPFLAGS",t."PROPERTY",t."DEFLOG",t."TSDEFLOG",t."ROID",t."RECPBLK",t."SECONDARYOBJ",t."ROWCNT",t."BLKCNT",t."AVGRLEN",t."TFLAGS",t."TRIGFLAG",t."OBJSTATUS",t."XDBOOL"
        FROM    sys.exu9tab t, sys.incexp i, sys.incvid v
        WHERE   t.name = i.name(+) AND
                t.ownerid = i.owner#(+) AND
                NVL(i.type#, 2) = 2 AND
                BITAND(t.property, 8192) = 0 AND          /* not inner table */
                (BITAND(t.modified, 1) = 1 OR
                 t.mtime > i.itime OR
                 NVL(i.expid, 9999) > v.expid OR
                 /* determine if it has inner tables that have been
                 ** changed since last incremental export */
                 (BITAND(t.property, 4) = 4 AND          /* has inner tables */
                  EXISTS (
                    SELECT  0
                    FROM    sys.obj$ o2, sys.tab$ t2
                    WHERE   o2.obj# = t2.obj# AND
                            BITAND(t2.property, 8192) = 8192 AND
                            (o2.mtime > i.itime OR
                             BITAND(t2.flags, 1) = 1) AND
                            o2.obj# IN (
                                SELECT  nt.ntab#
                                FROM    sys.ntab$ nt
                                START WITH nt.obj# = t.objid
                                CONNECT BY PRIOR nt.ntab# = nt.obj#))));

CREATE OR REPLACE FORCE VIEW "EXU9TABS"("OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL") AS 
SELECT  "OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL"
        FROM    sys.exu10tabs
        WHERE  NOT EXISTS (
                   SELECT *
                   FROM   sys.col$ c$
                   WHERE  (c$.obj# = objid AND
                           (c$.type# = 100 OR
                           c$.type# = 101 )));

CREATE OR REPLACE FORCE VIEW "EXU9TABSU"("OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL") AS 
SELECT  "OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL"
        FROM    sys.exu9tabs
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU9TABU"("OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL") AS 
SELECT  "OBJID","DOBJID","NAME","OWNER","OWNERID","TABLESPACE","TSNO","FILENO","BLOCKNO","AUDIT$","COMMENT$","CLUSTERFLAG","MTIME","MODIFIED","TABNO","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","DEGREE","INSTANCES","CACHE","TEMPFLAGS","PROPERTY","DEFLOG","TSDEFLOG","ROID","RECPBLK","SECONDARYOBJ","ROWCNT","BLKCNT","AVGRLEN","TFLAGS","TRIGFLAG","OBJSTATUS","XDBOOL"
        FROM    sys.exu9tab
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU9TAB_UNUSED_COLS"("OBJID") AS 
SELECT  o.obj#
        FROM    sys.user$ u, sys.obj$ o, sys.col$ c
        WHERE   o.owner# = u.user#
           AND  o.obj# = c.obj#
           AND BITAND(c.property,32768) = 32768            -- is unused column
           AND BITAND(c.property, 1) != 1              -- not ADT attribute col
           AND BITAND(c.property, 1024) != 1024         -- not NTAB's setid col
           AND (o.owner# = userenv('SCHEMAID')
                OR o.obj# IN
                   (SELECT oa.obj#
                     FROM sys.objauth$ oa
                     WHERE grantee# IN ( select kzsrorol
                                 FROM x$kzsro
                               )
                    )
                OR EXISTS (SELECT NULL FROM v$enabledprivs
                            WHERE priv_number IN (-45 /* LOCK ANY TABLE */,
                                                  -47 /* SELECT ANY TABLE */,
                                                  -48 /* INSERT ANY TABLE */,
                                                  -49 /* UPDATE ANY TABLE */,
                                                  -50 /* DELETE ANY TABLE */)
                          )
                );

CREATE OR REPLACE FORCE VIEW "EXU9TBCP"("OBJID","DOBJID","BOBJID","OWNERID","COMPNAME","PARTNO","HIBOUNDLEN","HIBOUNDVAL","PROWCNT","PBLKCNT","PAVGRLEN","TSNAME","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","INIEXTS","EXTSIZE","MINEXTS","MAXEXTS","EXTPCT","FLISTS","FREEGRP","PCACHE","DEFLOG","TSDEFLOG","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","BLOCKSIZE","HSCOMPRESS") AS 
SELECT  o.obj#, o.dataobj#, cp.bo#, o.owner#, o.subname, cp.part#,
                cp.hiboundlen, cp.hiboundval, NVL(cp.rowcnt, -1),
                NVL(cp.blkcnt, -1), NVL(cp.avgrln, -1), ts.name,
                MOD(cp.defpctfree, 100), cp.defpctused, cp.definitrans,
                cp.defmaxtrans, NVL(cp.definiexts, 0), NVL(cp.defextsize, 0),
                NVL(cp.defminexts, 0), NVL(cp.defmaxexts, 0),
                NVL(cp.defextpct, -1), NVL(cp.deflists, 0),
                NVL(cp.defgroups, 0),
                DECODE(cp.defbufpool, 1, 'KEEP', 2, 'RECYCLE', NULL),
                cp.deflogging, ts.dflogging, -1, -1, -1, -1, -1, -1,
                NVL(ts.blocksize, 2048), cp.spare2
        FROM    sys.obj$ o, sys.tabcompart$ cp, sys.ts$ ts
        WHERE   cp.obj# = o.obj# AND
                cp.defts# = ts.ts# (+);

CREATE OR REPLACE FORCE VIEW "EXU9TBCPU"("OBJID","DOBJID","BOBJID","OWNERID","COMPNAME","PARTNO","HIBOUNDLEN","HIBOUNDVAL","PROWCNT","PBLKCNT","PAVGRLEN","TSNAME","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","INIEXTS","EXTSIZE","MINEXTS","MAXEXTS","EXTPCT","FLISTS","FREEGRP","PCACHE","DEFLOG","TSDEFLOG","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","BLOCKSIZE","HSCOMPRESS") AS 
SELECT  "OBJID","DOBJID","BOBJID","OWNERID","COMPNAME","PARTNO","HIBOUNDLEN","HIBOUNDVAL","PROWCNT","PBLKCNT","PAVGRLEN","TSNAME","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","INIEXTS","EXTSIZE","MINEXTS","MAXEXTS","EXTPCT","FLISTS","FREEGRP","PCACHE","DEFLOG","TSDEFLOG","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","BLOCKSIZE","HSCOMPRESS"
        FROM    sys.exu9tbcp
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU9TBS"("ID","OWNER","NAME","ISONLINE","CONTENT","INIEXT","SEXT","PCTINC","MINEXT","MAXEXT","MINLEN","DEFLOG","EXT_MGT","ALLOC_TYPE","BLOCKSIZE") AS 
SELECT  ts$.ts#, 'SYSTEM', ts$.name,
                DECODE(ts$.online$, 1, 'ONLINE', 4, 'ONLINE', 'OFFLINE'),
                DECODE(ts$.contents$, 0, 'PERMANENT', 1, 'TEMPORARY'),
                ts$.dflinit, ts$.dflincr, ts$.dflextpct, ts$.dflminext,
                ts$.dflmaxext, NVL(ts$.dflminlen, 0), ts$.dflogging,
                ts$.bitmapped, ts$.flags, ts$.blocksize
        FROM    sys.ts$ ts$
        WHERE   ts$.online$ IN (1, 2, 4) AND
                ts$.ts# != 0 AND
                bitand(ts$.flags,2048) !=2048;

CREATE OR REPLACE FORCE VIEW "EXU9TGRC"("OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE") AS 
SELECT  "OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE"
        FROM    sys.exu81tgr
        WHERE   (ownerid, basename) IN (
                    SELECT  ownerid, name
                    FROM    sys.exu9tabc)
      UNION ALL
        SELECT  "OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE"
        FROM    sys.exu81tgr
        WHERE   (ownerid, basename) IN (
                    SELECT  ownerid, name
                    FROM    sys.exu8vinfc);

CREATE OR REPLACE FORCE VIEW "EXU9TGRI"("OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE") AS 
SELECT  "OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE"
        FROM    sys.exu81tgr
        WHERE   (ownerid, basename) IN (
                    SELECT  ownerid, name
                    FROM    sys.exu9tabi)
      UNION ALL
        SELECT  "OWNERID","OWNER","BASEOBJECT","DEFINITION","WHENCLAUSE","ACTION","ENABLED","TPROPERTY","NAME","BASENAME","BASETYPE","PROPERTY","BTOWNER","BTOWNERID","ACTIONSIZE"
        FROM    sys.exu81tgr
        WHERE   (ownerid, basename) IN (
                    SELECT  ownerid, name
                    FROM    sys.exu8vinfi);

CREATE OR REPLACE FORCE VIEW "EXU9TNE"("TSNO","FILENO","BLOCKNO","LENGTH") AS 
SELECT  ts#, segfile#, segblock#, length
        FROM    sys.uet$
        WHERE   ext# = 1;

CREATE OR REPLACE FORCE VIEW "EXU9TNEB"("TSNO","FILENO","BLOCKNO","LENGTH") AS 
SELECT  ktfbuesegtsn, ktfbuesegfno, ktfbuesegbno, ktfbueblks
        FROM    sys.x$ktfbue
        WHERE   ktfbueextno = 1;

CREATE OR REPLACE FORCE VIEW "EXU9TNTC"("OBJID","OWNERID","TNAME") AS 
SELECT  objid, ownerid, name
        FROM    sys.exu9tabc                        /* tables in this export */
        WHERE   BITAND(property, 4) = 4           /* table has nested tables */;

CREATE OR REPLACE FORCE VIEW "EXU9TNTI"("OBJID","OWNERID","TNAME") AS 
SELECT  objid, ownerid, name
        FROM    sys.exu9tabi                        /* tables in this export */
        WHERE   BITAND(property, 4) = 4           /* table has nested tables */;

CREATE OR REPLACE FORCE VIEW "EXU9TSQ"("TSNAME","TSID","UNAME","USERID","MAXBLOCKS","BLOCKSIZE") AS 
SELECT  t$.name, q$.ts#, u$.name, u$.user#, q$.maxblocks, t$.blocksize
        FROM    sys.ts$ t$, sys.tsq$ q$, sys.user$ u$
        WHERE   q$.user# = u$.user# AND
                q$.ts# = t$.ts# AND
                q$.maxblocks != 0 AND
                t$.online$ IN (1, 2, 4);

CREATE OR REPLACE FORCE VIEW "EXU9TYP"("TNAME","TOWNER","OWNERID","TOID","MTIME","OBJNO","AUDIT$","SECONDARYOBJ","SQLVER","TYPOBJSTATUS","TVERSION","THASHCODE","TYPEID","ROOTTOID") AS 
SELECT  o.name, u.name, o.owner#, t.toid,
                TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, tm.audit$,
                DECODE(BITAND(o.flags, 16), 16, 1, 0), sv.sql_version,
                o.status, t.version#, t.hashcode, t.typeid,
                NVL(t.roottoid,HEXTORAW('00'))
        FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.type_misc$ tm,
                sys.exu816sqv sv
        WHERE   o.type# = 13 AND
                o.oid$ = t.toid AND
                u.user# = o.owner# AND
                tm.obj# = o.obj# AND
                t.toid  = t.tvoid AND                 /* Only the latest rev */
                BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
                u.name NOT IN ('ORDSYS', 'MDSYS', 'CTXSYS', 'ORDPLUGINS',
                               'LBACSYS', 'XDB', 'SI_INFORMTN_SCHEMA',
                               'DIP', 'DMSYS', 'DBSNMP') AND
                o.spare1 = sv.version# (+);

CREATE OR REPLACE FORCE VIEW "EXU9TYPT"("TNAME","TOWNER","OWNERID","TOID","MTIME","TYPOBJNO","TABOBJNO","AUDIT$","SQLVER","PROPERTY","TYPOBJSTATUS","TVERSION","THASHCODE","SYNOBJNO","COLSYNOBJNO") AS 
SELECT  o.name, u.name, o.owner#, t.toid,
                TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, c.obj#,
                tm.audit$, sv.sql_version, t.properties,
                o.status, t.version#, t.hashcode, sy.obj#, c.synobj#
        FROM    sys.coltype$ c, sys.user$ u, sys.obj$ o, sys.type$ t,
                sys.type_misc$ tm, sys.exu816sqv sv, sys.obj$ ne, sys.obj$ sy
        WHERE   t.toid = c.toid AND
                o.oid$ = c.toid AND
                u.user# = o.owner# AND
                o.obj# = tm.obj# AND
                BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
                NVL(o.type#, -1) != 10 AND
                t.toid  = t.tvoid AND                    /* Latest type only */
                o.spare1 = sv.version# (+) AND
                ne.obj# = c.synobj#  AND /* non_exist (neg depend) */
                sy.name = ne.name AND
                sy.owner# = 1 AND  /* PUBLIC */
                sy.type# = 5 /* SYNONYM */;

CREATE OR REPLACE FORCE VIEW "EXU9TYPT2"("TNAME","TOWNER","OWNERID","TOID","MTIME","TYPOBJNO","TABOBJNO","AUDIT$","SQLVER","PROPERTY","TYPOBJSTATUS","TVERSION","THASHCODE","SYNOBJNO","COLSYNOBJNO") AS 
SELECT  o.name, u.name, o.owner#, t.toid,
                TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, c.obj#,
                tm.audit$, sv.sql_version, t.properties,
                o.status, t.version#, t.hashcode, c.synobj#, c.synobj#
        FROM    sys.coltype$ c, sys.user$ u, sys.obj$ o, sys.type$ t,
                sys.type_misc$ tm, sys.exu816sqv sv
        WHERE   t.toid = c.toid AND
                o.oid$ = c.toid AND
                u.user# = o.owner# AND
                o.obj# = tm.obj# AND
                BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
                NVL(o.type#, -1) != 10 AND
                t.toid  = t.tvoid AND                    /* Latest type only */
                o.spare1 = sv.version# (+);

CREATE OR REPLACE FORCE VIEW "EXU9TYPTU"("TNAME","TOWNER","OWNERID","TOID","MTIME","TYPOBJNO","TABOBJNO","AUDIT$","SQLVER","PROPERTY","TYPOBJSTATUS","TVERSION","THASHCODE","SYNOBJNO","COLSYNOBJNO") AS 
SELECT  o.name, u.name, o.owner#, t.toid,
                TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, c.obj#,
                tm.audit$, sv.sql_version, t.properties,
                o.status, t.version#, t.hashcode, sy.obj#, c.synobj#
        FROM    sys.coltype$ c, sys.user$ u, sys.obj$ o, sys.type$ t,
                sys.type_misc$ tm, sys.exu816sqv sv, sys.obj$ ne, sys.obj$ sy
        WHERE   t.toid = c.toid AND
                o.oid$ = c.toid AND
                u.user# = o.owner# AND
                o.obj# = tm.obj# AND
                BITAND(t.properties, 2128) = 0 AND/* skip system gen'd types */
                t.toid  = t.tvoid AND                    /* Latest type only */
                NVL(o.type#, -1) != 10 AND
                (o.owner# = UID OR                  /* owned by current user */
                /* current user or public role have execute access to type */
                o.obj# IN (
                    SELECT  oa.obj#
                    FROM    sys.objauth$ oa
                    WHERE   oa.obj# = o.obj# AND
                            oa.privilege# = 12 AND                /* execute */
                            oa.grantee# IN (UID, 1)) OR
                EXISTS ( /* current user or public role can execute any type */
                    SELECT  NULL
                    FROM    sys.sysauth$ sa
                    WHERE   sa.grantee# IN (UID, 1) AND
                            sa.privilege# = -184)) AND
                o.spare1 = sv.version# (+) AND
                ne.obj# = c.synobj#  AND /* non_exist (neg depend) */
                sy.name = ne.name AND
                sy.owner# = 1 AND  /* PUBLIC */
                sy.type# = 5 /* SYNONYM */;

CREATE OR REPLACE FORCE VIEW "EXU9TYPTU2"("TNAME","TOWNER","OWNERID","TOID","MTIME","TYPOBJNO","TABOBJNO","AUDIT$","SQLVER","PROPERTY","TYPOBJSTATUS","TVERSION","THASHCODE","SYNOBJNO","COLSYNOBJNO") AS 
SELECT  o.name, u.name, o.owner#, t.toid,
                TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, c.obj#,
                tm.audit$, sv.sql_version, t.properties,
                o.status, t.version#, t.hashcode, c.synobj#, c.synobj#
        FROM    sys.coltype$ c, sys.user$ u, sys.obj$ o, sys.type$ t,
                sys.type_misc$ tm, sys.exu816sqv sv
        WHERE   t.toid = c.toid AND
                o.oid$ = c.toid AND
                u.user# = o.owner# AND
                o.obj# = tm.obj# AND
                BITAND(t.properties, 2128) = 0 AND/* skip system gen'd types */
                t.toid  = t.tvoid AND                    /* Latest type only */
                NVL(o.type#, -1) != 10 AND
                (o.owner# = UID OR                  /* owned by current user */
                /* current user or public role have execute access to type */
                o.obj# IN (
                    SELECT  oa.obj#
                    FROM    sys.objauth$ oa
                    WHERE   oa.obj# = o.obj# AND
                            oa.privilege# = 12 AND                /* execute */
                            oa.grantee# IN (UID, 1)) OR
                EXISTS ( /* current user or public role can execute any type */
                    SELECT  NULL
                    FROM    sys.sysauth$ sa
                    WHERE   sa.grantee# IN (UID, 1) AND
                            sa.privilege# = -184)) AND
                o.spare1 = sv.version# (+);

CREATE OR REPLACE FORCE VIEW "EXU9TYPU"("TNAME","TOWNER","OWNERID","TOID","MTIME","OBJNO","AUDIT$","SECONDARYOBJ","SQLVER","TYPOBJSTATUS","TVERSION","THASHCODE","TYPEID","ROOTTOID") AS 
SELECT  "TNAME","TOWNER","OWNERID","TOID","MTIME","OBJNO","AUDIT$","SECONDARYOBJ","SQLVER","TYPOBJSTATUS","TVERSION","THASHCODE","TYPEID","ROOTTOID"
        FROM    sys.exu9typ
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "EXU9UTS"("SYNNAM","SYNNAM2","SYNTAB","TABOWN","TABNODE","PUBLIC$","SYNOWN","SYNOWNID","TABOWNID","SYNOBJNO","SYNTIME") AS 
SELECT  o$.name, o$.name, s$.name, s$.owner, s$.node,
                DECODE(o$.owner#, 1, 1, 0), uo$.name, o$.owner#, us$.user#,
                s$.obj#, o$.ctime
        FROM    sys.exu81obj o$, sys.syn$ s$, sys.user$ us$, sys.user$ uo$
        WHERE   s$.obj# = o$.obj# AND
                o$.owner# = uo$.user# AND
                s$.owner = us$.name(+) AND
                NVL(s$.owner, 'SYS') NOT IN
                   ('ORDSYS', 'MDSYS', 'CTXSYS', 'ORDPLUGINS', 'LBACSYS',
                    'XDB', 'SI_INFORMTN_SCHEMA', 'DIP', 'DMSYS', 'DBSNMP') AND
                o$.owner# <> 1 AND
                EXISTS (
                    SELECT obj#
                    FROM sys.obj$ e
                    WHERE e.name = s$.name AND
                          e.owner# = us$.user# AND
                          e.type# = 13 );

CREATE OR REPLACE FORCE VIEW "EXU9UTSU"("SYNNAM","SYNNAM2","SYNTAB","TABOWN","TABNODE","PUBLIC$","SYNOWN","SYNOWNID","TABOWNID","SYNOBJNO","SYNTIME") AS 
SELECT  "SYNNAM","SYNNAM2","SYNTAB","TABOWN","TABNODE","PUBLIC$","SYNOWN","SYNOWNID","TABOWNID","SYNOBJNO","SYNTIME"
        FROM    sys.exu9uts
        WHERE   synownid = UID;

CREATE OR REPLACE FORCE VIEW "EXU9XDBUID"("XDB_UID") AS 
SELECT r$.schema#
        FROM sys.registry$ r$
        WHERE r$.cid = 'XDB';

CREATE OR REPLACE FORCE VIEW "EXU9XMLST"("SCHEMAOID","TOBJID") AS 
SELECT RAWTOHEX(opq.schemaoid), o.obj#
        FROM sys.opqtype$ opq, sys.obj$ o
        WHERE o.obj# = opq.obj# AND
              opq.type = 1 AND                                   /* XML Type */
              BITAND(opq.flags, 2) = 2                          /* XMLSchema */;

CREATE OR REPLACE FORCE VIEW "EXU9XTB"("OBJID","DEFAULT_DIR","TYPE","NR_LOCATIONS","REJECT_LIMIT","PAR_TYPE","PARAM_CLOB","POSITION","DIRECTORY","NAME") AS 
SELECT  et$.obj#, et$.default_dir, et$.type$, et$.nr_locations,
                et$.reject_limit, et$.par_type, et$.param_clob,
                el$.position, el$.dir, el$.name
        FROM    sys.external_location$ el$, sys.external_tab$ et$, sys.obj$ o$
        WHERE   el$.obj# = et$.obj# AND
                el$.obj# = o$.obj#  AND
                (UID IN (o$.owner#, 0) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'));

CREATE OR REPLACE FORCE VIEW "FILEXT$"("FILE#","MAXEXTEND","INC") AS 
select f.file_id, f.maxblocks, f.increment_by
from sys.dba_data_files f where f.increment_by <> 0;

CREATE OR REPLACE FORCE VIEW "FLASHBACK_TRANSACTION_QUERY"("XID","START_SCN","START_TIMESTAMP","COMMIT_SCN","COMMIT_TIMESTAMP","LOGON_USER","UNDO_CHANGE#","OPERATION","TABLE_NAME","TABLE_OWNER","ROW_ID","UNDO_SQL") AS 
select xid, start_scn, start_timestamp,
          decode(commit_scn, 0, commit_scn, 281474976710655, NULL, commit_scn)
          commit_scn, commit_timestamp,
          logon_user, undo_change#, operation, table_name, table_owner,
          row_id, undo_sql
from sys.x$ktuqqry;

CREATE OR REPLACE FORCE VIEW "FLOW_PARAMETERS"("NUM","NAME","TYPE","VALUE","DISPLAY_VALUE","ISDEFAULT","ISSES_MODIFIABLE","ISSYS_MODIFIABLE","ISINSTANCE_MODIFIABLE","ISMODIFIED","ISADJUSTED","ISDEPRECATED","DESCRIPTION","UPDATE_COMMENT","HASH") AS 
select "NUM","NAME","TYPE","VALUE","DISPLAY_VALUE","ISDEFAULT","ISSES_MODIFIABLE","ISSYS_MODIFIABLE","ISINSTANCE_MODIFIABLE","ISMODIFIED","ISADJUSTED","ISDEPRECATED","DESCRIPTION","UPDATE_COMMENT","HASH" from v$parameter;

CREATE OR REPLACE FORCE VIEW "FLOW_SESSIONS"("SADDR","SID","SERIAL#","AUDSID","PADDR","USER#","USERNAME","COMMAND","OWNERID","TADDR","LOCKWAIT","STATUS","SERVER","SCHEMA#","SCHEMANAME","OSUSER","PROCESS","MACHINE","TERMINAL","PROGRAM","TYPE","SQL_ADDRESS","SQL_HASH_VALUE","SQL_ID","SQL_CHILD_NUMBER","PREV_SQL_ADDR","PREV_HASH_VALUE","PREV_SQL_ID","PREV_CHILD_NUMBER","MODULE","MODULE_HASH","ACTION","ACTION_HASH","CLIENT_INFO","FIXED_TABLE_SEQUENCE","ROW_WAIT_OBJ#","ROW_WAIT_FILE#","ROW_WAIT_BLOCK#","ROW_WAIT_ROW#","LOGON_TIME","LAST_CALL_ET","PDML_ENABLED","FAILOVER_TYPE","FAILOVER_METHOD","FAILED_OVER","RESOURCE_CONSUMER_GROUP","PDML_STATUS","PDDL_STATUS","PQ_STATUS","CURRENT_QUEUE_DURATION","CLIENT_IDENTIFIER","BLOCKING_SESSION_STATUS","BLOCKING_SESSION","SEQ#","EVENT#","EVENT","P1TEXT","P1","P1RAW","P2TEXT","P2","P2RAW","P3TEXT","P3","P3RAW","WAIT_CLASS_ID","WAIT_CLASS#","WAIT_CLASS","WAIT_TIME","SECONDS_IN_WAIT","STATE","SERVICE_NAME") AS 
select "SADDR","SID","SERIAL#","AUDSID","PADDR","USER#","USERNAME","COMMAND","OWNERID","TADDR","LOCKWAIT","STATUS","SERVER","SCHEMA#","SCHEMANAME","OSUSER","PROCESS","MACHINE","TERMINAL","PROGRAM","TYPE","SQL_ADDRESS","SQL_HASH_VALUE","SQL_ID","SQL_CHILD_NUMBER","PREV_SQL_ADDR","PREV_HASH_VALUE","PREV_SQL_ID","PREV_CHILD_NUMBER","MODULE","MODULE_HASH","ACTION","ACTION_HASH","CLIENT_INFO","FIXED_TABLE_SEQUENCE","ROW_WAIT_OBJ#","ROW_WAIT_FILE#","ROW_WAIT_BLOCK#","ROW_WAIT_ROW#","LOGON_TIME","LAST_CALL_ET","PDML_ENABLED","FAILOVER_TYPE","FAILOVER_METHOD","FAILED_OVER","RESOURCE_CONSUMER_GROUP","PDML_STATUS","PDDL_STATUS","PQ_STATUS","CURRENT_QUEUE_DURATION","CLIENT_IDENTIFIER","BLOCKING_SESSION_STATUS","BLOCKING_SESSION","SEQ#","EVENT#","EVENT","P1TEXT","P1","P1RAW","P2TEXT","P2","P2RAW","P3TEXT","P3","P3RAW","WAIT_CLASS_ID","WAIT_CLASS#","WAIT_CLASS","WAIT_TIME","SECONDS_IN_WAIT","STATE","SERVICE_NAME" from v$session;

CREATE OR REPLACE FORCE VIEW "FLOW_SGA"("NAME","VALUE") AS 
select "NAME","VALUE" from v$sga;

CREATE OR REPLACE FORCE VIEW "FLOW_SQLAREA"("SQL_TEXT","SQL_ID","SHARABLE_MEM","PERSISTENT_MEM","RUNTIME_MEM","SORTS","VERSION_COUNT","LOADED_VERSIONS","OPEN_VERSIONS","USERS_OPENING","FETCHES","EXECUTIONS","END_OF_FETCH_COUNT","USERS_EXECUTING","LOADS","FIRST_LOAD_TIME","INVALIDATIONS","PARSE_CALLS","DISK_READS","DIRECT_WRITES","BUFFER_GETS","APPLICATION_WAIT_TIME","CONCURRENCY_WAIT_TIME","CLUSTER_WAIT_TIME","USER_IO_WAIT_TIME","PLSQL_EXEC_TIME","JAVA_EXEC_TIME","ROWS_PROCESSED","COMMAND_TYPE","OPTIMIZER_MODE","PARSING_USER_ID","PARSING_SCHEMA_ID","KEPT_VERSIONS","ADDRESS","HASH_VALUE","OLD_HASH_VALUE","MODULE","MODULE_HASH","ACTION","ACTION_HASH","SERIALIZABLE_ABORTS","CPU_TIME","ELAPSED_TIME","IS_OBSOLETE","CHILD_LATCH","PROGRAM_ID") AS 
select "SQL_TEXT","SQL_ID","SHARABLE_MEM","PERSISTENT_MEM","RUNTIME_MEM","SORTS","VERSION_COUNT","LOADED_VERSIONS","OPEN_VERSIONS","USERS_OPENING","FETCHES","EXECUTIONS","END_OF_FETCH_COUNT","USERS_EXECUTING","LOADS","FIRST_LOAD_TIME","INVALIDATIONS","PARSE_CALLS","DISK_READS","DIRECT_WRITES","BUFFER_GETS","APPLICATION_WAIT_TIME","CONCURRENCY_WAIT_TIME","CLUSTER_WAIT_TIME","USER_IO_WAIT_TIME","PLSQL_EXEC_TIME","JAVA_EXEC_TIME","ROWS_PROCESSED","COMMAND_TYPE","OPTIMIZER_MODE","PARSING_USER_ID","PARSING_SCHEMA_ID","KEPT_VERSIONS","ADDRESS","HASH_VALUE","OLD_HASH_VALUE","MODULE","MODULE_HASH","ACTION","ACTION_HASH","SERIALIZABLE_ABORTS","CPU_TIME","ELAPSED_TIME","IS_OBSOLETE","CHILD_LATCH","PROGRAM_ID" from v$sqlarea;

CREATE OR REPLACE FORCE VIEW "GLOBAL_CONTEXT"("NAMESPACE","ATTRIBUTE","VALUE","USERNAME","CLIENT_IDENTIFIER") AS 
select namespace,attribute,value,username,clientidentifier
from v$globalcontext
where clientidentifier is null or clientidentifier = SYS_CONTEXT('USERENV','CLIENT_IDENTIFIER');

CREATE OR REPLACE FORCE VIEW "GLOBAL_NAME"("GLOBAL_NAME") AS 
select value$ from sys.props$ where name = 'GLOBAL_DB_NAME';

CREATE OR REPLACE FORCE VIEW "GV_$ACCESS"("INST_ID","SID","OWNER","OBJECT","TYPE") AS 
select "INST_ID","SID","OWNER","OBJECT","TYPE" from gv$access;

CREATE OR REPLACE FORCE VIEW "GV_$ACTIVE_INSTANCES"("INST_ID","INST_NUMBER","INST_NAME") AS 
select "INST_ID","INST_NUMBER","INST_NAME" from gv$active_instances;

CREATE OR REPLACE FORCE VIEW "GV_$ACTIVE_SERVICES"("INST_ID","SERVICE_ID","NAME","NAME_HASH","NETWORK_NAME","CREATION_DATE","CREATION_DATE_HASH") AS 
select "INST_ID","SERVICE_ID","NAME","NAME_HASH","NETWORK_NAME","CREATION_DATE","CREATION_DATE_HASH" from gv$active_services;

CREATE OR REPLACE FORCE VIEW "GV_$ACTIVE_SESSION_HISTORY"("INST_ID","SAMPLE_ID","SAMPLE_TIME","SESSION_ID","SESSION_SERIAL#","USER_ID","SQL_ID","SQL_CHILD_NUMBER","SQL_PLAN_HASH_VALUE","SQL_OPCODE","SERVICE_HASH","SESSION_TYPE","SESSION_STATE","QC_SESSION_ID","QC_INSTANCE_ID","EVENT","EVENT_ID","EVENT#","SEQ#","P1","P2","P3","WAIT_TIME","TIME_WAITED","CURRENT_OBJ#","CURRENT_FILE#","CURRENT_BLOCK#","PROGRAM","MODULE","ACTION","CLIENT_ID") AS 
select "INST_ID","SAMPLE_ID","SAMPLE_TIME","SESSION_ID","SESSION_SERIAL#","USER_ID","SQL_ID","SQL_CHILD_NUMBER","SQL_PLAN_HASH_VALUE","SQL_OPCODE","SERVICE_HASH","SESSION_TYPE","SESSION_STATE","QC_SESSION_ID","QC_INSTANCE_ID","EVENT","EVENT_ID","EVENT#","SEQ#","P1","P2","P3","WAIT_TIME","TIME_WAITED","CURRENT_OBJ#","CURRENT_FILE#","CURRENT_BLOCK#","PROGRAM","MODULE","ACTION","CLIENT_ID" from gv$active_session_history;

CREATE OR REPLACE FORCE VIEW "GV_$ACTIVE_SESS_POOL_MTH"("INST_ID","NAME") AS 
select "INST_ID","NAME" from gv$active_sess_pool_mth;

CREATE OR REPLACE FORCE VIEW "GV_$ADVISOR_PROGRESS"("INST_ID","SID","SERIAL#","USERNAME","OPNAME","TASK_ID","TARGET","TARGET_DESC","SOFAR","TOTALWORK","UNITS","FINDINGS","START_TIME","LAST_UPDATE_TIME","TIME_REMAINING","ELAPSED_SECONDS","INFO1_DESC","INFO1","INFO2_DESC","INFO2","INFO3_DESC","INFO3","INFO4_DESC","INFO4") AS 
select "INST_ID","SID","SERIAL#","USERNAME","OPNAME","TASK_ID","TARGET","TARGET_DESC","SOFAR","TOTALWORK","UNITS","FINDINGS","START_TIME","LAST_UPDATE_TIME","TIME_REMAINING","ELAPSED_SECONDS","INFO1_DESC","INFO1","INFO2_DESC","INFO2","INFO3_DESC","INFO3","INFO4_DESC","INFO4" from gv$advisor_progress;

CREATE OR REPLACE FORCE VIEW "GV_$ALERT_TYPES"("INST_ID","REASON_ID","OBJECT_TYPE","TYPE","GROUP_NAME","SCOPE","INTERNAL_METRIC_CATEGORY","INTERNAL_METRIC_NAME") AS 
SELECT "INST_ID","REASON_ID","OBJECT_TYPE","TYPE","GROUP_NAME","SCOPE","INTERNAL_METRIC_CATEGORY","INTERNAL_METRIC_NAME" FROM gv$alert_types;

CREATE OR REPLACE FORCE VIEW "GV_$AQ"("QID","WAITING","READY","EXPIRED","TOTAL_WAIT","AVERAGE_WAIT") AS 
select qid, max(WAITING) waiting, max(READY) ready, max(EXPIRED) expired,
   max(TOTAL_WAIT) total_wait,
   decode(max(TOTAL_CONSUMERS),
              0, 0, max(TOTAL_WAIT)/max(TOTAL_CONSUMERS)) average_wait
 from   gv$aq1 group by qid;

CREATE OR REPLACE FORCE VIEW "GV_$AQ1"("INST_ID","QID","WAITING","READY","EXPIRED","TOTAL_CONSUMERS","TOTAL_WAIT","AVERAGE_WAIT") AS 
select "INST_ID","QID","WAITING","READY","EXPIRED","TOTAL_CONSUMERS","TOTAL_WAIT","AVERAGE_WAIT" from gv$aq1;

CREATE OR REPLACE FORCE VIEW "GV_$ARCHIVE"("INST_ID","GROUP#","THREAD#","SEQUENCE#","ISCURRENT","CURRENT","FIRST_CHANGE#") AS 
select "INST_ID","GROUP#","THREAD#","SEQUENCE#","ISCURRENT","CURRENT","FIRST_CHANGE#" from gv$archive;

CREATE OR REPLACE FORCE VIEW "GV_$ARCHIVED_LOG"("INST_ID","RECID","STAMP","NAME","DEST_ID","THREAD#","SEQUENCE#","RESETLOGS_CHANGE#","RESETLOGS_TIME","RESETLOGS_ID","FIRST_CHANGE#","FIRST_TIME","NEXT_CHANGE#","NEXT_TIME","BLOCKS","BLOCK_SIZE","CREATOR","REGISTRAR","STANDBY_DEST","ARCHIVED","APPLIED","DELETED","STATUS","COMPLETION_TIME","DICTIONARY_BEGIN","DICTIONARY_END","END_OF_REDO","BACKUP_COUNT","ARCHIVAL_THREAD#","ACTIVATION#","IS_RECOVERY_DEST_FILE","COMPRESSED","FAL") AS 
select "INST_ID","RECID","STAMP","NAME","DEST_ID","THREAD#","SEQUENCE#","RESETLOGS_CHANGE#","RESETLOGS_TIME","RESETLOGS_ID","FIRST_CHANGE#","FIRST_TIME","NEXT_CHANGE#","NEXT_TIME","BLOCKS","BLOCK_SIZE","CREATOR","REGISTRAR","STANDBY_DEST","ARCHIVED","APPLIED","DELETED","STATUS","COMPLETION_TIME","DICTIONARY_BEGIN","DICTIONARY_END","END_OF_REDO","BACKUP_COUNT","ARCHIVAL_THREAD#","ACTIVATION#","IS_RECOVERY_DEST_FILE","COMPRESSED","FAL" from gv$archived_log;

CREATE OR REPLACE FORCE VIEW "GV_$ARCHIVE_DEST"("INST_ID","DEST_ID","DEST_NAME","STATUS","BINDING","NAME_SPACE","TARGET","ARCHIVER","SCHEDULE","DESTINATION","LOG_SEQUENCE","REOPEN_SECS","DELAY_MINS","NET_TIMEOUT","PROCESS","REGISTER","FAIL_DATE","FAIL_SEQUENCE","FAIL_BLOCK","FAILURE_COUNT","MAX_FAILURE","ERROR","ALTERNATE","DEPENDENCY","REMOTE_TEMPLATE","QUOTA_SIZE","QUOTA_USED","MOUNTID","TRANSMIT_MODE","ASYNC_BLOCKS","AFFIRM","TYPE","VALID_NOW","VALID_TYPE","VALID_ROLE","DB_UNIQUE_NAME","VERIFY","EXPEDITE") AS 
select "INST_ID","DEST_ID","DEST_NAME","STATUS","BINDING","NAME_SPACE","TARGET","ARCHIVER","SCHEDULE","DESTINATION","LOG_SEQUENCE","REOPEN_SECS","DELAY_MINS","NET_TIMEOUT","PROCESS","REGISTER","FAIL_DATE","FAIL_SEQUENCE","FAIL_BLOCK","FAILURE_COUNT","MAX_FAILURE","ERROR","ALTERNATE","DEPENDENCY","REMOTE_TEMPLATE","QUOTA_SIZE","QUOTA_USED","MOUNTID","TRANSMIT_MODE","ASYNC_BLOCKS","AFFIRM","TYPE","VALID_NOW","VALID_TYPE","VALID_ROLE","DB_UNIQUE_NAME","VERIFY","EXPEDITE" from gv$archive_dest;

CREATE OR REPLACE FORCE VIEW "GV_$ARCHIVE_DEST_STATUS"("INST_ID","DEST_ID","DEST_NAME","STATUS","TYPE","DATABASE_MODE","RECOVERY_MODE","PROTECTION_MODE","DESTINATION","STANDBY_LOGFILE_COUNT","STANDBY_LOGFILE_ACTIVE","ARCHIVED_THREAD#","ARCHIVED_SEQ#","APPLIED_THREAD#","APPLIED_SEQ#","ERROR","SRL","DB_UNIQUE_NAME") AS 
select "INST_ID","DEST_ID","DEST_NAME","STATUS","TYPE","DATABASE_MODE","RECOVERY_MODE","PROTECTION_MODE","DESTINATION","STANDBY_LOGFILE_COUNT","STANDBY_LOGFILE_ACTIVE","ARCHIVED_THREAD#","ARCHIVED_SEQ#","APPLIED_THREAD#","APPLIED_SEQ#","ERROR","SRL","DB_UNIQUE_NAME" from gv$archive_dest_status;

CREATE OR REPLACE FORCE VIEW "GV_$ARCHIVE_GAP"("INST_ID","THREAD#","LOW_SEQUENCE#","HIGH_SEQUENCE#") AS 
select "INST_ID","THREAD#","LOW_SEQUENCE#","HIGH_SEQUENCE#" from gv$archive_gap;

CREATE OR REPLACE FORCE VIEW "GV_$ARCHIVE_PROCESSES"("INST_ID","PROCESS","STATUS","LOG_SEQUENCE","STATE") AS 
select "INST_ID","PROCESS","STATUS","LOG_SEQUENCE","STATE" from gv$archive_processes;

CREATE OR REPLACE FORCE VIEW "GV_$ASM_ALIAS"("INST_ID","NAME","GROUP_NUMBER","FILE_NUMBER","FILE_INCARNATION","ALIAS_INDEX","ALIAS_INCARNATION","PARENT_INDEX","REFERENCE_INDEX","ALIAS_DIRECTORY","SYSTEM_CREATED") AS 
SELECT "INST_ID","NAME","GROUP_NUMBER","FILE_NUMBER","FILE_INCARNATION","ALIAS_INDEX","ALIAS_INCARNATION","PARENT_INDEX","REFERENCE_INDEX","ALIAS_DIRECTORY","SYSTEM_CREATED" FROM gv$asm_alias;

CREATE OR REPLACE FORCE VIEW "GV_$ASM_CLIENT"("INST_ID","GROUP_NUMBER","INSTANCE_NAME","DB_NAME","STATUS") AS 
SELECT "INST_ID","GROUP_NUMBER","INSTANCE_NAME","DB_NAME","STATUS" FROM gv$asm_client;

CREATE OR REPLACE FORCE VIEW "GV_$ASM_DISK"("INST_ID","GROUP_NUMBER","DISK_NUMBER","COMPOUND_INDEX","INCARNATION","MOUNT_STATUS","HEADER_STATUS","MODE_STATUS","STATE","REDUNDANCY","LIBRARY","TOTAL_MB","FREE_MB","NAME","FAILGROUP","LABEL","PATH","UDID","CREATE_DATE","MOUNT_DATE","REPAIR_TIMER","READS","WRITES","READ_ERRS","WRITE_ERRS","READ_TIME","WRITE_TIME","BYTES_READ","BYTES_WRITTEN") AS 
SELECT "INST_ID","GROUP_NUMBER","DISK_NUMBER","COMPOUND_INDEX","INCARNATION","MOUNT_STATUS","HEADER_STATUS","MODE_STATUS","STATE","REDUNDANCY","LIBRARY","TOTAL_MB","FREE_MB","NAME","FAILGROUP","LABEL","PATH","UDID","CREATE_DATE","MOUNT_DATE","REPAIR_TIMER","READS","WRITES","READ_ERRS","WRITE_ERRS","READ_TIME","WRITE_TIME","BYTES_READ","BYTES_WRITTEN" FROM gv$asm_disk;

CREATE OR REPLACE FORCE VIEW "GV_$ASM_DISKGROUP"("INST_ID","GROUP_NUMBER","NAME","SECTOR_SIZE","BLOCK_SIZE","ALLOCATION_UNIT_SIZE","STATE","TYPE","TOTAL_MB","FREE_MB") AS 
SELECT "INST_ID","GROUP_NUMBER","NAME","SECTOR_SIZE","BLOCK_SIZE","ALLOCATION_UNIT_SIZE","STATE","TYPE","TOTAL_MB","FREE_MB" FROM gv$asm_diskgroup;

CREATE OR REPLACE FORCE VIEW "GV_$ASM_FILE"("INST_ID","GROUP_NUMBER","FILE_NUMBER","COMPOUND_INDEX","INCARNATION","BLOCK_SIZE","BLOCKS","BYTES","SPACE","TYPE","REDUNDANCY","STRIPED","CREATION_DATE","MODIFICATION_DATE") AS 
SELECT "INST_ID","GROUP_NUMBER","FILE_NUMBER","COMPOUND_INDEX","INCARNATION","BLOCK_SIZE","BLOCKS","BYTES","SPACE","TYPE","REDUNDANCY","STRIPED","CREATION_DATE","MODIFICATION_DATE" FROM gv$asm_file;

CREATE OR REPLACE FORCE VIEW "GV_$ASM_OPERATION"("INST_ID","GROUP_NUMBER","OPERATION","STATE","POWER","ACTUAL","SOFAR","EST_WORK","EST_RATE","EST_MINUTES") AS 
SELECT "INST_ID","GROUP_NUMBER","OPERATION","STATE","POWER","ACTUAL","SOFAR","EST_WORK","EST_RATE","EST_MINUTES" FROM gv$asm_operation;

CREATE OR REPLACE FORCE VIEW "GV_$ASM_TEMPLATE"("INST_ID","GROUP_NUMBER","ENTRY_NUMBER","REDUNDANCY","STRIPE","SYSTEM","NAME") AS 
SELECT "INST_ID","GROUP_NUMBER","ENTRY_NUMBER","REDUNDANCY","STRIPE","SYSTEM","NAME" FROM gv$asm_template;

CREATE OR REPLACE FORCE VIEW "GV_$AW_AGGREGATE_OP"("INST_ID","NAME","LONGNAME","DEFAULT_WEIGHT") AS 
select "INST_ID","NAME","LONGNAME","DEFAULT_WEIGHT" from gv$aw_aggregate_op;

CREATE OR REPLACE FORCE VIEW "GV_$AW_ALLOCATE_OP"("INST_ID","NAME","LONGNAME") AS 
select "INST_ID","NAME","LONGNAME" from gv$aw_allocate_op;

CREATE OR REPLACE FORCE VIEW "GV_$AW_CALC"("INST_ID","SESSION_ID","AGGREGATE_CACHE_HITS","AGGREGATE_CACHE_MISSES","SESSION_CACHE_HITS","SESSION_CACHE_MISSES","POOL_HITS","POOL_MISSES","POOL_NEW_PAGES","POOL_RECLAIMED_PAGES","CACHE_WRITES","POOL_SIZE","CURR_DML_COMMAND","PREV_DML_COMMAND","AGGR_FUNC_LOGICAL_NA","AGGR_FUNC_PRECOMPUTE","AGGR_FUNC_CALCS") AS 
select "INST_ID","SESSION_ID","AGGREGATE_CACHE_HITS","AGGREGATE_CACHE_MISSES","SESSION_CACHE_HITS","SESSION_CACHE_MISSES","POOL_HITS","POOL_MISSES","POOL_NEW_PAGES","POOL_RECLAIMED_PAGES","CACHE_WRITES","POOL_SIZE","CURR_DML_COMMAND","PREV_DML_COMMAND","AGGR_FUNC_LOGICAL_NA","AGGR_FUNC_PRECOMPUTE","AGGR_FUNC_CALCS" from gv$aw_calc;

CREATE OR REPLACE FORCE VIEW "GV_$AW_LONGOPS"("INST_ID","SESSION_ID","CURSOR_NAME","COMMAND","STATUS","ROWS_PROCESSED","START_TIME") AS 
select "INST_ID","SESSION_ID","CURSOR_NAME","COMMAND","STATUS","ROWS_PROCESSED","START_TIME" from gv$aw_longops;

CREATE OR REPLACE FORCE VIEW "GV_$AW_OLAP"("INST_ID","SESSION_ID","AW_NUMBER","ATTACH_MODE","GENERATION","TEMP_SPACE_PAGES","TEMP_SPACE_READS","LOB_READS","POOL_CHANGED_PAGES","POOL_UNCHANGED_PAGES") AS 
select "INST_ID","SESSION_ID","AW_NUMBER","ATTACH_MODE","GENERATION","TEMP_SPACE_PAGES","TEMP_SPACE_READS","LOB_READS","POOL_CHANGED_PAGES","POOL_UNCHANGED_PAGES" from gv$aw_olap;

CREATE OR REPLACE FORCE VIEW "GV_$AW_SESSION_INFO"("INST_ID","SESSION_ID","CLIENT_TYPE","SESSION_STATE","SESSION_HANDLE","USERID","TOTAL_TRANSACTION","TOTAL_TRANSACTION_TIME","AVERAGE_TRANSACTION_TIME","TRANSACTION_CPU_TIME","TOTAL_TRANSACTION_CPU_TIME","AVERAGE_TRANSACTION_CPU_TIME") AS 
select "INST_ID","SESSION_ID","CLIENT_TYPE","SESSION_STATE","SESSION_HANDLE","USERID","TOTAL_TRANSACTION","TOTAL_TRANSACTION_TIME","AVERAGE_TRANSACTION_TIME","TRANSACTION_CPU_TIME","TOTAL_TRANSACTION_CPU_TIME","AVERAGE_TRANSACTION_CPU_TIME" from gv$aw_session_info;

CREATE OR REPLACE FORCE VIEW "GV_$BACKUP"("INST_ID","FILE#","STATUS","CHANGE#","TIME") AS 
select "INST_ID","FILE#","STATUS","CHANGE#","TIME" from gv$backup;

CREATE OR REPLACE FORCE VIEW "GV_$BACKUP_ASYNC_IO"("INST_ID","SID","SERIAL","USE_COUNT","RMAN_STATUS_RECID","RMAN_STATUS_STAMP","DEVICE_TYPE","TYPE","STATUS","FILENAME","SET_COUNT","SET_STAMP","BUFFER_SIZE","BUFFER_COUNT","TOTAL_BYTES","OPEN_TIME","CLOSE_TIME","ELAPSED_TIME","MAXOPENFILES","BYTES","EFFECTIVE_BYTES_PER_SECOND","IO_COUNT","READY","SHORT_WAITS","SHORT_WAIT_TIME_TOTAL","SHORT_WAIT_TIME_MAX","LONG_WAITS","LONG_WAIT_TIME_TOTAL","LONG_WAIT_TIME_MAX") AS 
select "INST_ID","SID","SERIAL","USE_COUNT","RMAN_STATUS_RECID","RMAN_STATUS_STAMP","DEVICE_TYPE","TYPE","STATUS","FILENAME","SET_COUNT","SET_STAMP","BUFFER_SIZE","BUFFER_COUNT","TOTAL_BYTES","OPEN_TIME","CLOSE_TIME","ELAPSED_TIME","MAXOPENFILES","BYTES","EFFECTIVE_BYTES_PER_SECOND","IO_COUNT","READY","SHORT_WAITS","SHORT_WAIT_TIME_TOTAL","SHORT_WAIT_TIME_MAX","LONG_WAITS","LONG_WAIT_TIME_TOTAL","LONG_WAIT_TIME_MAX" from gv$backup_async_io;

CREATE OR REPLACE FORCE VIEW "GV_$BACKUP_CORRUPTION"("INST_ID","RECID","STAMP","SET_STAMP","SET_COUNT","PIECE#","FILE#","BLOCK#","BLOCKS","CORRUPTION_CHANGE#","MARKED_CORRUPT","CORRUPTION_TYPE") AS 
select "INST_ID","RECID","STAMP","SET_STAMP","SET_COUNT","PIECE#","FILE#","BLOCK#","BLOCKS","CORRUPTION_CHANGE#","MARKED_CORRUPT","CORRUPTION_TYPE" from gv$backup_corruption;

CREATE OR REPLACE FORCE VIEW "GV_$BACKUP_DATAFILE"("INST_ID","RECID","STAMP","SET_STAMP","SET_COUNT","FILE#","CREATION_CHANGE#","CREATION_TIME","RESETLOGS_CHANGE#","RESETLOGS_TIME","INCREMENTAL_LEVEL","INCREMENTAL_CHANGE#","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","ABSOLUTE_FUZZY_CHANGE#","MARKED_CORRUPT","MEDIA_CORRUPT","LOGICALLY_CORRUPT","DATAFILE_BLOCKS","BLOCKS","BLOCK_SIZE","OLDEST_OFFLINE_RANGE","COMPLETION_TIME","CONTROLFILE_TYPE","USED_CHANGE_TRACKING","BLOCKS_READ") AS 
select "INST_ID","RECID","STAMP","SET_STAMP","SET_COUNT","FILE#","CREATION_CHANGE#","CREATION_TIME","RESETLOGS_CHANGE#","RESETLOGS_TIME","INCREMENTAL_LEVEL","INCREMENTAL_CHANGE#","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","ABSOLUTE_FUZZY_CHANGE#","MARKED_CORRUPT","MEDIA_CORRUPT","LOGICALLY_CORRUPT","DATAFILE_BLOCKS","BLOCKS","BLOCK_SIZE","OLDEST_OFFLINE_RANGE","COMPLETION_TIME","CONTROLFILE_TYPE","USED_CHANGE_TRACKING","BLOCKS_READ" from gv$backup_datafile;

CREATE OR REPLACE FORCE VIEW "GV_$BACKUP_DEVICE"("INST_ID","DEVICE_TYPE","DEVICE_NAME") AS 
select "INST_ID","DEVICE_TYPE","DEVICE_NAME" from gv$backup_device;

CREATE OR REPLACE FORCE VIEW "GV_$BACKUP_PIECE"("INST_ID","RECID","STAMP","SET_STAMP","SET_COUNT","PIECE#","COPY#","DEVICE_TYPE","HANDLE","COMMENTS","MEDIA","MEDIA_POOL","CONCUR","TAG","STATUS","DELETED","START_TIME","COMPLETION_TIME","ELAPSED_SECONDS","BYTES","IS_RECOVERY_DEST_FILE","RMAN_STATUS_RECID","RMAN_STATUS_STAMP","COMPRESSED") AS 
select "INST_ID","RECID","STAMP","SET_STAMP","SET_COUNT","PIECE#","COPY#","DEVICE_TYPE","HANDLE","COMMENTS","MEDIA","MEDIA_POOL","CONCUR","TAG","STATUS","DELETED","START_TIME","COMPLETION_TIME","ELAPSED_SECONDS","BYTES","IS_RECOVERY_DEST_FILE","RMAN_STATUS_RECID","RMAN_STATUS_STAMP","COMPRESSED" from gv$backup_piece;

CREATE OR REPLACE FORCE VIEW "GV_$BACKUP_REDOLOG"("INST_ID","RECID","STAMP","SET_STAMP","SET_COUNT","THREAD#","SEQUENCE#","RESETLOGS_CHANGE#","RESETLOGS_TIME","FIRST_CHANGE#","FIRST_TIME","NEXT_CHANGE#","NEXT_TIME","BLOCKS","BLOCK_SIZE") AS 
select "INST_ID","RECID","STAMP","SET_STAMP","SET_COUNT","THREAD#","SEQUENCE#","RESETLOGS_CHANGE#","RESETLOGS_TIME","FIRST_CHANGE#","FIRST_TIME","NEXT_CHANGE#","NEXT_TIME","BLOCKS","BLOCK_SIZE" from gv$backup_redolog;

CREATE OR REPLACE FORCE VIEW "GV_$BACKUP_SET"("INST_ID","RECID","STAMP","SET_STAMP","SET_COUNT","BACKUP_TYPE","CONTROLFILE_INCLUDED","INCREMENTAL_LEVEL","PIECES","START_TIME","COMPLETION_TIME","ELAPSED_SECONDS","BLOCK_SIZE","INPUT_FILE_SCAN_ONLY","KEEP","KEEP_UNTIL","KEEP_OPTIONS") AS 
select "INST_ID","RECID","STAMP","SET_STAMP","SET_COUNT","BACKUP_TYPE","CONTROLFILE_INCLUDED","INCREMENTAL_LEVEL","PIECES","START_TIME","COMPLETION_TIME","ELAPSED_SECONDS","BLOCK_SIZE","INPUT_FILE_SCAN_ONLY","KEEP","KEEP_UNTIL","KEEP_OPTIONS" from gv$backup_set;

CREATE OR REPLACE FORCE VIEW "GV_$BACKUP_SPFILE"("INST_ID","RECID","STAMP","SET_STAMP","SET_COUNT","MODIFICATION_TIME","BYTES","COMPLETION_TIME") AS 
select "INST_ID","RECID","STAMP","SET_STAMP","SET_COUNT","MODIFICATION_TIME","BYTES","COMPLETION_TIME" from gv$backup_spfile;

CREATE OR REPLACE FORCE VIEW "GV_$BACKUP_SYNC_IO"("INST_ID","SID","SERIAL","USE_COUNT","RMAN_STATUS_RECID","RMAN_STATUS_STAMP","DEVICE_TYPE","TYPE","STATUS","FILENAME","SET_COUNT","SET_STAMP","BUFFER_SIZE","BUFFER_COUNT","TOTAL_BYTES","OPEN_TIME","CLOSE_TIME","ELAPSED_TIME","MAXOPENFILES","BYTES","EFFECTIVE_BYTES_PER_SECOND","IO_COUNT","IO_TIME_TOTAL","IO_TIME_MAX","DISCRETE_BYTES_PER_SECOND") AS 
select "INST_ID","SID","SERIAL","USE_COUNT","RMAN_STATUS_RECID","RMAN_STATUS_STAMP","DEVICE_TYPE","TYPE","STATUS","FILENAME","SET_COUNT","SET_STAMP","BUFFER_SIZE","BUFFER_COUNT","TOTAL_BYTES","OPEN_TIME","CLOSE_TIME","ELAPSED_TIME","MAXOPENFILES","BYTES","EFFECTIVE_BYTES_PER_SECOND","IO_COUNT","IO_TIME_TOTAL","IO_TIME_MAX","DISCRETE_BYTES_PER_SECOND" from gv$backup_sync_io;

CREATE OR REPLACE FORCE VIEW "GV_$BGPROCESS"("INST_ID","PADDR","PSERIAL#","NAME","DESCRIPTION","ERROR") AS 
select "INST_ID","PADDR","PSERIAL#","NAME","DESCRIPTION","ERROR" from gv$bgprocess;

CREATE OR REPLACE FORCE VIEW "GV_$BH"("INST_ID","FILE#","BLOCK#","CLASS#","STATUS","XNC","FORCED_READS","FORCED_WRITES","LOCK_ELEMENT_ADDR","LOCK_ELEMENT_NAME","LOCK_ELEMENT_CLASS","DIRTY","TEMP","PING","STALE","DIRECT","NEW","OBJD","TS#") AS 
select "INST_ID","FILE#","BLOCK#","CLASS#","STATUS","XNC","FORCED_READS","FORCED_WRITES","LOCK_ELEMENT_ADDR","LOCK_ELEMENT_NAME","LOCK_ELEMENT_CLASS","DIRTY","TEMP","PING","STALE","DIRECT","NEW","OBJD","TS#" from gv$bh;

CREATE OR REPLACE FORCE VIEW "GV_$BSP"("INST_ID","CR_REQUESTS","CURRENT_REQUESTS","DATA_REQUESTS","UNDO_REQUESTS","TX_REQUESTS","CURRENT_RESULTS","PRIVATE_RESULTS","ZERO_RESULTS","DISK_READ_RESULTS","FAIL_RESULTS","FAIRNESS_DOWN_CONVERTS","FAIRNESS_CLEARS","FREE_LOCK_ELEMENTS","FLUSHES","FLUSHES_QUEUED","FLUSH_QUEUE_FULL","FLUSH_MAX_TIME","LIGHT_WORKS","ERRORS") AS 
select "INST_ID","CR_REQUESTS","CURRENT_REQUESTS","DATA_REQUESTS","UNDO_REQUESTS","TX_REQUESTS","CURRENT_RESULTS","PRIVATE_RESULTS","ZERO_RESULTS","DISK_READ_RESULTS","FAIL_RESULTS","FAIRNESS_DOWN_CONVERTS","FAIRNESS_CLEARS","FREE_LOCK_ELEMENTS","FLUSHES","FLUSHES_QUEUED","FLUSH_QUEUE_FULL","FLUSH_MAX_TIME","LIGHT_WORKS","ERRORS" from gv$bsp;

CREATE OR REPLACE FORCE VIEW "GV_$BUFFERED_PUBLISHERS"("INST_ID","QUEUE_ID","QUEUE_SCHEMA","QUEUE_NAME","SENDER_NAME","SENDER_ADDRESS","SENDER_PROTOCOL","NUM_MSGS","CNUM_MSGS","LAST_ENQUEUED_MSG") AS 
select "INST_ID","QUEUE_ID","QUEUE_SCHEMA","QUEUE_NAME","SENDER_NAME","SENDER_ADDRESS","SENDER_PROTOCOL","NUM_MSGS","CNUM_MSGS","LAST_ENQUEUED_MSG" from gv$buffered_publishers;

CREATE OR REPLACE FORCE VIEW "GV_$BUFFERED_QUEUES"("INST_ID","QUEUE_ID","QUEUE_SCHEMA","QUEUE_NAME","STARTUP_TIME","NUM_MSGS","SPILL_MSGS","CNUM_MSGS","CSPILL_MSGS") AS 
select "INST_ID","QUEUE_ID","QUEUE_SCHEMA","QUEUE_NAME","STARTUP_TIME","NUM_MSGS","SPILL_MSGS","CNUM_MSGS","CSPILL_MSGS" from gv$buffered_queues;

CREATE OR REPLACE FORCE VIEW "GV_$BUFFERED_SUBSCRIBERS"("INST_ID","QUEUE_ID","QUEUE_SCHEMA","QUEUE_NAME","SUBSCRIBER_ID","SUBSCRIBER_NAME","SUBSCRIBER_ADDRESS","PROTOCOL","SUBSCRIBER_TYPE","STARTUP_TIME","LAST_BROWSED_SEQ","LAST_BROWSED_NUM","LAST_DEQUEUED_SEQ","LAST_DEQUEUED_NUM","CURRENT_ENQ_SEQ","NUM_MSGS","CNUM_MSGS","TOTAL_DEQUEUED_MSG","TOTAL_SPILLED_MSG") AS 
select "INST_ID","QUEUE_ID","QUEUE_SCHEMA","QUEUE_NAME","SUBSCRIBER_ID","SUBSCRIBER_NAME","SUBSCRIBER_ADDRESS","PROTOCOL","SUBSCRIBER_TYPE","STARTUP_TIME","LAST_BROWSED_SEQ","LAST_BROWSED_NUM","LAST_DEQUEUED_SEQ","LAST_DEQUEUED_NUM","CURRENT_ENQ_SEQ","NUM_MSGS","CNUM_MSGS","TOTAL_DEQUEUED_MSG","TOTAL_SPILLED_MSG" from gv$buffered_subscribers;

CREATE OR REPLACE FORCE VIEW "GV_$BUFFER_POOL"("INST_ID","ID","NAME","BLOCK_SIZE","RESIZE_STATE","CURRENT_SIZE","BUFFERS","TARGET_SIZE","TARGET_BUFFERS","PREV_SIZE","PREV_BUFFERS","LO_BNUM","HI_BNUM","LO_SETID","HI_SETID","SET_COUNT") AS 
select "INST_ID","ID","NAME","BLOCK_SIZE","RESIZE_STATE","CURRENT_SIZE","BUFFERS","TARGET_SIZE","TARGET_BUFFERS","PREV_SIZE","PREV_BUFFERS","LO_BNUM","HI_BNUM","LO_SETID","HI_SETID","SET_COUNT" from gv$buffer_pool;

CREATE OR REPLACE FORCE VIEW "GV_$BUFFER_POOL_STATISTICS"("INST_ID","ID","NAME","BLOCK_SIZE","SET_MSIZE","CNUM_REPL","CNUM_WRITE","CNUM_SET","BUF_GOT","SUM_WRITE","SUM_SCAN","FREE_BUFFER_WAIT","WRITE_COMPLETE_WAIT","BUFFER_BUSY_WAIT","FREE_BUFFER_INSPECTED","DIRTY_BUFFERS_INSPECTED","DB_BLOCK_CHANGE","DB_BLOCK_GETS","CONSISTENT_GETS","PHYSICAL_READS","PHYSICAL_WRITES") AS 
select "INST_ID","ID","NAME","BLOCK_SIZE","SET_MSIZE","CNUM_REPL","CNUM_WRITE","CNUM_SET","BUF_GOT","SUM_WRITE","SUM_SCAN","FREE_BUFFER_WAIT","WRITE_COMPLETE_WAIT","BUFFER_BUSY_WAIT","FREE_BUFFER_INSPECTED","DIRTY_BUFFERS_INSPECTED","DB_BLOCK_CHANGE","DB_BLOCK_GETS","CONSISTENT_GETS","PHYSICAL_READS","PHYSICAL_WRITES" from gv$buffer_pool_statistics;

CREATE OR REPLACE FORCE VIEW "GV_$CIRCUIT"("INST_ID","CIRCUIT","DISPATCHER","SERVER","WAITER","SADDR","STATUS","QUEUE","MESSAGE0","MESSAGE1","MESSAGE2","MESSAGE3","MESSAGES","BYTES","BREAKS","PRESENTATION","PCIRCUIT") AS 
select "INST_ID","CIRCUIT","DISPATCHER","SERVER","WAITER","SADDR","STATUS","QUEUE","MESSAGE0","MESSAGE1","MESSAGE2","MESSAGE3","MESSAGES","BYTES","BREAKS","PRESENTATION","PCIRCUIT" from gv$circuit;

CREATE OR REPLACE FORCE VIEW "GV_$CLASS_CACHE_TRANSFER"("INST_ID","CLASS","X_2_NULL","X_2_NULL_FORCED_WRITE","X_2_NULL_FORCED_STALE","X_2_S","X_2_S_FORCED_WRITE","S_2_NULL","S_2_NULL_FORCED_STALE","NULL_2_X","S_2_X","NULL_2_S","CR_TRANSFER","CURRENT_TRANSFER") AS 
select "INST_ID","CLASS","X_2_NULL","X_2_NULL_FORCED_WRITE","X_2_NULL_FORCED_STALE","X_2_S","X_2_S_FORCED_WRITE","S_2_NULL","S_2_NULL_FORCED_STALE","NULL_2_X","S_2_X","NULL_2_S","CR_TRANSFER","CURRENT_TRANSFER" from gv$class_cache_transfer;

CREATE OR REPLACE FORCE VIEW "GV_$CLASS_PING"("INST_ID","CLASS","X_2_NULL","X_2_NULL_FORCED_WRITE","X_2_NULL_FORCED_STALE","X_2_S","X_2_S_FORCED_WRITE","X_2_SSX","X_2_SSX_FORCED_WRITE","S_2_NULL","S_2_NULL_FORCED_STALE","SS_2_NULL","SS_2_RLS","OP_2_SS","NULL_2_X","S_2_X","SSX_2_X","NULL_2_S","NULL_2_SS") AS 
select "INST_ID","CLASS","X_2_NULL","X_2_NULL_FORCED_WRITE","X_2_NULL_FORCED_STALE","X_2_S","X_2_S_FORCED_WRITE","X_2_SSX","X_2_SSX_FORCED_WRITE","S_2_NULL","S_2_NULL_FORCED_STALE","SS_2_NULL","SS_2_RLS","OP_2_SS","NULL_2_X","S_2_X","SSX_2_X","NULL_2_S","NULL_2_SS" from gv$class_ping;

CREATE OR REPLACE FORCE VIEW "GV_$CLIENT_STATS"("INST_ID","CLIENT_IDENTIFIER","STAT_ID","STAT_NAME","VALUE") AS 
select "INST_ID","CLIENT_IDENTIFIER","STAT_ID","STAT_NAME","VALUE" from gv$client_stats;

CREATE OR REPLACE FORCE VIEW "GV_$CONTEXT"("NAMESPACE","ATTRIBUTE","VALUE") AS 
select  SUBSTR(namespace,1,30) "NAMESPACE",
         SUBSTR(attribute,1,30)  "ATTRIBUTE",
         value "VALUE" from gv$context;

CREATE OR REPLACE FORCE VIEW "GV_$CONTROLFILE"("INST_ID","STATUS","NAME","IS_RECOVERY_DEST_FILE") AS 
select "INST_ID","STATUS","NAME","IS_RECOVERY_DEST_FILE" from gv$controlfile;

CREATE OR REPLACE FORCE VIEW "GV_$CONTROLFILE_RECORD_SECTION"("INST_ID","TYPE","RECORD_SIZE","RECORDS_TOTAL","RECORDS_USED","FIRST_INDEX","LAST_INDEX","LAST_RECID") AS 
select "INST_ID","TYPE","RECORD_SIZE","RECORDS_TOTAL","RECORDS_USED","FIRST_INDEX","LAST_INDEX","LAST_RECID" from gv$controlfile_record_section;

CREATE OR REPLACE FORCE VIEW "GV_$COPY_CORRUPTION"("INST_ID","RECID","STAMP","COPY_RECID","COPY_STAMP","FILE#","BLOCK#","BLOCKS","CORRUPTION_CHANGE#","MARKED_CORRUPT","CORRUPTION_TYPE") AS 
select "INST_ID","RECID","STAMP","COPY_RECID","COPY_STAMP","FILE#","BLOCK#","BLOCKS","CORRUPTION_CHANGE#","MARKED_CORRUPT","CORRUPTION_TYPE" from gv$copy_corruption;

CREATE OR REPLACE FORCE VIEW "GV_$CR_BLOCK_SERVER"("INST_ID","CR_REQUESTS","CURRENT_REQUESTS","DATA_REQUESTS","UNDO_REQUESTS","TX_REQUESTS","CURRENT_RESULTS","PRIVATE_RESULTS","ZERO_RESULTS","DISK_READ_RESULTS","FAIL_RESULTS","FAIRNESS_DOWN_CONVERTS","FAIRNESS_CLEARS","FREE_GC_ELEMENTS","FLUSHES","FLUSHES_QUEUED","FLUSH_QUEUE_FULL","FLUSH_MAX_TIME","LIGHT_WORKS","ERRORS") AS 
select "INST_ID","CR_REQUESTS","CURRENT_REQUESTS","DATA_REQUESTS","UNDO_REQUESTS","TX_REQUESTS","CURRENT_RESULTS","PRIVATE_RESULTS","ZERO_RESULTS","DISK_READ_RESULTS","FAIL_RESULTS","FAIRNESS_DOWN_CONVERTS","FAIRNESS_CLEARS","FREE_GC_ELEMENTS","FLUSHES","FLUSHES_QUEUED","FLUSH_QUEUE_FULL","FLUSH_MAX_TIME","LIGHT_WORKS","ERRORS" from gv$cr_block_server;

CREATE OR REPLACE FORCE VIEW "GV_$CURRENT_BLOCK_SERVER"("INST_ID","PIN1","PIN10","PIN100","PIN1000","PIN10000","FLUSH1","FLUSH10","FLUSH100","FLUSH1000","FLUSH10000","WRITE1","WRITE10","WRITE100","WRITE1000","WRITE10000") AS 
select "INST_ID","PIN1","PIN10","PIN100","PIN1000","PIN10000","FLUSH1","FLUSH10","FLUSH100","FLUSH1000","FLUSH10000","WRITE1","WRITE10","WRITE100","WRITE1000","WRITE10000" from gv$current_block_server;

CREATE OR REPLACE FORCE VIEW "GV_$DATABASE"("INST_ID","DBID","NAME","CREATED","RESETLOGS_CHANGE#","RESETLOGS_TIME","PRIOR_RESETLOGS_CHANGE#","PRIOR_RESETLOGS_TIME","LOG_MODE","CHECKPOINT_CHANGE#","ARCHIVE_CHANGE#","CONTROLFILE_TYPE","CONTROLFILE_CREATED","CONTROLFILE_SEQUENCE#","CONTROLFILE_CHANGE#","CONTROLFILE_TIME","OPEN_RESETLOGS","VERSION_TIME","OPEN_MODE","PROTECTION_MODE","PROTECTION_LEVEL","REMOTE_ARCHIVE","ACTIVATION#","SWITCHOVER#","DATABASE_ROLE","ARCHIVELOG_CHANGE#","ARCHIVELOG_COMPRESSION","SWITCHOVER_STATUS","DATAGUARD_BROKER","GUARD_STATUS","SUPPLEMENTAL_LOG_DATA_MIN","SUPPLEMENTAL_LOG_DATA_PK","SUPPLEMENTAL_LOG_DATA_UI","FORCE_LOGGING","PLATFORM_ID","PLATFORM_NAME","RECOVERY_TARGET_INCARNATION#","LAST_OPEN_INCARNATION#","CURRENT_SCN","FLASHBACK_ON","SUPPLEMENTAL_LOG_DATA_FK","SUPPLEMENTAL_LOG_DATA_ALL","DB_UNIQUE_NAME","STANDBY_BECAME_PRIMARY_SCN") AS 
select "INST_ID","DBID","NAME","CREATED","RESETLOGS_CHANGE#","RESETLOGS_TIME","PRIOR_RESETLOGS_CHANGE#","PRIOR_RESETLOGS_TIME","LOG_MODE","CHECKPOINT_CHANGE#","ARCHIVE_CHANGE#","CONTROLFILE_TYPE","CONTROLFILE_CREATED","CONTROLFILE_SEQUENCE#","CONTROLFILE_CHANGE#","CONTROLFILE_TIME","OPEN_RESETLOGS","VERSION_TIME","OPEN_MODE","PROTECTION_MODE","PROTECTION_LEVEL","REMOTE_ARCHIVE","ACTIVATION#","SWITCHOVER#","DATABASE_ROLE","ARCHIVELOG_CHANGE#","ARCHIVELOG_COMPRESSION","SWITCHOVER_STATUS","DATAGUARD_BROKER","GUARD_STATUS","SUPPLEMENTAL_LOG_DATA_MIN","SUPPLEMENTAL_LOG_DATA_PK","SUPPLEMENTAL_LOG_DATA_UI","FORCE_LOGGING","PLATFORM_ID","PLATFORM_NAME","RECOVERY_TARGET_INCARNATION#","LAST_OPEN_INCARNATION#","CURRENT_SCN","FLASHBACK_ON","SUPPLEMENTAL_LOG_DATA_FK","SUPPLEMENTAL_LOG_DATA_ALL","DB_UNIQUE_NAME","STANDBY_BECAME_PRIMARY_SCN" from gv$database;

CREATE OR REPLACE FORCE VIEW "GV_$DATABASE_BLOCK_CORRUPTION"("INST_ID","FILE#","BLOCK#","BLOCKS","CORRUPTION_CHANGE#","CORRUPTION_TYPE") AS 
select "INST_ID","FILE#","BLOCK#","BLOCKS","CORRUPTION_CHANGE#","CORRUPTION_TYPE" from
   gv$database_block_corruption;

CREATE OR REPLACE FORCE VIEW "GV_$DATABASE_INCARNATION"("INST_ID","INCARNATION#","RESETLOGS_CHANGE#","RESETLOGS_TIME","PRIOR_RESETLOGS_CHANGE#","PRIOR_RESETLOGS_TIME","STATUS","RESETLOGS_ID","PRIOR_INCARNATION#") AS 
select "INST_ID","INCARNATION#","RESETLOGS_CHANGE#","RESETLOGS_TIME","PRIOR_RESETLOGS_CHANGE#","PRIOR_RESETLOGS_TIME","STATUS","RESETLOGS_ID","PRIOR_INCARNATION#" from
   gv$database_incarnation;

CREATE OR REPLACE FORCE VIEW "GV_$DATAFILE"("INST_ID","FILE#","CREATION_CHANGE#","CREATION_TIME","TS#","RFILE#","STATUS","ENABLED","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","UNRECOVERABLE_CHANGE#","UNRECOVERABLE_TIME","LAST_CHANGE#","LAST_TIME","OFFLINE_CHANGE#","ONLINE_CHANGE#","ONLINE_TIME","BYTES","BLOCKS","CREATE_BYTES","BLOCK_SIZE","NAME","PLUGGED_IN","BLOCK1_OFFSET","AUX_NAME") AS 
select "INST_ID","FILE#","CREATION_CHANGE#","CREATION_TIME","TS#","RFILE#","STATUS","ENABLED","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","UNRECOVERABLE_CHANGE#","UNRECOVERABLE_TIME","LAST_CHANGE#","LAST_TIME","OFFLINE_CHANGE#","ONLINE_CHANGE#","ONLINE_TIME","BYTES","BLOCKS","CREATE_BYTES","BLOCK_SIZE","NAME","PLUGGED_IN","BLOCK1_OFFSET","AUX_NAME" from gv$datafile;

CREATE OR REPLACE FORCE VIEW "GV_$DATAFILE_COPY"("INST_ID","RECID","STAMP","NAME","TAG","FILE#","RFILE#","CREATION_CHANGE#","CREATION_TIME","RESETLOGS_CHANGE#","RESETLOGS_TIME","INCREMENTAL_LEVEL","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","ABSOLUTE_FUZZY_CHANGE#","RECOVERY_FUZZY_CHANGE#","RECOVERY_FUZZY_TIME","ONLINE_FUZZY","BACKUP_FUZZY","MARKED_CORRUPT","MEDIA_CORRUPT","LOGICALLY_CORRUPT","BLOCKS","BLOCK_SIZE","OLDEST_OFFLINE_RANGE","DELETED","STATUS","COMPLETION_TIME","CONTROLFILE_TYPE","KEEP","KEEP_UNTIL","KEEP_OPTIONS","SCANNED","IS_RECOVERY_DEST_FILE","RMAN_STATUS_RECID","RMAN_STATUS_STAMP") AS 
select "INST_ID","RECID","STAMP","NAME","TAG","FILE#","RFILE#","CREATION_CHANGE#","CREATION_TIME","RESETLOGS_CHANGE#","RESETLOGS_TIME","INCREMENTAL_LEVEL","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","ABSOLUTE_FUZZY_CHANGE#","RECOVERY_FUZZY_CHANGE#","RECOVERY_FUZZY_TIME","ONLINE_FUZZY","BACKUP_FUZZY","MARKED_CORRUPT","MEDIA_CORRUPT","LOGICALLY_CORRUPT","BLOCKS","BLOCK_SIZE","OLDEST_OFFLINE_RANGE","DELETED","STATUS","COMPLETION_TIME","CONTROLFILE_TYPE","KEEP","KEEP_UNTIL","KEEP_OPTIONS","SCANNED","IS_RECOVERY_DEST_FILE","RMAN_STATUS_RECID","RMAN_STATUS_STAMP" from gv$datafile_copy;

CREATE OR REPLACE FORCE VIEW "GV_$DATAFILE_HEADER"("INST_ID","FILE#","STATUS","ERROR","FORMAT","RECOVER","FUZZY","CREATION_CHANGE#","CREATION_TIME","TABLESPACE_NAME","TS#","RFILE#","RESETLOGS_CHANGE#","RESETLOGS_TIME","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","CHECKPOINT_COUNT","BYTES","BLOCKS","NAME") AS 
select "INST_ID","FILE#","STATUS","ERROR","FORMAT","RECOVER","FUZZY","CREATION_CHANGE#","CREATION_TIME","TABLESPACE_NAME","TS#","RFILE#","RESETLOGS_CHANGE#","RESETLOGS_TIME","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","CHECKPOINT_COUNT","BYTES","BLOCKS","NAME" from gv$datafile_header;

CREATE OR REPLACE FORCE VIEW "GV_$DATAGUARD_CONFIG"("DB_UNIQUE_NAME") AS 
select "DB_UNIQUE_NAME" from gv$dataguard_config;

CREATE OR REPLACE FORCE VIEW "GV_$DATAGUARD_STATUS"("INST_ID","FACILITY","SEVERITY","DEST_ID","MESSAGE_NUM","ERROR_CODE","CALLOUT","TIMESTAMP","MESSAGE") AS 
select "INST_ID","FACILITY","SEVERITY","DEST_ID","MESSAGE_NUM","ERROR_CODE","CALLOUT","TIMESTAMP","MESSAGE" from gv$dataguard_status;

CREATE OR REPLACE FORCE VIEW "GV_$DATAPUMP_JOB"("INST_ID","JOB_ID","JOB_NAME","OWNER_NAME","MSG_CTRL_QUEUE","STATUS_QUEUE","OPERATION","JOB_MODE","MASTER_ID","STATE","WORKERS","FLAGS") AS 
SELECT "INST_ID","JOB_ID","JOB_NAME","OWNER_NAME","MSG_CTRL_QUEUE","STATUS_QUEUE","OPERATION","JOB_MODE","MASTER_ID","STATE","WORKERS","FLAGS" FROM SYS.GV$DATAPUMP_JOB;

CREATE OR REPLACE FORCE VIEW "GV_$DATAPUMP_SESSION"("INST_ID","ATTACH_ID","JOB_ID","SADDR") AS 
SELECT "INST_ID","ATTACH_ID","JOB_ID","SADDR" FROM SYS.GV$DATAPUMP_SESSION;

CREATE OR REPLACE FORCE VIEW "GV_$DBFILE"("INST_ID","FILE#","NAME") AS 
select "INST_ID","FILE#","NAME" from gv$dbfile;

CREATE OR REPLACE FORCE VIEW "GV_$DBLINK"("INST_ID","DB_LINK","OWNER_ID","LOGGED_ON","HETEROGENEOUS","PROTOCOL","OPEN_CURSORS","IN_TRANSACTION","UPDATE_SENT","COMMIT_POINT_STRENGTH") AS 
select "INST_ID","DB_LINK","OWNER_ID","LOGGED_ON","HETEROGENEOUS","PROTOCOL","OPEN_CURSORS","IN_TRANSACTION","UPDATE_SENT","COMMIT_POINT_STRENGTH" from gv$dblink;

CREATE OR REPLACE FORCE VIEW "GV_$DB_CACHE_ADVICE"("INST_ID","ID","NAME","BLOCK_SIZE","ADVICE_STATUS","SIZE_FOR_ESTIMATE","SIZE_FACTOR","BUFFERS_FOR_ESTIMATE","ESTD_PHYSICAL_READ_FACTOR","ESTD_PHYSICAL_READS","ESTD_PHYSICAL_READ_TIME","ESTD_PCT_OF_DB_TIME_FOR_READS") AS 
select "INST_ID","ID","NAME","BLOCK_SIZE","ADVICE_STATUS","SIZE_FOR_ESTIMATE","SIZE_FACTOR","BUFFERS_FOR_ESTIMATE","ESTD_PHYSICAL_READ_FACTOR","ESTD_PHYSICAL_READS","ESTD_PHYSICAL_READ_TIME","ESTD_PCT_OF_DB_TIME_FOR_READS" from gv$db_cache_advice;

CREATE OR REPLACE FORCE VIEW "GV_$DB_OBJECT_CACHE"("INST_ID","OWNER","NAME","DB_LINK","NAMESPACE","TYPE","SHARABLE_MEM","LOADS","EXECUTIONS","LOCKS","PINS","KEPT","CHILD_LATCH") AS 
select "INST_ID","OWNER","NAME","DB_LINK","NAMESPACE","TYPE","SHARABLE_MEM","LOADS","EXECUTIONS","LOCKS","PINS","KEPT","CHILD_LATCH" from gv$db_object_cache;

CREATE OR REPLACE FORCE VIEW "GV_$DB_PIPES"("INST_ID","OWNERID","NAME","TYPE","PIPE_SIZE") AS 
select "INST_ID","OWNERID","NAME","TYPE","PIPE_SIZE" from gv$db_pipes;

CREATE OR REPLACE FORCE VIEW "GV_$DELETED_OBJECT"("INST_ID","RECID","STAMP","TYPE","OBJECT_RECID","OBJECT_STAMP","OBJECT_DATA") AS 
select "INST_ID","RECID","STAMP","TYPE","OBJECT_RECID","OBJECT_STAMP","OBJECT_DATA" from gv$deleted_object;

CREATE OR REPLACE FORCE VIEW "GV_$DISPATCHER"("INST_ID","NAME","NETWORK","PADDR","STATUS","ACCEPT","MESSAGES","BYTES","BREAKS","OWNED","CREATED","IDLE","BUSY","LISTENER","CONF_INDX") AS 
select "INST_ID","NAME","NETWORK","PADDR","STATUS","ACCEPT","MESSAGES","BYTES","BREAKS","OWNED","CREATED","IDLE","BUSY","LISTENER","CONF_INDX" from gv$dispatcher;

CREATE OR REPLACE FORCE VIEW "GV_$DISPATCHER_CONFIG"("INST_ID","CONF_INDX","NETWORK","DISPATCHERS","CONNECTIONS","SESSIONS","POOL","TICKS","INBD_TIMOUT","OUTBD_TIMOUT","MULTIPLEX","LISTENER","SERVICE") AS 
select "INST_ID","CONF_INDX","NETWORK","DISPATCHERS","CONNECTIONS","SESSIONS","POOL","TICKS","INBD_TIMOUT","OUTBD_TIMOUT","MULTIPLEX","LISTENER","SERVICE" from gv$dispatcher_config;

CREATE OR REPLACE FORCE VIEW "GV_$DISPATCHER_RATE"("INST_ID","NAME","PADDR","CUR_LOOP_RATE","CUR_EVENT_RATE","CUR_EVENTS_PER_LOOP","CUR_MSG_RATE","CUR_SVR_BUF_RATE","CUR_SVR_BYTE_RATE","CUR_SVR_BYTE_PER_BUF","CUR_CLT_BUF_RATE","CUR_CLT_BYTE_RATE","CUR_CLT_BYTE_PER_BUF","CUR_BUF_RATE","CUR_BYTE_RATE","CUR_BYTE_PER_BUF","CUR_IN_CONNECT_RATE","CUR_OUT_CONNECT_RATE","CUR_RECONNECT_RATE","MAX_LOOP_RATE","MAX_EVENT_RATE","MAX_EVENTS_PER_LOOP","MAX_MSG_RATE","MAX_SVR_BUF_RATE","MAX_SVR_BYTE_RATE","MAX_SVR_BYTE_PER_BUF","MAX_CLT_BUF_RATE","MAX_CLT_BYTE_RATE","MAX_CLT_BYTE_PER_BUF","MAX_BUF_RATE","MAX_BYTE_RATE","MAX_BYTE_PER_BUF","MAX_IN_CONNECT_RATE","MAX_OUT_CONNECT_RATE","MAX_RECONNECT_RATE","AVG_LOOP_RATE","AVG_EVENT_RATE","AVG_EVENTS_PER_LOOP","AVG_MSG_RATE","AVG_SVR_BUF_RATE","AVG_SVR_BYTE_RATE","AVG_SVR_BYTE_PER_BUF","AVG_CLT_BUF_RATE","AVG_CLT_BYTE_RATE","AVG_CLT_BYTE_PER_BUF","AVG_BUF_RATE","AVG_BYTE_RATE","AVG_BYTE_PER_BUF","AVG_IN_CONNECT_RATE","AVG_OUT_CONNECT_RATE","AVG_RECONNECT_RATE","TTL_LOOPS","TTL_MSG","TTL_SVR_BUF","TTL_CLT_BUF","TTL_BUF","TTL_IN_CONNECT","TTL_OUT_CONNECT","TTL_RECONNECT","SCALE_LOOPS","SCALE_MSG","SCALE_SVR_BUF","SCALE_CLT_BUF","SCALE_BUF","SCALE_IN_CONNECT","SCALE_OUT_CONNECT","SCALE_RECONNECT") AS 
select "INST_ID","NAME","PADDR","CUR_LOOP_RATE","CUR_EVENT_RATE","CUR_EVENTS_PER_LOOP","CUR_MSG_RATE","CUR_SVR_BUF_RATE","CUR_SVR_BYTE_RATE","CUR_SVR_BYTE_PER_BUF","CUR_CLT_BUF_RATE","CUR_CLT_BYTE_RATE","CUR_CLT_BYTE_PER_BUF","CUR_BUF_RATE","CUR_BYTE_RATE","CUR_BYTE_PER_BUF","CUR_IN_CONNECT_RATE","CUR_OUT_CONNECT_RATE","CUR_RECONNECT_RATE","MAX_LOOP_RATE","MAX_EVENT_RATE","MAX_EVENTS_PER_LOOP","MAX_MSG_RATE","MAX_SVR_BUF_RATE","MAX_SVR_BYTE_RATE","MAX_SVR_BYTE_PER_BUF","MAX_CLT_BUF_RATE","MAX_CLT_BYTE_RATE","MAX_CLT_BYTE_PER_BUF","MAX_BUF_RATE","MAX_BYTE_RATE","MAX_BYTE_PER_BUF","MAX_IN_CONNECT_RATE","MAX_OUT_CONNECT_RATE","MAX_RECONNECT_RATE","AVG_LOOP_RATE","AVG_EVENT_RATE","AVG_EVENTS_PER_LOOP","AVG_MSG_RATE","AVG_SVR_BUF_RATE","AVG_SVR_BYTE_RATE","AVG_SVR_BYTE_PER_BUF","AVG_CLT_BUF_RATE","AVG_CLT_BYTE_RATE","AVG_CLT_BYTE_PER_BUF","AVG_BUF_RATE","AVG_BYTE_RATE","AVG_BYTE_PER_BUF","AVG_IN_CONNECT_RATE","AVG_OUT_CONNECT_RATE","AVG_RECONNECT_RATE","TTL_LOOPS","TTL_MSG","TTL_SVR_BUF","TTL_CLT_BUF","TTL_BUF","TTL_IN_CONNECT","TTL_OUT_CONNECT","TTL_RECONNECT","SCALE_LOOPS","SCALE_MSG","SCALE_SVR_BUF","SCALE_CLT_BUF","SCALE_BUF","SCALE_IN_CONNECT","SCALE_OUT_CONNECT","SCALE_RECONNECT" from gv$dispatcher_rate;

CREATE OR REPLACE FORCE VIEW "GV_$DLM_ALL_LOCKS"("INST_ID","LOCKP","GRANT_LEVEL","REQUEST_LEVEL","RESOURCE_NAME1","RESOURCE_NAME2","PID","TRANSACTION_ID0","TRANSACTION_ID1","GROUP_ID","OPEN_OPT_DEADLOCK","OPEN_OPT_PERSISTENT","OPEN_OPT_PROCESS_OWNED","OPEN_OPT_NO_XID","CONVERT_OPT_GETVALUE","CONVERT_OPT_PUTVALUE","CONVERT_OPT_NOVALUE","CONVERT_OPT_DUBVALUE","CONVERT_OPT_NOQUEUE","CONVERT_OPT_EXPRESS","CONVERT_OPT_NODEADLOCKWAIT","CONVERT_OPT_NODEADLOCKBLOCK","WHICH_QUEUE","LOCKSTATE","AST_EVENT0","OWNER_NODE","BLOCKED","BLOCKER") AS 
select "INST_ID","LOCKP","GRANT_LEVEL","REQUEST_LEVEL","RESOURCE_NAME1","RESOURCE_NAME2","PID","TRANSACTION_ID0","TRANSACTION_ID1","GROUP_ID","OPEN_OPT_DEADLOCK","OPEN_OPT_PERSISTENT","OPEN_OPT_PROCESS_OWNED","OPEN_OPT_NO_XID","CONVERT_OPT_GETVALUE","CONVERT_OPT_PUTVALUE","CONVERT_OPT_NOVALUE","CONVERT_OPT_DUBVALUE","CONVERT_OPT_NOQUEUE","CONVERT_OPT_EXPRESS","CONVERT_OPT_NODEADLOCKWAIT","CONVERT_OPT_NODEADLOCKBLOCK","WHICH_QUEUE","LOCKSTATE","AST_EVENT0","OWNER_NODE","BLOCKED","BLOCKER" from gv$dlm_all_locks;

CREATE OR REPLACE FORCE VIEW "GV_$DLM_CONVERT_LOCAL"("INST_ID","CONVERT_TYPE","AVERAGE_CONVERT_TIME","CONVERT_COUNT") AS 
select "INST_ID","CONVERT_TYPE","AVERAGE_CONVERT_TIME","CONVERT_COUNT" from gv$dlm_convert_local;

CREATE OR REPLACE FORCE VIEW "GV_$DLM_CONVERT_REMOTE"("INST_ID","CONVERT_TYPE","AVERAGE_CONVERT_TIME","CONVERT_COUNT") AS 
select "INST_ID","CONVERT_TYPE","AVERAGE_CONVERT_TIME","CONVERT_COUNT" from gv$dlm_convert_remote;

CREATE OR REPLACE FORCE VIEW "GV_$DLM_LATCH"("INST_ID","ADDR","LATCH#","LEVEL#","NAME","GETS","MISSES","SLEEPS","IMMEDIATE_GETS","IMMEDIATE_MISSES","WAITERS_WOKEN","WAITS_HOLDING_LATCH","SPIN_GETS","SLEEP1","SLEEP2","SLEEP3","SLEEP4","SLEEP5","SLEEP6","SLEEP7","SLEEP8","SLEEP9","SLEEP10","SLEEP11","WAIT_TIME") AS 
select "INST_ID","ADDR","LATCH#","LEVEL#","NAME","GETS","MISSES","SLEEPS","IMMEDIATE_GETS","IMMEDIATE_MISSES","WAITERS_WOKEN","WAITS_HOLDING_LATCH","SPIN_GETS","SLEEP1","SLEEP2","SLEEP3","SLEEP4","SLEEP5","SLEEP6","SLEEP7","SLEEP8","SLEEP9","SLEEP10","SLEEP11","WAIT_TIME" from gv$dlm_latch;

CREATE OR REPLACE FORCE VIEW "GV_$DLM_LOCKS"("INST_ID","LOCKP","GRANT_LEVEL","REQUEST_LEVEL","RESOURCE_NAME1","RESOURCE_NAME2","PID","TRANSACTION_ID0","TRANSACTION_ID1","GROUP_ID","OPEN_OPT_DEADLOCK","OPEN_OPT_PERSISTENT","OPEN_OPT_PROCESS_OWNED","OPEN_OPT_NO_XID","CONVERT_OPT_GETVALUE","CONVERT_OPT_PUTVALUE","CONVERT_OPT_NOVALUE","CONVERT_OPT_DUBVALUE","CONVERT_OPT_NOQUEUE","CONVERT_OPT_EXPRESS","CONVERT_OPT_NODEADLOCKWAIT","CONVERT_OPT_NODEADLOCKBLOCK","WHICH_QUEUE","LOCKSTATE","AST_EVENT0","OWNER_NODE","BLOCKED","BLOCKER") AS 
select "INST_ID","LOCKP","GRANT_LEVEL","REQUEST_LEVEL","RESOURCE_NAME1","RESOURCE_NAME2","PID","TRANSACTION_ID0","TRANSACTION_ID1","GROUP_ID","OPEN_OPT_DEADLOCK","OPEN_OPT_PERSISTENT","OPEN_OPT_PROCESS_OWNED","OPEN_OPT_NO_XID","CONVERT_OPT_GETVALUE","CONVERT_OPT_PUTVALUE","CONVERT_OPT_NOVALUE","CONVERT_OPT_DUBVALUE","CONVERT_OPT_NOQUEUE","CONVERT_OPT_EXPRESS","CONVERT_OPT_NODEADLOCKWAIT","CONVERT_OPT_NODEADLOCKBLOCK","WHICH_QUEUE","LOCKSTATE","AST_EVENT0","OWNER_NODE","BLOCKED","BLOCKER" from gv$dlm_locks;

CREATE OR REPLACE FORCE VIEW "GV_$DLM_MISC"("INST_ID","STATISTIC#","NAME","VALUE") AS 
select "INST_ID","STATISTIC#","NAME","VALUE" from gv$dlm_misc;

CREATE OR REPLACE FORCE VIEW "GV_$DLM_RESS"("INST_ID","RESP","RESOURCE_NAME","ON_CONVERT_Q","ON_GRANT_Q","PERSISTENT_RES","MASTER_NODE","NEXT_CVT_LEVEL","VALUE_BLK_STATE","VALUE_BLK") AS 
select "INST_ID","RESP","RESOURCE_NAME","ON_CONVERT_Q","ON_GRANT_Q","PERSISTENT_RES","MASTER_NODE","NEXT_CVT_LEVEL","VALUE_BLK_STATE","VALUE_BLK" from gv$dlm_ress;

CREATE OR REPLACE FORCE VIEW "GV_$DLM_TRAFFIC_CONTROLLER"("INST_ID","LOCAL_NID","REMOTE_NID","REMOTE_RID","REMOTE_INC","TCKT_AVAIL","TCKT_LIMIT","TCKT_RCVD","TCKT_WAIT","SND_SEQ_NO","RCV_SEQ_NO","SND_Q_LEN","SND_Q_MAX","SND_Q_TOT","SND_Q_TM_BASE","SND_Q_TM_WRAP","STATUS","SND_PROXY") AS 
select "INST_ID","LOCAL_NID","REMOTE_NID","REMOTE_RID","REMOTE_INC","TCKT_AVAIL","TCKT_LIMIT","TCKT_RCVD","TCKT_WAIT","SND_SEQ_NO","RCV_SEQ_NO","SND_Q_LEN","SND_Q_MAX","SND_Q_TOT","SND_Q_TM_BASE","SND_Q_TM_WRAP","STATUS","SND_PROXY" from gv$dlm_traffic_controller;

CREATE OR REPLACE FORCE VIEW "GV_$ENABLEDPRIVS"("INST_ID","PRIV_NUMBER") AS 
select "INST_ID","PRIV_NUMBER" from gv$enabledprivs;

CREATE OR REPLACE FORCE VIEW "GV_$ENQUEUE_LOCK"("INST_ID","ADDR","KADDR","SID","TYPE","ID1","ID2","LMODE","REQUEST","CTIME","BLOCK") AS 
select "INST_ID","ADDR","KADDR","SID","TYPE","ID1","ID2","LMODE","REQUEST","CTIME","BLOCK" from gv$enqueue_lock;

CREATE OR REPLACE FORCE VIEW "GV_$ENQUEUE_STAT"("INST_ID","EQ_TYPE","TOTAL_REQ#","TOTAL_WAIT#","SUCC_REQ#","FAILED_REQ#","CUM_WAIT_TIME") AS 
select "INST_ID","EQ_TYPE","TOTAL_REQ#","TOTAL_WAIT#","SUCC_REQ#","FAILED_REQ#","CUM_WAIT_TIME" from gv$enqueue_stat;

CREATE OR REPLACE FORCE VIEW "GV_$ENQUEUE_STATISTICS"("INST_ID","EQ_NAME","EQ_TYPE","REQ_REASON","TOTAL_REQ#","TOTAL_WAIT#","SUCC_REQ#","FAILED_REQ#","CUM_WAIT_TIME","REQ_DESCRIPTION","EVENT#") AS 
select "INST_ID","EQ_NAME","EQ_TYPE","REQ_REASON","TOTAL_REQ#","TOTAL_WAIT#","SUCC_REQ#","FAILED_REQ#","CUM_WAIT_TIME","REQ_DESCRIPTION","EVENT#" from gv$enqueue_statistics;

CREATE OR REPLACE FORCE VIEW "GV_$EVENTMETRIC"("INST_ID","BEGIN_TIME","END_TIME","INTSIZE_CSEC","EVENT#","EVENT_ID","NUM_SESS_WAITING","TIME_WAITED","WAIT_COUNT") AS 
select "INST_ID","BEGIN_TIME","END_TIME","INTSIZE_CSEC","EVENT#","EVENT_ID","NUM_SESS_WAITING","TIME_WAITED","WAIT_COUNT" from gv$eventmetric;

CREATE OR REPLACE FORCE VIEW "GV_$EVENT_HISTOGRAM"("INST_ID","EVENT#","EVENT","WAIT_TIME_MILLI","WAIT_COUNT") AS 
select "INST_ID","EVENT#","EVENT","WAIT_TIME_MILLI","WAIT_COUNT" from gv$event_histogram;

CREATE OR REPLACE FORCE VIEW "GV_$EVENT_NAME"("INST_ID","EVENT#","EVENT_ID","NAME","PARAMETER1","PARAMETER2","PARAMETER3","WAIT_CLASS_ID","WAIT_CLASS#","WAIT_CLASS") AS 
select "INST_ID","EVENT#","EVENT_ID","NAME","PARAMETER1","PARAMETER2","PARAMETER3","WAIT_CLASS_ID","WAIT_CLASS#","WAIT_CLASS" from gv$event_name;

CREATE OR REPLACE FORCE VIEW "GV_$EXECUTION"("INST_ID","PID","DEPTH","FUNCTION","TYPE","NVALS","VAL1","VAL2","SEQH","SEQL") AS 
select "INST_ID","PID","DEPTH","FUNCTION","TYPE","NVALS","VAL1","VAL2","SEQH","SEQL" from gv$execution;

CREATE OR REPLACE FORCE VIEW "GV_$FAST_START_SERVERS"("INST_ID","STATE","UNDOBLOCKSDONE","PID","XID") AS 
select "INST_ID","STATE","UNDOBLOCKSDONE","PID","XID" from gv$fast_start_servers;

CREATE OR REPLACE FORCE VIEW "GV_$FAST_START_TRANSACTIONS"("INST_ID","USN","SLT","SEQ","STATE","UNDOBLOCKSDONE","UNDOBLOCKSTOTAL","PID","CPUTIME","PARENTUSN","PARENTSLT","PARENTSEQ","XID","PXID","RCVSERVERS") AS 
select "INST_ID","USN","SLT","SEQ","STATE","UNDOBLOCKSDONE","UNDOBLOCKSTOTAL","PID","CPUTIME","PARENTUSN","PARENTSLT","PARENTSEQ","XID","PXID","RCVSERVERS" from gv$fast_start_transactions;

CREATE OR REPLACE FORCE VIEW "GV_$FILEMETRIC"("INST_ID","BEGIN_TIME","END_TIME","INTSIZE_CSEC","FILE_ID","CREATION_TIME","AVERAGE_READ_TIME","AVERAGE_WRITE_TIME","PHYSICAL_READS","PHYSICAL_WRITES","PHYSICAL_BLOCK_READS","PHYSICAL_BLOCK_WRITES") AS 
select "INST_ID","BEGIN_TIME","END_TIME","INTSIZE_CSEC","FILE_ID","CREATION_TIME","AVERAGE_READ_TIME","AVERAGE_WRITE_TIME","PHYSICAL_READS","PHYSICAL_WRITES","PHYSICAL_BLOCK_READS","PHYSICAL_BLOCK_WRITES" from gv$filemetric;

CREATE OR REPLACE FORCE VIEW "GV_$FILEMETRIC_HISTORY"("INST_ID","BEGIN_TIME","END_TIME","INTSIZE_CSEC","FILE_ID","CREATION_TIME","AVERAGE_READ_TIME","AVERAGE_WRITE_TIME","PHYSICAL_READS","PHYSICAL_WRITES","PHYSICAL_BLOCK_READS","PHYSICAL_BLOCK_WRITES") AS 
select "INST_ID","BEGIN_TIME","END_TIME","INTSIZE_CSEC","FILE_ID","CREATION_TIME","AVERAGE_READ_TIME","AVERAGE_WRITE_TIME","PHYSICAL_READS","PHYSICAL_WRITES","PHYSICAL_BLOCK_READS","PHYSICAL_BLOCK_WRITES" from gv$filemetric_history;

CREATE OR REPLACE FORCE VIEW "GV_$FILESPACE_USAGE"("INST_ID","TABLESPACE_ID","RFNO","ALLOCATED_SPACE","FILE_SIZE","FILE_MAXSIZE","CHANGESCN_BASE","CHANGESCN_WRAP","FLAG") AS 
select "INST_ID","TABLESPACE_ID","RFNO","ALLOCATED_SPACE","FILE_SIZE","FILE_MAXSIZE","CHANGESCN_BASE","CHANGESCN_WRAP","FLAG" from gv$filespace_usage;

CREATE OR REPLACE FORCE VIEW "GV_$FILESTAT"("INST_ID","FILE#","PHYRDS","PHYWRTS","PHYBLKRD","PHYBLKWRT","SINGLEBLKRDS","READTIM","WRITETIM","SINGLEBLKRDTIM","AVGIOTIM","LSTIOTIM","MINIOTIM","MAXIORTM","MAXIOWTM") AS 
select "INST_ID","FILE#","PHYRDS","PHYWRTS","PHYBLKRD","PHYBLKWRT","SINGLEBLKRDS","READTIM","WRITETIM","SINGLEBLKRDTIM","AVGIOTIM","LSTIOTIM","MINIOTIM","MAXIORTM","MAXIOWTM" from gv$filestat;

CREATE OR REPLACE FORCE VIEW "GV_$FILE_CACHE_TRANSFER"("INST_ID","FILE_NUMBER","X_2_NULL","X_2_NULL_FORCED_WRITE","X_2_NULL_FORCED_STALE","X_2_S","X_2_S_FORCED_WRITE","S_2_NULL","S_2_NULL_FORCED_STALE","RBR","RBR_FORCED_WRITE","RBR_FORCED_STALE","NULL_2_X","S_2_X","NULL_2_S","CR_TRANSFERS","CUR_TRANSFERS") AS 
select "INST_ID","FILE_NUMBER","X_2_NULL","X_2_NULL_FORCED_WRITE","X_2_NULL_FORCED_STALE","X_2_S","X_2_S_FORCED_WRITE","S_2_NULL","S_2_NULL_FORCED_STALE","RBR","RBR_FORCED_WRITE","RBR_FORCED_STALE","NULL_2_X","S_2_X","NULL_2_S","CR_TRANSFERS","CUR_TRANSFERS" from gv$file_cache_transfer;

CREATE OR REPLACE FORCE VIEW "GV_$FILE_HISTOGRAM"("INST_ID","FILE#","SINGLEBLKRDTIM_MILLI","SINGLEBLKRDS") AS 
select "INST_ID","FILE#","SINGLEBLKRDTIM_MILLI","SINGLEBLKRDS" from gv$file_histogram;

CREATE OR REPLACE FORCE VIEW "GV_$FILE_PING"("INST_ID","FILE_NUMBER","FREQUENCY","X_2_NULL","X_2_NULL_FORCED_WRITE","X_2_NULL_FORCED_STALE","X_2_S","X_2_S_FORCED_WRITE","X_2_SSX","X_2_SSX_FORCED_WRITE","S_2_NULL","S_2_NULL_FORCED_STALE","SS_2_NULL","SS_2_RLS","WRB","WRB_FORCED_WRITE","RBR","RBR_FORCED_WRITE","RBR_FORCED_STALE","CBR","CBR_FORCED_WRITE","NULL_2_X","S_2_X","SSX_2_X","NULL_2_S","NULL_2_SS","OP_2_SS") AS 
select "INST_ID","FILE_NUMBER","FREQUENCY","X_2_NULL","X_2_NULL_FORCED_WRITE","X_2_NULL_FORCED_STALE","X_2_S","X_2_S_FORCED_WRITE","X_2_SSX","X_2_SSX_FORCED_WRITE","S_2_NULL","S_2_NULL_FORCED_STALE","SS_2_NULL","SS_2_RLS","WRB","WRB_FORCED_WRITE","RBR","RBR_FORCED_WRITE","RBR_FORCED_STALE","CBR","CBR_FORCED_WRITE","NULL_2_X","S_2_X","SSX_2_X","NULL_2_S","NULL_2_SS","OP_2_SS" from gv$file_ping;

CREATE OR REPLACE FORCE VIEW "GV_$FIXED_TABLE"("INST_ID","NAME","OBJECT_ID","TYPE","TABLE_NUM") AS 
select "INST_ID","NAME","OBJECT_ID","TYPE","TABLE_NUM" from gv$fixed_table;

CREATE OR REPLACE FORCE VIEW "GV_$FIXED_VIEW_DEFINITION"("INST_ID","VIEW_NAME","VIEW_DEFINITION") AS 
select "INST_ID","VIEW_NAME","VIEW_DEFINITION" from gv$fixed_view_definition;

CREATE OR REPLACE FORCE VIEW "GV_$FLASHBACK_DATABASE_LOG"("INST_ID","OLDEST_FLASHBACK_SCN","OLDEST_FLASHBACK_TIME","RETENTION_TARGET","FLASHBACK_SIZE","ESTIMATED_FLASHBACK_SIZE") AS 
select "INST_ID","OLDEST_FLASHBACK_SCN","OLDEST_FLASHBACK_TIME","RETENTION_TARGET","FLASHBACK_SIZE","ESTIMATED_FLASHBACK_SIZE" from gv$flashback_database_log;

CREATE OR REPLACE FORCE VIEW "GV_$FLASHBACK_DATABASE_LOGFILE"("INST_ID","NAME","LOG#","THREAD#","SEQUENCE#","BYTES","FIRST_CHANGE#","FIRST_TIME") AS 
select "INST_ID","NAME","LOG#","THREAD#","SEQUENCE#","BYTES","FIRST_CHANGE#","FIRST_TIME" from gv$flashback_database_logfile;

CREATE OR REPLACE FORCE VIEW "GV_$FLASHBACK_DATABASE_STAT"("INST_ID","BEGIN_TIME","END_TIME","FLASHBACK_DATA","DB_DATA","REDO_DATA","ESTIMATED_FLASHBACK_SIZE") AS 
select "INST_ID","BEGIN_TIME","END_TIME","FLASHBACK_DATA","DB_DATA","REDO_DATA","ESTIMATED_FLASHBACK_SIZE" from gv$flashback_database_stat;

CREATE OR REPLACE FORCE VIEW "GV_$GCSHVMASTER_INFO"("INST_ID","HV_ID","CURRENT_MASTER","PREVIOUS_MASTER","REMASTER_CNT") AS 
select "INST_ID","HV_ID","CURRENT_MASTER","PREVIOUS_MASTER","REMASTER_CNT" from gv$gcshvmaster_info
;

CREATE OR REPLACE FORCE VIEW "GV_$GCSPFMASTER_INFO"("INST_ID","FILE_ID","CURRENT_MASTER","PREVIOUS_MASTER","REMASTER_CNT") AS 
select "INST_ID","FILE_ID","CURRENT_MASTER","PREVIOUS_MASTER","REMASTER_CNT" from gv$gcspfmaster_info;

CREATE OR REPLACE FORCE VIEW "GV_$GC_ELEMENT"("INST_ID","GC_ELEMENT_ADDR","INDX","CLASS","GC_ELEMENT_NAME","MODE_HELD","BLOCK_COUNT","RELEASING","ACQUIRING","WRITING","RECOVERING","LOCAL","FLAGS") AS 
select "INST_ID","GC_ELEMENT_ADDR","INDX","CLASS","GC_ELEMENT_NAME","MODE_HELD","BLOCK_COUNT","RELEASING","ACQUIRING","WRITING","RECOVERING","LOCAL","FLAGS" from gv$gc_element;

CREATE OR REPLACE FORCE VIEW "GV_$GC_ELEMENTS_W_COLLISIONS"("INST_ID","GC_ELEMENT_ADDR") AS 
select "INST_ID","GC_ELEMENT_ADDR" from gv$gc_elements_with_collisions;

CREATE OR REPLACE FORCE VIEW "GV_$GES_BLOCKING_ENQUEUE"("INST_ID","HANDLE","GRANT_LEVEL","REQUEST_LEVEL","RESOURCE_NAME1","RESOURCE_NAME2","PID","TRANSACTION_ID0","TRANSACTION_ID1","GROUP_ID","OPEN_OPT_DEADLOCK","OPEN_OPT_PERSISTENT","OPEN_OPT_PROCESS_OWNED","OPEN_OPT_NO_XID","CONVERT_OPT_GETVALUE","CONVERT_OPT_PUTVALUE","CONVERT_OPT_NOVALUE","CONVERT_OPT_DUBVALUE","CONVERT_OPT_NOQUEUE","CONVERT_OPT_EXPRESS","CONVERT_OPT_NODEADLOCKWAIT","CONVERT_OPT_NODEADLOCKBLOCK","WHICH_QUEUE","STATE","AST_EVENT0","OWNER_NODE","BLOCKED","BLOCKER") AS 
select "INST_ID","HANDLE","GRANT_LEVEL","REQUEST_LEVEL","RESOURCE_NAME1","RESOURCE_NAME2","PID","TRANSACTION_ID0","TRANSACTION_ID1","GROUP_ID","OPEN_OPT_DEADLOCK","OPEN_OPT_PERSISTENT","OPEN_OPT_PROCESS_OWNED","OPEN_OPT_NO_XID","CONVERT_OPT_GETVALUE","CONVERT_OPT_PUTVALUE","CONVERT_OPT_NOVALUE","CONVERT_OPT_DUBVALUE","CONVERT_OPT_NOQUEUE","CONVERT_OPT_EXPRESS","CONVERT_OPT_NODEADLOCKWAIT","CONVERT_OPT_NODEADLOCKBLOCK","WHICH_QUEUE","STATE","AST_EVENT0","OWNER_NODE","BLOCKED","BLOCKER" from gv$ges_blocking_enqueue;

CREATE OR REPLACE FORCE VIEW "GV_$GES_ENQUEUE"("INST_ID","HANDLE","GRANT_LEVEL","REQUEST_LEVEL","RESOURCE_NAME1","RESOURCE_NAME2","PID","TRANSACTION_ID0","TRANSACTION_ID1","GROUP_ID","OPEN_OPT_DEADLOCK","OPEN_OPT_PERSISTENT","OPEN_OPT_PROCESS_OWNED","OPEN_OPT_NO_XID","CONVERT_OPT_GETVALUE","CONVERT_OPT_PUTVALUE","CONVERT_OPT_NOVALUE","CONVERT_OPT_DUBVALUE","CONVERT_OPT_NOQUEUE","CONVERT_OPT_EXPRESS","CONVERT_OPT_NODEADLOCKWAIT","CONVERT_OPT_NODEADLOCKBLOCK","WHICH_QUEUE","STATE","AST_EVENT0","OWNER_NODE","BLOCKED","BLOCKER") AS 
select "INST_ID","HANDLE","GRANT_LEVEL","REQUEST_LEVEL","RESOURCE_NAME1","RESOURCE_NAME2","PID","TRANSACTION_ID0","TRANSACTION_ID1","GROUP_ID","OPEN_OPT_DEADLOCK","OPEN_OPT_PERSISTENT","OPEN_OPT_PROCESS_OWNED","OPEN_OPT_NO_XID","CONVERT_OPT_GETVALUE","CONVERT_OPT_PUTVALUE","CONVERT_OPT_NOVALUE","CONVERT_OPT_DUBVALUE","CONVERT_OPT_NOQUEUE","CONVERT_OPT_EXPRESS","CONVERT_OPT_NODEADLOCKWAIT","CONVERT_OPT_NODEADLOCKBLOCK","WHICH_QUEUE","STATE","AST_EVENT0","OWNER_NODE","BLOCKED","BLOCKER" from gv$ges_enqueue;

CREATE OR REPLACE FORCE VIEW "GV_$GLOBALCONTEXT"("NAMESPACE","ATTRIBUTE","VALUE","USERNAME","CLIENT_IDENTIFIER") AS 
select  SUBSTR(namespace,1,30) "NAMESPACE",
         SUBSTR(attribute,1,30)  "ATTRIBUTE",
         value "VALUE",
         SUBSTR(username,1,30) "USERNAME",
         clientidentifier "CLIENT_IDENTIFIER"
         from gv$globalcontext;

CREATE OR REPLACE FORCE VIEW "GV_$GLOBAL_BLOCKED_LOCKS"("INST_ID","ADDR","KADDR","SID","TYPE","ID1","ID2","LMODE","REQUEST","CTIME") AS 
select "INST_ID","ADDR","KADDR","SID","TYPE","ID1","ID2","LMODE","REQUEST","CTIME" from gv$global_blocked_locks;

CREATE OR REPLACE FORCE VIEW "GV_$GLOBAL_TRANSACTION"("INST_ID","FORMATID","GLOBALID","BRANCHID","BRANCHES","REFCOUNT","PREPARECOUNT","STATE","FLAGS","COUPLING") AS 
select "INST_ID","FORMATID","GLOBALID","BRANCHID","BRANCHES","REFCOUNT","PREPARECOUNT","STATE","FLAGS","COUPLING" from gv$global_transaction;

CREATE OR REPLACE FORCE VIEW "GV_$HS_AGENT"("INST_ID","AGENT_ID","MACHINE","PROCESS","PROGRAM","OSUSER","STARTTIME","AGENT_TYPE","FDS_CLASS_ID","FDS_INST_ID") AS 
select "INST_ID","AGENT_ID","MACHINE","PROCESS","PROGRAM","OSUSER","STARTTIME","AGENT_TYPE","FDS_CLASS_ID","FDS_INST_ID" from gv$hs_agent;

CREATE OR REPLACE FORCE VIEW "GV_$HS_PARAMETER"("INST_ID","HS_SESSION_ID","PARAMETER","VALUE","SOURCE","ENV") AS 
select "INST_ID","HS_SESSION_ID","PARAMETER","VALUE","SOURCE","ENV" from gv$hs_parameter;

CREATE OR REPLACE FORCE VIEW "GV_$HS_SESSION"("INST_ID","HS_SESSION_ID","AGENT_ID","SID","DB_LINK","DB_LINK_OWNER","STARTTIME") AS 
select "INST_ID","HS_SESSION_ID","AGENT_ID","SID","DB_LINK","DB_LINK_OWNER","STARTTIME" from gv$hs_session;

CREATE OR REPLACE FORCE VIEW "GV_$HVMASTER_INFO"("INST_ID","HV_ID","CURRENT_MASTER","PREVIOUS_MASTER","REMASTER_CNT") AS 
select "INST_ID","HV_ID","CURRENT_MASTER","PREVIOUS_MASTER","REMASTER_CNT" from gv$hvmaster_info;

CREATE OR REPLACE FORCE VIEW "GV_$INDEXED_FIXED_COLUMN"("INST_ID","TABLE_NAME","INDEX_NUMBER","COLUMN_NAME","COLUMN_POSITION") AS 
select "INST_ID","TABLE_NAME","INDEX_NUMBER","COLUMN_NAME","COLUMN_POSITION" from gv$indexed_fixed_column;

CREATE OR REPLACE FORCE VIEW "GV_$INSTANCE"("INST_ID","INSTANCE_NUMBER","INSTANCE_NAME","HOST_NAME","VERSION","STARTUP_TIME","STATUS","PARALLEL","THREAD#","ARCHIVER","LOG_SWITCH_WAIT","LOGINS","SHUTDOWN_PENDING","DATABASE_STATUS","INSTANCE_ROLE","ACTIVE_STATE") AS 
select "INST_ID","INSTANCE_NUMBER","INSTANCE_NAME","HOST_NAME","VERSION","STARTUP_TIME","STATUS","PARALLEL","THREAD#","ARCHIVER","LOG_SWITCH_WAIT","LOGINS","SHUTDOWN_PENDING","DATABASE_STATUS","INSTANCE_ROLE","ACTIVE_STATE" from gv$instance;

CREATE OR REPLACE FORCE VIEW "GV_$INSTANCE_CACHE_TRANSFER"("INST_ID","INSTANCE","CLASS","CR_BLOCK","CR_BUSY","CR_CONGESTED","CURRENT_BLOCK","CURRENT_BUSY","CURRENT_CONGESTED") AS 
select "INST_ID","INSTANCE","CLASS","CR_BLOCK","CR_BUSY","CR_CONGESTED","CURRENT_BLOCK","CURRENT_BUSY","CURRENT_CONGESTED" from gv$instance_cache_transfer;

CREATE OR REPLACE FORCE VIEW "GV_$INSTANCE_LOG_GROUP"("INST_ID","THREAD#","STATUS","ENABLED","GROUPS","INSTANCE","OPEN_TIME","CURRENT_GROUP#","SEQUENCE#","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","ENABLE_CHANGE#","ENABLE_TIME","DISABLE_CHANGE#","DISABLE_TIME") AS 
select "INST_ID","THREAD#","STATUS","ENABLED","GROUPS","INSTANCE","OPEN_TIME","CURRENT_GROUP#","SEQUENCE#","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","ENABLE_CHANGE#","ENABLE_TIME","DISABLE_CHANGE#","DISABLE_TIME" from gv$instance_log_group;

CREATE OR REPLACE FORCE VIEW "GV_$INSTANCE_RECOVERY"("INST_ID","RECOVERY_ESTIMATED_IOS","ACTUAL_REDO_BLKS","TARGET_REDO_BLKS","LOG_FILE_SIZE_REDO_BLKS","LOG_CHKPT_TIMEOUT_REDO_BLKS","LOG_CHKPT_INTERVAL_REDO_BLKS","FAST_START_IO_TARGET_REDO_BLKS","TARGET_MTTR","ESTIMATED_MTTR","CKPT_BLOCK_WRITES","OPTIMAL_LOGFILE_SIZE","ESTD_CLUSTER_AVAILABLE_TIME","WRITES_MTTR","WRITES_LOGFILE_SIZE","WRITES_LOG_CHECKPOINT_SETTINGS","WRITES_OTHER_SETTINGS","WRITES_AUTOTUNE","WRITES_FULL_THREAD_CKPT") AS 
select "INST_ID","RECOVERY_ESTIMATED_IOS","ACTUAL_REDO_BLKS","TARGET_REDO_BLKS","LOG_FILE_SIZE_REDO_BLKS","LOG_CHKPT_TIMEOUT_REDO_BLKS","LOG_CHKPT_INTERVAL_REDO_BLKS","FAST_START_IO_TARGET_REDO_BLKS","TARGET_MTTR","ESTIMATED_MTTR","CKPT_BLOCK_WRITES","OPTIMAL_LOGFILE_SIZE","ESTD_CLUSTER_AVAILABLE_TIME","WRITES_MTTR","WRITES_LOGFILE_SIZE","WRITES_LOG_CHECKPOINT_SETTINGS","WRITES_OTHER_SETTINGS","WRITES_AUTOTUNE","WRITES_FULL_THREAD_CKPT" from gv$instance_recovery;

CREATE OR REPLACE FORCE VIEW "GV_$JAVAPOOL"("INST_ID","CATEGORY","MEMUSED") AS 
select "INST_ID","CATEGORY","MEMUSED" from gv$javapool;

CREATE OR REPLACE FORCE VIEW "GV_$JAVA_LIBRARY_CACHE_MEMORY"("INST_ID","LC_NAMESPACE","LC_INUSE_MEMORY_OBJECTS","LC_INUSE_MEMORY_SIZE","LC_FREEABLE_MEMORY_OBJECTS","LC_FREEABLE_MEMORY_SIZE") AS 
select "INST_ID","LC_NAMESPACE","LC_INUSE_MEMORY_OBJECTS","LC_INUSE_MEMORY_SIZE","LC_FREEABLE_MEMORY_OBJECTS","LC_FREEABLE_MEMORY_SIZE" from gv$java_library_cache_memory;

CREATE OR REPLACE FORCE VIEW "GV_$JAVA_POOL_ADVICE"("INST_ID","JAVA_POOL_SIZE_FOR_ESTIMATE","JAVA_POOL_SIZE_FACTOR","ESTD_LC_SIZE","ESTD_LC_MEMORY_OBJECTS","ESTD_LC_TIME_SAVED","ESTD_LC_TIME_SAVED_FACTOR","ESTD_LC_LOAD_TIME","ESTD_LC_LOAD_TIME_FACTOR","ESTD_LC_MEMORY_OBJECT_HITS") AS 
select "INST_ID","JAVA_POOL_SIZE_FOR_ESTIMATE","JAVA_POOL_SIZE_FACTOR","ESTD_LC_SIZE","ESTD_LC_MEMORY_OBJECTS","ESTD_LC_TIME_SAVED","ESTD_LC_TIME_SAVED_FACTOR","ESTD_LC_LOAD_TIME","ESTD_LC_LOAD_TIME_FACTOR","ESTD_LC_MEMORY_OBJECT_HITS" from gv$java_pool_advice;

CREATE OR REPLACE FORCE VIEW "GV_$LATCH"("INST_ID","ADDR","LATCH#","LEVEL#","NAME","HASH","GETS","MISSES","SLEEPS","IMMEDIATE_GETS","IMMEDIATE_MISSES","WAITERS_WOKEN","WAITS_HOLDING_LATCH","SPIN_GETS","SLEEP1","SLEEP2","SLEEP3","SLEEP4","SLEEP5","SLEEP6","SLEEP7","SLEEP8","SLEEP9","SLEEP10","SLEEP11","WAIT_TIME") AS 
select "INST_ID","ADDR","LATCH#","LEVEL#","NAME","HASH","GETS","MISSES","SLEEPS","IMMEDIATE_GETS","IMMEDIATE_MISSES","WAITERS_WOKEN","WAITS_HOLDING_LATCH","SPIN_GETS","SLEEP1","SLEEP2","SLEEP3","SLEEP4","SLEEP5","SLEEP6","SLEEP7","SLEEP8","SLEEP9","SLEEP10","SLEEP11","WAIT_TIME" from gv$latch;

CREATE OR REPLACE FORCE VIEW "GV_$LATCHHOLDER"("INST_ID","PID","SID","LADDR","NAME") AS 
select "INST_ID","PID","SID","LADDR","NAME" from gv$latchholder;

CREATE OR REPLACE FORCE VIEW "GV_$LATCHNAME"("INST_ID","LATCH#","NAME","HASH") AS 
select "INST_ID","LATCH#","NAME","HASH" from gv$latchname;

CREATE OR REPLACE FORCE VIEW "GV_$LATCH_CHILDREN"("INST_ID","ADDR","LATCH#","CHILD#","LEVEL#","NAME","HASH","GETS","MISSES","SLEEPS","IMMEDIATE_GETS","IMMEDIATE_MISSES","WAITERS_WOKEN","WAITS_HOLDING_LATCH","SPIN_GETS","SLEEP1","SLEEP2","SLEEP3","SLEEP4","SLEEP5","SLEEP6","SLEEP7","SLEEP8","SLEEP9","SLEEP10","SLEEP11","WAIT_TIME") AS 
select "INST_ID","ADDR","LATCH#","CHILD#","LEVEL#","NAME","HASH","GETS","MISSES","SLEEPS","IMMEDIATE_GETS","IMMEDIATE_MISSES","WAITERS_WOKEN","WAITS_HOLDING_LATCH","SPIN_GETS","SLEEP1","SLEEP2","SLEEP3","SLEEP4","SLEEP5","SLEEP6","SLEEP7","SLEEP8","SLEEP9","SLEEP10","SLEEP11","WAIT_TIME" from gv$latch_children;

CREATE OR REPLACE FORCE VIEW "GV_$LATCH_MISSES"("INST_ID","PARENT_NAME","WHERE","NWFAIL_COUNT","SLEEP_COUNT","WTR_SLP_COUNT","LONGHOLD_COUNT","LOCATION") AS 
select "INST_ID","PARENT_NAME","WHERE","NWFAIL_COUNT","SLEEP_COUNT","WTR_SLP_COUNT","LONGHOLD_COUNT","LOCATION" from gv$latch_misses;

CREATE OR REPLACE FORCE VIEW "GV_$LATCH_PARENT"("INST_ID","ADDR","LATCH#","LEVEL#","NAME","HASH","GETS","MISSES","SLEEPS","IMMEDIATE_GETS","IMMEDIATE_MISSES","WAITERS_WOKEN","WAITS_HOLDING_LATCH","SPIN_GETS","SLEEP1","SLEEP2","SLEEP3","SLEEP4","SLEEP5","SLEEP6","SLEEP7","SLEEP8","SLEEP9","SLEEP10","SLEEP11","WAIT_TIME") AS 
select "INST_ID","ADDR","LATCH#","LEVEL#","NAME","HASH","GETS","MISSES","SLEEPS","IMMEDIATE_GETS","IMMEDIATE_MISSES","WAITERS_WOKEN","WAITS_HOLDING_LATCH","SPIN_GETS","SLEEP1","SLEEP2","SLEEP3","SLEEP4","SLEEP5","SLEEP6","SLEEP7","SLEEP8","SLEEP9","SLEEP10","SLEEP11","WAIT_TIME" from gv$latch_parent;

CREATE OR REPLACE FORCE VIEW "GV_$LIBRARYCACHE"("INST_ID","NAMESPACE","GETS","GETHITS","GETHITRATIO","PINS","PINHITS","PINHITRATIO","RELOADS","INVALIDATIONS","DLM_LOCK_REQUESTS","DLM_PIN_REQUESTS","DLM_PIN_RELEASES","DLM_INVALIDATION_REQUESTS","DLM_INVALIDATIONS") AS 
select "INST_ID","NAMESPACE","GETS","GETHITS","GETHITRATIO","PINS","PINHITS","PINHITRATIO","RELOADS","INVALIDATIONS","DLM_LOCK_REQUESTS","DLM_PIN_REQUESTS","DLM_PIN_RELEASES","DLM_INVALIDATION_REQUESTS","DLM_INVALIDATIONS" from gv$librarycache;

CREATE OR REPLACE FORCE VIEW "GV_$LIBRARY_CACHE_MEMORY"("INST_ID","LC_NAMESPACE","LC_INUSE_MEMORY_OBJECTS","LC_INUSE_MEMORY_SIZE","LC_FREEABLE_MEMORY_OBJECTS","LC_FREEABLE_MEMORY_SIZE") AS 
select "INST_ID","LC_NAMESPACE","LC_INUSE_MEMORY_OBJECTS","LC_INUSE_MEMORY_SIZE","LC_FREEABLE_MEMORY_OBJECTS","LC_FREEABLE_MEMORY_SIZE" from gv$library_cache_memory;

CREATE OR REPLACE FORCE VIEW "GV_$LICENSE"("INST_ID","SESSIONS_MAX","SESSIONS_WARNING","SESSIONS_CURRENT","SESSIONS_HIGHWATER","USERS_MAX","CPU_COUNT_CURRENT","CPU_COUNT_HIGHWATER") AS 
select "INST_ID","SESSIONS_MAX","SESSIONS_WARNING","SESSIONS_CURRENT","SESSIONS_HIGHWATER","USERS_MAX","CPU_COUNT_CURRENT","CPU_COUNT_HIGHWATER" from gv$license;

CREATE OR REPLACE FORCE VIEW "GV_$LOADISTAT"("INST_ID","OWNER","TABNAME","INDEXNAME","SUBNAME","MESSAGE_NUM","MESSAGE") AS 
select "INST_ID","OWNER","TABNAME","INDEXNAME","SUBNAME","MESSAGE_NUM","MESSAGE" from gv$loadistat;

CREATE OR REPLACE FORCE VIEW "GV_$LOADPSTAT"("INST_ID","OWNER","TABNAME","PARTNAME","LOADED") AS 
select "INST_ID","OWNER","TABNAME","PARTNAME","LOADED" from gv$loadpstat;

CREATE OR REPLACE FORCE VIEW "GV_$LOCK"("INST_ID","ADDR","KADDR","SID","TYPE","ID1","ID2","LMODE","REQUEST","CTIME","BLOCK") AS 
select "INST_ID","ADDR","KADDR","SID","TYPE","ID1","ID2","LMODE","REQUEST","CTIME","BLOCK" from gv$lock;

CREATE OR REPLACE FORCE VIEW "GV_$LOCKED_OBJECT"("INST_ID","XIDUSN","XIDSLOT","XIDSQN","OBJECT_ID","SESSION_ID","ORACLE_USERNAME","OS_USER_NAME","PROCESS","LOCKED_MODE") AS 
select "INST_ID","XIDUSN","XIDSLOT","XIDSQN","OBJECT_ID","SESSION_ID","ORACLE_USERNAME","OS_USER_NAME","PROCESS","LOCKED_MODE" from gv$locked_object;

CREATE OR REPLACE FORCE VIEW "GV_$LOCKS_WITH_COLLISIONS"("INST_ID","LOCK_ELEMENT_ADDR") AS 
select "INST_ID","LOCK_ELEMENT_ADDR" from gv$locks_with_collisions;

CREATE OR REPLACE FORCE VIEW "GV_$LOCK_ACTIVITY"("INST_ID","FROM_VAL","TO_VAL","ACTION_VAL","COUNTER") AS 
select "INST_ID","FROM_VAL","TO_VAL","ACTION_VAL","COUNTER" from gv$lock_activity;

CREATE OR REPLACE FORCE VIEW "GV_$LOCK_ELEMENT"("INST_ID","LOCK_ELEMENT_ADDR","INDX","CLASS","LOCK_ELEMENT_NAME","MODE_HELD","BLOCK_COUNT","RELEASING","ACQUIRING","INVALID","FLAGS") AS 
select "INST_ID","LOCK_ELEMENT_ADDR","INDX","CLASS","LOCK_ELEMENT_NAME","MODE_HELD","BLOCK_COUNT","RELEASING","ACQUIRING","INVALID","FLAGS" from gv$lock_element;

CREATE OR REPLACE FORCE VIEW "GV_$LOCK_TYPE"("INST_ID","TYPE","NAME","ID1_TAG","ID2_TAG","IS_USER","DESCRIPTION") AS 
select "INST_ID","TYPE","NAME","ID1_TAG","ID2_TAG","IS_USER","DESCRIPTION" from gv$lock_type;

CREATE OR REPLACE FORCE VIEW "GV_$LOG"("INST_ID","GROUP#","THREAD#","SEQUENCE#","BYTES","MEMBERS","ARCHIVED","STATUS","FIRST_CHANGE#","FIRST_TIME") AS 
select "INST_ID","GROUP#","THREAD#","SEQUENCE#","BYTES","MEMBERS","ARCHIVED","STATUS","FIRST_CHANGE#","FIRST_TIME" from gv$log;

CREATE OR REPLACE FORCE VIEW "GV_$LOGFILE"("INST_ID","GROUP#","STATUS","TYPE","MEMBER","IS_RECOVERY_DEST_FILE") AS 
select "INST_ID","GROUP#","STATUS","TYPE","MEMBER","IS_RECOVERY_DEST_FILE" from gv$logfile;

CREATE OR REPLACE FORCE VIEW "GV_$LOGHIST"("INST_ID","THREAD#","SEQUENCE#","FIRST_CHANGE#","FIRST_TIME","SWITCH_CHANGE#") AS 
select "INST_ID","THREAD#","SEQUENCE#","FIRST_CHANGE#","FIRST_TIME","SWITCH_CHANGE#" from gv$loghist;

CREATE OR REPLACE FORCE VIEW "GV_$LOGMNR_CALLBACK"("INST_ID","STATE","TYPE","CAPABILITY") AS 
select "INST_ID","STATE","TYPE","CAPABILITY" from gv$logmnr_callback;

CREATE OR REPLACE FORCE VIEW "GV_$LOGMNR_CONTENTS"("INST_ID","SCN","CSCN","TIMESTAMP","COMMIT_TIMESTAMP","THREAD#","LOG_ID","XIDUSN","XIDSLT","XIDSQN","PXIDUSN","PXIDSLT","PXIDSQN","RBASQN","RBABLK","RBABYTE","UBAFIL","UBABLK","UBAREC","UBASQN","ABS_FILE#","REL_FILE#","DATA_BLK#","DATA_OBJ#","DATA_OBJD#","SEG_OWNER","SEG_NAME","TABLE_NAME","SEG_TYPE","SEG_TYPE_NAME","TABLE_SPACE","ROW_ID","SESSION#","SERIAL#","USERNAME","SESSION_INFO","TX_NAME","ROLLBACK","OPERATION","OPERATION_CODE","SQL_REDO","SQL_UNDO","RS_ID","SEQUENCE#","SSN","CSF","INFO","STATUS","REDO_VALUE","UNDO_VALUE","SQL_COLUMN_TYPE","SQL_COLUMN_NAME","REDO_LENGTH","REDO_OFFSET","UNDO_LENGTH","UNDO_OFFSET","DATA_OBJV#","SAFE_RESUME_SCN","XID","PXID","AUDIT_SESSIONID") AS 
select "INST_ID","SCN","CSCN","TIMESTAMP","COMMIT_TIMESTAMP","THREAD#","LOG_ID","XIDUSN","XIDSLT","XIDSQN","PXIDUSN","PXIDSLT","PXIDSQN","RBASQN","RBABLK","RBABYTE","UBAFIL","UBABLK","UBAREC","UBASQN","ABS_FILE#","REL_FILE#","DATA_BLK#","DATA_OBJ#","DATA_OBJD#","SEG_OWNER","SEG_NAME","TABLE_NAME","SEG_TYPE","SEG_TYPE_NAME","TABLE_SPACE","ROW_ID","SESSION#","SERIAL#","USERNAME","SESSION_INFO","TX_NAME","ROLLBACK","OPERATION","OPERATION_CODE","SQL_REDO","SQL_UNDO","RS_ID","SEQUENCE#","SSN","CSF","INFO","STATUS","REDO_VALUE","UNDO_VALUE","SQL_COLUMN_TYPE","SQL_COLUMN_NAME","REDO_LENGTH","REDO_OFFSET","UNDO_LENGTH","UNDO_OFFSET","DATA_OBJV#","SAFE_RESUME_SCN","XID","PXID","AUDIT_SESSIONID" from gv$logmnr_contents;

CREATE OR REPLACE FORCE VIEW "GV_$LOGMNR_DICTIONARY"("INST_ID","DB_NAME","DB_ID","DB_CREATED","TIMESTAMP","RESET_SCN","RESET_SCN_TIME","DB_VERSION_TIME","DB_CHARACTER_SET","DB_VERSION","DB_STATUS","DICTIONARY_SCN","ENABLED_THREAD_MAP","DB_TXN_SCN","FILENAME","INFO","STATUS") AS 
select "INST_ID","DB_NAME","DB_ID","DB_CREATED","TIMESTAMP","RESET_SCN","RESET_SCN_TIME","DB_VERSION_TIME","DB_CHARACTER_SET","DB_VERSION","DB_STATUS","DICTIONARY_SCN","ENABLED_THREAD_MAP","DB_TXN_SCN","FILENAME","INFO","STATUS" from gv$logmnr_dictionary;

CREATE OR REPLACE FORCE VIEW "GV_$LOGMNR_LATCH"("INST_ID","SESSION_ID","NAME","CHILD_ADDR","STATE") AS 
select "INST_ID","SESSION_ID","NAME","CHILD_ADDR","STATE" from gv$logmnr_latch;

CREATE OR REPLACE FORCE VIEW "GV_$LOGMNR_LOGFILE"("INST_ID","LOG_ID","FILENAME","LOW_TIME","NEXT_TIME","DB_ID","DB_NAME","RESET_SCNWRP","RESET_SCNBAS","RESET_SCN_TIME","THREAD_ID","THREAD_SQN","LOW_SCNWRP","LOW_SCNBAS","NEXT_SCNWRP","NEXT_SCNBAS","FILE_STATE") AS 
select "INST_ID","LOG_ID","FILENAME","LOW_TIME","NEXT_TIME","DB_ID","DB_NAME","RESET_SCNWRP","RESET_SCNBAS","RESET_SCN_TIME","THREAD_ID","THREAD_SQN","LOW_SCNWRP","LOW_SCNBAS","NEXT_SCNWRP","NEXT_SCNBAS","FILE_STATE" from gv$logmnr_logfile;

CREATE OR REPLACE FORCE VIEW "GV_$LOGMNR_LOGS"("INST_ID","LOG_ID","FILENAME","LOW_TIME","HIGH_TIME","DB_ID","DB_NAME","RESET_SCN","RESET_SCN_TIME","THREAD_ID","THREAD_SQN","LOW_SCN","NEXT_SCN","DICTIONARY_BEGIN","DICTIONARY_END","TYPE","BLOCKSIZE","FILESIZE","INFO","STATUS") AS 
select "INST_ID","LOG_ID","FILENAME","LOW_TIME","HIGH_TIME","DB_ID","DB_NAME","RESET_SCN","RESET_SCN_TIME","THREAD_ID","THREAD_SQN","LOW_SCN","NEXT_SCN","DICTIONARY_BEGIN","DICTIONARY_END","TYPE","BLOCKSIZE","FILESIZE","INFO","STATUS" from gv$logmnr_logs;

CREATE OR REPLACE FORCE VIEW "GV_$LOGMNR_PARAMETERS"("INST_ID","START_DATE","REQUIRED_START_DATE","END_DATE","START_SCN","REQUIRED_START_SCN","END_SCN","OPTIONS","INFO","STATUS") AS 
select "INST_ID","START_DATE","REQUIRED_START_DATE","END_DATE","START_SCN","REQUIRED_START_SCN","END_SCN","OPTIONS","INFO","STATUS" from gv$logmnr_parameters;

CREATE OR REPLACE FORCE VIEW "GV_$LOGMNR_PROCESS"("INST_ID","SESSION_ID","PID","ROLE","WORK_MICROSEC","OVERHEAD_MICROSEC","SPID","USERNAME","LATCHWAIT","LATCHSPIN","SID","SERIAL#") AS 
select "INST_ID","SESSION_ID","PID","ROLE","WORK_MICROSEC","OVERHEAD_MICROSEC","SPID","USERNAME","LATCHWAIT","LATCHSPIN","SID","SERIAL#" from gv$logmnr_process;

CREATE OR REPLACE FORCE VIEW "GV_$LOGMNR_REGION"("INST_ID","MEMSTATE","STATE","OWNING_PROCESS") AS 
select "INST_ID","MEMSTATE","STATE","OWNING_PROCESS" from gv$logmnr_region;

CREATE OR REPLACE FORCE VIEW "GV_$LOGMNR_SESSION"("INST_ID","SESSION_ID","SESSION_NAME","SESSION_STATE","DB_NAME","DB_ID","RESET_SCN","RESET_TIMESTAMP","NUM_PROCESS","CHUNK_SIZE","START_SCN","END_SCN","SPILL_SCN","PROCESSED_SCN","PREPARED_SCN","READ_SCN","LOW_MARK_SCN","CONSUMED_SCN","MAX_MEMORY_SIZE","USED_MEMORY_SIZE","PREPARED_WORK_SIZE","AVAILABLE_WORK_SIZE","AVAILABLE_TXN","AVAILABLE_COMMITTED_TXN","DELIVERED_TXN","DELIVERED_COMMITTED_TXN","PINNED_TXN","PINNED_COMMITTED_TXN") AS 
select "INST_ID","SESSION_ID","SESSION_NAME","SESSION_STATE","DB_NAME","DB_ID","RESET_SCN","RESET_TIMESTAMP","NUM_PROCESS","CHUNK_SIZE","START_SCN","END_SCN","SPILL_SCN","PROCESSED_SCN","PREPARED_SCN","READ_SCN","LOW_MARK_SCN","CONSUMED_SCN","MAX_MEMORY_SIZE","USED_MEMORY_SIZE","PREPARED_WORK_SIZE","AVAILABLE_WORK_SIZE","AVAILABLE_TXN","AVAILABLE_COMMITTED_TXN","DELIVERED_TXN","DELIVERED_COMMITTED_TXN","PINNED_TXN","PINNED_COMMITTED_TXN" from gv$logmnr_session;

CREATE OR REPLACE FORCE VIEW "GV_$LOGMNR_STATS"("INST_ID","SESSION_ID","NAME","VALUE") AS 
select "INST_ID","SESSION_ID","NAME","VALUE" from gv$logmnr_stats;

CREATE OR REPLACE FORCE VIEW "GV_$LOGMNR_TRANSACTION"("INST_ID","XIDUSN","XIDSLT","XIDSQN","COMMIT_SCNWRP","COMMIT_SCNBAS","NUM_CHANGE_RECORD","FLAGS","CHUNK_INDEX","TOTAL_CHUNKS") AS 
select "INST_ID","XIDUSN","XIDSLT","XIDSQN","COMMIT_SCNWRP","COMMIT_SCNBAS","NUM_CHANGE_RECORD","FLAGS","CHUNK_INDEX","TOTAL_CHUNKS" from gv$logmnr_transaction;

CREATE OR REPLACE FORCE VIEW "GV_$LOGSTDBY"("INST_ID","SERIAL#","LOGSTDBY_ID","PID","TYPE","STATUS_CODE","STATUS","HIGH_SCN") AS 
select "INST_ID","SERIAL#","LOGSTDBY_ID","PID","TYPE","STATUS_CODE","STATUS","HIGH_SCN" from gv$logstdby;

CREATE OR REPLACE FORCE VIEW "GV_$LOGSTDBY_STATS"("INST_ID","NAME","VALUE") AS 
select "INST_ID","NAME","VALUE" from gv$logstdby_stats;

CREATE OR REPLACE FORCE VIEW "GV_$LOG_HISTORY"("INST_ID","RECID","STAMP","THREAD#","SEQUENCE#","FIRST_CHANGE#","FIRST_TIME","NEXT_CHANGE#","RESETLOGS_CHANGE#","RESETLOGS_TIME") AS 
select "INST_ID","RECID","STAMP","THREAD#","SEQUENCE#","FIRST_CHANGE#","FIRST_TIME","NEXT_CHANGE#","RESETLOGS_CHANGE#","RESETLOGS_TIME" from gv$log_history;

CREATE OR REPLACE FORCE VIEW "GV_$MANAGED_STANDBY"("INST_ID","PROCESS","PID","STATUS","CLIENT_PROCESS","CLIENT_PID","CLIENT_DBID","GROUP#","RESETLOG_ID","THREAD#","SEQUENCE#","BLOCK#","BLOCKS","DELAY_MINS","KNOWN_AGENTS","ACTIVE_AGENTS") AS 
select "INST_ID","PROCESS","PID","STATUS","CLIENT_PROCESS","CLIENT_PID","CLIENT_DBID","GROUP#","RESETLOG_ID","THREAD#","SEQUENCE#","BLOCK#","BLOCKS","DELAY_MINS","KNOWN_AGENTS","ACTIVE_AGENTS" from gv$managed_standby;

CREATE OR REPLACE FORCE VIEW "GV_$MAP_COMP_LIST"("INST_ID","ELEM_IDX","NUM_COMP","COMP1_NAME","COMP1_VAL","COMP2_NAME","COMP2_VAL","COMP3_NAME","COMP3_VAL","COMP4_NAME","COMP4_VAL","COMP5_NAME","COMP5_VAL") AS 
select "INST_ID","ELEM_IDX","NUM_COMP","COMP1_NAME","COMP1_VAL","COMP2_NAME","COMP2_VAL","COMP3_NAME","COMP3_VAL","COMP4_NAME","COMP4_VAL","COMP5_NAME","COMP5_VAL" from gv$map_comp_list;

CREATE OR REPLACE FORCE VIEW "GV_$MAP_ELEMENT"("INST_ID","ELEM_NAME","ELEM_IDX","ELEM_CFGID","ELEM_TYPE","ELEM_SIZE","ELEM_NSUBELEM","ELEM_DESCR","STRIPE_SIZE","LIB_IDX") AS 
select "INST_ID","ELEM_NAME","ELEM_IDX","ELEM_CFGID","ELEM_TYPE","ELEM_SIZE","ELEM_NSUBELEM","ELEM_DESCR","STRIPE_SIZE","LIB_IDX" from gv$map_element;

CREATE OR REPLACE FORCE VIEW "GV_$MAP_EXT_ELEMENT"("INST_ID","ELEM_IDX","NUM_ATTRB","ATTRB1_NAME","ATTRB1_VAL","ATTRB2_NAME","ATTRB2_VAL","ATTRB3_NAME","ATTRB3_VAL","ATTRB4_NAME","ATTRB4_VAL","ATTRB5_NAME","ATTRB5_VAL") AS 
select "INST_ID","ELEM_IDX","NUM_ATTRB","ATTRB1_NAME","ATTRB1_VAL","ATTRB2_NAME","ATTRB2_VAL","ATTRB3_NAME","ATTRB3_VAL","ATTRB4_NAME","ATTRB4_VAL","ATTRB5_NAME","ATTRB5_VAL" from gv$map_ext_element;

CREATE OR REPLACE FORCE VIEW "GV_$MAP_FILE"("INST_ID","FILE_MAP_IDX","FILE_CFGID","FILE_STATUS","FILE_NAME","FILE_TYPE","FILE_STRUCTURE","FILE_SIZE","FILE_NEXTS","LIB_IDX") AS 
select "INST_ID","FILE_MAP_IDX","FILE_CFGID","FILE_STATUS","FILE_NAME","FILE_TYPE","FILE_STRUCTURE","FILE_SIZE","FILE_NEXTS","LIB_IDX" from gv$map_file;

CREATE OR REPLACE FORCE VIEW "GV_$MAP_FILE_EXTENT"("INST_ID","FILE_MAP_IDX","EXT_NUM","EXT_ELEM_OFF","EXT_SIZE","EXT_FILE_OFF","EXT_TYPE","ELEM_IDX") AS 
select "INST_ID","FILE_MAP_IDX","EXT_NUM","EXT_ELEM_OFF","EXT_SIZE","EXT_FILE_OFF","EXT_TYPE","ELEM_IDX" from gv$map_file_extent;

CREATE OR REPLACE FORCE VIEW "GV_$MAP_FILE_IO_STACK"("INST_ID","FILE_MAP_IDX","DEPTH","ELEM_IDX","CU_SIZE","STRIDE","NUM_CU","ELEM_OFFSET","FILE_OFFSET","DATA_TYPE","PARITY_POS","PARITY_PERIOD","ID","PARENT_ID") AS 
select "INST_ID","FILE_MAP_IDX","DEPTH","ELEM_IDX","CU_SIZE","STRIDE","NUM_CU","ELEM_OFFSET","FILE_OFFSET","DATA_TYPE","PARITY_POS","PARITY_PERIOD","ID","PARENT_ID" from gv$map_file_io_stack;

CREATE OR REPLACE FORCE VIEW "GV_$MAP_LIBRARY"("INST_ID","LIB_IDX","LIB_NAME","VENDOR_NAME","PROTOCOL_NUM","VERSION_NUM","PATH_NAME","MAP_FILE","FILE_CFGID","MAP_ELEM","ELEM_CFGID","MAP_SYNC") AS 
select "INST_ID","LIB_IDX","LIB_NAME","VENDOR_NAME","PROTOCOL_NUM","VERSION_NUM","PATH_NAME","MAP_FILE","FILE_CFGID","MAP_ELEM","ELEM_CFGID","MAP_SYNC" from gv$map_library;

CREATE OR REPLACE FORCE VIEW "GV_$MAP_SUBELEMENT"("INST_ID","CHILD_IDX","PARENT_IDX","SUB_NUM","SUB_SIZE","ELEM_OFFSET","SUB_FLAGS") AS 
select "INST_ID","CHILD_IDX","PARENT_IDX","SUB_NUM","SUB_SIZE","ELEM_OFFSET","SUB_FLAGS" from gv$map_subelement;

CREATE OR REPLACE FORCE VIEW "GV_$MAX_ACTIVE_SESS_TARGET_MTH"("INST_ID","NAME") AS 
select "INST_ID","NAME" from gv$max_active_sess_target_mth;

CREATE OR REPLACE FORCE VIEW "GV_$METRIC"("INST_ID","BEGIN_TIME","END_TIME","INTSIZE_CSEC","GROUP_ID","ENTITY_ID","ENTITY_SEQUENCE","METRIC_ID","METRIC_NAME","VALUE","METRIC_UNIT") AS 
select "INST_ID","BEGIN_TIME","END_TIME","INTSIZE_CSEC","GROUP_ID","ENTITY_ID","ENTITY_SEQUENCE","METRIC_ID","METRIC_NAME","VALUE","METRIC_UNIT" from gv$metric;

CREATE OR REPLACE FORCE VIEW "GV_$METRICGROUP"("INST_ID","GROUP_ID","NAME","INTERVAL_SIZE","MAX_INTERVAL") AS 
select "INST_ID","GROUP_ID","NAME","INTERVAL_SIZE","MAX_INTERVAL" from gv$metricgroup;

CREATE OR REPLACE FORCE VIEW "GV_$METRICNAME"("INST_ID","GROUP_ID","GROUP_NAME","METRIC_ID","METRIC_NAME","METRIC_UNIT") AS 
select "INST_ID","GROUP_ID","GROUP_NAME","METRIC_ID","METRIC_NAME","METRIC_UNIT" from gv$metricname;

CREATE OR REPLACE FORCE VIEW "GV_$METRIC_HISTORY"("INST_ID","BEGIN_TIME","END_TIME","INTSIZE_CSEC","GROUP_ID","ENTITY_ID","ENTITY_SEQUENCE","METRIC_ID","METRIC_NAME","VALUE","METRIC_UNIT") AS 
select "INST_ID","BEGIN_TIME","END_TIME","INTSIZE_CSEC","GROUP_ID","ENTITY_ID","ENTITY_SEQUENCE","METRIC_ID","METRIC_NAME","VALUE","METRIC_UNIT" from gv$metric_history;

CREATE OR REPLACE FORCE VIEW "GV_$MTTR_TARGET_ADVICE"("INST_ID","MTTR_TARGET_FOR_ESTIMATE","ADVICE_STATUS","DIRTY_LIMIT","ESTD_CACHE_WRITES","ESTD_CACHE_WRITE_FACTOR","ESTD_TOTAL_WRITES","ESTD_TOTAL_WRITE_FACTOR","ESTD_TOTAL_IOS","ESTD_TOTAL_IO_FACTOR") AS 
select "INST_ID","MTTR_TARGET_FOR_ESTIMATE","ADVICE_STATUS","DIRTY_LIMIT","ESTD_CACHE_WRITES","ESTD_CACHE_WRITE_FACTOR","ESTD_TOTAL_WRITES","ESTD_TOTAL_WRITE_FACTOR","ESTD_TOTAL_IOS","ESTD_TOTAL_IO_FACTOR" from
   gv$mttr_target_advice;

CREATE OR REPLACE FORCE VIEW "GV_$MVREFRESH"("INST_ID","SID","SERIAL#","CURRMVOWNER","CURRMVNAME") AS 
select "INST_ID","SID","SERIAL#","CURRMVOWNER","CURRMVNAME" from gv$mvrefresh;

CREATE OR REPLACE FORCE VIEW "GV_$MYSTAT"("INST_ID","SID","STATISTIC#","VALUE") AS 
select "INST_ID","SID","STATISTIC#","VALUE" from gv$mystat;

CREATE OR REPLACE FORCE VIEW "GV_$NLS_PARAMETERS"("INST_ID","PARAMETER","VALUE") AS 
select "INST_ID","PARAMETER","VALUE" from gv$nls_parameters;

CREATE OR REPLACE FORCE VIEW "GV_$NLS_VALID_VALUES"("INST_ID","PARAMETER","VALUE") AS 
select "INST_ID","PARAMETER","VALUE" from gv$nls_valid_values;

CREATE OR REPLACE FORCE VIEW "GV_$OBJECT_DEPENDENCY"("INST_ID","FROM_ADDRESS","FROM_HASH","TO_OWNER","TO_NAME","TO_ADDRESS","TO_HASH","TO_TYPE") AS 
select "INST_ID","FROM_ADDRESS","FROM_HASH","TO_OWNER","TO_NAME","TO_ADDRESS","TO_HASH","TO_TYPE" from gv$object_dependency;

CREATE OR REPLACE FORCE VIEW "GV_$OBSOLETE_PARAMETER"("INST_ID","NAME","ISSPECIFIED") AS 
select "INST_ID","NAME","ISSPECIFIED" from gv$obsolete_parameter;

CREATE OR REPLACE FORCE VIEW "GV_$OFFLINE_RANGE"("INST_ID","RECID","STAMP","FILE#","OFFLINE_CHANGE#","ONLINE_CHANGE#","ONLINE_TIME","RESETLOGS_CHANGE#","RESETLOGS_TIME") AS 
select "INST_ID","RECID","STAMP","FILE#","OFFLINE_CHANGE#","ONLINE_CHANGE#","ONLINE_TIME","RESETLOGS_CHANGE#","RESETLOGS_TIME" from gv$offline_range;

CREATE OR REPLACE FORCE VIEW "GV_$OPEN_CURSOR"("INST_ID","SADDR","SID","USER_NAME","ADDRESS","HASH_VALUE","SQL_ID","SQL_TEXT") AS 
select "INST_ID","SADDR","SID","USER_NAME","ADDRESS","HASH_VALUE","SQL_ID","SQL_TEXT" from gv$open_cursor;

CREATE OR REPLACE FORCE VIEW "GV_$OPTION"("INST_ID","PARAMETER","VALUE") AS 
select "INST_ID","PARAMETER","VALUE" from gv$option;

CREATE OR REPLACE FORCE VIEW "GV_$OSSTAT"("INST_ID","STAT_NAME","VALUE","OSSTAT_ID") AS 
select "INST_ID","STAT_NAME","VALUE","OSSTAT_ID" from gv$osstat;

CREATE OR REPLACE FORCE VIEW "GV_$PARALLEL_DEGREE_LIMIT_MTH"("INST_ID","NAME") AS 
select "INST_ID","NAME" from gv$parallel_degree_limit_mth;

CREATE OR REPLACE FORCE VIEW "GV_$PARAMETER"("INST_ID","NUM","NAME","TYPE","VALUE","DISPLAY_VALUE","ISDEFAULT","ISSES_MODIFIABLE","ISSYS_MODIFIABLE","ISINSTANCE_MODIFIABLE","ISMODIFIED","ISADJUSTED","ISDEPRECATED","DESCRIPTION","UPDATE_COMMENT","HASH") AS 
select "INST_ID","NUM","NAME","TYPE","VALUE","DISPLAY_VALUE","ISDEFAULT","ISSES_MODIFIABLE","ISSYS_MODIFIABLE","ISINSTANCE_MODIFIABLE","ISMODIFIED","ISADJUSTED","ISDEPRECATED","DESCRIPTION","UPDATE_COMMENT","HASH" from gv$parameter;

CREATE OR REPLACE FORCE VIEW "GV_$PARAMETER2"("INST_ID","NUM","NAME","TYPE","VALUE","DISPLAY_VALUE","ISDEFAULT","ISSES_MODIFIABLE","ISSYS_MODIFIABLE","ISINSTANCE_MODIFIABLE","ISMODIFIED","ISADJUSTED","ISDEPRECATED","DESCRIPTION","ORDINAL","UPDATE_COMMENT") AS 
select "INST_ID","NUM","NAME","TYPE","VALUE","DISPLAY_VALUE","ISDEFAULT","ISSES_MODIFIABLE","ISSYS_MODIFIABLE","ISINSTANCE_MODIFIABLE","ISMODIFIED","ISADJUSTED","ISDEPRECATED","DESCRIPTION","ORDINAL","UPDATE_COMMENT" from gv$parameter2;

CREATE OR REPLACE FORCE VIEW "GV_$PGASTAT"("INST_ID","NAME","VALUE","UNIT") AS 
select "INST_ID","NAME","VALUE","UNIT" from gv$pgastat;

CREATE OR REPLACE FORCE VIEW "GV_$PGATARGET_ADVICE_HISTOGRAM"("INST_ID","PGA_TARGET_FOR_ESTIMATE","PGA_TARGET_FACTOR","ADVICE_STATUS","LOW_OPTIMAL_SIZE","HIGH_OPTIMAL_SIZE","ESTD_OPTIMAL_EXECUTIONS","ESTD_ONEPASS_EXECUTIONS","ESTD_MULTIPASSES_EXECUTIONS","ESTD_TOTAL_EXECUTIONS","IGNORED_WORKAREAS_COUNT") AS 
select "INST_ID","PGA_TARGET_FOR_ESTIMATE","PGA_TARGET_FACTOR","ADVICE_STATUS","LOW_OPTIMAL_SIZE","HIGH_OPTIMAL_SIZE","ESTD_OPTIMAL_EXECUTIONS","ESTD_ONEPASS_EXECUTIONS","ESTD_MULTIPASSES_EXECUTIONS","ESTD_TOTAL_EXECUTIONS","IGNORED_WORKAREAS_COUNT" from gv$pga_target_advice_histogram;

CREATE OR REPLACE FORCE VIEW "GV_$PGA_TARGET_ADVICE"("INST_ID","PGA_TARGET_FOR_ESTIMATE","PGA_TARGET_FACTOR","ADVICE_STATUS","BYTES_PROCESSED","ESTD_EXTRA_BYTES_RW","ESTD_PGA_CACHE_HIT_PERCENTAGE","ESTD_OVERALLOC_COUNT") AS 
select "INST_ID","PGA_TARGET_FOR_ESTIMATE","PGA_TARGET_FACTOR","ADVICE_STATUS","BYTES_PROCESSED","ESTD_EXTRA_BYTES_RW","ESTD_PGA_CACHE_HIT_PERCENTAGE","ESTD_OVERALLOC_COUNT" from gv$pga_target_advice;

CREATE OR REPLACE FORCE VIEW "GV_$PQ_SESSTAT"("INST_ID","STATISTIC","LAST_QUERY","SESSION_TOTAL") AS 
select "INST_ID","STATISTIC","LAST_QUERY","SESSION_TOTAL" from gv$pq_sesstat;

CREATE OR REPLACE FORCE VIEW "GV_$PQ_SLAVE"("INST_ID","SLAVE_NAME","STATUS","SESSIONS","IDLE_TIME_CUR","BUSY_TIME_CUR","CPU_SECS_CUR","MSGS_SENT_CUR","MSGS_RCVD_CUR","IDLE_TIME_TOTAL","BUSY_TIME_TOTAL","CPU_SECS_TOTAL","MSGS_SENT_TOTAL","MSGS_RCVD_TOTAL") AS 
select "INST_ID","SLAVE_NAME","STATUS","SESSIONS","IDLE_TIME_CUR","BUSY_TIME_CUR","CPU_SECS_CUR","MSGS_SENT_CUR","MSGS_RCVD_CUR","IDLE_TIME_TOTAL","BUSY_TIME_TOTAL","CPU_SECS_TOTAL","MSGS_SENT_TOTAL","MSGS_RCVD_TOTAL" from gv$pq_slave;

CREATE OR REPLACE FORCE VIEW "GV_$PQ_SYSSTAT"("INST_ID","STATISTIC","VALUE") AS 
select "INST_ID","STATISTIC","VALUE" from gv$pq_sysstat;

CREATE OR REPLACE FORCE VIEW "GV_$PQ_TQSTAT"("INST_ID","DFO_NUMBER","TQ_ID","SERVER_TYPE","NUM_ROWS","BYTES","OPEN_TIME","AVG_LATENCY","WAITS","TIMEOUTS","PROCESS","INSTANCE") AS 
select "INST_ID","DFO_NUMBER","TQ_ID","SERVER_TYPE","NUM_ROWS","BYTES","OPEN_TIME","AVG_LATENCY","WAITS","TIMEOUTS","PROCESS","INSTANCE" from gv$pq_tqstat;

CREATE OR REPLACE FORCE VIEW "GV_$PROCESS"("INST_ID","ADDR","PID","SPID","USERNAME","SERIAL#","TERMINAL","PROGRAM","TRACEID","BACKGROUND","LATCHWAIT","LATCHSPIN","PGA_USED_MEM","PGA_ALLOC_MEM","PGA_FREEABLE_MEM","PGA_MAX_MEM") AS 
select "INST_ID","ADDR","PID","SPID","USERNAME","SERIAL#","TERMINAL","PROGRAM","TRACEID","BACKGROUND","LATCHWAIT","LATCHSPIN","PGA_USED_MEM","PGA_ALLOC_MEM","PGA_FREEABLE_MEM","PGA_MAX_MEM" from gv$process;

CREATE OR REPLACE FORCE VIEW "GV_$PROPAGATION_RECEIVER"("INST_ID","SRC_QUEUE_NAME","SRC_DBNAME","STARTUP_TIME","HIGH_WATER_MARK","ACKNOWLEDGEMENT","ELAPSED_UNPICKLE_TIME","ELAPSED_RULE_TIME","ELAPSED_ENQUEUE_TIME") AS 
select "INST_ID","SRC_QUEUE_NAME","SRC_DBNAME","STARTUP_TIME","HIGH_WATER_MARK","ACKNOWLEDGEMENT","ELAPSED_UNPICKLE_TIME","ELAPSED_RULE_TIME","ELAPSED_ENQUEUE_TIME" from gv$propagation_receiver;

CREATE OR REPLACE FORCE VIEW "GV_$PROPAGATION_SENDER"("INST_ID","QUEUE_ID","QUEUE_SCHEMA","QUEUE_NAME","DBLINK","HIGH_WATER_MARK","ACKNOWLEDGEMENT","SCHEDULE_STATUS","TOTAL_MSGS","TOTAL_BYTES","ELAPSED_DEQUEUE_TIME","ELAPSED_PICKLE_TIME","ELAPSED_PROPAGATION_TIME") AS 
select "INST_ID","QUEUE_ID","QUEUE_SCHEMA","QUEUE_NAME","DBLINK","HIGH_WATER_MARK","ACKNOWLEDGEMENT","SCHEDULE_STATUS","TOTAL_MSGS","TOTAL_BYTES","ELAPSED_DEQUEUE_TIME","ELAPSED_PICKLE_TIME","ELAPSED_PROPAGATION_TIME" from gv$propagation_sender;

CREATE OR REPLACE FORCE VIEW "GV_$PROXY_ARCHIVEDLOG"("INST_ID","RECID","STAMP","DEVICE_TYPE","HANDLE","COMMENTS","MEDIA","MEDIA_POOL","TAG","STATUS","DELETED","THREAD#","SEQUENCE#","RESETLOGS_CHANGE#","RESETLOGS_TIME","FIRST_CHANGE#","FIRST_TIME","NEXT_CHANGE#","NEXT_TIME","BLOCKS","BLOCK_SIZE","START_TIME","COMPLETION_TIME","ELAPSED_SECONDS","RMAN_STATUS_RECID","RMAN_STATUS_STAMP") AS 
select "INST_ID","RECID","STAMP","DEVICE_TYPE","HANDLE","COMMENTS","MEDIA","MEDIA_POOL","TAG","STATUS","DELETED","THREAD#","SEQUENCE#","RESETLOGS_CHANGE#","RESETLOGS_TIME","FIRST_CHANGE#","FIRST_TIME","NEXT_CHANGE#","NEXT_TIME","BLOCKS","BLOCK_SIZE","START_TIME","COMPLETION_TIME","ELAPSED_SECONDS","RMAN_STATUS_RECID","RMAN_STATUS_STAMP" from gv$proxy_archivedlog;

CREATE OR REPLACE FORCE VIEW "GV_$PROXY_DATAFILE"("INST_ID","RECID","STAMP","DEVICE_TYPE","HANDLE","COMMENTS","MEDIA","MEDIA_POOL","TAG","STATUS","DELETED","FILE#","CREATION_CHANGE#","CREATION_TIME","RESETLOGS_CHANGE#","RESETLOGS_TIME","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","ABSOLUTE_FUZZY_CHANGE#","RECOVERY_FUZZY_CHANGE#","RECOVERY_FUZZY_TIME","INCREMENTAL_LEVEL","ONLINE_FUZZY","BACKUP_FUZZY","BLOCKS","BLOCK_SIZE","OLDEST_OFFLINE_RANGE","START_TIME","COMPLETION_TIME","ELAPSED_SECONDS","CONTROLFILE_TYPE","KEEP","KEEP_UNTIL","KEEP_OPTIONS","RMAN_STATUS_RECID","RMAN_STATUS_STAMP") AS 
select "INST_ID","RECID","STAMP","DEVICE_TYPE","HANDLE","COMMENTS","MEDIA","MEDIA_POOL","TAG","STATUS","DELETED","FILE#","CREATION_CHANGE#","CREATION_TIME","RESETLOGS_CHANGE#","RESETLOGS_TIME","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","ABSOLUTE_FUZZY_CHANGE#","RECOVERY_FUZZY_CHANGE#","RECOVERY_FUZZY_TIME","INCREMENTAL_LEVEL","ONLINE_FUZZY","BACKUP_FUZZY","BLOCKS","BLOCK_SIZE","OLDEST_OFFLINE_RANGE","START_TIME","COMPLETION_TIME","ELAPSED_SECONDS","CONTROLFILE_TYPE","KEEP","KEEP_UNTIL","KEEP_OPTIONS","RMAN_STATUS_RECID","RMAN_STATUS_STAMP" from gv$proxy_datafile;

CREATE OR REPLACE FORCE VIEW "GV_$PWFILE_USERS"("INST_ID","USERNAME","SYSDBA","SYSOPER") AS 
select "INST_ID","USERNAME","SYSDBA","SYSOPER" from gv$pwfile_users;

CREATE OR REPLACE FORCE VIEW "GV_$PX_BUFFER_ADVICE"("INST_ID","STATISTIC","VALUE") AS 
select "INST_ID","STATISTIC","VALUE" from gv$px_buffer_advice;

CREATE OR REPLACE FORCE VIEW "GV_$PX_PROCESS"("INST_ID","SERVER_NAME","STATUS","PID","SPID","SID","SERIAL#") AS 
select "INST_ID","SERVER_NAME","STATUS","PID","SPID","SID","SERIAL#" from gv$px_process;

CREATE OR REPLACE FORCE VIEW "GV_$PX_PROCESS_SYSSTAT"("INST_ID","STATISTIC","VALUE") AS 
select "INST_ID","STATISTIC","VALUE" from gv$px_process_sysstat;

CREATE OR REPLACE FORCE VIEW "GV_$PX_SESSION"("INST_ID","SADDR","SID","SERIAL#","QCSID","QCSERIAL#","QCINST_ID","SERVER_GROUP","SERVER_SET","SERVER#","DEGREE","REQ_DEGREE") AS 
select "INST_ID","SADDR","SID","SERIAL#","QCSID","QCSERIAL#","QCINST_ID","SERVER_GROUP","SERVER_SET","SERVER#","DEGREE","REQ_DEGREE" from gv$px_session;

CREATE OR REPLACE FORCE VIEW "GV_$PX_SESSTAT"("INST_ID","SADDR","SID","SERIAL#","QCSID","QCSERIAL#","QCINST_ID","SERVER_GROUP","SERVER_SET","SERVER#","DEGREE","REQ_DEGREE","STATISTIC#","VALUE") AS 
select "INST_ID","SADDR","SID","SERIAL#","QCSID","QCSERIAL#","QCINST_ID","SERVER_GROUP","SERVER_SET","SERVER#","DEGREE","REQ_DEGREE","STATISTIC#","VALUE" from gv$px_sesstat;

CREATE OR REPLACE FORCE VIEW "GV_$QUEUE"("INST_ID","PADDR","TYPE","QUEUED","WAIT","TOTALQ") AS 
select "INST_ID","PADDR","TYPE","QUEUED","WAIT","TOTALQ" from gv$queue;

CREATE OR REPLACE FORCE VIEW "GV_$QUEUEING_MTH"("INST_ID","NAME") AS 
select "INST_ID","NAME" from gv$queueing_mth;

CREATE OR REPLACE FORCE VIEW "GV_$RECOVERY_FILE_STATUS"("INST_ID","FILENUM","FILENAME","STATUS") AS 
select "INST_ID","FILENUM","FILENAME","STATUS" from gv$recovery_file_status;

CREATE OR REPLACE FORCE VIEW "GV_$RECOVERY_LOG"("INST_ID","THREAD#","SEQUENCE#","TIME","ARCHIVE_NAME") AS 
select "INST_ID","THREAD#","SEQUENCE#","TIME","ARCHIVE_NAME" from gv$recovery_log;

CREATE OR REPLACE FORCE VIEW "GV_$RECOVERY_PROGRESS"("INST_ID","TYPE","ITEM","SOFAR","TOTAL") AS 
select "INST_ID","TYPE","ITEM","SOFAR","TOTAL" from gv$recovery_progress;

CREATE OR REPLACE FORCE VIEW "GV_$RECOVERY_STATUS"("INST_ID","RECOVERY_CHECKPOINT","THREAD","SEQUENCE_NEEDED","SCN_NEEDED","TIME_NEEDED","PREVIOUS_LOG_NAME","PREVIOUS_LOG_STATUS","REASON") AS 
select "INST_ID","RECOVERY_CHECKPOINT","THREAD","SEQUENCE_NEEDED","SCN_NEEDED","TIME_NEEDED","PREVIOUS_LOG_NAME","PREVIOUS_LOG_STATUS","REASON" from gv$recovery_status;

CREATE OR REPLACE FORCE VIEW "GV_$RECOVER_FILE"("INST_ID","FILE#","ONLINE","ONLINE_STATUS","ERROR","CHANGE#","TIME") AS 
select "INST_ID","FILE#","ONLINE","ONLINE_STATUS","ERROR","CHANGE#","TIME" from gv$recover_file;

CREATE OR REPLACE FORCE VIEW "GV_$REPLPROP"("INST_ID","SID","SERIAL#","NAME","DBLINK","STATE","XID","SEQUENCE") AS 
select "INST_ID","SID","SERIAL#","NAME","DBLINK","STATE","XID","SEQUENCE" from gv$replprop;

CREATE OR REPLACE FORCE VIEW "GV_$REPLQUEUE"("INST_ID","TXNS_ENQUEUED","CALLS_ENQUEUED","TXNS_PURGED","LAST_ENQUEUE_TIME","LAST_PURGE_TIME") AS 
select "INST_ID","TXNS_ENQUEUED","CALLS_ENQUEUED","TXNS_PURGED","LAST_ENQUEUE_TIME","LAST_PURGE_TIME" from gv$replqueue;

CREATE OR REPLACE FORCE VIEW "GV_$REQDIST"("INST_ID","BUCKET","COUNT") AS 
select "INST_ID","BUCKET","COUNT" from gv$reqdist;

CREATE OR REPLACE FORCE VIEW "GV_$RESERVED_WORDS"("INST_ID","KEYWORD","LENGTH") AS 
select "INST_ID","KEYWORD","LENGTH" from gv$reserved_words;

CREATE OR REPLACE FORCE VIEW "GV_$RESOURCE"("INST_ID","ADDR","TYPE","ID1","ID2") AS 
select "INST_ID","ADDR","TYPE","ID1","ID2" from gv$resource;

CREATE OR REPLACE FORCE VIEW "GV_$RESOURCE_LIMIT"("INST_ID","RESOURCE_NAME","CURRENT_UTILIZATION","MAX_UTILIZATION","INITIAL_ALLOCATION","LIMIT_VALUE") AS 
select "INST_ID","RESOURCE_NAME","CURRENT_UTILIZATION","MAX_UTILIZATION","INITIAL_ALLOCATION","LIMIT_VALUE" from gv$resource_limit;

CREATE OR REPLACE FORCE VIEW "GV_$RESUMABLE"("INST_ID","ADDR","SID","ENABLED","STATUS","TIMEOUT","SUSPEND_TIME","RESUME_TIME","NAME","ERROR_NUMBER","ERROR_PARAMETER1","ERROR_PARAMETER2","ERROR_PARAMETER3","ERROR_PARAMETER4","ERROR_PARAMETER5","ERROR_MSG") AS 
select "INST_ID","ADDR","SID","ENABLED","STATUS","TIMEOUT","SUSPEND_TIME","RESUME_TIME","NAME","ERROR_NUMBER","ERROR_PARAMETER1","ERROR_PARAMETER2","ERROR_PARAMETER3","ERROR_PARAMETER4","ERROR_PARAMETER5","ERROR_MSG" from gv$resumable;

CREATE OR REPLACE FORCE VIEW "GV_$RMAN_CONFIGURATION"("INST_ID","CONF#","NAME","VALUE") AS 
select "INST_ID","CONF#","NAME","VALUE" from gv$rman_configuration;

CREATE OR REPLACE FORCE VIEW "GV_$RMAN_OUTPUT"("INST_ID","SID","RECID","STAMP","SESSION_RECID","SESSION_STAMP","OUTPUT") AS 
select "INST_ID","SID","RECID","STAMP","SESSION_RECID","SESSION_STAMP","OUTPUT" from gv$rman_output;

CREATE OR REPLACE FORCE VIEW "GV_$ROLLSTAT"("INST_ID","USN","LATCH","EXTENTS","RSSIZE","WRITES","XACTS","GETS","WAITS","OPTSIZE","HWMSIZE","SHRINKS","WRAPS","EXTENDS","AVESHRINK","AVEACTIVE","STATUS","CUREXT","CURBLK") AS 
select "INST_ID","USN","LATCH","EXTENTS","RSSIZE","WRITES","XACTS","GETS","WAITS","OPTSIZE","HWMSIZE","SHRINKS","WRAPS","EXTENDS","AVESHRINK","AVEACTIVE","STATUS","CUREXT","CURBLK" from gv$rollstat;

CREATE OR REPLACE FORCE VIEW "GV_$ROWCACHE"("INST_ID","CACHE#","TYPE","SUBORDINATE#","PARAMETER","COUNT","USAGE","FIXED","GETS","GETMISSES","SCANS","SCANMISSES","SCANCOMPLETES","MODIFICATIONS","FLUSHES","DLM_REQUESTS","DLM_CONFLICTS","DLM_RELEASES") AS 
select "INST_ID","CACHE#","TYPE","SUBORDINATE#","PARAMETER","COUNT","USAGE","FIXED","GETS","GETMISSES","SCANS","SCANMISSES","SCANCOMPLETES","MODIFICATIONS","FLUSHES","DLM_REQUESTS","DLM_CONFLICTS","DLM_RELEASES" from gv$rowcache;

CREATE OR REPLACE FORCE VIEW "GV_$ROWCACHE_PARENT"("INST_ID","INDX","HASH","ADDRESS","CACHE#","CACHE_NAME","EXISTENT","LOCK_MODE","LOCK_REQUEST","TXN","SADDR","INST_LOCK_REQUEST","INST_LOCK_RELEASE","INST_LOCK_TYPE","INST_LOCK_ID1","INST_LOCK_ID2","KEY") AS 
select "INST_ID","INDX","HASH","ADDRESS","CACHE#","CACHE_NAME","EXISTENT","LOCK_MODE","LOCK_REQUEST","TXN","SADDR","INST_LOCK_REQUEST","INST_LOCK_RELEASE","INST_LOCK_TYPE","INST_LOCK_ID1","INST_LOCK_ID2","KEY" from gv$rowcache_parent;

CREATE OR REPLACE FORCE VIEW "GV_$ROWCACHE_SUBORDINATE"("INST_ID","INDX","HASH","ADDRESS","CACHE#","SUBCACHE#","SUBCACHE_NAME","EXISTENT","PARENT","KEY") AS 
select "INST_ID","INDX","HASH","ADDRESS","CACHE#","SUBCACHE#","SUBCACHE_NAME","EXISTENT","PARENT","KEY" from gv$rowcache_subordinate;

CREATE OR REPLACE FORCE VIEW "GV_$RSRC_CONSUMER_GROUP"("INST_ID","NAME","ACTIVE_SESSIONS","EXECUTION_WAITERS","REQUESTS","CPU_WAIT_TIME","CPU_WAITS","CONSUMED_CPU_TIME","YIELDS","QUEUE_LENGTH","CURRENT_UNDO_CONSUMPTION") AS 
select "INST_ID","NAME","ACTIVE_SESSIONS","EXECUTION_WAITERS","REQUESTS","CPU_WAIT_TIME","CPU_WAITS","CONSUMED_CPU_TIME","YIELDS","QUEUE_LENGTH","CURRENT_UNDO_CONSUMPTION" from gv$rsrc_consumer_group;

CREATE OR REPLACE FORCE VIEW "GV_$RSRC_CONSUME_GROUP_CPU_MTH"("INST_ID","NAME") AS 
select "INST_ID","NAME" from gv$rsrc_consumer_group_cpu_mth;

CREATE OR REPLACE FORCE VIEW "GV_$RSRC_PLAN"("INST_ID","NAME","IS_TOP_PLAN") AS 
select "INST_ID","NAME","IS_TOP_PLAN" from gv$rsrc_plan;

CREATE OR REPLACE FORCE VIEW "GV_$RSRC_PLAN_CPU_MTH"("INST_ID","NAME") AS 
select "INST_ID","NAME" from gv$rsrc_plan_cpu_mth;

CREATE OR REPLACE FORCE VIEW "GV_$RULE"("INST_ID","RULE_SET_OBJECT_ID","EVALUATION_CONTEXT_OBJECT_ID","RULE_OWNER","RULE_NAME","RULE_CONDITION","TRUE_HITS","MAYBE_HITS","SQL_EVALUATIONS") AS 
select "INST_ID","RULE_SET_OBJECT_ID","EVALUATION_CONTEXT_OBJECT_ID","RULE_OWNER","RULE_NAME","RULE_CONDITION","TRUE_HITS","MAYBE_HITS","SQL_EVALUATIONS" from gv$rule;

CREATE OR REPLACE FORCE VIEW "GV_$RULE_SET"("INST_ID","OWNER","NAME","CPU_TIME","ELAPSED_TIME","FIRST_LOAD_TIME","LAST_LOAD_TIME","LAST_LOADING_TIME","SHARABLE_MEM","RELOADS","INVALIDATIONS","EVALUATIONS","FIRST_HIT_EVALUATIONS","SIMPLE_RULES_ONLY_EVALUATIONS","SQL_FREE_EVALUATIONS","SQL_EXECUTIONS","CONDITIONS_PROCESSED","TRUE_RULES","MAYBE_RULES","VARIABLE_VALUE_FUNCTION_CALLS","VARIABLE_METHOD_FUNCTION_CALLS","EVALUATION_FUNCTION_CALLS") AS 
select "INST_ID","OWNER","NAME","CPU_TIME","ELAPSED_TIME","FIRST_LOAD_TIME","LAST_LOAD_TIME","LAST_LOADING_TIME","SHARABLE_MEM","RELOADS","INVALIDATIONS","EVALUATIONS","FIRST_HIT_EVALUATIONS","SIMPLE_RULES_ONLY_EVALUATIONS","SQL_FREE_EVALUATIONS","SQL_EXECUTIONS","CONDITIONS_PROCESSED","TRUE_RULES","MAYBE_RULES","VARIABLE_VALUE_FUNCTION_CALLS","VARIABLE_METHOD_FUNCTION_CALLS","EVALUATION_FUNCTION_CALLS" from gv$rule_set;

CREATE OR REPLACE FORCE VIEW "GV_$RULE_SET_AGGREGATE_STATS"("INST_ID","NAME","VALUE") AS 
select "INST_ID","NAME","VALUE" from gv$rule_set_aggregate_stats;

CREATE OR REPLACE FORCE VIEW "GV_$SCHEDULER_RUNNING_JOBS"("INST_ID","SESSION_ID","SESSION_SERIAL_NUM","JOB_ID","PROCESS_ID","SESSION_STAT_CPU") AS 
select "INST_ID","SESSION_ID","SESSION_SERIAL_NUM","JOB_ID","PROCESS_ID","SESSION_STAT_CPU" from gv$scheduler_running_jobs;

CREATE OR REPLACE FORCE VIEW "GV_$SEGMENT_STATISTICS"("INST_ID","OWNER","OBJECT_NAME","SUBOBJECT_NAME","TABLESPACE_NAME","TS#","OBJ#","DATAOBJ#","OBJECT_TYPE","STATISTIC_NAME","STATISTIC#","VALUE") AS 
select "INST_ID","OWNER","OBJECT_NAME","SUBOBJECT_NAME","TABLESPACE_NAME","TS#","OBJ#","DATAOBJ#","OBJECT_TYPE","STATISTIC_NAME","STATISTIC#","VALUE" from gv$segment_statistics;

CREATE OR REPLACE FORCE VIEW "GV_$SEGSTAT"("INST_ID","TS#","OBJ#","DATAOBJ#","STATISTIC_NAME","STATISTIC#","VALUE") AS 
select "INST_ID","TS#","OBJ#","DATAOBJ#","STATISTIC_NAME","STATISTIC#","VALUE" from gv$segstat;

CREATE OR REPLACE FORCE VIEW "GV_$SEGSTAT_NAME"("INST_ID","STATISTIC#","NAME","SAMPLED") AS 
select "INST_ID","STATISTIC#","NAME","SAMPLED" from gv$segstat_name;

CREATE OR REPLACE FORCE VIEW "GV_$SERVICEMETRIC"("INST_ID","BEGIN_TIME","END_TIME","INTSIZE_CSEC","GROUP_ID","SERVICE_NAME_HASH","SERVICE_NAME","CTMHASH","ELAPSEDPERCALL","CPUPERCALL") AS 
select "INST_ID","BEGIN_TIME","END_TIME","INTSIZE_CSEC","GROUP_ID","SERVICE_NAME_HASH","SERVICE_NAME","CTMHASH","ELAPSEDPERCALL","CPUPERCALL" from gv$servicemetric;

CREATE OR REPLACE FORCE VIEW "GV_$SERVICEMETRIC_HISTORY"("INST_ID","BEGIN_TIME","END_TIME","INTSIZE_CSEC","GROUP_ID","SERVICE_NAME_HASH","SERVICE_NAME","CTMHASH","ELAPSEDPERCALL","CPUPERCALL") AS 
select "INST_ID","BEGIN_TIME","END_TIME","INTSIZE_CSEC","GROUP_ID","SERVICE_NAME_HASH","SERVICE_NAME","CTMHASH","ELAPSEDPERCALL","CPUPERCALL" from gv$servicemetric_history;

CREATE OR REPLACE FORCE VIEW "GV_$SERVICES"("INST_ID","SERVICE_ID","NAME","NAME_HASH","NETWORK_NAME","CREATION_DATE","CREATION_DATE_HASH") AS 
select "INST_ID","SERVICE_ID","NAME","NAME_HASH","NETWORK_NAME","CREATION_DATE","CREATION_DATE_HASH" from gv$services;

CREATE OR REPLACE FORCE VIEW "GV_$SERVICE_EVENT"("INST_ID","SERVICE_NAME","SERVICE_NAME_HASH","EVENT","EVENT_ID","TOTAL_WAITS","TOTAL_TIMEOUTS","TIME_WAITED","AVERAGE_WAIT","MAX_WAIT","TIME_WAITED_MICRO") AS 
select "INST_ID","SERVICE_NAME","SERVICE_NAME_HASH","EVENT","EVENT_ID","TOTAL_WAITS","TOTAL_TIMEOUTS","TIME_WAITED","AVERAGE_WAIT","MAX_WAIT","TIME_WAITED_MICRO" from gv$service_event;

CREATE OR REPLACE FORCE VIEW "GV_$SERVICE_STATS"("INST_ID","SERVICE_NAME_HASH","SERVICE_NAME","STAT_ID","STAT_NAME","VALUE") AS 
select "INST_ID","SERVICE_NAME_HASH","SERVICE_NAME","STAT_ID","STAT_NAME","VALUE" from
   gv$service_stats;

CREATE OR REPLACE FORCE VIEW "GV_$SERVICE_WAIT_CLASS"("INST_ID","SERVICE_NAME","SERVICE_NAME_HASH","WAIT_CLASS_ID","WAIT_CLASS#","WAIT_CLASS","TOTAL_WAITS","TIME_WAITED") AS 
select "INST_ID","SERVICE_NAME","SERVICE_NAME_HASH","WAIT_CLASS_ID","WAIT_CLASS#","WAIT_CLASS","TOTAL_WAITS","TIME_WAITED" from gv$service_wait_class;

CREATE OR REPLACE FORCE VIEW "GV_$SERV_MOD_ACT_STATS"("INST_ID","AGGREGATION_TYPE","SERVICE_NAME","MODULE","ACTION","STAT_ID","STAT_NAME","VALUE") AS 
select "INST_ID","AGGREGATION_TYPE","SERVICE_NAME","MODULE","ACTION","STAT_ID","STAT_NAME","VALUE" from
   gv$serv_mod_act_stats;

CREATE OR REPLACE FORCE VIEW "GV_$SESSION"("INST_ID","SADDR","SID","SERIAL#","AUDSID","PADDR","USER#","USERNAME","COMMAND","OWNERID","TADDR","LOCKWAIT","STATUS","SERVER","SCHEMA#","SCHEMANAME","OSUSER","PROCESS","MACHINE","TERMINAL","PROGRAM","TYPE","SQL_ADDRESS","SQL_HASH_VALUE","SQL_ID","SQL_CHILD_NUMBER","PREV_SQL_ADDR","PREV_HASH_VALUE","PREV_SQL_ID","PREV_CHILD_NUMBER","MODULE","MODULE_HASH","ACTION","ACTION_HASH","CLIENT_INFO","FIXED_TABLE_SEQUENCE","ROW_WAIT_OBJ#","ROW_WAIT_FILE#","ROW_WAIT_BLOCK#","ROW_WAIT_ROW#","LOGON_TIME","LAST_CALL_ET","PDML_ENABLED","FAILOVER_TYPE","FAILOVER_METHOD","FAILED_OVER","RESOURCE_CONSUMER_GROUP","PDML_STATUS","PDDL_STATUS","PQ_STATUS","CURRENT_QUEUE_DURATION","CLIENT_IDENTIFIER","BLOCKING_SESSION_STATUS","BLOCKING_SESSION","SEQ#","EVENT#","EVENT","P1TEXT","P1","P1RAW","P2TEXT","P2","P2RAW","P3TEXT","P3","P3RAW","WAIT_CLASS_ID","WAIT_CLASS#","WAIT_CLASS","WAIT_TIME","SECONDS_IN_WAIT","STATE","SERVICE_NAME") AS 
select "INST_ID","SADDR","SID","SERIAL#","AUDSID","PADDR","USER#","USERNAME","COMMAND","OWNERID","TADDR","LOCKWAIT","STATUS","SERVER","SCHEMA#","SCHEMANAME","OSUSER","PROCESS","MACHINE","TERMINAL","PROGRAM","TYPE","SQL_ADDRESS","SQL_HASH_VALUE","SQL_ID","SQL_CHILD_NUMBER","PREV_SQL_ADDR","PREV_HASH_VALUE","PREV_SQL_ID","PREV_CHILD_NUMBER","MODULE","MODULE_HASH","ACTION","ACTION_HASH","CLIENT_INFO","FIXED_TABLE_SEQUENCE","ROW_WAIT_OBJ#","ROW_WAIT_FILE#","ROW_WAIT_BLOCK#","ROW_WAIT_ROW#","LOGON_TIME","LAST_CALL_ET","PDML_ENABLED","FAILOVER_TYPE","FAILOVER_METHOD","FAILED_OVER","RESOURCE_CONSUMER_GROUP","PDML_STATUS","PDDL_STATUS","PQ_STATUS","CURRENT_QUEUE_DURATION","CLIENT_IDENTIFIER","BLOCKING_SESSION_STATUS","BLOCKING_SESSION","SEQ#","EVENT#","EVENT","P1TEXT","P1","P1RAW","P2TEXT","P2","P2RAW","P3TEXT","P3","P3RAW","WAIT_CLASS_ID","WAIT_CLASS#","WAIT_CLASS","WAIT_TIME","SECONDS_IN_WAIT","STATE","SERVICE_NAME" from gv$session;

CREATE OR REPLACE FORCE VIEW "GV_$SESSION_CONNECT_INFO"("INST_ID","SID","AUTHENTICATION_TYPE","OSUSER","NETWORK_SERVICE_BANNER") AS 
select "INST_ID","SID","AUTHENTICATION_TYPE","OSUSER","NETWORK_SERVICE_BANNER" from gv$session_connect_info;

CREATE OR REPLACE FORCE VIEW "GV_$SESSION_CURSOR_CACHE"("INST_ID","MAXIMUM","COUNT","OPENED_ONCE","OPEN","OPENS","HITS","HIT_RATIO") AS 
select "INST_ID","MAXIMUM","COUNT","OPENED_ONCE","OPEN","OPENS","HITS","HIT_RATIO" from gv$session_cursor_cache;

CREATE OR REPLACE FORCE VIEW "GV_$SESSION_EVENT"("INST_ID","SID","EVENT","TOTAL_WAITS","TOTAL_TIMEOUTS","TIME_WAITED","AVERAGE_WAIT","MAX_WAIT","TIME_WAITED_MICRO","EVENT_ID") AS 
select "INST_ID","SID","EVENT","TOTAL_WAITS","TOTAL_TIMEOUTS","TIME_WAITED","AVERAGE_WAIT","MAX_WAIT","TIME_WAITED_MICRO","EVENT_ID" from gv$session_event;

CREATE OR REPLACE FORCE VIEW "GV_$SESSION_LONGOPS"("INST_ID","SID","SERIAL#","OPNAME","TARGET","TARGET_DESC","SOFAR","TOTALWORK","UNITS","START_TIME","LAST_UPDATE_TIME","TIME_REMAINING","ELAPSED_SECONDS","CONTEXT","MESSAGE","USERNAME","SQL_ADDRESS","SQL_HASH_VALUE","SQL_ID","QCSID") AS 
select "INST_ID","SID","SERIAL#","OPNAME","TARGET","TARGET_DESC","SOFAR","TOTALWORK","UNITS","START_TIME","LAST_UPDATE_TIME","TIME_REMAINING","ELAPSED_SECONDS","CONTEXT","MESSAGE","USERNAME","SQL_ADDRESS","SQL_HASH_VALUE","SQL_ID","QCSID" from gv$session_longops;

CREATE OR REPLACE FORCE VIEW "GV_$SESSION_OBJECT_CACHE"("INST_ID","PINS","HITS","TRUE_HITS","HIT_RATIO","TRUE_HIT_RATIO","OBJECT_REFRESHES","CACHE_REFRESHES","OBJECT_FLUSHES","CACHE_FLUSHES","CACHE_SHRINKS","CACHED_OBJECTS","PINNED_OBJECTS","CACHE_SIZE","OPTIMAL_SIZE","MAXIMUM_SIZE") AS 
select "INST_ID","PINS","HITS","TRUE_HITS","HIT_RATIO","TRUE_HIT_RATIO","OBJECT_REFRESHES","CACHE_REFRESHES","OBJECT_FLUSHES","CACHE_FLUSHES","CACHE_SHRINKS","CACHED_OBJECTS","PINNED_OBJECTS","CACHE_SIZE","OPTIMAL_SIZE","MAXIMUM_SIZE" from gv$session_object_cache;

CREATE OR REPLACE FORCE VIEW "GV_$SESSION_WAIT"("INST_ID","SID","SEQ#","EVENT","P1TEXT","P1","P1RAW","P2TEXT","P2","P2RAW","P3TEXT","P3","P3RAW","WAIT_CLASS_ID","WAIT_CLASS#","WAIT_CLASS","WAIT_TIME","SECONDS_IN_WAIT","STATE") AS 
select "INST_ID","SID","SEQ#","EVENT","P1TEXT","P1","P1RAW","P2TEXT","P2","P2RAW","P3TEXT","P3","P3RAW","WAIT_CLASS_ID","WAIT_CLASS#","WAIT_CLASS","WAIT_TIME","SECONDS_IN_WAIT","STATE" from gv$session_wait;

CREATE OR REPLACE FORCE VIEW "GV_$SESSION_WAIT_CLASS"("INST_ID","SID","SERIAL#","WAIT_CLASS_ID","WAIT_CLASS#","WAIT_CLASS","TOTAL_WAITS","TIME_WAITED") AS 
select "INST_ID","SID","SERIAL#","WAIT_CLASS_ID","WAIT_CLASS#","WAIT_CLASS","TOTAL_WAITS","TIME_WAITED" from gv$session_wait_class;

CREATE OR REPLACE FORCE VIEW "GV_$SESSION_WAIT_HISTORY"("INST_ID","SID","SEQ#","EVENT#","EVENT","P1TEXT","P1","P2TEXT","P2","P3TEXT","P3","WAIT_TIME","WAIT_COUNT") AS 
select "INST_ID","SID","SEQ#","EVENT#","EVENT","P1TEXT","P1","P2TEXT","P2","P3TEXT","P3","WAIT_TIME","WAIT_COUNT" from gv$session_wait_history;

CREATE OR REPLACE FORCE VIEW "GV_$SESSMETRIC"("INST_ID","BEGIN_TIME","END_TIME","INTSIZE_CSEC","SESSION_ID","SERIAL_NUM","CPU","PHYSICAL_READS","PGA_MEMORY","HARD_PARSES","SOFT_PARSES","PHYSICAL_READ_PCT","LOGICAL_READ_PCT") AS 
select "INST_ID","BEGIN_TIME","END_TIME","INTSIZE_CSEC","SESSION_ID","SERIAL_NUM","CPU","PHYSICAL_READS","PGA_MEMORY","HARD_PARSES","SOFT_PARSES","PHYSICAL_READ_PCT","LOGICAL_READ_PCT" from gv$sessmetric;

CREATE OR REPLACE FORCE VIEW "GV_$SESSTAT"("INST_ID","SID","STATISTIC#","VALUE") AS 
select "INST_ID","SID","STATISTIC#","VALUE" from gv$sesstat;

CREATE OR REPLACE FORCE VIEW "GV_$SESS_IO"("INST_ID","SID","BLOCK_GETS","CONSISTENT_GETS","PHYSICAL_READS","BLOCK_CHANGES","CONSISTENT_CHANGES") AS 
select "INST_ID","SID","BLOCK_GETS","CONSISTENT_GETS","PHYSICAL_READS","BLOCK_CHANGES","CONSISTENT_CHANGES" from gv$sess_io;

CREATE OR REPLACE FORCE VIEW "GV_$SESS_TIME_MODEL"("INST_ID","SID","STAT_ID","STAT_NAME","VALUE") AS 
select "INST_ID","SID","STAT_ID","STAT_NAME","VALUE" from gv$sess_time_model;

CREATE OR REPLACE FORCE VIEW "GV_$SES_OPTIMIZER_ENV"("INST_ID","SID","ID","NAME","ISDEFAULT","VALUE") AS 
select "INST_ID","SID","ID","NAME","ISDEFAULT","VALUE" from gv$ses_optimizer_env;

CREATE OR REPLACE FORCE VIEW "GV_$SGA"("INST_ID","NAME","VALUE") AS 
select "INST_ID","NAME","VALUE" from gv$sga;

CREATE OR REPLACE FORCE VIEW "GV_$SGAINFO"("INST_ID","NAME","BYTES","RESIZEABLE") AS 
select "INST_ID","NAME","BYTES","RESIZEABLE" from gv$sgainfo;

CREATE OR REPLACE FORCE VIEW "GV_$SGASTAT"("INST_ID","POOL","NAME","BYTES") AS 
select "INST_ID","POOL","NAME","BYTES" from gv$sgastat;

CREATE OR REPLACE FORCE VIEW "GV_$SGA_CURRENT_RESIZE_OPS"("INST_ID","COMPONENT","OPER_TYPE","OPER_MODE","PARAMETER","INITIAL_SIZE","TARGET_SIZE","CURRENT_SIZE","START_TIME","LAST_UPDATE_TIME") AS 
select "INST_ID","COMPONENT","OPER_TYPE","OPER_MODE","PARAMETER","INITIAL_SIZE","TARGET_SIZE","CURRENT_SIZE","START_TIME","LAST_UPDATE_TIME" from gv$sga_current_resize_ops;

CREATE OR REPLACE FORCE VIEW "GV_$SGA_DYNAMIC_COMPONENTS"("INST_ID","COMPONENT","CURRENT_SIZE","MIN_SIZE","MAX_SIZE","USER_SPECIFIED_SIZE","OPER_COUNT","LAST_OPER_TYPE","LAST_OPER_MODE","LAST_OPER_TIME","GRANULE_SIZE") AS 
select "INST_ID","COMPONENT","CURRENT_SIZE","MIN_SIZE","MAX_SIZE","USER_SPECIFIED_SIZE","OPER_COUNT","LAST_OPER_TYPE","LAST_OPER_MODE","LAST_OPER_TIME","GRANULE_SIZE" from gv$sga_dynamic_components;

CREATE OR REPLACE FORCE VIEW "GV_$SGA_DYNAMIC_FREE_MEMORY"("INST_ID","CURRENT_SIZE") AS 
select "INST_ID","CURRENT_SIZE" from gv$sga_dynamic_free_memory;

CREATE OR REPLACE FORCE VIEW "GV_$SGA_RESIZE_OPS"("INST_ID","COMPONENT","OPER_TYPE","OPER_MODE","PARAMETER","INITIAL_SIZE","TARGET_SIZE","FINAL_SIZE","STATUS","START_TIME","END_TIME") AS 
select "INST_ID","COMPONENT","OPER_TYPE","OPER_MODE","PARAMETER","INITIAL_SIZE","TARGET_SIZE","FINAL_SIZE","STATUS","START_TIME","END_TIME" from gv$sga_resize_ops;

CREATE OR REPLACE FORCE VIEW "GV_$SHARED_POOL_ADVICE"("INST_ID","SHARED_POOL_SIZE_FOR_ESTIMATE","SHARED_POOL_SIZE_FACTOR","ESTD_LC_SIZE","ESTD_LC_MEMORY_OBJECTS","ESTD_LC_TIME_SAVED","ESTD_LC_TIME_SAVED_FACTOR","ESTD_LC_LOAD_TIME","ESTD_LC_LOAD_TIME_FACTOR","ESTD_LC_MEMORY_OBJECT_HITS") AS 
select "INST_ID","SHARED_POOL_SIZE_FOR_ESTIMATE","SHARED_POOL_SIZE_FACTOR","ESTD_LC_SIZE","ESTD_LC_MEMORY_OBJECTS","ESTD_LC_TIME_SAVED","ESTD_LC_TIME_SAVED_FACTOR","ESTD_LC_LOAD_TIME","ESTD_LC_LOAD_TIME_FACTOR","ESTD_LC_MEMORY_OBJECT_HITS" from gv$shared_pool_advice;

CREATE OR REPLACE FORCE VIEW "GV_$SHARED_POOL_RESERVED"("INST_ID","FREE_SPACE","AVG_FREE_SIZE","FREE_COUNT","MAX_FREE_SIZE","USED_SPACE","AVG_USED_SIZE","USED_COUNT","MAX_USED_SIZE","REQUESTS","REQUEST_MISSES","LAST_MISS_SIZE","MAX_MISS_SIZE","REQUEST_FAILURES","LAST_FAILURE_SIZE","ABORTED_REQUEST_THRESHOLD","ABORTED_REQUESTS","LAST_ABORTED_SIZE") AS 
select "INST_ID","FREE_SPACE","AVG_FREE_SIZE","FREE_COUNT","MAX_FREE_SIZE","USED_SPACE","AVG_USED_SIZE","USED_COUNT","MAX_USED_SIZE","REQUESTS","REQUEST_MISSES","LAST_MISS_SIZE","MAX_MISS_SIZE","REQUEST_FAILURES","LAST_FAILURE_SIZE","ABORTED_REQUEST_THRESHOLD","ABORTED_REQUESTS","LAST_ABORTED_SIZE" from gv$shared_pool_reserved;

CREATE OR REPLACE FORCE VIEW "GV_$SHARED_SERVER"("INST_ID","NAME","PADDR","STATUS","MESSAGES","BYTES","BREAKS","CIRCUIT","IDLE","BUSY","REQUESTS") AS 
select "INST_ID","NAME","PADDR","STATUS","MESSAGES","BYTES","BREAKS","CIRCUIT","IDLE","BUSY","REQUESTS" from gv$shared_server;

CREATE OR REPLACE FORCE VIEW "GV_$SHARED_SERVER_MONITOR"("INST_ID","MAXIMUM_CONNECTIONS","MAXIMUM_SESSIONS","SERVERS_STARTED","SERVERS_TERMINATED","SERVERS_HIGHWATER") AS 
select "INST_ID","MAXIMUM_CONNECTIONS","MAXIMUM_SESSIONS","SERVERS_STARTED","SERVERS_TERMINATED","SERVERS_HIGHWATER" from gv$shared_server_monitor;

CREATE OR REPLACE FORCE VIEW "GV_$SORT_SEGMENT"("INST_ID","TABLESPACE_NAME","SEGMENT_FILE","SEGMENT_BLOCK","EXTENT_SIZE","CURRENT_USERS","TOTAL_EXTENTS","TOTAL_BLOCKS","USED_EXTENTS","USED_BLOCKS","FREE_EXTENTS","FREE_BLOCKS","ADDED_EXTENTS","EXTENT_HITS","FREED_EXTENTS","FREE_REQUESTS","MAX_SIZE","MAX_BLOCKS","MAX_USED_SIZE","MAX_USED_BLOCKS","MAX_SORT_SIZE","MAX_SORT_BLOCKS","RELATIVE_FNO") AS 
select "INST_ID","TABLESPACE_NAME","SEGMENT_FILE","SEGMENT_BLOCK","EXTENT_SIZE","CURRENT_USERS","TOTAL_EXTENTS","TOTAL_BLOCKS","USED_EXTENTS","USED_BLOCKS","FREE_EXTENTS","FREE_BLOCKS","ADDED_EXTENTS","EXTENT_HITS","FREED_EXTENTS","FREE_REQUESTS","MAX_SIZE","MAX_BLOCKS","MAX_USED_SIZE","MAX_USED_BLOCKS","MAX_SORT_SIZE","MAX_SORT_BLOCKS","RELATIVE_FNO" from gv$sort_segment;

CREATE OR REPLACE FORCE VIEW "GV_$SORT_USAGE"("INST_ID","USERNAME","USER","SESSION_ADDR","SESSION_NUM","SQLADDR","SQLHASH","SQL_ID","TABLESPACE","CONTENTS","SEGTYPE","SEGFILE#","SEGBLK#","EXTENTS","BLOCKS","SEGRFNO#") AS 
select "INST_ID","USERNAME","USER","SESSION_ADDR","SESSION_NUM","SQLADDR","SQLHASH","SQL_ID","TABLESPACE","CONTENTS","SEGTYPE","SEGFILE#","SEGBLK#","EXTENTS","BLOCKS","SEGRFNO#" from gv$sort_usage;

CREATE OR REPLACE FORCE VIEW "GV_$SPPARAMETER"("INST_ID","SID","NAME","VALUE","DISPLAY_VALUE","ISSPECIFIED","ORDINAL","UPDATE_COMMENT") AS 
select "INST_ID","SID","NAME","VALUE","DISPLAY_VALUE","ISSPECIFIED","ORDINAL","UPDATE_COMMENT" from gv$spparameter;

CREATE OR REPLACE FORCE VIEW "GV_$SQL"("INST_ID","SQL_TEXT","SQL_FULLTEXT","SQL_ID","SHARABLE_MEM","PERSISTENT_MEM","RUNTIME_MEM","SORTS","LOADED_VERSIONS","OPEN_VERSIONS","USERS_OPENING","FETCHES","EXECUTIONS","END_OF_FETCH_COUNT","USERS_EXECUTING","LOADS","FIRST_LOAD_TIME","INVALIDATIONS","PARSE_CALLS","DISK_READS","DIRECT_WRITES","BUFFER_GETS","APPLICATION_WAIT_TIME","CONCURRENCY_WAIT_TIME","CLUSTER_WAIT_TIME","USER_IO_WAIT_TIME","PLSQL_EXEC_TIME","JAVA_EXEC_TIME","ROWS_PROCESSED","COMMAND_TYPE","OPTIMIZER_MODE","OPTIMIZER_COST","OPTIMIZER_ENV","OPTIMIZER_ENV_HASH_VALUE","PARSING_USER_ID","PARSING_SCHEMA_ID","KEPT_VERSIONS","ADDRESS","TYPE_CHK_HEAP","HASH_VALUE","OLD_HASH_VALUE","PLAN_HASH_VALUE","CHILD_NUMBER","MODULE","MODULE_HASH","ACTION","ACTION_HASH","SERIALIZABLE_ABORTS","OUTLINE_CATEGORY","CPU_TIME","ELAPSED_TIME","OUTLINE_SID","CHILD_ADDRESS","SQLTYPE","REMOTE","OBJECT_STATUS","LITERAL_HASH_VALUE","LAST_LOAD_TIME","IS_OBSOLETE","CHILD_LATCH","SQL_PROFILE","PROGRAM_ID","PROGRAM_LINE#") AS 
select "INST_ID","SQL_TEXT","SQL_FULLTEXT","SQL_ID","SHARABLE_MEM","PERSISTENT_MEM","RUNTIME_MEM","SORTS","LOADED_VERSIONS","OPEN_VERSIONS","USERS_OPENING","FETCHES","EXECUTIONS","END_OF_FETCH_COUNT","USERS_EXECUTING","LOADS","FIRST_LOAD_TIME","INVALIDATIONS","PARSE_CALLS","DISK_READS","DIRECT_WRITES","BUFFER_GETS","APPLICATION_WAIT_TIME","CONCURRENCY_WAIT_TIME","CLUSTER_WAIT_TIME","USER_IO_WAIT_TIME","PLSQL_EXEC_TIME","JAVA_EXEC_TIME","ROWS_PROCESSED","COMMAND_TYPE","OPTIMIZER_MODE","OPTIMIZER_COST","OPTIMIZER_ENV","OPTIMIZER_ENV_HASH_VALUE","PARSING_USER_ID","PARSING_SCHEMA_ID","KEPT_VERSIONS","ADDRESS","TYPE_CHK_HEAP","HASH_VALUE","OLD_HASH_VALUE","PLAN_HASH_VALUE","CHILD_NUMBER","MODULE","MODULE_HASH","ACTION","ACTION_HASH","SERIALIZABLE_ABORTS","OUTLINE_CATEGORY","CPU_TIME","ELAPSED_TIME","OUTLINE_SID","CHILD_ADDRESS","SQLTYPE","REMOTE","OBJECT_STATUS","LITERAL_HASH_VALUE","LAST_LOAD_TIME","IS_OBSOLETE","CHILD_LATCH","SQL_PROFILE","PROGRAM_ID","PROGRAM_LINE#" from gv$sql;

CREATE OR REPLACE FORCE VIEW "GV_$SQLAREA"("INST_ID","SQL_TEXT","SQL_ID","SHARABLE_MEM","PERSISTENT_MEM","RUNTIME_MEM","SORTS","VERSION_COUNT","LOADED_VERSIONS","OPEN_VERSIONS","USERS_OPENING","FETCHES","EXECUTIONS","END_OF_FETCH_COUNT","USERS_EXECUTING","LOADS","FIRST_LOAD_TIME","INVALIDATIONS","PARSE_CALLS","DISK_READS","DIRECT_WRITES","BUFFER_GETS","APPLICATION_WAIT_TIME","CONCURRENCY_WAIT_TIME","CLUSTER_WAIT_TIME","USER_IO_WAIT_TIME","PLSQL_EXEC_TIME","JAVA_EXEC_TIME","ROWS_PROCESSED","COMMAND_TYPE","OPTIMIZER_MODE","PARSING_USER_ID","PARSING_SCHEMA_ID","KEPT_VERSIONS","ADDRESS","HASH_VALUE","OLD_HASH_VALUE","MODULE","MODULE_HASH","ACTION","ACTION_HASH","SERIALIZABLE_ABORTS","CPU_TIME","ELAPSED_TIME","IS_OBSOLETE","CHILD_LATCH","PROGRAM_ID") AS 
select "INST_ID","SQL_TEXT","SQL_ID","SHARABLE_MEM","PERSISTENT_MEM","RUNTIME_MEM","SORTS","VERSION_COUNT","LOADED_VERSIONS","OPEN_VERSIONS","USERS_OPENING","FETCHES","EXECUTIONS","END_OF_FETCH_COUNT","USERS_EXECUTING","LOADS","FIRST_LOAD_TIME","INVALIDATIONS","PARSE_CALLS","DISK_READS","DIRECT_WRITES","BUFFER_GETS","APPLICATION_WAIT_TIME","CONCURRENCY_WAIT_TIME","CLUSTER_WAIT_TIME","USER_IO_WAIT_TIME","PLSQL_EXEC_TIME","JAVA_EXEC_TIME","ROWS_PROCESSED","COMMAND_TYPE","OPTIMIZER_MODE","PARSING_USER_ID","PARSING_SCHEMA_ID","KEPT_VERSIONS","ADDRESS","HASH_VALUE","OLD_HASH_VALUE","MODULE","MODULE_HASH","ACTION","ACTION_HASH","SERIALIZABLE_ABORTS","CPU_TIME","ELAPSED_TIME","IS_OBSOLETE","CHILD_LATCH","PROGRAM_ID" from gv$sqlarea;

CREATE OR REPLACE FORCE VIEW "GV_$SQLTEXT"("INST_ID","ADDRESS","HASH_VALUE","SQL_ID","COMMAND_TYPE","PIECE","SQL_TEXT") AS 
select "INST_ID","ADDRESS","HASH_VALUE","SQL_ID","COMMAND_TYPE","PIECE","SQL_TEXT" from gv$sqltext;

CREATE OR REPLACE FORCE VIEW "GV_$SQLTEXT_WITH_NEWLINES"("INST_ID","ADDRESS","HASH_VALUE","SQL_ID","COMMAND_TYPE","PIECE","SQL_TEXT") AS 
select "INST_ID","ADDRESS","HASH_VALUE","SQL_ID","COMMAND_TYPE","PIECE","SQL_TEXT" from gv$sqltext_with_newlines;

CREATE OR REPLACE FORCE VIEW "GV_$SQL_BIND_CAPTURE"("INST_ID","ADDRESS","HASH_VALUE","SQL_ID","CHILD_ADDRESS","CHILD_NUMBER","NAME","POSITION","DUP_POSITION","DATATYPE","DATATYPE_STRING","CHARACTER_SID","PRECISION","SCALE","MAX_LENGTH","WAS_CAPTURED","LAST_CAPTURED","VALUE_STRING","VALUE_ANYDATA") AS 
select "INST_ID","ADDRESS","HASH_VALUE","SQL_ID","CHILD_ADDRESS","CHILD_NUMBER","NAME","POSITION","DUP_POSITION","DATATYPE","DATATYPE_STRING","CHARACTER_SID","PRECISION","SCALE","MAX_LENGTH","WAS_CAPTURED","LAST_CAPTURED","VALUE_STRING","VALUE_ANYDATA" from go$sql_bind_capture;

CREATE OR REPLACE FORCE VIEW "GV_$SQL_BIND_DATA"("INST_ID","CURSOR_NUM","POSITION","DATATYPE","SHARED_MAX_LEN","PRIVATE_MAX_LEN","ARRAY_SIZE","PRECISION","SCALE","SHARED_FLAG","SHARED_FLAG2","BUF_ADDRESS","BUF_LENGTH","VAL_LENGTH","BUF_FLAG","INDICATOR","VALUE") AS 
select "INST_ID","CURSOR_NUM","POSITION","DATATYPE","SHARED_MAX_LEN","PRIVATE_MAX_LEN","ARRAY_SIZE","PRECISION","SCALE","SHARED_FLAG","SHARED_FLAG2","BUF_ADDRESS","BUF_LENGTH","VAL_LENGTH","BUF_FLAG","INDICATOR","VALUE" from gv$sql_bind_data;

CREATE OR REPLACE FORCE VIEW "GV_$SQL_BIND_METADATA"("INST_ID","ADDRESS","POSITION","DATATYPE","MAX_LENGTH","ARRAY_LEN","BIND_NAME") AS 
select "INST_ID","ADDRESS","POSITION","DATATYPE","MAX_LENGTH","ARRAY_LEN","BIND_NAME" from gv$sql_bind_metadata;

CREATE OR REPLACE FORCE VIEW "GV_$SQL_CURSOR"("INST_ID","CURNO","FLAG","STATUS","PARENT_HANDLE","PARENT_LOCK","CHILD_LOCK","CHILD_PIN","PERS_HEAP_MEM","WORK_HEAP_MEM","BIND_VARS","DEFINE_VARS","BIND_MEM_LOC","INST_FLAG","INST_FLAG2") AS 
select "INST_ID","CURNO","FLAG","STATUS","PARENT_HANDLE","PARENT_LOCK","CHILD_LOCK","CHILD_PIN","PERS_HEAP_MEM","WORK_HEAP_MEM","BIND_VARS","DEFINE_VARS","BIND_MEM_LOC","INST_FLAG","INST_FLAG2" from gv$sql_cursor;

CREATE OR REPLACE FORCE VIEW "GV_$SQL_OPTIMIZER_ENV"("INST_ID","ADDRESS","HASH_VALUE","SQL_ID","CHILD_ADDRESS","CHILD_NUMBER","ID","NAME","ISDEFAULT","VALUE") AS 
select "INST_ID","ADDRESS","HASH_VALUE","SQL_ID","CHILD_ADDRESS","CHILD_NUMBER","ID","NAME","ISDEFAULT","VALUE" from gv$sql_optimizer_env;

CREATE OR REPLACE FORCE VIEW "GV_$SQL_PLAN"("INST_ID","ADDRESS","HASH_VALUE","SQL_ID","PLAN_HASH_VALUE","CHILD_NUMBER","OPERATION","OPTIONS","OBJECT_NODE","OBJECT#","OBJECT_OWNER","OBJECT_NAME","OBJECT_ALIAS","OBJECT_TYPE","OPTIMIZER","ID","PARENT_ID","DEPTH","POSITION","SEARCH_COLUMNS","COST","CARDINALITY","BYTES","OTHER_TAG","PARTITION_START","PARTITION_STOP","PARTITION_ID","OTHER","DISTRIBUTION","CPU_COST","IO_COST","TEMP_SPACE","ACCESS_PREDICATES","FILTER_PREDICATES","PROJECTION","TIME","QBLOCK_NAME","REMARKS") AS 
select "INST_ID","ADDRESS","HASH_VALUE","SQL_ID","PLAN_HASH_VALUE","CHILD_NUMBER","OPERATION","OPTIONS","OBJECT_NODE","OBJECT#","OBJECT_OWNER","OBJECT_NAME","OBJECT_ALIAS","OBJECT_TYPE","OPTIMIZER","ID","PARENT_ID","DEPTH","POSITION","SEARCH_COLUMNS","COST","CARDINALITY","BYTES","OTHER_TAG","PARTITION_START","PARTITION_STOP","PARTITION_ID","OTHER","DISTRIBUTION","CPU_COST","IO_COST","TEMP_SPACE","ACCESS_PREDICATES","FILTER_PREDICATES","PROJECTION","TIME","QBLOCK_NAME","REMARKS" from gv$sql_plan;

CREATE OR REPLACE FORCE VIEW "GV_$SQL_PLAN_STATISTICS"("INST_ID","ADDRESS","HASH_VALUE","SQL_ID","PLAN_HASH_VALUE","CHILD_NUMBER","OPERATION_ID","EXECUTIONS","LAST_STARTS","STARTS","LAST_OUTPUT_ROWS","OUTPUT_ROWS","LAST_CR_BUFFER_GETS","CR_BUFFER_GETS","LAST_CU_BUFFER_GETS","CU_BUFFER_GETS","LAST_DISK_READS","DISK_READS","LAST_DISK_WRITES","DISK_WRITES","LAST_ELAPSED_TIME","ELAPSED_TIME") AS 
select "INST_ID","ADDRESS","HASH_VALUE","SQL_ID","PLAN_HASH_VALUE","CHILD_NUMBER","OPERATION_ID","EXECUTIONS","LAST_STARTS","STARTS","LAST_OUTPUT_ROWS","OUTPUT_ROWS","LAST_CR_BUFFER_GETS","CR_BUFFER_GETS","LAST_CU_BUFFER_GETS","CU_BUFFER_GETS","LAST_DISK_READS","DISK_READS","LAST_DISK_WRITES","DISK_WRITES","LAST_ELAPSED_TIME","ELAPSED_TIME" from gv$sql_plan_statistics;

CREATE OR REPLACE FORCE VIEW "GV_$SQL_PLAN_STATISTICS_ALL"("INST_ID","ADDRESS","HASH_VALUE","SQL_ID","PLAN_HASH_VALUE","CHILD_NUMBER","OPERATION","OPTIONS","OBJECT_NODE","OBJECT#","OBJECT_OWNER","OBJECT_NAME","OBJECT_ALIAS","OBJECT_TYPE","OPTIMIZER","ID","PARENT_ID","DEPTH","POSITION","SEARCH_COLUMNS","COST","CARDINALITY","BYTES","OTHER_TAG","PARTITION_START","PARTITION_STOP","PARTITION_ID","OTHER","DISTRIBUTION","CPU_COST","IO_COST","TEMP_SPACE","ACCESS_PREDICATES","FILTER_PREDICATES","PROJECTION","TIME","QBLOCK_NAME","REMARKS","EXECUTIONS","LAST_STARTS","STARTS","LAST_OUTPUT_ROWS","OUTPUT_ROWS","LAST_CR_BUFFER_GETS","CR_BUFFER_GETS","LAST_CU_BUFFER_GETS","CU_BUFFER_GETS","LAST_DISK_READS","DISK_READS","LAST_DISK_WRITES","DISK_WRITES","LAST_ELAPSED_TIME","ELAPSED_TIME","POLICY","ESTIMATED_OPTIMAL_SIZE","ESTIMATED_ONEPASS_SIZE","LAST_MEMORY_USED","LAST_EXECUTION","LAST_DEGREE","TOTAL_EXECUTIONS","OPTIMAL_EXECUTIONS","ONEPASS_EXECUTIONS","MULTIPASSES_EXECUTIONS","ACTIVE_TIME","MAX_TEMPSEG_SIZE","LAST_TEMPSEG_SIZE") AS 
select "INST_ID","ADDRESS","HASH_VALUE","SQL_ID","PLAN_HASH_VALUE","CHILD_NUMBER","OPERATION","OPTIONS","OBJECT_NODE","OBJECT#","OBJECT_OWNER","OBJECT_NAME","OBJECT_ALIAS","OBJECT_TYPE","OPTIMIZER","ID","PARENT_ID","DEPTH","POSITION","SEARCH_COLUMNS","COST","CARDINALITY","BYTES","OTHER_TAG","PARTITION_START","PARTITION_STOP","PARTITION_ID","OTHER","DISTRIBUTION","CPU_COST","IO_COST","TEMP_SPACE","ACCESS_PREDICATES","FILTER_PREDICATES","PROJECTION","TIME","QBLOCK_NAME","REMARKS","EXECUTIONS","LAST_STARTS","STARTS","LAST_OUTPUT_ROWS","OUTPUT_ROWS","LAST_CR_BUFFER_GETS","CR_BUFFER_GETS","LAST_CU_BUFFER_GETS","CU_BUFFER_GETS","LAST_DISK_READS","DISK_READS","LAST_DISK_WRITES","DISK_WRITES","LAST_ELAPSED_TIME","ELAPSED_TIME","POLICY","ESTIMATED_OPTIMAL_SIZE","ESTIMATED_ONEPASS_SIZE","LAST_MEMORY_USED","LAST_EXECUTION","LAST_DEGREE","TOTAL_EXECUTIONS","OPTIMAL_EXECUTIONS","ONEPASS_EXECUTIONS","MULTIPASSES_EXECUTIONS","ACTIVE_TIME","MAX_TEMPSEG_SIZE","LAST_TEMPSEG_SIZE" from gv$sql_plan_statistics_all;

CREATE OR REPLACE FORCE VIEW "GV_$SQL_REDIRECTION"("INST_ID","ADDRESS","PARENT_HANDLE","HASH_VALUE","SQL_ID","CHILD_NUMBER","PARSING_USER_ID","PARSING_SCHEMA_ID","COMMAND_TYPE","REASON","ERROR_CODE","POSITION","SQL_TEXT_PIECE","ERROR_MESSAGE") AS 
select "INST_ID","ADDRESS","PARENT_HANDLE","HASH_VALUE","SQL_ID","CHILD_NUMBER","PARSING_USER_ID","PARSING_SCHEMA_ID","COMMAND_TYPE","REASON","ERROR_CODE","POSITION","SQL_TEXT_PIECE","ERROR_MESSAGE" from gv$sql_redirection;

CREATE OR REPLACE FORCE VIEW "GV_$SQL_SHARED_CURSOR"("INST_ID","SQL_ID","ADDRESS","CHILD_ADDRESS","CHILD_NUMBER","UNBOUND_CURSOR","SQL_TYPE_MISMATCH","OPTIMIZER_MISMATCH","OUTLINE_MISMATCH","STATS_ROW_MISMATCH","LITERAL_MISMATCH","SEC_DEPTH_MISMATCH","EXPLAIN_PLAN_CURSOR","BUFFERED_DML_MISMATCH","PDML_ENV_MISMATCH","INST_DRTLD_MISMATCH","SLAVE_QC_MISMATCH","TYPECHECK_MISMATCH","AUTH_CHECK_MISMATCH","BIND_MISMATCH","DESCRIBE_MISMATCH","LANGUAGE_MISMATCH","TRANSLATION_MISMATCH","ROW_LEVEL_SEC_MISMATCH","INSUFF_PRIVS","INSUFF_PRIVS_REM","REMOTE_TRANS_MISMATCH","LOGMINER_SESSION_MISMATCH","INCOMP_LTRL_MISMATCH","OVERLAP_TIME_MISMATCH","SQL_REDIRECT_MISMATCH","MV_QUERY_GEN_MISMATCH","USER_BIND_PEEK_MISMATCH","TYPCHK_DEP_MISMATCH","NO_TRIGGER_MISMATCH","FLASHBACK_CURSOR","ANYDATA_TRANSFORMATION","INCOMPLETE_CURSOR","TOP_LEVEL_RPI_CURSOR","DIFFERENT_LONG_LENGTH","LOGICAL_STANDBY_APPLY","DIFF_CALL_DURN","BIND_UACS_DIFF","PLSQL_CMP_SWITCHS_DIFF") AS 
select "INST_ID","SQL_ID","ADDRESS","CHILD_ADDRESS","CHILD_NUMBER","UNBOUND_CURSOR","SQL_TYPE_MISMATCH","OPTIMIZER_MISMATCH","OUTLINE_MISMATCH","STATS_ROW_MISMATCH","LITERAL_MISMATCH","SEC_DEPTH_MISMATCH","EXPLAIN_PLAN_CURSOR","BUFFERED_DML_MISMATCH","PDML_ENV_MISMATCH","INST_DRTLD_MISMATCH","SLAVE_QC_MISMATCH","TYPECHECK_MISMATCH","AUTH_CHECK_MISMATCH","BIND_MISMATCH","DESCRIBE_MISMATCH","LANGUAGE_MISMATCH","TRANSLATION_MISMATCH","ROW_LEVEL_SEC_MISMATCH","INSUFF_PRIVS","INSUFF_PRIVS_REM","REMOTE_TRANS_MISMATCH","LOGMINER_SESSION_MISMATCH","INCOMP_LTRL_MISMATCH","OVERLAP_TIME_MISMATCH","SQL_REDIRECT_MISMATCH","MV_QUERY_GEN_MISMATCH","USER_BIND_PEEK_MISMATCH","TYPCHK_DEP_MISMATCH","NO_TRIGGER_MISMATCH","FLASHBACK_CURSOR","ANYDATA_TRANSFORMATION","INCOMPLETE_CURSOR","TOP_LEVEL_RPI_CURSOR","DIFFERENT_LONG_LENGTH","LOGICAL_STANDBY_APPLY","DIFF_CALL_DURN","BIND_UACS_DIFF","PLSQL_CMP_SWITCHS_DIFF" from gv$sql_shared_cursor;

CREATE OR REPLACE FORCE VIEW "GV_$SQL_SHARED_MEMORY"("INST_ID","SQL_TEXT","SQL_FULLTEXT","HASH_VALUE","SQL_ID","HEAP_DESC","STRUCTURE","FUNCTION","CHUNK_COM","CHUNK_PTR","CHUNK_SIZE","ALLOC_CLASS","CHUNK_TYPE","SUBHEAP_DESC") AS 
select "INST_ID","SQL_TEXT","SQL_FULLTEXT","HASH_VALUE","SQL_ID","HEAP_DESC","STRUCTURE","FUNCTION","CHUNK_COM","CHUNK_PTR","CHUNK_SIZE","ALLOC_CLASS","CHUNK_TYPE","SUBHEAP_DESC" from gv$sql_shared_memory;

CREATE OR REPLACE FORCE VIEW "GV_$SQL_WORKAREA"("INST_ID","ADDRESS","HASH_VALUE","SQL_ID","CHILD_NUMBER","WORKAREA_ADDRESS","OPERATION_TYPE","OPERATION_ID","POLICY","ESTIMATED_OPTIMAL_SIZE","ESTIMATED_ONEPASS_SIZE","LAST_MEMORY_USED","LAST_EXECUTION","LAST_DEGREE","TOTAL_EXECUTIONS","OPTIMAL_EXECUTIONS","ONEPASS_EXECUTIONS","MULTIPASSES_EXECUTIONS","ACTIVE_TIME","MAX_TEMPSEG_SIZE","LAST_TEMPSEG_SIZE") AS 
select "INST_ID","ADDRESS","HASH_VALUE","SQL_ID","CHILD_NUMBER","WORKAREA_ADDRESS","OPERATION_TYPE","OPERATION_ID","POLICY","ESTIMATED_OPTIMAL_SIZE","ESTIMATED_ONEPASS_SIZE","LAST_MEMORY_USED","LAST_EXECUTION","LAST_DEGREE","TOTAL_EXECUTIONS","OPTIMAL_EXECUTIONS","ONEPASS_EXECUTIONS","MULTIPASSES_EXECUTIONS","ACTIVE_TIME","MAX_TEMPSEG_SIZE","LAST_TEMPSEG_SIZE" from gv$sql_workarea;

CREATE OR REPLACE FORCE VIEW "GV_$SQL_WORKAREA_ACTIVE"("INST_ID","SQL_HASH_VALUE","SQL_ID","WORKAREA_ADDRESS","OPERATION_TYPE","OPERATION_ID","POLICY","SID","QCINST_ID","QCSID","ACTIVE_TIME","WORK_AREA_SIZE","EXPECTED_SIZE","ACTUAL_MEM_USED","MAX_MEM_USED","NUMBER_PASSES","TEMPSEG_SIZE","TABLESPACE","SEGRFNO#","SEGBLK#") AS 
select "INST_ID","SQL_HASH_VALUE","SQL_ID","WORKAREA_ADDRESS","OPERATION_TYPE","OPERATION_ID","POLICY","SID","QCINST_ID","QCSID","ACTIVE_TIME","WORK_AREA_SIZE","EXPECTED_SIZE","ACTUAL_MEM_USED","MAX_MEM_USED","NUMBER_PASSES","TEMPSEG_SIZE","TABLESPACE","SEGRFNO#","SEGBLK#" from gv$sql_workarea_active;

CREATE OR REPLACE FORCE VIEW "GV_$SQL_WORKAREA_HISTOGRAM"("INST_ID","LOW_OPTIMAL_SIZE","HIGH_OPTIMAL_SIZE","OPTIMAL_EXECUTIONS","ONEPASS_EXECUTIONS","MULTIPASSES_EXECUTIONS","TOTAL_EXECUTIONS") AS 
select "INST_ID","LOW_OPTIMAL_SIZE","HIGH_OPTIMAL_SIZE","OPTIMAL_EXECUTIONS","ONEPASS_EXECUTIONS","MULTIPASSES_EXECUTIONS","TOTAL_EXECUTIONS" from gv$sql_workarea_histogram;

CREATE OR REPLACE FORCE VIEW "GV_$STANDBY_LOG"("INST_ID","GROUP#","DBID","THREAD#","SEQUENCE#","BYTES","USED","ARCHIVED","STATUS","FIRST_CHANGE#","FIRST_TIME","LAST_CHANGE#","LAST_TIME") AS 
select "INST_ID","GROUP#","DBID","THREAD#","SEQUENCE#","BYTES","USED","ARCHIVED","STATUS","FIRST_CHANGE#","FIRST_TIME","LAST_CHANGE#","LAST_TIME" from gv$standby_log;

CREATE OR REPLACE FORCE VIEW "GV_$STATISTICS_LEVEL"("INST_ID","STATISTICS_NAME","DESCRIPTION","SESSION_STATUS","SYSTEM_STATUS","ACTIVATION_LEVEL","STATISTICS_VIEW_NAME","SESSION_SETTABLE") AS 
select "INST_ID","STATISTICS_NAME","DESCRIPTION","SESSION_STATUS","SYSTEM_STATUS","ACTIVATION_LEVEL","STATISTICS_VIEW_NAME","SESSION_SETTABLE" from
   gv$statistics_level;

CREATE OR REPLACE FORCE VIEW "GV_$STATNAME"("INST_ID","STATISTIC#","NAME","CLASS","STAT_ID") AS 
select "INST_ID","STATISTIC#","NAME","CLASS","STAT_ID" from gv$statname;

CREATE OR REPLACE FORCE VIEW "GV_$STREAMS_APPLY_COORDINATOR"("INST_ID","SID","SERIAL#","APPLY#","APPLY_NAME","STATE","TOTAL_APPLIED","TOTAL_WAIT_DEPS","TOTAL_WAIT_COMMITS","TOTAL_ADMIN","TOTAL_ASSIGNED","TOTAL_RECEIVED","TOTAL_IGNORED","TOTAL_ROLLBACKS","TOTAL_ERRORS","LWM_TIME","LWM_MESSAGE_NUMBER","LWM_MESSAGE_CREATE_TIME","HWM_TIME","HWM_MESSAGE_NUMBER","HWM_MESSAGE_CREATE_TIME","STARTUP_TIME","ELAPSED_SCHEDULE_TIME") AS 
select "INST_ID","SID","SERIAL#","APPLY#","APPLY_NAME","STATE","TOTAL_APPLIED","TOTAL_WAIT_DEPS","TOTAL_WAIT_COMMITS","TOTAL_ADMIN","TOTAL_ASSIGNED","TOTAL_RECEIVED","TOTAL_IGNORED","TOTAL_ROLLBACKS","TOTAL_ERRORS","LWM_TIME","LWM_MESSAGE_NUMBER","LWM_MESSAGE_CREATE_TIME","HWM_TIME","HWM_MESSAGE_NUMBER","HWM_MESSAGE_CREATE_TIME","STARTUP_TIME","ELAPSED_SCHEDULE_TIME" from gv$streams_apply_coordinator;

CREATE OR REPLACE FORCE VIEW "GV_$STREAMS_APPLY_READER"("INST_ID","SID","SERIAL#","APPLY#","APPLY_NAME","STATE","TOTAL_MESSAGES_DEQUEUED","DEQUEUE_TIME","DEQUEUED_MESSAGE_NUMBER","DEQUEUED_MESSAGE_CREATE_TIME","SGA_USED","ELAPSED_DEQUEUE_TIME","ELAPSED_SCHEDULE_TIME","LAST_BROWSE_NUM","OLDEST_SCN_NUM","LAST_BROWSE_SEQ","LAST_DEQ_SEQ") AS 
select "INST_ID","SID","SERIAL#","APPLY#","APPLY_NAME","STATE","TOTAL_MESSAGES_DEQUEUED","DEQUEUE_TIME","DEQUEUED_MESSAGE_NUMBER","DEQUEUED_MESSAGE_CREATE_TIME","SGA_USED","ELAPSED_DEQUEUE_TIME","ELAPSED_SCHEDULE_TIME","LAST_BROWSE_NUM","OLDEST_SCN_NUM","LAST_BROWSE_SEQ","LAST_DEQ_SEQ" from gv$streams_apply_reader;

CREATE OR REPLACE FORCE VIEW "GV_$STREAMS_APPLY_SERVER"("INST_ID","SID","SERIAL#","APPLY#","APPLY_NAME","SERVER_ID","STATE","XIDUSN","XIDSLT","XIDSQN","COMMITSCN","DEP_XIDUSN","DEP_XIDSLT","DEP_XIDSQN","DEP_COMMITSCN","MESSAGE_SEQUENCE","TOTAL_ASSIGNED","TOTAL_ADMIN","TOTAL_ROLLBACKS","TOTAL_MESSAGES_APPLIED","APPLY_TIME","APPLIED_MESSAGE_NUMBER","APPLIED_MESSAGE_CREATE_TIME","ELAPSED_DEQUEUE_TIME","ELAPSED_APPLY_TIME") AS 
select "INST_ID","SID","SERIAL#","APPLY#","APPLY_NAME","SERVER_ID","STATE","XIDUSN","XIDSLT","XIDSQN","COMMITSCN","DEP_XIDUSN","DEP_XIDSLT","DEP_XIDSQN","DEP_COMMITSCN","MESSAGE_SEQUENCE","TOTAL_ASSIGNED","TOTAL_ADMIN","TOTAL_ROLLBACKS","TOTAL_MESSAGES_APPLIED","APPLY_TIME","APPLIED_MESSAGE_NUMBER","APPLIED_MESSAGE_CREATE_TIME","ELAPSED_DEQUEUE_TIME","ELAPSED_APPLY_TIME" from gv$streams_apply_server;

CREATE OR REPLACE FORCE VIEW "GV_$STREAMS_CAPTURE"("INST_ID","SID","SERIAL#","CAPTURE#","CAPTURE_NAME","LOGMINER_ID","STARTUP_TIME","STATE","TOTAL_PREFILTER_DISCARDED","TOTAL_PREFILTER_KEPT","TOTAL_PREFILTER_EVALUATIONS","TOTAL_MESSAGES_CAPTURED","CAPTURE_TIME","CAPTURE_MESSAGE_NUMBER","CAPTURE_MESSAGE_CREATE_TIME","TOTAL_MESSAGES_CREATED","TOTAL_FULL_EVALUATIONS","TOTAL_MESSAGES_ENQUEUED","ENQUEUE_TIME","ENQUEUE_MESSAGE_NUMBER","ENQUEUE_MESSAGE_CREATE_TIME","AVAILABLE_MESSAGE_NUMBER","AVAILABLE_MESSAGE_CREATE_TIME","ELAPSED_CAPTURE_TIME","ELAPSED_RULE_TIME","ELAPSED_ENQUEUE_TIME","ELAPSED_LCR_TIME","ELAPSED_REDO_WAIT_TIME","ELAPSED_PAUSE_TIME") AS 
select "INST_ID","SID","SERIAL#","CAPTURE#","CAPTURE_NAME","LOGMINER_ID","STARTUP_TIME","STATE","TOTAL_PREFILTER_DISCARDED","TOTAL_PREFILTER_KEPT","TOTAL_PREFILTER_EVALUATIONS","TOTAL_MESSAGES_CAPTURED","CAPTURE_TIME","CAPTURE_MESSAGE_NUMBER","CAPTURE_MESSAGE_CREATE_TIME","TOTAL_MESSAGES_CREATED","TOTAL_FULL_EVALUATIONS","TOTAL_MESSAGES_ENQUEUED","ENQUEUE_TIME","ENQUEUE_MESSAGE_NUMBER","ENQUEUE_MESSAGE_CREATE_TIME","AVAILABLE_MESSAGE_NUMBER","AVAILABLE_MESSAGE_CREATE_TIME","ELAPSED_CAPTURE_TIME","ELAPSED_RULE_TIME","ELAPSED_ENQUEUE_TIME","ELAPSED_LCR_TIME","ELAPSED_REDO_WAIT_TIME","ELAPSED_PAUSE_TIME" from gv$streams_capture;

CREATE OR REPLACE FORCE VIEW "GV_$SUBCACHE"("INST_ID","OWNER_NAME","NAME","TYPE","HEAP_NUM","CACHE_ID","CACHE_CNT","HEAP_SZ","HEAP_ALOC","HEAP_USED") AS 
select "INST_ID","OWNER_NAME","NAME","TYPE","HEAP_NUM","CACHE_ID","CACHE_CNT","HEAP_SZ","HEAP_ALOC","HEAP_USED" from gv$subcache;

CREATE OR REPLACE FORCE VIEW "GV_$SYSAUX_OCCUPANTS"("INST_ID","OCCUPANT_NAME","OCCUPANT_DESC","SCHEMA_NAME","MOVE_PROCEDURE","MOVE_PROCEDURE_DESC","SPACE_USAGE_KBYTES") AS 
select "INST_ID","OCCUPANT_NAME","OCCUPANT_DESC","SCHEMA_NAME","MOVE_PROCEDURE","MOVE_PROCEDURE_DESC","SPACE_USAGE_KBYTES" from gv$sysaux_occupants;

CREATE OR REPLACE FORCE VIEW "GV_$SYSMETRIC"("INST_ID","BEGIN_TIME","END_TIME","INTSIZE_CSEC","GROUP_ID","METRIC_ID","METRIC_NAME","VALUE","METRIC_UNIT") AS 
select "INST_ID","BEGIN_TIME","END_TIME","INTSIZE_CSEC","GROUP_ID","METRIC_ID","METRIC_NAME","VALUE","METRIC_UNIT" from gv$sysmetric;

CREATE OR REPLACE FORCE VIEW "GV_$SYSMETRIC_HISTORY"("INST_ID","BEGIN_TIME","END_TIME","INTSIZE_CSEC","GROUP_ID","METRIC_ID","METRIC_NAME","VALUE","METRIC_UNIT") AS 
select "INST_ID","BEGIN_TIME","END_TIME","INTSIZE_CSEC","GROUP_ID","METRIC_ID","METRIC_NAME","VALUE","METRIC_UNIT" from gv$sysmetric_history;

CREATE OR REPLACE FORCE VIEW "GV_$SYSMETRIC_SUMMARY"("INST_ID","BEGIN_TIME","END_TIME","INTSIZE_CSEC","GROUP_ID","METRIC_ID","METRIC_NAME","NUM_INTERVAL","MAXVAL","MINVAL","AVERAGE","STANDARD_DEVIATION","METRIC_UNIT") AS 
select "INST_ID","BEGIN_TIME","END_TIME","INTSIZE_CSEC","GROUP_ID","METRIC_ID","METRIC_NAME","NUM_INTERVAL","MAXVAL","MINVAL","AVERAGE","STANDARD_DEVIATION","METRIC_UNIT" from gv$sysmetric_summary;

CREATE OR REPLACE FORCE VIEW "GV_$SYSSTAT"("INST_ID","STATISTIC#","NAME","CLASS","VALUE","STAT_ID") AS 
select "INST_ID","STATISTIC#","NAME","CLASS","VALUE","STAT_ID" from gv$sysstat;

CREATE OR REPLACE FORCE VIEW "GV_$SYSTEM_CURSOR_CACHE"("INST_ID","OPENS","HITS","HIT_RATIO") AS 
select "INST_ID","OPENS","HITS","HIT_RATIO" from gv$system_cursor_cache;

CREATE OR REPLACE FORCE VIEW "GV_$SYSTEM_EVENT"("INST_ID","EVENT","TOTAL_WAITS","TOTAL_TIMEOUTS","TIME_WAITED","AVERAGE_WAIT","TIME_WAITED_MICRO","EVENT_ID") AS 
select "INST_ID","EVENT","TOTAL_WAITS","TOTAL_TIMEOUTS","TIME_WAITED","AVERAGE_WAIT","TIME_WAITED_MICRO","EVENT_ID" from gv$system_event;

CREATE OR REPLACE FORCE VIEW "GV_$SYSTEM_PARAMETER"("INST_ID","NUM","NAME","TYPE","VALUE","DISPLAY_VALUE","ISDEFAULT","ISSES_MODIFIABLE","ISSYS_MODIFIABLE","ISINSTANCE_MODIFIABLE","ISMODIFIED","ISADJUSTED","ISDEPRECATED","DESCRIPTION","UPDATE_COMMENT","HASH") AS 
select "INST_ID","NUM","NAME","TYPE","VALUE","DISPLAY_VALUE","ISDEFAULT","ISSES_MODIFIABLE","ISSYS_MODIFIABLE","ISINSTANCE_MODIFIABLE","ISMODIFIED","ISADJUSTED","ISDEPRECATED","DESCRIPTION","UPDATE_COMMENT","HASH" from gv$system_parameter;

CREATE OR REPLACE FORCE VIEW "GV_$SYSTEM_PARAMETER2"("INST_ID","NUM","NAME","TYPE","VALUE","DISPLAY_VALUE","ISDEFAULT","ISSES_MODIFIABLE","ISSYS_MODIFIABLE","ISINSTANCE_MODIFIABLE","ISMODIFIED","ISADJUSTED","ISDEPRECATED","DESCRIPTION","ORDINAL","UPDATE_COMMENT") AS 
select "INST_ID","NUM","NAME","TYPE","VALUE","DISPLAY_VALUE","ISDEFAULT","ISSES_MODIFIABLE","ISSYS_MODIFIABLE","ISINSTANCE_MODIFIABLE","ISMODIFIED","ISADJUSTED","ISDEPRECATED","DESCRIPTION","ORDINAL","UPDATE_COMMENT" from gv$system_parameter2;

CREATE OR REPLACE FORCE VIEW "GV_$SYSTEM_WAIT_CLASS"("INST_ID","WAIT_CLASS_ID","WAIT_CLASS#","WAIT_CLASS","TOTAL_WAITS","TIME_WAITED") AS 
select "INST_ID","WAIT_CLASS_ID","WAIT_CLASS#","WAIT_CLASS","TOTAL_WAITS","TIME_WAITED" from gv$system_wait_class;

CREATE OR REPLACE FORCE VIEW "GV_$SYS_OPTIMIZER_ENV"("INST_ID","ID","NAME","ISDEFAULT","VALUE","DEFAULT_VALUE") AS 
select "INST_ID","ID","NAME","ISDEFAULT","VALUE","DEFAULT_VALUE" from gv$sys_optimizer_env;

CREATE OR REPLACE FORCE VIEW "GV_$SYS_TIME_MODEL"("INST_ID","STAT_ID","STAT_NAME","VALUE") AS 
select "INST_ID","STAT_ID","STAT_NAME","VALUE" from gv$sys_time_model;

CREATE OR REPLACE FORCE VIEW "GV_$TABLESPACE"("INST_ID","TS#","NAME","INCLUDED_IN_DATABASE_BACKUP","BIGFILE","FLASHBACK_ON") AS 
select "INST_ID","TS#","NAME","INCLUDED_IN_DATABASE_BACKUP","BIGFILE","FLASHBACK_ON" from gv$tablespace;

CREATE OR REPLACE FORCE VIEW "GV_$TEMPFILE"("INST_ID","FILE#","CREATION_CHANGE#","CREATION_TIME","TS#","RFILE#","STATUS","ENABLED","BYTES","BLOCKS","CREATE_BYTES","BLOCK_SIZE","NAME") AS 
select "INST_ID","FILE#","CREATION_CHANGE#","CREATION_TIME","TS#","RFILE#","STATUS","ENABLED","BYTES","BLOCKS","CREATE_BYTES","BLOCK_SIZE","NAME" from gv$tempfile;

CREATE OR REPLACE FORCE VIEW "GV_$TEMPORARY_LOBS"("INST_ID","SID","CACHE_LOBS","NOCACHE_LOBS","ABSTRACT_LOBS") AS 
select "INST_ID","SID","CACHE_LOBS","NOCACHE_LOBS","ABSTRACT_LOBS" from gv$temporary_lobs;

CREATE OR REPLACE FORCE VIEW "GV_$TEMPSTAT"("INST_ID","FILE#","PHYRDS","PHYWRTS","PHYBLKRD","PHYBLKWRT","SINGLEBLKRDS","READTIM","WRITETIM","SINGLEBLKRDTIM","AVGIOTIM","LSTIOTIM","MINIOTIM","MAXIORTM","MAXIOWTM") AS 
select "INST_ID","FILE#","PHYRDS","PHYWRTS","PHYBLKRD","PHYBLKWRT","SINGLEBLKRDS","READTIM","WRITETIM","SINGLEBLKRDTIM","AVGIOTIM","LSTIOTIM","MINIOTIM","MAXIORTM","MAXIOWTM" from gv$tempstat;

CREATE OR REPLACE FORCE VIEW "GV_$TEMP_CACHE_TRANSFER"("INST_ID","FILE_NUMBER","X_2_NULL","X_2_NULL_FORCED_WRITE","X_2_NULL_FORCED_STALE","X_2_S","X_2_S_FORCED_WRITE","S_2_NULL","S_2_NULL_FORCED_STALE","RBR","RBR_FORCED_WRITE","NULL_2_X","S_2_X","NULL_2_S") AS 
select "INST_ID","FILE_NUMBER","X_2_NULL","X_2_NULL_FORCED_WRITE","X_2_NULL_FORCED_STALE","X_2_S","X_2_S_FORCED_WRITE","S_2_NULL","S_2_NULL_FORCED_STALE","RBR","RBR_FORCED_WRITE","NULL_2_X","S_2_X","NULL_2_S" from gv$temp_cache_transfer;

CREATE OR REPLACE FORCE VIEW "GV_$TEMP_EXTENT_MAP"("INST_ID","TABLESPACE_NAME","FILE_ID","BLOCK_ID","BYTES","BLOCKS","OWNER","RELATIVE_FNO") AS 
select "INST_ID","TABLESPACE_NAME","FILE_ID","BLOCK_ID","BYTES","BLOCKS","OWNER","RELATIVE_FNO" from gv$temp_extent_map;

CREATE OR REPLACE FORCE VIEW "GV_$TEMP_EXTENT_POOL"("INST_ID","TABLESPACE_NAME","FILE_ID","EXTENTS_CACHED","EXTENTS_USED","BLOCKS_CACHED","BLOCKS_USED","BYTES_CACHED","BYTES_USED","RELATIVE_FNO") AS 
select "INST_ID","TABLESPACE_NAME","FILE_ID","EXTENTS_CACHED","EXTENTS_USED","BLOCKS_CACHED","BLOCKS_USED","BYTES_CACHED","BYTES_USED","RELATIVE_FNO" from gv$temp_extent_pool;

CREATE OR REPLACE FORCE VIEW "GV_$TEMP_HISTOGRAM"("INST_ID","FILE#","SINGLEBLKRDTIM_MILLI","SINGLEBLKRDS") AS 
select "INST_ID","FILE#","SINGLEBLKRDTIM_MILLI","SINGLEBLKRDS" from gv$temp_histogram;

CREATE OR REPLACE FORCE VIEW "GV_$TEMP_PING"("INST_ID","FILE_NUMBER","FREQUENCY","X_2_NULL","X_2_NULL_FORCED_WRITE","X_2_NULL_FORCED_STALE","X_2_S","X_2_S_FORCED_WRITE","X_2_SSX","X_2_SSX_FORCED_WRITE","S_2_NULL","S_2_NULL_FORCED_STALE","SS_2_NULL","SS_2_RLS","WRB","WRB_FORCED_WRITE","RBR","RBR_FORCED_WRITE","RBR_FORCED_STALE","CBR","CBR_FORCED_WRITE","NULL_2_X","S_2_X","SSX_2_X","NULL_2_S","NULL_2_SS","OP_2_SS") AS 
select "INST_ID","FILE_NUMBER","FREQUENCY","X_2_NULL","X_2_NULL_FORCED_WRITE","X_2_NULL_FORCED_STALE","X_2_S","X_2_S_FORCED_WRITE","X_2_SSX","X_2_SSX_FORCED_WRITE","S_2_NULL","S_2_NULL_FORCED_STALE","SS_2_NULL","SS_2_RLS","WRB","WRB_FORCED_WRITE","RBR","RBR_FORCED_WRITE","RBR_FORCED_STALE","CBR","CBR_FORCED_WRITE","NULL_2_X","S_2_X","SSX_2_X","NULL_2_S","NULL_2_SS","OP_2_SS" from gv$temp_ping;

CREATE OR REPLACE FORCE VIEW "GV_$TEMP_SPACE_HEADER"("INST_ID","TABLESPACE_NAME","FILE_ID","BYTES_USED","BLOCKS_USED","BYTES_FREE","BLOCKS_FREE","RELATIVE_FNO") AS 
select "INST_ID","TABLESPACE_NAME","FILE_ID","BYTES_USED","BLOCKS_USED","BYTES_FREE","BLOCKS_FREE","RELATIVE_FNO" from gv$temp_space_header;

CREATE OR REPLACE FORCE VIEW "GV_$THREAD"("INST_ID","THREAD#","STATUS","ENABLED","GROUPS","INSTANCE","OPEN_TIME","CURRENT_GROUP#","SEQUENCE#","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","ENABLE_CHANGE#","ENABLE_TIME","DISABLE_CHANGE#","DISABLE_TIME") AS 
select "INST_ID","THREAD#","STATUS","ENABLED","GROUPS","INSTANCE","OPEN_TIME","CURRENT_GROUP#","SEQUENCE#","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","ENABLE_CHANGE#","ENABLE_TIME","DISABLE_CHANGE#","DISABLE_TIME" from gv$thread;

CREATE OR REPLACE FORCE VIEW "GV_$THRESHOLD_TYPES"("INST_ID","METRICS_ID","METRICS_GROUP_ID","OPERATOR_MASK","OBJECT_TYPE","ALERT_REASON_ID") AS 
SELECT "INST_ID","METRICS_ID","METRICS_GROUP_ID","OPERATOR_MASK","OBJECT_TYPE","ALERT_REASON_ID" FROM gv$threshold_types;

CREATE OR REPLACE FORCE VIEW "GV_$TIMER"("INST_ID","HSECS") AS 
select "INST_ID","HSECS" from gv$timer;

CREATE OR REPLACE FORCE VIEW "GV_$TIMEZONE_FILE"("FILENAME","VERSION") AS 
select "FILENAME","VERSION" from gv$timezone_file;

CREATE OR REPLACE FORCE VIEW "GV_$TIMEZONE_NAMES"("TZNAME","TZABBREV") AS 
select "TZNAME","TZABBREV" from gv$timezone_names;

CREATE OR REPLACE FORCE VIEW "GV_$TRANSACTION"("INST_ID","ADDR","XIDUSN","XIDSLOT","XIDSQN","UBAFIL","UBABLK","UBASQN","UBAREC","STATUS","START_TIME","START_SCNB","START_SCNW","START_UEXT","START_UBAFIL","START_UBABLK","START_UBASQN","START_UBAREC","SES_ADDR","FLAG","SPACE","RECURSIVE","NOUNDO","PTX","NAME","PRV_XIDUSN","PRV_XIDSLT","PRV_XIDSQN","PTX_XIDUSN","PTX_XIDSLT","PTX_XIDSQN","DSCN-B","DSCN-W","USED_UBLK","USED_UREC","LOG_IO","PHY_IO","CR_GET","CR_CHANGE","START_DATE","DSCN_BASE","DSCN_WRAP","START_SCN","DEPENDENT_SCN","XID","PRV_XID","PTX_XID") AS 
select "INST_ID","ADDR","XIDUSN","XIDSLOT","XIDSQN","UBAFIL","UBABLK","UBASQN","UBAREC","STATUS","START_TIME","START_SCNB","START_SCNW","START_UEXT","START_UBAFIL","START_UBABLK","START_UBASQN","START_UBAREC","SES_ADDR","FLAG","SPACE","RECURSIVE","NOUNDO","PTX","NAME","PRV_XIDUSN","PRV_XIDSLT","PRV_XIDSQN","PTX_XIDUSN","PTX_XIDSLT","PTX_XIDSQN","DSCN-B","DSCN-W","USED_UBLK","USED_UREC","LOG_IO","PHY_IO","CR_GET","CR_CHANGE","START_DATE","DSCN_BASE","DSCN_WRAP","START_SCN","DEPENDENT_SCN","XID","PRV_XID","PTX_XID" from gv$transaction;

CREATE OR REPLACE FORCE VIEW "GV_$TRANSACTION_ENQUEUE"("INST_ID","ADDR","KADDR","SID","TYPE","ID1","ID2","LMODE","REQUEST","CTIME","BLOCK") AS 
select "INST_ID","ADDR","KADDR","SID","TYPE","ID1","ID2","LMODE","REQUEST","CTIME","BLOCK" from gv$transaction_enqueue;

CREATE OR REPLACE FORCE VIEW "GV_$TRANSPORTABLE_PLATFORM"("INST_ID","PLATFORM_ID","PLATFORM_NAME","ENDIAN_FORMAT") AS 
select "INST_ID","PLATFORM_ID","PLATFORM_NAME","ENDIAN_FORMAT" from GV$TRANSPORTABLE_PLATFORM;

CREATE OR REPLACE FORCE VIEW "GV_$TYPE_SIZE"("INST_ID","COMPONENT","TYPE","DESCRIPTION","TYPE_SIZE") AS 
select "INST_ID","COMPONENT","TYPE","DESCRIPTION","TYPE_SIZE" from gv$type_size;

CREATE OR REPLACE FORCE VIEW "GV_$UNDOSTAT"("INST_ID","BEGIN_TIME","END_TIME","UNDOTSN","UNDOBLKS","TXNCOUNT","MAXQUERYLEN","MAXQUERYID","MAXCONCURRENCY","UNXPSTEALCNT","UNXPBLKRELCNT","UNXPBLKREUCNT","EXPSTEALCNT","EXPBLKRELCNT","EXPBLKREUCNT","SSOLDERRCNT","NOSPACEERRCNT","ACTIVEBLKS","UNEXPIREDBLKS","EXPIREDBLKS","TUNED_UNDORETENTION") AS 
select "INST_ID","BEGIN_TIME","END_TIME","UNDOTSN","UNDOBLKS","TXNCOUNT","MAXQUERYLEN","MAXQUERYID","MAXCONCURRENCY","UNXPSTEALCNT","UNXPBLKRELCNT","UNXPBLKREUCNT","EXPSTEALCNT","EXPBLKRELCNT","EXPBLKREUCNT","SSOLDERRCNT","NOSPACEERRCNT","ACTIVEBLKS","UNEXPIREDBLKS","EXPIREDBLKS","TUNED_UNDORETENTION" from gv$undostat;

CREATE OR REPLACE FORCE VIEW "GV_$VERSION"("INST_ID","BANNER") AS 
select "INST_ID","BANNER" from gv$version;

CREATE OR REPLACE FORCE VIEW "GV_$VPD_POLICY"("INST_ID","ADDRESS","PARADDR","SQL_HASH","SQL_ID","CHILD_NUMBER","OBJECT_OWNER","OBJECT_NAME","POLICY_GROUP","POLICY","POLICY_FUNCTION_OWNER","PREDICATE") AS 
select "INST_ID","ADDRESS","PARADDR","SQL_HASH","SQL_ID","CHILD_NUMBER","OBJECT_OWNER","OBJECT_NAME","POLICY_GROUP","POLICY","POLICY_FUNCTION_OWNER","PREDICATE" from gv$vpd_policy;

CREATE OR REPLACE FORCE VIEW "GV_$WAITCLASSMETRIC"("INST_ID","BEGIN_TIME","END_TIME","INTSIZE_CSEC","WAIT_CLASS#","WAIT_CLASS_ID","AVERAGE_WAITER_COUNT","DBTIME_IN_WAIT","TIME_WAITED","WAIT_COUNT") AS 
select "INST_ID","BEGIN_TIME","END_TIME","INTSIZE_CSEC","WAIT_CLASS#","WAIT_CLASS_ID","AVERAGE_WAITER_COUNT","DBTIME_IN_WAIT","TIME_WAITED","WAIT_COUNT" from gv$waitclassmetric;

CREATE OR REPLACE FORCE VIEW "GV_$WAITCLASSMETRIC_HISTORY"("INST_ID","BEGIN_TIME","END_TIME","INTSIZE_CSEC","WAIT_CLASS#","WAIT_CLASS_ID","AVERAGE_WAITER_COUNT","DBTIME_IN_WAIT","TIME_WAITED","WAIT_COUNT") AS 
select "INST_ID","BEGIN_TIME","END_TIME","INTSIZE_CSEC","WAIT_CLASS#","WAIT_CLASS_ID","AVERAGE_WAITER_COUNT","DBTIME_IN_WAIT","TIME_WAITED","WAIT_COUNT" from gv$waitclassmetric_history;

CREATE OR REPLACE FORCE VIEW "GV_$WAITSTAT"("INST_ID","CLASS","COUNT","TIME") AS 
select "INST_ID","CLASS","COUNT","TIME" from gv$waitstat;

CREATE OR REPLACE FORCE VIEW "GV_$_LOCK"("INST_ID","LADDR","KADDR","SADDR","RADDR","LMODE","REQUEST","CTIME","BLOCK") AS 
select "INST_ID","LADDR","KADDR","SADDR","RADDR","LMODE","REQUEST","CTIME","BLOCK" from gv$_lock;

CREATE OR REPLACE FORCE VIEW "HS_ALL_CAPS"("CAP_NUMBER","CONTEXT","TRANSLATION","ADDITIONAL_INFO","FDS_CLASS_NAME","FDS_INST_NAME") AS 
select ic.cap_number, ic.context, ic.translation, ic.additional_info,
  fc.fds_class_name, fi.fds_inst_name
from hs$_inst_caps ic, hs$_fds_inst fi, hs$_fds_class fc
where ic.fds_inst_id = fi.fds_inst_id
and fi.fds_class_id = fc.fds_class_id
union
/*clause for the fds_class level minus the fds_inst level*/
select cc.cap_number, cc.context, cc.translation, cc.additional_info,
  fc2.fds_class_name, fi2.fds_inst_name
from hs$_class_caps cc, hs$_fds_inst fi2, hs$_fds_class fc2
where cc.fds_class_id = fi2.fds_class_id
and fi2.fds_class_id = fc2.fds_class_id
and not exists
  (select 1 from hs$_inst_caps ic2
   where ic2.cap_number = cc.cap_number
   and ic2.fds_inst_id = fi2.fds_inst_id)
union
/*clause for the base level minus fds_inst and fds_class level*/
select bc.cap_number, 0, null, 0, fc.fds_class_name,
  fi.fds_inst_name
from hs$_base_caps bc, hs$_fds_class fc, hs$_fds_inst fi
where fc.fds_class_id = fi.fds_class_id
and not exists
  (select 1 from hs$_inst_caps ic
   where ic.fds_inst_id = fi.fds_inst_id
   and ic.cap_number = bc.cap_number)
and not exists
  (select 1 from hs$_class_caps cc
   where cc.fds_class_id = fc.fds_class_id
   and cc.cap_number = bc.cap_number);

CREATE OR REPLACE FORCE VIEW "HS_ALL_DD"("DD_TABLE_NAME","TRANSLATION_TYPE","TRANSLATION_TEXT","FDS_CLASS_NAME","FDS_INST_NAME","DD_TABLE_DESC") AS 
select bd.dd_table_name, id.translation_type, id.translation_text,
  fc.fds_class_name, fi.fds_inst_name, bd.dd_table_desc
from hs$_inst_dd id, hs$_base_dd bd, hs$_fds_inst fi, hs$_fds_class fc
where id.fds_inst_id = fi.fds_inst_id
and id.dd_table_id = bd.dd_table_id
and fc.fds_class_id = fi.fds_class_id
union
/*clause for the class level minus the inst level*/
select bd2.dd_table_name, cd.translation_type, cd.translation_text,
  fc2.fds_class_name, fi2.fds_inst_name, bd2.dd_table_desc
from hs$_class_dd cd, hs$_base_dd bd2, hs$_fds_inst fi2, hs$_fds_class fc2
where cd.fds_class_id = fi2.fds_class_id
and cd.dd_table_id = bd2.dd_table_id
and fc2.fds_class_id = fi2.fds_class_id
and not exists
  (select 1 from hs$_inst_dd id2
   where id2.dd_table_id = cd.dd_table_id
   and id2.fds_inst_id = fi2.fds_inst_id)
union
/*clause for the base level minus the class and inst levels*/
select bd.dd_table_name,NULL,NULL,fc.fds_class_name,fi.fds_inst_name,
  bd.dd_table_desc
from hs$_base_dd bd, hs$_fds_class fc, hs$_fds_inst fi
where fi.fds_class_id = fc.fds_class_id
and not exists
  (select 1 from hs$_class_dd cd2
   where cd2.dd_table_id = bd.dd_table_id
   and cd2.fds_class_id = fc.fds_class_id)
and not exists
  (select 1 from hs$_inst_dd id2
   where id2.dd_table_id = bd.dd_table_id
   and id2.fds_inst_id = fi.fds_inst_id);

CREATE OR REPLACE FORCE VIEW "HS_ALL_INITS"("INIT_VALUE_NAME","INIT_VALUE","INIT_VALUE_TYPE","FDS_CLASS_NAME","FDS_INST_NAME") AS 
select i.init_value_name,i.init_value,i.init_value_type,fc.fds_class_name,
  fi.fds_inst_name
from hs$_inst_init i, hs$_fds_class fc, hs$_fds_inst fi
where i.fds_inst_id = fi.fds_inst_id
and fi.fds_class_id = fc.fds_class_id
union
/*this clause for the class level inits*/
select c.init_value_name,c.init_value,c.init_value_type,fc.fds_class_name,
  fi.fds_inst_name
from hs$_class_init c, hs$_fds_class fc, hs$_fds_inst fi
where fc.fds_class_id = fi.fds_class_id
and fc.fds_class_id = c.fds_class_id
and not exists
  (select 1 from hs$_inst_init i
   where i.fds_inst_id = fi.fds_inst_id
   and i.init_value_name = c.init_value_name);

CREATE OR REPLACE FORCE VIEW "HS_BASE_CAPS"("CAP_NUMBER","CAP_DESCRIPTION") AS 
select cap_number, cap_description
from hs$_base_caps;

CREATE OR REPLACE FORCE VIEW "HS_BASE_DD"("DD_TABLE_NAME","DD_TABLE_DESC","DD_TABLE_ID") AS 
select dd_table_name, dd_table_desc, dd_table_id
from hs$_base_dd;

CREATE OR REPLACE FORCE VIEW "HS_CLASS_CAPS"("CAP_NUMBER","CAP_DESCRIPTION","CONTEXT","TRANSLATION","ADDITIONAL_INFO","FDS_CLASS_NAME","FDS_CLASS_ID") AS 
select cc.cap_number, bc.cap_description, cc.context, cc.translation,
       cc.additional_info, fc.fds_class_name, fc.fds_class_id
from   hs$_class_caps cc,
       hs$_base_caps bc,
       hs$_fds_class fc
where  bc.cap_number = cc.cap_number
and cc.fds_class_id = fc.fds_class_id;

CREATE OR REPLACE FORCE VIEW "HS_CLASS_DD"("DD_TABLE_NAME","DD_TABLE_DESC","TRANSLATION_TYPE","TRANSLATION_TEXT","FDS_CLASS_NAME","DD_TABLE_ID","FDS_CLASS_ID") AS 
select bd.dd_table_name, bd.dd_table_desc, cd.translation_type,
       cd.translation_text, fc.fds_class_name, bd.dd_table_id, fc.fds_class_id
from   hs$_base_dd bd, hs$_class_dd cd, hs$_fds_class fc
where  (bd.dd_table_id = cd.dd_table_id) and (cd.fds_class_id =
fc.fds_class_id);

CREATE OR REPLACE FORCE VIEW "HS_CLASS_INIT"("INIT_VALUE_NAME","INIT_VALUE","INIT_VALUE_TYPE","FDS_CLASS_NAME","FDS_CLASS_INIT_ID","FDS_CLASS_ID") AS 
select ci.init_value_name, ci.init_value, ci.init_value_type,
       fc.fds_class_name, ci.fds_class_init_id, fc.fds_class_id
from   hs$_class_init ci, hs$_fds_class fc
where  (ci.fds_class_id = fc.fds_class_id);

CREATE OR REPLACE FORCE VIEW "HS_FDS_CLASS"("FDS_CLASS_NAME","FDS_CLASS_COMMENTS","FDS_CLASS_ID") AS 
select fds_class_name,fds_class_comments,fds_class_id
from hs$_fds_class;

CREATE OR REPLACE FORCE VIEW "HS_FDS_CLASS_DATE"("FDS_CLASS_NAME","FDS_CLASS_DATE","FDS_CLASS_ID") AS 
select fc.fds_class_name, fd.fds_class_date, fc.fds_class_id
   from hs$_fds_class fc, hs$_fds_class_date fd
   where fc.fds_class_id = fd.fds_class_id;

CREATE OR REPLACE FORCE VIEW "HS_FDS_INST"("FDS_INST_NAME","FDS_INST_COMMENTS","FDS_CLASS_NAME","FDS_INST_ID","FDS_CLASS_ID") AS 
select f.fds_inst_name,f.fds_inst_comments,fc.fds_class_name,f.fds_inst_id,
  f.fds_class_id
from hs$_fds_class fc,
hs$_fds_inst f
where f.fds_class_id = fc.fds_class_id;

CREATE OR REPLACE FORCE VIEW "HS_INST_CAPS"("CAP_NUMBER","CAP_DESCRIPTION","CONTEXT","TRANSLATION","ADDITIONAL_INFO","FDS_CLASS_NAME","FDS_INST_NAME","FDS_CLASS_ID","FDS_INST_ID") AS 
select bc.cap_number, bc.cap_description, ic.context, ic.translation,
       ic.additional_info, fc.fds_class_name, f.fds_inst_name,
       fc.fds_class_id, f.fds_inst_id
from   hs$_inst_caps ic,
       hs$_base_caps bc,
       hs$_fds_class fc,
       hs$_fds_inst f
where  bc.cap_number = ic.cap_number
and    ic.fds_inst_id = f.fds_inst_id
and    f.fds_class_id = fc.fds_class_id;

CREATE OR REPLACE FORCE VIEW "HS_INST_DD"("DD_TABLE_NAME","DD_TABLE_DESC","TRANSLATION_TYPE","TRANSLATION_TEXT","FDS_CLASS_NAME","FDS_INST_NAME","DD_TABLE_ID","FDS_CLASS_ID","FDS_INST_ID") AS 
select bd.dd_table_name, bd.dd_table_desc, id.translation_type,
       id.translation_text, fc.fds_class_name, f.fds_inst_name,
bd.dd_table_id,
       fc.fds_class_id, f.fds_inst_id
from   hs$_base_dd bd, hs$_inst_dd id, hs$_fds_class fc, hs$_fds_inst f
where  (bd.dd_table_id = id.dd_table_id) and (id.fds_inst_id = f.fds_inst_id)
       and (f.fds_class_id = fc.fds_class_id);

CREATE OR REPLACE FORCE VIEW "HS_INST_INIT"("INIT_VALUE_NAME","INIT_VALUE","INIT_VALUE_TYPE","FDS_CLASS_NAME","FDS_INST_NAME","FDS_INST_INIT_ID","FDS_CLASS_ID","FDS_INST_ID") AS 
select ii.init_value_name, ii.init_value, ii.init_value_type,
  fc.fds_class_name, f.fds_inst_name, ii.fds_inst_init_id,
  fc.fds_class_id, f.fds_inst_id
from  hs$_inst_init ii,
  hs$_fds_class fc,
  hs$_fds_inst f
where ii.fds_inst_id = f.fds_inst_id
and f.fds_class_id = fc.fds_class_id;

CREATE OR REPLACE FORCE VIEW "IMP10TYPIDUSED"("TYPEID","TOID","ROOTTOID") AS 
SELECT typeid, toid, roottoid
        FROM sys.type$;

CREATE OR REPLACE FORCE VIEW "IMP10TYPUSED"("OWNER","NAME","OID$") AS 
SELECT u.name, o_tab.name, o_typ.oid$
        FROM   sys.obj$ o_tab, sys.user$ u, sys.obj$ o_typ, sys.dependency$ d
        WHERE d.p_obj# = o_typ.obj#
        AND d.d_obj# = o_tab.obj#
        AND o_tab.type# = 2
        AND o_tab.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "IMP8CDT"("OWNERID","BAD") AS 
SELECT  co$.owner#, DECODE(BITAND(c$.defer, 16), 16, 1, 0)
        FROM    sys.cdef$ c$, sys.con$ co$
        WHERE   c$.defer IS NOT NULL AND
                BITAND(c$.defer, 16) = 16 AND
                c$.con# = co$.con#;

CREATE OR REPLACE FORCE VIEW "IMP8CDTU"("OWNERID","BAD") AS 
SELECT  "OWNERID","BAD"
        FROM    sys.imp8cdt
        WHERE   ownerid = UID;

CREATE OR REPLACE FORCE VIEW "IMP8CON"("CTNAME","TBNAME","USERNAME","INTCOL") AS 
SELECT  c.name, o.name, u.name, cc.intcol#
        FROM    sys.obj$ o, sys.user$ u, sys.con$ c, sys.ccol$ cc,
                sys.cdef$ cd
        WHERE   o.obj# = cc.obj# AND
                c.con# = cc.con# AND
                o.obj# = cd.obj# AND
                u.user# = c.owner# AND
                cd.con# = c.con# AND
                cd.type# = 3 AND
                BITAND(cd.defer, 8) = 8;

CREATE OR REPLACE FORCE VIEW "IMP8REPCAT"("NAME","TYPE") AS 
SELECT  name, type#
        FROM    sys.obj$
        WHERE   name IN ('DBMS_SNAPSHOT_UTL', 'DBMS_REPCAT_MIG') AND
                type# = 11 AND
                owner# = 0;

CREATE OR REPLACE FORCE VIEW "IMP8TTD"("TNAME","TOWNER","TOID") AS 
SELECT  o$.name, u$.name, o$.oid$
        FROM    sys.obj$ o$, sys.user$ u$, sys.type$ t$
        WHERE   o$.type# = 13 AND
                o$.owner# = u$.user# AND
                o$.oid$   = t$.toid  AND
                t$.toid   = t$.tvoid                          /* Only latest */;

CREATE OR REPLACE FORCE VIEW "IMP8TTDU"("TNAME","TOWNER","TOID") AS 
SELECT  o$.name, u$.name, o$.oid$
        FROM    sys.obj$ o$, sys.user$ u$, sys.type$ t$
        WHERE   o$.type# = 13 AND
                o$.owner# = u$.user# AND
                o$.oid$   = t$.toid  AND
                t$.toid  = t$.tvoid AND                  /* Only the latest */
                (o$.owner# = UID OR                 /* owned by current user */
                /* current user or public role have execute access to type */
                 o$.obj# IN (
                    SELECT  oa.obj#
                    FROM    sys.objauth$ oa
                    WHERE   oa.obj# = o$.obj# AND
                            oa.privilege# = 12 AND                /* execute */
                            oa.grantee# IN (UID, 1)) OR
                 /* current user or public role can execute any type */
                 EXISTS (
                    SELECT  NULL
                    FROM    sys.sysauth$ sa
                    WHERE   sa.grantee# IN (UID, 1) AND
                            sa.privilege# = -184));

CREATE OR REPLACE FORCE VIEW "IMP8UEC"("RELEASE") AS 
SELECT  "DUMMY"
        FROM    DUAL
        WHERE   1=0;

CREATE OR REPLACE FORCE VIEW "IMP9COMPAT"("COMPATIBLE") AS 
SELECT  value
        FROM    v$parameter
        WHERE   name = 'compatible';

CREATE OR REPLACE FORCE VIEW "IMP9CON"("CTNAME","TBNAME","USERNAME","INTCOL","TYPE") AS 
SELECT  c.name, o.name, u.name, cc.intcol#, cd.type#
        FROM    sys.obj$ o, sys.user$ u, sys.con$ c, sys.ccol$ cc,
                sys.cdef$ cd
        WHERE   o.obj# = cc.obj# AND
                c.con# = cc.con# AND
                o.obj# = cd.obj# AND
                u.user# = c.owner# AND
                cd.con# = c.con# AND
                BITAND(cd.defer, 8) = 8;

CREATE OR REPLACE FORCE VIEW "IMP9SYN4"("SYNNAME","SYNOWNER","TYPENAME","TYPEOWNER") AS 
SELECT  o.name, u.name, s.name, s.owner
        FROM    sys.obj$ o, sys.user$ u, sys.syn$ s
        WHERE   s.obj# = o.obj# AND
                u.user# = o.owner# AND
                /* user is sys, or owner, or synonym is PUBLIC */
                (UID IN (o.owner#, 0) OR o.owner# = 1 OR
                   EXISTS (                         /* user has select role */
                     SELECT  role
                     FROM    sys.session_roles
                     WHERE   role = 'SELECT_CATALOG_ROLE')) AND
                EXISTS (
                  SELECT ot.obj#
                  FROM sys.obj$ ot
                  WHERE ot.name = s.name AND
                        ot.type# = 13 AND
                        ot.owner# = (
                            SELECT ut.user#
                            FROM sys.user$ ut
                            WHERE ut.name = s.owner));

CREATE OR REPLACE FORCE VIEW "IMP9TVOID"("TNAME","TOWNER","HASH","TVOID","STATUS","TYPEID","ROOTTOID") AS 
SELECT  o$.name, u$.name, t$.hashcode, t$.tvoid, o$.status, t$.typeid,
                t$.roottoid
        FROM    sys.obj$ o$, sys.user$ u$, sys.type$ t$
        WHERE   o$.type# = 13 AND
                o$.owner# = u$.user# AND
                t$.toid   = o$.oid$ AND
                t$.toid   = t$.tvoid AND                  /* only the latest */
                (UID  IN (o$.owner#, 0) OR                /* System or owner */
                   EXISTS (                          /* user has select role */
                     SELECT  role
                     FROM    sys.session_roles
                     WHERE   role = 'SELECT_CATALOG_ROLE') OR
                  (o$.obj# IN                       /* user has execute priv */
                   (SELECT oa$.obj#
                    FROM   sys.objauth$ oa$
                    WHERE o$.obj# = oa$.obj# AND
                          oa$.grantee# IN  /* granted to current user/public */
                                (SELECT kzsrorol from x$kzsro)  AND
                          privilege# = 12)))                 /* Execute priv */;

CREATE OR REPLACE FORCE VIEW "IMP9USR"("NAME","USERID") AS 
SELECT  u.name, u.user#
        FROM    sys.user$ u
        WHERE   u.user# = UID;

CREATE OR REPLACE FORCE VIEW "IMP_LOB_INFO"("OWNER","TABLE_NAME","COLUMN_NAME","CHUNK","LITTLE_ENDIAN") AS 
select u.name, o.name, c.name, l.chunk * ts.blocksize,
        DECODE(BITAND(l.property, 512), 512, 1, 0)
from sys.obj$ o, sys.col$ c, sys.tab$ ta, sys.lob$ l, sys.user$ u, sys.ts$ ts
where o.owner# = u.user#
  and o.obj# = c.obj#
  and c.obj# = l.obj#
  and c.intcol# = l.intcol#
  and l.ts# = ts.ts#(+)
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                 )
      )
  and o.obj# = ta.obj#
  and bitand(ta.property, 32) != 32    /* not partitioned table */
union all
select u.name, o.name, c.name, plob.defchunk * (decode(null, plob.defts#,
                               ts2.blocksize, ts1.blocksize)),
        DECODE(BITAND(l.property, 512), 512, 1, 0)
from sys.obj$ o, sys.col$ c, sys.partlob$ plob,
     sys.lob$ l, sys.ts$ ts1, sys.tab$ ta,
     sys.partobj$ po, sys.ts$ ts2, sys.user$ u
where o.owner# = u.user#
  and o.obj# = c.obj#
  and c.obj# = l.obj#
  and c.intcol# = l.intcol#
  and l.lobj# = plob.lobj#
  and plob.defts# = ts1.ts# (+)
  and bitand(c.property,32768) != 32768           /* not unused column */
  and (o.owner# = userenv('SCHEMAID')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                 )
      )
  and o.obj# = ta.obj#
  and bitand(ta.property, 32) = 32         /* partitioned table */
  and o.obj# = po.obj#
  and po.defts# = ts2.ts#;

CREATE OR REPLACE FORCE VIEW "IMP_LOB_NOTNULL"("TNAME","OWNER","TYPE","ISNULL") AS 
SELECT o.name, u.name, c.type#, c.null$
        FROM sys.col$ c, sys.obj$ o, sys.user$ u
        WHERE c.obj#   = o.obj#
        AND   u.user#  = o.owner#
        AND   o.owner# = UID;

CREATE OR REPLACE FORCE VIEW "IMP_TAB_TRIG"("TNAME","OWNER","TYPE") AS 
SELECT o.name, u.name, o.type#
        FROM sys.trigger$ tr, sys.obj$ o, sys.user$ u
        WHERE tr.baseobject = o.obj#
        AND    u.user#      = o.owner#
        AND   tr.type#      = 1             /* BEFORE ROW */
        AND   tr.insert$    = 1             /* for INSERT */
        AND   tr.enabled    = 1
        AND    o.owner#     = UID;

CREATE OR REPLACE FORCE VIEW "INDCOMPARTV$"("OBJ#","DATAOBJ#","BO#","PART#","HIBOUNDLEN","HIBOUNDVAL","SUBPARTCNT","FLAGS","DEFTS#","DEFPCTFREE","DEFINITRANS","DEFMAXTRANS","DEFINIEXTS","DEFEXTSIZE","DEFMINEXTS","DEFMAXEXTS","DEFEXTPCT","DEFLISTS","DEFGROUPS","DEFLOGGING","DEFBUFPOOL","ANALYZETIME","SAMPLESIZE","ROWCNT","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","SPARE1","SPARE2","SPARE3") AS 
select obj#, dataobj#, bo#,
          row_number() over (partition by bo# order by part#),
          hiboundlen, hiboundval, subpartcnt, flags, defts#,
          defpctfree, definitrans, defmaxtrans, definiexts, defextsize,
          defminexts, defmaxexts, defextpct, deflists, defgroups, deflogging,
          defbufpool, analyzetime, samplesize, rowcnt, blevel, leafcnt,
          distkey, lblkkey, dblkkey, clufac, spare1, spare2, spare3
from indcompart$;

CREATE OR REPLACE FORCE VIEW "INDEX_HISTOGRAM"("REPEAT_COUNT","KEYS_WITH_REPEAT_COUNT") AS 
select hist.indx * power(2, stats.kdxstscl-4)  repeat_count,
        hist.kdxhsval                           keys_with_repeat_count
        from  x$kdxst stats, x$kdxhs hist;

CREATE OR REPLACE FORCE VIEW "INDEX_STATS"("HEIGHT","BLOCKS","NAME","PARTITION_NAME","LF_ROWS","LF_BLKS","LF_ROWS_LEN","LF_BLK_LEN","BR_ROWS","BR_BLKS","BR_ROWS_LEN","BR_BLK_LEN","DEL_LF_ROWS","DEL_LF_ROWS_LEN","DISTINCT_KEYS","MOST_REPEATED_KEY","BTREE_SPACE","USED_SPACE","PCT_USED","ROWS_PER_KEY","BLKS_GETS_PER_ACCESS","PRE_ROWS","PRE_ROWS_LEN","OPT_CMPR_COUNT","OPT_CMPR_PCTSAVE") AS 
select kdxstrot+1      height,
        kdxstsbk        blocks,
        o.name,
        o.subname       partition_name,
        kdxstlrw        lf_rows,
        kdxstlbk        lf_blks,
        kdxstlln        lf_rows_len,
        kdxstlub        lf_blk_len,
        kdxstbrw        br_rows,
        kdxstbbk        br_blks,
        kdxstbln        br_rows_len,
        kdxstbub        br_blk_len,
        kdxstdrw        del_lf_rows,
        kdxstdln        del_lf_rows_len,
        kdxstdis        distinct_keys,
        kdxstmrl        most_repeated_key,
        kdxstlbk*kdxstlub+kdxstbbk*kdxstbub     btree_space,
        kdxstlln+kdxstbln+kdxstpln              used_space,
        ceil(((kdxstlln+kdxstbln+kdxstpln)*100)/
        (kdxstlbk*kdxstlub+kdxstbbk*kdxstbub))
                                                pct_used,
        kdxstlrw/decode(kdxstdis, 0, 1, kdxstdis) rows_per_key,
        kdxstrot+1+(kdxstlrw+kdxstdis)/(decode(kdxstdis, 0, 1, kdxstdis)*2)
                                                blks_gets_per_access,
        kdxstnpr        pre_rows,
        kdxstpln        pre_rows_len,
        kdxstokc        opt_cmpr_count,
        kdxstpsk        opt_cmpr_pctsave
  from obj$ o, ind$ i, seg$ s, x$kdxst
 where kdxstobj = o.obj# and kdxstfil = s.file#
  and  kdxstblk = s.block#
  and  kdxsttsn = s.ts#
  and  s.file#  = i.file#
  and  s.block# = i.block#
  and  s.ts# = i.ts#
  and  i.obj#   = o.obj#
union all
 select kdxstrot+1      height,
        kdxstsbk        blocks,
        o.name,
        o.subname       partition_name,
        kdxstlrw        lf_rows,
        kdxstlbk        lf_blks,
        kdxstlln        lf_rows_len,
        kdxstlub        lf_blk_len,
        kdxstbrw        br_rows,
        kdxstbbk        br_blks,
        kdxstbln        br_rows_len,
        kdxstbub        br_blk_len,
        kdxstdrw        del_lf_rows,
        kdxstdln        del_lf_rows_len,
        kdxstdis        distinct_keys,
        kdxstmrl        most_repeated_key,
        kdxstlbk*kdxstlub+kdxstbbk*kdxstbub     btree_space,
        kdxstlln+kdxstbln+kdxstpln              used_space,
        ceil(((kdxstlln+kdxstbln)*100)/
        (kdxstlbk*kdxstlub+kdxstbbk*kdxstbub))
                                                pct_used,
        kdxstlrw/decode(kdxstdis, 0, 1, kdxstdis) rows_per_key,
        kdxstrot+1+(kdxstlrw+kdxstdis)/(decode(kdxstdis, 0, 1, kdxstdis)*2)
                                                blks_gets_per_access,
        kdxstnpr        pre_rows,
        kdxstpln        pre_rows_len,
        kdxstokc        opt_cmpr_count,
        kdxstpsk        opt_cmpr_pctsave
  from obj$ o, seg$ s, indpart$ ip, x$kdxst
 where kdxstobj = o.obj# and kdxstfil = s.file#
  and  kdxstblk = s.block#
  and  kdxsttsn = s.ts#
  and  s.file#  = ip.file#
  and  s.block# = ip.block#
  and  s.ts#    = ip.ts#
  and  ip.obj#  = o.obj#
union all
 select kdxstrot+1      height,
        kdxstsbk        blocks,
        o.name,
        o.subname       partition_name,
        kdxstlrw        lf_rows,
        kdxstlbk        lf_blks,
        kdxstlln        lf_rows_len,
        kdxstlub        lf_blk_len,
        kdxstbrw        br_rows,
        kdxstbbk        br_blks,
        kdxstbln        br_rows_len,
        kdxstbub        br_blk_len,
        kdxstdrw        del_lf_rows,
        kdxstdln        del_lf_rows_len,
        kdxstdis        distinct_keys,
        kdxstmrl        most_repeated_key,
        kdxstlbk*kdxstlub+kdxstbbk*kdxstbub     btree_space,
        kdxstlln+kdxstbln+kdxstpln              used_space,
        ceil(((kdxstlln+kdxstbln)*100)/
        (kdxstlbk*kdxstlub+kdxstbbk*kdxstbub))
                                                pct_used,
        kdxstlrw/decode(kdxstdis, 0, 1, kdxstdis) rows_per_key,
        kdxstrot+1+(kdxstlrw+kdxstdis)/(decode(kdxstdis, 0, 1, kdxstdis)*2)
                                                blks_gets_per_access,
        kdxstnpr        pre_rows,
        kdxstpln        pre_rows_len,
        kdxstokc        opt_cmpr_count,
        kdxstpsk        opt_cmpr_pctsave
  from obj$ o, seg$ s, indsubpart$ isp, x$kdxst
 where kdxstobj = o.obj# and kdxstfil = s.file#
  and  kdxstblk = s.block#
  and  kdxsttsn = s.ts#
  and  s.file#  = isp.file#
  and  s.block# = isp.block#
  and  s.ts#    = isp.ts#
  and  isp.obj#  = o.obj#;

CREATE OR REPLACE FORCE VIEW "INDPARTV$"("OBJ#","DATAOBJ#","BO#","PART#","HIBOUNDLEN","HIBOUNDVAL","FLAGS","TS#","FILE#","BLOCK#","PCTFREE$","PCTTHRES$","INITRANS","MAXTRANS","ANALYZETIME","SAMPLESIZE","ROWCNT","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","SPARE1","SPARE2","SPARE3","INCLCOL") AS 
select obj#, dataobj#, bo#,
          row_number() over (partition by bo# order by part#),
          hiboundlen, hiboundval, flags, ts#, file#, block#,
          pctfree$, pctthres$, initrans, maxtrans, analyzetime, samplesize,
          rowcnt, blevel, leafcnt, distkey, lblkkey, dblkkey, clufac, spare1,
          spare2, spare3, inclcol
from indpart$;

CREATE OR REPLACE FORCE VIEW "INDSUBPARTV$"("OBJ#","DATAOBJ#","POBJ#","SUBPART#","FLAGS","TS#","FILE#","BLOCK#","PCTFREE$","INITRANS","MAXTRANS","ANALYZETIME","SAMPLESIZE","ROWCNT","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","SPARE1","SPARE2","SPARE3","HIBOUNDLEN","HIBOUNDVAL") AS 
select obj#, dataobj#, pobj#,
          row_number() over (partition by pobj# order by subpart#),
          flags, ts#, file#, block#, pctfree$,
          initrans, maxtrans, analyzetime, samplesize, rowcnt, blevel, leafcnt,
          distkey, lblkkey, dblkkey, clufac, spare1, spare2, spare3,
          hiboundlen, hiboundval
from indsubpart$;

CREATE OR REPLACE FORCE VIEW "JAVASNM"("SHORT","LONGNAME") AS 
select short,longdbcs from javasnm$;

CREATE OR REPLACE FORCE VIEW "KU$_2NDTAB_INFO_VIEW"("OBJ_NUM","INDEX_NAME","INDEX_SCHEMA","TYPE_NAME","TYPE_SCHEMA","FLAGS") AS 
select o.obj#,
        o1.name,
        u1.name,
        o2.name,
        u2.name,
        0
   from obj$ o, obj$ o1, obj$ o2, ind$ i, user$ u1, user$ u2, indtypes$ it,
        secobj$ s
   where o.obj#=s.secobj#
         AND o1.obj#=s.obj#
         AND o1.obj# = i.obj#
         AND i.type# = 9
         AND o1.owner# = u1.user#
         AND i.indmethod# = it.obj#
         AND o2.obj# = it.implobj#
         AND o2.owner# = u2.user#
         AND bitand(i.property, 2) != 2         /* non-partitioned */
   UNION ALL
  select o.obj#,
        o1.name,
        u1.name,
        o2.name,
        u2.name,
        DECODE(BITAND (i.property, 512), 512, 64,0)+   /*0x200=iot di*/
        DECODE(BITAND(po.flags, 1), 1, 1, 0) +          /* 1 = local */
        DECODE(po.parttype, 1, 2, 2, 4, 0)    /* 1 = range, 2 = hash */
   from obj$ o, obj$ o1, obj$ o2, ind$ i, user$ u1, user$ u2,
        partobj$ po, indtypes$ it, secobj$ s
   where o.obj#=s.secobj#
         AND o1.obj#=s.obj#
         AND o1.obj# = i.obj#
         AND i.type# = 9
         AND o1.owner# = u1.user#
         AND i.indmethod# = it.obj#
         AND o2.obj# = it.implobj#
         AND o2.owner# = u2.user#
         AND bitand(po.flags, 8) = 8            /* domain index */
         AND po.obj# = i.obj#
         AND bitand(i.property, 2) = 2          /* partitioned */;

CREATE OR REPLACE FORCE VIEW "KU$_ADD_SNAP_VIEW"("REFGROUP","REF_ADD_USER","REF_ADD_DBA") AS 
select  r.refgroup,
  sys.dbms_metadata_util.get_refresh_add_user(rc.owner,
                                        rc.name,rc.type#,rc.instsite) ,
  sys.dbms_metadata_util.get_refresh_add_dba(rc.owner,
                                        rc.name,rc.type#,rc.instsite)
  from rgroup$ r, rgchild$ rc
  where  r.refgroup = rc.refgroup;

CREATE OR REPLACE FORCE VIEW "KU$_ALTER_FUNC_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","TYPE_NUM","SCHEMA_OBJ","COMPILER_INFO") AS 
select '1','0',
         oo.obj#,
         oo.type#,
         value(o),
         (select value (c)
                 from ku$_switch_compiler_view c where c.obj_num = oo.obj#)
  from  ku$_schemaobj_view o, sys.obj$ oo
  where oo.type# = 8
    and oo.obj#  = o.obj_num
         AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
              EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_ALTER_PKGBDY_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","TYPE_NUM","SCHEMA_OBJ","COMPILER_INFO") AS 
select '1','0',
         oo.obj#,
         oo.type#,
         value(o),
         (select value (c)
                 from ku$_switch_compiler_view c where c.obj_num = oo.obj#)
  from  ku$_schemaobj_view o, sys.obj$ oo
  where oo.type# = 11
    and oo.obj#  = o.obj_num
         AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
              EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_ALTER_PKGSPC_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","TYPE_NUM","SCHEMA_OBJ","COMPILER_INFO") AS 
select '1','0',
         oo.obj#,
         oo.type#,
         value(o),
         (select value (c)
                 from ku$_switch_compiler_view c where c.obj_num = oo.obj#)
  from  ku$_schemaobj_view o, sys.obj$ oo
  where oo.type# = 9
    and oo.obj#  = o.obj_num
         AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
              EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_ALTER_PROC_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","TYPE_NUM","SCHEMA_OBJ","COMPILER_INFO") AS 
select '1','0',
         oo.obj#,
         oo.type#,
         value(o),
         (select value (c)
                 from ku$_switch_compiler_view c where c.obj_num = oo.obj#)
  from  ku$_schemaobj_view o, sys.obj$ oo
  where oo.type# = 7
    and oo.obj#  = o.obj_num
         AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
              EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_ASSOC_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","BASE_OBJ","OBJ_TYPE","OBJCOL","STATS_OBJ","SELECTIVITY","CPU_COST","IO_COST","NET_COST","INTERFACE_VERSION","SPARE2") AS 
select '1','0',
        a.obj#,
        value(so),
        a.property,
        (select c.name from  sys.col$ c where c.obj# = a.obj# and
           c.intcol# = a.intcol#),
        (select value(ss) from ku$_schemaobj_view ss where
                   ss.obj_num = a.statstype#),
        NVL(a.default_selectivity, 0), NVL(a.default_cpu_cost, 0),
        NVL(a.default_io_cost, 0), NVL(a.default_net_cost, 0),
        a.interface_version#, a.spare2
   from  sys.ku$_schemaobj_view so,
         sys.association$ a
   where   a.obj# =so.obj_num
         AND (SYS_CONTEXT('USERENV','CURRENT_USERID')=0  or
              EXISTS ( SELECT * FROM session_roles
                      WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_AUDIT_DEFAULT_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","AUDIT_VAL","AUD_DEFAULT_LIST") AS 
select '1','0',
         o.obj#,
         t.audit$,
         sys.dbms_metadata_util.get_audit_default(o.obj#)
  from   tab$ t, obj$ o
  where  o.name = '_default_auditing_options_'
    and  o.owner# = 0
    and  t.obj# = o.obj#
    and  trim('-' from t.audit$) IS NOT NULL;

CREATE OR REPLACE FORCE VIEW "KU$_AUDIT_OBJ_BASE_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","BASE_OBJ","AUDIT_VAL","AUDIT_LIST") AS 
select '1','0',
         o.obj_num,
         value(o),
         case when o.type_num = 2
        then (SELECT t.audit$ from sys.tab$ t where t.obj# = o.obj_num)
        when o.type_num = 4
        then (SELECT v.audit$ from sys.view$ v where v.obj# = o.obj_num)
        when o.type_num = 6
        then (SELECT s.audit$ from sys.seq$ s where s.obj# = o.obj_num)
        when o.type_num = 7
        then (SELECT p.audit$ from sys.procedure$ p where p.obj# = o.obj_num)
        when o.type_num = 13
        then (SELECT ty.audit$ from sys.type_misc$ ty where ty.obj#= o.obj_num)
        when o.type_num = 22
        then (SELECT l.audit$ from sys.library$ l where l.obj# = o.obj_num)
        when o.type_num = 23
        then (SELECT d.audit$ from sys.dir$ d where d.obj# = o.obj_num)
        else null end,
         sys.dbms_metadata_util.get_audit(o.obj_num,o.type_num)
  from   ku$_schemaobj_view o
  where  bitand(o.flags,4)=0            -- exclude system-generated objects;

CREATE OR REPLACE FORCE VIEW "KU$_AUDIT_OBJ_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","BASE_OBJ","AUDIT_VAL","AUDIT_LIST") AS 
select value(ku$) from sys.ku$_audit_obj_base_view ku$
  where trim('-' from ku$.audit_val) IS NOT NULL
  and  (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (ku$.base_obj.owner_num, 0)
        OR    EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_AUDIT_VIEW"("VERS_MAJOR","VERS_MINOR","USER_NUM","USER_NAME","PROXY_NUM","AUDIT_OPTION","PROPERTY","SUCCESS","FAILURE") AS 
select '1','0',
        a.user#,
        u.name,
        a.proxy#,
        m.name, m.property,
        NVL(a.success, 0),
        NVL(a.failure, 0)
  from     sys.audit$ a, sys.stmt_audit_option_map m,
           sys.user$ u
  where    a.user# = u.user# and
           a.option# = m.option#
         AND (SYS_CONTEXT('USERENV','CURRENT_USERID') = 0
                OR EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_BASE_PROC_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","TYPE_NUM","SCHEMA_OBJ","SOURCE_LINES") AS 
select '1','1',
         oo.obj#,
         oo.type#,
         value(o),
         sys.dbms_metadata_util.get_source_lines(oo.name,oo.obj#,oo.type#)
  from  ku$_schemaobj_view o, sys.obj$ oo
  where (oo.type# = 7 or oo.type# = 8 or oo.type# = 9 or oo.type# = 11)
    and oo.obj#  = o.obj_num
         AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
              EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_BYTES_ALLOC_VIEW"("FILE_NUM","BLOCK_NUM","TS_NUM","BYTES_ALLOC") AS 
select s.file_num,s.block_num,ts.ts#,
       case when ts.bitmapped=0
            then ts.blocksize*s.blocks
            else (select sum(ts.blocksize*e.ktfbueblks)
                  from sys.x$ktfbue e
                  where e.ktfbuesegtsn = ts.ts#
                    and e.ktfbuesegfno = s.file_num
                    and e.ktfbuesegbno = s.block_num)
        end
  from ku$_storage_view s, ts$ ts
  where ts.ts#     = s.ts_num;

CREATE OR REPLACE FORCE VIEW "KU$_CLUSTER_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","SCHEMA_OBJ","COL_LIST","TS_NAME","BLOCKSIZE","TSNO","FILENO","BLOCKNO","PCT_FREE","PCT_USED","INITRANS","MAXTRANS","SIZE_T","HASHFUNC","HASHKEYS","FUNCTION","EXTIND","FLAGS","DEGREE","INSTANCES","AVGCHN","FUNCLEN","FUNCTXT","FUNC_VCNT","STORAGE","SPARE1","SPARE2","SPARE3","SPARE4","SPARE5","SPARE6","SPARE7") AS 
select '1','1',
        o.obj_num,
        value(o),
        cast(multiset(select * from ku$_column_view col
                       where col.obj_num = c.obj#
                      ) as ku$_column_list_t
        ),
        ts.name, ts.blocksize,
        ts.ts#, c.file#, c.block#,
        c.pctfree$, c.pctused$, c.initrans, c.maxtrans,NVL(c.size$, -1),
        c.hashfunc, NVL(c.hashkeys, 0), NVL(c.func, 1), c.extind,
        c.flags,
        NVL(c.degree, 1), NVL(c.instances, 1),
        NVL(c.avgchn, -1),
        (select condlength from sys.cdef$ co  where co.obj# = c.obj#),
        (select sys.dbms_metadata_util.long2varchar(cd.condlength,
                                        'SYS.CDEF$',
                                        'CONDITION',
                                        cd.rowid)
              from sys.cdef$ cd  where cd.obj# = c.obj#),
        (select sys.dbms_metadata_util.long2vcnt(cd.condlength,
                                        'SYS.CDEF$',
                                        'CONDITION',
                                        cd.rowid)
              from sys.cdef$ cd  where cd.obj# = c.obj#),
        (select value(s) from  ku$_storage_view s
             where s.file_num = c.file#  and  s.block_num= c.block#
                 and s.ts_num = c.ts#),
        c.spare1, c.spare2, c.spare3, c.spare4, c.spare5, c.spare6, c.spare7
   from     sys.ku$_schemaobj_view o, sys.ts$ ts, sys.clu$ c
   where    o.obj_num = c.obj# AND
                c.ts# = ts.ts# AND
            (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
             EXISTS ( SELECT * FROM session_roles
                WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_CLU_TS_VIEW"("OWNER_NUM","OBJ_NUM","TS_NAME") AS 
select o.owner#, cl.obj#, ts.name
  from   sys.obj$ o, sys.clu$ cl, sys.ts$ ts
  where  cl.ts#  = ts.ts#
  and    o.obj# = cl.obj#
  and  (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner#,0) OR
                EXISTS ( SELECT * FROM session_roles
                        WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_COLTYPE_VIEW"("OBJ_NUM","COL_NUM","INTCOL_NUM","FLAGS","TOID","VERSION","PACKED","INTCOLS","INTCOL_NUMS","TYPIDCOL_NUM","SYNOBJ_NUM","SYN_NAME","SYN_OWNER","SUBTYPE_LIST","SCHEMA_OBJ") AS 
select ct.obj#, ct.col#, ct.intcol#, ct.flags, ct.toid,
         ct.version#, ct.packed, ct.intcols, ct.intcol#s,
         ct.typidcol#, ct.synobj#,
         (select sy.name from obj$ sy where sy.obj#=ct.synobj#),
         (select u.name from user$ u, obj$ o
          where o.obj#=ct.synobj# and u.user#=o.owner#),
         /* look up stuff in subcoltype$ only if column is substitutable */
         decode(bitand(ct.flags, 512), 512,
           cast(multiset(select sct.* from ku$_subcoltype_view sct
                where ct.obj#    = sct.obj_num
                and   ct.intcol# = sct.intcol_num
                       ) as ku$_subcoltype_list_t
                ),
           null),
        (select value(o) from ku$_schemaobj_view o, obj$ oo
         where ct.toid = oo.oid$
         and o.obj_num = oo.obj#)
    from coltype$ ct;

CREATE OR REPLACE FORCE VIEW "KU$_COLUMN_VIEW"("OBJ_NUM","COL_NUM","SEGCOL_NUM","SEGCOLLENGTH","OFFSET","NAME","ATTRNAME","TYPE_NUM","LENGTH","FIXEDSTORAGE","PRECISION_NUM","SCALE","NOT_NULL","DEFLENGTH","DEFAULT_VAL","INTCOL_NUM","PROPERTY","CHARSETID","CHARSETFORM","CON","TYPEMD","LOBMD","OPQMD","OIDINDEX","SPARE1","SPARE2","SPARE3","SPARE4","SPARE5","SPARE6") AS 
select c.obj#, c.col#, c.segcol#,
         c.segcollength, c.offset, c.name,
         (select a.name from attrcol$ a where
                        a.obj#=c.obj# and a.intcol#=c.intcol#),
         c.type#, c.length, c.fixedstorage,
         c.precision#, c.scale, c.null$, c.deflength,
         sys.dbms_metadata_util.long2varchar(c.deflength,
                                        'SYS.COL$',
                                        'DEFAULT$',
                                        c.rowid),
         c.intcol#,
         c.property, c.charsetid, c.charsetform,
         ( select value(cv)
             from ku$_constraint0_view cv, ku$_constraint_col_view ccv
             where c.intcol# = ccv.intcol_num
             and c.obj# = ccv.obj_num
             and ccv.con_num = cv.con_num
             and cv.contype in (7,11)
         ),
         ( select value(ctv)
             from ku$_coltype_view ctv
             where c.type# in ( 121,    -- DTYADT  (user-defined type)
                                122,    -- DTYNTB  (nested table)
                                123,    -- DTYNAR  (varray)
                                111,    -- DTYIREF (REF)
                                 58)    -- DTYOPQ  (opaque type)
             and   c.obj#  = ctv.obj_num
             and   c.intcol# = ctv.intcol_num
         ),
         ( select value(lv)
             from ku$_lob_view lv
             where (c.type# in (112,    -- CLOB
                                113,    -- BLOB
                                123)    -- DTYNAR  (varray)
                    and   c.obj#  = lv.obj_num
                    and   c.intcol# = lv.intcol_num)
             or    (c.type# = 58        -- DTYOPQ (XML type)
                    and   c.obj#  = lv.obj_num
                    and   lv.intcol_num =
                          (select op.lobcol from sys.opqtype$ op
                                    where op.obj# = c.obj#
                                    and   bitand(op.flags,4) != 0
                                    and   op.intcol# = c.intcol#)
                    )
             or    (c.type# = 58        -- DTYOPQ (opaque type)
                    and   c.obj#  = lv.obj_num
                    and   c.intcol# = lv.intcol_num
                    and   EXISTS (
                          SELECT  1
                          FROM    sys.opqtype$ op
                          WHERE  op.obj# = c.obj#
                                 and   op.intcol# = c.intcol#
                                 and   op.type = 0 )
                    )
         ),
         ( select value(opq) from sys.ku$_opqtype_view opq
             where c.type# = 58        -- DTYOPQ (opaque type)
             and   c.obj# = opq.obj_num
             and   c.intcol# = opq.intcol_num
         ),
         ( select value(oi)
             from ku$_oidindex_view oi
             where bitand(c.property, 2) = 2
             and   c.obj# = oi.obj_num
             and   c.intcol# = oi.intcol_num
         ),
         c.spare1, c.spare2, c.spare3, c.spare4, c.spare5, c.spare6
  from col$ c;

CREATE OR REPLACE FORCE VIEW "KU$_COMMENT_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","BASE_OBJ","PROPERTY","COLNO","COLNAME","CMNT") AS 
select '1','0',
         cm.obj#, value(o),
         (select t.property from sys.tab$ t where t.obj#=cm.obj#),
         cm.col#,
         (select c.name
                 from  sys.col$ c
                 where  c.obj#=cm.obj# and c.intcol# = cm.col# ),
         replace(cm.comment$,'''','''''')
  from   sys.ku$_schemaobj_view o,
                sys.com$ cm
  where  o.obj_num = cm.obj# AND
         (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
             EXISTS ( SELECT * FROM session_roles
                WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_CONSTRAINT0_VIEW"("OWNER_NUM","NAME","CON_NUM","OBJ_NUM","NUMCOLS","CONTYPE","ENABLED","INTCOLS","MTIME","FLAGS") AS 
select c.owner#, c.name, c.con#, cd.obj#, cd.cols, cd.type#,
          NVL(cd.enabled,0),
          cd.intcols, cd.mtime, cd.defer
   from con$ c, cdef$ cd
   where c.con# = cd.con#
     and cd.type# in (5,7,11)  -- view WITH CHECK OPTION (5)
                               -- NOT NULL on built-in datatyped column (7)
                               -- NOT NULL on ADT column (11);

CREATE OR REPLACE FORCE VIEW "KU$_CONSTRAINT1_VIEW"("OWNER_NUM","NAME","CON_NUM","OBJ_NUM","PROPERTY","NUMCOLS","CONTYPE","ENABLED","CONDLENGTH","CONDITION","INTCOLS","MTIME","FLAGS","OID_OR_SETID","COL_LIST","IND") AS 
select c.owner#, c.name, c.con#, cd.obj#,
          nvl((select t.property from tab$ t where t.obj# = cd.obj#),0),
          cd.cols, cd.type#,
          NVL(cd.enabled,0),
          cd.condlength,
          sys.dbms_metadata_util.long2varchar(cd.condlength,
                                        'SYS.CDEF$',
                                        'CONDITION',
                                        cd.rowid),
          cd.intcols, cd.mtime, cd.defer,
          ( select decode(count(*),0,0,1) from ku$_constraint_col_view cv
                        where cv.con_num = c.con#
                        and cv.oid_or_setid=1 ),
          cast( multiset(select * from ku$_constraint_col_view col
                        where col.con_num = c.con#
                        order by col.pos_num
                        ) as ku$_constraint_col_list_t
                ),
          ( select value(i) from ku$_index_view i
                where i.obj_num=cd.enabled )
--              where i.schema_obj.owner_num=c.owner#
--                and i.schema_obj.name=c.name )
   from  con$ c, cdef$ cd
   where c.con# = cd.con#
     and cd.type# in (1,2,3,12,14,15,16,17)
                               -- table check (condition-no keys) (1),
                               -- primary key (2),
                               -- unique key (3),
                               -- supplemental log groups (w/ keys) (12),
                               -- supplemental log data (no keys) (14,15,16,17);

CREATE OR REPLACE FORCE VIEW "KU$_CONSTRAINT2_VIEW"("OWNER_NUM","NAME","CON_NUM","OBJ_NUM","NUMCOLS","CONTYPE","ROBJ_NUM","RCON_NUM","RRULES","MATCH_NUM","REFACT","ENABLED","INTCOLS","MTIME","FLAGS","SCHEMA_OBJ","SRC_COL_LIST","TGT_COL_LIST") AS 
select c.owner#, c.name, c.con#, cd.obj#, cd.cols, cd.type#,
          cd.robj#, cd.rcon#, cd.rrules, cd.match#, cd.refact,
          NVL(cd.enabled,0),
          cd.intcols, cd.mtime, cd.defer,
          (select value(o) from ku$_schemaobj_view o
                where o.obj_num = cd.robj#),
          cast( multiset(select * from ku$_constraint_col_view col
                        where col.con_num = c.con#
                        order by col.pos_num
                        ) as ku$_constraint_col_list_t
                ),
          cast( multiset(select * from ku$_constraint_col_view col
                        where col.con_num = cd.rcon#
                        order by col.pos_num
                        ) as ku$_constraint_col_list_t
                )
   from con$ c, cdef$ cd
   where c.con# = cd.con#
     and cd.type# = 4           -- referential constraint;

CREATE OR REPLACE FORCE VIEW "KU$_CONSTRAINT_COL_VIEW"("CON_NUM","OBJ_NUM","INTCOL_NUM","POS_NUM","SPARE1","OID_OR_SETID","COL") AS 
select cc.con#, cc.obj#, cc.intcol#, cc.pos#, cc.spare1,
  decode(bitand(c.property,1024+2),0,0,1),
  decode(bitand(c.property,2097152+1024),
         2097152,(select value(c1) from ku$_simple_pkref_col_view c1
                  where c1.obj_num    = cc.obj# and
                        c1.intcol_num = cc.intcol#),
            1024,(select value(c2) from ku$_simple_setid_col_view c2
                  where c2.obj_num    = cc.obj# and
                        c2.intcol_num = cc.intcol#),
            value(c))
  from ku$_simple_col_view c, ccol$ cc
  where c.obj_num    = cc.obj#
    and c.intcol_num = cc.intcol#;

CREATE OR REPLACE FORCE VIEW "KU$_CONSTRAINT_VIEW"("VERS_MAJOR","VERS_MINOR","CON_NUM","OWNER_NAME","NAME","FLAGS","BASE_OBJ_NUM","BASE_OBJ","CON0","CON1") AS 
select '1', '1',
         c.con#,
         u.name,
         c.name, cd.defer, cd.obj#,
         (select value(sov) from ku$_schemaobj_view sov
          where sov.obj_num=cd.obj#),
         (select value(con) from ku$_constraint0_view con
          where  con.con_num = c.con#),                -- Currently a null list
         (select value(con) from ku$_constraint1_view con
          where  con.con_num = c.con#)
  from  obj$ o, con$ c, cdef$ cd, user$ u
  where cd.obj# = o.obj# and
        c.con# = cd.con# and
        u.user# = c.owner# and
        cd.type# in (1,2,3,12,14,15,16,17)
                                   -- table check (1), primary key (2),
                                   -- unique key (3),
                                   -- supplemental log groups (12),
                                   -- supplemental log data (14,15,16,17)
        AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (u.user#, 0)
        OR EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_CONTEXT_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","SCHEMA_OBJ","SCHEMA_NAME","PACKAGE_NAME","FLAGS") AS 
select '1','0',
         c.obj#, value(o),
         c.schema, c.package, c.flags
  from   sys.ku$_schemaobj_view o, sys.context$ c
  where  o.obj_num = c.obj# AND
         (SYS_CONTEXT('USERENV','CURRENT_USERID') = 0 OR
                EXISTS ( SELECT * FROM session_roles
                        WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_DBLINK_VIEW"("VERS_MAJOR","VERS_MINOR","OWNER_NAME","OWNER_NUM","NAME","CTIME","HOST","USERID","PASSWORD","FLAG","AUTHUSR","AUTHPWD") AS 
select '1','0',
         u.name,
         l.owner#, l.name, l.ctime, l.host, l.userid,
         l.password, l.flag, l.authusr, l.authpwd
  from   sys.user$ u, sys.link$ l
  where  u.user# = l.owner#
     AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (u.user#, 0) OR
          EXISTS ( SELECT * FROM session_roles
                   WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_DEFROLE_LIST_VIEW"("USER_ID","USER_NAME","ROLE","ROLE_ID") AS 
select  d$.user#, u$.name, u1$.name, d$.role#
  from    sys.user$ u$, sys.user$ u1$, sys.defrole$ d$
  where   u$.user# = d$.user# AND
          u1$.user# = d$.role#;

CREATE OR REPLACE FORCE VIEW "KU$_DEFROLE_VIEW"("VERS_MAJOR","VERS_MINOR","USER_ID","USER_NAME","USER_TYPE","DEFROLE","ROLE_LIST") AS 
select '1','0',
          u.user#,
          u.name,
          u.type#,
          u.defrole,
          cast(multiset (select * from ku$_defrole_list_view df
                where df.user_id = u.user#) as ku$_defrole_list_t
                )
  from sys.user$ u
  where (SYS_CONTEXT('USERENV','CURRENT_USERID') = 0
                OR EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_DEPTYPES_BASE_VIEW"("TYPEOBJNO","TYPENAME","TYPEOWNERNO","TYPEOWNER","DOBJNO","DNAME") AS 
select unique o.obj#,o.name,o.owner#,u.name, d.d_obj#, do.name
from obj$ o, obj$ do, type$ dt, user$ u, dependency$ d, type$ t
where o.oid$ = t.toid
  and bitand(t.properties,2128)=0     /* not system-generated */
  and bitand(o.flags,16)!=16          /* not secondary object */
  and o.owner# != 0                   /* not owned by SYS */
  and o.owner# = u.user#
  and o.obj# = d.p_obj#
  and do.obj# = d.d_obj#
  and bitand(d.property,1)=1          /* only hard dependency */
  and do.type# = 13
  and do.oid$ = dt.toid
  and dt.toid = dt.tvoid    /* only the latest type */
union
 select o.obj#,o.name,o.owner#,u.name,0,NULL
from obj$ o, user$ u, type$ t
where o.oid$ = t.toid
  and bitand(t.properties,2128)=0     /* not system-generated */
  and bitand(o.flags,16)!=16          /* not secondary object */
  and o.owner# != 0                   /* not owned by SYS */
  and o.owner# = u.user#
  and not exists (select * from obj$ do, dependency$ d
                  where o.obj# = d.p_obj#
                  and do.obj# = d.d_obj#
                  and do.type# = 13
                  and bitand(d.property,1)=1 );

CREATE OR REPLACE FORCE VIEW "KU$_DEPTYPES_VIEW"("TYPEOBJNO","TYPENAME","TYPEOWNERNO","TYPEOWNER","DOBJNO","DNAME") AS 
select b.typeobjno, b.typename, b.typeownerno, b.typeowner, b.dobjno, b.dname
 from ku$_deptypes_base_view b
 where (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (b.typeownerno, 0) OR
              EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_DEPVIEWS_BASE_VIEW"("VIEWOBJNO","VIEWNAME","VIEWOWNERNO","VIEWOWNER","DOBJNO","DNAME") AS 
select unique o.obj#,o.name,o.owner#,u.name, d.d_obj#, do.name
from obj$ o, obj$ do, user$ u, dependency$ d, view$ v
where o.obj# = v.obj#
  and bitand(o.flags,16)!=16          /* not secondary object */
  and o.owner# != 0                   /* not owned by SYS */
  and o.owner# = u.user#
  and o.obj# = d.p_obj#
  and do.obj# = d.d_obj#
  and bitand(d.property,1)=1          /* only hard dependency */
  and do.type# = 4
union
 select o.obj#,o.name,o.owner#,u.name,0,NULL
from obj$ o, user$ u, view$ v
where o.obj# = v.obj#
  and bitand(o.flags,16)!=16          /* not secondary object */
  and o.owner# != 0                   /* not owned by SYS */
  and o.owner# = u.user#
  and not exists (select * from obj$ do, dependency$ d
                  where o.obj# = d.p_obj#
                  and do.obj# = d.d_obj#
                  and do.type# = 4
                  and bitand(d.property,1)=1 );

CREATE OR REPLACE FORCE VIEW "KU$_DEPVIEWS_VIEW"("VIEWOBJNO","VIEWNAME","VIEWOWNERNO","VIEWOWNER","DOBJNO","DNAME") AS 
select b.viewobjno, b.viewname, b.viewownerno, b.viewowner, b.dobjno, b.dname
 from ku$_depviews_base_view b
 where (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (b.viewownerno, 0) OR
              EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_DIMENSION_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","SCHEMA_OBJ","DIMTEXTLEN","DIMTEXT") AS 
select '1','0',
         d.obj#, value(o),
         d.dimtextlen,
         sys.dbms_metadata_util.long2clob(d.dimtextlen,
                                        'SYS.DIM$',
                                        'DIMTEXT',
                                        d.rowid)
  from sys.ku$_schemaobj_view o, sys.dim$ d
  where d.obj# = o.obj_num  AND
         (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
                EXISTS ( SELECT * FROM session_roles
                        WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_DIRECTORY_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","SCHEMA_OBJ","AUDIT_VAL","OS_PATH") AS 
select '1','0',
         o.obj#, value(sov),
         d.audit$,
         d.os_path
  from   sys.obj$ o, sys.ku$_schemaobj_view sov, sys.dir$ d
  where  o.obj# = sov.obj_num AND
         o.obj# = d.obj#
         AND (SYS_CONTEXT('USERENV','CURRENT_USERID')= 0
                OR EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_DOMIDX_2NDTAB_VIEW"("OBJ_NUM","SECOBJ_NUM","SCHEMA_OBJ") AS 
select s.obj#, s.secobj#, value(o)
  from sys.ku$_schemaobj_view o, sys.secobj$ s
  where o.obj_num = s.secobj#
    and o.type_num = 2
    and dbms_metadata.oktoexp_2ndary_table(s.secobj#)!= 0;

CREATE OR REPLACE FORCE VIEW "KU$_DOMIDX_OBJNUM_VIEW"("OBJ_NUM","SCHEMA_OBJ","BASE_OBJ") AS 
select i.obj#, value(o), value(bo)
  from ku$_schemaobj_view o, ku$_schemaobj_view bo, sys.ind$ i
  where o.obj_num=i.obj#
  and   bo.obj_num=i.bo#
  and   i.type#=9            /* domain index */
  and (o.owner_name NOT IN ('SYS', 'ORDSYS', 'MDSYS', 'CTXSYS', 'ORDPLUGINS',
                            'LBACSYS', 'XDB', 'SI_INFORMTN_SCHEMA'))
  AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0)
        OR EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_DOMIDX_PLSQL_VIEW"("OBJ_NUM","PLSQL") AS 
select i.obj#,
        sys.dbms_metadata.get_domidx_metadata(o.name, u.name,
                o2.name, u2.name, 0)
   from obj$ o, obj$ o2, ind$ i, user$ u, user$ u2, indtypes$ it
   where i.type# = 9
         AND o.obj# = i.obj#
         AND o.owner# = u.user#
         AND i.indmethod# = it.obj#
         AND o2.obj# = it.implobj#
         AND o2.owner# = u2.user#
         AND bitand(i.property, 2) != 2         /* non-partitioned */
   UNION ALL
  select i.obj#,
        sys.dbms_metadata.get_domidx_metadata(o.name, u.name,
                o2.name, u2.name,
                DECODE(BITAND (i.property, 512), 512, 64,0)+   /*0x200=iot di*/
                DECODE(BITAND(po.flags, 1), 1, 1, 0) +          /* 1 = local */
                DECODE(po.parttype, 1, 2, 2, 4, 0)    /* 1 = range, 2 = hash */
                )
   from obj$ o, obj$ o2, ind$ i, user$ u, user$ u2, partobj$ po, indtypes$ it
   where i.type# = 9
         AND o.obj# = i.obj#
         AND o.owner# = u.user#
         AND i.indmethod# = it.obj#
         AND o2.obj# = it.implobj#
         AND o2.owner# = u2.user#
         AND bitand(po.flags, 8) = 8            /* domain index */
         AND po.obj# = i.obj#
         AND bitand(i.property, 2) = 2          /* partitioned */;

CREATE OR REPLACE FORCE VIEW "KU$_EXPACT_VIEW"("OWNER","NAME","PREPOST") AS 
select distinct owner,name,code from expact$;

CREATE OR REPLACE FORCE VIEW "KU$_EXP_PKG_BODY_VIEW"("VERS_MAJOR","VERS_MINOR","BASE_OBJ_NUM","OBJ_NUM","TYPE_NUM","SCHEMA_OBJ","SOURCE_LINES","COMPILER_INFO") AS 
select '1','1',
         o1.obj#,o2.obj#,o2.type#,
         (select value(o) from sys.ku$_schemaobj_view o where o.obj_num=o2.obj#),
       sys.dbms_metadata_util.get_source_lines(o2.name,o2.obj#,o2.type#),
       (select value(c) from sys.ku$_switch_compiler_view c
                 where c.obj_num = o2.obj#)
  from sys.obj$ o1, sys.obj$ o2
  where o1.type# = 9 and o2.type#=11
    and o1.name=o2.name and o1.owner#=o2.owner#
         AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o2.owner#, 0) OR
              EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_EXP_TYPE_BODY_VIEW"("VERS_MAJOR","VERS_MINOR","BASE_OBJ_NUM","OBJ_NUM","SCHEMA_OBJ","SOURCE_LINES","COMPILER_INFO") AS 
select '1','1',
         o1.obj#,o2.obj#,
         (select value(o) from sys.ku$_schemaobj_view o where o.obj_num=o2.obj#),
       sys.dbms_metadata_util.get_source_lines(o2.name,o2.obj#,o2.type#),
       (select value(c) from sys.ku$_switch_compiler_view c
                 where c.obj_num = o2.obj#)
  from sys.obj$ o1, sys.obj$ o2, sys.type$ ty
  where o1.type# = 13 and o2.type#=14
    and o1.name=o2.name and o1.owner#=o2.owner#
    and ty.toid=o1.oid$
    and o1.subname is null      /* latest type version */
        /* type$ properties bits:
           262144=0     - latest type version
           other bits=0 - not system-generated type
        */
    and bitand(ty.properties,262144+2048+64+16)=0
         AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o2.owner#, 0) OR
              EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_EXTTAB_VIEW"("OBJ_NUM","DEFAULT_DIR","TYPE","NR_LOCATIONS","REJECT_LIMIT","PAR_TYPE","PARAM_CLOB","LOCATION") AS 
select
        et.obj#,
        et.default_dir,
        et.type$,
        et.nr_locations,
        et.reject_limit,
        et.par_type,
        et.param_clob,
        cast( multiset(select el.obj#, el.position, el.dir, el.name
                       from   sys.external_location$ el
                       where  el.obj# = et.obj#
                       order by el.obj#,el.position
                      ) as ku$_extloc_list_t
              )
      from sys.external_tab$ et;

CREATE OR REPLACE FORCE VIEW "KU$_FGA_POLICY_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","NAME","PTXT","PFSCHEMA","PPNAME","PFNAME","PCOL","ENABLE_FLAG","STMT_TYPE","AUDIT_TRAIL","PCOL_OPT","BASE_OBJ") AS 
SELECT '1','1',
         f.obj#,
         f.pname,
         replace ((f.ptxt), '''', ''''''),
         f.pfschma, f.ppname, f.pfname,
         cast(multiset(select c.name from sys.col$ c, sys.fgacol$ fc where
                       fc.obj# = f.obj# and
                       fc.pname = f.pname and
                       fc.obj#  = c.obj# and fc.intcol# = c.intcol#
                       )
              as ku$_fga_rel_col_list_t),
         f.enable_flag,
         BITAND(NVL(f.stmt_type, 1),15),
         BITAND(NVL(f.stmt_type, 0),64),
         BITAND(NVL(f.stmt_type, 1),128),
         value(sov)
  FROM   sys.ku$_schemaobj_view sov, sys.fga$ f
  WHERE  f.obj# = sov.obj_num  AND
         (SYS_CONTEXT('USERENV','CURRENT_USERID') = 0 OR
          EXISTS ( SELECT * FROM session_roles
                   WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_FHTABLE_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","SCHEMA_OBJ","BASE_OBJ","ANC_OBJ","STORAGE","TS_NAME","BLOCKSIZE","DATAOBJ_NUM","BOBJ_NUM","TAB_NUM","COLS","CLUCOLS","TABCLUSTER","PCT_FREE","PCT_USED","INITRANS","MAXTRANS","FLAGS","AUDIT_VAL","ROWCNT","BLKCNT","EMPCNT","AVGSPC","CHNCNT","AVGRLN","AVGSPC_FLB","FLBCNT","ANALYZETIME","SAMPLESIZE","DEGREE","INSTANCES","INTCOLS","KERNELCOLS","PROPERTY","XMLSCHEMACOLS","TRIGFLAG","SPARE1","SPARE2","SPARE3","SPARE4","SPARE5","SPARE6","COL_LIST","NT","CON0_LIST","CON1_LIST","CON2_LIST","PKREF_LIST","EXTTAB") AS 
select '1','1',
         t.obj#,
         value(o),
         -- if this is a secondary table, get base obj and ancestor obj
         decode(bitand(o.flags, 16), 16,
           (select value(oo) from ku$_schemaobj_view oo, secobj$ s
              where o.obj_num=s.secobj#
                and oo.obj_num=s.obj#),
           null),
         decode(bitand(o.flags, 16), 16,
           (select value(oo) from ku$_schemaobj_view oo, ind$ i, secobj$ s
              where o.obj_num=s.secobj#
                and i.obj#=s.obj#
                and oo.obj_num=i.bo#),
           null),
         (select value(s) from ku$_storage_view s
          where t.file# = s.file_num
          and t.block#  = s.block_num
          and t.ts#     = s.ts_num),
         ts.name, ts.blocksize,
         t.dataobj#, t.bobj#, t.tab#, t.cols,
         t.clucols,
         (select value(cl) from ku$_tabcluster_view cl
          where cl.obj_num = t.obj#),
         t.pctfree$, t.pctused$, t.initrans, t.maxtrans, t.flags,
         t.audit$, t.rowcnt, t.blkcnt, t.empcnt, t.avgspc, t.chncnt, t.avgrln,
         t.avgspc_flb, t.flbcnt, t.analyzetime, t.samplesize, t.degree,
         t.instances, t.intcols, t.kernelcols, t.property,
         decode((select 1 from dual where
                 (exists (select q.obj# from sys.opqtype$ q
                          where q.obj#=t.obj#
                          and q.type=1                        /* xmltype col */
                          and bitand(q.flags,2)=2))),          /* xml schema */
                1,'Y','N'),
         t.trigflag,
         t.spare1, t.spare2, t.spare3, t.spare4, t.spare5, t.spare6,
         cast( multiset(select * from ku$_column_view c
                        where c.obj_num = t.obj#
                        order by c.col_num, c.intcol_num
                        ) as ku$_column_list_t
              ),
         (select value(nt) from ku$_nt_parent_view nt
          where nt.obj_num = t.obj#),
         cast( multiset(select * from ku$_constraint0_view con
                        where con.obj_num = t.obj#
                        and con.contype not in (7,11)
                       ) as ku$_constraint0_list_t
             ),
         cast( multiset(select * from ku$_constraint1_view con
                        where con.obj_num = t.obj#
                       ) as ku$_constraint1_list_t
             ),
         cast( multiset(select * from ku$_constraint2_view con
                        where con.obj_num = t.obj#
                       ) as ku$_constraint2_list_t
             ),
         cast( multiset(select * from ku$_pkref_constraint_view con
                        where con.obj_num = t.obj#
                       ) as ku$_pkref_constraint_list_t
             ),
         (select value(etv) from ku$_exttab_view etv
                        where etv.obj_num = o.obj_num)
  from ku$_schemaobj_view o, tab$ t, ts$ ts
  where t.obj# = o.obj_num
        AND t.ts# = ts.ts#
        AND bitand(t.property, 32+64+128+256+512) = 0
                                                /* not IOT, partitioned   */
        AND bitand(t.property,1607983103)     -- mask off bits 0x20282000
                NOT in (0,1024,8192) -- don't include those in ku$_htable_view
        AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
                EXISTS ( SELECT * FROM session_roles
                        WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_FILE_VIEW"("NAME","FNAME","FSIZE","MAXEXTEND","INC","TS_NUM") AS 
select  substrb(v.name, -(least(lengthb(v.name),923)), 923),
                replace(v.name, '''', ''''''),
                f.blocks, f.maxextend, f.inc, f.ts#
        from    sys.v$dbfile v, sys.file$ f
        where   f.file# = v.file#
      union all
        select                                       /*+ ordered use_nl(hc) +*/
                substrb(v.fnnam, -(least(lengthb(v.fnnam),923)), 923),
                replace (v.fnnam, '''', ''''''),
                DECODE(hc.ktfthccval, 0, hc.ktfthcsz, -1),
                DECODE(hc.ktfthccval, 0, hc.ktfthcmaxsz, NULL),
                DECODE(hc.ktfthccval, 0, hc.ktfthcinc, NULL),
                ts.ts#
        FROM    sys.x$kccfn v, sys.x$ktfthc hc, sys.ts$ ts
        WHERE   v.fntyp = 7 AND
                v.fnnam IS NOT NULL AND
                v.fnfno = hc.ktfthctfno AND
                hc.ktfthctsn(+) = ts.ts#;

CREATE OR REPLACE FORCE VIEW "KU$_FIND_SGC_VIEW"("OBJ_NUM","NUM_COLS","OWNER","INDEX_NAME","TABLE_NAME","CNST_COL_LIST") AS 
select  i.obj#, i.cols, u.name, o.name, ot.name,
          cast(multiset(select value(icv)
                        from   sys.ku$_ind_col_view icv
                        where  icv.obj_num = i.obj# and
                               bitand(o.flags,4) = 4 and /* system generated */
                               bitand(i.property,1) = 1) /* constraint index */
                        as ku$_ind_col_list_t)
  from    sys.obj$ o, sys.obj$ ot, sys.ind$ i, sys.user$ u
  where   i.obj# = o.obj# and
          i.bo# = ot.obj# and
          o.owner# = u.user# and
          i.type# != 8 and                              /* no lob indexes */
          bitand(o.flags,4) = 4 and                     /* system generated */
          bitand(i.property,1) = 1 and                  /* constraint index */
          (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner#, 0) OR
              EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_FULL_PKG_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","SCHEMA_OBJ","PACKAGE_T","PACKAGE_BODY_T") AS 
select '1','1',
         oo.obj#,
         value(o),
         value(p),
         (select value(pb) from ku$_pkgbdy_view pb
          where oo.name  = pb.schema_obj.name
          and o.owner_name  = pb.schema_obj.owner_name)
  from   sys.obj$ oo, ku$_schemaobj_view o, ku$_pkg_view p
  where oo.type# = 9
    and oo.obj#  = o.obj_num
    and oo.obj#  = p.schema_obj.obj_num
         AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
              EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_FULL_TYPE_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","SCHEMA_OBJ","TYPE_T","TYPE_BODY_T") AS 
select '1','1',
         oo.obj#,
         value(o),
         value(t),
         (select value(tb) from ku$_type_body_view tb
          where oo.name  = tb.schema_obj.name
          and o.owner_name  = tb.schema_obj.owner_name)
  from sys.obj$ oo, ku$_schemaobj_view o,
        ku$_type_view t
  where oo.type# = 13
    and oo.obj#  = o.obj_num
    and oo.obj#  = t.schema_obj.obj_num
         AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
              EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_FUNC_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","TYPE_NUM","SCHEMA_OBJ","SOURCE_LINES") AS 
select t.vers_major, t.vers_minor, t.obj_num, t.type_num,
         t.schema_obj, t.source_lines
  from ku$_base_proc_view t
  where t.type_num = 8;

CREATE OR REPLACE FORCE VIEW "KU$_HISTGRM_MAX_VIEW"("OBJ_NUM","INTCOL_NUM","BUCKET","ENDPOINT","EPVALUE") AS 
select  obj#, intcol#, 1, maximum, NULL
   from    sys.hist_head$
   where   bucket_cnt = 1;

CREATE OR REPLACE FORCE VIEW "KU$_HISTGRM_MIN_VIEW"("OBJ_NUM","INTCOL_NUM","BUCKET","ENDPOINT","EPVALUE") AS 
select  obj#, intcol#, 0, minimum, NULL
   from    sys.hist_head$
   where   bucket_cnt = 1;

CREATE OR REPLACE FORCE VIEW "KU$_HISTGRM_VIEW"("OBJ_NUM","INTCOL_NUM","BUCKET","ENDPOINT","EPVALUE") AS 
select  obj#, intcol#, bucket, endpoint,
           dbms_metadata_util.nulltochr0(epvalue)
   from    sys.histgrm$
   order by obj#, intcol#, bucket;

CREATE OR REPLACE FORCE VIEW "KU$_HNT_VIEW"("OBJ_NUM","PROPERTY","STORAGE","TS_NAME","BLOCKSIZE","PCT_FREE","PCT_USED","INITRANS","MAXTRANS","FLAGS","CON0_LIST","CON1_LIST","CON2_LIST","PKREF_LIST") AS 
select t.obj#, t.property,
        (select value(s) from ku$_storage_view s
         where     t.file#  = s.file_num
             and   t.block# = s.block_num
             and   t.ts#    = s.ts_num),
        (select ts.name from ts$ ts where t.ts# = ts.ts#),
        (select ts.blocksize from ts$ ts where t.ts# = ts.ts#),
        t.pctfree$, t.pctused$, t.initrans, t.maxtrans, t.flags,
         cast( multiset(select * from ku$_constraint0_view con
                        where con.obj_num = t.obj#
                        and con.contype not in (7,11)
                       ) as ku$_constraint0_list_t
             ),
         cast( multiset(select * from ku$_constraint1_view con
                        where con.obj_num = t.obj#
                       ) as ku$_constraint1_list_t
             ),
         cast( multiset(select * from ku$_constraint2_view con
                        where con.obj_num = t.obj#
                       ) as ku$_constraint2_list_t
             ),
         cast( multiset(select * from ku$_pkref_constraint_view con
                        where con.obj_num = t.obj#
                       ) as ku$_pkref_constraint_list_t
             )
  from tab$ t where bitand(t.property,64+512) = 0 -- skip IOT and overflow segs;

CREATE OR REPLACE FORCE VIEW "KU$_HTABLE_BYTES_ALLOC_VIEW"("OBJ_NUM","BYTES_ALLOC") AS 
select t.obj#,
            (select b.bytes_alloc from ku$_bytes_alloc_view b
             where b.ts_num = t.ts#
               and b.file_num = t.file#
               and b.block_num = t.block#)
          +decode(bitand(t.property,2048+262144),0,0,   -- add lob storage
            (select sum(b.bytes_alloc) from ku$_bytes_alloc_view b, lob$ l
             where b.ts_num = l.ts#
               and b.file_num = l.file#
               and b.block_num = l.block#
               and l.obj#=t.obj#))
  from tab$ t;

CREATE OR REPLACE FORCE VIEW "KU$_HTABLE_DATA_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","NAME","PART_NAME","PROPERTY","XMLSCHEMACOLS","SCHEMA_OBJ","TS_NAME","BLOCKSIZE","BYTES_ALLOC","BASE_OBJ","DOMIDX_OBJ","ANC_OBJ","UNLOAD_METHOD","ET_PARALLEL") AS 
select '1','0',
         t.obj#,
         o.name,
         NULL,
         t.property,
         decode((select 1 from dual where
                 (exists (select q.obj# from sys.opqtype$ q
                          where q.obj#=t.obj#
                          and q.type=1                        /* xmltype col */
                          and bitand(q.flags,2)=2))),          /* xml schema */
                1,'Y','N'),
         value(o),
         ts.name, ts.blocksize, b.bytes_alloc,
         value(o),
         -- if this is a secondary table, get domidx obj and ancestor obj
         decode(bitand(o.flags, 16), 16,
           (select value(oo) from ku$_schemaobj_view oo, secobj$ s
              where o.obj_num=s.secobj#
                and oo.obj_num=s.obj#),
           null),
         decode(bitand(o.flags, 16), 16,
           (select value(oo) from ku$_schemaobj_view oo, ind$ i, secobj$ s
              where o.obj_num=s.secobj#
                and i.obj#=s.obj#
                and oo.obj_num=i.bo#),
           null),
         um.unload_method,
         um.et_parallel
  from  ku$_htable_bytes_alloc_view b, ku$_schemaobj_view o,
        ku$_unload_method_view um, tab$ t, ts$ ts
  where t.obj# = o.obj_num
        AND t.obj# = um.obj_num
        AND bitand(t.property,
                   32+64+128+256+512+8192+4194304+8388608+2147483648) = 0
                                                /* not IOT, partitioned,    */
                                                /* nested, temporary or     */
                                                /* external table           */
        AND bitand(t.flags,536870912)=0         /* not an IOT mapping table */
        AND t.ts# = ts.ts#
        AND b.obj_num=t.obj#
        AND (bitand(o.flags,16)!=16
             OR sys.dbms_metadata.oktoexp_2ndary_table(o.obj_num)=1)
        AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
                EXISTS ( SELECT * FROM session_roles
                        WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_HTABLE_OBJNUM_VIEW"("OBJ_NUM","SCHEMA_OBJ","BASE_OBJ") AS 
select t.obj#, value(o), value(o)
  from ku$_schemaobj_view o, sys.tab$ t
  where o.obj_num=t.obj#
  AND bitand(t.property,8192)=0      /* is not a nested table */
  AND bitand(t.flags,536870912)=0    /* not an IOT mapping table */
  and (o.owner_name NOT IN ('SYS', 'ORDSYS', 'MDSYS', 'CTXSYS', 'ORDPLUGINS',
                            'LBACSYS', 'XDB', 'SI_INFORMTN_SCHEMA'))
  AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0)
        OR EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_HTABLE_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","SCHEMA_OBJ","BASE_OBJ","ANC_OBJ","STORAGE","TS_NAME","BLOCKSIZE","DATAOBJ_NUM","BOBJ_NUM","TAB_NUM","COLS","CLUCOLS","TABCLUSTER","PCT_FREE","PCT_USED","INITRANS","MAXTRANS","FLAGS","AUDIT_VAL","ROWCNT","BLKCNT","EMPCNT","AVGSPC","CHNCNT","AVGRLN","AVGSPC_FLB","FLBCNT","ANALYZETIME","SAMPLESIZE","DEGREE","INSTANCES","INTCOLS","KERNELCOLS","PROPERTY","XMLSCHEMACOLS","TRIGFLAG","SPARE1","SPARE2","SPARE3","SPARE4","SPARE5","SPARE6","COL_LIST","CON0_LIST","CON1_LIST","CON2_LIST","EXTTAB") AS 
select '1','0',
         t.obj#,
         value(o),
         -- if this is a secondary table, get base obj and ancestor obj
         decode(bitand(o.flags, 16), 16,
           (select value(oo) from ku$_schemaobj_view oo, secobj$ s
              where o.obj_num=s.secobj#
                and oo.obj_num=s.obj#),
           null),
         decode(bitand(o.flags, 16), 16,
           (select value(oo) from ku$_schemaobj_view oo, ind$ i, secobj$ s
              where o.obj_num=s.secobj#
                and i.obj#=s.obj#
                and oo.obj_num=i.bo#),
           null),
         (select value(s) from ku$_storage_view s
          where t.file# = s.file_num
          and t.block#  = s.block_num
          and t.ts#     = s.ts_num),
         ts.name, ts.blocksize,
         t.dataobj#, t.bobj#, t.tab#, t.cols,
         t.clucols,
         (select value(cl) from ku$_tabcluster_view cl
          where cl.obj_num = t.obj#),
         t.pctfree$, t.pctused$, t.initrans, t.maxtrans, t.flags,
         t.audit$, t.rowcnt, t.blkcnt, t.empcnt, t.avgspc, t.chncnt, t.avgrln,
         t.avgspc_flb, t.flbcnt, t.analyzetime, t.samplesize, t.degree,
         t.instances, t.intcols, t.kernelcols, t.property, 'N', t.trigflag,
         t.spare1, t.spare2, t.spare3, t.spare4, t.spare5, t.spare6,
         cast( multiset(select * from ku$_prim_column_view c
                        where c.obj_num = t.obj#
                        order by c.col_num, c.intcol_num
                        ) as ku$_prim_column_list_t
              ),
         cast( multiset(select * from ku$_constraint0_view con
                        where con.obj_num = t.obj#
                        and con.contype not in (7,11)
                       ) as ku$_constraint0_list_t
             ),
         cast( multiset(select * from ku$_constraint1_view con
                        where con.obj_num = t.obj#
                       ) as ku$_constraint1_list_t
             ),
         cast( multiset(select * from ku$_constraint2_view con
                        where con.obj_num = t.obj#
                       ) as ku$_constraint2_list_t
             ),
         (select value(etv) from ku$_exttab_view etv
                        where etv.obj_num = o.obj_num)
  from  ku$_schemaobj_view o, tab$ t, ts$ ts
  where t.obj# = o.obj_num
        AND bitand(t.property,1607983103)     -- mask off bits 0x20282000
                in (0,1024,8192)              -- can be clustered table (1024)
                                              -- or nested table (8192)
        AND t.ts# = ts.ts#
        AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
                EXISTS ( SELECT * FROM session_roles
                        WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_HTPART_BYTES_ALLOC_VIEW"("OBJ_NUM","BYTES_ALLOC") AS 
select tp.obj#,
            (select b.bytes_alloc from ku$_bytes_alloc_view b
             where b.ts_num = tp.ts#
               and b.file_num = tp.file#
               and b.block_num = tp.block#)
          +decode(bitand(t.property,2048+262144),0,0,   -- add lob storage
            (select sum(b.bytes_alloc) from ku$_bytes_alloc_view b, lobfrag$ l
             where b.ts_num = l.ts#
               and b.file_num = l.file#
               and b.block_num = l.block#
               and l.tabfragobj#=tp.obj#))
  from tab$ t, tabpart$ tp
  where t.obj#=tp.bo#;

CREATE OR REPLACE FORCE VIEW "KU$_HTPART_DATA_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","NAME","PART_NAME","PROPERTY","XMLSCHEMACOLS","SCHEMA_OBJ","TS_NAME","BLOCKSIZE","BYTES_ALLOC","BASE_OBJ","DOMIDX_OBJ","ANC_OBJ","UNLOAD_METHOD","ET_PARALLEL") AS 
select '1','0',
         tp.obj#,
         o.subname,
         NULL,
         t.property,
         'N',
         value(o),
         ts.name, ts.blocksize, b.bytes_alloc,
         value(bo),
         -- if this is a secondary table, get domidx obj and ancestor obj
         decode(bitand(bo.flags, 16), 16,
           (select value(oo) from ku$_schemaobj_view oo, secobj$ s
              where bo.obj_num=s.secobj#
                and oo.obj_num=s.obj#),
           null),
         decode(bitand(bo.flags, 16), 16,
           (select value(oo) from ku$_schemaobj_view oo, ind$ i, secobj$ s
              where bo.obj_num=s.secobj#
                and i.obj#=s.obj#
                and oo.obj_num=i.bo#),
           null),
         um.unload_method,
         um.et_parallel
  from ku$_htpart_bytes_alloc_view b,ku$_schemaobj_view o,
       ku$_schemaobj_view bo, ku$_unload_method_view um,
       tab$ t, tabpart$ tp, ts$ ts
  where tp.obj# = o.obj_num
        AND t.obj#=tp.bo#
        AND t.obj# = um.obj_num
        AND bitand(t.property, 32+64+128+256+512+8192) = 32
                                                /* partitioned (32)       */
                                                /* but not IOT            */
                                                /* or nested table        */
        AND bitand(t.flags,536870912)=0         /* not an IOT mapping table */
        AND tp.ts# = ts.ts#
        AND b.obj_num=tp.obj#
        AND bo.obj_num=tp.bo#
        AND (bitand(bo.flags,16)!=16
             OR sys.dbms_metadata.oktoexp_2ndary_table(bo.obj_num)=1)
        AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
                EXISTS ( SELECT * FROM session_roles
                        WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_HTSPART_BYTES_ALLOC_VIEW"("OBJ_NUM","BYTES_ALLOC") AS 
select tsp.obj#,
            (select b.bytes_alloc from ku$_bytes_alloc_view b
             where b.ts_num = tsp.ts#
               and b.file_num = tsp.file#
               and b.block_num = tsp.block#)
          +decode(bitand(t.property,2048+262144),0,0,   -- add lob storage
            (select sum(b.bytes_alloc) from ku$_bytes_alloc_view b, lobfrag$ l
             where b.ts_num = l.ts#
               and b.file_num = l.file#
               and b.block_num = l.block#
               and l.tabfragobj#=tsp.obj#))
  from tab$ t, tabcompart$ tcp, tabsubpart$ tsp
  where t.obj#=tcp.bo#
    AND tcp.obj# = tsp.pobj#;

CREATE OR REPLACE FORCE VIEW "KU$_HTSPART_DATA_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","NAME","PART_NAME","PROPERTY","XMLSCHEMACOLS","SCHEMA_OBJ","TS_NAME","BLOCKSIZE","BYTES_ALLOC","BASE_OBJ","DOMIDX_OBJ","ANC_OBJ","UNLOAD_METHOD","ET_PARALLEL") AS 
select '1','0',
         tsp.obj#,
         o.subname,
         (select po.subname from obj$ po where po.obj#=tsp.pobj#),
         t.property,
         'N',
         value(o),
         ts.name, ts.blocksize, b.bytes_alloc,
         value(bo),
         -- if this is a secondary table, get domidx obj and ancestor obj
         decode(bitand(bo.flags, 16), 16,
           (select value(oo) from ku$_schemaobj_view oo, secobj$ s
              where bo.obj_num=s.secobj#
                and oo.obj_num=s.obj#),
           null),
         decode(bitand(bo.flags, 16), 16,
           (select value(oo) from ku$_schemaobj_view oo, ind$ i, secobj$ s
              where bo.obj_num=s.secobj#
                and i.obj#=s.obj#
                and oo.obj_num=i.bo#),
           null),
         um.unload_method,
         um.et_parallel
  from ku$_htspart_bytes_alloc_view b,
        ku$_schemaobj_view o, ku$_schemaobj_view bo,
        ku$_unload_method_view um, tab$ t, tabcompart$ tcp,
        tabsubpart$ tsp, ts$ ts
  where tsp.obj# = o.obj_num
        AND t.obj#=tcp.bo#
        AND t.obj# = um.obj_num
        AND bitand(t.property, 32+64+128+256+512+8192) = 32
                                                /* partitioned (32)       */
                                                /* but not IOT            */
                                                /* or nested table        */
        AND bitand(t.flags,536870912)=0         /* not an IOT mapping table */
        AND tsp.ts# = ts.ts#
        AND tcp.obj# = tsp.pobj#
        AND b.obj_num=tsp.obj#
        AND bo.obj_num=tcp.bo#
        AND (bitand(bo.flags,16)!=16
             OR sys.dbms_metadata.oktoexp_2ndary_table(bo.obj_num)=1)
        AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
                EXISTS ( SELECT * FROM session_roles
                        WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_INC_TYPE_VIEW"("OBJ_NUM","DATAOBJ_NUM","OWNER_NUM","OWNER_NAME","NAME","NAMESPACE","SUBNAME","TYPE_NUM","TYPE_NAME","CTIME","MTIME","STIME","STATUS","REMOTEOWNER","LINKNAME","FLAGS","OID","SPARE1","SPARE2","SPARE3","SPARE4","SPARE5","SPARE6") AS 
select value (oo)
  from sys.ku$_schemaobj_view oo, sys.obj$ o, sys.obj$ do,
       sys.dependency$ d, sys.type$ ty
  where o.oid$ = ty.toid
    and oo.obj_num = o.obj#
    and o.owner# != 0                   /* not owned by SYS */
    and bitand(o.flags,16)!=16          /* not secondary object */
    and o.obj# = d.p_obj#
    and do.obj# = d.d_obj#
    and bitand(d.property,2)=2          /* only REF dependency */
    and do.type# = 13
         AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner#, 0) OR
              EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_INDARRAYTYPE_VIEW"("OBJ_NUM","TYPE_NUM","BASETYPE_OBJ","ARRAYTYPE_OBJ") AS 
select ia.obj#, ia.type,
         (select value(o1) from ku$_schemaobj_view o1
               where o1.obj_num=ia.basetypeobj#),
         (select value(o2) from ku$_schemaobj_view o2
               where o2.obj_num=ia.arraytypeobj#)
  from sys.indarraytype$ ia;

CREATE OR REPLACE FORCE VIEW "KU$_INDEXOP_VIEW"("OBJ_NUM","OPER_NUM","BIND_NUM","PROPERTY","OPER_OBJ","ARGS") AS 
select io.obj#, io.oper#, io.bind#, io.property,
         (select value(o) from sys.ku$_schemaobj_view o
          where io.oper#=o.obj_num),
         cast(multiset(select * from sys.oparg$ oa
                       where oa.obj#=io.oper# and oa.bind#=io.bind#
                       order by oa.position
                      ) as ku$_oparg_list_t
             )
  from sys.indop$ io;

CREATE OR REPLACE FORCE VIEW "KU$_INDEXTYPE_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","SCHEMA_OBJ","IMPL_OBJ","PROPERTY","OPERATORS","INDARRAY") AS 
select '1','1',
         it.obj#, value(o),
         (select value(oit) from sys.ku$_schemaobj_view oit
          where it.implobj#=oit.obj_num),
         it.property,
          cast(multiset(select value(io) from sys.ku$_indexop_view io
                        where it.obj#=io.obj_num
                        /* the following order-by clause exists solely
                           to assure repeatable regression tests results */
                        order by io.oper_obj.owner_name, io.oper_obj.name
                       ) as ku$_indexop_list_t
              ),
          cast(multiset(select value(ia) from sys.ku$_indarraytype_view ia
                        where it.obj#=ia.obj_num
                       ) as ku$_indarraytype_list_t
              )
  from  sys.ku$_schemaobj_view o, sys.indtypes$ it
  where it.obj#=o.obj_num
        AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
              EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_INDEX_COL_VIEW"("OBJ_NUM","BO_NUM","INTCOL_NUM","COL","POS_NUM","SEGCOL_NUM","SEGCOLLEN","OFFSET","FLAGS","SPARE2","SPARE3","SPARE4","SPARE5","SPARE6") AS 
select ic.obj#, ic.bo#, ic.intcol#,
          value(c), ic.pos#,
          ic.segcol#, ic.segcollength, ic.offset, ic.spare1,
          ic.spare2, ic.spare3, ic.spare4, ic.spare5, ic.spare6
  from ku$_simple_col_view c, ind$ i, icol$ ic
  where ic.bo#     = c.obj_num
  and   i.obj# = ic.obj#
  and ((bitand(i.property, 1024) = 1024 and c.intcol_num = ic.spare2)
   or  (bitand(i.property, 1024) = 0    and c.intcol_num = ic.intcol#));

CREATE OR REPLACE FORCE VIEW "KU$_INDEX_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","SCHEMA_OBJ","COL_LIST","TS_NAME","BLOCKSIZE","STORAGE","DATAOBJ_NUM","BASE_OBJ_NUM","BASE_OBJ","INDMETHOD_NUM","INDTYPE_NAME","INDTYPE_OWNER","SECOBJS","PLSQL_CODE","JIJOIN_TABS","JIJOIN","COLS","PCT_FREE","INITRANS","MAXTRANS","PCT_THRES","TYPE_NUM","FLAGS","PROPERTY","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","ANALYZETIME","SAMPLESIZE","ROWCNT","INTCOLS","DEGREE","INSTANCES","TRUNCCNT","NUMCOLSDEP","NUMKEYCOLS","PART_OBJ","SPARE3","SPARE4","SPARE5","SPARE6","FOR_PKOID") AS 
select '1','2',
         i.obj#, value(o),
         cast(multiset(select * from ku$_index_col_view ic
                       where ic.obj_num = i.obj#
                        order by ic.pos_num
                      ) as ku$_index_col_list_t
             ),
         ts.name, ts.blocksize,
         (select value(s) from ku$_storage_view s
          where i.file#  = s.file_num
          and   i.block# = s.block_num
          and   i.ts#    = s.ts_num),
         i.dataobj#, i.bo#,
         (select value(so) from ku$_schemaobj_view so
          where so.obj_num = i.bo#),
         i.indmethod#,
         (select o2.name from obj$ o2 where i.indmethod# = o2.obj#),
         (select u2.name from user$ u2
                where u2.user# = (select o3.owner# from obj$ o3
                                        where i.indmethod# = o3.obj#)),
         -- include domain index info if type# = 9 (cooperative index method)
         decode(i.type#, 9,
           cast(multiset(select * from ku$_domidx_2ndtab_view so
                        where so.obj_num=i.obj#
                        ) as ku$_domidx_2ndtab_list_t
                ),
           null),
         decode(i.type#, 9,
           (select value(pl) from ku$_domidx_plsql_view pl
                where pl.obj_num = i.obj#),
           null),
         -- include bitmap join index info if this is a bji
         decode(bitand(i.property, 1024), 1024,
           cast(multiset(select * from ku$_jijoin_table_view j
                        where j.obj_num = i.obj#
                        ) as ku$_jijoin_table_list_t
                ),
           null),
         decode(bitand(i.property, 1024), 1024,
           cast(multiset(select * from ku$_jijoin_view j
                        where j.obj_num = i.obj#
                        ) as ku$_jijoin_list_t
                ),
           null),
         i.cols, i.pctfree$,
         i.initrans, i.maxtrans, i.pctthres$, i.type#, i.flags, i.property,
         i.blevel, i.leafcnt, i.distkey, i.lblkkey, i.dblkkey, i.clufac,
         i.analyzetime, i.samplesize, i.rowcnt, i.intcols, i.degree,
         i.instances, i.trunccnt, i.spare1, i.spare2,
         (select value(po) from ku$_ind_partobj_view po
          where i.obj# = po.obj_num),
         i.spare3, i.spare4, i.spare5, i.spare6,
         nvl((select 1 from cdef$ c
              where c.enabled = i.obj# and
                    c.type# = 2 and
                    (select 1 from tab$ t
                     where t.obj# = c.obj# and
                     bitand(t.property, 4096) = 4096) = 1) ,0)
   from  ku$_schemaobj_view o, ind$ i, ts$ ts
   where o.obj_num = i.obj#
         AND  i.ts# = ts.ts#
         AND  BITAND(i.property, 8208) != 8208        /* remove Fn Ind on MV */
         AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
              EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_IND_COL_VIEW"("OBJ_NUM","COL_NUM","NAME") AS 
select  i.obj#, i.col#, c.name
  from    col$ c, icol$ i
  where   i.bo# = c.obj# and
          i.col# = c.col#;

CREATE OR REPLACE FORCE VIEW "KU$_IND_COMPART_VIEW"("OBJ_NUM","SCHEMA_OBJ","DATAOBJ_NUM","BASE_OBJ_NUM","PART_NUM","HIBOUNDLEN","HIBOUNDVAL","SUBPARTCNT","SUBPARTS","FLAGS","DEFTS_NAME","DEFBLOCKSIZE","DEFPCTFREE","DEFINITRANS","DEFMAXTRANS","DEFINIEXTS","DEFEXTSIZE","DEFMINEXTS","DEFMAXEXTS","DEFEXTPCT","DEFLISTS","DEFGROUPS","DEFLOGGING","DEFBUFPOOL","ANALYZETIME","SAMPLESIZE","ROWCNT","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","SPARE1","SPARE2","SPARE3") AS 
select icp.obj#, value(o), icp.dataobj#, icp.bo#, icp.part#,
         icp.hiboundlen,
         sys.dbms_metadata_util.long2varchar(icp.hiboundlen,
                                    'SYS.INDCOMPART$',
                                    'HIBOUNDVAL',
                                    icp.rowid),
         icp.subpartcnt,
         cast(multiset(select * from ku$_ind_subpart_view isp
                       where isp.pobj_num = icp.obj#
                        order by isp.subpart_num
                      ) as ku$_ind_subpart_list_t
             ),
          icp.flags,
          -- hoist the next 2 queries up here because icp.defts# may be null
          -- and this avoids an outer join which is slooooow
          (select ts.name from ts$ ts where icp.defts# = ts.ts#),
          (select ts.blocksize from ts$ ts where icp.defts# = ts.ts#),
          icp.defpctfree, icp.definitrans,
          icp.defmaxtrans, icp.definiexts, icp.defextsize, icp.defminexts,
          icp.defmaxexts, icp.defextpct, icp.deflists, icp.defgroups,
          icp.deflogging, icp.defbufpool, icp.analyzetime, icp.samplesize,
          icp.rowcnt, icp.blevel, icp.leafcnt, icp.distkey, icp.lblkkey,
          icp.dblkkey, icp.clufac, icp.spare1, icp.spare2, icp.spare3
  from ku$_schemaobj_view o, indcompart$ icp
  where icp.obj# = o.obj_num;

CREATE OR REPLACE FORCE VIEW "KU$_IND_PARTOBJ_VIEW"("OBJ_NUM","PARTOBJ","PARTCOLS","SUBPARTCOLS","PART_LIST","COMPART_LIST") AS 
select po.obj_num, value(po),
         cast(multiset(select * from ku$_ind_part_col_view pc
                       where pc.obj_num = i.obj#
                        order by pc.pos_num
                      ) as ku$_part_col_list_t
             ),
         cast(multiset(select * from ku$_ind_subpart_col_view sc
                       where sc.obj_num = i.obj#
                        order by sc.pos_num
                      ) as ku$_part_col_list_t
             ),
         cast(multiset(select * from ku$_ind_part_view ip
                       where ip.base_obj_num = po.obj_num
                        order by ip.part_num
                      ) as ku$_ind_part_list_t
             ),
         cast(multiset(select * from ku$_ind_compart_view icp
                       where icp.base_obj_num = po.obj_num
                        order by icp.part_num
                      ) as ku$_ind_compart_list_t
             )
  from ind$ i, ku$_partobj_view po
        where i.obj#=po.obj_num;

CREATE OR REPLACE FORCE VIEW "KU$_IND_PART_COL_VIEW"("OBJ_NUM","INTCOL_NUM","COL","POS_NUM","SPARE1") AS 
select pc.obj#, pc.intcol#, value(c), pc.pos#, pc.spare1
  from ku$_simple_col_view c, ind$ i, partcol$ pc
  where   pc.obj#=i.obj#
  and     i.bo#=c.obj_num
  and     pc.intcol#=c.intcol_num;

CREATE OR REPLACE FORCE VIEW "KU$_IND_PART_VIEW"("OBJ_NUM","SCHEMA_OBJ","TS_NAME","BLOCKSIZE","STORAGE","DATAOBJ_NUM","BASE_OBJ_NUM","PART_NUM","HIBOUNDLEN","HIBOUNDVAL","FLAGS","PCT_FREE","PCT_THRES","INITRANS","MAXTRANS","ANALYZETIME","SAMPLESIZE","ROWCNT","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","SPARE1","SPARE2","SPARE3","INCLCOL","PARAMETERS") AS 
select ip.obj#,
         (select value(so) from ku$_schemaobj_view so
          where so.obj_num = ip.obj#),
         ts.name, ts.blocksize,
         (select value(s) from ku$_storage_view s
          where ip.ts# = s.ts_num
          AND ip.file# = s.file_num
          AND ip.block# = s.block_num),
         ip.dataobj#, ip.bo#,
         ip.part#, ip.hiboundlen,
         sys.dbms_metadata_util.long2varchar(ip.hiboundlen,
                                    'SYS.INDPART$',
                                    'HIBOUNDVAL',
                                     ip.rowid),
         ip.flags, ip.pctfree$, ip.pctthres$,
         ip.initrans, ip.maxtrans, ip.analyzetime, ip.samplesize,
         ip.rowcnt, ip.blevel, ip.leafcnt, ip.distkey, ip.lblkkey,
         ip.dblkkey, ip.clufac, ip.spare1, ip.spare2, ip.spare3,
         ip.inclcol,
         (select ipp.parameters from indpart_param$ ipp
          where ipp.obj#=ip.obj#)
  from  indpart$ ip, ts$ ts
  where ts.ts#=ip.ts#;

CREATE OR REPLACE FORCE VIEW "KU$_IND_STATS_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","BASE_OBJ_NUM","BASE_TAB_OBJ","BASE_IND_OBJ","TYPE_NUM","PROPERTY","COLS","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","BLEVEL","IND_FLAGS","OBJ_FLAGS","PARTITION_LIST","CNST_COL_LIST") AS 
select  '1', '0',
          i.obj#, i.bo#,
          (select value(sov) from ku$_schemaobj_view sov
           where sov.obj_num = i.bo#),
          (select value(sov) from ku$_schemaobj_view sov
           where sov.obj_num = i.obj#),
          i.type#, i.property,
          i.cols, i.rowcnt, i.leafcnt, i.distkey, i.lblkkey, i.dblkkey,
          i.clufac, i.blevel,
          decode(bitand(i.flags, 2112), 2112, 3, 2048, 2, 64, 1, 0),
          o.flags,
          cast(multiset(select value(psv)
                        from   sys.ku$_pind_stats_view psv
                        where  psv.bobj_num = i.obj#)
                        as ku$_pind_stats_list_t),
          cast(multiset(select value(icv)
                        from   sys.ku$_ind_col_view icv
                        where  icv.obj_num = i.obj# and
                               bitand(o.flags,4) = 4 and /* system generated */
                               bitand(i.property,1) = 1) /* constraint index */
                        as ku$_ind_col_list_t)
  from    sys.obj$ o, sys.ind$ i
  where   i.obj# = o.obj# and
          bitand(i.flags,2) = 2 and
          i.type# != 8 and                              /* no lob indexes */
          NOT EXISTS (SELECT 1 FROM SYS.COL$ C WHERE    /* no indexes with */
            C.OBJ# = I.BO# AND                          /* system generated */
            BITAND(C.PROPERTY,32) = 32) AND             /* column names */
          (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner#, 0) OR
              EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_IND_SUBPART_COL_VIEW"("OBJ_NUM","INTCOL_NUM","COL","POS_NUM","SPARE1") AS 
select sc.obj#, sc.intcol#, value(c), sc.pos#, sc.spare1
  from ku$_simple_col_view c, ind$ i, subpartcol$ sc
  where  sc.obj#=i.obj#
  and    i.bo#=c.obj_num
  and    sc.intcol#=c.intcol_num;

CREATE OR REPLACE FORCE VIEW "KU$_IND_SUBPART_VIEW"("OBJ_NUM","SCHEMA_OBJ","TS_NAME","BLOCKSIZE","STORAGE","DATAOBJ_NUM","POBJ_NUM","SUBPART_NUM","FLAGS","PCT_FREE","INITRANS","MAXTRANS","ANALYZETIME","SAMPLESIZE","ROWCNT","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","SPARE1","SPARE2","SPARE3") AS 
select isp.obj#, value(o), ts.name, ts.blocksize, value(s), isp.dataobj#,
         isp.pobj#, isp.subpart#, isp.flags, isp.pctfree$, isp.initrans,
         isp.maxtrans, isp.analyzetime, isp.samplesize, isp.rowcnt,
         isp.blevel, isp.leafcnt, isp.distkey, isp.lblkkey, isp.dblkkey,
         isp.clufac, isp.spare1, isp.spare2, isp.spare3
  from ku$_schemaobj_view o, ku$_storage_view s, indsubpart$ isp, ts$ ts
  where isp.obj# = o.obj_num
        AND isp.ts# = s.ts_num
        AND isp.file# = s.file_num
        AND isp.block# = s.block_num
        AND isp.ts# = ts.ts#;

CREATE OR REPLACE FORCE VIEW "KU$_IND_TS_VIEW"("OWNER_NUM","OBJ_NUM","TS_NAME") AS 
select i.owner_num, i.obj_num, i.ts_name
  from   sys.ku$_tts_ind_view i
  where  (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (i.owner_num,0) OR
                EXISTS ( SELECT * FROM session_roles
                        WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_INSTANCE_CALLOUT_VIEW"("VERS_MAJOR","VERS_MINOR","USER_NAME","OBJ_NUM","BASE_OBJ","PACKAGE","PKG_SCHEMA","LEVEL_NUM","CLASS","PREPOST","TS_NAME","INCL_CONST","INCL_TRIG","INCL_GRANT","TTS_FULL_CHK") AS 
select '1','0',
     null, d.obj#,
     value(o),
     p.package, p.schema, p.level#, p.class, oo.obj#-1,
     null, null, null, null, null
   FROM  sys.ku$_schemaobj_view o,
         sys.exppkgact$ p,
         sys.expdepact$ d,
         sys.obj$ oo
   WHERE d.obj# = o.obj_num AND d.package = p.package
         and d.schema = p.schema and p.class = 7
         and oo.obj# in (1,2)
         and (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0)
                 OR EXISTS ( SELECT * FROM session_roles
                    WHERE role='SELECT_CATALOG_ROLE' ))
   ORDER   by p.level#;

CREATE OR REPLACE FORCE VIEW "KU$_IONT_VIEW"("OBJ_NUM","PROPERTY","STORAGE","TS_NAME","BLOCKSIZE","PCT_FREE","INITRANS","MAXTRANS","FLAGS","PCT_THRESH","NUMKEYCOLS","INCLCOL_NAME","CON0_LIST","CON1_LIST","CON2_LIST","PKREF_LIST","IOV") AS 
select t.obj#, t.property,
        (select value(s) from ku$_storage_view s
         where     i.file#  = s.file_num
             and   i.block# = s.block_num
             and   i.ts#    = s.ts_num),
        (select ts.name from ts$ ts where i.ts# = ts.ts#),
        (select ts.blocksize from ts$ ts where i.ts# = ts.ts#),
        i.pctfree$, i.initrans, i.maxtrans, t.flags,
        mod(i.pctthres$,256), i.spare2,
        (select c.name from col$ c
                 where c.obj# = i.bo#
                 and   c.col# = i.trunccnt and i.trunccnt != 0),
         cast( multiset(select * from ku$_constraint0_view con
                        where con.obj_num = t.obj#
                        and con.contype not in (7,11)
                       ) as ku$_constraint0_list_t
             ),
         cast( multiset(select * from ku$_constraint1_view con
                        where con.obj_num = t.obj#
                       ) as ku$_constraint1_list_t
             ),
         cast( multiset(select * from ku$_constraint2_view con
                        where con.obj_num = t.obj#
                       ) as ku$_constraint2_list_t
             ),
         cast( multiset(select * from ku$_pkref_constraint_view con
                        where con.obj_num = t.obj#
                       ) as ku$_pkref_constraint_list_t
             ),
        (select value(ov) from ku$_ov_table_view ov
         where ov.bobj_num = t.obj#
         and bitand(t.property, 128) = 128)  -- IOT has overflow
  from tab$ t, ind$ i
  where bitand(t.property,64+512) = 64  -- IOT but not overflow
    and t.pctused$ = i.obj#             -- for IOTs, pctused has index obj#;

CREATE OR REPLACE FORCE VIEW "KU$_IOTABLE_BYTES_ALLOC_VIEW"("OBJ_NUM","BYTES_ALLOC") AS 
select t.obj#,
            (select b.bytes_alloc from ku$_bytes_alloc_view b
             where b.ts_num = i.ts#
               and b.file_num = i.file#
               and b.block_num = i.block#)
          +decode(bitand(t.property,2048+262144),0,0,   -- add lob storage
            (select sum(b.bytes_alloc) from ku$_bytes_alloc_view b, lob$ l
             where b.ts_num = l.ts#
               and b.file_num = l.file#
               and b.block_num = l.block#
               and l.obj#=t.obj#))
  from ind$ i, tab$ t
  where t.pctused$ = i.obj#          -- For IOTs, pctused has index obj#;

CREATE OR REPLACE FORCE VIEW "KU$_IOTABLE_DATA_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","NAME","PART_NAME","PROPERTY","XMLSCHEMACOLS","SCHEMA_OBJ","TS_NAME","BLOCKSIZE","BYTES_ALLOC","BASE_OBJ","DOMIDX_OBJ","ANC_OBJ","UNLOAD_METHOD","ET_PARALLEL") AS 
select '1','0',
         t.obj#,
         o.name,
         NULL,
         t.property,
         'N',
         value(o),
         ts.name, ts.blocksize, b.bytes_alloc,
         value(o),
         -- if this is a secondary table, get domidx obj and ancestor obj
         decode(bitand(o.flags, 16), 16,
           (select value(oo) from ku$_schemaobj_view oo, secobj$ s
              where o.obj_num=s.secobj#
                and oo.obj_num=s.obj#),
           null),
         decode(bitand(o.flags, 16), 16,
           (select value(oo) from ku$_schemaobj_view oo, ind$ i, secobj$ s
              where o.obj_num=s.secobj#
                and i.obj#=s.obj#
                and oo.obj_num=i.bo#),
           null),
         um.unload_method,
         um.et_parallel
  from  ku$_iotable_bytes_alloc_view b,
        ku$_schemaobj_view o, ku$_unload_method_view um, tab$ t, ind$ i, ts$ ts
  where t.obj# = o.obj_num
        AND t.obj# = um.obj_num
        and bitand(t.property, 64+512) = 64  -- IOT but not overflow
        and bitand(t.property, 32+8192) = 0     /* but not partitioned    */
                                                /* or nested table        */
        and t.pctused$ = i.obj#          -- For IOTs, pctused has index obj#
        AND i.ts# = ts.ts#
        AND b.obj_num=t.obj#
        AND (bitand(o.flags,16)!=16
             OR sys.dbms_metadata.oktoexp_2ndary_table(o.obj_num)=1)
        AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
                EXISTS ( SELECT * FROM session_roles
                        WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_IOTABLE_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","SCHEMA_OBJ","BASE_OBJ","ANC_OBJ","STORAGE","TS_NAME","BLOCKSIZE","DATAOBJ_NUM","BOBJ_NUM","TAB_NUM","COLS","CLUCOLS","PCT_FREE","INITRANS","MAXTRANS","PCT_THRESH","NUMKEYCOLS","FLAGS","AUDIT_VAL","ROWCNT","BLKCNT","EMPCNT","AVGSPC","CHNCNT","AVGRLN","AVGSPC_FLB","FLBCNT","ANALYZETIME","SAMPLESIZE","DEGREE","INSTANCES","INTCOLS","KERNELCOLS","PROPERTY","XMLSCHEMACOLS","TRIGFLAG","SPARE1","SPARE2","SPARE3","SPARE4","SPARE5","SPARE6","INCLCOL_NAME","COL_LIST","NT","CON0_LIST","CON1_LIST","CON2_LIST","PKREF_LIST","IOV","EXTTAB") AS 
select '1','1',
         t.obj#,
         value(o),
         -- if this is a secondary table, get base obj and ancestor obj
         decode(bitand(o.flags, 16), 16,
           (select value(oo) from ku$_schemaobj_view oo, secobj$ s
              where o.obj_num=s.secobj#
                and oo.obj_num=s.obj#),
           null),
         decode(bitand(o.flags, 16), 16,
           (select value(oo) from ku$_schemaobj_view oo, ind$ i, secobj$ s
              where o.obj_num=s.secobj#
                and i.obj#=s.obj#
                and oo.obj_num=i.bo#),
           null),
         (select value(s) from ku$_storage_view s
          where i.file# = s.file_num
          and i.block#  = s.block_num
          and i.ts#     = s.ts_num),
         ts.name, ts.blocksize,
         i.dataobj#, t.bobj#, t.tab#, t.cols,
         t.clucols, i.pctfree$, i.initrans, i.maxtrans,
         mod(i.pctthres$,256), i.spare2, t.flags,
         t.audit$, t.rowcnt, t.blkcnt, t.empcnt, t.avgspc, t.chncnt, t.avgrln,
         t.avgspc_flb, t.flbcnt, t.analyzetime, t.samplesize, t.degree,
         t.instances, t.intcols, t.kernelcols, t.property, 'N', t.trigflag,
         t.spare1, t.spare2, t.spare3, t.spare4, t.spare5, t.spare6,
         (select c.name from col$ c
                 where c.obj# = t.obj#
                 and   c.col# = i.trunccnt and i.trunccnt != 0
                 and   bitand(c.property,1)=0),
         cast( multiset(select * from ku$_column_view c
                        where c.obj_num = t.obj#
                        order by c.col_num, c.intcol_num
                        ) as ku$_column_list_t
              ),
         (select value(nt) from ku$_nt_parent_view nt
          where nt.obj_num = t.obj#),
         cast( multiset(select * from ku$_constraint0_view con
                        where con.obj_num = t.obj#
                        and con.contype not in (7,11)
                       ) as ku$_constraint0_list_t
             ),
         cast( multiset(select * from ku$_constraint1_view con
                        where con.obj_num = t.obj#
                       ) as ku$_constraint1_list_t
             ),
         cast( multiset(select * from ku$_constraint2_view con
                        where con.obj_num = t.obj#
                       ) as ku$_constraint2_list_t
             ),
         cast( multiset(select * from ku$_pkref_constraint_view con
                        where con.obj_num = t.obj#
                       ) as ku$_pkref_constraint_list_t
             ),
         (select value(ov) from ku$_ov_table_view ov
          where ov.bobj_num = t.obj#
          and bitand(t.property, 128) = 128),  -- IOT has overflow
         (select value(etv) from ku$_exttab_view etv
                        where etv.obj_num = o.obj_num)
  from ku$_schemaobj_view o, tab$ t, ind$ i, ts$ ts
  where t.obj# = o.obj_num
        and t.pctused$ = i.obj#          -- For IOTs, pctused has index obj#
        and bitand(t.property, 32+64+512) = 64  -- IOT but not overflow
                                                -- or partitioned (32)
        and  i.ts# = ts.ts#
        AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
                EXISTS ( SELECT * FROM session_roles
                        WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_IOTPART_BYTES_ALLOC_VIEW"("OBJ_NUM","BYTES_ALLOC") AS 
select ip.obj#,
            (select b.bytes_alloc from ku$_bytes_alloc_view b
             where b.ts_num = ip.ts#
               and b.file_num = ip.file#
               and b.block_num = ip.block#)
          +decode(bitand(t.property,2048+262144),0,0,   -- add lob storage
            (select sum(b.bytes_alloc)
             from ku$_bytes_alloc_view b, lob$ l,lobfrag$ lf
             where lf.frag#=ip.part# and t.obj#=l.obj# and l.lobj#=lf.parentobj#
               and b.ts_num = lf.ts#
               and b.file_num = lf.file#
               and b.block_num = lf.block#))
  from ind$ i, indpart$ ip, tab$ t
  where i.bo#=t.obj#
    and ip.bo#=i.obj#
    and i.type#=4           -- iot index;

CREATE OR REPLACE FORCE VIEW "KU$_IOTPART_DATA_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","NAME","PART_NAME","PROPERTY","XMLSCHEMACOLS","SCHEMA_OBJ","TS_NAME","BLOCKSIZE","BYTES_ALLOC","BASE_OBJ","DOMIDX_OBJ","ANC_OBJ","UNLOAD_METHOD","ET_PARALLEL") AS 
select '1','0',
         ip.obj#,
         o.subname,
         NULL,
         t.property,
         'N',
         value(o),
         ts.name, ts.blocksize, b.bytes_alloc,
         value(bo),
         -- if this is a secondary table, get domidx obj and ancestor obj
         decode(bitand(bo.flags, 16), 16,
           (select value(oo) from ku$_schemaobj_view oo, secobj$ s
              where bo.obj_num=s.secobj#
                and oo.obj_num=s.obj#),
           null),
         decode(bitand(bo.flags, 16), 16,
           (select value(oo) from ku$_schemaobj_view oo, ind$ i, secobj$ s
              where bo.obj_num=s.secobj#
                and i.obj#=s.obj#
                and oo.obj_num=i.bo#),
           null),
         um.unload_method,
         um.et_parallel
  from  ku$_iotpart_bytes_alloc_view b,
        ku$_schemaobj_view o, ku$_schemaobj_view bo,
        ku$_unload_method_view um, tab$ t,
        ind$ i, indpart$ ip, ts$ ts
  where ip.obj# = o.obj_num
        AND o.type_num = 20     -- index partition
        AND ip.bo#=i.obj#
        AND i.type#=4           -- iot index
        AND i.bo#=t.obj#
        AND t.obj# = um.obj_num
        AND ip.ts# = ts.ts#
        AND b.obj_num=ip.obj#
        AND bo.obj_num=i.bo#
        AND (bitand(bo.flags,16)!=16
             OR sys.dbms_metadata.oktoexp_2ndary_table(bo.obj_num)=1)
        AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
                EXISTS ( SELECT * FROM session_roles
                        WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_IOT_PARTOBJ_VIEW"("OBJ_NUM","TABPARTOBJ","PARTCOLS","SUBPARTCOLS","INDPARTOBJ","OVPARTOBJ","PART_LIST","IOV_LIST") AS 
select t.obj#,
         (select value (tpo) from ku$_partobj_view tpo
          where t.obj# = tpo.obj_num),
         cast(multiset(select * from ku$_tab_part_col_view pc
                       where pc.obj_num = t.obj#
                        order by pc.pos_num
                      ) as ku$_part_col_list_t
             ),
         cast(multiset(select * from ku$_tab_subpart_col_view sc
                       where sc.obj_num = t.obj#
                        order by sc.pos_num
                      ) as ku$_part_col_list_t
             ),
         (select value (ipo) from ku$_partobj_view ipo
          where i.obj# = ipo.obj_num),
         (select value (ovpo) from ku$_partobj_view ovpo
          where t.bobj# = ovpo.obj_num),
         cast(multiset(select * from ku$_piot_part_view ip
                       where ip.base_obj_num = i.obj#
                        order by ip.part_num
                      ) as ku$_piot_part_list_t
             ),
         cast(multiset(select * from ku$_ov_tabpart_view ovp
                       where ovp.bobj_num = t.bobj#
                        order by ovp.part_num
                      ) as ku$_ov_tabpart_list_t
             )
  from tab$ t, ind$ i
  where i.bo#=t.obj#
    and i.type#=4                       -- iot index
    and bitand(t.property,32)=32        -- partitioned table;

CREATE OR REPLACE FORCE VIEW "KU$_JAVA_CLASS_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","SCHEMA_OBJ","LONG_NAME","JAVA_RESOURCE") AS 
select '1','0',
         o.obj_num, value(o),
         nvl((select j.longdbcs from sys.javasnm$ j where j.short = o.name),
             o.name),
         sys.dbms_metadata.get_java_metadata (o.name,
                                                   o.owner_name, o.type_num)
  from sys.ku$_schemaobj_view o
  where o.type_num = 29 and
            (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0)
             OR EXISTS ( SELECT * FROM session_roles
                WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_JAVA_OBJNUM_VIEW"("OBJ_NUM","DATAOBJ_NUM","OWNER_NUM","OWNER_NAME","NAME","NAMESPACE","SUBNAME","TYPE_NUM","TYPE_NAME","CTIME","MTIME","STIME","STATUS","REMOTEOWNER","LINKNAME","FLAGS","OID","SPARE1","SPARE2","SPARE3","SPARE4","SPARE5","SPARE6") AS 
select value(o) from ku$_schemaobj_view o
  where o.type_num in (28,29,30)
  and bitand(o.flags,16)!= 16       -- exclude secondary objects
  and (o.owner_name NOT IN ('SYS', 'ORDSYS', 'MDSYS', 'CTXSYS', 'ORDPLUGINS',
                            'LBACSYS', 'XDB', 'SI_INFORMTN_SCHEMA'))
 and    (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0)
        OR EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_JAVA_RESOURCE_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","SCHEMA_OBJ","LONG_NAME","JAVA_RESOURCE") AS 
select '1','0',
         o.obj_num, value(o),
         nvl((select j.longdbcs from sys.javasnm$ j where j.short = o.name),
             o.name),
         sys.dbms_metadata.get_java_metadata (o.name,
                                                   o.owner_name, o.type_num)
  from sys.ku$_schemaobj_view o
  where o.type_num = 30 and
            (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0)
             OR EXISTS ( SELECT * FROM session_roles
                WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_JAVA_SOURCE_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","SCHEMA_OBJ","LONG_NAME","SOURCE_LINES","JAVA_RESOURCE") AS 
select '1','0',
         o.obj_num, value(o),
         nvl((select j.longdbcs from sys.javasnm$ j where j.short = o.name),
             o.name),
         cast(multiset(select s.joxftobn, s.joxftlno, NULL,NULL, s.joxftsrc
                from  x$joxfs s
                       where s.joxftobn = o.obj_num order by s.joxftlno
                       ) as ku$_source_list_t
             ),
         sys.dbms_metadata.get_java_metadata (o.name,
                                                   o.owner_name, o.type_num)
  from sys.ku$_schemaobj_view o
  where o.type_num = 28 and
            (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0)
             OR EXISTS ( SELECT * FROM session_roles
                WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_JIJOIN_TABLE_VIEW"("OBJ_NUM","TABOBJ_NUM","OWNER_NAME","NAME") AS 
select j.obj#, o.obj_num, o.owner_name, o.name
  from sys.ku$_schemaobj_view o, sys.jijoin$ j
  where o.obj_num in (j.tab1obj#, j.tab2obj#)
  group by j.obj#, o.obj_num, o.owner_name, o.name;

CREATE OR REPLACE FORCE VIEW "KU$_JIJOIN_VIEW"("OBJ_NUM","TAB1OBJ_NUM","TAB1COL_NUM","TAB2OBJ_NUM","TAB2COL_NUM","TAB1COL","TAB2COL","JOINOP","FLAGS","TAB1INST_NUM","TAB2INST_NUM") AS 
select j.obj#, j.tab1obj#, j.tab1col#, j.tab2obj#, j.tab2col#,
            (select value(c) from sys.ku$_simple_col_view c
             where c.obj_num = j.tab1obj# and c.intcol_num = j.tab1col#),
            (select value(c) from sys.ku$_simple_col_view c
             where c.obj_num = j.tab2obj# and c.intcol_num = j.tab2col#),
            j.joinop, j.flags, j.tab1inst#, tab2inst#
  from sys.jijoin$ j;

CREATE OR REPLACE FORCE VIEW "KU$_JOB_VIEW"("VERS_MAJOR","VERS_MINOR","POWNER_ID","POWNER","LOWNER","COWNER","JOB_ID","LAST_DATE","THIS_DATE","NEXT_DATE","FLAG","FAILURES","INTERVAL_NUM","WHAT","NLSENV","ENV","FIELD1","CHARENV") AS 
select '1','0',
         u.user#, j.powner, j.lowner, j.cowner, j.job,
         TO_CHAR(j.last_date, 'YYYY-MM-DD:HH24:MI:SS'),
         TO_CHAR(j.this_date, 'YYYY-MM-DD:HH24:MI:SS'),
         TO_CHAR(j.next_date, 'YYYY-MM-DD:HH24:MI:SS'),
         j.flag, j.failures,
         REPLACE(j.interval#, '''', ''''''),
         REPLACE(j.what, '''', ''''''),
         REPLACE(j.nlsenv, '''', ''''''),
         j.env, j.field1, j.charenv
  from   sys.job$ j, sys.user$ u
  where  j.powner = u.name;

CREATE OR REPLACE FORCE VIEW "KU$_LIBRARY_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","SCHEMA_OBJ","FILESPEC","LIB_AUDIT","PROPERTY") AS 
select '1','0',
         lb.obj#, value(o),
         lb.filespec,
         lb.audit$,
         lb.property
  from sys.ku$_schemaobj_view o, sys.library$ lb
  where o.type_num=22 AND
        lb.obj# = o.obj_num AND
         (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
                EXISTS ( SELECT * FROM session_roles
                        WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_LOBCOMPPART_VIEW"("OBJ_NUM","PART_OBJ_NUM","PART_NUM","INTCOL_NUM","SCHEMA_OBJ","DEFTS_NAME","DEFBLOCKSIZE","DEFCHUNK","DEFPCTVERSION","DEFFLAGS","DEFPRO","DEFINIEXTS","DEFEXTSIZE","DEFMINEXTS","DEFMAXEXTS","DEFEXTPCT","DEFLISTS","DEFGROUPS","DEFBUFPOOL","SPARE1","SPARE2","SPARE3") AS 
select lc.partobj#, lc.tabpartobj#, lc.part#,
        (select l.intcol# from lob$ l where l.lobj#=lc.lobj#),
        (select value(o) from ku$_schemaobj_view o
         where o.obj_num = lc.partobj#),
        (select ts.name from ts$ ts where lc.defts# = ts.ts#),
        (select ts.blocksize from ts$ ts where lc.defts# = ts.ts#),
        lc.defchunk, lc.defpctver$, lc.defflags, lc.defpro,
        lc.definiexts, lc.defextsize, lc.defminexts, lc.defmaxexts,
        lc.defextpct, lc.deflists, lc.defgroups, lc.defbufpool,
        lc.spare1, lc.spare2, lc.spare3
  from lobcomppart$ lc;

CREATE OR REPLACE FORCE VIEW "KU$_LOBFRAGINDEX_VIEW"("OBJ_NUM","SCHEMA_OBJ","TS_NAME","BLOCKSIZE","STORAGE","DATAOBJ_NUM","BASE_OBJ_NUM","PART_NUM","FLAGS","PCT_FREE","PCT_THRES","INITRANS","MAXTRANS","ANALYZETIME","SAMPLESIZE","ROWCNT","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","SPARE1","SPARE2","SPARE3","INCLCOL") AS 
select i.obj#, value(o),
         ts.name, ts.blocksize,
         (select value(s) from ku$_storage_view s
          where i.file#  = s.file_num
          and   i.block# = s.block_num
          and   i.ts#    = s.ts_num),
         i.dataobj#, i.bo#, i.part#, i.flags,
         i.pctfree$, i.pctthres$, i.initrans, i.maxtrans,
         i.analyzetime, i.samplesize, i.rowcnt,
         i.blevel, i.leafcnt, i.distkey, i.lblkkey, i.dblkkey, i.clufac,
         i.spare1, i.spare2, i.spare3, i.inclcol
   from  ku$_schemaobj_view o, indpart$ i, ts$ ts
   where o.obj_num = i.obj#
         AND  i.ts# = ts.ts#;

CREATE OR REPLACE FORCE VIEW "KU$_LOBFRAG_VIEW"("OBJ_NUM","PARENT_OBJ_NUM","PART_OBJ_NUM","BASE_OBJ_NUM","INTCOL_NUM","PART_NUM","SCHEMA_OBJ","STORAGE","TS_NAME","BLOCKSIZE","IND_NUM","LOBINDEX","CHUNK","PCTVERSION","FLAGS","PROPERTY","SPARE1","SPARE2","SPARE3") AS 
select lf.fragobj#, lf.parentobj#, lf.tabfragobj#,
        l.obj#, l.intcol#, lf.frag#,
        (select value(o) from ku$_schemaobj_view o
         where o.obj_num = lf.fragobj#),
        (select value(s) from ku$_storage_view s
         where s.file_num  = lf.file#
         and   s.block_num = lf.block#
         and   s.ts_num    = lf.ts#),
        (select ts.name from ts$ ts where lf.ts# = ts.ts#),
        (select ts.blocksize from ts$ ts where lf.ts# = ts.ts#),
        lf.indfragobj#,
        (select value(i) from ku$_lobfragindex_view i
                 where i.obj_num=lf.indfragobj#),
        lf.chunk, lf.pctversion$, lf.fragflags, lf.fragpro,
        lf.spare1, lf.spare2, lf.spare3
  from  lob$ l, lobfrag$ lf
        where l.lobj#=lf.parentobj#;

CREATE OR REPLACE FORCE VIEW "KU$_LOBINDEX_VIEW"("OBJ_NUM","SCHEMA_OBJ","TS_NAME","BLOCKSIZE","STORAGE","DATAOBJ_NUM","COLS","PCT_FREE","INITRANS","MAXTRANS","PCT_THRES","TYPE_NUM","FLAGS","PROPERTY","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","ANALYZETIME","SAMPLESIZE","ROWCNT","INTCOLS","DEGREE","INSTANCES","TRUNCCNT","NUMCOLSDEP","NUMKEYCOLS","SPARE3","SPARE4","SPARE5","SPARE6") AS 
select i.obj#, value(o),
         ts.name, ts.blocksize,
         (select value(s) from ku$_storage_view s
          where i.file#  = s.file_num
          and   i.block# = s.block_num
          and   i.ts#    = s.ts_num),
         i.dataobj#,
         i.cols, i.pctfree$,
         i.initrans, i.maxtrans, i.pctthres$, i.type#, i.flags, i.property,
         i.blevel, i.leafcnt, i.distkey, i.lblkkey, i.dblkkey, i.clufac,
         i.analyzetime, i.samplesize, i.rowcnt, i.intcols, i.degree,
         i.instances, i.trunccnt, i.spare1, i.spare2,
         i.spare3, i.spare4, i.spare5, i.spare6
   from  ku$_schemaobj_view o, ind$ i, ts$ ts
   where o.obj_num = i.obj#
         AND  i.ts# = ts.ts#;

CREATE OR REPLACE FORCE VIEW "KU$_LOB_VIEW"("OBJ_NUM","COL_NUM","INTCOL_NUM","SCHEMA_OBJ","STORAGE","TS_NAME","BLOCKSIZE","IND_NUM","LOBINDEX","CHUNK","PCTVERSION","FLAGS","PROPERTY","RETENTION","FREEPOOLS","SPARE1","SPARE2","SPARE3") AS 
select l.obj#, l.col#, l.intcol#,
        (select value(o) from ku$_schemaobj_view o
         where o.obj_num = l.lobj#),
        (select value(s) from ku$_storage_view s
         where s.file_num  = l.file#
         and   s.block_num = l.block#
         and   s.ts_num    = l.ts#),
        (select ts.name from ts$ ts where l.ts# = ts.ts#),
        (select ts.blocksize from ts$ ts where l.ts# = ts.ts#),
        l.ind#,
        (select value(i) from ku$_lobindex_view i where i.obj_num=l.ind#),
        l.chunk, l.pctversion$, l.flags, l.property,
        l.retention, l.freepools, l.spare1, l.spare2, l.spare3
  from lob$ l;

CREATE OR REPLACE FORCE VIEW "KU$_MONITOR_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","BASE_OBJ","MONITOR") AS 
select '1','0',
         o.obj_num,
         value(o),
         decode(bitand(nvl(t.flags, 0), 2097152), 2097152, 1, 0)
  from ku$_schemaobj_view o, sys.tab$ t
  where   t.obj# = o.obj_num and bitand(nvl(t.flags, 0), 2097152) != 0
        AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
                EXISTS ( SELECT * FROM session_roles
                        WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_MVLPROP_VIEW"("OBJ_NUM","NAME","SCHEMA","FLAGS","PROPERTY") AS 
select o.obj#, m.master, m.mowner, o.flags, t.property
 from obj$ o, tab$ t, user$ u, mlog$ m
 where o.owner# = u.user#
 and   o.obj#   = t.obj#
 and   m.mowner = u.name
 and   m.log = o.name;

CREATE OR REPLACE FORCE VIEW "KU$_MVL_TS_VIEW"("OWNER_NUM","OBJ_NUM","TS_NAME") AS 
select t.owner_num, t.obj_num, t.ts_name
  from   sys.ku$_tts_mvl_view t
  where  (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (t.owner_num,0) OR
                EXISTS ( SELECT * FROM session_roles
                        WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_MVPROP_VIEW"("OBJ_NUM","NAME","SCHEMA","FLAGS","PROPERTY") AS 
select o.obj#, o.name, u.name, o.flags, t.property
 from obj$ o, tab$ t, user$ u, snap$ s
 where o.owner# = u.user#
 and   o.obj#   = t.obj#
 and   s.sowner = u.name
 and   s.tname  = o.name;

CREATE OR REPLACE FORCE VIEW "KU$_MV_TS_VIEW"("OWNER_NUM","OBJ_NUM","TS_NAME") AS 
select t.owner_num, t.obj_num, t.ts_name
  from   sys.ku$_tts_mv_view t
  where  (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (t.owner_num,0) OR
                EXISTS ( SELECT * FROM session_roles
                        WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_M_VIEW_FH_VIEW"("VERS_MAJOR","VERS_MINOR","SOWNER","VNAME","MVIEW","MVIEW_TAB","MVIEW_IDX_LIST") AS 
select '2','0',
         mvv.sowner,
         mvv.vname,
         value(mvv),
         value(fhtv),
         cast(multiset(select value(iv) from sys.ku$_index_view iv, sys.ind$ i
                       where i.bo# = ot.obj# and
                             bitand(i.property,8192) = 8192 and
                             iv.obj_num = i.obj#) as ku$_index_list_t)
  from   sys.obj$ ot, sys.user$ u, sys.ku$_fhtable_view fhtv,
         sys.ku$_m_view_view mvv
  where  ot.name     = mvv.tname
     and ot.owner#   = u.user#
     and u.name      = mvv.sowner
     and ot.type#    = 2
     and fhtv.obj_num = ot.obj#
     and BITAND(mvv.flag,33554432) != 33554432
     and (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (ot.owner#, 0) OR
          EXISTS ( SELECT * FROM session_roles
                   WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_M_VIEW_H_VIEW"("VERS_MAJOR","VERS_MINOR","SOWNER","VNAME","MVIEW","MVIEW_TAB","MVIEW_IDX_LIST") AS 
select '2','0',
         mvv.sowner,
         mvv.vname,
         value(mvv),
         value(htv),
         cast(multiset(select value(iv) from sys.ku$_index_view iv, sys.ind$ i
                       where i.bo# = ot.obj# and
                             bitand(i.property,8192) = 8192 and
                             iv.obj_num = i.obj#) as ku$_index_list_t)
  from   sys.obj$ ot, sys.user$ u, sys.ku$_htable_view htv,
         sys.ku$_m_view_view mvv
  where  ot.name     = mvv.tname
     and ot.owner#   = u.user#
     and u.name      = mvv.sowner
     and ot.type#    = 2
     and htv.obj_num = ot.obj#
     and BITAND(mvv.flag,33554432) != 33554432
     and (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (ot.owner#, 0) OR
          EXISTS ( SELECT * FROM session_roles
                   WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_M_VIEW_IOT_VIEW"("VERS_MAJOR","VERS_MINOR","SOWNER","VNAME","MVIEW","MVIEW_TAB","MVIEW_IDX_LIST") AS 
select '2','0',
         mvv.sowner,
         mvv.vname,
         value(mvv),
         value(iotv),
         cast(multiset(select value(iv) from sys.ku$_index_view iv, sys.ind$ i
                       where i.bo# = ot.obj# and
                             bitand(i.property,8192) = 8192 and
                             iv.obj_num = i.obj#) as ku$_index_list_t)
  from   sys.obj$ ot, sys.user$ u, sys.ku$_iotable_view iotv,
         sys.ku$_m_view_view mvv
  where  ot.name     = mvv.tname
     and ot.owner#   = u.user#
     and u.name      = mvv.sowner
     and ot.type#    = 2
     and iotv.obj_num = ot.obj#
     and BITAND(mvv.flag,33554432) = 33554432
     and (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (ot.owner#, 0) OR
          EXISTS ( SELECT * FROM session_roles
                   WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_M_VIEW_LOG_FH_VIEW"("VERS_MAJOR","VERS_MINOR","TABOBJ_NUM","MVIEWLOG","MVIEWLOG_TAB") AS 
select '1','0',
         fhtv.obj_num,
         value(mvlv),
         value(fhtv)
  from   obj$ o, user$ u, sys.ku$_fhtable_view fhtv, ku$_m_view_log_view mvlv
  where  mvlv.mowner = u.name
     and mvlv.log    = o.name
     and o.owner#    = u.user#
     and o.type#     = 2
     and o.obj#      = fhtv.schema_obj.obj_num
     and (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (u.user#, 0) OR
          EXISTS ( SELECT * FROM session_roles
                   WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_M_VIEW_LOG_H_VIEW"("VERS_MAJOR","VERS_MINOR","TABOBJ_NUM","MVIEWLOG","MVIEWLOG_TAB") AS 
select '1','0',
         htv.obj_num,
         value(mvlv),
         value(htv)
  from   obj$ o, user$ u, sys.ku$_htable_view htv, ku$_m_view_log_view mvlv
  where  mvlv.mowner = u.name
     and mvlv.log    = o.name
     and o.owner#    = u.user#
     and o.type#     = 2
     and o.obj#      = htv.schema_obj.obj_num
     and (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (u.user#, 0) OR
          EXISTS ( SELECT * FROM session_roles
                   WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_M_VIEW_LOG_PFH_VIEW"("VERS_MAJOR","VERS_MINOR","TABOBJ_NUM","MVIEWLOG","MVIEWLOG_TAB") AS 
select '1','0',
         pfhtv.obj_num,
         value(mvlv),
         value(pfhtv)
  from   obj$ o, user$ u, sys.ku$_pfhtable_view pfhtv, ku$_m_view_log_view mvlv
  where  mvlv.mowner = u.name
     and mvlv.log    = o.name
     and o.owner#    = u.user#
     and o.type#     = 2
     and o.obj#      = pfhtv.schema_obj.obj_num
     and (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (u.user#, 0) OR
          EXISTS ( SELECT * FROM session_roles
                   WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_M_VIEW_LOG_PH_VIEW"("VERS_MAJOR","VERS_MINOR","TABOBJ_NUM","MVIEWLOG","MVIEWLOG_TAB") AS 
select '1','0',
         phtv.obj_num,
         value(mvlv),
         value(phtv)
  from   obj$ o, user$ u, sys.ku$_phtable_view phtv, ku$_m_view_log_view mvlv
  where  mvlv.mowner = u.name
     and mvlv.log    = o.name
     and o.owner#    = u.user#
     and o.type#     = 2
     and o.obj#      = phtv.schema_obj.obj_num
     and (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (u.user#, 0) OR
          EXISTS ( SELECT * FROM session_roles
                   WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_M_VIEW_LOG_VIEW"("VERS_MAJOR","VERS_MINOR","MOWNER","MASTER","OLDEST","OLDEST_PK","OSCN","YOUNGEST","YSCN","LOG","TRIG","FLAG","MTIME","TEMP_LOG","OLDEST_OID","OLDEST_NEW","GLOBAL_DB_NAME","FC_COUNT","FC_LIST","LM_COUNT","LM_LIST") AS 
select '1','0',
         m.mowner, m.master, m.oldest,
         TO_CHAR(m.oldest_pk, 'YYYY-MM-DD:HH24:MI:SS'),
         m.oscn,
         TO_CHAR(m.youngest, 'YYYY-MM-DD:HH24:MI:SS'),
         m.yscn, m.log, m.trig, m.flag,
         TO_CHAR(m.mtime, 'YYYY-MM-DD:HH24:MI:SS'),
         m.temp_log,
         TO_CHAR(m.oldest_oid, 'YYYY-MM-DD:HH24:MI:SS'),
         TO_CHAR(m.oldest_new, 'YYYY-MM-DD:HH24:MI:SS'),
         p.value$,
         (select count(*)
                       from   sys.mlog_refcol$ r
                       where  m.mowner = r.mowner
                          and m.master = r.master),
         cast(multiset(select r.colname,
                              to_char(r.oldest, 'YYYY-MM-DD:HH24:MI:SS'),
                              r.flag
                       from   sys.mlog_refcol$ r
                       where  m.mowner = r.mowner
                          and m.master = r.master)
                       as ku$_refcol_list_t),
         (select count(*)
                       from   sys.slog$ s
                       where  m.mowner = s.mowner
                          and m.master = s.master),
         cast(multiset(select s.snapid,
                              to_char(s.snaptime, 'YYYY-MM-DD:HH24:MI:SS')
                       from   sys.slog$ s
                       where  m.mowner = s.mowner
                          and m.master = s.master)
                       as ku$_slog_list_t)
  from   sys.mlog$ m, sys.props$ p
  where  p.name  = 'GLOBAL_DB_NAME';

CREATE OR REPLACE FORCE VIEW "KU$_M_VIEW_PFH_VIEW"("VERS_MAJOR","VERS_MINOR","SOWNER","VNAME","MVIEW","MVIEW_TAB","MVIEW_IDX_LIST") AS 
select '2','0',
         mvv.sowner,
         mvv.vname,
         value(mvv),
         value(pfhtv),
         cast(multiset(select value(iv) from sys.ku$_index_view iv, sys.ind$ i
                       where i.bo# = ot.obj# and
                             bitand(i.property,8192) = 8192 and
                             iv.obj_num = i.obj#) as ku$_index_list_t)
  from   sys.obj$ ot, sys.user$ u, sys.ku$_pfhtable_view pfhtv,
         sys.ku$_m_view_view mvv
  where  ot.name     = mvv.tname
     and ot.owner#   = u.user#
     and u.name      = mvv.sowner
     and ot.type#    = 2
     and pfhtv.obj_num = ot.obj#
     and BITAND(mvv.flag,33554432) != 33554432
     and (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (ot.owner#, 0) OR
          EXISTS ( SELECT * FROM session_roles
                   WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_M_VIEW_PH_VIEW"("VERS_MAJOR","VERS_MINOR","SOWNER","VNAME","MVIEW","MVIEW_TAB","MVIEW_IDX_LIST") AS 
select '2','0',
         mvv.sowner,
         mvv.vname,
         value(mvv),
         value(phtv),
         cast(multiset(select value(iv) from sys.ku$_index_view iv, sys.ind$ i
                       where i.bo# = ot.obj# and
                             bitand(i.property,8192) = 8192 and
                             iv.obj_num = i.obj#) as ku$_index_list_t)
  from   sys.obj$ ot, sys.user$ u, sys.ku$_phtable_view phtv,
         sys.ku$_m_view_view mvv
  where  ot.name     = mvv.tname
     and ot.owner#   = u.user#
     and u.name      = mvv.sowner
     and ot.type#    = 2
     and phtv.obj_num = ot.obj#
     and BITAND(mvv.flag,33554432) != 33554432
     and (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (ot.owner#, 0) OR
          EXISTS ( SELECT * FROM session_roles
                   WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_M_VIEW_PIOT_VIEW"("VERS_MAJOR","VERS_MINOR","SOWNER","VNAME","MVIEW","MVIEW_TAB","MVIEW_IDX_LIST") AS 
select '2','0',
         mvv.sowner,
         mvv.vname,
         value(mvv),
         value(piotv),
         cast(multiset(select value(iv) from sys.ku$_index_view iv, sys.ind$ i
                       where i.bo# = ot.obj# and
                             bitand(i.property,8192) = 8192 and
                             iv.obj_num = i.obj#) as ku$_index_list_t)
  from   sys.obj$ ot, sys.user$ u, sys.ku$_piotable_view piotv,
         sys.ku$_m_view_view mvv
  where  ot.name     = mvv.tname
     and ot.owner#   = u.user#
     and u.name      = mvv.sowner
     and ot.type#    = 2
     and piotv.obj_num = ot.obj#
     and BITAND(mvv.flag,33554432) = 33554432
     and (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (ot.owner#, 0) OR
              EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_M_VIEW_VIEW"("VERS_MAJOR","VERS_MINOR","SOWNER","VNAME","TNAME","MOWNER","MASTER","MLINK","SNAPSHOT","SNAPID","AUTO_FAST","AUTO_FUN","AUTO_DATE","USLOG","STATUS","MASTER_VERSION","TABLES","FLAG","FLAG2","LOBMASKVEC","MAS_ROLL_SEG","RSCN","INSTSITE","FLAVOR_ID","OBJFLAG","SNA_TYPE_OWNER","SNA_TYPE_NAME","MAS_TYPE_OWNER","MAS_TYPE_NAME","PARENT_SOWNER","PARENT_VNAME","QUERY_LEN","QUERY_TXT","QUERY_VCNT","REL_QUERY","LOC_ROLL_SEG","GLOBAL_DB_NAME","SRT_LIST") AS 
select '2','0',
         s.sowner,
         s.vname,
         s.tname,
         s.mowner,
         s.master,
         s.mlink,
         TO_CHAR(s.snapshot,'YYYY-MM-DD:HH24:MI:SS'),
         s.snapid,
         DECODE(s.auto_fast, 'C', 'COMPLETE', 'F', 'FAST', '?', 'FORCE',
                NULL, 'FORCE', 'N', 'NEVER', 'ERROR'),
         s.auto_fun,
         s.auto_date,
         s.uslog,
         s.status,
         s.master_version,
         s.tables,
         s.flag,
         s.flag2,
         s.lobmaskvec,
         s.mas_roll_seg,
         s.rscn,
         s.instsite,
         NVL(s.flavor_id, 0),
         s.objflag,
         s.sna_type_owner,
         s.sna_type_name,
         s.mas_type_owner,
         s.mas_type_name,
         s.parent_sowner,
         s.parent_vname,
         s.query_len,
         sys.dbms_metadata_util.long2clob(s.query_len, 'sys.snap$',
                                            'query_txt', s.rowid),
--         sys.dbms_metadata_util.long2vcnt(s.query_len, 'sys.snap$',
--                                            'query_txt', s.rowid),
         NULL,
         s.rel_query,
         (select rg.rollback_seg
          from   sys.rgroup$ rg
          where  rg.owner = s.sowner
             and rg.name = s.vname),
         p.value$,
         cast(multiset(select srt.tablenum,
                              TO_CHAR(srt.snaptime,'YYYY-MM-DD:HH24:MI:SS'),
                              srt.mowner,
                              srt.master,
                              srt.masflag,
                              srt.masobj#,
                              TO_CHAR(srt.loadertime,'YYYY-MM-DD:HH24:MI:SS'),
                              srt.refscn,
                              TO_CHAR(srt.lastsuccess,'YYYY-MM-DD:HH24:MI:SS'),
                              srt.fcmaskvec,
                              srt.ejmaskvec,
                              srt.sub_handle,
                              srt.change_view,
                              (select count(*)
                               from   sys.snap_colmap$ scm
                               where  srt.vname = scm.vname
                               and    srt.sowner = scm.sowner
                               and    srt.instsite = scm.instsite
                               and    srt.tablenum = scm.tabnum),
                              cast(multiset(select scm.snacol,
                                                   scm.mascol,
                                                   scm.maspos,
                                                   scm.colrole,
                                                   scm.snapos
                                            from   sys.snap_colmap$ scm
                                            where  srt.vname = scm.vname
                                            and    srt.sowner = scm.sowner
                                            and    srt.instsite = scm.instsite
                                            and    srt.tablenum = scm.tabnum
                                            order by scm.maspos)
                                            as ku$_m_view_scm_list_t)
                       from   sys.snap_reftime$ srt
                       where  s.vname    = srt.vname
                          and s.sowner   = srt.sowner
                          and s.instsite = srt.instsite
                       order by srt.mowner, srt.master, srt.tablenum)
                       as ku$_m_view_srt_list_t)
  from   snap$ s, sys.props$ p
  where  p.name  = 'GLOBAL_DB_NAME';

CREATE OR REPLACE FORCE VIEW "KU$_NTABLE_BYTES_ALLOC_VIEW"("OBJ_NUM","BYTES_ALLOC") AS 
select case when bitand(t.property,64)=0
                 then (select value(b1) from ku$_htable_bytes_alloc_view b1
                       where b1.obj_num = t.obj#)
                 else (select value(b2) from ku$_iotable_bytes_alloc_view b2
                       where b2.obj_num = t.obj#)
                 end
  from tab$ t;

CREATE OR REPLACE FORCE VIEW "KU$_NTABLE_DATA_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","NAME","PART_NAME","PROPERTY","XMLSCHEMACOLS","SCHEMA_OBJ","TS_NAME","BLOCKSIZE","BYTES_ALLOC","BASE_OBJ","DOMIDX_OBJ","ANC_OBJ","UNLOAD_METHOD","ET_PARALLEL") AS 
select '1','0',
         t.obj#,
         o.name,
         NULL,
         t.property,
         'N',
         value(o),
         ts.name, ts.blocksize, b.bytes_alloc,
         value(bo),
         -- if this is a secondary table, get domidx obj and ancestor obj
         decode(bitand(bo.flags, 16), 16,
           (select value(oo) from ku$_schemaobj_view oo, secobj$ s
              where bo.obj_num=s.secobj#
                and oo.obj_num=s.obj#),
           null),
         decode(bitand(bo.flags, 16), 16,
           (select value(oo) from ku$_schemaobj_view oo, ind$ i, secobj$ s
              where bo.obj_num=s.secobj#
                and i.obj#=s.obj#
                and oo.obj_num=i.bo#),
           null),
         um.unload_method,
         um.et_parallel
  from  ku$_ntable_bytes_alloc_view b,
        ku$_schemaobj_view o, ku$_schemaobj_view bo,
        ku$_unload_method_view um, tab$ t, ts$ ts
  where t.obj# = o.obj_num
        AND t.obj# = um.obj_num
        AND bitand(t.property,8192)!=0      /* is a nested table */
        AND t.ts# = ts.ts#
        AND b.obj_num=t.obj#
        AND bo.obj_num=dbms_metadata_util.get_anc(t.obj#)
        AND (bitand(bo.flags,16)!=16
             OR sys.dbms_metadata.oktoexp_2ndary_table(bo.obj_num)=1)
        AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
                EXISTS ( SELECT * FROM session_roles
                        WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_NTABLE_OBJNUM_VIEW"("OBJ_NUM","SCHEMA_OBJ","BASE_OBJ") AS 
select t.obj#, value(o), value(bo)
  from ku$_schemaobj_view o, ku$_schemaobj_view bo, sys.tab$ t
  where o.obj_num=t.obj#
  AND bitand(t.property,8192)!=0      /* is a nested table */
  and bo.obj_num=dbms_metadata_util.get_anc(t.obj#)
  and (o.owner_name NOT IN ('SYS', 'ORDSYS', 'MDSYS', 'CTXSYS', 'ORDPLUGINS',
                            'LBACSYS', 'XDB', 'SI_INFORMTN_SCHEMA'))
  AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0)
        OR EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_NT_PARENT_VIEW"("OBJ_NUM","NTS") AS 
select t.obj#,
    cast(multiset(select
                nt.obj#, nt.intcol#, nt.ntab#,
                (select value(o) from ku$_schemaobj_view o
                 where o.obj_num = nt.ntab#),
                (select value(c) from ku$_simple_col_view c
                 where c.obj_num = nt.obj#
                 and   c.intcol_num = nt.intcol#),
                (select t.property from tab$ t where t.obj# = nt.ntab#),
                (select ct.flags from coltype$ ct
                        where ct.obj# = nt.obj#
                        and   ct.intcol# = nt.intcol#),
                (select value(h) from ku$_hnt_view h
                 where h.obj_num = nt.ntab#),
                (select value(i) from ku$_iont_view i
                 where i.obj_num = nt.ntab#),
                (cast(multiset(select * from ku$_column_view c
                                where c.obj_num = nt.ntab#
                                order by c.col_num, c.intcol_num
                        ) as ku$_column_list_t
                        ))
          from ntab$ nt start with nt.obj#=t.obj#
                        connect by prior nt.ntab#=nt.obj#
                ) as ku$_nt_list_t
        )
  from tab$ t where bitand(t.property,4) = 4    -- has nested table columns;

CREATE OR REPLACE FORCE VIEW "KU$_OBJGRANT_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","BASE_OBJ","LONG_NAME","GRANTOR","GRANTEE","PRIVNAME","SEQUENCE","WGO","COLNAME") AS 
select '1','1',
         g.obj#, value(o),
         (select j.longdbcs from sys.javasnm$ j where j.short = o.name),
         u1.name, u2.name, p.name, g.sequence#,
         mod(NVL(g.option$,0),2),
         (select c.name from sys.col$ c where g.obj#=c.obj# and g.col#=c.col#)
  from sys.ku$_schemaobj_view o, sys.objauth$ g, sys.user$ u1, sys.user$ u2,
       sys.table_privilege_map p
  where g.obj#=o.obj_num and
        g.grantor#=u1.user# and
        g.grantee#=u2.user# and
        g.privilege#=p.privilege and
        (SYS_CONTEXT('USERENV','CURRENT_USERID')
                IN (g.grantor#, g.grantee#, o.owner_num, 0) OR
                g.grantee#=1 OR
                EXISTS ( SELECT * FROM session_roles
                        WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_OBJPKG_VIEW"("PACKAGE","SCHEMA") AS 
select distinct p.package, p.schema
  FROM  sys.exppkgobj$ p;

CREATE OR REPLACE FORCE VIEW "KU$_OIDINDEX_VIEW"("OBJ_NUM","INTCOL_NUM","NAME","FLAGS","STORAGE","TS_NAME","BLOCKSIZE","PCT_FREE","INITRANS","MAXTRANS") AS 
SELECT cc.obj#,cc.intcol#,co.name,cd.defer,
              ( select value(s)
                from ku$_storage_view s
                where i.file#  = s.file_num
                and   i.block# = s.block_num
                and   i.ts#    = s.ts_num),
              ts.name, ts.blocksize,
              i.pctfree$,i.initrans,i.maxtrans
       FROM   sys.obj$ o, sys.ccol$ cc, sys.con$ co, sys.cdef$ cd,
              sys.ind$ i, sys.ts$ ts
       WHERE  cc.con# = co.con# AND
              cc.con# = cd.con# AND
              cd.type# = 3 AND
              co.owner# = o.owner# AND
              co.name = o.name AND
              o.obj# = i.obj# AND
              i.ts# = ts.ts#;

CREATE OR REPLACE FORCE VIEW "KU$_OPANCILLARY_VIEW"("OBJ_NUM","BIND_NUM","PRIMOP_NUM","PRIMOP_OBJ","ARGS") AS 
select oa.obj#, oa.bind#, oa.primop#,
         (select value(o) from sys.ku$_schemaobj_view o
                 where o.obj_num=oa.primop#),
         cast(multiset(select * from sys.oparg$ arg
                       where arg.obj#=oa.primop# and arg.bind#=oa.primbind#
                       order by arg.position
                      ) as ku$_oparg_list_t
             )
  from sys.opancillary$ oa;

CREATE OR REPLACE FORCE VIEW "KU$_OPBINDING_VIEW"("OBJ_NUM","BIND_NUM","FUNCTIONNAME","RETURNSCHEMA","RETURNTYPE","IMPSCHEMA","IMPTYPE","PROPERTY","SPARE1","SPARE2","SPARE3","ARGS","ANCILLARIES") AS 
select ob.obj#, ob.bind#, ob.functionname, ob.returnschema,
         ob.returntype, ob.impschema, ob.imptype, ob.property,
         ob.spare1, ob.spare2, ob.spare3,
         cast(multiset(select * from sys.oparg$ oa
                       where oa.obj#=ob.obj# and oa.bind#=ob.bind#
                       order by oa.position
                      ) as ku$_oparg_list_t
             ),
         cast(multiset(select value(a) from sys.ku$_opancillary_view a
                       where ob.obj#=a.obj_num and ob.bind#=a.bind_num
                      ) as ku$_opancillary_list_t
             )
  from sys.opbinding$ ob;

CREATE OR REPLACE FORCE VIEW "KU$_OPERATOR_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","SCHEMA_OBJ","PROPERTY","BINDINGS") AS 
select '1','0',
         op.obj#, value(o), op.property,
         cast(multiset(select value(ob) from ku$_opbinding_view ob
                       where ob.obj_num=op.obj#
                       order by ob.bind_num
                      ) as ku$_opbinding_list_t
             )
  from  ku$_schemaobj_view o, sys.operator$ op
  where op.obj#=o.obj_num
        and (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
              EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_OPQTYPE_VIEW"("OBJ_NUM","INTCOL_NUM","TYPE","FLAGS","LOBCOL","OBJCOL","EXTRACOL","SCHEMAOID","ELEMNUM","SCHEMA_ELMT") AS 
select opq.obj#, opq.intcol#, opq.type, opq.flags, opq.lobcol,
         opq.objcol, opq.extracol, opq.schemaoid, opq.elemnum,
         decode(bitand(opq.flags,2),0,NULL,
           (select value (xe) from ku$_xmlschema_elmt_view xe
                where opq.schemaoid = xe.schemaoid
                  and opq.elemnum   = xe.elemnum))
  from sys.opqtype$ opq;

CREATE OR REPLACE FORCE VIEW "KU$_OUTLINE_VIEW"("VERS_MAJOR","VERS_MINOR","NAME","SQL_TEXT","TEXTLEN","SIGNATURE","HASH_VALUE","CATEGORY","VERSION","CREATOR","TIMESTAMP","FLAGS","HINTCOUNT","HINTS","NODES") AS 
select '1','0',
         ol.ol_name,
         sys.dbms_metadata_util.long2varchar(ol.textlen,
                                    'OUTLN.OL$',
                                    'SQL_TEXT',
                                    ol.rowid),
         ol.textlen, ol.signature, ol.hash_value, ol.category, ol.version,
         ol.creator, ol.timestamp, ol.flags, ol.hintcount,
         cast(multiset(select ol_name,hint#,category,hint_type,hint_text,
                              stage#,node#,table_name,table_tin,table_pos,
                              ref_id,user_table_name,cost,cardinality,
                              bytes,hint_textoff,hint_textlen,join_pred
                       from outln.ol$hints h
                       where h.ol_name = ol.ol_name order by h.stage#,h.node#
                      ) as ku$_outline_hint_list_t
             ),
         cast(multiset(select ol_name,category,node_id,parent_id,node_type,
                              node_textlen,node_textoff
                       from outln.ol$nodes n
                       where n.ol_name = ol.ol_name
                      ) as ku$_outline_node_list_t
             )
  from outln.ol$ ol, sys.user$ u
  where ol.creator=u.name
        AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (u.user#, 0) OR
              EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_OV_TABLE_VIEW"("OBJ_NUM","BOBJ_NUM","STORAGE","TS_NAME","BLOCKSIZE","PCT_FREE","PCT_USED","INITRANS","MAXTRANS","FLAGS") AS 
select t.obj#, t.bobj#,
         (select value(s) from ku$_storage_view s
          where t.file# = s.file_num
          and t.block#  = s.block_num
          and t.ts#     = s.ts_num),
         ts.name, ts.blocksize,
         t.pctfree$, t.pctused$, t.initrans, t.maxtrans, t.flags
  from  tab$ t, ts$ ts
  where bitand(t.property,512) = 512
        and t.ts# = ts.ts#;

CREATE OR REPLACE FORCE VIEW "KU$_OV_TABPART_VIEW"("OBJ_NUM","BOBJ_NUM","PART_NUM","STORAGE","TS_NAME","BLOCKSIZE","PCT_FREE","PCT_USED","INITRANS","MAXTRANS","FLAGS") AS 
select t.obj#, t.bo#, t.part#,
         (select value(s) from ku$_storage_view s
          where t.file# = s.file_num
          and t.block#  = s.block_num
          and t.ts#     = s.ts_num),
         ts.name, ts.blocksize,
         t.pctfree$, t.pctused$, t.initrans, t.maxtrans, t.flags
  from  tabpart$ t, ts$ ts
  where t.ts# = ts.ts#;

CREATE OR REPLACE FORCE VIEW "KU$_PARTITION_EST_VIEW"("COLS","ROWCNT","AVGRLN","OBJECT_SCHEMA","OBJECT_NAME","PARTITION_NAME") AS 
SELECT  NVL(t.cols,0), NVL(tp.rowcnt, 0), NVL(tp.avgrln, 0), u.name,
                ot.name, op.subname
        FROM    SYS.OBJ$ OT, SYS.OBJ$ OP, SYS.TAB$ T, SYS.TABPART$ TP,
                SYS.USER$ U
        WHERE   tp.obj# = op.obj# AND
                tp.bo# = ot.obj# AND
                ot.type#=2 AND
                t.obj# = tp.bo# AND
                ot.owner# = u.user# AND
                (UID IN (0, ot.owner#) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'));

CREATE OR REPLACE FORCE VIEW "KU$_PARTLOB_VIEW"("OBJ_NUM","INTCOL_NUM","SCHEMA_OBJ","DEFTS_NAME","DEFBLOCKSIZE","DEFCHUNK","DEFPCTVERSION","DEFFLAGS","DEFPRO","DEFINIEXTS","DEFEXTSIZE","DEFMINEXTS","DEFMAXEXTS","DEFEXTPCT","DEFLISTS","DEFGROUPS","DEFBUFPOOL","SPARE1","SPARE2","SPARE3") AS 
select l.tabobj#, l.intcol#,
        (select value(o) from ku$_schemaobj_view o
         where o.obj_num = l.lobj#),
        (select ts.name from ts$ ts where l.defts# = ts.ts#),
        (select ts.blocksize from ts$ ts where l.defts# = ts.ts#),
        l.defchunk, l.defpctver$, l.defflags, l.defpro,
        l.definiexts, l.defextsize, l.defminexts, l.defmaxexts,
        l.defextpct, l.deflists, l.defgroups, l.defbufpool,
        l.spare1, l.spare2, l.spare3
  from partlob$ l;

CREATE OR REPLACE FORCE VIEW "KU$_PARTOBJ_VIEW"("OBJ_NUM","PARTTYPE","PARTCNT","PARTKEYCOLS","FLAGS","DEFTS_NAME","DEFBLOCKSIZE","DEFPCTFREE","DEFPCTUSED","DEFPCTTHRES","DEFINITRANS","DEFMAXTRANS","DEFINIEXTS","DEFEXTSIZE","DEFMINEXTS","DEFMAXEXTS","DEFEXTPCT","DEFLISTS","DEFGROUPS","DEFLOGGING","DEFBUFPOOL","SPARE2","SPARE3","DEFINCLCOL") AS 
select po.obj#, po.parttype, po.partcnt,
         po.partkeycols,
         po.flags,
         -- hoist the next 2 queries up here because po.defts# may be null
         -- and this avoids an outer join which is slooooow
         (select ts.name from ts$ ts where po.defts# = ts.ts#),
         (select ts.blocksize from ts$ ts where po.defts# = ts.ts#),
         po.defpctfree, po.defpctused, po.defpctthres,
         po.definitrans, po.defmaxtrans, po.deftiniexts, po.defextsize,
         po.defminexts, po.defmaxexts, po.defextpct, po.deflists,
         po.defgroups, po.deflogging, po.spare1, po.spare2, po.spare3,
         po.definclcol
  from partobj$ po;

CREATE OR REPLACE FORCE VIEW "KU$_PCOLUMN_VIEW"("OBJ_NUM","COL_NUM","SEGCOL_NUM","SEGCOLLENGTH","OFFSET","NAME","ATTRNAME","TYPE_NUM","LENGTH","FIXEDSTORAGE","PRECISION_NUM","SCALE","NOT_NULL","DEFLENGTH","DEFAULT_VAL","INTCOL_NUM","PROPERTY","CHARSETID","CHARSETFORM","CON","TYPEMD","LOBMD","PLOBMD","OIDINDEX","SPARE1","SPARE2","SPARE3","SPARE4","SPARE5","SPARE6") AS 
select c.obj#, c.col#, c.segcol#,
         c.segcollength, c.offset, c.name,
         (select a.name from attrcol$ a where
                        a.obj#=c.obj# and a.intcol#=c.intcol#),
         c.type#, c.length, c.fixedstorage,
         c.precision#, c.scale, c.null$, c.deflength,
         sys.dbms_metadata_util.long2varchar(c.deflength,
                                        'SYS.COL$',
                                        'DEFAULT$',
                                        c.rowid),
         c.intcol#,
         c.property, c.charsetid, c.charsetform,
         ( select value(cv)
             from ku$_constraint0_view cv, ku$_constraint_col_view ccv
             where c.intcol# = ccv.intcol_num
             and c.obj# = ccv.obj_num
             and ccv.con_num = cv.con_num
             and cv.contype in (7,11)
         ),
         ( select value(ctv)
             from ku$_coltype_view ctv
             where c.type# in ( 121,    -- DTYADT  (user-defined type)
                                122,    -- DTYNTB  (nested table)
                                123,    -- DTYNAR  (varray)
                                111,    -- DTYIREF (REF)
                                 58)    -- DTYOPQ  (opaque type)
             and   c.obj#  = ctv.obj_num
             and   c.intcol# = ctv.intcol_num
         ),
         ( select value(lv)
             from ku$_lob_view lv
             where c.type# in ( 112,    -- CLOB
                                113,    -- BLOB
                                123)    -- DTYNAR  (varray)
             and   c.obj#  = lv.obj_num
             and   c.intcol# = lv.intcol_num
         ),
         ( select value(lv)
             from ku$_partlob_view lv
             where c.type# in ( 112,    -- CLOB
                                113,    -- BLOB
                                123)    -- DTYNAR  (varray)
             and   c.obj#  = lv.obj_num
             and   c.intcol# = lv.intcol_num
         ),
         ( select value(oi)
             from ku$_oidindex_view oi
             where bitand(c.property, 2) = 2
             and   c.obj# = oi.obj_num
             and   c.intcol# = oi.intcol_num
         ),
         c.spare1, c.spare2, c.spare3, c.spare4, c.spare5, c.spare6
  from col$ c;

CREATE OR REPLACE FORCE VIEW "KU$_PFHTABLE_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","SCHEMA_OBJ","BASE_OBJ","ANC_OBJ","STORAGE","TS_NAME","BLOCKSIZE","DATAOBJ_NUM","BOBJ_NUM","TAB_NUM","COLS","CLUCOLS","TABCLUSTER","PCT_FREE","PCT_USED","INITRANS","MAXTRANS","FLAGS","AUDIT_VAL","ROWCNT","BLKCNT","EMPCNT","AVGSPC","CHNCNT","AVGRLN","AVGSPC_FLB","FLBCNT","ANALYZETIME","SAMPLESIZE","DEGREE","INSTANCES","INTCOLS","KERNELCOLS","PROPERTY","XMLSCHEMACOLS","TRIGFLAG","SPARE1","SPARE2","SPARE3","SPARE4","SPARE5","SPARE6","COL_LIST","NT","CON0_LIST","CON1_LIST","CON2_LIST","PKREF_LIST","PART_OBJ","EXTTAB") AS 
select '2','0',
         t.obj#,
         value(o),
         -- if this is a secondary table, get base obj and ancestor obj
         decode(bitand(o.flags, 16), 16,
           (select value(oo) from ku$_schemaobj_view oo, secobj$ s
              where o.obj_num=s.secobj#
                and oo.obj_num=s.obj#),
           null),
         decode(bitand(o.flags, 16), 16,
           (select value(oo) from ku$_schemaobj_view oo, ind$ i, secobj$ s
              where o.obj_num=s.secobj#
                and i.obj#=s.obj#
                and oo.obj_num=i.bo#),
           null),
         (select value(s) from ku$_storage_view s
          where t.file# = s.file_num
          and t.block#  = s.block_num
          and t.ts#     = s.ts_num),
         ts.name, ts.blocksize,
         t.dataobj#, t.bobj#, t.tab#, t.cols,
         t.clucols,
         (select value(cl) from ku$_tabcluster_view cl
          where cl.obj_num = t.obj#),
         t.pctfree$, t.pctused$, t.initrans, t.maxtrans, t.flags,
         t.audit$, t.rowcnt, t.blkcnt, t.empcnt, t.avgspc, t.chncnt, t.avgrln,
         t.avgspc_flb, t.flbcnt, t.analyzetime, t.samplesize, t.degree,
         t.instances, t.intcols, t.kernelcols, t.property,
         decode((select 1 from dual where
                 (exists (select q.obj# from sys.opqtype$ q
                          where q.obj#=t.obj#
                          and q.type=1                        /* xmltype col */
                          and bitand(q.flags,2)=2))),          /* xml schema */
                1,'Y','N'),
         t.trigflag,
         t.spare1, t.spare2, t.spare3, t.spare4, t.spare5, t.spare6,
         cast( multiset(select * from ku$_pcolumn_view c
                        where c.obj_num = t.obj#
                        order by c.col_num, c.intcol_num
                        ) as ku$_pcolumn_list_t
              ),
         (select value(nt) from ku$_nt_parent_view nt
          where nt.obj_num = t.obj#),
         cast( multiset(select * from ku$_constraint0_view con
                        where con.obj_num = t.obj#
                        and con.contype not in (7,11)
                       ) as ku$_constraint0_list_t
             ),
         cast( multiset(select * from ku$_constraint1_view con
                        where con.obj_num = t.obj#
                       ) as ku$_constraint1_list_t
             ),
         cast( multiset(select * from ku$_constraint2_view con
                        where con.obj_num = t.obj#
                       ) as ku$_constraint2_list_t
             ),
         cast( multiset(select * from ku$_pkref_constraint_view con
                        where con.obj_num = t.obj#
                       ) as ku$_pkref_constraint_list_t
             ),
         (select value(po) from ku$_tab_partobj_view po
          where t.obj# = po.obj_num),
         (select value(etv) from ku$_exttab_view etv
                        where etv.obj_num = o.obj_num)
  from ku$_schemaobj_view o, tab$ t, ts$ ts
  where t.obj# = o.obj_num
        AND t.ts# = ts.ts#
        AND bitand(t.property, 32+64+128+256+512) = 32
                                                /* partitioned (32)       */
                                                /* but not IOT            */
        AND bitand(t.property,1607983103)     -- mask off bits 0x20282000
             not in (32,32+8192)  /* Mutually exclusive of ku$_phtable_view */
        AND     (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num,0) OR
                EXISTS ( SELECT * FROM session_roles
                        WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_PHTABLE_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","SCHEMA_OBJ","BASE_OBJ","ANC_OBJ","STORAGE","TS_NAME","BLOCKSIZE","DATAOBJ_NUM","BOBJ_NUM","TAB_NUM","COLS","CLUCOLS","TABCLUSTER","PCT_FREE","PCT_USED","INITRANS","MAXTRANS","FLAGS","AUDIT_VAL","ROWCNT","BLKCNT","EMPCNT","AVGSPC","CHNCNT","AVGRLN","AVGSPC_FLB","FLBCNT","ANALYZETIME","SAMPLESIZE","DEGREE","INSTANCES","INTCOLS","KERNELCOLS","PROPERTY","XMLSCHEMACOLS","TRIGFLAG","SPARE1","SPARE2","SPARE3","SPARE4","SPARE5","SPARE6","COL_LIST","CON0_LIST","CON1_LIST","CON2_LIST","PART_OBJ","EXTTAB") AS 
select '1','0',
         t.obj#,
         value(o),
         -- if this is a secondary table, get base obj and ancestor obj
         decode(bitand(o.flags, 16), 16,
           (select value(oo) from ku$_schemaobj_view oo, secobj$ s
              where o.obj_num=s.secobj#
                and oo.obj_num=s.obj#),
           null),
         decode(bitand(o.flags, 16), 16,
           (select value(oo) from ku$_schemaobj_view oo, ind$ i, secobj$ s
              where o.obj_num=s.secobj#
                and i.obj#=s.obj#
                and oo.obj_num=i.bo#),
           null),
         (select value(s) from ku$_storage_view s
          where t.file# = s.file_num
          and t.block#  = s.block_num
          and t.ts#     = s.ts_num),
         ts.name, ts.blocksize,
         t.dataobj#, t.bobj#, t.tab#, t.cols,
         t.clucols,
         (select value(cl) from ku$_tabcluster_view cl
          where cl.obj_num = t.obj#),
         t.pctfree$, t.pctused$, t.initrans, t.maxtrans, t.flags,
         t.audit$, t.rowcnt, t.blkcnt, t.empcnt, t.avgspc, t.chncnt, t.avgrln,
         t.avgspc_flb, t.flbcnt, t.analyzetime, t.samplesize, t.degree,
         t.instances, t.intcols, t.kernelcols, t.property, 'N', t.trigflag,
         t.spare1, t.spare2, t.spare3, t.spare4, t.spare5, t.spare6,
         cast( multiset(select * from ku$_prim_column_view c
                        where c.obj_num = t.obj#
                        order by c.col_num, c.intcol_num
                        ) as ku$_prim_column_list_t
              ),
         cast( multiset(select * from ku$_constraint0_view con
                        where con.obj_num = t.obj#
                        and con.contype not in (7,11)
                       ) as ku$_constraint0_list_t
             ),
         cast( multiset(select * from ku$_constraint1_view con
                        where con.obj_num = t.obj#
                       ) as ku$_constraint1_list_t
             ),
         cast( multiset(select * from ku$_constraint2_view con
                        where con.obj_num = t.obj#
                       ) as ku$_constraint2_list_t
             ),
         (select value(po) from ku$_tab_partobj_view po
          where t.obj# = po.obj_num),
         (select value(etv) from ku$_exttab_view etv
                        where etv.obj_num = o.obj_num)
  from  ku$_schemaobj_view o, tab$ t, ts$ ts
  where t.obj# = o.obj_num
        AND bitand(t.property,1607983103)     -- mask off bits 0x20282000
                in (32,32+8192)         /* simple, partitioned tables */
                                        /* no CLOBs, UDTs, nested cols*/
                                        /* (but can be nested table) */
        AND t.ts# = ts.ts#
        AND     (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num,0) OR
                EXISTS ( SELECT * FROM session_roles
                        WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_PIND_STATS_VIEW"("OBJ_NUM","SCHEMA_OBJ","BOBJ_NUM","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","BLEVEL","IND_FLAGS","OBJ_FLAGS","SUBPARTITION_LIST") AS 
select  i.obj#,
          (select value(sov) from sys.ku$_schemaobj_view sov
           where sov.obj_num = i.obj#),
          i.bo#, i.rowcnt, i.leafcnt, i.distkey, i.lblkkey, i.dblkkey,
          i.clufac, i.blevel,
          decode(bitand(i.flags, 24), 24, 3, 16, 2, 8, 1, 0),
          o.flags, NULL
  from    sys.obj$ o, sys.indpart$ i
  where   i.obj# = o.obj# and
          bitand(i.flags,2) = 2                         /* index is analyzed */
UNION ALL
  select  i.obj#,
          (select value(sov) from sys.ku$_schemaobj_view sov
           where sov.obj_num = i.obj#),
          i.bo#, i.rowcnt, i.leafcnt, i.distkey, i.lblkkey, i.dblkkey,
          i.clufac, i.blevel,
          decode(bitand(i.flags, 24), 24, 3, 16, 2, 8, 1, 0),
          o.flags,
          cast(multiset(select value(sisv)
                        from   sys.ku$_spind_stats_view sisv
                        where  sisv.bobj_num = o.obj#)
                        as ku$_spind_stats_list_t)
  from    sys.obj$ o, sys.indcompart$ i
  where   i.obj# = o.obj# and
          bitand(i.flags,2) = 2                         /* index is analyzed */;

CREATE OR REPLACE FORCE VIEW "KU$_PIOTABLE_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","SCHEMA_OBJ","BASE_OBJ","ANC_OBJ","STORAGE","TS_NAME","BLOCKSIZE","DATAOBJ_NUM","BOBJ_NUM","TAB_NUM","COLS","CLUCOLS","PCT_FREE","INITRANS","MAXTRANS","PCT_THRESH","NUMKEYCOLS","FLAGS","AUDIT_VAL","ROWCNT","BLKCNT","EMPCNT","AVGSPC","CHNCNT","AVGRLN","AVGSPC_FLB","FLBCNT","ANALYZETIME","SAMPLESIZE","DEGREE","INSTANCES","INTCOLS","KERNELCOLS","PROPERTY","XMLSCHEMACOLS","TRIGFLAG","SPARE1","SPARE2","SPARE3","SPARE4","SPARE5","SPARE6","INCLCOL_NAME","COL_LIST","NT","CON0_LIST","CON1_LIST","CON2_LIST","PKREF_LIST","IOV","PART_OBJ","EXTTAB") AS 
select '2','0',
         t.obj#,
         value(o),
         -- if this is a secondary table, get base obj and ancestor obj
         decode(bitand(o.flags, 16), 16,
           (select value(oo) from ku$_schemaobj_view oo, secobj$ s
              where o.obj_num=s.secobj#
                and oo.obj_num=s.obj#),
           null),
         decode(bitand(o.flags, 16), 16,
           (select value(oo) from ku$_schemaobj_view oo, ind$ i, secobj$ s
              where o.obj_num=s.secobj#
                and i.obj#=s.obj#
                and oo.obj_num=i.bo#),
           null),
         (select value(s) from ku$_storage_view s
          where i.file# = s.file_num
          and i.block#  = s.block_num
          and i.ts#     = s.ts_num),
         ts.name, ts.blocksize,
         i.dataobj#, t.bobj#, t.tab#, t.cols,
         t.clucols, i.pctfree$, i.initrans, i.maxtrans,
         mod(i.pctthres$,256), i.spare2, t.flags,
         t.audit$, t.rowcnt, t.blkcnt, t.empcnt, t.avgspc, t.chncnt, t.avgrln,
         t.avgspc_flb, t.flbcnt, t.analyzetime, t.samplesize, t.degree,
         t.instances, t.intcols, t.kernelcols, t.property, 'N', t.trigflag,
         t.spare1, t.spare2, t.spare3, t.spare4, t.spare5, t.spare6,
         (select c.name from col$ c
                 where c.obj# = t.obj#
                 and   c.col# = i.trunccnt and i.trunccnt != 0
                 and   bitand(c.property,1)=0),
         cast( multiset(select * from ku$_pcolumn_view c
                        where c.obj_num = t.obj#
                        order by c.col_num, c.intcol_num
                        ) as ku$_pcolumn_list_t
              ),
         (select value(nt) from ku$_nt_parent_view nt
          where nt.obj_num = t.obj#),
         cast( multiset(select * from ku$_constraint0_view con
                        where con.obj_num = t.obj#
                        and con.contype not in (7,11)
                       ) as ku$_constraint0_list_t
             ),
         cast( multiset(select * from ku$_constraint1_view con
                        where con.obj_num = t.obj#
                       ) as ku$_constraint1_list_t
             ),
         cast( multiset(select * from ku$_constraint2_view con
                        where con.obj_num = t.obj#
                       ) as ku$_constraint2_list_t
             ),
         cast( multiset(select * from ku$_pkref_constraint_view con
                        where con.obj_num = t.obj#
                       ) as ku$_pkref_constraint_list_t
             ),
         (select value(ov) from ku$_ov_table_view ov
          where ov.bobj_num = t.obj#),
         (select value (po) from ku$_iot_partobj_view po
          where t.obj# = po.obj_num),
         (select value(etv) from ku$_exttab_view etv
                        where etv.obj_num = o.obj_num)
  from ku$_schemaobj_view o, tab$ t, ind$ i, ts$ ts
  where t.obj# = o.obj_num
        and t.pctused$ = i.obj#          -- For IOTs, pctused has index obj#
        and bitand(t.property, 32+64+512)  = 32+64  -- PIOT but not overflow
        and  i.ts# = ts.ts#
        AND     (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num,0) OR
                EXISTS ( SELECT * FROM session_roles
                        WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_PIOTLOBFRAG_VIEW"("OBJ_NUM","PARENT_OBJ_NUM","PART_OBJ_NUM","BASE_OBJ_NUM","INTCOL_NUM","PART_NUM","SCHEMA_OBJ","STORAGE","TS_NAME","BLOCKSIZE","IND_NUM","LOBINDEX","CHUNK","PCTVERSION","FLAGS","PROPERTY","SPARE1","SPARE2","SPARE3") AS 
select lf.fragobj#, lf.parentobj#, pl.tabobj#,
        l.obj#, l.intcol#, lf.frag#,
        (select value(o) from ku$_schemaobj_view o
         where o.obj_num = lf.fragobj#),
        (select value(s) from ku$_storage_view s
         where s.file_num  = lf.file#
         and   s.block_num = lf.block#
         and   s.ts_num    = lf.ts#),
        (select ts.name from ts$ ts where lf.ts# = ts.ts#),
        (select ts.blocksize from ts$ ts where lf.ts# = ts.ts#),
        lf.indfragobj#,
        (select value(i) from ku$_lobfragindex_view i
                 where i.obj_num=lf.indfragobj#),
        lf.chunk, lf.pctversion$, lf.fragflags, lf.fragpro,
        lf.spare1, lf.spare2, lf.spare3
  from  lob$ l, partlob$ pl, lobfrag$ lf
        where l.lobj#=lf.parentobj# and pl.lobj#=lf.parentobj#;

CREATE OR REPLACE FORCE VIEW "KU$_PIOT_PART_VIEW"("OBJ_NUM","SCHEMA_OBJ","TS_NAME","BLOCKSIZE","STORAGE","DATAOBJ_NUM","BASE_OBJ_NUM","PART_NUM","HIBOUNDLEN","HIBOUNDVAL","LOBS","FLAGS","PCT_FREE","PCT_THRES","INITRANS","MAXTRANS","ANALYZETIME","SAMPLESIZE","ROWCNT","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","SPARE1","SPARE2","SPARE3","INCLCOL") AS 
select ip.obj#,
         (select value(so) from ku$_schemaobj_view so
          where so.obj_num = ip.obj#),
         ts.name, ts.blocksize, value(s), ip.dataobj#, ip.bo#,
         ip.part#, ip.hiboundlen,
         sys.dbms_metadata_util.long2varchar(ip.hiboundlen,
                                    'SYS.INDPART$',
                                    'HIBOUNDVAL',
                                     ip.rowid),
         cast(multiset(select lf.* from ind$ i, ku$_piotlobfrag_view lf
                        where lf.part_num=ip.part#
                          and ip.bo#=i.obj# and i.bo#=lf.base_obj_num
                        order by lf.intcol_num
                      ) as ku$_lobfrag_list_t
             ),
         ip.flags, ip.pctfree$, ip.pctthres$,
         ip.initrans, ip.maxtrans, ip.analyzetime, ip.samplesize,
         ip.rowcnt, ip.blevel, ip.leafcnt, ip.distkey, ip.lblkkey,
         ip.dblkkey, ip.clufac, ip.spare1, ip.spare2, ip.spare3,
         ip.inclcol
  from  ku$_storage_view s, indpart$ ip, ts$ ts
  where ip.ts# = s.ts_num
        AND ip.file# = s.file_num
        AND ip.block# = s.block_num
        AND ip.ts# = ts.ts#;

CREATE OR REPLACE FORCE VIEW "KU$_PKGBDY_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","TYPE_NUM","SCHEMA_OBJ","SOURCE_LINES") AS 
select t.vers_major, t.vers_minor, t.obj_num, t.type_num,
         t.schema_obj, t.source_lines
  from ku$_base_proc_view t
  where t.type_num = 11;

CREATE OR REPLACE FORCE VIEW "KU$_PKG_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","TYPE_NUM","SCHEMA_OBJ","SOURCE_LINES") AS 
select t.vers_major, t.vers_minor, t.obj_num, t.type_num,
         t.schema_obj, t.source_lines
  from ku$_base_proc_view t
  where t.type_num = 9;

CREATE OR REPLACE FORCE VIEW "KU$_PKREF_CONSTRAINT_VIEW"("OBJ_NUM","COL_NUM","INTCOL_NUM","REFTYP","PROPERTY","NAME","ATTRNAME","SCHEMA_OBJ","FOREIGNKEY","PK_COL_LIST") AS 
select rf.obj#, rf.col#, rf.intcol#, rf.reftyp, c.property, c.name,
        (select a.name from attrcol$ a
                 where a.obj#=rf.obj# and a.intcol#=rf.intcol#),
        (select value(o) from ku$_schemaobj_view o, obj$ oo
                 where rf.stabid = oo.oid$
                    and oo.obj#  = o.obj_num),
        nvl((select 1
             from coltype$ fct, ccol$ fcc, cdef$ fcd
             where fct.obj# = rf.obj# and
                   fct.intcol# = rf.intcol# and
                   fcc.obj# = rf.obj# and
                   fcc.intcol# =
                     UTL_RAW.CAST_TO_BINARY_INTEGER(
                       SUBSTRB(fct.intcol#s, 1, 2), 3) and
                   fcd.con# = fcc.con# and
                   fcd.type# = 4), 0),
        decode(bitand(rf.reftyp,4),
                       4, cast(multiset
                                (select rc.*
                                 from   ku$_simple_col_view rc, ccol$ rcc
                                 where  rcc.con# =
                                            (select con#
                                             from   obj$ ro, cdef$ rcd
                                             where  ro.oid$ = rf.stabid and
                                                    rcd.obj# = ro.obj# and
                                                    rcd.type# = 2)       and
                                          rc.obj_num = rcc.obj# and
                                          rc.intcol_num = rcc.intcol#
                                  order by rcc.pos#
                                ) as ku$_simple_col_list_t),
                       null)
 from refcon$ rf, col$ c
 where c.obj#=rf.obj# and c.intcol#=rf.intcol#;

CREATE OR REPLACE FORCE VIEW "KU$_PLUGTS_BEGIN_VIEW"("VERS_MAJOR","VERS_MINOR","USER_NAME","OBJ_NUM","BASE_OBJ","PACKAGE","PKG_SCHEMA","LEVEL_NUM","CLASS","PREPOST","TS_NAME","INCL_CONST","INCL_TRIG","INCL_GRANT","TTS_FULL_CHK") AS 
select '1','0',
  null, null, null,
  'DBMS_PLUGTS','SYS',
  0,
  100,
  0,
  null, null, null, null, null
  FROM dual
  where (SYS_CONTEXT('USERENV','CURRENT_USERID')=0
                 OR EXISTS ( SELECT * FROM session_roles
                    WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_PLUGTS_BLK_VIEW"("VERS_MAJOR","VERS_MINOR","PREPOST","PLSQL") AS 
select '1','0',
  oo.obj#-1,
  (select sys.dbms_metadata.get_plugts_blk(oo.obj# -1) from dual)
  from obj$ oo
  where oo.obj# in (1,2)
    and (SYS_CONTEXT('USERENV','CURRENT_USERID')=0
                 OR EXISTS ( SELECT * FROM session_roles
                    WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_PLUGTS_CHECKPL_VIEW"("VERS_MAJOR","VERS_MINOR","USER_NAME","OBJ_NUM","BASE_OBJ","PACKAGE","PKG_SCHEMA","LEVEL_NUM","CLASS","PREPOST","TS_NAME","INCL_CONST","INCL_TRIG","INCL_GRANT","TTS_FULL_CHK") AS 
select '1','0',
  null, null, null,
  'DBMS_PLUGTS','SYS',
  0,
  102,
  0,
  null,
  o1.obj#-1, o2.obj#-1, o3.obj#-1, o4.obj#-1
  from obj$ o1, obj$ o2, obj$ o3, obj$ o4
  where o1.obj# in (1,2)
    and o2.obj# in (1,2)
    and o3.obj# in (1,2)
    and o4.obj# in (1,2)
    and (SYS_CONTEXT('USERENV','CURRENT_USERID')=0
                 OR EXISTS ( SELECT * FROM session_roles
                    WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_PLUGTS_TSNAME_VIEW"("VERS_MAJOR","VERS_MINOR","USER_NAME","OBJ_NUM","BASE_OBJ","PACKAGE","PKG_SCHEMA","LEVEL_NUM","CLASS","PREPOST","TS_NAME","INCL_CONST","INCL_TRIG","INCL_GRANT","TTS_FULL_CHK") AS 
select '1','0',
  null, null, null,
  'DBMS_PLUGTS','SYS',
  0,
  101,
  0,
  ts.name,
  null, null, null, null
  FROM sys.ts$ ts
  where (SYS_CONTEXT('USERENV','CURRENT_USERID')=0
                 OR EXISTS ( SELECT * FROM session_roles
                    WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_POST_TABLE_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","BASE_OBJ","ACTION_STR") AS 
select '1','0',
          o.obj_num,
          value(o),
          sys.dbms_metadata.get_prepost_table_act
                (e.prepost, o.owner_name, o.name)
  from  sys.ku$_schemaobj_view o,
        sys.tab$ t,
        ku$_expact_view e
  where o.obj_num = t.obj#
    and e.prepost=2
    and e.owner=o.owner_name and e.name=o.name;

CREATE OR REPLACE FORCE VIEW "KU$_PRE_TABLE_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","BASE_OBJ","ACTION_STR") AS 
select '1','0',
          o.obj_num,
          value(o),
          sys.dbms_metadata.get_prepost_table_act
                (e.prepost, o.owner_name, o.name)
  from  sys.ku$_schemaobj_view o,
        sys.tab$ t,
        ku$_expact_view e
  where o.obj_num = t.obj#
    and e.prepost=1
    and e.owner=o.owner_name and e.name=o.name;

CREATE OR REPLACE FORCE VIEW "KU$_PRIM_COLUMN_VIEW"("OBJ_NUM","COL_NUM","INTCOL_NUM","SEGCOL_NUM","PROPERTY","NAME","TYPE_NUM","LENGTH","PRECISION_NUM","SCALE","NOT_NULL","DEFLENGTH","DEFAULT_VAL","CHARSETID","CHARSETFORM","CON","SPARE1","SPARE2","SPARE3","SPARE4","SPARE5","SPARE6") AS 
select c.obj#, c.col#, c.intcol#, c.segcol#, c.property,
         c.name, c.type#, c.length,
         c.precision#, c.scale, c.null$, c.deflength,
         sys.dbms_metadata_util.long2varchar(c.deflength,
                                        'SYS.COL$',
                                        'DEFAULT$',
                                        c.rowid),
         c.charsetid, c.charsetform,
         ( select value(cv)
             from ku$_constraint_col_view ccv, ku$_constraint0_view cv
             where c.intcol# = ccv.intcol_num
             and c.obj# = ccv.obj_num
             and ccv.con_num = cv.con_num
             and cv.contype in (7,11)
         ),
         c.spare1, c.spare2, c.spare3, c.spare4, c.spare5, c.spare6
  from col$ c;

CREATE OR REPLACE FORCE VIEW "KU$_PROCACT_INSTANCE_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","BASE_OBJ","LEVEL_NUM","PACKAGE","PKG_SCHEMA","CLASS","PREPOST","PLSQL") AS 
select '1','0',
     d.obj#,
     value(o),
     p.level#, p.package, p.schema, p.class, oo.obj#-1,
     case
       when p.class =3
       then
       sys.dbms_metadata.get_action_instance
            (p.package, p.schema, 'instance_info_exp',
             o.name, o.owner_name, 0, 0, (oo.obj# -1),
             (select 1 from dual
                where  (SYS_CONTEXT('USERENV','CURRENT_USERID') = 0
                OR EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ))))
       when p.class =4
       then
         sys.dbms_metadata.get_action_instance
            (p.package, p.schema, 'instance_extended_info_exp',
             o.name, o.owner_name, o.namespace, o.type_num, (oo.obj# -1),
             (select 1 from dual
                where  (SYS_CONTEXT('USERENV','CURRENT_USERID') = 0
                OR EXISTS ( SELECT * FROM session_roles
                      WHERE role='SELECT_CATALOG_ROLE' ))))
       else null
       end
   FROM  sys.ku$_schemaobj_view o,
         sys.exppkgact$ p,
         sys.expdepact$ d,
         sys.obj$ oo
   WHERE d.obj# = o.obj_num AND d.package = p.package
         and d.schema = p.schema and ((p.class = 3) OR (p.class = 4))
         and oo.obj# in (1,2)
         and p.package !='DBMS_RULE_EXP_RULES'
         and (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0)
                 OR EXISTS ( SELECT * FROM session_roles
                    WHERE role='SELECT_CATALOG_ROLE' ))
   ORDER   by p.level#;

CREATE OR REPLACE FORCE VIEW "KU$_PROCACT_SCHEMA_VIEW"("VERS_MAJOR","VERS_MINOR","USER_NAME","PACKAGE","SCHEMA","LEVEL_NUM","CLASS","PREPOST","PLSQL") AS 
select '1','0',
  u.name,
  p.package, p.schema,
  p.level#, p.class, oo.obj#-1,
  case
   when p.class=2 then
    sys.dbms_metadata.get_action_schema
        ( p.package, p.schema,'schema_info_exp',u.name,
        oo.obj#-1,
        (select 1 from dual where  (SYS_CONTEXT('USERENV','CURRENT_USERID') = 0
                OR EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ))))
   else null
  end
  FROM   sys.user$ u, sys.exppkgact$ p, sys.obj$ oo
  where p.class=2 and oo.obj# in (1,2) and u.type# = 1
  and p.package !='DBMS_RULE_EXP_RULES' -- current is a problem, need to remove
                                        -- once the problem is fixed
         AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (u.user#, 0)  OR
              EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ))
  order by p.level#;

CREATE OR REPLACE FORCE VIEW "KU$_PROCACT_SYS_VIEW"("VERS_MAJOR","VERS_MINOR","PACKAGE","SCHEMA","LEVEL_NUM","CLASS","PREPOST","PLSQL") AS 
select '1','0',
  p.package, p.schema,
  p.level#, p.class, oo.obj#-1,
  case
   when p.class=1 then sys.dbms_metadata.get_action_sys
        ( p.package, p.schema,'system_info_exp', oo.obj#-1)
   else null
  end
  FROM  sys.exppkgact$ p , sys.obj$ oo
  where p.class =1 and oo.obj# in (1,2)
  order by p.level#;

CREATE OR REPLACE FORCE VIEW "KU$_PROCDEPOBJ_AUDIT_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","BASE_OBJ","CLASS","PREPOST","TYPE_NUM","LEVEL_NUM","PACKAGE","PKG_SCHEMA","ANC_OBJ","PLSQL") AS 
select '1','0',
         o.obj_num,
         value(o),
         p.class, p.prepost, p.type#, p.level#, p.package, p.schema,
         value(oo),
         sys.dbms_metadata.get_procobj
          ( p.package, p.schema,'audit_exp', o.obj_num,
            (select 1 from dual
                where  (SYS_CONTEXT('USERENV','CURRENT_USERID') = 0
                OR EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ))))
  from   sys.ku$_schemaobj_view o, sys.ku$_schemaobj_view oo,
         sys.exppkgobj$ p, sys.expdepobj$ d
  where  p.class = 3 and p.type# = o.type_num and
                d.d_obj# = o.obj_num AND
                d.p_obj# = oo.obj_num
         AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
              EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ))
  order by p.level#, p.type#;

CREATE OR REPLACE FORCE VIEW "KU$_PROCDEPOBJ_GRANT_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","BASE_OBJ","CLASS","PREPOST","TYPE_NUM","LEVEL_NUM","PACKAGE","PKG_SCHEMA","ANC_OBJ","PLSQL") AS 
select '1','0',
         o.obj_num,
         value(o),
         p.class, p.prepost, p.type#, p.level#, p.package, p.schema,
         value(oo),
         sys.dbms_metadata.get_procobj_grant
               ( p.package, p.schema,'grant_exp', o.obj_num,
                (select 1 from dual
                 where  (SYS_CONTEXT('USERENV','CURRENT_USERID') = 0
                 OR EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ))))
  from   sys.ku$_schemaobj_view o, sys.ku$_schemaobj_view oo,
         sys.exppkgobj$ p, sys.expdepobj$ d
  where  p.class = 3 and p.type# = o.type_num and
                d.d_obj# = o.obj_num AND
                d.p_obj# = oo.obj_num
         AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
              EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ))
  order  by p.level#, p.type#;

CREATE OR REPLACE FORCE VIEW "KU$_PROCDEPOBJ_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","SCHEMA_OBJ","CLASS","PREPOST","TYPE_NUM","LEVEL_NUM","PACKAGE","PKG_SCHEMA","BASE_OBJ_NUM","BASE_OBJ","PLSQL") AS 
select '1','0',
         o.obj_num,
         value(o),
         p.class, p.prepost, p.type#, p.level#, p.package, p.schema,
         oo.obj_num,
         value(oo),
         sys.dbms_metadata.get_procobj
                ( p.package, p.schema,'create_exp', o.obj_num,
                  (select 1 from dual
                   where  (SYS_CONTEXT('USERENV','CURRENT_USERID') = 0
                   OR EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ))))
  from   sys.ku$_schemaobj_view o, sys.ku$_schemaobj_view oo,
         sys.exppkgobj$ p, sys.expdepobj$ d
  where  p.class = 3 and p.type# = o.type_num and
                d.d_obj# = o.obj_num AND
                d.p_obj# = oo.obj_num
         AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
              EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ))
  order  by p.level#, p.type#;

CREATE OR REPLACE FORCE VIEW "KU$_PROCOBJ_AUDIT_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","BASE_OBJ","CLASS","PREPOST","TYPE_NUM","LEVEL_NUM","PACKAGE","PKG_SCHEMA","PLSQL") AS 
select '1','0',
         o.obj#,
         (select value(o1) from sys.ku$_schemaobj_view o1
          where o1.obj_num=o.obj#),
         (select p.class from sys.exppkgobj$ p where p.type#=o.type#
               and (p.class=1 or p.class=2)),
         (select p.prepost from sys.exppkgobj$ p where p.type#=o.type#
               and (p.class=1 or p.class=2)),
         o.type#,
         (select p.level# from sys.exppkgobj$ p where p.type#=o.type#
               and (p.class=1 or p.class=2)),
         (select p.package from sys.exppkgobj$ p where p.type#=o.type#
               and (p.class=1 or p.class=2)),
         (select p.schema from sys.exppkgobj$ p where p.type#=o.type#
               and (p.class=1 or p.class=2)),
         (select sys.dbms_metadata.get_procobj
                (p.package, p.schema,'audit_exp', o.obj#,
                  (select 1 from dual
                   where  (SYS_CONTEXT('USERENV','CURRENT_USERID') = 0
                   OR EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ))))
                from sys.exppkgobj$ p where p.type#=o.type#
                   and (p.class=1 or p.class=2))
  from   obj$ o
  where  (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner#, 0) OR
              EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_PROCOBJ_GRANT_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","BASE_OBJ","CLASS","PREPOST","TYPE_NUM","LEVEL_NUM","PACKAGE","PKG_SCHEMA","PLSQL") AS 
select '1','0',
         o.obj#,
         (select value(o1) from sys.ku$_schemaobj_view o1
          where o1.obj_num=o.obj#),
         (select p.class from sys.exppkgobj$ p where p.type#=o.type#
               and (p.class=1 or p.class=2)),
         (select p.prepost from sys.exppkgobj$ p where p.type#=o.type#
               and (p.class=1 or p.class=2)),
         o.type#,
         (select p.level# from sys.exppkgobj$ p where p.type#=o.type#
               and (p.class=1 or p.class=2)),
         (select p.package from sys.exppkgobj$ p where p.type#=o.type#
               and (p.class=1 or p.class=2)),
         (select p.schema from sys.exppkgobj$ p where p.type#=o.type#
               and (p.class=1 or p.class=2)),
         (select sys.dbms_metadata.get_procobj_grant
                ( p.package, p.schema,'grant_exp', o.obj#,
                  (select 1 from dual
                   where  (SYS_CONTEXT('USERENV','CURRENT_USERID') = 0
                   OR EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ))))
                from sys.exppkgobj$ p where p.type#=o.type#
                   and (p.class=1 or p.class=2))
  from   obj$ o
  where  (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner#, 0) OR
              EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_PROCOBJ_OBJNUM_VIEW"("OBJ_NUM","DATAOBJ_NUM","OWNER_NUM","OWNER_NAME","NAME","NAMESPACE","SUBNAME","TYPE_NUM","TYPE_NAME","CTIME","MTIME","STIME","STATUS","REMOTEOWNER","LINKNAME","FLAGS","OID","SPARE1","SPARE2","SPARE3","SPARE4","SPARE5","SPARE6") AS 
select value(o) from ku$_schemaobj_view o
  where o.type_num in (select p.type# from sys.exppkgobj$ p)
  and (o.owner_name NOT IN ('ORDSYS', 'MDSYS', 'CTXSYS', 'ORDPLUGINS',
                            'LBACSYS', 'XDB', 'SI_INFORMTN_SCHEMA'))
  and bitand(o.flags,16)!=16          /* not secondary object */
 and    (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0)
        OR EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_PROCOBJ_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","SCHEMA_OBJ","CLASS","PREPOST","TYPE_NUM","LEVEL_NUM","PACKAGE","PKG_SCHEMA","PLSQL") AS 
select '1','0',
         o.obj_num,
         value(o),
         (select p.class from sys.exppkgobj$ p where p.type#=o.type_num
               and (p.class=1 or p.class=2)),
         (select p.prepost from sys.exppkgobj$ p where p.type#=o.type_num
               and (p.class=1 or p.class=2)),
         o.type_num,
         (select p.level# from sys.exppkgobj$ p where p.type#=o.type_num
               and (p.class=1 or p.class=2)),
         (select p.package from sys.exppkgobj$ p where p.type#=o.type_num
               and (p.class=1 or p.class=2)),
         (select p.schema from sys.exppkgobj$ p where p.type#=o.type_num
               and (p.class=1 or p.class=2)),
         (select sys.dbms_metadata.get_procobj
                ( p.package, p.schema,'create_exp', o.obj_num,
                  (select 1 from dual
                   where  (SYS_CONTEXT('USERENV','CURRENT_USERID') = 0
                   OR EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ))))
                from sys.exppkgobj$ p where p.type#=o.type_num
                   and (p.class=1 or p.class=2))
  from   sys.ku$_schemaobj_view o
  where  (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
              EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_PROC_AUDIT_VIEW"("VERS_MAJOR","VERS_MINOR","PACKAGE","SCHEMA","PLSQL") AS 
select '1','0',
        p.package, p.schema,
        sys.dbms_metadata.get_sysprivs
                ( p.package, p.schema,'audit_sysprivs_exp')
  from  sys.ku$_objpkg_view p;

CREATE OR REPLACE FORCE VIEW "KU$_PROC_GRANT_VIEW"("VERS_MAJOR","VERS_MINOR","PACKAGE","SCHEMA","PLSQL") AS 
select '1','0',
         p.package, p.schema,
         sys.dbms_metadata.get_sysprivs
                (p.package, p.schema,'grant_sysprivs_exp')
  from  sys.ku$_objpkg_view p;

CREATE OR REPLACE FORCE VIEW "KU$_PROC_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","TYPE_NUM","SCHEMA_OBJ","SOURCE_LINES") AS 
select t.vers_major, t.vers_minor, t.obj_num, t.type_num,
         t.schema_obj, t.source_lines
  from ku$_base_proc_view t
  where t.type_num = 7;

CREATE OR REPLACE FORCE VIEW "KU$_PROFILE_ATTR_VIEW"("PROFILE_ID","RESOURCE_NUM","RESNAME","TYPE_NUM","LIMIT_NUM") AS 
select  p.profile#,
          p.resource#,
          r.name,
          p.type#,
          p.limit#
  from sys.resource_map r, sys.profile$ p
  where p.resource# = r.resource# and p.type# = r.type#  and
        p.profile# !=0;

CREATE OR REPLACE FORCE VIEW "KU$_PROFILE_VIEW"("VERS_MAJOR","VERS_MINOR","PROFILE_ID","PROFILE_NAME","PASS_FUNC_NAME","PROFILE_LIST") AS 
select '1','0',
        n.profile#,
        n.name,
        (select distinct o.name
            from    sys.obj$ o, sys.ku$_profile_attr_view p
            where   o.type# = 8 AND
                    o.owner# = 0 AND
                    o.obj# = p.limit_num and
                    p.profile_id = n.profile# and
                    p.resource_num =4 and    -- res# 4, type# 1 =
                    p.type_num =1 ),         -- PASSWORD_VERIFY_FUNCTION
        cast(multiset (select * from ku$_profile_attr_view pl
            where pl.profile_id = n.profile# ) as ku$_profile_list_t
        )
  from sys.profname$ n
  where n.profile# !=0
        AND (SYS_CONTEXT('USERENV','CURRENT_USERID') = 0
        OR EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_PROXY_ROLE_LIST_VIEW"("ROLE_ID","CLIENT","PROXY","ROLE") AS 
select  prd.role#, uc.name, up.name, ur.name
  from    sys.user$ ur, sys.user$ uc,
          sys.user$ up ,sys.proxy_role_info$ prd
  where   prd.role#   = ur.user# AND
                prd.client# = uc.user# AND
                prd.proxy#  = up.user#;

CREATE OR REPLACE FORCE VIEW "KU$_PROXY_VIEW"("USER_ID","CLIENT_NAME","PROXY_NAME","FLAGS","CRED_TYPE","PROXY_ROLE_LIST") AS 
select  u.user#, u.name, up.name, pi.flags,
          pi.credential_type#,
          cast(multiset (select * from ku$_proxy_role_list_view pr
                where pr.client= u.name AND pr.proxy=up.name)
                as ku$_proxy_role_list_t)
  from   sys.user$ u, sys.user$ up, sys.proxy_info$ pi
  where  pi.client# = u.user# AND
         pi.proxy# = up.user#
         AND (SYS_CONTEXT('USERENV','CURRENT_USERID') = 0
                OR EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_PSW_HIST_LIST_VIEW"("USER_ID","UNAME","PASSWORD","PASSWORD_DATE") AS 
select  h.user#,
          u.name,
          h.password,
          h.password_date
  from    sys.user_history$ h, sys.user$ u
  where   h.user# = u.user#;

CREATE OR REPLACE FORCE VIEW "KU$_PSW_HIST_VIEW"("VERS_MAJOR","VERS_MINOR","USER_ID","NAME","HIST_LIST") AS 
select '1','0', u.user#, u.name,
         cast(multiset (select * from  ku$_psw_hist_list_view p
                where p.user_id = u.user# ) as  ku$_psw_hist_list_t
         )
  from sys.user$ u
  where exists (select 1 from sys.user_history$ h where h.user# = u.user#);

CREATE OR REPLACE FORCE VIEW "KU$_PTAB_COL_STATS_VIEW"("TAB_OBJ_NUM","P_OBJ_NUM","COLNAME","INTCOL_NUM","DISTCNT","LOWVAL","HIVAL","DENSITY","NULL_CNT","AVGCLN","CFLAGS","EAV","HIST_GRAM_LIST","HIST_GRAM_MIN","HIST_GRAM_MAX") AS 
select  c.obj#, hh.obj#, c.name, hh.intcol#, hh.distcnt, hh.lowval,
          hh.hival, hh.density, hh.null_cnt, hh.avgcln,
          bitand(hh.spare2, 3), bitand(hh.spare2, 4),
          cast(multiset(select value(hv)
                        from   sys.ku$_histgrm_view hv
                        where  hv.obj_num = hh.obj#
                           and hv.intcol_num = hh.intcol#)
                        as ku$_histgrm_list_t),
          (select value(hminv)
           from   sys.ku$_histgrm_min_view hminv
           where  hminv.obj_num = hh.obj#
              and hminv.intcol_num = hh.intcol#),
          (select value(hmaxv)
           from   sys.ku$_histgrm_max_view hmaxv
           where  hmaxv.obj_num = hh.obj#
              and hmaxv.intcol_num = hh.intcol#)
  from    sys.col$ c, sys.tabpart$ tp, sys.hist_head$ hh
  where   hh.obj# = tp.obj# AND
          tp.bo# = c.obj# AND
          hh.intcol# = c.intcol#
UNION ALL
  select  c.obj#, hh.obj#, c.name, hh.intcol#, hh.distcnt, hh.lowval,
          hh.hival, hh.density, hh.null_cnt, hh.avgcln,
          bitand(hh.spare2, 3), bitand(hh.spare2, 4),
          cast(multiset(select value(hv)
                        from   sys.ku$_histgrm_view hv
                        where  hv.obj_num = hh.obj#
                           and hv.intcol_num = hh.intcol#)
                        as ku$_histgrm_list_t),
          (select value(hminv)
           from   sys.ku$_histgrm_min_view hminv
           where  hminv.obj_num = hh.obj#
              and hminv.intcol_num = hh.intcol#),
          (select value(hmaxv)
           from   sys.ku$_histgrm_max_view hmaxv
           where  hmaxv.obj_num = hh.obj#
              and hmaxv.intcol_num = hh.intcol#)
  from    sys.col$ c, sys.hist_head$ hh,  sys.tabcompart$ tcp,
          sys.tabsubpart$ tsp
  where   hh.obj# = tsp.obj# AND
          tsp.pobj# = tcp.obj# AND
          tcp.bo# = c.obj# AND
          hh.intcol# = c.intcol#;

CREATE OR REPLACE FORCE VIEW "KU$_PTAB_STATS_VIEW"("OBJ_NUM","SCHEMA_OBJ","BOBJ_NUM","SYSGEN_COLS","BLKCNT","ROWCNT","AVGRLN","FLAGS","COL_STATS") AS 
select  t.obj#,
          (select value(sov) from ku$_schemaobj_view sov
           where sov.obj_num = t.obj#),
          t.bo#, bitand(bt.property, 2097152), t.blkcnt, t.rowcnt, t.avgrln,
          decode(bitand(t.flags, 24), 24, 3, 16, 2, 8, 1, 0),
          cast(multiset(select value(pcsv)
                        from   sys.ku$_ptab_col_stats_view pcsv
                        where  pcsv.tab_obj_num = bo# and
                               pcsv.p_obj_num = t.obj# and
                               bitand(bt.property, 2097152) = 0)
                        as ku$_col_stats_list_t)
  from    sys.tab$ bt, sys.tabpart$ t
  where   t.bo# = bt.obj# and
          NOT EXISTS (                   /* table does not have associations */
                SELECT 1
                FROM   sys.association$ a
                where  a.obj# = t.obj#) and
          NOT EXISTS (           /* type in table does not have associations */
                SELECT  1
                FROM    sys.obj$ tt, sys.coltype$ ct, sys.association$ a
                WHERE   t.obj# = ct.obj# AND
                        ct.toid = tt.oid$ AND
                        tt.obj# = a.obj#)
UNION ALL
  select  tsp.obj#,
          (select value(sov) from ku$_schemaobj_view sov
           where sov.obj_num = tsp.obj#),
          t.bo#, bitand(bt.property, 2097152), tsp.blkcnt, tsp.rowcnt,
          tsp.avgrln,
          decode(bitand(tsp.flags, 24), 24, 3, 16, 2, 8, 1, 0),
          cast(multiset(select value(pcsv)
                        from   sys.ku$_ptab_col_stats_view pcsv
                        where  pcsv.tab_obj_num = bo# and
                               pcsv.p_obj_num = tsp.obj# and
                               bitand(bt.property, 2097152) = 0)
                        as ku$_col_stats_list_t)
  from    sys.tab$ bt, sys.tabcompart$ t, sys.tabsubpart$ tsp
  where   tsp.pobj# = t.obj# AND
          t.bo# = bt.obj# AND
          NOT EXISTS (                   /* table does not have associations */
                SELECT 1
                FROM   sys.association$ a
                where  a.obj# = t.obj#) and
          NOT EXISTS (           /* type in table does not have associations */
                SELECT  1
                FROM    sys.obj$ tt, sys.coltype$ ct, sys.association$ a
                WHERE   t.obj# = ct.obj# AND
                        ct.toid = tt.oid$ AND
                        tt.obj# = a.obj#);

CREATE OR REPLACE FORCE VIEW "KU$_PWDVFC_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","TYPE_NUM","SCHEMA_OBJ","SOURCE_LINES") AS 
select t.vers_major, t.vers_minor, t.obj_num, t.type_num,
         t.schema_obj, t.source_lines
  from ku$_base_proc_view t, profile$ p
  where t.type_num = 8 and t.obj_num = p.limit#
                        and p.resource# =4 and p.type# =1;

CREATE OR REPLACE FORCE VIEW "KU$_QTRANS_VIEW"("VERS_MAJOR","VERS_MINOR","TRANSFORMATION_ID","SCHEMA_NAME","TRANSFORM_NAME","FROM_OBJ","TO_OBJ","ATTRIBUTE_NUM","SQL_EXPRESSION") AS 
select '1','0',
          t.transformation_id,
          u.name, t.name,
          (select value (f) from ku$_schemaobj_view f where f.oid=t.from_toid),
          (select value (o) from ku$_schemaobj_view o where o.oid=t.to_toid),
          at.attribute_number,
          replace(at.sql_expression, '''', '''''')
  from sys.user$ u , transformations$ t, attribute_transformations$ at
  where  u.name = t.owner and t.transformation_id = at.transformation_id;

CREATE OR REPLACE FORCE VIEW "KU$_QUEUES_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","QID","SCHEMA_OBJ","BASE_OBJ","TFLAGS","USAGE","MAX_RETRIES","RETRY_DELAY","ENQUEUE_ENABLED","PROPERTIES","RETENTION","QUEUE_COMMENT") AS 
select '1','0',
        t.objno,
        q.eventid,
     (select value(o) from sys.ku$_schemaobj_view o where o.obj_num=q.eventid),
     (select value(b) from sys.ku$_schemaobj_view b where b.obj_num=t.objno),
        t.flags,
        q.usage, q.max_retries, q.retry_delay,
        q.enable_flag,
        q.properties, q.ret_time, q.queue_comment
  from system.aq$_queues q, system.aq$_queue_tables t
  where   q.table_objno = t.objno;

CREATE OR REPLACE FORCE VIEW "KU$_QUEUE_TABLE_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","SCHEMA_OBJ","UDATA_TYPE","OBJECT_TYPE","SORT_COLS","FLAGS","TABLE_COMMENT","PRIMARY_INSTANCE","SECONDARY_INSTANCE","OWNER_INSTANCE") AS 
select '1','0',
          t.objno,
          (select value(qo) from  sys.ku$_schemaobj_view qo where
             qo.obj_num=t.objno),
          t.udata_type,
         (select u.name || '.' || o.name
            from sys.ku$_schemaobj_view o, sys.user$ u,
                 sys.col$ c, sys.coltype$ ct
          where c.intcol# = ct.intcol#
                and c.obj# = ct.obj#
                and c.name = 'USER_DATA'
                and t.objno = c.obj#
                and o.oid = ct.toid
                and o.type_num = 13
                and o.owner_num = u.user#),
         t.sort_cols,
         t.flags,
         t.table_comment,
         aft.primary_instance,
         aft.secondary_instance,
         aft.owner_instance
  from   system.aq$_queue_tables t,
         sys.aq$_queue_table_affinities aft
  where  t.objno = aft.table_objno;

CREATE OR REPLACE FORCE VIEW "KU$_REFGROUP_VIEW"("VERS_MAJOR","VERS_MINOR","REFNAME","OWNER_NUM","REFOWNER","REFGROUP","REF_MAKE_USER","REF_MAKE_DBA","REF_CHILD") AS 
select  '1','0', r.name, u.user#, r.owner, r.refgroup,
          sys.dbms_metadata_util.get_refresh_make_user (r.refgroup),
          sys.dbms_metadata_util.get_refresh_make_dba (r.refgroup),
          cast(multiset(select value(s) from ku$_add_snap_view s
             where s.refgroup =r.refgroup)
                as ku$_add_snap_list_t
          )
  from sys.user$ u, sys.rgroup$  r
  where  u.name=r.owner
        AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (r.owner, 0) OR
                EXISTS ( SELECT * FROM session_roles
                        WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_REF_CONSTRAINT_VIEW"("VERS_MAJOR","VERS_MINOR","CON_NUM","OWNER_NAME","NAME","FLAGS","BASE_OBJ_NUM","BASE_OBJ","CON2") AS 
select '1', '1',
         c.con#,
         u.name,
         c.name, cd.defer, cd.obj#,
         (select value(sov) from ku$_schemaobj_view sov
          where sov.obj_num=cd.obj#),
         value(con)
  from  obj$ o, con$ c, cdef$ cd, user$ u,
        ku$_constraint2_view con
  where cd.obj# = o.obj# and
        c.con# = cd.con# and
        u.user# = c.owner# and
        con.con_num = c.con# and
        (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (u.user#, 0)
        OR EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_RESOCOST_LIST_VIEW"("RESOURCE_ID","RESOURCE_NAME","RESOURCE_TYPE","UNIT_COST") AS 
select  m.resource#, m.name,m.type#, c.cost
  from    sys.resource_cost$ c, sys.resource_map m
  where   c.resource# = m.resource#;

CREATE OR REPLACE FORCE VIEW "KU$_RESOCOST_VIEW"("VERS_MAJOR","VERS_MINOR","COST_LIST") AS 
select '1','0',
         cast(multiset (select * from  ku$_resocost_list_view
             ) as  ku$_resocost_list_t
         )
  from dual;

CREATE OR REPLACE FORCE VIEW "KU$_RLS_CONTEXT_VIEW"("VERS_MAJOR","VERS_MINOR","BASE_OBJ","OBJ_NUM","NAME","ATTR") AS 
select '1','0',
          value(sov),
          rc.obj# ,rc.ns ,rc.attr
  from    ku$_schemaobj_view sov, sys.rls_ctx$ rc
  where   rc.obj# = sov.obj_num
      and (SYS_CONTEXT('USERENV','CURRENT_USERID') = 0 OR
              EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_RLS_GROUP_VIEW"("VERS_MAJOR","VERS_MINOR","BASE_OBJ","OBJ_NUM","NAME") AS 
select '1','0',
          value(sov),
          rg.obj# , rg.gname
  from    ku$_schemaobj_view sov, sys.rls_grp$ rg
  where   rg.obj# = sov.obj_num
      and (SYS_CONTEXT('USERENV','CURRENT_USERID') = 0 OR
           EXISTS ( SELECT * FROM session_roles
                    WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_RLS_POLICY_VIEW"("VERS_MAJOR","VERS_MINOR","BASE_OBJ","OBJ_NUM","GNAME","NAME","STMT_TYPE","CHECK_OPT","ENABLE_FLAG","PFSCHMA","PPNAME","PFNAME","POLICY_TYPE","LONG_PRED","REL_COLS","REL_COLS_OPT") AS 
select '1','1',
          value(sov),
          r.obj#, r.gname, r.pname,
          BITAND(r.stmt_type,15)+BITAND(r.stmt_type,2048),
          r.check_opt, r.enable_flag, r.pfschma, r.ppname, r.pfname,
          case bitand(r.stmt_type,16+64+128+256)
            when 16 then 'dbms_rls.STATIC'
            when 64 then 'dbms_rls.SHARED_STATIC'
            when 128 then 'dbms_rls.CONTEXT_SENSITIVE'
            when 256 then 'dbms_rls.SHARED_CONTEXT_SENSITIVE'
            else 'dbms_rls.DYNAMIC'
          end,
          BITAND(r.stmt_type,512),
          cast(multiset(select c.name from col$ c, rls_sc$ sc where
                        sc.obj#=r.obj# and
                        sc.gname=r.gname and
                        sc.pname=r.pname and
                        sc.obj#=c.obj# and sc.intcol#=c.intcol#
                       )
               as ku$_rls_sec_rel_col_list_t),
          BITAND(r.stmt_type, 4096)
  from    ku$_schemaobj_view sov, sys.rls$ r
  where   r.obj# = sov.obj_num and
          (SYS_CONTEXT('USERENV','CURRENT_USERID') = 0 OR
          EXISTS ( SELECT * FROM session_roles
                   WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_RMGR_CONSUMER_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","SCHEMA_OBJ","CPU_METHOD","DESCRIPTION","STATUS","MANDATORY") AS 
select '1','0',
        r.obj#,
        (select value(o) from  sys.ku$_schemaobj_view o where
                o.obj_num=r.obj#),
        r.cpu_method,
        r.description,
        r.status, r.mandatory
  from resource_consumer_group$ r;

CREATE OR REPLACE FORCE VIEW "KU$_RMGR_INIT_CONSUMER_VIEW"("VERS_MAJOR","VERS_MINOR","USER_NUM","GRANTEE","GRANTED_GROUP","GRANT_OPTION","DEFSCHCLASS") AS 
select '1','0',
        ue.user#,
        ue.name, g.name,
        a.option$,
        ue.defschclass
  from sys.user$ ue, sys.resource_consumer_group$ g, sys.objauth$ a
  where a.obj# = g.obj# and a.grantee# = ue.user#;

CREATE OR REPLACE FORCE VIEW "KU$_RMGR_PLAN_DIRECT_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","BASE_OBJ","GROUP_OR_SUBPLAN","TYPE","CPU_P1","CPU_P2","CPU_P3","CPU_P4","CPU_P5","CPU_P6","CPU_P7","CPU_P8","ACTIVE_SESS_POOL_P1","QUEUEING_P1","PARALLEL_DEGREE_LIMIT_P1","SWITCH_GROUP","SWITCH_TIME","SWITCH_ESTIMATE","MAX_EST_EXEC_TIME","UNDO_POOL","COMMENTS","STATUS","MANDATORY") AS 
select '1','0',
         r.obj#,
         (select value(o) from  sys.ku$_schemaobj_view o where
             o.obj_num=r.obj#),
         r.group_or_subplan,
         r.is_subplan,
         decode(r.cpu_p1,4294967295,0,r.cpu_p1),
         decode(r.cpu_p2,4294967295,0,r.cpu_p2),
         decode(r.cpu_p3,4294967295,0,r.cpu_p3),
         decode(r.cpu_p4,4294967295,0,r.cpu_p4),
         decode(r.cpu_p5,4294967295,0,r.cpu_p5),
         decode(r.cpu_p6,4294967295,0,r.cpu_p6),
         decode(r.cpu_p7,4294967295,0,r.cpu_p7),
         decode(r.cpu_p8,4294967295,0,r.cpu_p8),
         decode(r.active_sess_pool_p1,4294967295,0,r.active_sess_pool_p1),
         decode(r.queueing_p1,4294967295,0,r.queueing_p1),
         decode(r.parallel_degree_limit_p1,4294967295,0,r.parallel_degree_limit_p1),
         r.switch_group,
         decode(r.switch_time,4294967295,0,r.switch_time),
         decode(r.switch_estimate,4294967295,0,r.switch_estimate),
         decode(r.max_est_exec_time,4294967295,0,r.max_est_exec_time),
         decode(r.undo_pool,4294967295,0,r.undo_pool),
         r.description, r.status, r.mandatory
  from resource_plan_directive$ r;

CREATE OR REPLACE FORCE VIEW "KU$_RMGR_PLAN_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","SCHEMA_OBJ","CPU_METHOD","MAST_METHOD","PDL_METHOD","NUM_PLAN_DIRECTIVES","DESCRIPTION","QUE_METHOD","STATUS","MANDATORY") AS 
select '1','0',
        r.obj#,
        (select value(o) from  sys.ku$_schemaobj_view o where
             o.obj_num=r.obj#),
        r.cpu_method, r.mast_method,
        r.pdl_method, r.num_plan_directives,
        r.description,  r.que_method,
        r.status, r.mandatory
  from resource_plan$ r;

CREATE OR REPLACE FORCE VIEW "KU$_ROGRANT_VIEW"("VERS_MAJOR","VERS_MINOR","GRANTEE_ID","GRANTEE","ROLE","ROLE_ID","ADMIN","SEQUENCE") AS 
select '1','0',
          u1.user#, u1.name, u2.name, u2.user#, NVL(g.option$, 0), g.sequence#
  from    sys.user$ u1, sys.user$ u2, sys.sysauth$ g
  where   u1.user# = g.grantee# AND
          u2.user# = g.privilege# AND
          g.privilege# > 0
          AND (SYS_CONTEXT('USERENV','CURRENT_USERID') =0
                OR EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_ROLE_VIEW"("VERS_MAJOR","VERS_MINOR","USER_ID","NAME","PASSWORD","SCHEMA","PACKAGE") AS 
select '1','0',
        u.user#,
        u.name,
        u.password,
        (select r.schema from sys.approle$ r  where r.role#=u.user#),
        (select r.package from sys.approle$ r  where r.role#=u.user#)
  from sys.user$ u
  where   u.type# = 0
  AND (SYS_CONTEXT('USERENV','CURRENT_USERID') = 0
        OR EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_ROLLBACK_VIEW"("VERS_MAJOR","VERS_MINOR","US_NUM","NAME","USER_NUM","OPTIMAL","INIEXTS","MINEXTS","MAXEXTS","EXTSIZE","TABLESPACE") AS 
select '1','0',
         u.us#,
         u.name,
         u.user#,
         (select r.optsize from v$rollstat r where r.usn=u.us#),
         s.iniexts,
         s.minexts,
         s.maxexts,
         s.extsize,
         value(tsv)
  from   sys.ku$_tablespace_view tsv, sys.seg$ s, sys.undo$ u
  where  u.status$ != 1
    and  u.ts# = tsv.ts_num
    and  u.file#  = s.file#
    and  u.block# = s.block#
    and  u.ts#    = s.ts#
    and (SYS_CONTEXT('USERENV','CURRENT_USERID') = 0
        OR EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_SCHEMAOBJ_VIEW"("OBJ_NUM","DATAOBJ_NUM","OWNER_NUM","OWNER_NAME","NAME","NAMESPACE","SUBNAME","TYPE_NUM","TYPE_NAME","CTIME","MTIME","STIME","STATUS","REMOTEOWNER","LINKNAME","FLAGS","OID","SPARE1","SPARE2","SPARE3","SPARE4","SPARE5","SPARE6") AS 
select o.obj#, o.dataobj#, o.owner#, u.name, o.name, o.namespace, o.subname,
         o.type#,
         -- translate type# to name: type# values are defined in kgl.h
         decode(o.type#,
                 0, 'CURSOR',                    1, 'INDEX',
                 2, 'TABLE',                     3, 'CLUSTER',
                 4, 'VIEW',                      5, 'SYNONYM',
                 6, 'SEQUENCE',                  7, 'PROCEDURE',
                 8, 'FUNCTION',                  9, 'PACKAGE',
                11, 'PACKAGE_BODY',             12, 'TRIGGER',
                13, 'TYPE',                     14, 'TYPE_BODY',
                15, 'OBJECT',                   16, 'USER',
                17, 'LINK',                     18, 'PIPE',
                19, 'TABLE PARTITION',          20, 'INDEX PARTITION',
                21, 'LOB',                      22, 'LIBRARY',
                23, 'DIRECTORY',                24, 'QUEUE',
                25, 'IOT',                      26, 'REPLICATION OBJECT GROUP',
                27, 'REPLICATION PROPAGATOR',   28, 'JAVA_SOURCE',
                29, 'JAVA_CLASS',               30, 'JAVA_RESOURCE',
                31, 'JAVA JAR',                 32, 'INDEXTYPE',
                33, 'OPERATOR',                 34, 'TABLE SUBPARTITION',
                35, 'INDEX SUBPARTITION',       36, 'SERVER-SIDE REPAPI',
                37, 'REPLICATION INTERNAL PACKAGE',
                38, 'CONTEXT POLICY OBJECT',
                39, 'PUB_SUB INTERNAL INFORMATION',
                40, 'LOB PARTITION',            41, 'LOB SUBPARTITION',
                42, 'SUMMARY',                  43, 'DIMENSION',
                44, 'CONTEXT',                  45, 'OUTLINE',
                46, 'RULESET OBJECT',           47, 'SCHEDULER PLAN',
                48, 'SCHEDULER CLASS',          49, 'PENDING SCHEDULER PLAN',
                50, 'PENDING SCHEDULER CLASS',  51, 'SUBSCRIPTION INFORMATION',
                52, 'LOCATION INFORMATION',     53, 'REMOTE OBJECTS INFO',
                54, 'REPAPI SNAPSHOT METADATA', 55, 'IFS DATA',
                56, 'JAVA SHARED DATA',         57, 'SECURITY PROFILE',
                58, 'TRANSFORMATION',           59, 'RULE',
                60, 'CAPTURE PROCESS',          61, 'APPLY PROCESS',
                62, 'RULE EVALUATION CONTEXT',  63, 'LOG-BASED REPL SOURCE',
                64, 'STREAM DDL',               65, 'KGL TEST',
                66, 'SCHEDULER JOB',            67, 'SCHEDULER PROGRAM',
                68, 'SCHEDULER CLASS',          69, 'SCHEDULER WINDOW',
                70, 'MULTI-VERSIONED OBJECT',   71, 'SCHEDULER JOB SLAVE',
                72, 'SCHEDULER WINDOW GROUP',   73, 'CDC CHANGE SET',
                74, 'SCHEDULER SCHEDULE',       'ERROR'),
         to_char(o.ctime,'YYYY-MM-DD:HH24:MI:SS'),
         to_char(o.mtime,'YYYY-MM-DD:HH24:MI:SS'),
         to_char(o.stime,'YYYY-MM-DD:HH24:MI:SS'),
         o.status, o.remoteowner,
         o.linkname, o.flags, o.oid$,
         o.spare1, o.spare2, o.spare3,
         o.spare4, o.spare5, o.spare6
  from obj$ o, user$ u
  where o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "KU$_SCHEMA_CALLOUT_VIEW"("VERS_MAJOR","VERS_MINOR","USER_NAME","OBJ_NUM","BASE_OBJ","PACKAGE","PKG_SCHEMA","LEVEL_NUM","CLASS","PREPOST","TS_NAME","INCL_CONST","INCL_TRIG","INCL_GRANT","TTS_FULL_CHK") AS 
select '1','0',
  u.name, null, null,
  p.package, p.schema,
  p.level#, p.class, oo.obj#-1,
  null, null, null, null, null
  FROM   sys.user$ u, sys.exppkgact$ p, sys.obj$ oo
  where p.class=6 and oo.obj# in (1,2) and u.type# = 1
         AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (u.user#, 0)  OR
              EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ))
  order by p.level#;

CREATE OR REPLACE FORCE VIEW "KU$_SEQUENCE_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","SCHEMA_OBJ","INCRE","MINVALUE","MAXVALUE","CYCLE","SEQ_ORDER","CACHE","HIGHWATER","SEQ_AUDIT","FLAGS") AS 
select '1','0',
         s.obj#, value(o),
         s.increment$, s.minvalue, TO_CHAR(s.maxvalue), s.cycle#, s.order$,
	 s.cache, s.highwater,  s.audit$, s.flags
  from  sys.ku$_schemaobj_view o, sys.seq$ s
  where s.obj# = o.obj_num AND
        (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
         EXISTS ( SELECT * FROM session_roles
         WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_SIMPLE_COL_VIEW"("OBJ_NUM","COL_NUM","INTCOL_NUM","SEGCOL_NUM","PROPERTY","NAME","ATTRNAME","TYPE_NUM","DEFLENGTH","DEFAULT_VAL") AS 
select c.obj#,
         c.col#,
         c.intcol#,
         c.segcol#,
         c.property,
         c.name,
         (select a.name from attrcol$ a where
                        a.obj#=c.obj# and a.intcol#=c.intcol#),
         c.type#,
         c.deflength,
         sys.dbms_metadata_util.long2varchar(c.deflength,
                                        'SYS.COL$',
                                        'DEFAULT$',
                                        c.rowid)
  from col$ c;

CREATE OR REPLACE FORCE VIEW "KU$_SIMPLE_PKREF_COL_VIEW"("OBJ_NUM","COL_NUM","INTCOL_NUM","SEGCOL_NUM","PROPERTY","NAME","ATTRNAME","TYPE_NUM","DEFLENGTH","DEFAULT_VAL") AS 
select c.obj#,
         c.col#,
         c.intcol#,
         c.segcol#,
         c.property,
         c2.name,
         (select a.name
          from attrcol$ a
          where a.obj# = c2.obj# and
                a.intcol# = c2.intcol#),
         c.type#,
         c.deflength,
         sys.dbms_metadata_util.long2varchar(c.deflength,
                                             'SYS.COL$',
                                             'DEFAULT$',
                                             c.rowid)
  from  col$ c, col$ c2, ccol$ cc, cdef$ cd, coltype$ ct
  where cc.obj# = c.obj# and
        cc.intcol# = c.intcol# and
        cd.con# = cc.con# and
        ct.obj# = c.obj# and
        ct.col# = c.col# and
        ct.intcols = cd.intcols and
        UTL_RAW.CAST_TO_BINARY_INTEGER(
          SUBSTRB(ct.intcol#s, (cc.pos# * 2 - 1), 2), 3) = c.intcol# and
        c2.obj# = c.obj# and
        c2.intcol# = ct.intcol#;

CREATE OR REPLACE FORCE VIEW "KU$_SIMPLE_SETID_COL_VIEW"("OBJ_NUM","COL_NUM","INTCOL_NUM","SEGCOL_NUM","PROPERTY","NAME","ATTRNAME","TYPE_NUM","DEFLENGTH","DEFAULT_VAL") AS 
select c.obj#,
         c.col#,
         c.intcol#,
         c.segcol#,
         (c.property + BITAND(c2.property,1)),
         c2.name,
         (select a.name
          from attrcol$ a
          where a.obj# = c2.obj# and
                a.intcol# = c2.intcol#),
         c.type#,
         c.deflength,
         sys.dbms_metadata_util.long2varchar(c.deflength,
                                             'SYS.COL$',
                                             'DEFAULT$',
                                             c.rowid)
  from col$ c, col$ c2
  where BITAND(c.property, 1024) = 1024 and
        c2.obj# = c.obj# and
        c2.col# = c.col# and
        c2.intcol# = (c.intcol# - 1) and
        c2.segcol# = 0;

CREATE OR REPLACE FORCE VIEW "KU$_SPIND_STATS_VIEW"("OBJ_NUM","SCHEMA_OBJ","BOBJ_NUM","ROWCNT","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","BLEVEL","IND_FLAGS","OBJ_FLAGS") AS 
select  i.obj#,
          (select value(sov) from sys.ku$_schemaobj_view sov
           where sov.obj_num = i.obj#),
          i.pobj#, i.rowcnt, i.leafcnt, i.distkey, i.lblkkey, i.dblkkey,
          i.clufac, i.blevel,
          decode(bitand(i.flags, 24), 24, 3, 16, 2, 8, 1, 0),
          o.flags
  from    sys.obj$ o, sys.indsubpart$ i
  where   i.obj# = o.obj# and
          bitand(i.flags,2) = 2                         /* index is analyzed */;

CREATE OR REPLACE FORCE VIEW "KU$_STORAGE_VIEW"("FILE_NUM","BLOCK_NUM","TYPE_NUM","TS_NUM","BLOCKS","EXTENTS","INIEXTS","MINEXTS","MAXEXTS","EXTSIZE","EXTPCT","USER_NUM","LISTS","GROUPS","BITMAPRANGES","CACHEHINT","SCANHINT","HWMINCR","FLAGS","SPARE2") AS 
select s.file#, s.block#, s.type#, s.ts#, s.blocks, s.extents,
         s.iniexts, s.minexts, s.maxexts, s.extsize, s.extpct,
         s.user#, decode(s.lists, 0, 1, s.lists),
         decode(s.groups, 0, 1, s.groups), s.bitmapranges, s.cachehint,
         s.scanhint, s.hwmincr, s.spare1, s.spare2
  from seg$ s;

CREATE OR REPLACE FORCE VIEW "KU$_STRMCOLTYPE_VIEW"("OBJ_NUM","COL_NUM","INTCOL_NUM","OWNER_NAME","NAME","FLAGS","TOID","VERSION","HASHCODE","TYPIDCOL_NUM","SUBTYPE_LIST") AS 
select ct.obj#, ct.col#, ct.intcol#,
         o.owner_name, o.name,
         ct.flags, ct.toid,
         ct.version#,
         (select t.hashcode from type$ t
          where t.toid=ct.toid and t.version#=ct.version#),
         ct.typidcol#,
         /* look up stuff in subcoltype$ only if column is substitutable */
         decode(bitand(ct.flags, 512), 512,
           cast(multiset(select sct.* from ku$_strmsubcoltype_view sct
                where ct.obj#    = sct.obj_num
                and   ct.intcol# = sct.intcol_num
                       ) as ku$_strmsubcoltype_list_t
                ),
           null)
    from ku$_schemaobj_view o, obj$ oo, coltype$ ct
         where ct.toid = oo.oid$
         and o.obj_num = oo.obj#;

CREATE OR REPLACE FORCE VIEW "KU$_STRMCOL_VIEW"("OBJ_NUM","COL_NUM","INTCOL_NUM","SEGCOL_NUM","PROPERTY","NAME","ATTRNAME","TYPE_NUM","LENGTH","PRECISION_NUM","SCALE","NOT_NULL","CHARSETID","CHARSETFORM","CHARLENGTH","LOB_PROPERTY","TYPEMD") AS 
select c.obj#, c.col#, c.intcol#, c.segcol#, c.property,
         c.name,
         decode(bitand(c.property,1024),0,
         (select a.name from attrcol$ a where
                        a.obj#=c.obj# and a.intcol#=c.intcol#),
           (select a.name from attrcol$ a where c.intcol#>1 and
                        a.obj#=c.obj# and a.intcol#=c.intcol#-1)),
         c.type#, c.length,
         c.precision#, c.scale, c.null$,
         c.charsetid, c.charsetform, c.spare3,
         -- get lob property if type# = 112 (DTYCLOB)
         decode(c.type#,112,
                 sys.dbms_metadata_util.get_lob_property(c.obj#,c.intcol#),
                 null),
         -- get type metadata if type# = 121 (DTYADT)
         --                              123 (DTYNAR)
         --                               58 (DTYOPQ)
         ( select value(ctv) from ku$_strmcoltype_view ctv
                     where c.obj#  = ctv.obj_num
                     and   c.intcol# = ctv.intcol_num
           and   c.type# in (121,123,58) )
  from col$ c;

CREATE OR REPLACE FORCE VIEW "KU$_STRMSUBCOLTYPE_VIEW"("OBJ_NUM","INTCOL_NUM","OWNER_NAME","NAME","TOID","VERSION","HASHCODE","TYPEID") AS 
select sct.obj#, sct.intcol#,
         o.owner_name, o.name,
         sct.toid,
         t.version#, t.hashcode,
         t.typeid
    from ku$_schemaobj_view o, type$ t, subcoltype$ sct
    where o.oid=sct.toid and o.oid=t.toid;

CREATE OR REPLACE FORCE VIEW "KU$_STRMTABLE_VIEW"("VERS_MAJOR","VERS_MINOR","VERS_DPAPI","ENDIANNESS","CHARSET","NCHARSET","DBTIMEZONE","FDO","OBJ_NUM","OWNER_NAME","NAME","PNAME","PROPERTY","COL_LIST") AS 
select '1','0',
         (select dbms_metadata_util.get_vers_dpapi from dual),
         (select dbms_metadata_util.get_endianness from dual),
         (select value from v$nls_parameters
                 where parameter='NLS_CHARACTERSET'),
         (select value from v$nls_parameters
                 where parameter='NLS_NCHAR_CHARACTERSET'),
         (select dbtimezone from dual),
         (select utl_xml.getfdo from dual),
         t.obj#,
         o.owner_name, o.name, o.subname,
         t.property,
         cast( multiset(select * from ku$_strmcol_view c
                        where c.obj_num = t.obj#
                        and bitand(c.property,32768)=0  -- unused column
                        order by c.segcol_num
                        ) as ku$_strmcol_list_t
              )
  from  ku$_schemaobj_view o, tab$ t
  where t.obj# = o.obj_num
        AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
                EXISTS ( SELECT * FROM session_roles
                        WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_SUBCOLTYPE_VIEW"("OBJ_NUM","INTCOL_NUM","TOID","VERSION","INTCOLS","INTCOL_NUMS","FLAGS") AS 
select sct.obj#, sct.intcol#, sct.toid,
         sct.version#, sct.intcols, sct.intcol#s, sct.flags
    from subcoltype$ sct;

CREATE OR REPLACE FORCE VIEW "KU$_SUBLOBFRAGINDEX_VIEW"("OBJ_NUM","SCHEMA_OBJ","TS_NAME","BLOCKSIZE","STORAGE","DATAOBJ_NUM","BASE_OBJ_NUM","PART_NUM","FLAGS","PCT_FREE","PCT_THRES","INITRANS","MAXTRANS","ANALYZETIME","SAMPLESIZE","ROWCNT","BLEVEL","LEAFCNT","DISTKEY","LBLKKEY","DBLKKEY","CLUFAC","SPARE1","SPARE2","SPARE3","INCLCOL") AS 
select i.obj#, value(o),
         ts.name, ts.blocksize,
         (select value(s) from ku$_storage_view s
          where i.file#  = s.file_num
          and   i.block# = s.block_num
          and   i.ts#    = s.ts_num),
         i.dataobj#, i.pobj#, i.subpart#, i.flags,
         i.pctfree$, NULL, i.initrans, i.maxtrans,
         i.analyzetime, i.samplesize, i.rowcnt,
         i.blevel, i.leafcnt, i.distkey, i.lblkkey, i.dblkkey, i.clufac,
         i.spare1, i.spare2, i.spare3, NULL
   from  ku$_schemaobj_view o, indsubpart$ i, ts$ ts
   where o.obj_num = i.obj#
         AND  i.ts# = ts.ts#;

CREATE OR REPLACE FORCE VIEW "KU$_SUBLOBFRAG_VIEW"("OBJ_NUM","PARENT_OBJ_NUM","PART_OBJ_NUM","BASE_OBJ_NUM","INTCOL_NUM","PART_NUM","SCHEMA_OBJ","STORAGE","TS_NAME","BLOCKSIZE","IND_NUM","LOBINDEX","CHUNK","PCTVERSION","FLAGS","PROPERTY","SPARE1","SPARE2","SPARE3") AS 
select lf.fragobj#, lf.parentobj#, lf.tabfragobj#,
        l.obj#, l.intcol#, lf.frag#,
        (select value(o) from ku$_schemaobj_view o
         where o.obj_num = lf.fragobj#),
        (select value(s) from ku$_storage_view s
         where s.file_num  = lf.file#
         and   s.block_num = lf.block#
         and   s.ts_num    = lf.ts#),
        (select ts.name from ts$ ts where lf.ts# = ts.ts#),
        (select ts.blocksize from ts$ ts where lf.ts# = ts.ts#),
        lf.indfragobj#,
        (select value(i) from ku$_sublobfragindex_view i
                 where i.obj_num=lf.indfragobj#),
        lf.chunk, lf.pctversion$, lf.fragflags, lf.fragpro,
        lf.spare1, lf.spare2, lf.spare3
  from  lob$ l, lobcomppart$ lc, lobfrag$ lf
        where lc.partobj#=lf.parentobj#
          and l.lobj#=lc.lobj#;

CREATE OR REPLACE FORCE VIEW "KU$_SUBPARTITION_EST_VIEW"("COLS","ROWCNT","AVGRLN","OBJECT_SCHEMA","OBJECT_NAME","SUBPARTITION_NAME") AS 
SELECT  NVL(t.cols,0), NVL(tp.rowcnt, 0), NVL(tp.avgrln, 0), u.name,
                ot.name, op.subname
        FROM    SYS.OBJ$ OT, SYS.OBJ$ OP, SYS.TAB$ T, sys.tabcompart$ tcp,
                SYS.TABSUBPART$ TP, SYS.USER$ U
        WHERE   tp.obj# = op.obj# AND
                tcp.bo# = ot.obj# AND
                ot.type#=2 AND
                t.obj# = tcp.bo# AND
                tp.pobj# = tcp.obj# and
                ot.owner# = u.user# AND
                (UID IN (0, ot.owner#) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'));

CREATE OR REPLACE FORCE VIEW "KU$_SWITCH_COMPILER_VIEW"("OBJ_NUM","OPTLEVEL","CODETYPE","DEBUG") AS 
select /*+ no_merge */
         b.obj#, b.value, c.value, d.value
         FROM    sys.settings$ b, sys.settings$ c,
                 sys.settings$ d, sys.ku$_schemaobj_view o
         WHERE   o.obj_num  = b.obj# AND
                b.obj#  = c.obj# AND
                c.obj#  = d.obj# AND
                b.param = 'plsql_optimize_level'         AND
                c.param = 'plsql_code_type'              AND
                d.param = 'plsql_debug'                  AND
                (UID IN (o.owner_num, 0) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'));

CREATE OR REPLACE FORCE VIEW "KU$_SYNONYM_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","SCHEMA_OBJ","SYN_LONG_NAME","DB_LINK","OWNER_NAME","NAME","OBJ_LONG_NAME") AS 
select '1','0',
         s.obj#, value(o),
         -- syn_long_name defaults to name
         nvl((select j.longdbcs from sys.javasnm$ j where j.short = o.name),
             o.name),
         s.node, s.owner, s.name,
         (select j.longdbcs from sys.javasnm$ j where j.short = s.name)
  from  sys.ku$_schemaobj_view o, sys.syn$ s
  where s.obj# = o.obj_num AND
         (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
                o.owner_name='PUBLIC' or
                EXISTS ( SELECT * FROM session_roles
                        WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_SYSCALLOUT_VIEW"("VERS_MAJOR","VERS_MINOR","USER_NAME","OBJ_NUM","BASE_OBJ","PACKAGE","PKG_SCHEMA","LEVEL_NUM","CLASS","PREPOST","TS_NAME","INCL_CONST","INCL_TRIG","INCL_GRANT","TTS_FULL_CHK") AS 
select '1','0',
  null, null, null,
  p.package, p.schema,
  p.level#, p.class, oo.obj#-1,
  null, null, null, null, null
  FROM  sys.exppkgact$ p , sys.obj$ oo
  where p.class =5 and oo.obj# in (1,2)
  order by p.level#;

CREATE OR REPLACE FORCE VIEW "KU$_SYSGRANT_VIEW"("VERS_MAJOR","VERS_MINOR","GRANTEE","PRIVNAME","SEQUENCE","WGO") AS 
select '1','0',
         u.name, p.name, g.sequence#, NVL(g.option$,0)
  from sys.sysauth$ g, sys.user$ u, sys.system_privilege_map p
  where g.grantee#=u.user# and
        g.privilege#=p.privilege and
        bitand(p.property, 1) != 1         /* Don't show non-SQL sys. grants */
        and
        (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (g.grantee#, 0) OR
                g.grantee#=1 OR
                EXISTS ( SELECT * FROM session_roles
                        WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_TABCLUSTER_COL_VIEW"("OBJ_NUM","COL_NUM","INTCOL_NUM","SEGCOL_NUM","PROPERTY","NAME","ATTRNAME","TYPE_NUM","DEFLENGTH","DEFAULT_VAL") AS 
select c.obj#,
         c.col#,
         c.intcol#,
         c.segcol#,
         c.property,
         c.name,
         (select a.name from attrcol$ a where
                        a.obj#=c.obj# and a.intcol#=c.intcol#),
         c.type#,
         c.deflength, ''
  from col$ c, col$ cc, tab$ t
  where c.obj#  = t.obj#
    and cc.obj# = t.bobj#
    and cc.segcol# = c.segcol#;

CREATE OR REPLACE FORCE VIEW "KU$_TABCLUSTER_VIEW"("OBJ_NUM","SCHEMA_OBJ","COL_LIST") AS 
select t.obj#,
         value(cl),
         cast(multiset(select * from ku$_tabcluster_col_view c
                       where c.obj_num = t.obj#
                        order by c.segcol_num
                      ) as ku$_simple_col_list_t
             )
  from  ku$_schemaobj_view cl, sys.tab$ t
  where bitand(t.property,1024) = 1024          -- clustered table
    and cl.obj_num = t.bobj#;

CREATE OR REPLACE FORCE VIEW "KU$_TABLESPACE_VIEW"("VERS_MAJOR","VERS_MINOR","TS_NUM","NAME","OWNER_NUM","STATUS","CONTENTS","UNDOFILE_NUM","UNDOBLOCK_NUM","BLOCKSIZE","INC_NUM","SCNWRP","SCNBAS","DFLMINEXT","DFLMAXEXT","DFLINIT","DFLINCR","DFLMINLEN","DFLEXTPCT","DFLOGGING","AFFSTRENGTH","BITMAPPED","PLUGGED","DIRECTALLOWED","FLAGS","PITRSCNWRP","PITRSCNBAS","OWNERINSTANCE","BACKUPOWNER","GROUPNAME","SPARE1","SPARE2","SPARE3","SPARE4","FILESPEC") AS 
select '1', '0',
          t.ts#, t.name,  t.owner#, t.online$, t.contents$, t.undofile#,
          t.undoblock#, t.blocksize, t.inc#, t.scnwrp, t.scnbas, t.dflminext,
          t.dflmaxext, t.dflinit, t.dflincr, t.dflminlen, t.dflextpct,
          t.dflogging, t.affstrength, t.bitmapped, t.plugged, t.directallowed,
          t.flags, t.pitrscnwrp, t.pitrscnbas, t.ownerinstance, t.backupowner,
          t.groupname, t.spare1, t.spare2, t.spare3, t.spare4,
          cast(multiset(select value(f) from ku$_file_view f
                       where f.ts_num = t.ts#
                      ) as ku$_file_list_t
             )
 from ts$ t
 where  t.online$  IN (1, 2, 4)
 and    (SYS_CONTEXT('USERENV','CURRENT_USERID') = 0
        OR EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_TABLE_DATA_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","NAME","PART_NAME","PROPERTY","XMLSCHEMACOLS","SCHEMA_OBJ","TS_NAME","BLOCKSIZE","BYTES_ALLOC","BASE_OBJ","DOMIDX_OBJ","ANC_OBJ","UNLOAD_METHOD","ET_PARALLEL") AS 
select * from ku$_htable_data_view
  UNION ALL
  select * from ku$_htpart_data_view
  UNION ALL
  select * from ku$_htspart_data_view
  UNION ALL
  select * from ku$_ntable_data_view
  UNION ALL
  select * from ku$_iotable_data_view
  UNION ALL
  select * from ku$_iotpart_data_view;

CREATE OR REPLACE FORCE VIEW "KU$_TABLE_EST_VIEW"("COLS","ROWCNT","AVGRLN","OBJECT_SCHEMA","OBJECT_NAME") AS 
SELECT  NVL(t.cols,0), NVL(t.rowcnt, 0), NVL(t.avgrln, 0), u.name,
                o.name
        FROM    SYS.OBJ$ O, SYS.TAB$ T, SYS.USER$ U
        WHERE   t.obj# = o.obj# AND
                o.owner# = u.user# AND
                (UID IN (0, o.owner#) OR
                 EXISTS (
                    SELECT  role
                    FROM    sys.session_roles
                    WHERE   role = 'SELECT_CATALOG_ROLE'));

CREATE OR REPLACE FORCE VIEW "KU$_TABLE_OBJNUM_VIEW"("OBJ_NUM","SCHEMA_OBJ","BASE_OBJ") AS 
select * from ku$_htable_objnum_view
  UNION ALL
  select * from ku$_ntable_objnum_view;

CREATE OR REPLACE FORCE VIEW "KU$_TABLE_TYPES_VIEW"("TABOBJNO","TABNAME","TABOWNERNO","TABOWNER","TYPEOBJNO","TYPENAME","TYPEOWNER") AS 
select unique o.obj#,o.name,o.owner#,u.name, d.p_obj#, tyo.name, ou.name
from obj$ o, obj$ tyo, type$ dt, user$ u, user$ ou, dependency$ d, type$ t,
     sys.coltype$ c
where t.toid = c.toid
  and bitand(t.properties,2128)=0     /* not system-generated type */
  and o.obj# = c.obj#
  and o.type# = 2
  and bitand(o.flags,4)!=4            /* not system-generated table */
  and o.owner# != 0                   /* not SYS-owned table */
  and o.owner# = u.user#
  and tyo.owner# = ou.user#
  and o.obj# = d.d_obj#
  and tyo.obj# = d.p_obj#
  and tyo.type# = 13
  and tyo.owner# != 0                 /* not SYS-owned type */
  and tyo.oid$ = dt.toid
  and dt.toid = dt.tvoid    /* only the latest type */;

CREATE OR REPLACE FORCE VIEW "KU$_TABPROP_VIEW"("OBJ_NUM","NAME","SCHEMA","FLAGS","PROPERTY") AS 
select o.obj#, o.name, u.name, o.flags, t.property
 from obj$ o, user$ u, tab$ t
 where o.owner# = u.user#
 and   o.obj#   = t.obj#;

CREATE OR REPLACE FORCE VIEW "KU$_TAB_COL_STATS_VIEW"("TAB_OBJ_NUM","P_OBJ_NUM","COLNAME","INTCOL_NUM","DISTCNT","LOWVAL","HIVAL","DENSITY","NULL_CNT","AVGCLN","CFLAGS","EAV","HIST_GRAM_LIST","HIST_GRAM_MIN","HIST_GRAM_MAX") AS 
select  c.obj#, hh.obj#, c.name, hh.intcol#, hh.distcnt, hh.lowval,
          hh.hival, hh.density, hh.null_cnt, hh.avgcln,
          bitand(hh.spare2, 3), bitand(hh.spare2, 4),
          cast(multiset(select value(hv)
                        from   sys.ku$_histgrm_view hv
                        where  hv.obj_num = hh.obj#
                           and hv.intcol_num = hh.intcol#)
                        as ku$_histgrm_list_t),
          (select value(hminv)
           from   sys.ku$_histgrm_min_view hminv
           where  hminv.obj_num = hh.obj#
              and hminv.intcol_num = hh.intcol#),
          (select value(hmaxv)
           from   sys.ku$_histgrm_max_view hmaxv
           where  hmaxv.obj_num = hh.obj#
              and hmaxv.intcol_num = hh.intcol#)
  from    sys.col$ c, sys.hist_head$ hh
  where   hh.obj# = c.obj# and
          hh.intcol# = c.intcol#;

CREATE OR REPLACE FORCE VIEW "KU$_TAB_COMPART_VIEW"("OBJ_NUM","SCHEMA_OBJ","DATAOBJ_NUM","BASE_OBJ_NUM","PART_NUM","HIBOUNDLEN","HIBOUNDVAL","SUBPARTCNT","SUBPARTS","LOBS","FLAGS","DEFTS_NAME","DEFBLOCKSIZE","DEFPCTFREE","DEFPCTUSED","DEFINITRANS","DEFMAXTRANS","DEFINIEXTS","DEFEXTSIZE","DEFMINEXTS","DEFMAXEXTS","DEFEXTPCT","DEFLISTS","DEFGROUPS","DEFLOGGING","DEFBUFPOOL","ANALYZETIME","SAMPLESIZE","ROWCNT","BLKCNT","EMPCNT","AVGSPC","CHNCNT","AVGRLN","SPARE1","SPARE2","SPARE3") AS 
select tcp.obj#, value(o), tcp.dataobj#, tcp.bo#, tcp.part#,
         tcp.hiboundlen,
         sys.dbms_metadata_util.long2varchar(tcp.hiboundlen,
                                    'SYS.TABCOMPART$',
                                    'HIBOUNDVAL',
                                    tcp.rowid),
         tcp.subpartcnt,
         cast(multiset(select * from ku$_tab_subpart_view tsp
                       where tsp.pobj_num = tcp.obj#
                        order by tsp.subpart_num
                      ) as ku$_tab_subpart_list_t
             ),
         cast(multiset(select * from ku$_lobcomppart_view lc
                       where lc.part_obj_num = tcp.obj#
                        order by lc.intcol_num
                      ) as ku$_lobcomppart_list_t
             ),
         tcp.flags, ts.name, ts.blocksize,
         tcp.defpctfree, tcp.defpctused, tcp.definitrans,
         tcp.defmaxtrans, tcp.definiexts, tcp.defextsize, tcp.defminexts,
         tcp.defmaxexts, tcp.defextpct, tcp.deflists, tcp.defgroups,
         tcp.deflogging, tcp.defbufpool, tcp.analyzetime, tcp.samplesize,
         tcp.rowcnt, tcp.blkcnt, tcp.empcnt, tcp.avgspc, tcp.chncnt,
         tcp.avgrln, tcp.spare1, tcp.spare2, tcp.spare3
  from ku$_schemaobj_view o, tabcompart$ tcp, ts$ ts
  where tcp.obj# = o.obj_num
        AND tcp.defts# = ts.ts#;

CREATE OR REPLACE FORCE VIEW "KU$_TAB_ONLY_STATS_VIEW"("OBJ_NUM","SCHEMA_OBJ","BOBJ_NUM","SYSGEN_COLS","BLKCNT","ROWCNT","AVGRLN","FLAGS","COL_STATS") AS 
select  t.obj#,
          (select value(sov) from ku$_schemaobj_view sov
           where sov.obj_num = t.obj#),
          null, bitand(t.property, 2097152), t.blkcnt, t.rowcnt, t.avgrln,
          decode(bitand(t.flags, 768),
                 786, 3,            /* user specified stats and global stats */
                 512, 2,                                /* global stats only */
                 256, 1, 0),                    /* user specified stats only */
          cast(multiset(select value(tcsv)
                        from   sys.ku$_tab_col_stats_view tcsv
                        where  tcsv.tab_obj_num = t.obj# and
                               bitand(t.property, 2097152) = 0 )
                        as ku$_col_stats_list_t)
  from    sys.tab$ t
  where   NOT EXISTS (                   /* table does not have associations */
                SELECT 1
                FROM   sys.association$ a
                where  a.obj# = t.obj#) and
          NOT EXISTS (           /* type in table does not have associations */
                SELECT  1
                FROM    sys.obj$ tt, sys.coltype$ ct, sys.association$ a
                WHERE   t.obj# = ct.obj# AND
                        ct.toid = tt.oid$ AND
                        tt.obj# = a.obj#);

CREATE OR REPLACE FORCE VIEW "KU$_TAB_PARTOBJ_VIEW"("OBJ_NUM","PARTOBJ","PARTCOLS","SUBPARTCOLS","PART_LIST","COMPART_LIST","TSUBPARTS") AS 
select po.obj_num, value(po),
         cast(multiset(select * from ku$_tab_part_col_view pc
                       where pc.obj_num = po.obj_num
                        order by pc.pos_num
                      ) as ku$_part_col_list_t
             ),
         cast(multiset(select * from ku$_tab_subpart_col_view sc
                       where sc.obj_num = po.obj_num
                        order by sc.pos_num
                      ) as ku$_part_col_list_t
             ),
         cast(multiset(select * from ku$_tab_part_view tp
                       where tp.base_obj_num = po.obj_num
                        order by tp.part_num
                      ) as ku$_tab_part_list_t
             ),
         cast(multiset(select * from ku$_tab_compart_view tcp
                       where tcp.base_obj_num = po.obj_num
                        order by tcp.part_num
                      ) as ku$_tab_compart_list_t
             ),
         cast(multiset(select * from ku$_tab_tsubpart_view ttsp
                       where ttsp.base_objnum = po.obj_num
                        order by ttsp.spart_pos
                      ) as ku$_tab_tsubpart_list_t
             )
  from ku$_partobj_view po;

CREATE OR REPLACE FORCE VIEW "KU$_TAB_PART_COL_VIEW"("OBJ_NUM","INTCOL_NUM","COL","POS_NUM","SPARE1") AS 
select pc.obj#, pc.intcol#, value(c), pc.pos#, pc.spare1
  from ku$_simple_col_view c, partcol$ pc
  where   pc.obj#=c.obj_num
  and     pc.intcol#=c.intcol_num;

CREATE OR REPLACE FORCE VIEW "KU$_TAB_PART_VIEW"("OBJ_NUM","SCHEMA_OBJ","TS_NAME","BLOCKSIZE","STORAGE","DATAOBJ_NUM","BASE_OBJ_NUM","PART_NUM","HIBOUNDLEN","HIBOUNDVAL","LOBS","PCT_FREE","PCT_USED","INITRANS","MAXTRANS","FLAGS","ANALYZETIME","SAMPLESIZE","ROWCNT","BLKCNT","EMPCNT","AVGSPC","CHNCNT","AVGRLN","SPARE1","SPARE2","SPARE3") AS 
select tp.obj#, value(o), ts.name, ts.blocksize,
         value(s), tp.dataobj#, tp.bo#,
         tp.part#, tp.hiboundlen,
         sys.dbms_metadata_util.long2varchar(tp.hiboundlen,
                                        'SYS.TABPART$',
                                        'HIBOUNDVAL',
                                        tp.rowid),
         cast(multiset(select * from ku$_lobfrag_view lf
                        where lf.part_obj_num=tp.obj#
                        order by lf.intcol_num
                      ) as ku$_lobfrag_list_t
             ),
         tp.pctfree$, tp.pctused$, tp.initrans,
         tp.maxtrans, tp.flags, tp.analyzetime, tp.samplesize, tp.rowcnt,
         tp.blkcnt, tp.empcnt, tp.avgspc, tp.chncnt, tp.avgrln, tp.spare1,
         tp.spare2, tp.spare3
  from ku$_schemaobj_view o, ku$_storage_view s, tabpart$ tp, ts$ ts
  where tp.obj# = o.obj_num
        AND tp.ts# = s.ts_num
        AND tp.file# = s.file_num
        AND tp.block# = s.block_num
        AND tp.ts# = ts.ts#;

CREATE OR REPLACE FORCE VIEW "KU$_TAB_STATS_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","BASE_OBJ","TAB_INFO","PTAB_INFO_LIST") AS 
select  '1', '0', o.obj#,
          -- if this is a nested table, get parent table, otherwise get table.
         decode(bitand(t.property , 8192), 8192,
           (select value(oo) from ku$_schemaobj_view oo
            where  oo.obj_num = dbms_metadata_util.get_anc(o.obj#)),
           (select value(sov) from ku$_schemaobj_view sov
            where sov.obj_num = o.obj#)),
          value(tosv),
          cast(multiset(select value(psv)
                        from   sys.ku$_ptab_stats_view psv
                        where  psv.bobj_num = o.obj#)
                        as ku$_ptab_stats_list_t)
  from    sys.obj$ o, sys.tab$ t, ku$_tab_only_stats_view tosv
  where   tosv.obj_num = o.obj# and
          o.obj# = t.obj# and
          o.type# = 2 and
          EXISTS ( SELECT obj# from hist_head$ hh
                   WHERE  hh.obj#=o.obj#)
      and (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner#, 0) OR
              EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_TAB_SUBPART_COL_VIEW"("OBJ_NUM","INTCOL_NUM","COL","POS_NUM","SPARE1") AS 
select sc.obj#, sc.intcol#, value(c), sc.pos#, sc.spare1
  from ku$_simple_col_view c, subpartcol$ sc
  where  sc.obj#=c.obj_num
  and    sc.intcol#=c.intcol_num;

CREATE OR REPLACE FORCE VIEW "KU$_TAB_SUBPART_VIEW"("OBJ_NUM","SCHEMA_OBJ","TS_NAME","BLOCKSIZE","STORAGE","DATAOBJ_NUM","POBJ_NUM","SUBPART_NUM","LOBS","FLAGS","PCT_FREE","PCT_USED","INITRANS","MAXTRANS","ANALYZETIME","SAMPLESIZE","ROWCNT","BLKCNT","EMPCNT","AVGSPC","CHNCNT","AVGRLN","SPARE1","SPARE2","SPARE3","HIBOUNDLEN","HIBOUNDVAL") AS 
select tsp.obj#, value(o), ts.name, ts.blocksize, value(s), tsp.dataobj#,
         tsp.pobj#, tsp.subpart#,
         cast(multiset(select * from ku$_sublobfrag_view lf
                        where lf.part_obj_num=tsp.obj#
                        order by lf.intcol_num
                      ) as ku$_lobfrag_list_t
             ),
         tsp.flags, tsp.pctfree$, tsp.pctused$,
         tsp.initrans, tsp.maxtrans, tsp.analyzetime, tsp.samplesize,
         tsp.rowcnt, tsp.blkcnt, tsp.empcnt, tsp.avgspc, tsp.chncnt,
         tsp.avgrln, tsp.spare1, tsp.spare2, tsp.spare3, tsp.hiboundlen,
         sys.dbms_metadata_util.long2varchar(tsp.hiboundlen,
                                    'SYS.TABSUBPART$',
                                    'HIBOUNDVAL',
                                     tsp.rowid)
  from ku$_schemaobj_view o, ku$_storage_view s, tabsubpart$ tsp, ts$ ts
  where tsp.obj# = o.obj_num
        AND tsp.ts# = s.ts_num
        AND tsp.file# = s.file_num
        AND tsp.block# = s.block_num
        AND tsp.ts# = ts.ts#;

CREATE OR REPLACE FORCE VIEW "KU$_TAB_TSUBPART_VIEW"("BASE_OBJNUM","SPART_POS","SPART_NAME","TS_NAME","TS_NUM","FLAGS","HIBOUNDLEN","HIBOUNDVAL","TLOBS") AS 
select  dsp.bo#, dsp.spart_position, dsp.spart_name,
          (select( ts.name) from sys.ts$ ts where ts.ts# = dsp.ts#),
          dsp.ts#, dsp.flags, dsp.hiboundlen,
          sys.dbms_metadata_util.long2varchar( dsp.hiboundlen,
                                              'SYS.DEFSUBPART$',
                                              'HIBOUNDVAL',
                                              dsp.rowid),
          cast(multiset(select * from ku$_tlob_comppart_view tlcv
                        where  tlcv.base_objnum = dsp.bo#
                           and tlcv.spart_pos = dsp.spart_position
                        order by tlcv.intcol_num
                      ) as ku$_tlob_comppart_list_t)
  from    sys.defsubpart$ dsp;

CREATE OR REPLACE FORCE VIEW "KU$_TAB_TS_VIEW"("OWNER_NUM","OBJ_NUM","TS_NAME") AS 
select t.owner_num, t.obj_num, t.ts_name
  from   sys.ku$_tts_view t
  where  (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (t.owner_num,0) OR
                EXISTS ( SELECT * FROM session_roles
                        WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_TLOB_COMPPART_VIEW"("BASE_OBJNUM","COLNAME","INTCOL_NUM","SPART_POS","FLAGS","LOB_SPART_NAME","TS_NAME","TS_NUM") AS 
select  dspl.bo#, '"'||c.name||'"', dspl.intcol#,
             dspl.spart_position, dspl.flags, dspl.lob_spart_name,
             (select(t.name) from sys.ts$ t where t.ts# = dspl.lob_spart_ts#),
             dspl.lob_spart_ts#
     from    sys.col$ c, sys.defsubpartlob$ dspl
     where   dspl.bo# = c.obj#
         and dspl.intcol# = c.col#;

CREATE OR REPLACE FORCE VIEW "KU$_TRIGGERCOL_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","COL_NUM","TYPE_NUM","POSITION_NUM","INTCOL_NUM","NAME","ATTRNAME") AS 
select '1','0',
         tc.obj#, tc.col#, tc.type#, tc.position#, tc.intcol#, c.name,
         (select a.name from attrcol$ a where
                        a.obj#=tc.obj# and a.intcol#=tc.intcol#)
  from col$ c, triggercol$ tc, trigger$ t
  where tc.obj#=t.obj#
    and c.obj#=t.baseobject
    and c.intcol#=tc.intcol#;

CREATE OR REPLACE FORCE VIEW "KU$_TRIGGER_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","SCHEMA_OBJ","BASE_OBJ_NUM","BASE_OBJ","TYPE_NUM","ACT_UPDATE","ACT_INSERT","ACT_DELETE","REFOLDNAME","REFNEWNAME","DEFINITION","PARSED_DEF","WHENCLAUSE","BODY","BODY_VCNT","BODY_LEN","ENABLED","PROPERTY","SYS_EVTS","NTTRIGCOL","NTTRIGATT","REFPRTNAME","ACTIONLINENO","COLS","COMPILER_INFO") AS 
select '1','1',
         t.obj#, value(o), t.baseobject,
         (select value(bo) from ku$_schemaobj_view bo
          where t.baseobject = bo.obj_num),
         t.type#, t.update$, t.insert$, t.delete$,
         t.refoldname, t.refnewname,
         t.definition,
         sys.dbms_metadata_util.parse_trigger_definition(o.name,t.definition),
         t.whenclause,
         sys.dbms_metadata_util.long2clob(t.actionsize,
                                        'SYS.TRIGGER$',
                                        'ACTION#',
                                        t.rowid),
         NULL,
         t.actionsize,
         t.enabled, t.property, t.sys_evts,
         t.nttrigcol, t.nttrigatt, t.refprtname, t.actionlineno,
         cast(multiset(select * from ku$_triggercol_view tv
                        where tv.obj_num=t.obj#
                      ) as ku$_triggercol_list_t
             ),
         (select value(c) from ku$_switch_compiler_view c
                 where c.obj_num =o.obj_num)
 from   sys.ku$_schemaobj_view o, sys.trigger$ t
  where  t.obj# = o.obj_num AND
         (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
                EXISTS ( SELECT * FROM session_roles
                        WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_TRLINK_VIEW"("VERS_MAJOR","VERS_MINOR","NAME","FUNCTION","TYPE") AS 
select '1','0',
         tl.dbname,
         decode(tl.dbname, '+*', 'DBMS_DISTRIBUTED_TRUST_ADMIN.ALLOW_ALL',
                           '-*', 'DBMS_DISTRIBUTED_TRUST_ADMIN.DENY_ALL',
                fdef.function),
         decode(tl.dbname, '+*', 0, '-*', 0, 1)
  from   sys.trusted_list$ tl,
         ( select  decode (dbname,
                           '+*', 'DBMS_DISTRIBUTED_TRUST_ADMIN.DENY_SERVER',
                           '-*', 'DBMS_DISTRIBUTED_TRUST_ADMIN.ALLOW_SERVER')
                           function
           from    sys.trusted_list$
           where   dbname like '%*') fdef
  where (SYS_CONTEXT('USERENV','CURRENT_USERID') = 0
        OR EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_TSQUOTA_VIEW"("VERS_MAJOR","VERS_MINOR","USER_ID","USER_NAME","TS_NAME","TS_ID","MAXBLOCKS","BLOCKSIZE","GRANTOR_NUM","GRANTOR","BLOCKS","PRIV1","PRIV2","PRIV3") AS 
select  '1','0',
          u.user#, u.name, t.name, q.ts#, q.maxblocks, t.blocksize, q.grantor#,
          'SYSTEM', q.blocks, q.priv1, q.priv2, q.priv3
  from    sys.user$ u, sys.tsq$ q, sys.ts$ t
  where   q.user# = u.user# AND
          q.ts# = t.ts# AND
          q.maxblocks != 0 AND
          t.online$ IN (1, 2, 4) AND
          (SYS_CONTEXT('USERENV','CURRENT_USERID') = 0
                OR EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_TTS_IND_VIEW"("OWNER_NUM","OBJ_NUM","TS_NAME") AS 
select o.owner#, i.obj#, ts.name              -- unpartitioned indexes
  from   sys.obj$ o, sys.ind$ i, sys.ts$ ts
  where  i.ts#  = ts.ts#
  and    o.obj# = i.obj#
  and    bitand(i.property, 2) = 0
 UNION ALL
  select o.owner#, i.obj#, ts.name              -- partitioned indexes
  from   sys.obj$ o, sys.ind$ i, sys.indpart$ ip, sys.ts$ ts
  where  ip.ts# = ts.ts#
  and    i.obj# = ip.bo#
  and    o.obj# = i.obj#
  and    bitand(i.property, 2) = 2
 UNION ALL
  select o.owner#, i.obj#, ts.name              -- composite partitioned indexes
  from   sys.obj$ o, sys.ind$ i,
         sys.indcompart$ icp, sys.indsubpart$ isp, sys.ts$ ts
  where  isp.ts#  = ts.ts#
  and    icp.obj# = isp.pobj#
  and    i.obj#   = icp.bo#
  and    o.obj#   = i.obj#
  and    bitand(i.property, 2) = 2;

CREATE OR REPLACE FORCE VIEW "KU$_TTS_MVL_VIEW"("OWNER_NUM","OBJ_NUM","TS_NAME") AS 
select o.owner#, t.obj#, ts.name              -- unpartitioned heap tables
  from   sys.obj$ o, sys.tab$ t, sys.user$ u, sys.mlog$ m, sys.ts$ ts
  where  m.mowner = u.name
  and    m.log    = o.name
  and    o.owner# = u.user#
  and    o.type#  = 2
  and    o.obj#   = t.obj#
  and    t.ts#    = ts.ts#
  and    bitand(t.property, 32) = 0
 UNION ALL
  select o.owner#, t.obj#, ts.name              -- simple partitions
  from   sys.obj$ o, sys.tab$ t, sys.tabpart$ tp,
         sys.user$ u, sys.mlog$ m, sys.ts$ ts
  where  m.mowner = u.name
  and    m.log    = o.name
  and    o.owner# = u.user#
  and    o.type#  = 2
  and    o.obj#   = t.obj#
  and    bitand(t.property, 32) = 32
  and    t.obj#   = tp.bo#
  and    tp.ts#   = ts.ts#
 UNION ALL
  select o.owner#, t.obj#, ts.name              -- composite partitions
  from   sys.obj$ o, sys.tab$ t,
         sys.tabcompart$ tcp, sys.tabsubpart$ tsp,
         sys.user$ u, sys.mlog$ m, sys.ts$ ts
  where  m.mowner = u.name
  and    m.log    = o.name
  and    o.owner# = u.user#
  and    o.type#  = 2
  and    o.obj#   = t.obj#
  and    bitand(t.property, 32) = 32
  and    t.obj#   = tcp.bo#
  and    tcp.obj# = tsp.pobj#
  and    tsp.ts#  = ts.ts#;

CREATE OR REPLACE FORCE VIEW "KU$_TTS_MV_VIEW"("OWNER_NUM","OBJ_NUM","TS_NAME") AS 
select o.owner#, t.obj#, ts.name              -- unpartitioned heap tables
  from   sys.obj$ o, sys.tab$ t, sys.user$ u, sys.snap$ s, sys.ts$ ts
  where  s.sowner = u.name
  and    s.tname  = o.name
  and    o.owner# = u.user#
  and    o.type#  = 2
  and    o.obj#   = t.obj#
  and    t.ts#    = ts.ts#
  and    bitand(t.property, 32+64+512) = 0
 UNION ALL
  select o.owner#, t.obj#, ts.name              -- simple partitions
  from   sys.obj$ o, sys.tab$ t, sys.tabpart$ tp,
         sys.user$ u, sys.snap$ s, sys.ts$ ts
  where  s.sowner = u.name
  and    s.tname  = o.name
  and    o.owner# = u.user#
  and    o.type#  = 2
  and    o.obj#   = t.obj#
  and    bitand(t.property, 32+64+512) = 32
  and    t.obj#   = tp.bo#
  and    tp.ts#   = ts.ts#
 UNION ALL
  select o.owner#, t.obj#, ts.name              -- composite partitions
  from   sys.obj$ o, sys.tab$ t,
         sys.tabcompart$ tcp, sys.tabsubpart$ tsp,
         sys.user$ u, sys.snap$ s, sys.ts$ ts
  where  s.sowner = u.name
  and    s.tname  = o.name
  and    o.owner# = u.user#
  and    o.type#  = 2
  and    o.obj#   = t.obj#
  and    bitand(t.property, 32+64+512) = 32
  and    t.obj#   = tcp.bo#
  and    tcp.obj# = tsp.pobj#
  and    tsp.ts#  = ts.ts#
 UNION ALL
  select o.owner#, t.obj#, ts.name              -- IOTs
  from   sys.obj$ o, sys.tab$ t, sys.ind$ i,
         sys.user$ u, sys.snap$ s, sys.ts$ ts
  where  s.sowner = u.name
  and    s.tname  = o.name
  and    o.owner# = u.user#
  and    o.type#  = 2
  and    o.obj#   = t.obj#
  and    bitand(t.property, 32+64+512) = 64
  and    i.ts#    = ts.ts#
  and    i.obj#   = t.pctused$
 UNION ALL
  select o.owner#, t.obj#, ts.name              -- PIOTs
  from   sys.obj$ o, sys.tab$ t, sys.indpart$ ip,
         sys.user$ u, sys.snap$ s, sys.ts$ ts
  where  s.sowner = u.name
  and    s.tname  = o.name
  and    o.owner# = u.user#
  and    o.type#  = 2
  and    o.obj#   = t.obj#
  and    bitand(t.property, 32+64+512) = 32 + 64
  and    ip.ts#   = ts.ts#
  and    ip.bo#   = t.pctused$;

CREATE OR REPLACE FORCE VIEW "KU$_TTS_VIEW"("OWNER_NUM","OBJ_NUM","TS_NAME") AS 
select o.owner#, t.obj#, ts.name              -- unpartitioned heap tables
  from   sys.obj$ o, sys.tab$ t, sys.ts$ ts
  where  t.ts#  = ts.ts#
  and    o.obj# = t.obj#
  and    bitand(t.property, 32+64+512) = 0
 UNION ALL
  select o.owner#, t.obj#, ts.name              -- simple partitions
  from   sys.obj$ o, sys.tab$ t, sys.tabpart$ tp, sys.ts$ ts
  where  tp.ts# = ts.ts#
  and    t.obj# = tp.bo#
  and    o.obj# = t.obj#
  and    bitand(t.property, 32+64+512) = 32
 UNION ALL
  select o.owner#, t.obj#, ts.name              -- composite partitions
  from   sys.obj$ o, sys.tab$ t,
         sys.tabcompart$ tcp, sys.tabsubpart$ tsp, sys.ts$ ts
  where  tsp.ts#  = ts.ts#
  and    tcp.obj# = tsp.pobj#
  and    t.obj#   = tcp.bo#
  and    o.obj# = t.obj#
  and    bitand(t.property, 32+64+512) = 32
 UNION ALL
  select o.owner#, t.obj#, ts.name              -- unpartitioned IOTs
  from   sys.obj$ o, sys.tab$ t, sys.ind$ i, sys.ts$ ts
  where  i.ts#    = ts.ts#
    and  i.obj#   = t.pctused$
  and    o.obj# = t.obj#
  and    bitand(t.property, 32+64+512) = 64
 UNION ALL
  select o.owner#, t.obj#, ts.name              -- PIOTs
  from   sys.obj$ o, sys.tab$ t, sys.indpart$ ip, sys.ts$ ts
  where  ip.ts#   = ts.ts#
    and  ip.bo#   = t.pctused$
  and    o.obj# = t.obj#
  and    bitand(t.property, 32+64+512) = 32 + 64;

CREATE OR REPLACE FORCE VIEW "KU$_TYPE_BODY_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","SCHEMA_OBJ","SOURCE_LINES","COMPILER_INFO") AS 
select '1','1',
         oo.obj#,
         value(o),
         sys.dbms_metadata_util.get_source_lines(oo.name,oo.obj#,oo.type#),
         (select value(c) from ku$_switch_compiler_view c
                 where c.obj_num =oo.obj#)
  from sys.obj$ oo, ku$_schemaobj_view o
  where oo.type# = 14
    and oo.obj#  = o.obj_num
         AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
              EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_TYPE_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","SCHEMA_OBJ","OID","TYPEID","HASHCODE","SOURCE_LINES","COMPILER_INFO") AS 
select '1','1',
         oo.obj#,
         value(o),
         oo.oid$,
         t.typeid, t.hashcode,
         sys.dbms_metadata_util.get_source_lines(oo.name,oo.obj#,oo.type#),
         (select value(c) from ku$_switch_compiler_view c
                 where c.obj_num =oo.obj#)
  from sys.obj$ oo, ku$_schemaobj_view o, type$ t
  where oo.type# = 13
    and oo.obj#  = o.obj_num
    and oo.subname is null      /* latest type version */
    and oo.oid$ = t.toid
        /* type$ properties bits:
           262144=0     - latest type version
           other bits=0 - not system-generated type
        */
    and bitand(t.properties,262144+2048+64+16)=0
         AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
              EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_UNLOAD_METHOD_VIEW"("OBJ_NUM","UNLOAD_METHOD","ET_PARALLEL") AS 
select t.obj#,
      decode (
           -- Condition 1: Table has FGAC for SELECT enabled?
        (select count(*) from rls$ r where r.obj#=t.obj#
                and r.enable_flag=1 and bitand(r.stmt_type,1)=1)
        +  -- Condition 2 and 3: Encrypted cols or queue table?
        bitand(t.trigflag, 65536+8388608)
        + -- Condition 4a: BFILE columns?
        bitand(t.property, 32768)
        + -- Condition 4b: Opaque columns?
        (select count(*) FROM opqtype$ o where o.obj# = t.obj#)
        + -- Condition 5: Cols of evolved types that need upgrading?
        (select count(*) FROM coltype$ c where c.obj#=t.obj# and
                bitand(c.flags,128)>0)
        + -- Condition 6: Any LONG or LONG RAW columns that are not last?
        (select count(*) from col$ c where c.obj#=t.obj# and c.type# IN (8,24)
                and c.segcol# !=
                (select MAX(c2.segcol#) from col$ c2 where c2.obj#=t.obj#) )
        + -- Condition 7: Columns with embedded opaques?
        (select count(*) from coltype$ c, type$ ty where c.obj#=t.obj# and
                c.toid=ty.toid and bitand(ty.properties, 4096) > 0)
        , 0, 1, 4),
--
-- NOTE: The values 1 and 4 from the decode above correspond to the constants
-- prefer_direct and require_external from the package kupd$data_int defined in
-- datapump/dml/prvthpdi. If these values ever change in the package, they must
-- be changed here as well. Can't use pkg's constants because catmeta executes
-- before pkg header is installed.
--
  --
  -- Ext. Tbls. cannot unload in parallel if:
  -- 1. FGAC (row level security) is enabled (Why? see comment below...)
  -- 2. It's a nested table
  -- 3. Table contains a LOB (possible with columns of type adt, refs,
  --    varray or lob).
  --
  -- The data layer must execute as invoker's rights for unload on FGAC-enabled
  -- tables so the security of the caller is enforced (security hole if SYS
  -- as definer unloaded the table). But, kxfp processes started in response to
  -- a parallel ET unload would also run as the unprived invoker and they then
  -- fail calling our internal definer's pkg's like queueing and file mgt.
  -- Forcing parallel=1 in this case stays in the context of the worker process
  -- which *can* see the internal pkgs because they share the same owner (SYS).
  --
      decode (
        (select count(*) from rls$ r where r.obj#=t.obj# and r.enable_flag=1)
        +
        bitand(t.property, 2+8+16+8192+262144)
        , 0, 1, 0)  -- 1: Can do ET parallel unload  0: Can't
   from tab$ t;

CREATE OR REPLACE FORCE VIEW "KU$_USER_VIEW"("VERS_MAJOR","VERS_MINOR","USER_ID","NAME","TYPE_NUM","PASSWORD","DATATS","TEMPTS","CTIME","PTIME","EXPTIME","LTIME","PROFNUM","PROFNAME","USER_AUDIT","DEFROLE","DEFGRP_NUM","DEFGRP_SEQ_NUM","ASTATUS","LCOUNT","DEFSCHCLASS","EXT_USERNAME","SPARE1","SPARE2","SPARE3","SPARE4","SPARE5","SPARE6") AS 
select '1','0',
          u.user#,
          u.name,
          u.type#,
          u.password,
          ts1.name,
          ts2.name,
          u.ctime,
          u.ptime,
          u.exptime,
          u.ltime,
          u.resource$,
          p.name,
          u.audit$,
          u.defrole,
          u.defgrp#,
          u.defgrp_seq#,
          u.astatus,
          u.lcount,
          u.defschclass,
          u.ext_username,
          u.spare1,
          u.spare2,
          u.spare3,
          u.spare4,
          u.spare5,
          u.spare6
  from sys.user$ u,
       sys.ts$ ts1, sys.ts$ ts2, sys.profname$ p
  where   u.datats# = ts1.ts# AND
          u.tempts# = ts2.ts# AND
          u.type# = 1 AND
          u.resource$ = p.profile#
          AND (SYS_CONTEXT('USERENV','CURRENT_USERID') = 0
                OR EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_VIEW_OBJNUM_VIEW"("OBJ_NUM","DATAOBJ_NUM","OWNER_NUM","OWNER_NAME","NAME","NAMESPACE","SUBNAME","TYPE_NUM","TYPE_NAME","CTIME","MTIME","STIME","STATUS","REMOTEOWNER","LINKNAME","FLAGS","OID","SPARE1","SPARE2","SPARE3","SPARE4","SPARE5","SPARE6") AS 
select value(o) from ku$_schemaobj_view o, sys.view$ v
  where o.obj_num=v.obj#
  and (o.owner_name NOT IN ('SYS', 'ORDSYS', 'MDSYS', 'CTXSYS', 'ORDPLUGINS',
                            'LBACSYS', 'XDB', 'SI_INFORMTN_SCHEMA'))
  AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0)
        OR EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_VIEW_VIEW"("VERS_MAJOR","VERS_MINOR","OBJ_NUM","SCHEMA_OBJ","AUDIT_VAL","COLS","INTCOLS","PROPERTY","FLAGS","TEXTLENGTH","TEXT","WITH_OPTION","TEXTVCNT","COL_LIST","COL_LIST2","OWNER_NAME","NAME","TYPETEXTLENGTH","TYPETEXT","OIDTEXTLENGTH","OIDTEXT","TRANSTEXTLENGTH","TRANSTEXT","UNDERTEXTLENGTH","UNDERTEXT","CON1_LIST","CON2_LIST") AS 
select '1','1',
         v.obj#,
         value(o),
         v.audit$, v.cols, v.intcols, v.property, v.flags, v.textlength,
         sys.dbms_metadata_util.long2clob(v.textlength,
                                        'SYS.VIEW$',
                                        'TEXT',
                                        v.rowid),
         (select value (t)
                 from sys.ku$_constraint0_view t, cdef$ cd
                  where cd.obj# = v.obj# and
                        t.con_num = cd.con# and
                        cd.type# = 5),
         NULL,
         cast(multiset(select * from ku$_simple_col_view c
                       where c.obj_num = v.obj#
                         and (bitand(v.property,1)=0)
                        order by c.intcol_num
                      ) as ku$_simple_col_list_t
             ),
         cast(multiset(select * from ku$_column_view c
                       where c.obj_num = v.obj#
                         and (bitand(v.property,1)=1)
                        order by c.intcol_num
                      ) as ku$_column_list_t
             ),
         tv.typeowner, tv.typename, tv.typetextlength, tv.typetext,
         tv.oidtextlength, tv.oidtext, tv.transtextlength,
         sys.dbms_metadata_util.long2varchar(tv.transtextlength,
                                        'SYS.TYPED_VIEW$',
                                        'TRANSTEXT',
                                        tv.rowid),
         tv.undertextlength,
         sys.dbms_metadata_util.long2varchar(tv.undertextlength,
                                        'SYS.TYPED_VIEW$',
                                        'UNDERTEXT',
                                        tv.rowid),
         cast( multiset(select * from ku$_constraint1_view con
                        where con.obj_num = v.obj#
                       ) as ku$_constraint1_list_t
             ),
         cast( multiset(select * from ku$_constraint2_view con
                        where con.obj_num = v.obj#
                       ) as ku$_constraint2_list_t
             )
  from ku$_schemaobj_view o, sys.obj$ oo, sys.view$ v, sys.typed_view$ tv
  where oo.obj# = o.obj_num
    and oo.obj# = v.obj#
    and oo.obj# = tv.obj# (+)
         AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (o.owner_num, 0) OR
              EXISTS ( SELECT * FROM session_roles
                       WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU$_XMLSCHEMA_ELMT_VIEW"("SCHEMAOID","XMLSCHEMA","ELEMNUM","ELEMENT_NAME") AS 
select schm.sys_nc_oid$, extractValue(value(schm), '/schema/@x:schemaURL',
'xmlns="http://www.w3.org/2001/XMLSchema" xmlns:x="http://xmlns.oracle.com/xdb"'),
            extractValue(value(xel), '/element/@x:propNumber',
'xmlns="http://www.w3.org/2001/XMLSchema" xmlns:x="http://xmlns.oracle.com/xdb"'),
            extractValue(value(xel), '/element/@name')
  from xdb.xdb$element xel, xdb.xdb$schema schm
  where ref(schm) = extractValue(value(xel), '/element/@x:parentSchema',
'xmlns="http://www.w3.org/2001/XMLSchema" xmlns:x="http://xmlns.oracle.com/xdb"');

CREATE OR REPLACE FORCE VIEW "KU$_XMLSCHEMA_VIEW"("VERS_MAJOR","VERS_MINOR","OWNER_NUM","OWNER_NAME","URL","SCHEMAOID","LOCAL","SCHEMA_VAL","STRIPPED_VAL") AS 
select '1','0',
        u.user#, u.name, extractvalue(VALUE(s), '/schema/@x:schemaURL',
'xmlns="http://www.w3.org/2001/XMLSchema" xmlns:x="http://xmlns.oracle.com/xdb"'),
        s.sys_nc_oid$,
           case when under_path(value(r), '/sys/schemas/PUBLIC') = 1
                then 0 else 1 end,
         s.getclobval(),                                          -- unstripped
         xdb.dbms_xdbutil_int.XMLSchemaStripUsername(XMLTYPE(s.getClobVal()),
                                                      u.name)     -- stripped
    from sys.user$ u, xdb.xdb$schema s, xdb.xdb$resource r
    where extractvalue(VALUE(r), '/Resource/XMLRef') = ref(s)
    and u.user# = sys_op_rawtonum(extractvalue(VALUE(r),'/Resource/OwnerID'))
        AND (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (u.user#, 0) OR
                EXISTS ( SELECT * FROM session_roles
                        WHERE role='SELECT_CATALOG_ROLE' ));

CREATE OR REPLACE FORCE VIEW "KU_NOEXP_VIEW"("OBJ_TYPE","SCHEMA","NAME") AS 
SELECT  decode(n.obj_type, 2, 'TABLE', 6, 'SEQUENCE', 'ERROR'),
                n.owner, n.name
        FROM    sys.noexp$ n
      UNION
        SELECT  k.obj_type, k.schema, k.name
        FROM    sys.ku_noexp_tab k;

CREATE OR REPLACE FORCE VIEW "LOADER_COL_FLAGS"("TABLE_OWNER","TABLE_NAME","COLNAME","PROPERTY") AS 
select u.name as table_owner, o.name as table_name, c.name as colname,
               c.property as property
          from sys.col$ c, sys.obj$ o, sys.user$ u where
            o.obj# = c.obj# and u.user# = o.owner#
            and (o.owner# = userenv('schemaid')
                  or o.obj# in
                       (select oa.obj#
                        from sys.objauth$ oa
                        where grantee# in ( select kzsrorol
                                            from x$kzsro
                                          )
                       )
                  or /* user has system privileges */
                     exists (select null from v$enabledprivs
                             where priv_number in (-45 /* LOCK   ANY TABLE */,
                                                   -47 /* SELECT ANY TABLE */,
                                                   -48 /* INSERT ANY TABLE */,
                                                   -49 /* UPDATE ANY TABLE */,
                                                   -50 /* DELETE ANY TABLE */)
                             )
                 );

CREATE OR REPLACE FORCE VIEW "LOADER_COL_INFO"("TBLNAME","COLNAME","CSFORM") AS 
select o.name as tblnam,c.name as colnam,c.charsetform as csform
          from col$ c,obj$ o where
            o.obj# = c.obj# and o.type# = 2 and o.owner# = UID
            and (o.owner# = userenv('schemaid')
                  or o.obj# in
                       (select oa.obj#
                        from sys.objauth$ oa
                        where grantee# in ( select kzsrorol
                                            from x$kzsro
                                          )
                       )
                  or /* user has system privileges */
                     exists (select null from v$enabledprivs
                             where priv_number in (-45 /* LOCK   ANY TABLE */,
                                                   -47 /* SELECT ANY TABLE */,
                                                   -48 /* INSERT ANY TABLE */,
                                                   -49 /* UPDATE ANY TABLE */,
                                                   -50 /* DELETE ANY TABLE */)
                             )
      );

CREATE OR REPLACE FORCE VIEW "LOADER_COL_TYPE"("TABLE_OWNER","TABLE_NAME","COLNAME","TOID","VERSION") AS 
select u.name as table_owner, o.name as table_name, c.name as colnam,
               ct.toid as toid, ct.version# as version
          from sys.col$ c,sys.obj$ o, sys.coltype$ ct, sys.user$ u where
            o.obj# = c.obj# and ct.obj# = o.obj# and c.intcol# = ct.intcol#
            and u.user# = o.owner#
            and (o.owner# = userenv('schemaid')
                  or o.obj# in
                       (select oa.obj#
                        from sys.objauth$ oa
                        where grantee# in ( select kzsrorol
                                            from x$kzsro
                                          )
                       )
                  or /* user has system privileges */
                     exists (select null from v$enabledprivs
                             where priv_number in (-45 /* LOCK   ANY TABLE */,
                                                   -47 /* SELECT ANY TABLE */,
                                                   -48 /* INSERT ANY TABLE */,
                                                   -49 /* UPDATE ANY TABLE */,
                                                   -50 /* DELETE ANY TABLE */)
                             )
                 );

CREATE OR REPLACE FORCE VIEW "LOADER_CONSTRAINT_INFO"("OWNER","CONSTRAINT_NAME","CONSTRAINT_NUMBER","TYPE","TABLE_NAME","ENABLED","DEFER") AS 
select /*+ ordered index (cd i_cdef2) */
       u.name, con.name, cd.con#, cd.type#,o.name, cd.enabled,nvl(cd.defer,0)
   from sys.user$ u, sys.obj$ o, sys.cdef$ cd, sys.con$ con
   where   o.owner# = u.user#
   and    cd.obj#   = o.obj#
   and   con.con#   = cd.con#
   and (o.owner# = userenv('schemaid')
         or o.obj# in
              (select oa.obj#
               from sys.objauth$ oa
               where grantee# in ( select kzsrorol
                                   from x$kzsro
                                 )
              )
         or /* user has system privileges */
            exists (select null from v$enabledprivs
                    where priv_number in (-45 /* LOCK   ANY TABLE */,
                                          -47 /* SELECT ANY TABLE */,
                                          -48 /* INSERT ANY TABLE */,
                                          -49 /* UPDATE ANY TABLE */,
                                          -50 /* DELETE ANY TABLE */)
                    )
        );

CREATE OR REPLACE FORCE VIEW "LOADER_DIR_OBJS"("NAME","PATH","READ","WRITE") AS 
select o.name, d.os_path, 'TRUE', 'TRUE'
from sys.obj$ o, sys.dir$ d
where o.obj#=d.obj#
and (o.owner#=UID
or exists (select null from v$enabledprivs where priv_number in (-177,-178)))
UNION ALL
select o.name, d.os_path,
       decode(sum(decode(privilege#,17,1,0)),0, 'FALSE','TRUE'),
       decode(sum(decode(privilege#,18,1,0)),0, 'FALSE','TRUE')
from sys.obj$ o, sys.dir$ d, sys.objauth$ oa
where o.obj#=d.obj#
  and oa.obj#=o.obj#
  and oa.privilege# in (17,18)
  and oa.grantee# in (select kzsrorol from x$kzsro)
  and not (o.owner#=UID
  or exists (select null from v$enabledprivs where priv_number in (-177,-178)))
group by o.name, d.os_path;

CREATE OR REPLACE FORCE VIEW "LOADER_FILE_TS"("TABLESPACENO","FILENAME","FILENO") AS 
select file$.ts#, v$dbfile.name, file$.relfile#
   from file$, v$dbfile
   where file$.file# = v$dbfile.file#;

CREATE OR REPLACE FORCE VIEW "LOADER_FULL_ATTR_NAME"("FULL_ATTR_NAME","INTCOL_NAME","TABLE_OWNER","TABLE_NAME") AS 
select a.name as full_attr_name, c.name as intcol_name,
               u.name as table_owner,    o.name as table_name
        from sys.col$ c, sys.obj$ o, sys.user$ u, sys.attrcol$ a
        where o.obj# = c.obj# and o.owner# = u.user# and
              c.obj# = a.obj# and c.intcol# = a.intcol#
              and (o.owner# = userenv('schemaid')
                    or o.obj# in
                         (select oa.obj#
                          from sys.objauth$ oa
                          where grantee# in ( select kzsrorol
                                              from x$kzsro
                                            )
                         )
                    or /* user has system privileges */
                      exists (select null from v$enabledprivs
                              where priv_number in (-45 /* LOCK   ANY TABLE */,
                                                    -47 /* SELECT ANY TABLE */,
                                                    -48 /* INSERT ANY TABLE */,
                                                    -49 /* UPDATE ANY TABLE */,
                                                    -50 /* DELETE ANY TABLE */)
                               )
                   );

CREATE OR REPLACE FORCE VIEW "LOADER_LOB_FLAGS"("TABLE_OWNER","TABLE_NAME","COLNAME","PROPERTY") AS 
select u.name as table_owner, o.name as table_name, c.name as colnam,
               l.property as property
          from sys.col$ c,sys.obj$ o, sys.lob$ l, sys.user$ u where
            o.obj# = c.obj# and l.obj# = o.obj# and c.intcol# = l.intcol#
            and u.user# = o.owner#
            and (o.owner# = userenv('schemaid')
                  or o.obj# in
                       (select oa.obj#
                        from sys.objauth$ oa
                        where grantee# in ( select kzsrorol
                                            from x$kzsro
                                          )
                       )
                  or /* user has system privileges */
                     exists (select null from v$enabledprivs
                             where priv_number in (-45 /* LOCK   ANY TABLE */,
                                                   -47 /* SELECT ANY TABLE */,
                                                   -48 /* INSERT ANY TABLE */,
                                                   -49 /* UPDATE ANY TABLE */,
                                                   -50 /* DELETE ANY TABLE */)
                             )
                 );

CREATE OR REPLACE FORCE VIEW "LOADER_NESTED_VARRAYS"("TABLE_OWNER","TABLE_NAME") AS 
select u.name as table_owner, o.name as table_name
        from col$ c, obj$ o, user$ u, ntab$ nt
        where o.obj# = nt.ntab# and o.owner# = u.user# and
              c.obj# = nt.obj#  and c.type#  = 123 and c.intcol# = nt.intcol#
              and (o.owner# = userenv('schemaid')
                    or o.obj# in
                         (select oa.obj#
                          from sys.objauth$ oa
                          where grantee# in ( select kzsrorol
                                              from x$kzsro
                                            )
                         )
                    or /* user has system privileges */
                      exists (select null from v$enabledprivs
                              where priv_number in (-45 /* LOCK   ANY TABLE */,
                                                    -47 /* SELECT ANY TABLE */,
                                                    -48 /* INSERT ANY TABLE */,
                                                    -49 /* UPDATE ANY TABLE */,
                                                    -50 /* DELETE ANY TABLE */)
                               )
                   );

CREATE OR REPLACE FORCE VIEW "LOADER_OID_INFO"("TABLE_OWNER","TABLE_NAME","OID_TYPE","COLUMN_NAME","COLUMN_TYPE","LENGTH","CHAR_LENGTH","PRECISION","SCALE","NULLABLE","CHARSETID","INDEX_POSITION","CHAR_LENGTH_SEMANTICS") AS 
select u.name, o.name, decode(bitand(c.property, 2), 0, 2, 1),
               decode(ac.name, null, c.name, ac.name),
               c.type#, c.length, c.spare3,
               decode(c.precision#, null, 0, c.precision#),
               decode(c.scale, null, 0, c.scale),
               decode(sign(c.null$), 0, 1, 0), c.charsetid, ic.pos#,
               decode(bitand(c.property, 8388608), 8388608, 1, 0)
        from sys.col$ c, sys.obj$ o, sys.user$ u, sys.attrcol$ ac,
             sys.icol$ ic
        where o.owner# = u.user# and c.obj# = o.obj#
          and c.obj# = ac.obj# (+) and c.intcol# = ac.intcol# (+)
          and c.obj# = ic.bo# and c.col# = ic.col#
          and c.intcol# = ic.intcol#
          and (o.owner# = userenv('SCHEMAID')
                or o.obj# in
                     (select oa.obj#
                      from sys.objauth$ oa
                      where grantee# in ( select kzsrorol
                                          from x$kzsro
                                        )
                     )
                or exists (select null from v$enabledprivs
                           where priv_number in (-45 /* LOCK ANY TABLE */,
                                                 -47 /* SELECT ANY TABLE */,
                                                 -48 /* INSERT ANY TABLE */,
                                                 -49 /* UPDATE ANY TABLE */,
                                                 -50 /* DELETE ANY TABLE */)
                          )
              )
        order by o.obj#, ic.pos#;

CREATE OR REPLACE FORCE VIEW "LOADER_PARAM_INFO"("BLOCKSZ","SERIALIZABLE") AS 
select v1.value, v2.value from v$parameter v1, v$parameter v2
where v1.name = 'db_block_size' and  v2.name = 'serializable';

CREATE OR REPLACE FORCE VIEW "LOADER_PART_INFO"("PNAME","OBJECTNO","BASEOBJECTNO","TABLESPACENO") AS 
select o.subname, tp.obj#, tp.bo#, tp.ts#
from sys.obj$ o, sys.tabpart$ tp, sys.tab$ t
where tp.bo#  = t.obj#
and   tp.obj# = o.obj#
 and (o.owner# = userenv('schemaid')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
          exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK   ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                  )
      );

CREATE OR REPLACE FORCE VIEW "LOADER_REF_INFO"("OWNER","TABLE_NAME","OBJECT_ID_TYPE") AS 
select owner, table_name, object_id_type
        from all_object_tables;

CREATE OR REPLACE FORCE VIEW "LOADER_SKIP_UNUSABLE_INDEXES"("VALUE") AS 
select count(*) as value from v$parameter
   where upper(name) = 'SKIP_UNUSABLE_INDEXES'
   and value = 'TRUE';

CREATE OR REPLACE FORCE VIEW "LOADER_TAB_INFO"("NAME","NUMCOLS","OWNER","OBJECTNO","TABLESPACENO","PARTITIONED") AS 
select o.name, t.cols, u.name, t.obj#, t.ts#,
       decode(bitand(t.property, 32), 32, 'YES', 'NO')
from sys.tab$ t, sys.obj$ o, sys.user$ u
where t.obj# = o.obj#
and o.owner# = u.user#
 and (o.owner# = userenv('schemaid')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
          exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK   ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                  )
      );

CREATE OR REPLACE FORCE VIEW "LOADER_TRIGGER_INFO"("TRIGGER_OWNER","TRIGGER_NAME","TABLE_OWNER","TABLE_NAME","ENABLED") AS 
select u1.name, o1.name, u.name, o.name, t.enabled
   from sys.obj$ o, sys.obj$ o1, sys.user$ u, sys.user$ u1, sys.trigger$ t
   where t.baseobject = o.obj#
   and o.owner# = u.user#
   and o1.owner# = u1.user#
   and t.obj# = o1.obj#
 and (o.owner# = userenv('schemaid')
       or o.obj# in
            (select oa.obj#
             from sys.objauth$ oa
             where grantee# in ( select kzsrorol
                                 from x$kzsro
                               )
            )
       or /* user has system privileges */
          exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK   ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                  )
     );

CREATE OR REPLACE FORCE VIEW "LOBCOMPPARTV$"("PARTOBJ#","LOBJ#","TABPARTOBJ#","INDPARTOBJ#","PART#","DEFTS#","DEFCHUNK","DEFPCTVER$","DEFFLAGS","DEFPRO","DEFINIEXTS","DEFEXTSIZE","DEFMINEXTS","DEFMAXEXTS","DEFEXTPCT","DEFLISTS","DEFGROUPS","DEFBUFPOOL","SPARE1","SPARE2","SPARE3") AS 
select partobj#, lobj#, tabpartobj#, indpartobj#,
          row_number() over (partition by lobj# order by part#),
          defts#, defchunk, defpctver$, defflags, defpro, definiexts,
          defextsize, defminexts, defmaxexts, defextpct, deflists,
          defgroups, defbufpool, spare1, spare2, spare3
from lobcomppart$;

CREATE OR REPLACE FORCE VIEW "LOBFRAGV$"("FRAGOBJ#","PARENTOBJ#","TABFRAGOBJ#","INDFRAGOBJ#","FRAG#","FRAGTYPE$","TS#","FILE#","BLOCK#","CHUNK","PCTVERSION$","FRAGFLAGS","FRAGPRO","SPARE1","SPARE2","SPARE3") AS 
select fragobj#, parentobj#, tabfragobj#, indfragobj#,
          row_number() over (partition by parentobj# order by frag#),
          fragtype$, ts#, file#, block#, chunk, pctversion$, fragflags,
          fragpro, spare1, spare2, spare3
from lobfrag$;

CREATE OR REPLACE FORCE VIEW "LOGSTDBY_LOG"("FIRST_CHANGE#","NEXT_CHANGE#","SEQUENCE#","THREAD#","FIRST_TIME","NEXT_TIME") AS 
select first_change#, next_change#, sequence#, thread#,
         first_time, next_time
  from system.logmnr_log$ where session# =
     (select value from system.logstdby$parameters where name = 'LMNR_SID')
    /* comment */
 union
  select first_change#, (last_change# + 1) next_change#, sequence#, thread#,
         first_time, last_time next_time
  from v$standby_log where status = 'ACTIVE';

CREATE OR REPLACE FORCE VIEW "LOGSTDBY_SUPPORT"("OWNER","NAME","TYPE#","OBJ#","FULL_SBY","CURRENT_SBY","GENERATED_SBY") AS 
select owner, name, type#, obj#, gensby full_sby, current_sby,
   (case
     when supposed_sby = 1 and not exists
     (select 1
      from system.logstdby$skip s
      where statement_opt = 'DML' and proc is null
        and error is null
        and ((use_like = 0 and l.owner = s.schema and l.name = s.name) or
             (use_like = 1 and
              l.owner like s.schema and l.name like s.name) or
             (use_like = 2 and
              l.owner like s.schema escape esc and
              l.name like s.name escape esc)))
     then 1
     else 0 end) generated_sby
 from
  (select owner, name, type#, obj#,
          decode(gensby, 1, 1, 0) supposed_sby,
          decode(bitand(tflags, 1073741824), 1073741824, 1, 0) current_sby,
          gensby
   from
     (select u.name owner, o.name name, o.type#,
             o.obj#, t.property tprop, t.flags tflags,
/* BEGIN SECTION 1 COMMON CODE: LOGSTDBY_SUPPORT - DBA_LOGSTDBY_UNSUPPORTED */
 (case
    /* The following are tables that are in an internal schema or
     * are tables like object not visible to the user or
     * are tables we support indirectly like an mv log or
     * are nested tables for which joining together column info eludes me. */
  when ((exists (select 1 from dba_server_registry d where d.schema = u.name)
         or
         exists (select 1 from system.logstdby$skip_support s
                 where s.name = u.name and action = 0))
        and not exists
               (select 1 from system.logstdby$skip_support s
                where s.name = u.name and action = -1))
    or bitand(o.flags,
                2                                       /* temporary object */
              + 4                                /* system generated object */
              + 16                                      /* secondary object */
              + 32                                  /* in-memory temp table */
              + 128                           /* dropped table (RecycleBin) */
             ) != 0
    or bitand(t.flags,
                262144     /* 0x00040000        Summary Container Table, MV */
              + 134217728  /* 0x08000000          in-memory temporary table */
             ) != 0
    or bitand(t.property,
                512        /* 0x00000200               iot OVeRflow segment */
              + 8192       /* 0x00002000                       nested table */
              + 131072     /* 0x00020000 table is used as an AQ queue table */
              + 4194304    /* 0x00400000             global temporary table */
              + 8388608    /* 0x00800000   session-specific temporary table */
              + 33554432   /* 0x02000000        Read Only Materialized View */
              + 67108864   /* 0x04000000            Materialized View table */
              + 134217728  /* 0x08000000                    Is a Sub object */
              + 2147483648 /* 0x80000000                     eXternal TaBle */
             ) != 0
    or exists                                                /* MVLOG table */
       (select 1
        from sys.mlog$ ml where ml.mowner = u.name and ml.log = o.name)
  then -1
    /* The following tables are user visible tables that we choose to
     * skip because of some unsupported attribute of the table or column */
  when bitand(t.property,
                  1        /* 0x00000001                        typed table */
              + 128        /* 0x00000080              IOT with row overflow */
              + 256        /* 0x00000100            IOT with row clustering */
             ) != 0
    or bitand(t.flags,
                536870912  /* 0x20000000  Mapping Tab for Phys rowid of IOT */
             ) != 0
    or bitand(t.property, 262208) = 262208   /* 0x40+0x40000 IOT + user LOB */
    or bitand(t.property, 2112) = 2112     /* 0x40+0x800 IOT + internal LOB */
    or                                           /* IOT with "Row Movement" */
       (bitand(t.property, 64) = 64 and bitand(t.flags, 131072) = 131072)
    or                                                       /* Compression */
       (bitand(nvl(s.spare1,0), 2048) = 2048 and bitand(t.property, 32) != 32)
    or o.oid$ is not null
/* END SECTION 1 COMMON CODE */
       or bitand(t.property,
             /* The following column properties are not checked in the
              * common section because they are reflected in the column
              * definitions and we want to see just those columns */
                + 2        /* 0x00000002                    has ADT columns */
                + 4        /* 0x00000004           has nested-TABLE columns */
                + 8        /* 0x00000008                    has REF columns */
               + 16        /* 0x00000010                  has array columns */
            + 32768        /* 0x00008000                   has FILE columns */
             ) != 0
       or exists
           (select 1 from sys.col$ c
            where t.obj# = c.obj#
              and bitand(c.property, 32) != 32                /* Not hidden */
              and
/* BEGIN SECTION 2 COMMON CODE: LOGSTDBY_SUPPORT - DBA_LOGSTDBY_UNSUPPORTED */
 (c.type# not in (
                  1,                             /* VARCHAR2 */
                  2,                               /* NUMBER */
                  8,                                 /* LONG */
                  12,                                /* DATE */
                  24,                            /* LONG RAW */
                  96,                                /* CHAR */
                  100,                       /* BINARY FLOAT */
                  101,                      /* BINARY DOUBLE */
                  112,                     /* CLOB and NCLOB */
                  113,                               /* BLOB */
                  180,                     /* TIMESTAMP (..) */
                  181,       /* TIMESTAMP(..) WITH TIME ZONE */
                  182,         /* INTERVAL YEAR(..) TO MONTH */
                  183,     /* INTERVAL DAY(..) TO SECOND(..) */
                  231) /* TIMESTAMP(..) WITH LOCAL TIME ZONE */
  and (c.type# != 23                      /* RAW not RAW OID */
       or (c.type# = 23 and bitand(c.property, 2) = 2)))
/* END SECTION 2 COMMON CODE */
      ) then 0 else 1 end) gensby
      from sys.obj$ o, sys.user$ u, sys.tab$ t, sys.seg$ s
      where o.owner# = u.user#
        and o.obj# = t.obj#
        and t.file# = s.file# (+)
        and t.block# = s.block# (+)
        and t.ts# = s.ts# (+)
        and t.obj# = o.obj#) ltabs
   union all
   select u.name owner, o.name name, o.type#, o.obj#,
    nvl(                                /* if internal schema then 0 else 1 */
     (select 0 from dual
      where
       ((exists (select 1 from dba_server_registry d where d.schema = u.name)
         or
         exists (select 1 from system.logstdby$skip_support s
                 where s.name = u.name and action = 0))
        and not exists
               (select 1 from system.logstdby$skip_support s
                where s.name = u.name and action = -1))), 1) supposed_sby,
          decode(bitand(s.flags, 8), 8, 1, 0) current_sby,
          /* not used for sequences use bogus constant */ 1 gensby
   from obj$ o, user$ u, seq$ s
   where o.owner# = u.user#
     and o.obj# = s.obj#) l;

CREATE OR REPLACE FORCE VIEW "LOGSTDBY_UNSUPPORTED_TABLES"("OWNER","TABLE_NAME") AS 
select owner, name table_name
  from sys.logstdby_support
  where type#=2 and full_sby=0;

CREATE OR REPLACE FORCE VIEW "NLS_DATABASE_PARAMETERS"("PARAMETER","VALUE") AS 
select name,
       substr(value$, 1, 40)
from props$
where name like 'NLS%';

CREATE OR REPLACE FORCE VIEW "NLS_INSTANCE_PARAMETERS"("PARAMETER","VALUE") AS 
select substr(upper(name), 1, 30),
       substr(value, 1, 40)
from v$parameter
where name like 'nls%';

CREATE OR REPLACE FORCE VIEW "NLS_SESSION_PARAMETERS"("PARAMETER","VALUE") AS 
select substr(parameter, 1, 30),
       substr(value, 1, 40)
from v$nls_parameters
where parameter != 'NLS_CHARACTERSET' and
 parameter != 'NLS_NCHAR_CHARACTERSET';

CREATE OR REPLACE FORCE VIEW "ORA_KGLR7_DB_LINKS"("OWNER","NAME","USERNAME") AS 
select u.name, l.name, l.userid
from sys.link$ l, sys.user$ u
where l.owner# in (userenv('SCHEMAID'), 1 /* PUBLIC */)
  and l.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "ORA_KGLR7_DEPENDENCIES"("OWNER","NAME","TYPE","PARENT_OWNER","PARENT_NAME","PARENT_TYPE","PARENT_LINK_NAME","PARENT_TIMESTAMP","ORDER_NUMBER","OBJ#","PROPERTY") AS 
select u.name, o.name, o.type#,
    decode(o2.linkname, null, u2.name, o2.remoteowner), o2.name, o2.type#,
         o2.linkname, d.p_timestamp, d.order#, o.obj#, d.property
from sys.obj$ o, sys.dependency$ d,
     sys.user$ u, sys.obj$ o2, sys.user$ u2
where o.obj# = d.d_obj#
  and o.owner# = u.user#
  and o.status = 1 /* VALID/AUTHORIZED WITHOUT ERRORS */
  and (o2.obj# = d.p_obj# and o2.owner# = u2.user# and
       (o2.namespace = 1 /* TABLE/PROCEDURE */
       or
       o2.namespace = 2 /* BODY */))
  and (o.owner# in (userenv('SCHEMAID'), 1 /* PUBLIC */)
       or (o.namespace in (1 /* TABLE/PROCEDURE */,
                           2 /* PACKAGE BODY */)
           and (o.type# in (2 /* TABLE */, 4 /* VIEW */, 9 /* PACKAGE */,
                           13 /* TYPE */)
                or
                o.obj# in (select obj# from sys.objauth$
                           where grantee# in (select kzsrorol
                                              from x$kzsro)
                             and privilege# = 12 /* EXECUTE */)
                or
                exists (select null from sys.sysauth$
                        where grantee# in (select kzsrorol
                                           from x$kzsro)
                             and (o.type# in (7 /* PROCEDURE */,
                                             8 /* FUNCTION */,
                                             11 /* PACKAGE BODY */) and
                                  privilege# = -144 /* EXECUTE ANY PROCEDURE */
                                  )))))
union
select u.name, o.name, o.type#, 'SYS', po.name,
      decode(po.type, 'TABLE', 2, 'VIEW', 4, 2),
         null, d.p_timestamp, d.order#, o.obj#, d.property
from sys.obj$ o, sys.v$fixed_table po, sys.dependency$ d,
     sys.user$ u
where o.obj# = d.d_obj#
  and o.owner# = u.user#
  and o.status = 1 /* VALID/AUTHORIZED WITHOUT ERRORS */
  and po.object_id = d.p_obj#
  and (o.owner# in (userenv('SCHEMAID'), 1 /* PUBLIC */)
       or (o.namespace in (1 /* TABLE/PROCEDURE */,
                           2 /* PACKAGE BODY */)
           and (o.type# in (2 /* TABLE */, 4 /* VIEW */, 9 /* PACKAGE */,
                           13 /* TYPE */)
                or
                o.obj# in (select obj# from sys.objauth$
                           where grantee# in (select kzsrorol
                                              from x$kzsro)
                             and privilege# = 12 /* EXECUTE */)
                or
                exists (select null from sys.sysauth$
                        where grantee# in (select kzsrorol
                                           from x$kzsro)
                             and (o.type# in (7 /* PROCEDURE */,
                                             8 /* FUNCTION */,
                                             11 /* PACKAGE BODY */) and
                                  privilege# = -144 /* EXECUTE ANY PROCEDURE */
                                  )))))
union
select u.name, o.name, o.type#, 'SYS', po.name_kqfp,
         po.type_kqfp, /* Note: currently spec=1 and body=2 */
         null, d.p_timestamp, d.order#, o.obj#, d.property
from sys.obj$ o, sys.x$kqfp po, sys.dependency$ d,
     sys.user$ u
where o.obj# = d.d_obj#
  and o.owner# = u.user#
  and o.status = 1 /* VALID/AUTHORIZED WITHOUT ERRORS */
  and po.kobjn_kqfp = d.p_obj#
  and (o.owner# in (userenv('SCHEMAID'), 1 /* PUBLIC */)
       or (o.namespace in (1 /* TABLE/PROCEDURE */,
                           2 /* PACKAGE BODY */)
           and (o.type# in (2 /* TABLE */, 4 /* VIEW */, 9 /* PACKAGE */,
                           13 /* TYPE */)
                or
                o.obj# in (select obj# from sys.objauth$
                           where grantee# in (select kzsrorol
                                              from x$kzsro)
                             and privilege# = 12 /* EXECUTE */)
                or
                exists (select null from sys.sysauth$
                        where grantee# in (select kzsrorol
                                           from x$kzsro)
                             and (o.type# in (7 /* PROCEDURE */,
                                             8 /* FUNCTION */,
                                             11 /* PACKAGE BODY */) and
                                  privilege# = -144 /* EXECUTE ANY PROCEDURE */
                                  )))));

CREATE OR REPLACE FORCE VIEW "ORA_KGLR7_IDL_CHAR"("OWNER","NAME","TYPE","PART","VERSION","PIECE#","LENGTH","PIECE","OBJ#") AS 
select /*+ index(i i_idl_char1) +*/
       o.owner, o.name, o.type, i.part, i.version,
       i.piece#, i.length, i.piece, o.object_id
from sys.ora_kglr7_objects o, sys.idl_char$ i
where o.object_id = i.obj#
  and (o.type in (5 /* SYNONYM */, 2 /* TABLE */, 4 /* VIEW */,
                  9 /* PACKAGE */, 13 /* TYPE */)
       or
       o.owner_id in (userenv('SCHEMAID'), 1 /* PUBLIC */)
       or
       o.object_id in (select obj# from sys.objauth$
                  where grantee# in (select kzsrorol from x$kzsro)
                    and privilege# in (3 /* DELETE */, 6 /* INSERT */,
                                       7 /* LOCK */, 9 /* SELECT */,
                                       10 /* UPDATE */,
                                       12 /* EXECUTE */))
       or
       exists (select null from sys.sysauth$
               where grantee# in (select kzsrorol from x$kzsro)
                 and (o.type in (7 /* PROCEDURE */, 8 /* FUNCTION */,
                                 11 /* PACKAGE BODY */)
                                 and
                      privilege# = -144 /* EXECUTE ANY PROCEDURE */
                      or
                      o.type = 6 /* SEQUENCE */ and
                      privilege# = -109 /* SELECT ANY SEQUENCE */)));

CREATE OR REPLACE FORCE VIEW "ORA_KGLR7_IDL_SB4"("OWNER","NAME","TYPE","PART","VERSION","PIECE#","LENGTH","PIECE","OBJ#") AS 
select /*+ index(i i_idl_sb41) +*/
       o.owner, o.name, o.type, i.part, i.version,
       i.piece#, i.length, i.piece, o.object_id
from sys.ora_kglr7_objects o, sys.idl_sb4$ i
where o.object_id = i.obj#
  and (o.type in (5 /* SYNONYM */, 2 /* TABLE */, 4 /* VIEW */,
                  9 /* PACKAGE */, 13 /* TYPE */)
       or
       o.owner_id in (userenv('SCHEMAID'), 1 /* PUBLIC */)
       or
       o.object_id in (select obj# from sys.objauth$
                  where grantee# in (select kzsrorol from x$kzsro)
                    and privilege# in (3 /* DELETE */, 6 /* INSERT */,
                                       7 /* LOCK */, 9 /* SELECT */,
                                       10 /* UPDATE */,
                                       12 /* EXECUTE */))
       or
       exists (select null from sys.sysauth$
               where grantee# in (select kzsrorol from x$kzsro)
                 and (o.type in (7 /* PROCEDURE */, 8 /* FUNCTION */,
                                 11 /* PACKAGE BODY */)
                                 and
                      privilege# = -144 /* EXECUTE ANY PROCEDURE */
                      or
                      o.type = 6 /* SEQUENCE */ and
                      privilege# = -109 /* SELECT ANY SEQUENCE */)));

CREATE OR REPLACE FORCE VIEW "ORA_KGLR7_IDL_UB1"("OWNER","NAME","TYPE","PART","VERSION","PIECE#","LENGTH","PIECE","OBJ#") AS 
select /*+ index(i i_idl_ub11) +*/
       o.owner, o.name, o.type, i.part, i.version,
       i.piece#, i.length, i.piece, o.object_id
from sys.ora_kglr7_objects o, sys.idl_ub1$ i
where o.object_id = i.obj#
  and (o.type in (5 /* SYNONYM */, 2 /* TABLE */, 4 /* VIEW */,
                  9 /* PACKAGE */, 13 /* TYPE */)
       or
       o.owner_id in (userenv('SCHEMAID'), 1 /* PUBLIC */)
       or
       o.object_id in (select obj# from sys.objauth$
                  where grantee# in (select kzsrorol from x$kzsro)
                    and privilege# in (3 /* DELETE */, 6 /* INSERT */,
                                       7 /* LOCK */, 9 /* SELECT */,
                                       10 /* UPDATE */,
                                       12 /* EXECUTE */))
       or
       exists (select null from sys.sysauth$
               where grantee# in (select kzsrorol from x$kzsro)
                 and (o.type in (7 /* PROCEDURE */, 8 /* FUNCTION */,
                                 11 /* PACKAGE BODY */)
                                 and
                      privilege# = -144 /* EXECUTE ANY PROCEDURE */
                      or
                      o.type = 6 /* SEQUENCE */ and
                      privilege# = -109 /* SELECT ANY SEQUENCE */)));

CREATE OR REPLACE FORCE VIEW "ORA_KGLR7_IDL_UB2"("OWNER","NAME","TYPE","PART","VERSION","PIECE#","LENGTH","PIECE","OBJ#") AS 
select /*+ index(i i_idl_ub21) +*/
       o.owner, o.name, o.type, i.part, i.version,
       i.piece#, i.length, i.piece, o.object_id
from sys.ora_kglr7_objects o, sys.idl_ub2$ i
where o.object_id = i.obj#
  and (o.type in (5 /* SYNONYM */, 2 /* TABLE */, 4 /* VIEW */,
                  9 /* PACKAGE */, 13 /* TYPE */)
       or
       o.owner_id in (userenv('SCHEMAID'), 1 /* PUBLIC */)
       or
       o.object_id in (select obj# from sys.objauth$
                  where grantee# in (select kzsrorol from x$kzsro)
                    and privilege# in (3 /* DELETE */, 6 /* INSERT */,
                                       7 /* LOCK */, 9 /* SELECT */,
                                       10 /* UPDATE */,
                                       12 /* EXECUTE */))
       or
       exists (select null from sys.sysauth$
               where grantee# in (select kzsrorol from x$kzsro)
                 and (o.type in (7 /* PROCEDURE */, 8 /* FUNCTION */,
                                 11 /* PACKAGE BODY */)
                                 and
                      privilege# = -144 /* EXECUTE ANY PROCEDURE */
                      or
                      o.type = 6 /* SEQUENCE */ and
                      privilege# = -109 /* SELECT ANY SEQUENCE */)));

CREATE OR REPLACE FORCE VIEW "ORA_KGLR7_OBJECTS"("OWNER","NAME","LINK_NAME","OWNER_ID","OBJECT_ID","TYPE") AS 
select decode(o.linkname, null, u.name, o.remoteowner), o.name,
       o.linkname, u.user#, o.obj#, o.type#
from sys.obj$ o, sys.user$ u
where o.owner# = u.user#
  and (o.namespace = 1 /* TABLE/PROCEDURE */
       or
       o.namespace = 2 /* BODY */)
union
select 'SYS', name, null, 0, object_id,
       decode(type, 'TABLE', 2, 'VIEW', 4, 2)
from sys.v$fixed_table;

CREATE OR REPLACE FORCE VIEW "PARSED_PIECES"("OBJ#","BYTES") AS 
select i.obj#, i.length
  from sys.idl_ub1$ i
  where i.part = 0
union all
  select i.obj#, i.length
  from sys.idl_ub2$ i
  where i.part = 0
union all
  select i.obj#, i.length
  from sys.idl_sb4$ i
  where i.part = 0
union all
  select i.obj#, i.length
  from sys.idl_char$ i
  where i.part = 0;

CREATE OR REPLACE FORCE VIEW "PARSED_SIZE"("OBJ#","BYTES") AS 
select c.obj#, sum(c.bytes)
  from sys.parsed_pieces c
  group by c.obj#;

CREATE OR REPLACE FORCE VIEW "PLUGGABLE_SET_CHECK"("OBJ1_OWNER","OBJ1_NAME","OBJ1_SUBNAME","OBJ1_TYPE","TS1_NAME","OBJ2_NAME","OBJ2_SUBNAME","OBJ2_TYPE","OBJ2_OWNER","TS2_NAME","CONSTRAINT_NAME","REASON","MESG_ID") AS 
select "OBJ1_OWNER","OBJ1_NAME","OBJ1_SUBNAME","OBJ1_TYPE","TS1_NAME","OBJ2_NAME","OBJ2_SUBNAME","OBJ2_TYPE","OBJ2_OWNER","TS2_NAME","CONSTRAINT_NAME","REASON","MESG_ID" from UNI_PLUGGABLE_SET_CHECK
union all
    select OBJ2_OWNER,OBJ2_NAME,OBJ2_SUBNAME,OBJ2_TYPE,TS2_NAME,
           OBJ1_NAME,OBJ1_SUBNAME,OBJ1_TYPE,OBJ1_OWNER,TS1_NAME,
           CONSTRAINT_NAME,REASON,MESG_ID
    from  UNI_PLUGGABLE_SET_CHECK
    where obj1_type in ('TABLE PARTITION','LOB','TABLE',
                        'TABLE SUBPARTITION') and
          obj2_type in ('TABLE PARTITION','LOB','TABLE',
                        'TABLE SUBPARTITION')
      and mesg_id not in (2, 43, 44) or mesg_id in (30);

CREATE OR REPLACE FORCE VIEW "PRODUCT_COMPONENT_VERSION"("PRODUCT","VERSION","STATUS") AS 
(select
substr(banner,1, instr(banner,'Version')-1),
substr(banner, instr(banner,'Version')+8,
instr(banner,' - ')-(instr(banner,'Version')+8)),
substr(banner,instr(banner,' - ')+3)
from v$version
where instr(banner,'Version') > 0
and
((instr(banner,'Version') <   instr(banner,'Release')) or
instr(banner,'Release') = 0))
union
(select
substr(banner,1, instr(banner,'Release')-1),
substr(banner, instr(banner,'Release')+8,
instr(banner,' - ')-(instr(banner,'Release')+8)),
substr(banner,instr(banner,' - ')+3)
from v$version
where instr(banner,'Release') > 0
and
instr(banner,'Release') <   instr(banner,' - '));

CREATE OR REPLACE FORCE VIEW "PROXY_ROLES"("PROXY","CLIENT","ROLE") AS 
select u1.name,
       u2.name,
       u3.name
from sys.user$ u1, sys.user$ u2, sys.user$ u3, sys.proxy_role_info$ p
where u1.user# = p.proxy#
  and u2.user# = p.client#
  and u3.user# = p.role#;

CREATE OR REPLACE FORCE VIEW "PROXY_USERS"("PROXY","CLIENT","AUTHENTICATION","FLAGS") AS 
select u1.name,
       u2.name,
       decode(p.credential_type#, 0, 'NO',
                                  5, 'YES'),
       decode(p.flags, 0, null,
                       1, 'PROXY MAY ACTIVATE ALL CLIENT ROLES',
                       2, 'NO CLIENT ROLES MAY BE ACTIVATED',
                       4, 'PROXY MAY ACTIVATE ROLE',
                       5, 'PROXY MAY ACTIVATE ALL CLIENT ROLES',
                       8, 'PROXY MAY NOT ACTIVATE ROLE')
from sys.user$ u1, sys.user$ u2, sys.proxy_info$ p
where u1.user# = p.proxy#
  and u2.user# = p.client#;

CREATE OR REPLACE FORCE VIEW "PROXY_USERS_AND_ROLES"("PROXY","CLIENT","FLAGS","ROLE") AS 
select u.proxy,
       u.client,
       u.flags,
       r.role
from sys.proxy_users u, sys.proxy_roles r
where u.proxy  = r.proxy
  and u.client = r.client;

CREATE OR REPLACE FORCE VIEW "PS1$"("LOCAL_TRAN_ID","SESSION_ID","BRANCH_ID","INTERFACE","TYPE","PARENT_DBID","PARENT_DB","DB_USERID","DB_USER") AS 
select  ps."LOCAL_TRAN_ID",ps."SESSION_ID",ps."BRANCH_ID",ps."INTERFACE",ps."TYPE#",ps."PARENT_DBID",ps."PARENT_DB",ps."DB_USERID", u.name db_user
from    sys.pending_sessions$ ps, sys.user$ u
where   ps.db_userid = u.user#;

CREATE OR REPLACE FORCE VIEW "PSS1$"("LOCAL_TRAN_ID","SESSION_ID","SUB_SESSION_ID","INTERFACE","DBID","LINK_OWNER","DBLINK","BRANCH_ID","SPARE","OWNER_NAME") AS 
select  pss."LOCAL_TRAN_ID",pss."SESSION_ID",pss."SUB_SESSION_ID",pss."INTERFACE",pss."DBID",pss."LINK_OWNER",pss."DBLINK",pss."BRANCH_ID",pss."SPARE", u.name owner_name
from    sys.pending_sub_sessions$ pss, sys.user$ u
where   pss.link_owner = u.user#;

CREATE OR REPLACE FORCE VIEW "PUBLICSYN"("SNAME","CREATOR","TNAME","DATABASE","TABTYPE") AS 
select sname, creator, tname, database, tabtype
  from  synonyms
  where syntype = 'PUBLIC';

CREATE OR REPLACE FORCE VIEW "PUBLIC_DEPENDENCY"("OBJECT_ID","REFERENCED_OBJECT_ID") AS 
select d.d_obj#, d.p_obj# from dependency$ d;

CREATE OR REPLACE FORCE VIEW "QT4793_BUFFER"("ADDR","INDX","INST_ID","OBJNO","QUEUE_ID","MSG_ID","CORR_ID","SEQUENCE_NUM","MSG_NUM","MSG_STATE","MSG_PRIORITY","EXPIRATION","ENQ_TIME","ENQ_USER_ID","ENQ_USER_NAME","SENDER_NAME","SENDER_ADDRESS","SENDER_PROTOCOL","ORIGINAL_MSGID","SRCSEQUENCE_NUM","SUBSCRIBER_ID") AS 
SELECT "ADDR","INDX","INST_ID","OBJNO","QUEUE_ID","MSG_ID","CORR_ID","SEQUENCE_NUM","MSG_NUM","MSG_STATE","MSG_PRIORITY","EXPIRATION","ENQ_TIME","ENQ_USER_ID","ENQ_USER_NAME","SENDER_NAME","SENDER_ADDRESS","SENDER_PROTOCOL","ORIGINAL_MSGID","SRCSEQUENCE_NUM","SUBSCRIBER_ID" FROM X$BUFFER WHERE objno = 4793;

CREATE OR REPLACE FORCE VIEW "QT64401_BUFFER"("ADDR","INDX","INST_ID","OBJNO","QUEUE_ID","MSG_ID","CORR_ID","SEQUENCE_NUM","MSG_NUM","MSG_STATE","MSG_PRIORITY","EXPIRATION","ENQ_TIME","ENQ_USER_ID","ENQ_USER_NAME","SENDER_NAME","SENDER_ADDRESS","SENDER_PROTOCOL","ORIGINAL_MSGID","SRCSEQUENCE_NUM","SUBSCRIBER_ID") AS 
SELECT "ADDR","INDX","INST_ID","OBJNO","QUEUE_ID","MSG_ID","CORR_ID","SEQUENCE_NUM","MSG_NUM","MSG_STATE","MSG_PRIORITY","EXPIRATION","ENQ_TIME","ENQ_USER_ID","ENQ_USER_NAME","SENDER_NAME","SENDER_ADDRESS","SENDER_PROTOCOL","ORIGINAL_MSGID","SRCSEQUENCE_NUM","SUBSCRIBER_ID" FROM X$BUFFER WHERE objno = 64401;

CREATE OR REPLACE FORCE VIEW "QT6612_BUFFER"("ADDR","INDX","INST_ID","OBJNO","QUEUE_ID","MSG_ID","CORR_ID","SEQUENCE_NUM","MSG_NUM","MSG_STATE","MSG_PRIORITY","EXPIRATION","ENQ_TIME","ENQ_USER_ID","ENQ_USER_NAME","SENDER_NAME","SENDER_ADDRESS","SENDER_PROTOCOL","ORIGINAL_MSGID","SRCSEQUENCE_NUM","SUBSCRIBER_ID") AS 
SELECT "ADDR","INDX","INST_ID","OBJNO","QUEUE_ID","MSG_ID","CORR_ID","SEQUENCE_NUM","MSG_NUM","MSG_STATE","MSG_PRIORITY","EXPIRATION","ENQ_TIME","ENQ_USER_ID","ENQ_USER_NAME","SENDER_NAME","SENDER_ADDRESS","SENDER_PROTOCOL","ORIGINAL_MSGID","SRCSEQUENCE_NUM","SUBSCRIBER_ID" FROM X$BUFFER WHERE objno = 6612;

CREATE OR REPLACE FORCE VIEW "QT7976_BUFFER"("ADDR","INDX","INST_ID","OBJNO","QUEUE_ID","MSG_ID","CORR_ID","SEQUENCE_NUM","MSG_NUM","MSG_STATE","MSG_PRIORITY","EXPIRATION","ENQ_TIME","ENQ_USER_ID","ENQ_USER_NAME","SENDER_NAME","SENDER_ADDRESS","SENDER_PROTOCOL","ORIGINAL_MSGID","SRCSEQUENCE_NUM","SUBSCRIBER_ID") AS 
SELECT "ADDR","INDX","INST_ID","OBJNO","QUEUE_ID","MSG_ID","CORR_ID","SEQUENCE_NUM","MSG_NUM","MSG_STATE","MSG_PRIORITY","EXPIRATION","ENQ_TIME","ENQ_USER_ID","ENQ_USER_NAME","SENDER_NAME","SENDER_ADDRESS","SENDER_PROTOCOL","ORIGINAL_MSGID","SRCSEQUENCE_NUM","SUBSCRIBER_ID" FROM X$BUFFER WHERE objno = 7976;

CREATE OR REPLACE FORCE VIEW "QT8553_BUFFER"("ADDR","INDX","INST_ID","OBJNO","QUEUE_ID","MSG_ID","CORR_ID","SEQUENCE_NUM","MSG_NUM","MSG_STATE","MSG_PRIORITY","EXPIRATION","ENQ_TIME","ENQ_USER_ID","ENQ_USER_NAME","SENDER_NAME","SENDER_ADDRESS","SENDER_PROTOCOL","ORIGINAL_MSGID","SRCSEQUENCE_NUM","SUBSCRIBER_ID") AS 
SELECT "ADDR","INDX","INST_ID","OBJNO","QUEUE_ID","MSG_ID","CORR_ID","SEQUENCE_NUM","MSG_NUM","MSG_STATE","MSG_PRIORITY","EXPIRATION","ENQ_TIME","ENQ_USER_ID","ENQ_USER_NAME","SENDER_NAME","SENDER_ADDRESS","SENDER_PROTOCOL","ORIGINAL_MSGID","SRCSEQUENCE_NUM","SUBSCRIBER_ID" FROM X$BUFFER WHERE objno = 8553;

CREATE OR REPLACE FORCE VIEW "QT8789_BUFFER"("ADDR","INDX","INST_ID","OBJNO","QUEUE_ID","MSG_ID","CORR_ID","SEQUENCE_NUM","MSG_NUM","MSG_STATE","MSG_PRIORITY","EXPIRATION","ENQ_TIME","ENQ_USER_ID","ENQ_USER_NAME","SENDER_NAME","SENDER_ADDRESS","SENDER_PROTOCOL","ORIGINAL_MSGID","SRCSEQUENCE_NUM","SUBSCRIBER_ID") AS 
SELECT "ADDR","INDX","INST_ID","OBJNO","QUEUE_ID","MSG_ID","CORR_ID","SEQUENCE_NUM","MSG_NUM","MSG_STATE","MSG_PRIORITY","EXPIRATION","ENQ_TIME","ENQ_USER_ID","ENQ_USER_NAME","SENDER_NAME","SENDER_ADDRESS","SENDER_PROTOCOL","ORIGINAL_MSGID","SRCSEQUENCE_NUM","SUBSCRIBER_ID" FROM X$BUFFER WHERE objno = 8789;

CREATE OR REPLACE FORCE VIEW "QT8816_BUFFER"("ADDR","INDX","INST_ID","OBJNO","QUEUE_ID","MSG_ID","CORR_ID","SEQUENCE_NUM","MSG_NUM","MSG_STATE","MSG_PRIORITY","EXPIRATION","ENQ_TIME","ENQ_USER_ID","ENQ_USER_NAME","SENDER_NAME","SENDER_ADDRESS","SENDER_PROTOCOL","ORIGINAL_MSGID","SRCSEQUENCE_NUM","SUBSCRIBER_ID") AS 
SELECT "ADDR","INDX","INST_ID","OBJNO","QUEUE_ID","MSG_ID","CORR_ID","SEQUENCE_NUM","MSG_NUM","MSG_STATE","MSG_PRIORITY","EXPIRATION","ENQ_TIME","ENQ_USER_ID","ENQ_USER_NAME","SENDER_NAME","SENDER_ADDRESS","SENDER_PROTOCOL","ORIGINAL_MSGID","SRCSEQUENCE_NUM","SUBSCRIBER_ID" FROM X$BUFFER WHERE objno = 8816;

CREATE OR REPLACE FORCE VIEW "QT9258_BUFFER"("ADDR","INDX","INST_ID","OBJNO","QUEUE_ID","MSG_ID","CORR_ID","SEQUENCE_NUM","MSG_NUM","MSG_STATE","MSG_PRIORITY","EXPIRATION","ENQ_TIME","ENQ_USER_ID","ENQ_USER_NAME","SENDER_NAME","SENDER_ADDRESS","SENDER_PROTOCOL","ORIGINAL_MSGID","SRCSEQUENCE_NUM","SUBSCRIBER_ID") AS 
SELECT "ADDR","INDX","INST_ID","OBJNO","QUEUE_ID","MSG_ID","CORR_ID","SEQUENCE_NUM","MSG_NUM","MSG_STATE","MSG_PRIORITY","EXPIRATION","ENQ_TIME","ENQ_USER_ID","ENQ_USER_NAME","SENDER_NAME","SENDER_ADDRESS","SENDER_PROTOCOL","ORIGINAL_MSGID","SRCSEQUENCE_NUM","SUBSCRIBER_ID" FROM X$BUFFER WHERE objno = 9258;

CREATE OR REPLACE FORCE VIEW "QUEUE_PRIVILEGES"("GRANTEE","OWNER","NAME","GRANTOR","ENQUEUE_PRIVILEGE","DEQUEUE_PRIVILEGE") AS 
select ue.name GRANTEE, u.name OWNER, o.name NAME, ur.name GRANTOR,
decode(sum(privilege#), 20, 1, 41, 1, 0) ENQUEUE_PRIVILEGE,
decode(sum(oa.privilege#), 21, 1, 41, 1, 0) DEQUEUE_PRIVILEGE
from sys.objauth$ oa, sys.obj$ o, sys.user$ ue, sys.user$ ur, sys.user$ u
where oa.obj# = o.obj#
  and o.type# = 24
  and oa.grantor# = ur.user#
  and oa.grantee# = ue.user#
  and u.user# = o.owner#
  and (oa.grantor# = userenv('SCHEMAID') or
       oa.grantee# in (select kzsrorol from x$kzsro) or
       o.owner# = userenv('SCHEMAID'))
group by u.name, o.name, ur.name, ue.name;

CREATE OR REPLACE FORCE VIEW "REPCAT$_CDEF"("CON#","OBJ#","COLS","TYPE#","ROBJ#","RCON#","RRULES","MATCH#","REFACT","ENABLED","CONDLENGTH","CONDITION","INTCOLS","MTIME","DEFER","SPARE1","SPARE2","SPARE3","SPARE4","SPARE5","SPARE6") AS 
SELECT "CON#","OBJ#","COLS","TYPE#","ROBJ#","RCON#","RRULES","MATCH#","REFACT","ENABLED","CONDLENGTH","CONDITION","INTCOLS","MTIME","DEFER","SPARE1","SPARE2","SPARE3","SPARE4","SPARE5","SPARE6" FROM sys.cdef$ WHERE robj# != obj#;

CREATE OR REPLACE FORCE VIEW "REPCAT_GENERATED"("SNAME","ONAME","TYPE","REASON","BASE_SNAME","BASE_ONAME","BASE_TYPE","PACKAGE_PREFIX","PROCEDURE_PREFIX","DISTRIBUTED") AS 
SELECT
    sname,
    oname,
    DECODE (type,
      -1, 'SNAPSHOT',
       1, 'INDEX',
       2, 'TABLE',
       4, 'VIEW',
       5, 'SYNONYM',
       6, 'SEQUENCE',
       7, 'PROCEDURE',
       8, 'FUNCTION',
       9, 'PACKAGE',
      11, 'PACKAGE BODY',
      12, 'TRIGGER',
      --- -3, 'UPDATABLE SNAPSHOT',
          'UNDEFINED'),
    DECODE (reason,
       0, 'REPLICATION TRIGGER',
       1, 'REPLICATION PACKAGE',
       2, 'RESOLUTION PACKAGE',
       3, 'PRIORITY PACKAGE',
       4, 'AUDIT PACKAGE',
       5, 'PROCEDURAL REPLICATION WRAPPER',
       6, 'TRIGGER PACKAGE',
       7, 'MIXED REPLICATION TRIGGER',
       8, 'MIXED REPLICATION WRAPPER',
       9, 'LOB PACKAGE',
      10, 'REPLICATION UPDATE PACKAGE',
          'UNDEFINED'),
    base_sname,
    base_oname,
    DECODE (base_type,
      -1, 'SNAPSHOT',
       1, 'INDEX',
       2, 'TABLE',
       4, 'VIEW',
       5, 'SYNONYM',
       6, 'SEQUENCE',
       7, 'PROCEDURE',
       8, 'FUNCTION',
       9, 'PACKAGE',
      11, 'PACKAGE BODY',
      12, 'TRIGGER',
      --- -3, 'UPDATABLE SNAPSHOT',
          'UNDEFINED'),
    package_prefix,
    procedure_prefix,
    distributed
  FROM system.repcat$_generated;

CREATE OR REPLACE FORCE VIEW "REPCAT_REPCAT"("SNAME","MASTER","STATUS","SCHEMA_COMMENT","GNAME","FNAME","RPC_PROCESSING_DISABLED","GOWNER") AS 
SELECT r.sname, r.master,
         DECODE (r.status, 0,    'NORMAL',
                           1,    'QUIESCING',
                           2,    'QUIESCED',
                           NULL, 'NORMAL',
                                 'UNDEFINED'),
         r.schema_comment, r.sname, f.fname,
         DECODE(utl_raw.bit_and(utl_raw.substr(r.flag, 1, 1), '01'),
                '00', 'N', 'Y'),
         r.gowner
  FROM system.repcat$_repcat r, system.repcat$_flavors f
  WHERE r.sname     = f.gname (+)
    AND r.flavor_id = f.flavor_id (+)
    AND r.gowner    = f.gowner (+);

CREATE OR REPLACE FORCE VIEW "REPCAT_REPCATLOG"("ID","SOURCE","STATUS","USERID","TIMESTAMP","ROLE","MASTER","REQUEST","SNAME","ONAME","TYPE","MESSAGE","ERRNUM","GNAME") AS 
SELECT
    id,
    source,
    DECODE(status,
      0, 'READY',
      1, 'DO_CALLBACK',
      2, 'AWAIT_CALLBACK',
      3, 'ERROR',
         'UNDEFINED'),
    userid,
    timestamp,
    DECODE (role,
      'Y', 'MASTERDEF',
      'N', 'MASTER',
           'UNDEFINED'),
    master,
    DECODE(request,
      -1, 'WAITING',
       0, 'CREATE_MASTER_REPOBJECT',
       1, 'DROP_MASTER_REPSCHEMA',
       2, 'ADD_MASTER_DATABASE',
       3, 'ALTER_MASTER_REPOBJECT',
       4, 'DROP_MASTER_REPOBJECT',
       5, 'SUSPEND_MASTER_ACTIVITY',
       6, 'RESUME_MASTER_ACTIVITY',
       7, 'EXECUTE_DDL',
       8, 'GENERATE_REPLICATION_SUPPORT',
       9, 'GENERATE_SUPPORT_PHASE_1',
      10, 'GENERATE_SUPPORT_PHASE_2',
      11, 'ALTER_MASTER_PROPAGATION',
      12, 'END_PHASE_2',
      13, 'GENERATE_INTERNAL_PKG_SUPPORT',
      14, 'END_GEN_INTERNAL_PKG_SUPPORT',
      15, 'COPY_FLAVOR_DEFINITIONS',
      16, 'COMPILE_MASTER_REPOBJECT',
      17, 'RENAME_SHADOW_COLUMN_GROUP',
      18, 'PULL_EXTENSION',
      19, 'CONTROL_PROPAGATION',
      20, 'WAIT_FOR_NEW_SITES_TO_PREPARE',
      21, 'ADD_COLUMN_PHASE_1',
      22, 'ADD_COLUMN_PHASE_2',
      23, 'ADD_COLUMN_PHASE_3',
      24, 'ADD_COLUMN_PHASE_4',
      25, 'PREPARE_FOR_IMPORT',
          'UNDEFINED'),
    DECODE(oname, NULL, NULL, sname),
    oname,
    DECODE (type,
      -1, 'SNAPSHOT',
       0, 'UNDEFINED',
       1, 'INDEX',
       2, 'TABLE',
       4, 'VIEW',
       5, 'SYNONYM',
       6, 'SEQUENCE',
       7, 'PROCEDURE',
       8, 'FUNCTION',
       9, 'PACKAGE',
      11, 'PACKAGE BODY',
      12, 'TRIGGER',
      13, 'TYPE',
      14, 'TYPE BODY',
      32, 'INDEXTYPE',
      33, 'OPERATOR',
      --- -3, 'UPDATABLE SNAPSHOT',
          'UNDEFINED'),
    message,
    errnum,
    NVL(gname, sname)
  FROM system.repcat$_repcatlog;

CREATE OR REPLACE FORCE VIEW "REPCAT_REPCOLUMN_BASE"("SNAME","ONAME","TYPE","CNAME","ID","POS","COMPARE_OLD_ON_DELETE","COMPARE_OLD_ON_UPDATE","SEND_OLD_ON_DELETE","SEND_OLD_ON_UPDATE","CTYPE","CTYPE_TOID","CTYPE_OWNER","CTYPE_HASHCODE","CTYPE_VERSION#","CTYPE_NUM","CTYPE_MOD","DATA_LENGTH","DATA_PRECISION","DATA_SCALE","NULLABLE","CHARACTER_SET_NAME","TOP","CHAR_LENGTH","CHAR_USED","PROPERTY","LPOS") AS 
select r.sname,
       r.oname,
       decode(r.type,
         -1, 'SNAPSHOT',
          1, 'INDEX',
          2, 'TABLE',
          4, 'VIEW',
          5, 'SYNONYM'),
       r.lcname, -- cname, long column name
       r.id,
       -- we want to leave the pos as NULL for virtual columns
       r.pos,
       -- we want the send and compare bits from the 'real' column
       decode(nvl(r.pos,r2.pos), NULL, NULL,
         decode(utl_raw.bit_and(utl_raw.substr(nvl(r2.flag,
                r.flag), 1, 1), '04'), '00', 'Y','N')),
       decode(nvl(r.pos,r2.pos), NULL, NULL,
         decode(utl_raw.bit_and(utl_raw.substr(nvl(r2.flag,
                r.flag), 1, 1), '08'), '00', 'Y','N')),
       decode(nvl(r.pos,r2.pos), NULL, NULL,
         decode(utl_raw.bit_and(utl_raw.substr(nvl(r2.flag,
                r.flag), 1, 1), '01'), '00', 'Y','N')),
       decode(nvl(r.pos,r2.pos), NULL, NULL,
         decode(utl_raw.bit_and(utl_raw.substr(nvl(r2.flag,
                r.flag), 1, 1), '02'), '00', 'Y','N')),
       decode(r.ctype,
         1, decode(r.charsetform, 2, 'NVARCHAR2', 'VARCHAR2'),
         2, 'NUMBER',
         12, 'DATE',
         23, decode(utl_raw.bit_and(utl_raw.substr(r.property, 1, 1), '08'),
                    '08', r.ctype_name, 'RAW'),
         58, r.ctype_name,
         69, 'ROWID',
         96, decode(r.charsetform, 2, 'NCHAR', 'CHAR'),
         -- system provided type may be stored as clob, e.g., XMLType
         112, NVL(r.ctype_name, decode(r.charsetform, 2, 'NCLOB', 'CLOB')),
         113, 'BLOB',
         178, 'TIME(' ||r.scale|| ')',
         179, 'TIME(' ||r.scale|| ')' || ' WITH TIME ZONE',
         180, 'TIMESTAMP(' ||r.scale|| ')',
         181, 'TIMESTAMP(' ||r.scale|| ')' || ' WITH TIME ZONE',
         182, 'INTERVAL YEAR(' ||r.precision#||') TO MONTH',
         183, 'INTERVAL DAY(' ||r.precision#||') TO SECOND(' ||r.scale|| ')',
         111, r.ctype_name,
         121, r.ctype_name,
         122, r.ctype_name,
         123, r.ctype_name,
         231, 'TIMESTAMP(' ||r.scale|| ')' || ' WITH LOCAL TIME ZONE',
         'UNDEFINED'),
       r.toid,
       r.ctype_owner,
       RAWTOHEX(r.hashcode),
       r.version#,
       r.ctype,
       decode(r.ctype, 111, 'REF'),                       -- CTYPE_MOD
       decode(nvl(r.pos, r2.pos), NULL, NULL, r.length),
       decode(nvl(r.pos, r2.pos), NULL, NULL, r.precision#),
       decode(nvl(r.pos, r2.pos), NULL, NULL, r.scale),
       decode(nvl(r.pos, r2.pos), NULL, NULL, decode(sign(r.null$),-1,'D',
                                                     0, 'Y', 'N')),
       decode(r.charsetform, 1, 'CHAR_CS',
                             2, 'NCHAR_CS',
                             3, NLS_CHARSET_NAME(r.charsetid),
                             4, 'ARG:'||r.charsetid),
       decode(r.ctype, 23,
               -- nested table column SETID (in the parent table)
               decode(utl_raw.bit_and(utl_raw.substr(r.property, 1, 1), '08'),
                      '08',decode(r.top, r.lcname, NULL, r.top), r.top),
               -- for XMLType storage column
               112, decode(r.top, r.lcname, NULL, r.top),
              r.top),
       r.clength,
       decode(r.ctype,
        1,
        decode(utl_raw.bit_and(utl_raw.substr(r.flag,1,1),'10'),'00','B','C'),
        96,
        decode(utl_raw.bit_and(utl_raw.substr(r.flag,1,1),'10'),'00','B','C'),
        ''),
        r.property,
        -- for soidref_fk we need to select the pos of the real column
        -- in the lpos field so that in the definition of dba_repcolumn we
        -- can say nvl(pos, lpos) showing the pos of the real column rather
        -- than null.
        decode(utl_raw.bit_and(utl_raw.substr(r.property,2,1),'01'),'01',
               r2.pos, null)
from system.repcat$_repcolumn r, system.repcat$_repcolumn r2
where r2.sname (+) = r.sname
and   r2.oname (+) = r.oname
and   r2.lcname (+) = r.lcname
and   r2.id (+) <> r.id
-- we select r2 only for soidref_fk_attr
and utl_raw.bit_and(utl_raw.substr(nvl(r2.property (+),'0000'),2,1),'02')='02'
-- filter out nested table column
and utl_raw.bit_and(utl_raw.substr(r.property, 1, 1), '01') != '01'
-- filter out special opaque type referenced in table opqtype$
and utl_raw.bit_and(utl_raw.substr(r.property, 2, 1), '08') != '08'
-- filter out soidref_fk_attr column
and utl_raw.bit_and(utl_raw.substr(r.property, 2, 1), '02') != '02';

CREATE OR REPLACE FORCE VIEW "REPCAT_REPFLAVOR_COLUMNS"("FNAME","GNAME","SNAME","ONAME","CNAME","TYPE","POS","GROUP_OWNER","TYPE_TOID","TYPE_OWNER","TYPE_HASHCODE","TYPE_MOD","TOP","INTERNAL_CNAME","PROPERTY") AS 
SELECT f.fname, fo.gname, rc.sname, rc.oname, rc.lcname,
         decode(rc.ctype,
           1, decode(rc.charsetform, 2, 'NVARCHAR2', 'VARCHAR2'),
           2, 'NUMBER',
          12, 'DATE',
          23, decode(utl_raw.bit_and(utl_raw.substr(rc.property, 1, 1), '04'),
                  '04', rc.ctype_name,
               -- for soidref_fk_attr we want to display the real column type
               decode(utl_raw.bit_and(utl_raw.substr(rc.property, 2, 1), '02'),
                   '02', rc.ctype_name,
                   'RAW')),
          58, rc.ctype_name,
          69, 'ROWID',
          96, decode(rc.charsetform, 2, 'NCHAR', 'CHAR'),
         112, NVL(rc.ctype_name, decode(rc.charsetform, 2, 'NCLOB', 'CLOB')),
         113, 'BLOB',
         111, rc.ctype_name,
         121, rc.ctype_name,
         122, rc.ctype_name,
         123, rc.ctype_name,
             'UNDEFINED'),
         rc.pos, fo.gowner,
         rc.toid,
         rc.ctype_owner,
         RAWTOHEX(rc.hashcode),
         DECODE(rc.ctype,
                111, 'REF',
                23,
                decode(utl_raw.bit_and(utl_raw.substr(rc.property,2,1),'02'),
                       '02', 'REF')
                ),
         decode(rc.ctype, 23,
               -- nested table column SETID (in the parent table)
               decode(utl_raw.bit_and(utl_raw.substr(rc.property, 1, 1), '08'),
                      '08',decode(rc.top, rc.lcname, NULL, rc.top), rc.top),
               -- for XMLType storage column
               112, decode(rc.top, rc.lcname, NULL, rc.top),
              rc.top),
         rc.cname, rc.property
    FROM system.repcat$_repcolumn rc, system.repcat$_flavor_objects fo,
         system.repcat$_flavors f, system.repcat$_repobject ro
    WHERE f.flavor_id = fo.flavor_id
      AND f.gname     = fo.gname
      AND f.gowner    = fo.gowner
      AND rc.sname    = fo.sname AND rc.oname = fo.oname
      AND fo.type     in (2, -1)
      AND ro.sname    = rc.sname
      AND ro.oname    = rc.oname
      AND ro.type     = rc.type
      AND ro.gname    = fo.gname
      AND ro.gowner   = fo.gowner
      AND rc.pos IS NOT NULL
      AND
        ((mod(rc.pos-1,8) < 4
         AND fo.columns_present IS NOT NULL
         -- the following AND clauses are necessary to avoid
         -- invoking utl_raw.substr with fo.columns_present from one
         -- object while rc.pos is from another object.
         AND fo.sname = rc.sname
         AND fo.oname = rc.oname
         AND fo.type = rc.type
         AND utl_raw.bit_and(utl_raw.substr(fo.columns_present,
                                             floor((rc.pos-1)/8)+1, 1),
                              to_char(power(2, mod(rc.pos-1,8))))
                             != '00')
         OR
         (mod(rc.pos-1,8) >= 4
         AND fo.columns_present IS NOT NULL
         -- the following AND clauses are necessary to avoid
         -- invoking utl_raw.substr with fo.columns_present from one
         -- object while rc.pos is from another object.
         AND fo.sname = rc.sname
         AND fo.oname = rc.oname
         AND fo.type = rc.type
         AND utl_raw.bit_and(utl_raw.substr(fo.columns_present,
                                             floor((rc.pos-1)/8)+1, 1),
                              to_char(10*power(2, mod(rc.pos-1,8)-4)))
                             != '00'));

CREATE OR REPLACE FORCE VIEW "REPCAT_REPOBJECT"("SNAME","ONAME","TYPE","STATUS","GENERATION_STATUS","ID","OBJECT_COMMENT","GOWNER","GNAME","TRIGFLAG","MIN_COMMUNICATION","INTERNAL_PACKAGE_EXISTS","RECEIVER_TRACING_ENABLED","NESTED_TABLE","HASHCODE") AS 
SELECT sname, oname, type, status, generation_status, id, object_comment,
       gowner, gname, trigflag, min_communication, internal_package_exists,
       receiver_tracing_enabled, nested_table, hashcode
  FROM repcat_repobject_base
 WHERE gowner IS NOT NULL AND gname IS NOT NULL
UNION
SELECT o.sname, o.oname, o.type, o.status, o.generation_status, o.id,
       o.object_comment, bo.gowner, bo.gname, o.trigflag, o.min_communication,
       o.internal_package_exists, o.receiver_tracing_enabled,
       o.nested_table, o.hashcode
  FROM repcat_repobject_base o, repcat_generated g, repcat_repobject_base bo
 WHERE (o.gowner IS NULL AND o.gname IS NULL)
   AND (o.sname = g.sname AND o.oname = g.oname AND o.type = g.type)
   AND (bo.sname = g.base_sname AND bo.oname = g.base_oname AND
        bo.type = g.base_type)
   AND (bo.gowner IS NOT NULL AND bo.gname IS NOT NULL)
UNION
SELECT o.sname, o.oname, o.type, o.status, o.generation_status, o.id,
       o.object_comment, bo.gowner, bo.gname, o.trigflag, o.min_communication,
       o.internal_package_exists, o.receiver_tracing_enabled,
       o.nested_table, o.hashcode
  FROM repcat_repobject_base o, repcat_repobject_base bo, sys.snap$ s
 WHERE (o.gowner IS NULL AND o.gname IS NULL AND o.type = 'INTERNAL PACKAGE')
   AND o.sname = s.mowner AND o.oname = s.master
   AND (bo.sname = s.sowner AND bo.oname = s.vname AND bo.type = 'SNAPSHOT')
   AND (s.mlink IS NOT NULL AND
        SUBSTR(s.mlink, 2) NOT IN (SELECT global_name from global_name))
   AND s.instsite = 0;

CREATE OR REPLACE FORCE VIEW "REPCAT_REPOBJECT_BASE"("SNAME","ONAME","TYPE","STATUS","GENERATION_STATUS","ID","OBJECT_COMMENT","GOWNER","GNAME","TRIGFLAG","MIN_COMMUNICATION","INTERNAL_PACKAGE_EXISTS","RECEIVER_TRACING_ENABLED","NESTED_TABLE","HASHCODE") AS 
SELECT sname, oname,
         DECODE (type, -1, 'SNAPSHOT',
                        1, 'INDEX',
                        2, 'TABLE',
                        4, 'VIEW',
                        5, 'SYNONYM',
                        6, 'SEQUENCE',
                        7, 'PROCEDURE',
                        8, 'FUNCTION',
                        9, 'PACKAGE',
                       11, 'PACKAGE BODY',
                       12, 'TRIGGER',
                       -4, 'INTERNAL PACKAGE',
                   --- -3, 'UPDATABLE SNAPSHOT',
                       13, 'TYPE',
                       14, 'TYPE BODY',
                       32, 'INDEXTYPE',
                       33, 'OPERATOR',
                           'UNDEFINED'),
         DECODE (status, 0, 'CREATE',
                         1, 'COMPARE',
                         2, 'VALID',
                         3, 'DROPPED',
                         4, 'ERROR',
                         5, 'ABSENT',
                         6, 'INCOMPLETE',
                            'UNDEFINED'),
         DECODE (DECODE (gentrigger, NULL, genpackage, gentrigger * 3 +
                         genpackage),
                 0, 'GENERATED',  -- 0, 0
                 1, 'NEEDSGEN',   -- 0, 1
                 2, 'DOINGGEN',   -- 0, 2
                 3, 'NEEDSGEN',   -- 1, 0
                 4, 'NEEDSGEN',   -- 1, 1
                 5, 'DOINGGEN',   -- 1, 2
                 6, 'DOINGGEN',   -- 2, 0
                 7, 'DOINGGEN',   -- 2, 1
                 8, 'DOINGGEN'),  -- 2, 2
         id, object_comment, gowner, gname,
         DECODE(o.type,
                2, DECODE(bitand(t.trigflag, 1), 1, 'Y', 'N'),
                -1, DECODE(bitand(t.trigflag, 1), 1, 'Y', 'N'),
                NULL),
         DECODE(o.type,
                -1, DECODE(utl_raw.bit_and(utl_raw.substr(o.flag, 1, 1), '01'),
                           '00', 'N',
                           'Y'),
                2, DECODE(utl_raw.bit_and(utl_raw.substr(o.flag, 1, 1), '01'),
                          '00', 'N',
                          'Y'),
                NULL),
         DECODE(o.type,
                2, DECODE(utl_raw.bit_and(utl_raw.substr(o.flag, 1, 1), '04'),
                          '00', 'N',
                          'Y'),
                -1, DECODE(utl_raw.bit_and(utl_raw.substr(o.flag, 1, 1), '04'),
                          '00', 'N',
                          'Y'),
                NULL),
         DECODE(o.type,
                2, DECODE(utl_raw.bit_and(utl_raw.substr(o.flag, 1, 1), '10'),
                          '00', 'N',
                          'Y'),
                9, DECODE(utl_raw.bit_and(utl_raw.substr(o.flag, 1, 1), '10'),
                          '00', 'N',
                          'Y'),
                -1, DECODE(utl_raw.bit_and(utl_raw.substr(o.flag, 1, 1), '10'),
                          '00', 'N',
                          'Y'),
                NULL),
         DECODE(bitand(t.property, 8192), 8192, 'Y', 0, 'N'),
         RAWTOHEX(o.hashcode)
  FROM system.repcat$_repobject o, sys.tab$ t
  WHERE o.id = t.obj# (+);

CREATE OR REPLACE FORCE VIEW "REPCAT_REPPROP"("SNAME","ONAME","TYPE","DBLINK","HOW","PROPAGATE_COMMENT") AS 
SELECT
    p.sname,
    p.oname,
    DECODE (p.type,
      -1, 'SNAPSHOT',
       1, 'INDEX',
       2, 'TABLE',
       4, 'VIEW',
       5, 'SYNONYM',
       6, 'SEQUENCE',
       7, 'PROCEDURE',
       8, 'FUNCTION',
       9, 'PACKAGE',
      11, 'PACKAGE BODY',
      12, 'TRIGGER',
      -4, 'INTERNAL PACKAGE',
      --- -3, 'UPDATABLE SNAPSHOT',
          'UNDEFINED'),
    p.dblink,
    DECODE (p.how,
      0, 'NONE',
      1, 'ASYNCHRONOUS',
      2, 'SYNCHRONOUS',
      3, 'SYNC_OR_ASYNC',
         'UNDEFINED'),
    p.propagate_comment
  FROM system.repcat$_repprop p
  WHERE (p.sname, p.oname, p.type)
    NOT IN (SELECT sname, oname, type from system.repcat$_generated)
    AND p.oname != 'REP$WHAT_AM_I';

CREATE OR REPLACE FORCE VIEW "REPCAT_REPSCHEMA"("SNAME","DBLINK","MASTERDEF","SNAPMASTER","MASTER_COMMENT","GNAME","MASTER","GOWNER") AS 
SELECT sname, dblink, masterdef, snapmaster, master_comment, sname, master,
       gowner
FROM system.repcat$_repschema;

CREATE OR REPLACE FORCE VIEW "RESOURCE_COST"("RESOURCE_NAME","UNIT_COST") AS 
select m.name,c.cost
  from sys.resource_cost$ c, sys.resource_map m where
  c.resource# = m.resource#
  and m.type# = 0
  and c.resource# in (2, 4, 7, 8);

CREATE OR REPLACE FORCE VIEW "ROLE_ROLE_PRIVS"("ROLE","GRANTED_ROLE","ADMIN_OPTION") AS 
select u1.name,u2.name,decode(min(option$),1,'YES','NO')
from  sys.user$ u1, sys.user$ u2, sys.sysauth$ sa
where grantee# in
   (select distinct(privilege#)
    from sys.sysauth$ sa
    where privilege# > 0
    connect by prior sa.privilege# = sa.grantee#
    start with grantee#=userenv('SCHEMAID') or grantee#=1 or grantee# in
      (select kzdosrol from x$kzdos))
   and u1.user#=sa.grantee# and u2.user#=sa.privilege#
group by u1.name,u2.name;

CREATE OR REPLACE FORCE VIEW "ROLE_SYS_PRIVS"("ROLE","PRIVILEGE","ADMIN_OPTION") AS 
select u.name,spm.name,decode(min(option$),1,'YES','NO')
from  sys.user$ u, sys.system_privilege_map spm, sys.sysauth$ sa
where grantee# in
   (select distinct(privilege#)
    from sys.sysauth$ sa
    where privilege# > 0
    connect by prior sa.privilege# = sa.grantee#
    start with grantee#=userenv('SCHEMAID') or grantee#=1 or grantee# in
      (select kzdosrol from x$kzdos))
  and u.user#=sa.grantee# and sa.privilege#=spm.privilege
group by u.name, spm.name;

CREATE OR REPLACE FORCE VIEW "ROLE_TAB_PRIVS"("ROLE","OWNER","TABLE_NAME","COLUMN_NAME","PRIVILEGE","GRANTABLE") AS 
select u1.name,u2.name,o.name,col$.name,tpm.name,
       decode(max(mod(oa.option$,2)), 1, 'YES', 'NO')
from  sys.user$ u1,sys.user$ u2,sys.table_privilege_map tpm,
      sys.objauth$ oa,sys.obj$ o,sys.col$
where grantee# in
   (select distinct(privilege#)
    from sys.sysauth$ sa
    where privilege# > 0
    connect by prior sa.privilege# = sa.grantee#
    start with grantee#=userenv('SCHEMAID') or grantee#=1 or grantee# in
      (select kzdosrol from x$kzdos))
   and u1.user#=oa.grantee# and oa.privilege#=tpm.privilege
   and oa.obj#=o.obj# and oa.obj#=col$.obj#(+) and oa.col#=col$.col#(+)
   and u2.user#=o.owner#
  and (col$.property IS NULL OR bitand(col$.property, 32) = 0 )
group by u1.name,u2.name,o.name,col$.name,tpm.name;

CREATE OR REPLACE FORCE VIEW "SCHEMA_EXPORT_OBJECTS"("OBJECT_PATH","COMMENTS","NAMED") AS 
select OBJECT_PATH, COMMENTS, NAMED
    from dba_export_objects
    where het_type='SCHEMA_EXPORT';

CREATE OR REPLACE FORCE VIEW "SESSION_CONTEXT"("NAMESPACE","ATTRIBUTE","VALUE") AS 
select namespace, attribute, value from v_$context;

CREATE OR REPLACE FORCE VIEW "SESSION_PRIVS"("PRIVILEGE") AS 
select spm.name
from sys.v$enabledprivs ep, system_privilege_map spm
where spm.privilege = ep.priv_number;

CREATE OR REPLACE FORCE VIEW "SESSION_ROLES"("ROLE") AS 
select u.name
from x$kzsro,user$ u
where kzsrorol!=userenv('SCHEMAID') and kzsrorol!=1 and u.user#=kzsrorol;

CREATE OR REPLACE FORCE VIEW "SM$AUDIT_CONFIG"("AUDIT_TYPE","SCHEMA_USER","AUDIT_TARGET") AS 
select 'Object', owner, object_type || ' ' || object_name
    from sys.dba_obj_audit_opts
    where ALT != '-/-' OR AUD != '-/-' OR COM != '-/-' OR DEL != '-/-'
       OR GRA != '-/-' OR IND != '-/-' OR INS != '-/-' OR LOC != '-/-'
       OR REN != '-/-' OR SEL != '-/-' OR UPD != '-/-' OR FBK != '-/-'
       OR EXE != '-/-'
    union all select 'Privilege', user_name, privilege
    from sys.dba_priv_audit_opts
    union all select 'Statement', user_name, audit_option
    from sys.dba_stmt_audit_opts;

CREATE OR REPLACE FORCE VIEW "SM$INTEGRITY_CONS"("TABLE_NAME","CONSTRAINT_NAME","ENABLED") AS 
select owner || '.' || table_name table_name, constraint_name,
    decode(status, 'ENABLED', 'Y', NULL) enabled from sys.dba_constraints;

CREATE OR REPLACE FORCE VIEW "SM$TS_AVAIL"("TABLESPACE_NAME","BYTES") AS 
select tablespace_name, sum(bytes) bytes from dba_data_files
    group by tablespace_name;

CREATE OR REPLACE FORCE VIEW "SM$TS_FREE"("TABLESPACE_NAME","BYTES") AS 
select tablespace_name, sum(bytes) bytes from dba_free_space
    group by tablespace_name;

CREATE OR REPLACE FORCE VIEW "SM$TS_USED"("TABLESPACE_NAME","BYTES") AS 
select tablespace_name, sum(bytes) bytes from dba_segments
    group by tablespace_name;

CREATE OR REPLACE FORCE VIEW "SM_$VERSION"("VERSION_TEXT","VERSION_NUMBER","CREATED") AS 
select '7.3.2.0.0' version_text, 120594432 version_number, created
    from sys.dba_objects where owner = 'SYS' and object_name = 'SM_$VERSION';

CREATE OR REPLACE FORCE VIEW "SNS$EJB$GEN$"("OWNER","SHORTNAME") AS 
select u.name, o.name from user$ u, obj$ o where 1=2;

CREATE OR REPLACE FORCE VIEW "SOURCE_SIZE"("OBJ#","BYTES") AS 
select s.obj#, sum(length(s.source))
  from sys.source$ s
  group by s.obj#;

CREATE OR REPLACE FORCE VIEW "STRADDLING_RS_OBJECTS"("OBJECT1","TS1","OBJECT2","TS2","REASON_ID") AS 
(select t.obj#, t.ts#, l.lobj#, l.ts#, 'Base table and lob object not fully contained in recovery set'
from tab$ t, lob$ l
where l.ts#!=t.ts#
  and l.obj#=t.obj#
  and bitand(t.property,64)=0)
union all
/* check iots having lobs */
select t.obj#,i.ts#,l.lobj#, l.ts#,'Base table and lob object not fully contained in pluggable set'
from  tab$ t, lob$ l, ind$ i
where bitand(t.property,64)!=0
  and l.ts#!=i.ts#
  and l.obj#=t.obj#
  and i.bo# = t.obj#
union all
/* iot and overflow segment are self contained */
select t.obj#, t.ts#, i.obj#, i.ts#, 'IOT and Overflow segment not self contained'
from   tab$ t, ind$ i
where  t.bobj# = i.bo#
  and  t.ts# !=  i.ts#
  and  bitand(t.property,512) != 0
union all
/* Are there dependencies between objects in different tablespaces that
   are enforced through constraints, also ignore constraints that are
   disabled
*/
select t.obj#,t.ts#,cdef$.obj#,t2.ts#,'constraint between tables not contained in recovery set'
from tab$ t2,cdef$, tab$ t
where cdef$.robj#=t.obj#
  and cdef$.obj#=t2.obj#
  and t.ts# != t2.ts#
  and cdef$.enabled is not null
union all
/* tables whose indexes are not in the same tablespace.
   Ignore the following:
    partitioned object - checked separately
    indexes on unsupported TSPITR objects
    indexes enforcing primary key constraints - checked separately
    join indexes - checked separately
*/
select t.obj# object1, t.ts# ts1, i.obj# object2, i.ts# ts2, 'Tables and associated indexes not fully contained in the recovery set'
from  tab$ t, ind$ i
where t.obj#=i.bo#
  and t.ts# != i.ts#
  and bitand(t.property,32)= 0
  and bitand(i.property,2 ) = 0
  and bitand(t.property, 4096) = 0
  and bitand(t.property, 131072)=0
  and bitand(i.property, 1024) = 0			/* skip join indexes */
minus  /* indexes enforcing primary key constraints */
      /* fix bug 860417 - exclude partitioned objects */
select t.obj# object1, t.ts# ts1, i.obj# object2, i.ts# ts2, 'Tables and associated indexes not fully contained in the recovery set'
from  tab$ t, ind$ i , cdef$ cf
where t.obj#=cf.obj#
  and i.obj#=cf.enabled
  and cf.type#=2
  and t.ts# != i.ts#
  and i.bo#=t.obj#
  and bitand(t.property,32)= 0
  and bitand(t.property, 4096) = 0
union all
/* Capture indexes enforcing primary key constraints, ignore internally generated snapshot/indexes */
/* Exclude iots , ALso exclude partitioned tables since they have no storage */
/* The tablespace for partitioned tables defaults to 0 and thus there will   */
/* always be a violation */
select t.obj# object1, t.ts# ts1, i.obj# object2, i.ts# ts2, 'Table and Index enforcing primary key constraint not in same tablespace'
from  tab$ t, ind$ i , cdef$ cf
where t.obj#=cf.obj#
  and i.obj#=cf.enabled
  and cf.type#=2
  and t.ts# != i.ts#
  and i.bo#=t.obj#
  and bitand(t.property,64)=0
  and bitand(t.property,32)= 0
  and bitand(t.property, 4096) = 0
minus  /* primary key constraints on internally generated snapshot tables */
/* exclude partitioned objects and unsupported objects */
select t.obj# object1, t.ts# ts1, i.obj# object2, i.ts# ts2, 'Table and Index enforcing primary key constraint not in same tablespace'
from  tab$ t, ind$ i, obj$ o, user$ u, snap$ s
where t.obj#=i.bo#
  and t.ts# != i.ts#
  and s.tname=o.name
  and s.sowner=u.name
  and o.obj#=t.obj#
  and o.owner#=u.user#
  and bitand(t.property,32)= 0
  and bitand(t.property, 4096) = 0
union all
/* clusters whose indexes are not in the same tablespace 		*/
select c.obj# object1, c.ts# ts1, i.obj# object2, i.ts# ts2,'Tables/Clusters and associated indexes not fully contained in the recovery set'
from clu$ c, ind$ i
where c.obj#=i.bo#
  and c.ts# != i.ts#
union all
/* partitioned tables with at least two partitions in different tablespaces */
/* Exclude logical partitions - they have no storage . eg partitioned iots */
select tp1.obj#, tp1.ts#, tp.obj#, tp.ts#, ' Partitioned Objects not fully contained in the recovery set'
from tabpart$ tp,
     (select  bo#,
              min(ts#) keep (dense_rank first order by part#) ts#,
              min(file#) keep (dense_rank first order by part#) file#,
              min(block#) keep (dense_rank first order by part#) block#,
              min(obj#) keep (dense_rank first order by part#) obj#
      from     tabpart$
      where file# != 0 and block# != 0
      group by bo#) tp1
where tp1.bo# = tp.bo#
  and tp1.ts# != tp.ts#
  and tp.file# != 0
  and tp.block# != 0
union all
/* partitioned indexes that are in tablespace different than any table
   partitions. Exclude partitioned iots - no storage (check for null header)
*/
select tp1.obj#,tp1.ts#,ip.obj#,ip.ts#, '  Partitioned Objects not fully contained in the recovery set'
from indpart$ ip, ind$ i,
     (select   bo#,
               min(ts#) keep (dense_rank first order by part#) ts#,
               min(file#) keep (dense_rank first order by part#) file#,
               min(block#) keep (dense_rank first order by part#) block#,
               min(obj#) keep (dense_rank first order by part#) obj#
      from     tabpart$
      where    file# != 0 and block# != 0
      group by bo#) tp1
where tp1.bo# = i.bo#
  and ip.bo#  = i.obj#
  and tp1.ts# != ip.ts#
union all
/* partitioned table and non-partitioned index in different tablespaces */
select tp.obj#, tp.ts#, i.obj#, i.ts#, ' Partitioned Objects not fully contained in the recovery set'
from tabpart$ tp, ind$ i
where tp.ts#!=i.ts#
  and bitand(i.property,2) =0
  and tp.bo#=i.bo#
  and bitand(i.property, 1024) = 0			/* skip join indexes */
union all
/*  partitioned index and non-partitioned table in different tablespaces */
select t.obj#, t.ts#, ip.obj#, ip.ts#, ' Partitioned Objects not fully contained in the recovery set'
from indpart$ ip, tab$ t, ind$ i
where ip.ts#!=t.ts#
  and t.property=0
  and ip.bo#=i.obj#
  and i.bo#=t.obj#
  and bitand(i.property, 1024) = 0			/* skip join indexes */
union all
/* join index and parent table (or table (sub)partition) in different ts */
select v1.obj#, v1.ts#, v2.obj#, v2.ts#, 'Join Index related objects not fully contained in the recovery set'
from
 (select obj# to#, obj#, ts# from tab$
  union all
  select bo# to#, obj#, ts# from tabpart$
  union all
  select tcp.bo# to#, tsp.obj#, tsp.ts# from tabsubpart$ tsp, tabcompart$ tcp
   where tsp.pobj# = tcp.obj#
 ) v1,
 (select obj# io#, obj#, ts# from ind$
   where bitand(property, 1024) = 1024
  union all
  select ip.bo# io#, ip.obj#, ip.ts# from indpart$ ip, ind$ i
   where ip.bo# = i.obj# and bitand(i.property, 1024) = 1024
  union all
  select icp.bo# io#, isp.obj#, isp.ts#
   from indsubpart$ isp, indcompart$ icp, ind$ i
   where isp.pobj# = icp.obj# and icp.bo# = i.obj#
   and bitand(i.property, 1024) = 1024
 ) v2,
 jijoin$ j
where v2.io# = j.obj#
and (v1.to# = j.tab1obj# or v1.to# = j.tab2obj#)
and v1.ts# != v2.ts#
union all
/* Handle Composite partitions */
/* Subpartitions that are not in the same tablespace */
/* Check the tablespace of the first subpartition of partition 1
   against all tablespaces of other subpartitions for the same object */
select V1.obj#, V1.ts# , V2.obj#, V2.ts#, 'Subpartitions not fully contained in recovery set'
from
      ( select   min(tsp.obj#) keep (dense_rank first
                   order by tcp.part#, tsp.subpart#) obj#,
                 min(tsp.ts#) keep (dense_rank first
                   order by tcp.part#, tsp.subpart#) ts#,
                 tcp.bo# bo#
        from     tabcompart$ tcp, tabsubpart$ tsp
        where    tsp.pobj# = tcp.obj#
        group by tcp.bo#) V1,
      ( select tsp.obj#,ts#,tcp.bo#
        from   tabcompart$ tcp, tabsubpart$ tsp
        where  tsp.pobj# = tcp.obj#) V2
where
      V1.bo# = V2.bo#
  and V1.ts# != V2.ts#
union all
/* Make sure that composite table partitions and index composite partitions
   are in the same tablespace */
select V3.obj#,V3.ts#,V4.obj#,V4.ts#, 'Table subpartition and index subpartition not fully contained in the recovery set'
from
      ( select   min(tsp.obj#) keep (dense_rank first
                   order by tcp.part#, tsp.subpart#) obj#,
                 min(tsp.ts#) keep (dense_rank first
                   order by tcp.part#, tsp.subpart#) ts#,
                 tcp.bo# bo#
        from     tabcompart$ tcp, tabsubpart$ tsp
        where    tsp.pobj# = tcp.obj#
        group by tcp.bo#) V3,
      ( select isp.obj#,ts#,icp.bo#
         from  indcompart$ icp, indsubpart$ isp
         where isp.pobj# = icp.obj#) V4, ind$ i
where
        i.bo#  =  V3.bo#
  and   V4.bo# =  i.obj#
  and   V4.ts# != V3.ts#
union all
/* Partitions having lob fragments */
select lf.fragobj#,lf.ts#, tp.obj#,tp.ts#,'Table partition and lob fragment not in recovery set'
from   lobfrag$ lf, tabpart$ tp
where  lf.tabfragobj# = tp.obj#
  and  tp.ts# !=lf.ts#
union all
/* Subpartitions having lob fragments */
select tsp.obj#,tsp.ts#,lf.fragobj#,lf.ts#,'Table Subpartition and lob fragment not fully contained in pluggable set'
from tabsubpart$ tsp, lobfrag$ lf
where tsp.obj# = lf.tabfragobj#
  and tsp.ts# != lf.ts#
union all
/* Objects that are not supported
	tab$.property
	- 0x1000  = Primary Key based OID$ column
	- 0x20000 = AQs  to be defined
   Block REF columns with ref constraints - bug 895775
*/
/* get all non partitioned, non iot unsupported objects */
select obj#, ts#, -1, -1 , ' Object not allowed in Recovery Set'
from  tab$
where (bitand(property ,4096) != 0
   or bitand(property,131072)!=0)
  and bitand(property,64)=0
  and bitand(property,32)=0
union all
/* get iot objects that aren't supported */
select i.bo#, i.ts# , -1, -1,' Object not allowed in Pluggable Set'
from tab$ t, ind$ i
where t.obj# = i.bo#
  and bitand(t.property, 64)!=0
  and (bitand(t.property, 4096)!=0
        or bitand(t.property,131072)!=0)
union all
/* partitioned objects that aren't supported */
select tp.bo#,tp.ts#,-1,-1, ' Object not allowed in Pluggable Set'
from tabpart$ tp, tab$ t
where t.obj# = tp.bo#
  and (bitand(t.property, 4096)!=0
       or bitand(t.property,131072)!=0)
union all
/* Capture subpartitioned tables that have REFs having ref constraints */
select tcp.bo#,tsp.ts#, -1, -1, '104 Object not allowed in Pluggable Set'
from tab$ t, tabcompart$ tcp, tabsubpart$ tsp
where tsp.pobj# = tcp.obj#
  and tcp.bo# = t.obj#
  and (bitand(t.property, 4096)!=0
       or bitand(t.property,131072)!=0)
union all
/* Bug 895775 Begin  */
/*  Once this bug gets fixed we should rip this code out */
/* Capture tables having referential constraints on REF column */
/* Ignore tables that are stored as IOTs or are partitioned/subpartitioned */
select t.obj#, t.ts#, -1, -1, 'Table has REF column as OID column'
from tab$ t, col$ c
where c.obj# = t.obj#
  and bitand(c.property, 524288)!=0
  and bitand(t.property,64)=0
  and bitand(t.property,32)=0
union all
/* Capture IOTs having referential constraints on REF column */
select i.bo#, i.ts# , -1, -1, 'Table has REF column as OID column'
from ind$ i, col$ c, tab$ t
where c.obj# = i.bo#
and bitand(c.property, 524288)!=0
and bitand(t.property,64)!=0
and t.obj# = i.bo#
union all
/* Capture partitioned tables that have REFs having ref constraints */
select tp.bo#,tp.ts#,-1,-1, 'Table has REF column as OID column'
from tabpart$ tp, col$ c
where c.obj# = tp.bo#
  and bitand(c.property, 524288)!=0
union all
/* Capture subpartitioned tables that have REFs having ref constraints */
select tcp.bo#,tsp.ts#, -1, -1, 'Table has REF column as OID column'
from col$ c, tabcompart$ tcp, tabsubpart$ tsp
where tsp.pobj# = tcp.obj#
  and tcp.bo# = c.obj#
  and bitand(c.property, 524288)!=0
/* End Bug 895775 */
union all
/* Check for Snapshots */
select o2.obj#,t.ts#, -1,-1, 'Snapshots not allowed in recovery set'
from obj$ o, obj$ o2, tab$ t, user$ u, snap$ s
where t.obj#=o.obj#
  and s.tname=o.name
  and s.sowner=u.name
  and u.user#=o.owner#
  and o2.owner#=o.owner#
  and o2.name=s.vname
union all
/* Master tables without snapshot logs not supported */
select distinct(t.obj#), t.ts#, -1,-1 ,'Master table used for snapshots not allowed in recovery set'
from obj$ o,tab$ t,snap$ s,user$ u
where o.obj#=t.obj#
  and o.name=s.master
  and o.owner#=u.user#
  and s.mowner=u.name
  and t.trigflag=0
union all
/* Master tables used for replication/snapshots not allowed in recovery set
   Exclude partitioned tables, they will be checked saperately.
*/
select distinct t.obj#,t.ts#, -1, -1 ,'Master table used for snapshots/replication not allowed in recovery set'
from tab$ t
where t.trigflag!=0
  and bitand(t.property,32) = 0
union all
/* Master tables used for replication/snapshots not allowed in pluggable set
   Tablespace for partitioned tables defaults to 0, hence we need to
   do the check against tabpart$
*/
select distinct t.obj#,tp.ts#, -1, -1 ,'Master table used for snapshots/replication not allowed in pluggable set'
from tab$ t, tabpart$ tp
where t.trigflag != 0
  and t.obj#      = tp.bo#
  and bitand(t.property,32) != 0
union all
/* Capture snapshots on subpartitioned tables */
select distinct t.obj#, tsp.ts#, -1, -1, 'Master table used for snapshots/replication not allowed in pluggable set'
from tab$ t, tabcompart$ tcp, tabsubpart$ tsp
where tsp.pobj#     = tcp.obj#
  and tcp.bo#       = t.obj#
  and t.trigflag   != 0
  and bitand(t.property,32) != 0
union all
/* Check for snapshot logs */
select o.obj#,t.ts#,-1,-1, 'Snapshot logs not allowed in recovery set'
from mlog$ m, tab$ t, obj$ o
where m.log=o.name
  and o.obj#=t.obj#
/* Secondary Objects not allowed in the recovery Set */
union all
select o.obj#, t.ts#,-1,-1, 'Secondary Objects not allowed in Recovery Set'
from tab$ t, obj$ o
where o.obj#=t.obj#
  and o.flags=16
union all
/* Domain/Functional  Indexes not supported */
select i.obj#,i.ts#,-1,-1,'Domain/Functional Indexes not supported'
from ind$ i
where i.type# = 9
   or i.property = 16
union all
/****************************************************/
/*                                                  */
/* Don't allow objects owned by SYS                 */
/*                                                  */
/****************************************************/
/* Capture non-partitioned tables owned by SYS */
select o.obj#, t.ts#,-1,-1, 'Sys owned tables not allowed in Recovery Set'
from tab$ t, obj$ o
where t.obj# = o.obj#
  and bitand(t.property,32) = 0
  and o.owner# = 0
union all
/* Capture partitioned tables owned by SYS */
select o.obj#, tp.ts#,-1,-1, 'Sys owned partitions not allowed in Recovery Set'
from tabpart$ tp, obj$ o
where tp.obj# = o.obj#
  and o.owner# = 0
union all
/* Capture clusters owned by SYS */
select o.obj#, c.ts#,-1,-1, 'Sys owned clusters not allowed in Recovery Set'
from clu$ c, obj$ o
where c.obj# = o.obj#
  and o.owner# = 0
union all
/* Capture subpartitions owned by SYS */
select o.obj#, tsp.ts#,-1,-1, 'Sys owned subpartitions not allowed in Recovery Set'
from tabsubpart$ tsp, obj$ o
where tsp.obj# = o.obj#
  and o.owner# = 0
union all
/* Capture non-partitioned indexes owned by SYS */
select o.obj#, i.ts#,-1,-1, 'Sys owned indexes not allowed in Recovery Set'
from ind$ i, obj$ o
where i.obj# = o.obj#
  and o.owner# = 0
  and bitand(i.property,2) =0
union all
/* Capture partitioned indexes owned by SYS */
select o.obj#, ip.ts#,-1,-1, 'Sys owned partitioned indexes not allowed in Recovery Set'
from indpart$ ip, obj$ o
where ip.obj# = o.obj#
  and o.owner# = 0
union all
/* Capture subpartitioned indexes owned by SYS */
select o.obj#, isp.ts#,-1,-1, 'Sys owned subpartitioned indexes not allowed in Recovery Set'
from indsubpart$ isp, obj$ o
where isp.obj# = o.obj#
  and o.owner# = 0
union all
/* Capture SYS owned lobs */
select l.lobj#, l.ts#,-1,-1, 'Sys owned lobs not allowed in Recovery Set'
from lob$ l, obj$ o
where l.lobj# = o.obj#
  and o.owner# = 0
union all
/* Capture partitioned lobs */
select lf.fragobj#, lf.ts#,-1,-1, 'Sys owned lob fragments not allowed in Recovery Set'
from lobfrag$ lf, obj$ o
where lf.fragobj# = o.obj#
  and o.owner# = 0
union all
/* Make sure that for IOTs the index partitions are all self contained */
select ip1.obj#, ip1.ts#, ip2.obj#, ip2.ts# , ' IOT partitions not self contained'
from (select   bo#,
               min(ts#) keep (dense_rank first order by part#) ts#,
               min(obj#) keep (dense_rank first order by part#) obj#
      from     indpart$
      group by bo#) ip1, indpart$ ip2, ind$ i, tab$ t
where ip1.bo#= i.obj#
and ip1.ts# != ip2.ts#
and ip2.bo# = i.obj#
and i.bo# = t.obj#
and bitand(t.property,64)!=0
union all
/* Make sure that for IOTs, overflow segments and index partitions are self
contained. We can take the first overflow segment partition and run it against
all the index partitions.  This guarantees completeness since all index
partitions are checked for seperately for self containment */
select tp.obj#, tp.ts#,ip.obj#,ip.ts#, ' Overflow segment and index partition not self contained'
from   indpart$ ip, ind$ i, tab$ t,
       (select  bo#,
                min(ts#) keep (dense_rank first order by part#) ts#,
                min(obj#) keep (dense_rank first order by part#) obj#
        from     tabpart$
        group by bo#) tp
where  tp.bo# = t.obj#
  and  bitand(t.property,512)!=0
  and  t.bobj# = i.bo#
  and  ip.bo#= i.obj#
  and  ip.ts# != tp.ts#;

CREATE OR REPLACE FORCE VIEW "STRADDLING_TS_OBJECTS"("OBJECT1","TS1","OBJECT2","TS2","REASON_ID","MESG_ID") AS 
(select t.obj#, t.ts#, l.lobj#, l.ts#,'Base table and lob object not fully contained in pluggable set',1
from  tab$ t, lob$ l
where l.ts#!=t.ts#
  and l.obj#=t.obj#
  and bitand(t.property,64)=0)
union all
/* check iots having lobs */
select t.obj#,i.ts#,l.lobj#, l.ts#,'Base table and lob object not fully contained in pluggable set',41
from  tab$ t, lob$ l, ind$ i
where bitand(t.property,64)!=0
  and l.ts#!=i.ts#
  and l.obj#=t.obj#
  and i.bo# = t.obj#
union all
/* check that iot and overflow segment are in same tablespace */
/* the following will capture the IOT table */
select t.obj#, t.ts#, i.obj#, i.ts#, 'IOT and Overflow segment not self contained',30
from   tab$ t, ind$ i
where  t.bobj# = i.bo#
  and  t.ts# !=  i.ts#
  and  bitand(t.property,512) != 0
union all
/*
   Are there dependencies between objects in different tablespaces that
   are enforced through constraints, also ignore constraints that are
   disabled
   Exclude IOTs (property 0x40) and partitioned (property 0x20) tables
   since their tablespace # is always 0. These have to be checked
   separately.
*/
select t.obj#,t.ts#,cdef$.obj#,t2.ts#,'Constraint between tables not contained in pluggable set',2
from tab$ t2,cdef$, tab$ t
where cdef$.robj#=t.obj#
  and cdef$.obj#=t2.obj#
  and t.ts# != t2.ts#
  and cdef$.enabled is not null
  and bitand(t.property,96)=0
  and bitand(t2.property,96)=0
union all
/*
Check for a table constraint referencing a iot
*/
select rt.obj#,i.ts#,cdef$.obj#,bt.ts#,'A table has a constraint on a IOT that is not contained in pluggable set', 2
from tab$ bt, cdef$, tab$ rt, ind$ i
where cdef$.robj# = rt.obj#
  and cdef$.obj#  = bt.obj#
  and i.bo#       = rt.obj#
  and i.ts#      != bt.ts#
  and cdef$.enabled is not null
  and bitand(rt.property,64)!= 0
union all
/* tables whose indexes are not in the same tablespace. Ignore partitioned
   objects , they are checked for separately. Also don't check for indexes
   on any unsupported TSPITR objects, also ignore indexes enforcing primary
   key constraints and unique constraints, these are checked for separately */
/* Exclude iots */
select t.obj# object1, t.ts# ts1, i.obj# object2, i.ts# ts2, 'Tables and associated indexes not fully contained in the pluggable set',3
from  tab$ t, ind$ i
where t.obj#=i.bo#
  and t.ts# != i.ts#
  and bitand(t.property,32) = 0
  and bitand(i.property,2) =0
  and bitand(t.property, 131072)=0
  and bitand(t.property,64)=0
minus  /* indexes enforcing primary key constraints */
/* fix bug 860417 - exclude partitioned objects */
/* bug 1167617    - exclude indexes enforcing unique key constraints */
select t.obj# object1, t.ts# ts1, i.obj# object2, i.ts# ts2, 'Tables and associated indexes not fully contained in the pluggable set',3
from  tab$ t, ind$ i , cdef$ cf
where t.obj#=cf.obj#
  and i.obj#=cf.enabled
  and cf.type# in( 2,3)
  and t.ts# != i.ts#
  and i.bo#=t.obj#
  and bitand(t.property,32)= 0
union all
/* The tablespace for partitioned tables defaults to 0 and thus there will   */
/* always be a violation */
select t.obj# object1, t.ts# ts1, i.obj# object2, i.ts# ts2, 'Table and Index enforcing primary key/unique key constraint not in same tablespace',4
from  tab$ t, ind$ i , cdef$ cf
where t.obj#=cf.obj#
  and i.obj#=cf.enabled
  and cf.type# in (2,3)
  and t.ts# != i.ts#
  and i.bo#=t.obj#
  and bitand(t.property,64)=0
  and bitand(t.property,32)= 0
union all
/* clusters whose indexes are not in the same tablespace */
select c.obj# object1, c.ts# ts1, i.obj# object2, i.ts# ts2,'Tables/Clusters and associated indexes not fully contained in the pluggable set',5
from clu$ c, ind$ i
where c.obj#=i.bo#
  and c.ts# != i.ts#
union all
/* partitioned tables with at least two partitions in different tablespaces */
select tp1.obj#, tp1.ts#, tp.obj#, tp.ts#, ' Partitioned Objects not fully contained in the pluggable set',6
from tabpart$ tp,
     (select  bo#,
              min(ts#) keep (dense_rank first order by part#) ts#,
              min(file#) keep (dense_rank first order by part#) file#,
              min(block#) keep (dense_rank first order by part#) block#,
              min(obj#) keep (dense_rank first order by part#) obj#
      from     tabpart$
      where file# != 0 and block# != 0
      group by bo#) tp1
where tp1.bo# = tp.bo#
  and tp1.ts# != tp.ts#
  and tp.file# !=0
  and tp.block# !=0
union all
/* partitioned indexes that are in tablespace different than any table
   partitions, Exclude partitioned iots - no storage (check for null header)
*/
select tp1.obj#,tp1.ts#,ip.obj#,ip.ts#, '  Partitioned Objects not fully contained in the pluggable set',7
from indpart$ ip, ind$ i,
     (select   bo#,
               min(ts#) keep (dense_rank first order by part#) ts#,
               min(file#) keep (dense_rank first order by part#) file#,
               min(block#) keep (dense_rank first order by part#) block#,
               min(obj#) keep (dense_rank first order by part#) obj#
      from     tabpart$
      where    file# != 0 and block# != 0
      group by bo#) tp1
where tp1.bo# = i.bo#
  and ip.bo#  = i.obj#
  and tp1.ts# != ip.ts#
union all
/* partitioned table and non-partitioned index in different tablespaces */
select tp.obj#, tp.ts#, i.obj#, i.ts#, ' Partitioned Objects not fully contained in the pluggable set',8
from tabpart$ tp, ind$ i
where tp.ts#!=i.ts#
  and bitand(i.property,2) =0
  and tp.bo#=i.bo#
union all
/*  partitioned index and non-partitioned table in different tablespaces */
select t.obj#, t.ts#, ip.obj#, ip.ts#, ' Partitioned Objects not fully contained in the pluggable set',9
from indpart$ ip, tab$ t, ind$ i
where ip.ts#!=t.ts#
  and t.property=0
  and ip.bo#=i.obj#
  and i.bo#=t.obj#
union all
/* Handle Composite partitions */
/* Subpartitions that are not in the same tablespace */
/* Check the tablespace of the first subpartition of partition 1
   against all tablespaces of other subpartitions for the same object */
select V1.obj#, V1.ts# , V2.obj#, V2.ts#, 'Subpartitions not fully contained in Transportable Set',15
from
      ( select   min(tsp.obj#) keep (dense_rank first
                   order by tcp.part#, tsp.subpart#) obj#,
                 min(tsp.ts#) keep (dense_rank first
                   order by tcp.part#, tsp.subpart#) ts#,
                 tcp.bo# bo#
        from     tabcompart$ tcp, tabsubpart$ tsp
        where    tsp.pobj# = tcp.obj#
        group by tcp.bo#) V1,
      ( select tsp.obj#,ts#,tcp.bo#
        from   tabcompart$ tcp, tabsubpart$ tsp
        where  tsp.pobj# = tcp.obj#) V2
where
      V1.bo# = V2.bo#
  and V1.ts# != V2.ts#
union all
/* Make sure that composite table partitions and index composite partitions
   are in the same tablespace */
select V3.obj#,V3.ts#,V4.obj#,V4.ts#, 'Table subpartition and index subpartition not fully contained in the Transportable Set',16
from
      ( select   min(tsp.obj#) keep (dense_rank first
                   order by tcp.part#, tsp.subpart#) obj#,
                 min(tsp.ts#) keep (dense_rank first
                   order by tcp.part#, tsp.subpart#) ts#,
                 tcp.bo# bo#
        from     tabcompart$ tcp, tabsubpart$ tsp
        where    tsp.pobj# = tcp.obj#
        group by tcp.bo#) V3,
      ( select isp.obj#,ts#,icp.bo#
         from  indcompart$ icp, indsubpart$ isp
         where isp.pobj# = icp.obj#) V4, ind$ i
where
        i.bo#  =  V3.bo#
  and   V4.bo# =  i.obj#
  and   V4.ts# != V3.ts#
union all
select lf.fragobj#,lf.ts#, tp.obj#,tp.ts#,'Table partition and lob fragment not in Transportable Set',17
from   lobfrag$ lf, tabpart$ tp
where  lf.tabfragobj# = tp.obj#
  and  tp.ts# !=lf.ts#
  union all
/* Subpartitions having lob fragments */
select tsp.obj#,tsp.ts#,lf.fragobj#,lf.ts#,'Table Subpartition and lob fragment not fully contained in pluggable set',18
from tabsubpart$ tsp, lobfrag$ lf
where tsp.obj# = lf.tabfragobj#
  and tsp.ts# != lf.ts#
union all
/* Objects that are not supported
        tab$.property
          - 0x20000 = AQs
*/
/* Extract all objects that have the above violations
   Need to hit all objects that have storage
   Tables, IOTs, Partitions, Subpartitions
*/
/* 8.0 compatible AQ with multiple recipients */
select t.obj#, t.ts#, -1, -1 , 'Object not allowed in Pluggable Set',10
from sys.dba_queue_Tables q, obj$ o, user$ u, tab$ t
where q.recipients = 'MULTIPLE'
  and substr(q.compatible,1,3) = '8.0'
  and q.queue_table = o.name
  and q.owner = u.name
  and u.user# = o.owner#
  and o.obj# = t.obj#
union all
/*
   Capture tables having scoped REF constraints in different tablespace.
   t.property  8 (0x08) -> has REF column.
   Note that this is a one-way dependency.
*/
SELECT t2.obj#, t2.ts#, o.obj#, t.ts#,
       'based table and its scoped REF object are in different tablespaces',
       44
FROM   tts_obj_view o, tts_tab_view t, refcon$ c,
       tts_obj_view o2, tts_tab_view t2
WHERE  o.obj#=t.obj# AND c.obj#=o.obj#
       AND c.stabid=o2.oid$ AND BITAND(c.reftyp,1) != 0 AND o2.obj#=t2.obj#
       AND t.ts# != t2.ts# AND BITAND(t.property, 8)=8
UNION ALL
/*
   Join indexes are allowed. The logging tables of join indexes are used
   during a transaction for updating purpose. They are not relevant for
   TTS since TTS  are made read-only.
   Note that this is a one-way dependency.
*/
SELECT o1.obj#, t1.ts#, o2.obj#, t2.ts#,
       'Tables of the join index are not in the same tablespace',43
FROM   tts_obj_view o1, tts_obj_view o2, jijoin$ j,
       tts_tab_view t1, tts_tab_view t2
WHERE  j.tab1obj#=o1.obj# AND j.tab2obj#=o2.obj#
       AND o1.obj#=t1.obj# AND o2.obj#=t2.obj#
       AND t1.ts# != t2.ts#
UNION ALL
/****************************************************/
/*                                                  */
/* Don't allow objects owned by SYS                 */
/*                                                  */
/****************************************************/
/* Capture non-partitioned tables owned by SYS */
select o.obj#, t.ts#,-1,-1, 'Sys owned tables not allowed in Transportable Set',19
from tab$ t, obj$ o
where t.obj# = o.obj#
 and bitand(t.property,32) = 0
 and o.owner# = 0
union all
/* Capture partitioned tables owned by SYS */
select o.obj#, tp.ts#,-1,-1, 'Sys owned partitions not allowed in Transportable Set',20
from tabpart$ tp, obj$ o
where tp.obj# = o.obj#
  and o.owner# = 0
union all
/* Capture clusters owned by SYS */
select o.obj#, c.ts#,-1,-1, 'Sys owned clusters not allowed in Transportable Set',21
from clu$ c, obj$ o
where c.obj# = o.obj#
  and o.owner# = 0
union all
/* Capture subpartitions owned by SYS */
select o.obj#, tsp.ts#,-1,-1, 'Sys owned subpartitions not allowed in Transportable Set',22
from tabsubpart$ tsp, obj$ o
where tsp.obj# = o.obj#
  and o.owner# = 0
union all
/* Capture non-partitioned indexes owned by SYS */
select o.obj#, i.ts#,-1,-1, 'Sys owned indexes not allowed in Transportable Set',23
from ind$ i, obj$ o
where i.obj# = o.obj#
  and o.owner# = 0
  and bitand(i.property,2) =0
union all
/* Capture partitioned indexes owned by SYS */
select o.obj#, ip.ts#,-1,-1, 'Sys owned partitioned indexes not allowed in Transportable Set',24
from indpart$ ip, obj$ o
where ip.obj# = o.obj#
  and o.owner# = 0
union all
/* Capture subpartitioned indexes owned by SYS */
select o.obj#, isp.ts#,-1,-1, 'Sys owned subpartitioned indexes not allowed in Transportable Set',25
from indsubpart$ isp, obj$ o
where isp.obj# = o.obj#
  and o.owner# = 0
union all
/* Capture SYS owned lobs */
select l.lobj#, l.ts#,-1,-1, 'Sys owned lobs not allowed in Transportable Set',26
from lob$ l, obj$ o
where l.lobj# = o.obj#
  and o.owner# = 0
union all
/* Capture partitioned lobs */
select lf.fragobj#, lf.ts#,-1,-1, 'Sys owned lob fragments not allowed in Transportable Set',27
from lobfrag$ lf, obj$ o
where lf.fragobj# = o.obj#
  and o.owner# = 0
union all
/* PL/SQL Functional Indexes not supported */
select i.obj#,i.ts#,-1,-1,'PLSQL Functional Indexes not allowed in Transportable Set',29
from ind$ i
   where bitand(i.property, 2048) = 2048
union all
/* the following cases ensure that default storage for a partitioned object
   is also part of the transportable set.  If not, then the pseudo create
   at the target will fail if the default tablespace doesn't exist
   Logical partitions are being excluded since they don't occupy storage */
/* Exclude logical partitions */
/* Ensure that the default partition  tablespace for  table partitions is self contained */
select po.obj#, defts#, tp.obj#, tp.ts#, 'Default tablespace and partition not selfcontained',33
from tabpart$ tp, partobj$ po
where po.obj# = tp.bo#
  and po.defts# != tp.ts#
  and tp.block#!=0
  and tp.file# !=0
union all
/* Ensure that the default partition  tablespace for index partitions is self contained */
select po.obj#, defts#, ip.obj#, ip.ts#, 'Default tablespace and partition not selfcontained',34
from ind$ i, indpart$ ip, partobj$ po
where po.obj# = ip.bo#
  and po.defts# != ip.ts#
  and i.obj# = ip.bo#
  and i.type# != 9
union all
/* Ensure that the default partition tablespace for subpartitions is self contained for Tables */
select tcp.obj#, defts#, tsp.obj#, tsp.ts#, 'Default tablespace and partition not selfcontained',35
from tabcompart$ tcp, tabsubpart$ tsp
where tcp.obj# = tsp.pobj#
  and tcp.defts# != tsp.ts#
union all
/* Ensure that the default partition tablespace for subpartitions is self contained for Indexes */
select icp.obj#, defts#, isp.obj#, isp.ts#, 'Default tablespace and partition not selfcontained',36
from indcompart$ icp, indsubpart$ isp
where icp.obj# = isp.pobj#
  and icp.defts# != isp.ts#
union all
/* Default for partitioned object  and table subpartition are self contained */
select po.obj#, po.defts#, tcp.obj#, tcp.defts#, 'Default tablespace and partition not selfcontained',37
from tabcompart$ tcp, partobj$ po
where tcp.bo# = po.obj#
  and tcp.defts# != po.defts#
union all
/* Default for partitioned object  and index subpartition are self contained */
select po.obj#, po.defts#, icp.obj#, icp.defts#, 'Default tablespace and partition not selfcontained',38
from indcompart$ icp, partobj$ po
where icp.bo# = po.obj#
  and icp.defts# != po.defts#
union all
/* Make sure that for IOTs the index partitions are all self contained */
select ip1.obj#, ip1.ts#, ip2.obj#, ip2.ts# ,' IOT partitions not self
contained', 39
from (select   bo#,
               min(ts#) keep (dense_rank first order by part#) ts#,
               min(obj#) keep (dense_rank first order by part#) obj#
      from     indpart$
      group by bo#) ip1, indpart$ ip2, ind$ i, tab$ t
where ip1.bo#= i.obj#
and ip1.ts# != ip2.ts#
and ip2.bo# = i.obj#
and i.bo# = t.obj#
and bitand(t.property,64)!=0
union all
/* Make sure that for IOTs, overflow segments and index partitions are self
contained. We can take the first overflow segment partition and run it against
all the index partitions.  This guarantees completeness since all index
partitions are checked for seperately for self containment */
select tp.obj#, tp.ts#,ip.obj#,ip.ts#, ' Overflow and index partition not self contained',40
from   indpart$ ip, ind$ i, tab$ t,
       (select  bo#,
                min(ts#) keep (dense_rank first order by part#) ts#,
                min(obj#) keep (dense_rank first order by part#) obj#
        from     tabpart$
        group by bo#) tp
where  tp.bo# = t.obj#
  and  bitand(t.property,512)!=0
  and  t.bobj# = i.bo#
  and  ip.bo#= i.obj#
  and  ip.ts# != tp.ts#;

CREATE OR REPLACE FORCE VIEW "SYNONYMS"("SNAME","SYNTYPE","CREATOR","TNAME","DATABASE","TABTYPE") AS 
select s.name,
         decode(s.owner#,1,'PUBLIC','PRIVATE'), t.owner, t.name, 'LOCAL',
         decode(ot.type#, 1, 'INDEX', 2, 'TABLE', 3, 'CLUSTER', 4, 'VIEW',
                         5, 'SYNONYM', 6, 'SEQUENCE', 7, 'PROCEDURE',
                         8, 'FUNCTION', 9, 'PACKAGE', 22, 'LIBRARY',
                         29, 'JAVA CLASS', 'UNDEFINED')
  from  sys.obj$ s, sys.obj$ ot, sys.syn$ t, sys.user$ u
  where s.obj# = t.obj#
    and ot.linkname is null
    and s.type# = 5
    and ot.name = t.name
    and t.owner = u.name
    and ot.owner# = u.user#
    and s.owner# in (1,userenv('SCHEMAID'))
    and t.node is null
union all
  select s.name, decode(s.owner#, 1, 'PUBLIC', 'PRIVATE'),
         t.owner, t.name, t.node, 'REMOTE'
  from  sys.obj$ s, sys.syn$ t
  where s.obj# = t.obj#
    and s.type# = 5
    and s.owner# in (1, userenv('SCHEMAID'))
    and t.node is not null;

CREATE OR REPLACE FORCE VIEW "SYSCATALOG"("TNAME","CREATOR","TABLETYPE","REMARKS") AS 
select tname, creator, tabletype, remarks
  from syscatalog_;

CREATE OR REPLACE FORCE VIEW "SYSCATALOG_"("TNAME","CREATOR","CREATORID","TABLETYPE","REMARKS") AS 
select o.name, u.name, o.owner#,
         decode(o.type#, 2, 'TABLE', 4, 'VIEW', 6, 'SEQUENCE','?'), c.comment$
  from  sys.user$ u, sys.obj$ o, sys.com$ c
  where u.user# = o.owner#
  and (o.type# in (4, 6)                                    /* view, sequence */
       or
       (o.type# = 2     /* tables, excluding iot - overflow and nested tables */
        and
        not exists (select null
                      from sys.tab$ t
                     where t.obj# = o.obj#
                       and (bitand(t.property, 512) = 512 or
                            bitand(t.property, 8192) = 8192))))
    and o.linkname is null
    and o.obj# = c.obj#(+)
    and ( o.owner# = userenv('SCHEMAID')
          or o.obj# in
             (select oa.obj#
              from   sys.objauth$ oa
              where  oa.grantee# in (userenv('SCHEMAID'), 1)
              )
          or
          (
            (o.type# in (4)                                           /* view */
             or
             (o.type# = 2 /* tables, excluding iot-overflow and nested tables */
              and
              not exists (select null
                            from sys.tab$ t
                           where t.obj# = o.obj#
                             and (bitand(t.property, 512) = 512 or
                                  bitand(t.property, 8192) = 8192))))
          and
          exists (select null from v$enabledprivs
                  where priv_number in (-45 /* LOCK ANY TABLE */,
                                        -47 /* SELECT ANY TABLE */,
                                        -48 /* INSERT ANY TABLE */,
                                        -49 /* UPDATE ANY TABLE */,
                                        -50 /* DELETE ANY TABLE */)
                  )
           )
          or
         ( o.type# = 6 /* sequence */
           and
           exists (select null from v$enabledprivs
                   where priv_number = -109 /* SELECT ANY SEQUENCE */)
         )
       );

CREATE OR REPLACE FORCE VIEW "SYSFILES"("TSNAME","FNAME","BLOCKS") AS 
select ts.name, dbf.name, f.blocks
  from  sys.ts$ ts, sys.file$ f, sys.v$dbfile dbf
  where ts.ts# = f.ts#(+) and dbf.file# = f.file# and f.status$ = 2;

CREATE OR REPLACE FORCE VIEW "SYSSEGOBJ"("OBJ#","FILE#","BLOCK#","TYPE","PCTFREE$","PCTUSED$") AS 
select obj#,
       decode(bitand(property, 32+64), 0, file#, to_number(null)),
       decode(bitand(property, 32+64), 0, block#, to_number(null)),
       'TABLE',
       decode(bitand(property, 32+64), 0, mod(pctfree$, 100), to_number(null)),
       decode(bitand(property, 32+64), 0, pctused$, to_number(null))
  from sys.tab$
  union all
  select obj#, file#, block#, 'CLUSTER', pctfree$, pctused$ from sys.clu$
  union all
  select obj#, file#, block#, 'INDEX', to_number(null), to_number(null)
         from sys.ind$;

CREATE OR REPLACE FORCE VIEW "SYS_DBA_SEGS"("OWNER","SEGMENT_NAME","PARTITION_NAME","SEGMENT_TYPE","SEGMENT_TYPE_ID","TABLESPACE_ID","TABLESPACE_NAME","BLOCKSIZE","HEADER_FILE","HEADER_BLOCK","BYTES","BLOCKS","EXTENTS","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENTS","MAX_EXTENTS","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","RELATIVE_FNO","BUFFER_POOL_ID","SEGMENT_FLAGS","SEGMENT_OBJD") AS 
select u.name, o.name, o.subname,
       so.object_type, s.type#,
       ts.ts#, ts.name, ts.blocksize,
       f.file#, s.block#,
       s.blocks * ts.blocksize, s.blocks, s.extents,
       s.iniexts * ts.blocksize,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extsize * ts.blocksize),
       s.minexts, s.maxexts,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extpct),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
              decode(s.lists, 0, 1, s.lists)),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
              decode(s.groups, 0, 1, s.groups)),
       s.file#, s.cachehint, NVL(s.spare1,0), o.dataobj#
from sys.user$ u, sys.obj$ o, sys.ts$ ts, sys.sys_objects so, sys.seg$ s,
     sys.file$ f
where s.file# = so.header_file
  and s.block# = so.header_block
  and s.ts# = so.ts_number
  and s.ts# = ts.ts#
  and o.obj# = so.object_id
  and o.owner# = u.user#
  and s.type# = so.segment_type_id
  and o.type# = so.object_type_id
  and s.ts# = f.ts#
  and s.file# = f.relfile#
union all
select u.name, un.name, NULL,
       decode(s.type#, 1, 'ROLLBACK', 10, 'TYPE2 UNDO'), s.type#,
       ts.ts#, ts.name, ts.blocksize, f.file#, s.block#,
       s.blocks * ts.blocksize, s.blocks, s.extents,
       s.iniexts * ts.blocksize, s.extsize * ts.blocksize, s.minexts,
       s.maxexts, s.extpct,
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
         decode(s.lists, 0, 1, s.lists)),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
         decode(s.groups, 0, 1, s.groups)),
       s.file#, s.cachehint, NVL(s.spare1,0), un.us#
from sys.user$ u, sys.ts$ ts, sys.undo$ un, sys.seg$ s, sys.file$ f
where s.file# = un.file#
  and s.block# = un.block#
  and s.ts# = un.ts#
  and s.ts# = ts.ts#
  and s.user# = u.user#
  and s.type# in (1, 10)
  and un.status$ != 1
  and un.ts# = f.ts#
  and un.file# = f.relfile#
union all
select u.name, to_char(f.file#) || '.' || to_char(s.block#), NULL,
       decode(s.type#, 2, 'DEFERRED ROLLBACK', 3, 'TEMPORARY',
                      4, 'CACHE', 9, 'SPACE HEADER', 'UNDEFINED'), s.type#,
       ts.ts#, ts.name, ts.blocksize,
       f.file#, s.block#,
       s.blocks * ts.blocksize, s.blocks, s.extents,
       s.iniexts * ts.blocksize,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extsize * ts.blocksize),
       s.minexts, s.maxexts,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extpct),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
         decode(s.lists, 0, 1, s.lists)),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
         decode(s.groups, 0, 1, s.groups)),
       s.file#, s.cachehint, NVL(s.spare1,0), s.hwmincr
from sys.user$ u, sys.ts$ ts, sys.seg$ s, sys.file$ f
where s.ts# = ts.ts#
  and s.user# = u.user#
  and s.type# not in (1, 5, 6, 8, 10)
  and s.ts# = f.ts#
  and s.file# = f.relfile#;

CREATE OR REPLACE FORCE VIEW "SYS_OBJECTS"("OBJECT_TYPE","OBJECT_TYPE_ID","SEGMENT_TYPE_ID","OBJECT_ID","HEADER_FILE","HEADER_BLOCK","TS_NUMBER") AS 
select decode(bitand(t.property, 8192), 8192, 'NESTED TABLE', 'TABLE'), 2, 5,
       t.obj#, t.file#, t.block#, t.ts#
from sys.tab$ t
where bitand(t.property, 1024) = 0               /* exclude clustered tables */
union all
select 'TABLE PARTITION', 19, 5,
       tp.obj#, tp.file#, tp.block#, tp.ts#
from sys.tabpart$ tp
union all
select 'CLUSTER', 3, 5,
       c.obj#, c.file#, c.block#, c.ts#
from sys.clu$ c
union all
select decode(i.type#, 8, 'LOBINDEX', 'INDEX'), 1, 6,
       i.obj#, i.file#, i.block#, i.ts#
from sys.ind$ i
where i.type# in (1, 2, 3, 4, 6, 7, 8, 9)
union all
select 'INDEX PARTITION', 20, 6,
       ip.obj#, ip.file#, ip.block#, ip.ts#
from sys.indpart$ ip
union all
select 'LOBSEGMENT', 21, 8,
       l.lobj#, l.file#, l.block#, l.ts#
from sys.lob$ l
where (bitand(l.property, 64) = 0) or
      (bitand(l.property, 128) = 128)
union all
select 'TABLE SUBPARTITION', 34, 5,
       tsp.obj#, tsp.file#, tsp.block#, tsp.ts#
       from sys.tabsubpart$ tsp
union all
select 'INDEX SUBPARTITION', 35, 6,
       isp.obj#, isp.file#, isp.block#, isp.ts#
from sys.indsubpart$ isp
union all
select decode(lf.fragtype$, 'P', 'LOB PARTITION', 'LOB SUBPARTITION'),
       decode(lf.fragtype$, 'P', 40, 41), 8,
       lf.fragobj#, lf.file#, lf.block#, lf.ts#
from sys.lobfrag$ lf;

CREATE OR REPLACE FORCE VIEW "SYS_USER_SEGS"("SEGMENT_NAME","PARTITION_NAME","SEGMENT_TYPE","SEGMENT_TYPE_ID","TABLESPACE_ID","TABLESPACE_NAME","BLOCKSIZE","HEADER_FILE","HEADER_BLOCK","BYTES","BLOCKS","EXTENTS","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENTS","MAX_EXTENTS","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","BUFFER_POOL_ID","SEGMENT_FLAGS","SEGMENT_OBJD") AS 
select o.name,
       o.subname,
       so.object_type, s.type#,
       ts.ts#, ts.name, ts.blocksize,
       s.file#, s.block#,
       s.blocks * ts.blocksize, s.blocks, s.extents,
       s.iniexts * ts.blocksize,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extsize * ts.blocksize),
       s.minexts, s.maxexts,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extpct),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
              decode(s.lists, 0, 1, s.lists)),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
              decode(s.groups, 0, 1, s.groups)),
       s.cachehint, NVL(s.spare1, 0), s.hwmincr
from sys.obj$ o, sys.ts$ ts, sys.sys_objects so, sys.seg$ s
where s.file# = so.header_file
  and s.block# = so.header_block
  and s.ts# = so.ts_number
  and s.ts# = ts.ts#
  and o.obj# = so.object_id
  and o.owner# = userenv('SCHEMAID')
  and s.type# = so.segment_type_id
  and o.type# = so.object_type_id
union all
select un.name, NULL,
       decode(s.type#, 1, 'ROLLBACK', 10, 'TYPE2 UNDO'), s.type#,
       ts.ts#, ts.name, ts.blocksize,
       s.file#, s.block#,
       s.blocks * ts.blocksize, s.blocks, s.extents,
       s.iniexts * ts.blocksize, s.extsize * ts.blocksize, s.minexts,
       s.maxexts, s.extpct,
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
         decode(s.lists, 0, 1, s.lists)),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
         decode(s.groups, 0, 1, s.groups)),
       s.cachehint, NVL(s.spare1, 0), s.hwmincr
from sys.ts$ ts, sys.undo$ un, sys.seg$ s
where s.file# = un.file#
  and s.block# = un.block#
  and s.ts# = un.ts#
  and s.ts# = ts.ts#
  and s.user# = userenv('SCHEMAID')
  and s.type# in (1, 10)
  and un.status$ != 1
union all
select to_char(f.file#) || '.' || to_char(s.block#),
       NULL,
       decode(s.type#, 2, 'DEFERRED ROLLBACK', 3, 'TEMPORARY',
                      4, 'CACHE', 9, 'SPACE HEADER', 'UNDEFINED'), s.type#,
       ts.ts#, ts.name, ts.blocksize,
       s.file#, s.block#,
       s.blocks * ts.blocksize, s.blocks, s.extents,
       s.iniexts * ts.blocksize,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extsize * ts.blocksize),
       s.minexts, s.maxexts,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extpct),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
         decode(s.lists, 0, 1, s.lists)),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
         decode(s.groups, 0, 1, s.groups)),
       s.cachehint, NVL(s.spare1,0), s.hwmincr
from sys.ts$ ts, sys.seg$ s, sys.file$ f
where s.ts# = ts.ts#
  and s.ts# = f.ts#
  and s.file# = f.relfile#
  and s.user# = userenv('SCHEMAID')
  and s.type# not in (1, 5, 6, 8, 10);

CREATE OR REPLACE FORCE VIEW "TAB"("TNAME","TABTYPE","CLUSTERID") AS 
select o.name,
      decode(o.type#, 2, 'TABLE', 3, 'CLUSTER',
             4, 'VIEW', 5, 'SYNONYM'), t.tab#
  from  sys.tab$ t, sys.obj$ o
  where o.owner# = userenv('SCHEMAID')
  and o.type# >=2
  and o.type# <=5
  and o.linkname is null
  and o.obj# = t.obj# (+);

CREATE OR REPLACE FORCE VIEW "TABCOMPARTV$"("OBJ#","DATAOBJ#","BO#","PART#","HIBOUNDLEN","HIBOUNDVAL","SUBPARTCNT","FLAGS","DEFTS#","DEFPCTFREE","DEFPCTUSED","DEFINITRANS","DEFMAXTRANS","DEFINIEXTS","DEFEXTSIZE","DEFMINEXTS","DEFMAXEXTS","DEFEXTPCT","DEFLISTS","DEFGROUPS","DEFLOGGING","DEFBUFPOOL","ANALYZETIME","SAMPLESIZE","ROWCNT","BLKCNT","EMPCNT","AVGSPC","CHNCNT","AVGRLN","SPARE1","SPARE2","SPARE3") AS 
select obj#, dataobj#, bo#,
          row_number() over (partition by bo# order by part#),
          hiboundlen, hiboundval, subpartcnt, flags, defts#, defpctfree,
          defpctused, definitrans, defmaxtrans, definiexts,
          defextsize, defminexts, defmaxexts, defextpct, deflists, defgroups,
          deflogging, defbufpool, analyzetime, samplesize, rowcnt, blkcnt,
          empcnt, avgspc, chncnt, avgrln, spare1, spare2, spare3
from tabcompart$;

CREATE OR REPLACE FORCE VIEW "TABLESPACE_EXPORT_OBJECTS"("OBJECT_PATH","COMMENTS","NAMED") AS 
select OBJECT_PATH, COMMENTS, NAMED
    from dba_export_objects
    where het_type='TABLESPACE_EXPORT';

CREATE OR REPLACE FORCE VIEW "TABLE_EXPORT_OBJECTS"("OBJECT_PATH","COMMENTS","NAMED") AS 
select OBJECT_PATH, COMMENTS, NAMED
    from dba_export_objects
    where het_type='TABLE_EXPORT';

CREATE OR REPLACE FORCE VIEW "TABLE_PRIVILEGES"("GRANTEE","OWNER","TABLE_NAME","GRANTOR","SELECT_PRIV","INSERT_PRIV","DELETE_PRIV","UPDATE_PRIV","REFERENCES_PRIV","ALTER_PRIV","INDEX_PRIV","CREATED") AS 
select ue.name, u.name, o.name, ur.name,
    decode(substr(lpad(sum(power(10, privilege#*2) +
      decode(mod(option$,2), 1, power(10, privilege#*2 + 1), 0)), 26, '0'), 7, 2),
      '00', 'N', '01', 'Y', '11', 'G', 'N'),
     decode(substr(lpad(sum(decode(col#, null, power(10, privilege#*2) +
       decode(mod(option$,2), 1, power(10, privilege#*2 + 1), 0), 0)), 26, '0'),
              13, 2), '01', 'A', '11', 'G',
          decode(sum(decode(col#,
                            null, 0,
                            decode(privilege#, 6, 1, 0))), 0, 'N', 'S')),
    decode(substr(lpad(sum(power(10, privilege#*2) +
      decode(mod(option$,2), 1, power(10, privilege#*2 + 1), 0)), 26, '0'), 19, 2),
      '00', 'N', '01', 'Y', '11', 'G', 'N'),
    decode(substr(lpad(sum(decode(col#, null, power(10, privilege#*2) +
      decode(mod(option$,2), 1, power(10, privilege#*2 + 1), 0), 0)), 26, '0'),
             5, 2),'01', 'A', '11', 'G',
          decode(sum(decode(col#,
                            null, 0,
                            decode(privilege#, 10, 1, 0))), 0, 'N', 'S')),
    decode(substr(lpad(sum(decode(col#, null, power(10, privilege#*2) +
      decode(mod(option$,2), 1, power(10, privilege#*2 + 1), 0), 0)), 26, '0'),
             3, 2), '01', 'A', '11', 'G',
          decode(sum(decode(col#,
                            null, 0,
                            decode(privilege#, 11, 1, 0))), 0, 'N', 'S')),
   decode(substr(lpad(sum(power(10, privilege#*2) +
      decode(mod(option$,2), 1, power(10, privilege#*2 + 1), 0)), 26, '0'), 25, 2),
      '00', 'N', '01', 'Y', '11', 'G', 'N'),
    decode(substr(lpad(sum(power(10, privilege#*2) +
      decode(mod(option$,2), 1, power(10, privilege#*2 + 1), 0)), 26, '0'), 15, 2),
      '00', 'N', '01', 'Y', '11', 'G', 'N'), min(null)
from sys.objauth$ oa, sys.obj$ o, sys.user$ ue, sys.user$ ur, sys.user$ u
where oa.obj# = o.obj#
  and oa.grantor# = ur.user#
  and oa.grantee# = ue.user#
  and u.user# = o.owner#
  and (oa.grantor# = userenv('SCHEMAID') or
       oa.grantee# in (select kzsrorol from x$kzsro) or
       o.owner# = userenv('SCHEMAID'))
  group by u.name, o.name, ur.name, ue.name;

CREATE OR REPLACE FORCE VIEW "TABPARTV$"("OBJ#","DATAOBJ#","BO#","PART#","HIBOUNDLEN","HIBOUNDVAL","TS#","FILE#","BLOCK#","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","FLAGS","ANALYZETIME","SAMPLESIZE","ROWCNT","BLKCNT","EMPCNT","AVGSPC","CHNCNT","AVGRLN") AS 
select obj#, dataobj#, bo#,
          row_number() over (partition by bo# order by part#),
          hiboundlen, hiboundval, ts#, file#, block#, pctfree$, pctused$,
          initrans, maxtrans, flags, analyzetime, samplesize, rowcnt, blkcnt,
          empcnt, avgspc, chncnt, avgrln
from tabpart$;

CREATE OR REPLACE FORCE VIEW "TABQUOTAS"("TNAME","TYPE","OBJNO","NEXTEXT","MAXEXT","PINC","PFREE","PUSED") AS 
select t.name, so.type, t.obj#,
  decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                s.extsize * ts.blocksize),
  s.maxexts,
  decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extpct),
  so.pctfree$, decode(bitand(ts.flags, 32), 32, to_number(NULL), so.pctused$)
  from  sys.ts$ ts, sys.seg$ s, sys.obj$ t, syssegobj so
  where t.owner# = userenv('SCHEMAID')
  and   t.obj# = so.obj#
  and   so.file# = s.file#
  and   so.block# = s.block#
  and   s.ts# = ts.ts#;

CREATE OR REPLACE FORCE VIEW "TABSUBPARTV$"("OBJ#","DATAOBJ#","POBJ#","SUBPART#","FLAGS","TS#","FILE#","BLOCK#","PCTFREE$","PCTUSED$","INITRANS","MAXTRANS","ANALYZETIME","SAMPLESIZE","ROWCNT","BLKCNT","EMPCNT","AVGSPC","CHNCNT","AVGRLN","SPARE1","SPARE2","SPARE3","HIBOUNDLEN","HIBOUNDVAL") AS 
select obj#, dataobj#, pobj#,
          row_number() over (partition by pobj# order by subpart#),
          flags, ts#, file#, block#, pctfree$,
          pctused$, initrans, maxtrans, analyzetime, samplesize, rowcnt,
          blkcnt, empcnt, avgspc, chncnt, avgrln, spare1, spare2, spare3,
          hiboundlen, hiboundval
from tabsubpart$;

CREATE OR REPLACE FORCE VIEW "TP$"("OBJ#","BO#","INTCOL#","CNAME") AS 
select tp.obj#, tp.bo#, c.intcol#,
      decode(bitand(c.property, 1), 1, a.name, c.name) cname
      from sys.col$ c, sys.tabpart$ tp, attrcol$ a
      where tp.bo# = c.obj# and
      c.obj# = a.obj#(+) and c.intcol# = a.intcol#(+) and
      bitand(c.property,32768) != 32768    /* not unused columns */
union
select tcp.obj#, tcp.bo#, c.intcol#,
      decode(bitand(c.property, 1), 1, a.name, c.name) cname
      from sys.col$ c, sys.tabcompart$ tcp, attrcol$ a
      where tcp.bo# = c.obj# and
      c.obj# = a.obj#(+) and c.intcol# = a.intcol#(+) and
      bitand(c.property,32768) != 32768    /* not unused columns */;

CREATE OR REPLACE FORCE VIEW "TRANSPORTABLE_EXPORT_OBJECTS"("OBJECT_PATH","COMMENTS","NAMED") AS 
select OBJECT_PATH, COMMENTS, NAMED
    from dba_export_objects
    where het_type='TRANSPORTABLE_EXPORT';

CREATE OR REPLACE FORCE VIEW "TRUSTED_SERVERS"("TRUST","NAME") AS 
select a.trust, b.dbname from sys.trusted_list$ b,
(select decode (dbname, '+*','Untrusted', '-*', 'Trusted') trust
from sys.trusted_list$ where dbname like '%*') a
where b.dbname not like '%*'
union
select decode (dbname, '-*', 'Untrusted', '+*', 'Trusted') trust, 'All'
from sys.trusted_list$
where dbname like '%*';

CREATE OR REPLACE FORCE VIEW "TSP$"("OBJ#","BO#","INTCOL#","CNAME") AS 
select tsp.obj#, tcp.bo#, c.intcol#,
      decode(bitand(c.property, 1), 1, a.name, c.name) cname
      from sys.col$ c, sys.tabsubpart$ tsp, sys.tabcompart$ tcp, attrcol$ a
      where tsp.pobj# = tcp.obj# and tcp.bo# = c.obj#
      and bitand(c.property,32768) != 32768    /* not unused columns */
      and c.obj# = a.obj#(+) and c.intcol# = a.intcol#(+);

CREATE OR REPLACE FORCE VIEW "TS_PITR_CHECK"("OBJ1_OWNER","OBJ1_NAME","OBJ1_SUBNAME","OBJ1_TYPE","TS1_NAME","OBJ2_NAME","OBJ2_SUBNAME","OBJ2_TYPE","OBJ2_OWNER","TS2_NAME","CONSTRAINT_NAME","REASON") AS 
select obj1_owner,obj1_name,obj1_subname,obj1_type,ts1_name,obj2_name,obj2_subname,obj2_type,u.name,nvl(ts2_name,'-1'),c.name,reason
from ts_pitr_info t, user$ u, con$ c
where u.user#(+)=t.obj2_owner
 and c.con#(+)=t.constraint_no ;

CREATE OR REPLACE FORCE VIEW "TS_PITR_INFO"("OBJ1_OWNER","OBJ1_NAME","OBJ1_SUBNAME","OBJ1_TYPE","TS1_NAME","OBJ2_NAME","OBJ2_SUBNAME","OBJ2_TYPE","OBJ2_OWNER","TS2_NAME","CONSTRAINT_NO","REASON") AS 
select u.name owner,o1.name,o1.subname,
       decode(o1.type#,0, 'NEXT OBJECT', 1, 'INDEX',
                          2, 'TABLE', 3, 'CLUSTER',
                          4, 'VIEW', 5, 'SYNONYM', 6, 'SEQUENCE',
                          7, 'PROCEDURE', 8, 'FUNCTION', 9, 'PACKAGE',
                          11, 'PACKAGE BODY', 12, 'TRIGGER',
                          13, 'TYPE', 14, 'TYPE BODY',
                          19, 'TABLE PARTITION', 20, 'INDEX PARTITION',
                          21, 'LOB', 22, 'LIBRARY', 23, 'DIRECTORY',
                          28, 'JAVA SOURCE', 29, 'JAVA CLASS',
                          30, 'JAVA RESOURCE', 56, 'JAVA DATA', '         '),
	ts1.name,o2.name,o2.subname,
	decode(o2.type#, 0, 'NEXT OBJECT', 1, 'INDEX',
                          2, 'TABLE', 3, 'CLUSTER',
                          4, 'VIEW', 5, 'SYNONYM', 6, 'SEQUENCE',
                          7, 'PROCEDURE', 8, 'FUNCTION', 9, 'PACKAGE',
                          11, 'PACKAGE BODY', 12, 'TRIGGER',
                          13, 'TYPE', 14, 'TYPE BODY',
                          19, 'TABLE PARTITION', 20, 'INDEX PARTITION',
                          21, 'LOB', 22, 'LIBRARY', 23, 'DIRECTORY',
                          28, 'JAVA SOURCE', 29, 'JAVA CLASS',
                          30, 'JAVA RESOURCE', 56, 'JAVA DATA', '         '),
	o2.owner#,ts2.name,cf.con#,s.reason_id
from straddling_rs_objects s, obj$ o1, obj$ o2, ts$ ts1, ts$ ts2 , user$ u,cdef$ cf
where s.object1=o1.obj#
  and s.object2=o2.obj#(+)
  and s.ts1=ts1.ts#
  and s.ts2=ts2.ts#(+)
  and o1.owner#=u.user#
  and s.object2=cf.obj#(+)
  and bitand(o1.flags, 128)=0
  and (o2.flags is null or bitand(o2.flags, 128)=0)
union all
/* capture rollback segs */
select 'SYS', u.name, NULL, 'ROLLBACK SEGMENT', ts.name,NULL , NULL, NULL,-1, NULL,-1,'Rollback Segment not allowed in transportable set'
from   undo$ u, ts$ ts
where  u.ts# = ts.ts#
  and  ts.ts# != 0
  and  u.status$ != 1;

CREATE OR REPLACE FORCE VIEW "TS_PITR_OBJECTS_TO_BE_DROPPED"("OWNER","NAME","CREATION_TIME","TABLESPACE_NAME") AS 
(select u.name,o.name,o.ctime,tablespace_name
from user$ u, obj$ o, dba_segments s
where u.user# = o.owner#
  and o.name  = s.segment_name
  and u.name  = s.owner);

CREATE OR REPLACE FORCE VIEW "TS_PLUG_INFO"("OBJ1_OWNER","OBJ1_NAME","OBJ1_SUBNAME","OBJ1_TYPE","TS1_NAME","OBJ2_NAME","OBJ2_SUBNAME","OBJ2_TYPE","OBJ2_OWNER","TS2_NAME","CONSTRAINT_NO","REASON","MESG_ID") AS 
select u.name owner,o1.name,o1.subname,
       decode(o1.type#,0, 'NEXT OBJECT', 1, 'INDEX',
                          2, 'TABLE', 3, 'CLUSTER',
                          4, 'VIEW', 5, 'SYNONYM', 6, 'SEQUENCE',
                          7, 'PROCEDURE', 8, 'FUNCTION', 9, 'PACKAGE',
                          11, 'PACKAGE BODY', 12, 'TRIGGER',
                          13, 'TYPE', 14, 'TYPE BODY',
                          19, 'TABLE PARTITION', 20, 'INDEX PARTITION',
                          21, 'LOB', 22, 'LIBRARY', 23, 'DIRECTORY',
                          28, 'JAVA SOURCE', 29, 'JAVA CLASS',
                          30, 'JAVA RESOURCE', 34, 'TABLE SUBPARTITION',
                          40, 'LOB', 56, 'JAVA DATA', '         '),
        ts1.name,o2.name,o2.subname,
        decode(o2.type#, 0, 'NEXT OBJECT', 1, 'INDEX',
                          2, 'TABLE', 3, 'CLUSTER',
                          4, 'VIEW', 5, 'SYNONYM', 6, 'SEQUENCE',
                          7, 'PROCEDURE', 8, 'FUNCTION', 9, 'PACKAGE',
                          11, 'PACKAGE BODY', 12, 'TRIGGER',
                          13, 'TYPE', 14, 'TYPE BODY',
                          19, 'TABLE PARTITION', 20, 'INDEX PARTITION',
                          21, 'LOB', 22, 'LIBRARY', 23, 'DIRECTORY',
                          28, 'JAVA SOURCE', 29, 'JAVA CLASS',
                          30, 'JAVA RESOURCE', 34,'TABLE SUBPARTITION',
                          40, 'LOB', 56, 'JAVA DATA', '         '),
        o2.owner#,ts2.name,cf.con#,s.reason_id,mesg_id
from straddling_ts_objects s, obj$ o1, obj$ o2, ts$ ts1, ts$ ts2 , user$ u,cdef$ cf
where s.object1=o1.obj#
  and s.object2=o2.obj#(+)
  and s.ts1=ts1.ts#
  and s.ts2=ts2.ts#(+)
  and o1.owner#=u.user#
  and s.object2=cf.obj#(+)
  and bitand(o1.flags, 128)=0
  and (o2.flags is null or bitand(o2.flags, 128)=0)
union all
/* capture undo segs in transportable set */
select 'SYS', u.name, NULL, 'ROLLBACK SEGMENT', ts.name,NULL , NULL, NULL,-1, NULL,-1,'Rollback Segment not allowed in transportable set', 32
from   undo$ u, ts$ ts
where  u.ts# = ts.ts#
  and  ts.ts# != 0
  and  u.status$ != 1;

CREATE OR REPLACE FORCE VIEW "TTS_OBJ_VIEW"("OBJ#","DATAOBJ#","OWNER#","NAME","NAMESPACE","SUBNAME","TYPE#","CTIME","MTIME","STIME","STATUS","REMOTEOWNER","LINKNAME","FLAGS","OID$","SPARE1","SPARE2","SPARE3","SPARE4","SPARE5","SPARE6") AS 
select "OBJ#","DATAOBJ#","OWNER#","NAME","NAMESPACE","SUBNAME","TYPE#","CTIME","MTIME","STIME","STATUS","REMOTEOWNER","LINKNAME","FLAGS","OID$","SPARE1","SPARE2","SPARE3","SPARE4","SPARE5","SPARE6" from obj$ where bitand(flags, 128)=0;

CREATE OR REPLACE FORCE VIEW "TTS_TAB_VIEW"("OBJ#","TS#","PROPERTY") AS 
select t.obj#,t.ts#, t.property
from   tab$ t
where  BITAND(t.property, 2151678048)=0
union all
/* IOT - returns IOT index object's ts# */
select t.obj#, i.ts#, t.property
from   tab$ t, ind$ i
where  BITAND(t.property, 72)=72 AND i.bo#=t.obj#
union all
/* partitioned table - returns partitioned objects default ts#.
   Note that it is not necessary to check against all partitions and
   subpartitions because (1) there is already a check for containment
   among default tablespace and partition and subpartition tablespaces,
   (2) containment property is transitive.
*/
select t.obj#, po.defts#, t.property
from   tab$ t, partobj$ po
where  BITAND(t.property, 40)=40 and po.obj#=t.obj#;

CREATE OR REPLACE FORCE VIEW "UNI_PLUGGABLE_SET_CHECK"("OBJ1_OWNER","OBJ1_NAME","OBJ1_SUBNAME","OBJ1_TYPE","TS1_NAME","OBJ2_NAME","OBJ2_SUBNAME","OBJ2_TYPE","OBJ2_OWNER","TS2_NAME","CONSTRAINT_NAME","REASON","MESG_ID") AS 
select obj1_owner,obj1_name,obj1_subname,obj1_type,ts1_name,
          obj2_name,obj2_subname,obj2_type,u.name,nvl(ts2_name,'-1'),
          c.name,reason,mesg_id
   from  ts_plug_info t, user$ u, con$ c
   where u.user#(+)=t.obj2_owner
   and   c.con#(+)=t.constraint_no ;

CREATE OR REPLACE FORCE VIEW "USER_ADVISOR_ACTIONS"("TASK_ID","TASK_NAME","REC_ID","ACTION_ID","OBJECT_ID","COMMAND","COMMAND_ID","FLAGS","ATTR1","ATTR2","ATTR3","ATTR4","ATTR5","ATTR6","NUM_ATTR1","NUM_ATTR2","NUM_ATTR3","NUM_ATTR4","NUM_ATTR5","MESSAGE") AS 
select a.task_id as task_id,
             b.name as task_name,
             d.rec_id as rec_id,
             a.id as action_id,
             a.obj_id as object_id,
             c.command_name as command,
             a.command as command_id,
             a.flags as flags,
             a.attr1 as attr1,
             a.attr2 as attr2,
             a.attr3 as attr3,
             a.attr4 as attr4,
             a.attr5 as attr5,
             a.attr6 as attr6,
             a.num_attr1 as num_attr1,
             a.num_attr2 as num_attr2,
             a.num_attr3 as num_attr3,
             a.num_attr4 as num_attr4,
             a.num_attr5 as num_attr5,
             dbms_advisor.format_message_group(a.msg_id) as message
      from wri$_adv_actions a, wri$_adv_tasks b, x$keacmdn c,
           wri$_adv_rec_actions d
      where a.task_id = b.id
        and a.command = c.indx
        and d.task_id = a.task_id
        and d.act_id = a.id
        and b.owner# = userenv('SCHEMAID')
        and bitand(b.property,6) = 4
        and ((b.advisor_id = 2 and bitand(a.flags,2048) = 0) or
             (b.advisor_id <> 2));

CREATE OR REPLACE FORCE VIEW "USER_ADVISOR_DIRECTIVES"("TASK_ID","TASK_NAME","SOURCE_TASK_ID","DIRECTIVE_ID","REC_OBJ_OWNER","REC_OBJ_NAME","REC_ID","REC_ACTION_ID","COMMAND","ATTR1","ATTR2","ATTR3","ATTR4","ATTR5") AS 
select a.task_id as task_id,
             b.name as task_name,
             a.src_task_id as source_task_id,
             a.id as directive_id,
             a.obj_owner as rec_obj_owner,
             a.obj_name as rec_obj_name,
             a.rec_id as rec_id,
             a.rec_action_id as rec_action_id,
             c.command_name as command,
             a.attr1 as attr1,
             a.attr2 as attr2,
             a.attr3 as attr3,
             a.attr4 as attr4,
             a.attr5 as attr5
      from wri$_adv_directives a, wri$_adv_tasks b,
           x$keacmdn c
      where a.task_id = b.id
        and a.command = c.indx
        and b.owner# = userenv('SCHEMAID')
        and bitand(b.property,6) = 4;

CREATE OR REPLACE FORCE VIEW "USER_ADVISOR_FINDINGS"("TASK_ID","TASK_NAME","FINDING_ID","TYPE","PARENT","OBJECT_ID","IMPACT_TYPE","IMPACT","MESSAGE","MORE_INFO") AS 
select a.task_id as task_id,
            b.name as task_name,
            a.id as finding_id,
            decode (a.type,
                    1, 'PROBLEM',
                    2, 'SYMPTOM',
                    3, 'ERROR',
                    4, 'INFORMATION')  as type,
            a.parent as parent,
            a.obj_id as object_id,
            dbms_advisor.format_message_group(a.impact_msg_id) as impact_type,
            a.impact_val as impact,
            dbms_advisor.format_message_group(a.msg_id) as message,
            dbms_advisor.format_message_group(a.more_info_id) as more_info
    from wri$_adv_findings a, wri$_adv_tasks b
    where a.task_id = b.id
      and b.owner# = userenv('SCHEMAID')
        and bitand(b.property,6) = 4;

CREATE OR REPLACE FORCE VIEW "USER_ADVISOR_JOURNAL"("TASK_ID","TASK_NAME","JOURNAL_ENTRY_SEQ","JOURNAL_ENTRY_TYPE","JOURNAL_ENTRY") AS 
select a.task_id as task_id,
             b.name as task_name,
             a.seq_id as journal_entry_seq,
             decode(a.type, 1, 'INFORMATION',
                            2, 'WARNING',
                            3, 'ERROR',
                            4, 'FATAL',
                            5, 'DEBUG1',
                            6, 'DEBUG2',
                            7, 'DEBUG3',
                            8, 'DEBUG4',
                            9, 'DEBUG5') as journal_entry_type,
             dbms_advisor.format_message_group(a.msg_id) as journal_entry
      from wri$_adv_journal a, wri$_adv_tasks b
      where a.task_id = b.id
        and bitand(b.property,4) = 4
        and b.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_ADVISOR_LOG"("TASK_ID","TASK_NAME","EXECUTION_START","EXECUTION_END","STATUS","STATUS_MESSAGE","PCT_COMPLETION_TIME","PROGESS_METRIC","METRIC_UNITS","ACTIVITY_COUNTER","RECOMMENDATION_COUNT","ERROR_MESSAGE") AS 
select a.id as task_id,
         a.name as task_name,
         a.exec_start as execution_start,
         a.exec_end as execution_end,
         decode(a.status, 1, 'INITIAL',
                          2, 'EXECUTING',
                          3, 'COMPLETED',
                          4, 'INTERRUPTED',
                          5, 'CANCELLED',
                          6, 'FATAL ERROR') as status,
          dbms_advisor.format_message_group(a.status_msg_id) as status_message,
          a.pct_completion_time as pct_completion_time,
          a.progress_metric as progess_metric,
          a.metric_units as metric_units,
          a.activity_counter as activity_counter,
          a.rec_count as recommendation_count,
          dbms_advisor.format_message_group(a.error_msg#) as error_message
  from wri$_adv_tasks a
  where bitand(a.property,6) = 4 and
        a.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_ADVISOR_OBJECTS"("OBJECT_ID","TYPE","TYPE_ID","TASK_ID","TASK_NAME","ATTR1","ATTR2","ATTR3","ATTR4","ATTR5") AS 
select a.id as object_id,
            c.object_type as type,
            a.type as type_id,
            a.task_id as task_id,
            b.name as task_name,
            a.attr1 as attr1,
            a.attr2 as attr2,
            a.attr3 as attr3,
            a.attr4 as attr4,
            a.attr5 as attr5
      from wri$_adv_objects a, wri$_adv_tasks b, x$keaobjt c
      where a.task_id = b.id
        and b.owner# = userenv('SCHEMAID')
        and c.indx = a.type;

CREATE OR REPLACE FORCE VIEW "USER_ADVISOR_PARAMETERS"("TASK_ID","TASK_NAME","PARAMETER_NAME","PARAMETER_VALUE","PARAMETER_TYPE","IS_DEFAULT","IS_OUTPUT","IS_MODIFIABLE_ANYTIME") AS 
select a.task_id as task_id,
             b.name as task_name,
             a.name as parameter_name,
             a.value as parameter_value,
             decode(a.datatype, 1, 'NUMBER',
                                2, 'STRING',
                                3, 'STRINGLIST',
                                4, 'TABLE',
                                5, 'TABLELIST',
                                'UNKNOWN')
                 as parameter_type,
             decode(bitand(a.flags,2), 0, 'Y', 'N') as is_default,
             decode(bitand(a.flags,4), 0, 'N', 'Y') as is_output,
             decode(bitand(a.flags,8), 0, 'N', 'Y') as is_modifiable_anytime
      from wri$_adv_parameters a, wri$_adv_tasks b
      where a.task_id = b.id
        and b.owner# = userenv('SCHEMAID')
        and bitand(b.property,4) = 4
        and bitand(a.flags,1) = 0;

CREATE OR REPLACE FORCE VIEW "USER_ADVISOR_RATIONALE"("TASK_ID","TASK_NAME","REC_ID","RATIONALE_ID","IMPACT_TYPE","IMPACT","MESSAGE","OBJECT_ID","TYPE","ATTR1","ATTR2","ATTR3","ATTR4","ATTR5") AS 
select a.task_id as task_id,
             b.name as task_name,
             a.rec_id as rec_id,
             a.id as rationale_id,
             dbms_advisor.format_message_group(a.impact_msg_id) as impact_type,
             a.impact_val as impact,
             dbms_advisor.format_message_group(a.msg_id) as message,
             a.obj_id as object_id,
             a.type,
             a.attr1 as attr1,
             a.attr2 as attr2,
             a.attr3 as attr3,
             a.attr4 as attr4,
             a.attr5 as attr5
      from wri$_adv_rationale a, wri$_adv_tasks b
      where a.task_id = b.id
        and b.owner# = userenv('SCHEMAID')
        and bitand(b.property,6) = 4;

CREATE OR REPLACE FORCE VIEW "USER_ADVISOR_RECOMMENDATIONS"("REC_ID","TASK_ID","TASK_NAME","FINDING_ID","TYPE","RANK","PARENT_REC_IDS","BENEFIT_TYPE","BENEFIT","ANNOTATION_STATUS") AS 
select a.id as rec_id,
            a.task_id as task_id,
            b.name as task_name,
            a.finding_id as finding_id,
            a.type,
            a.rank as rank,
            a.parent_recs as parent_rec_ids,
            dbms_advisor.format_message_group(a.benefit_msg_id) as benefit_type,
            a.benefit_val as benefit,
            decode(annotation, 1, 'ACCEPT',
                               2, 'REJECT',
                               3, 'IGNORE',
                               4, 'IMPLEMENTED') as annotation_status
     from wri$_adv_recommendations a, wri$_adv_tasks b
     where a.task_id = b.id and
           b.owner# = userenv('SCHEMAID') and
           bitand(b.property,6) = 4;

CREATE OR REPLACE FORCE VIEW "USER_ADVISOR_SQLA_REC_SUM"("TASK_ID","TASK_NAME","REC_ID","TOTAL_STMTS","TOTAL_PRECOST","TOTAL_POSTCOST") AS 
select max(a.task_id) as task_id,
             max(b.name) as task_name,
             max(a.rec_id) as rec_id,
             count(*) as total_stmts,
             sum(a.pre_cost) as total_precost,
             sum(a.post_cost) as total_postcost
      from wri$_adv_sqla_stmts a, wri$_adv_tasks b
      where a.task_id = b.id
        and b.owner# = userenv('SCHEMAID')
        and bitand(b.property,2) = 0
      group by a.task_id, a.rec_id;

CREATE OR REPLACE FORCE VIEW "USER_ADVISOR_SQLA_WK_MAP"("TASK_ID","TASK_NAME","WORKLOAD_ID","WORKLOAD_NAME") AS 
select a.task_id as task_id,
             b.name as task_name,
             a.workload_id as workload_id,
             c.name as workload_name
      from wri$_adv_sqla_map a, wri$_adv_tasks b, wri$_adv_tasks c
      where a.task_id = b.id
        and c.id = a.workload_id
        and b.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_ADVISOR_SQLA_WK_STMTS"("TASK_ID","TASK_NAME","WORKLOAD_ID","WORKLOAD_NAME","SQL_ID","HASH_VALUE","USERNAME","MODULE","ACTION","CPU_TIME","BUFFER_GETS","DISK_READS","ELAPSED_TIME","ROWS_PROCESSED","EXECUTIONS","PRECOST","POSTCOST","LAST_EXECUTION_DATE","PRIORITY","COMMAND_TYPE","STAT_PERIOD","SQL_TEXT","IMPORTANCE","REC_ID") AS 
select c.task_id as task_id,
             a.name as task_name,
             b.workload_id as workload_id,
             d.name as workload_name,
             b.sql_id as sql_id,
             b.hash_value as hash_value,
             b.username as username,
             b.module as module,
             b.action as action,
             b.cpu_time as cpu_time,
             b.buffer_gets as buffer_gets,
             b.disk_reads as disk_reads,
             b.elapsed_time as elapsed_time,
             b.rows_processed as rows_processed,
             b.executions as executions,
             c.pre_cost as precost,
             c.post_cost as postcost,
             b.last_execution_date as last_execution_date,
             b.priority as priority,
             b.command_type as command_type,
             b.stat_period as stat_period,
             b.sql_text as sql_text,
             c.imp as importance,
             c.rec_id as rec_id
      from wri$_adv_tasks a, wri$_adv_sqlw_stmts b,
           wri$_adv_sqla_stmts c, wri$_adv_tasks d
      where a.id = c.task_id
        and b.workload_id = c.workload_id
        and d.id = b.workload_id
        and c.sql_id = b.sql_id
        and a.owner# = userenv('SCHEMAID')
        and bitand(a.property,2) = 0;

CREATE OR REPLACE FORCE VIEW "USER_ADVISOR_SQLW_COLVOL"("WORKLOAD_ID","WORKLOAD_NAME","TABLE_OWNER","TABLE_NAME","COLUMN_NAME","UPDATE_FREQ","UPDATED_ROWS") AS 
select b.workload_id as workload_id,
             c.name as workload_name,
             e.owner_name as table_owner,
             e.table_name as table_name,
             d.name as column_name,
             b.upd_freq as update_freq,
             b.upd_rows as updated_rows
      from wri$_adv_sqlw_colvol b, wri$_adv_tasks c, sys.col$ d,
           wri$_adv_sqlw_tabvol e
      where c.id = b.workload_id
        and c.owner# = userenv('SCHEMAID')
        and d.col# = b.col#
        and e.table# = b.table#
        and bitand(c.property,2) = 0
        and c.advisor_id = 6;

CREATE OR REPLACE FORCE VIEW "USER_ADVISOR_SQLW_JOURNAL"("WORKLOAD_ID","WORKLOAD_NAME","JOURNAL_ENTRY_SEQ","JOURNAL_ENTRY_TYPE","JOURNAL_ENTRY") AS 
select a.task_id as workload_id,
             b.name as workload_name,
             a.seq_id as journal_entry_seq,
             decode(a.type,1,'INFORMATIONAL',2,'WARNING',3,'ERROR',
                           4,'FATAL',5,'DEBUG1',6,'DEBUG2',7,'DEBUG3',
                           8,'DEBUG4',9,'DEBUG5') as journal_entry_type,
             dbms_advisor.format_message_group(a.msg_id) as journal_entry
      from wri$_adv_journal a, wri$_adv_tasks b
      where a.task_id = b.id
        and b.advisor_id = 6
        and b.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_ADVISOR_SQLW_PARAMETERS"("WORKLOAD_ID","WORKLOAD_NAME","PARAMETER_NAME","PARAMETER_VALUE","PARAMETER_TYPE") AS 
select a.task_id as workload_id,
             b.name as workload_name,
             a.name as parameter_name,
             a.value as parameter_value,
             decode(a.datatype,1,'NUMBER',2,'STRING',3,'STRINGLIST',
                               4,'TABLE',5,'TABLELIST','UNKNOWN')
                 as parameter_type
      from wri$_adv_parameters a, wri$_adv_tasks b
      where a.task_id = b.id
        and b.owner# = userenv('SCHEMAID')
        and b.advisor_id = 6
        and bitand(a.flags,1) = 0;

CREATE OR REPLACE FORCE VIEW "USER_ADVISOR_SQLW_STMTS"("WORKLOAD_ID","WORKLOAD_NAME","SQL_ID","HASH_VALUE","USERNAME","MODULE","ACTION","CPU_TIME","BUFFER_GETS","DISK_READS","ELAPSED_TIME","ROWS_PROCESSED","EXECUTIONS","OPTIMIZER_COST","LAST_EXECUTION_DATE","PRIORITY","COMMAND_TYPE","STAT_PERIOD","SQL_TEXT","VALID") AS 
select b.workload_id as workload_id,
             c.name as workload_name,
             b.sql_id as sql_id,
             b.hash_value as hash_value,
             b.username as username,
             b.module as module,
             b.action as action,
             b.cpu_time as cpu_time,
             b.buffer_gets as buffer_gets,
             b.disk_reads as disk_reads,
             b.elapsed_time as elapsed_time,
             b.rows_processed as rows_processed,
             b.executions as executions,
             b.optimizer_cost as optimizer_cost,
             b.last_execution_date as last_execution_date,
             b.priority as priority,
             b.command_type as command_type,
             b.stat_period as stat_period,
             b.sql_text as sql_text,
             b.valid as valid
      from wri$_adv_sqlw_stmts b, wri$_adv_tasks c
      where c.id = b.workload_id
        and c.owner# = userenv('SCHEMAID')
        and bitand(c.property,2) = 0
        and c.advisor_id = 6;

CREATE OR REPLACE FORCE VIEW "USER_ADVISOR_SQLW_SUM"("WORKLOAD_ID","WORKLOAD_NAME","DESCRIPTION","CREATE_DATE","MODIFY_DATE","NUM_SELECT_STMT","NUM_UPDATE_STMT","NUM_DELETE_STMT","NUM_INSERT_STMT","NUM_MERGE_STMT","SOURCE","HOW_CREATED","DATA_SOURCE","READ_ONLY") AS 
select b.id as workload_id,
             b.name as workload_name,
             b.description as description,
             b.ctime as create_date,
             b.mtime as modify_date,
             a.num_select as num_select_stmt,
             a.num_update as num_update_stmt,
             a.num_delete as num_delete_stmt,
             a.num_insert as num_insert_stmt,
             a.num_merge as num_merge_stmt,
             b.source as source,
             b.how_created as how_created,
             a.data_source as data_source,
             decode(bitand(b.property,1),1,'TRUE','FALSE') as read_only
      from wri$_adv_sqlw_sum a, wri$_adv_tasks b
      where b.owner# = userenv('SCHEMAID')
        and a.workload_id = b.id
        and bitand(b.property,2) = 0
        and b.advisor_id = 6;

CREATE OR REPLACE FORCE VIEW "USER_ADVISOR_SQLW_TABLES"("WORKLOAD_ID","WORKLOAD_NAME","SQL_ID","TABLE_OWNER","TABLE_NAME") AS 
select b.workload_id as workload_id,
             c.name as workload_name,
             b.sql_id as sql_id,
             b.table_owner  as table_owner,
             b.table_name as table_name
      from wri$_adv_sqlw_tables b, wri$_adv_tasks c
      where c.id = b.workload_id
        and c.owner# = userenv('SCHEMAID')
        and bitand(c.property,2) = 0
        and c.advisor_id = 6;

CREATE OR REPLACE FORCE VIEW "USER_ADVISOR_SQLW_TABVOL"("WORKLOAD_ID","WORKLOAD_NAME","TABLE_OWNER","TABLE_NAME","UPDATE_FREQ","INSERT_FREQ","DELETE_FREQ","DIRECT_LOAD_FREQ","UPDATED_ROWS","INSERTED_ROWS","DELETED_ROWS","DIRECT_LOAD_ROWS") AS 
select b.workload_id as workload_id,
             c.name as workload_name,
             b.owner_name as table_owner,
             b.table_name as table_name,
             b.upd_freq as update_freq,
             b.ins_freq as insert_freq,
             b.del_freq as delete_freq,
             b.dir_freq as direct_load_freq,
             b.upd_rows as updated_rows,
             b.ins_rows as inserted_rows,
             b.del_rows as deleted_rows,
             b.dir_rows as direct_load_rows
      from wri$_adv_sqlw_tabvol b, wri$_adv_tasks c
      where c.id = b.workload_id
        and c.owner# = userenv('SCHEMAID')
        and bitand(c.property,2) = 0
        and c.advisor_id = 6;

CREATE OR REPLACE FORCE VIEW "USER_ADVISOR_SQLW_TEMPLATES"("WORKLOAD_ID","WORKLOAD_NAME","DESCRIPTION","CREATE_DATE","MODIFY_DATE","SOURCE","READ_ONLY") AS 
select b.id as workload_id,
             b.name as workload_name,
             b.description as description,
             b.ctime as create_date,
             b.mtime as modify_date,
             b.source as source,
             decode(bitand(b.property,1),1,'TRUE','FALSE') as read_only
      from wri$_adv_sqlw_sum a, wri$_adv_tasks b
      where b.owner# = userenv('SCHEMAID')
        and a.workload_id = b.id
        and bitand(b.property,2) = 2
        and b.advisor_id = 6;

CREATE OR REPLACE FORCE VIEW "USER_ADVISOR_TASKS"("TASK_ID","TASK_NAME","DESCRIPTION","ADVISOR_NAME","CREATED","LAST_MODIFIED","PARENT_TASK_ID","PARENT_REC_ID","EXECUTION_START","EXECUTION_END","STATUS","STATUS_MESSAGE","PCT_COMPLETION_TIME","PROGESS_METRIC","METRIC_UNITS","ACTIVITY_COUNTER","RECOMMENDATION_COUNT","ERROR_MESSAGE","SOURCE","HOW_CREATED","READ_ONLY","ADVISOR_ID") AS 
select a.id as task_id,
             a.name as task_name,
             a.description as description,
             a.advisor_name as advisor_name,
             a.ctime as created,
             a.mtime as last_modified,
             a.parent_id as parent_task_id,
             a.parent_rec_id as parent_rec_id,
             a.exec_start as execution_start,
             a.exec_end as execution_end,
             decode(a.status, 1, 'INITIAL',
                              2, 'EXECUTING',
                              3, 'COMPLETED',
                              4, 'INTERRUPTED',
                              5, 'CANCELLED',
                              6, 'FATAL ERROR') as status,
             dbms_advisor.format_message_group(a.status_msg_id) as status_message,
             a.pct_completion_time as pct_completion_time,
             a.progress_metric as progess_metric,
             a.metric_units as metric_units,
             a.activity_counter as activity_counter,
             a.rec_count as recommendation_count,
             dbms_advisor.format_message_group(a.error_msg#) as error_message,
             a.source as source,
             a.how_created as how_created,
             decode(bitand(a.property,1), 1, 'TRUE', 'FALSE') as read_only,
             a.advisor_id as advisor_id
      from wri$_adv_tasks a
      where a.owner# = userenv('SCHEMAID')
        and bitand(a.property,6) = 4;

CREATE OR REPLACE FORCE VIEW "USER_ADVISOR_TEMPLATES"("TASK_ID","TASK_NAME","DESCRIPTION","ADVISOR_NAME","CREATED","LAST_MODIFIED","SOURCE","READ_ONLY") AS 
select a.id as task_id,
             a.name as task_name,
             a.description as description,
             a.advisor_name as advisor_name,
             a.ctime as created,
             a.mtime as last_modified,
             a.source as source,
             decode(bitand(a.property,1), 1, 'TRUE', 'FALSE') as read_only
      from wri$_adv_tasks a
      where a.owner# = userenv('SCHEMAID')
        and bitand(a.property,6) = 6;

CREATE OR REPLACE FORCE VIEW "USER_ALL_TABLES"("TABLE_NAME","TABLESPACE_NAME","CLUSTER_NAME","IOT_NAME","PCT_FREE","PCT_USED","INI_TRANS","MAX_TRANS","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENTS","MAX_EXTENTS","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","LOGGING","BACKED_UP","NUM_ROWS","BLOCKS","EMPTY_BLOCKS","AVG_SPACE","CHAIN_CNT","AVG_ROW_LEN","AVG_SPACE_FREELIST_BLOCKS","NUM_FREELIST_BLOCKS","DEGREE","INSTANCES","CACHE","TABLE_LOCK","SAMPLE_SIZE","LAST_ANALYZED","PARTITIONED","IOT_TYPE","OBJECT_ID_TYPE","TABLE_TYPE_OWNER","TABLE_TYPE","TEMPORARY","SECONDARY","NESTED","BUFFER_POOL","ROW_MOVEMENT","GLOBAL_STATS","USER_STATS","DURATION","SKIP_CORRUPT","MONITORING","CLUSTER_OWNER","DEPENDENCIES","COMPRESSION","DROPPED") AS 
select TABLE_NAME, TABLESPACE_NAME, CLUSTER_NAME, IOT_NAME,
     PCT_FREE, PCT_USED,
     INI_TRANS, MAX_TRANS,
     INITIAL_EXTENT, NEXT_EXTENT,
     MIN_EXTENTS, MAX_EXTENTS, PCT_INCREASE,
     FREELISTS, FREELIST_GROUPS, LOGGING,
     BACKED_UP, NUM_ROWS, BLOCKS, EMPTY_BLOCKS,
     AVG_SPACE, CHAIN_CNT, AVG_ROW_LEN,
     AVG_SPACE_FREELIST_BLOCKS, NUM_FREELIST_BLOCKS,
     DEGREE, INSTANCES, CACHE, TABLE_LOCK,
     SAMPLE_SIZE, LAST_ANALYZED, PARTITIONED,
     IOT_TYPE,
     NULL, NULL, NULL, TEMPORARY, SECONDARY, NESTED,
     BUFFER_POOL, ROW_MOVEMENT,
     GLOBAL_STATS, USER_STATS, DURATION, SKIP_CORRUPT, MONITORING,
     CLUSTER_OWNER, DEPENDENCIES, COMPRESSION, DROPPED
from user_tables
union all
select TABLE_NAME, TABLESPACE_NAME, CLUSTER_NAME, IOT_NAME,
     PCT_FREE, PCT_USED,
     INI_TRANS, MAX_TRANS,
     INITIAL_EXTENT, NEXT_EXTENT,
     MIN_EXTENTS, MAX_EXTENTS, PCT_INCREASE,
     FREELISTS, FREELIST_GROUPS, LOGGING,
     BACKED_UP, NUM_ROWS, BLOCKS, EMPTY_BLOCKS,
     AVG_SPACE, CHAIN_CNT, AVG_ROW_LEN,
     AVG_SPACE_FREELIST_BLOCKS, NUM_FREELIST_BLOCKS,
     DEGREE, INSTANCES, CACHE, TABLE_LOCK,
     SAMPLE_SIZE, LAST_ANALYZED, PARTITIONED,
     IOT_TYPE, OBJECT_ID_TYPE,
     TABLE_TYPE_OWNER, TABLE_TYPE, TEMPORARY, SECONDARY, NESTED,
     BUFFER_POOL, ROW_MOVEMENT,
     GLOBAL_STATS, USER_STATS, DURATION, SKIP_CORRUPT, MONITORING,
     CLUSTER_OWNER, DEPENDENCIES, COMPRESSION, DROPPED
from user_object_tables;

CREATE OR REPLACE FORCE VIEW "USER_APPLICATION_ROLES"("ROLE","SCHEMA","PACKAGE") AS 
select u.name, schema, package  from
user$ u, approle$ a
where  u.user# = a.role#
and u.user# = uid;

CREATE OR REPLACE FORCE VIEW "USER_AQ_AGENT_PRIVS"("AGENT_NAME","HTTP_ENABLED","SMTP_ENABLED") AS 
SELECT u.agent_name, decode(bitand(u.protocol, 1), 0, 'NO  ', 1, 'YES ') http_enabled, decode(bitand(u.protocol, 2), 0, 'NO  ', 2, 'YES ') smtp_enabled FROM SYSTEM.AQ$_Internet_Agent_Privs t, SYSTEM.AQ$_Internet_Agents u, sys.user$ usr where u.agent_name = t.agent_name and usr.user# = USERENV('SCHEMAID') and usr.name = t.db_username;

CREATE OR REPLACE FORCE VIEW "USER_ARGUMENTS"("OBJECT_NAME","PACKAGE_NAME","OBJECT_ID","OVERLOAD","ARGUMENT_NAME","POSITION","SEQUENCE","DATA_LEVEL","DATA_TYPE","DEFAULT_VALUE","DEFAULT_LENGTH","IN_OUT","DATA_LENGTH","DATA_PRECISION","DATA_SCALE","RADIX","CHARACTER_SET_NAME","TYPE_OWNER","TYPE_NAME","TYPE_SUBNAME","TYPE_LINK","PLS_TYPE","CHAR_LENGTH","CHAR_USED") AS 
select
nvl(a.procedure$,o.name), /* OBJECT_NAME */
decode(a.procedure$,null,null, o.name), /* PACKAGE_NAME */
o.obj#, /* OBJECT_ID */
decode(a.overload#,0,null,a.overload#), /* OVERLOAD */
a.argument, /* ARGUMENT_NAME */
a.position#, /* POSITION */
a.sequence#, /* SEQUENCE */
a.level#, /* DATA_LEVEL */
decode(a.type#,  /* DATA_TYPE */
0, null,
1, decode(a.charsetform, 2, 'NVARCHAR2', 'VARCHAR2'),
2, decode(a.scale, -127, 'FLOAT', 'NUMBER'),
3, 'NATIVE INTEGER',
8, 'LONG',
9, decode(a.charsetform, 2, 'NCHAR VARYING', 'VARCHAR'),
11, 'ROWID',
12, 'DATE',
23, 'RAW',
24, 'LONG RAW',
29, 'BINARY_INTEGER',
69, 'ROWID',
96, decode(a.charsetform, 2, 'NCHAR', 'CHAR'),
100, 'BINARY_FLOAT',
101, 'BINARY_DOUBLE',
102, 'REF CURSOR',
104, 'UROWID',
105, 'MLSLABEL',
106, 'MLSLABEL',
110, 'REF',
111, 'REF',
112, decode(a.charsetform, 2, 'NCLOB', 'CLOB'),
113, 'BLOB', 114, 'BFILE', 115, 'CFILE',
121, 'OBJECT',
122, 'TABLE',
123, 'VARRAY',
178, 'TIME',
179, 'TIME WITH TIME ZONE',
180, 'TIMESTAMP',
181, 'TIMESTAMP WITH TIME ZONE',
231, 'TIMESTAMP WITH LOCAL TIME ZONE',
182, 'INTERVAL YEAR TO MONTH',
183, 'INTERVAL DAY TO SECOND',
250, 'PL/SQL RECORD',
251, 'PL/SQL TABLE',
252, 'PL/SQL BOOLEAN',
'UNDEFINED'),
default$, /* DEFAULT_VALUE */
deflength, /* DEFAULT_LENGTH */
decode(in_out,null,'IN',1,'OUT',2,'IN/OUT','Undefined'), /* IN_OUT */
length, /* DATA_LENGTH */
precision#, /* DATA_PRECISION */
decode(a.type#, 2, scale, 1, null, 96, null, scale), /* DATA_SCALE */
radix, /* RADIX */
decode(a.charsetform, 1, 'CHAR_CS',           /* CHARACTER_SET_NAME */
                      2, 'NCHAR_CS',
                      3, NLS_CHARSET_NAME(a.charsetid),
                      4, 'ARG:'||a.charsetid),
a.type_owner, /* TYPE_OWNER */
a.type_name, /* TYPE_NAME */
a.type_subname, /* TYPE_SUBNAME */
a.type_linkname, /* TYPE_LINK */
a.pls_type, /* PLS_TYPE */
decode(a.type#, 1, a.scale, 96, a.scale, 0), /* CHAR_LENGTH */
decode(a.type#,
        1, decode(bitand(a.properties, 128), 128, 'C', 'B'),
       96, decode(bitand(a.properties, 128), 128, 'C', 'B'), 0) /* CHAR_USED */
from obj$ o,argument$ a
where o.obj# = a.obj#
and owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_ASSOCIATIONS"("OBJECT_OWNER","OBJECT_NAME","COLUMN_NAME","OBJECT_TYPE","STATSTYPE_SCHEMA","STATSTYPE_NAME","DEF_SELECTIVITY","DEF_CPU_COST","DEF_IO_COST","DEF_NET_COST","INTERFACE_VERSION") AS 
select u.name, o.name, c.name,
         decode(a.property, 1, 'COLUMN', 2, 'TYPE', 3, 'PACKAGE', 4,
                'FUNCTION', 5, 'INDEX', 6, 'INDEXTYPE', 'INVALID'),
         u1.name, o1.name,a.default_selectivity,
         a.default_cpu_cost, a.default_io_cost, a.default_net_cost,
         a.interface_version#
   from  sys.association$ a, sys.obj$ o, sys.user$ u,
         sys.obj$ o1, sys.user$ u1, sys.col$ c
   where a.obj#=o.obj# and o.owner#=u.user#
   AND   a.statstype#=o1.obj# (+) and o1.owner#=u1.user# (+)
   AND   a.obj# = c.obj#  (+)  and a.intcol# = c.intcol# (+)
   and o.owner#=userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_ATTRIBUTE_TRANSFORMATIONS"("TRANSFORMATION_ID","NAME","FROM_TYPE","TO_TYPE","ATTRIBUTE","ATTRIBUTE_TRANSFORMATION") AS 
SELECT t.transformation_id,  t.name,
       t.from_schema||'.'||t.from_type, t.to_schema||'.'||t.to_type,
       at.attribute_number,
       at.sql_expression
FROM transformations$ t, attribute_transformations$ at, sys.user$ u
WHERE u.user# = USERENV('SCHEMAID')
and u.name = t.owner and t.transformation_id = at.transformation_id;

CREATE OR REPLACE FORCE VIEW "USER_AUDIT_OBJECT"("OS_USERNAME","USERNAME","USERHOST","TERMINAL","TIMESTAMP","OWNER","OBJ_NAME","ACTION_NAME","NEW_OWNER","NEW_NAME","SES_ACTIONS","COMMENT_TEXT","SESSIONID","ENTRYID","STATEMENTID","RETURNCODE","PRIV_USED","CLIENT_ID","SESSION_CPU","EXTENDED_TIMESTAMP","PROXY_SESSIONID","GLOBAL_UID","INSTANCE_NUMBER","OS_PROCESS","TRANSACTIONID","SCN","SQL_BIND","SQL_TEXT") AS 
select OS_USERNAME, USERNAME, USERHOST, TERMINAL, TIMESTAMP,
       OWNER, OBJ_NAME, ACTION_NAME, NEW_OWNER, NEW_NAME,
       SES_ACTIONS, COMMENT_TEXT, SESSIONID, ENTRYID, STATEMENTID,
       RETURNCODE, PRIV_USED, CLIENT_ID, SESSION_CPU,
       EXTENDED_TIMESTAMP, PROXY_SESSIONID, GLOBAL_UID, INSTANCE_NUMBER,
       OS_PROCESS, TRANSACTIONID, SCN, SQL_BIND, SQL_TEXT
from user_audit_trail
where (action between 1 and 16)
   or (action between 19 and 29)
   or (action between 32 and 41)
   or (action = 43)
   or (action between 51 and 99)
   or (action = 103)
   or (action between 110 and 113)
   or (action between 116 and 121)
   or (action between 123 and 128)
   or (action between 160 and 162);

CREATE OR REPLACE FORCE VIEW "USER_AUDIT_POLICIES"("OBJECT_NAME","POLICY_NAME","POLICY_TEXT","POLICY_COLUMN","PF_SCHEMA","PF_PACKAGE","PF_FUNCTION","ENABLED","SEL","INS","UPD","DEL","AUDIT_TRAIL","POLICY_COLUMN_OPTIONS") AS 
SELECT OBJECT_NAME, POLICY_NAME, POLICY_TEXT,  POLICY_COLUMN,
       PF_SCHEMA, PF_PACKAGE, PF_FUNCTION, ENABLED,
       SEL, INS, UPD, DEL, AUDIT_TRAIL, POLICY_COLUMN_OPTIONS
FROM DBA_AUDIT_POLICIES
WHERE OBJECT_SCHEMA = SYS_CONTEXT('USERENV','CURRENT_SCHEMA');

CREATE OR REPLACE FORCE VIEW "USER_AUDIT_POLICY_COLUMNS"("OBJECT_SCHEMA","OBJECT_NAME","POLICY_NAME","POLICY_COLUMN") AS 
select OBJECT_SCHEMA, OBJECT_NAME,
          POLICY_NAME, POLICY_COLUMN
from DBA_AUDIT_POLICY_COLUMNS
WHERE OBJECT_SCHEMA = SYS_CONTEXT('USERENV','CURRENT_SCHEMA');

CREATE OR REPLACE FORCE VIEW "USER_AUDIT_SESSION"("OS_USERNAME","USERNAME","USERHOST","TERMINAL","TIMESTAMP","ACTION_NAME","LOGOFF_TIME","LOGOFF_LREAD","LOGOFF_PREAD","LOGOFF_LWRITE","LOGOFF_DLOCK","SESSIONID","RETURNCODE","CLIENT_ID","SESSION_CPU","EXTENDED_TIMESTAMP","PROXY_SESSIONID","GLOBAL_UID","INSTANCE_NUMBER","OS_PROCESS") AS 
select os_username,  username, userhost, terminal, timestamp, action_name,
       logoff_time, logoff_lread, logoff_pread, logoff_lwrite, logoff_dlock,
       sessionid, returncode, client_id, session_cpu, extended_timestamp,
       proxy_sessionid, global_uid, instance_number, os_process
from user_audit_trail
where action between 100 and 102;

CREATE OR REPLACE FORCE VIEW "USER_AUDIT_STATEMENT"("OS_USERNAME","USERNAME","USERHOST","TERMINAL","TIMESTAMP","OWNER","OBJ_NAME","ACTION_NAME","NEW_NAME","OBJ_PRIVILEGE","SYS_PRIVILEGE","ADMIN_OPTION","GRANTEE","AUDIT_OPTION","SES_ACTIONS","COMMENT_TEXT","SESSIONID","ENTRYID","STATEMENTID","RETURNCODE","PRIV_USED","CLIENT_ID","SESSION_CPU","EXTENDED_TIMESTAMP","PROXY_SESSIONID","GLOBAL_UID","INSTANCE_NUMBER","OS_PROCESS","TRANSACTIONID","SCN","SQL_BIND","SQL_TEXT") AS 
select OS_USERNAME, USERNAME, USERHOST, TERMINAL, TIMESTAMP,
       OWNER, OBJ_NAME, ACTION_NAME, NEW_NAME,
       OBJ_PRIVILEGE, SYS_PRIVILEGE, ADMIN_OPTION, GRANTEE, AUDIT_OPTION,
       SES_ACTIONS, COMMENT_TEXT,  SESSIONID, ENTRYID, STATEMENTID,
       RETURNCODE, PRIV_USED, CLIENT_ID, SESSION_CPU,
       EXTENDED_TIMESTAMP, PROXY_SESSIONID, GLOBAL_UID, INSTANCE_NUMBER,
       OS_PROCESS, TRANSACTIONID, SCN, SQL_BIND, SQL_TEXT
from user_audit_trail
where action in (        17 /* GRANT OBJECT  */,
                         18 /* REVOKE OBJECT */,
                         30 /* AUDIT OBJECT */,
                         31 /* NOAUDIT OBJECT */,
                         49 /* ALTER SYSTEM */,
                        104 /* SYSTEM AUDIT */,
                        105 /* SYSTEM NOAUDIT */,
                        106 /* AUDIT DEFAULT */,
                        107 /* NOAUDIT DEFAULT */,
                        108 /* SYSTEM GRANT*/,
                        109 /* SYSTEM REVOKE */,
                        114 /* GRANT ROLE */,
                        115 /* REVOKE ROLE */ );

CREATE OR REPLACE FORCE VIEW "USER_AUDIT_TRAIL"("OS_USERNAME","USERNAME","USERHOST","TERMINAL","TIMESTAMP","OWNER","OBJ_NAME","ACTION","ACTION_NAME","NEW_OWNER","NEW_NAME","OBJ_PRIVILEGE","SYS_PRIVILEGE","ADMIN_OPTION","GRANTEE","AUDIT_OPTION","SES_ACTIONS","LOGOFF_TIME","LOGOFF_LREAD","LOGOFF_PREAD","LOGOFF_LWRITE","LOGOFF_DLOCK","COMMENT_TEXT","SESSIONID","ENTRYID","STATEMENTID","RETURNCODE","PRIV_USED","CLIENT_ID","SESSION_CPU","EXTENDED_TIMESTAMP","PROXY_SESSIONID","GLOBAL_UID","INSTANCE_NUMBER","OS_PROCESS","TRANSACTIONID","SCN","SQL_BIND","SQL_TEXT") AS 
select d."OS_USERNAME",d."USERNAME",d."USERHOST",d."TERMINAL",d."TIMESTAMP",d."OWNER",d."OBJ_NAME",d."ACTION",d."ACTION_NAME",d."NEW_OWNER",d."NEW_NAME",d."OBJ_PRIVILEGE",d."SYS_PRIVILEGE",d."ADMIN_OPTION",d."GRANTEE",d."AUDIT_OPTION",d."SES_ACTIONS",d."LOGOFF_TIME",d."LOGOFF_LREAD",d."LOGOFF_PREAD",d."LOGOFF_LWRITE",d."LOGOFF_DLOCK",d."COMMENT_TEXT",d."SESSIONID",d."ENTRYID",d."STATEMENTID",d."RETURNCODE",d."PRIV_USED",d."CLIENT_ID",d."SESSION_CPU",d."EXTENDED_TIMESTAMP",d."PROXY_SESSIONID",d."GLOBAL_UID",d."INSTANCE_NUMBER",d."OS_PROCESS",d."TRANSACTIONID",d."SCN",d."SQL_BIND",d."SQL_TEXT" from dba_audit_trail d, sys.user$ u
where ((d.owner = u.name and u.user# = USERENV('SCHEMAID'))
or (d.owner is null and d.username = u.name and u.user# = USERENV('SCHEMAID')));

CREATE OR REPLACE FORCE VIEW "USER_AWS"("AW_NUMBER","AW_NAME","PAGESPACES","GENERATIONS") AS 
SELECT a.awseq#, a.awname, count(unique(p.psnumber)), count(unique(p.psgen))
FROM aw$ a, ps$ p
WHERE   a.owner#=USERENV('SCHEMAID') and a.awseq#=p.awseq#
group by a.awseq#, a.awname;

CREATE OR REPLACE FORCE VIEW "USER_AW_PS"("AW_NUMBER","AW_NAME","PSNUMBER","GENERATIONS","MAXPAGES") AS 
SELECT a.awseq#, a.awname, p.psnumber, count(unique(p.psgen)), max(p.maxpages)
FROM aw$ a, ps$ p
WHERE   a.owner#=USERENV('SCHEMAID') and a.awseq#=p.awseq#
group by a.awseq#, a.awname, p.psnumber;

CREATE OR REPLACE FORCE VIEW "USER_BASE_TABLE_MVIEWS"("OWNER","MASTER","MVIEW_LAST_REFRESH_TIME","MVIEW_ID") AS 
select s."OWNER",s."MASTER",s."MVIEW_LAST_REFRESH_TIME",s."MVIEW_ID" from dba_base_table_mviews s, sys.user$ u
where s.owner = u.name
  and u.user# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_CATALOG"("TABLE_NAME","TABLE_TYPE") AS 
select o.name,
       decode(o.type#, 0, 'NEXT OBJECT', 1, 'INDEX', 2, 'TABLE', 3, 'CLUSTER',
                      4, 'VIEW', 5, 'SYNONYM', 6, 'SEQUENCE', 'UNDEFINED')
from sys.obj$ o
where o.owner# = userenv('SCHEMAID')
  and ((o.type# in (4, 5, 6))
       or
       (o.type# = 2     /* tables, excluding iot - overflow and nested tables */
        and
        not exists (select null
                      from sys.tab$ t
                     where t.obj# = o.obj#
                       and (bitand(t.property, 512) = 512 or
                            bitand(t.property, 8192) = 8192))))
  and o.linkname is null;

CREATE OR REPLACE FORCE VIEW "USER_CLUSTERS"("CLUSTER_NAME","TABLESPACE_NAME","PCT_FREE","PCT_USED","KEY_SIZE","INI_TRANS","MAX_TRANS","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENTS","MAX_EXTENTS","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","AVG_BLOCKS_PER_KEY","CLUSTER_TYPE","FUNCTION","HASHKEYS","DEGREE","INSTANCES","CACHE","BUFFER_POOL","SINGLE_TABLE","DEPENDENCIES") AS 
select o.name, ts.name,
          mod(c.pctfree$, 100),
          decode(bitand(ts.flags, 32), 32, to_number(NULL), c.pctused$),
          c.size$,c.initrans,c.maxtrans,
          s.iniexts * ts.blocksize,
          decode(bitand(ts.flags, 3), 1, to_number(NULL),
                               s.extsize * ts.blocksize),
          s.minexts, s.maxexts,
          decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extpct),
          decode(bitand(ts.flags, 32), 32, to_number(NULL),
             decode(s.lists, 0, 1, s.lists)),
          decode(bitand(ts.flags, 32), 32, to_number(NULL),
             decode(s.groups, 0, 1, s.groups)),
          c.avgchn, decode(c.hashkeys, 0, 'INDEX', 'HASH'),
          decode(c.hashkeys, 0, NULL,
                 decode(c.func, 0, 'COLUMN', 1, 'DEFAULT',
                                2, 'HASH EXPRESSION', 3, 'DEFAULT2', NULL)),
          c.hashkeys,
          lpad(decode(c.degree, 32767, 'DEFAULT', nvl(c.degree,1)),10),
          lpad(decode(c.instances, 32767, 'DEFAULT', nvl(c.instances,1)),10),
          lpad(decode(bitand(c.flags, 8), 8, 'Y', 'N'), 5),
          decode(s.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL),
          lpad(decode(bitand(c.flags, 65536), 65536, 'Y', 'N'), 5),
          decode(bitand(c.flags, 8388608), 8388608, 'ENABLED', 'DISABLED')
from sys.ts$ ts, sys.seg$ s, sys.clu$ c, sys.obj$ o
where o.owner# = userenv('SCHEMAID')
  and o.obj# = c.obj#
  and c.ts# = ts.ts#
  and c.ts# = s.ts#
  and c.file# = s.file#
  and c.block# = s.block#;

CREATE OR REPLACE FORCE VIEW "USER_CLUSTER_HASH_EXPRESSIONS"("OWNER","CLUSTER_NAME","HASH_EXPRESSION") AS 
select us.name, o.name, c.condition
from sys.cdef$ c, sys.user$ us, sys.obj$ o
where c.type#   = 8
and   c.obj#   = o.obj#
and   us.user# = o.owner#
and   us.user# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_CLU_COLUMNS"("CLUSTER_NAME","CLU_COLUMN_NAME","TABLE_NAME","TAB_COLUMN_NAME") AS 
select oc.name, cc.name, ot.name,
       decode(bitand(tc.property, 1), 1, ac.name, tc.name)
from sys.obj$ oc, sys.col$ cc, sys.obj$ ot, sys.col$ tc, sys.tab$ t,
     sys.attrcol$ ac
where oc.obj#    = cc.obj#
  and t.bobj#    = oc.obj#
  and t.obj#     = tc.obj#
  and tc.segcol# = cc.segcol#
  and t.obj#     = ot.obj#
  and oc.type#   = 3
  and oc.owner#  = userenv('SCHEMAID')
  and tc.obj#    = ac.obj#(+)
  and tc.intcol# = ac.intcol#(+);

CREATE OR REPLACE FORCE VIEW "USER_COLL_TYPES"("TYPE_NAME","COLL_TYPE","UPPER_BOUND","ELEM_TYPE_MOD","ELEM_TYPE_OWNER","ELEM_TYPE_NAME","LENGTH","PRECISION","SCALE","CHARACTER_SET_NAME","ELEM_STORAGE","NULLS_STORED") AS 
select o.name, co.name, c.upper_bound,
       decode(bitand(c.properties, 32768), 32768, 'REF',
              decode(bitand(c.properties, 16384), 16384, 'POINTER')),
       nvl2(c.synobj#, (select u.name from user$ u, obj$ o
            where o.owner#=u.user# and o.obj#=c.synobj#),
            decode(bitand(et.properties, 64), 64, null, eu.name)),
       nvl2(c.synobj#, (select o.name from obj$ o where o.obj#=c.synobj#),
            decode(et.typecode,
                   52, decode(c.charsetform, 2, 'NVARCHAR2', eo.name),
                   53, decode(c.charsetform, 2, 'NCHAR', eo.name),
                   54, decode(c.charsetform, 2, 'NCHAR VARYING', eo.name),
                   61, decode(c.charsetform, 2, 'NCLOB', eo.name),
                   eo.name)),
       c.length, c.precision, c.scale,
       decode(c.charsetform, 1, 'CHAR_CS',
                             2, 'NCHAR_CS',
                             3, NLS_CHARSET_NAME(c.charsetid),
                             4, 'ARG:'||c.charsetid),
       decode(bitand(c.properties, 131072), 131072, 'FIXED',
              decode(bitand(c.properties, 262144), 262144, 'VARYING')),
       decode(bitand(c.properties, 65536), 65536, 'NO', 'YES')
from sys.obj$ o, sys.collection$ c, sys.obj$ co,
     sys.obj$ eo, sys.user$ eu, sys.type$ et
where o.owner# = userenv('SCHEMAID')
  and o.oid$ = c.toid
  and o.subname IS NULL -- only the most recent version
  and o.type# <> 10 -- must not be invalid
  and c.coll_toid = co.oid$
  and c.elem_toid = eo.oid$
  and eo.owner# = eu.user#
  and c.elem_toid = et.tvoid;

CREATE OR REPLACE FORCE VIEW "USER_COL_COMMENTS"("TABLE_NAME","COLUMN_NAME","COMMENTS") AS 
select o.name, c.name, co.comment$
from sys.obj$ o, sys.col$ c, sys.com$ co
where o.owner# = userenv('SCHEMAID')
  and o.type# in (2, 4)
  and o.obj# = c.obj#
  and c.obj# = co.obj#(+)
  and c.intcol# = co.col#(+)
  and bitand(c.property, 32) = 0 /* not hidden column */;

CREATE OR REPLACE FORCE VIEW "USER_COL_PRIVS"("GRANTEE","OWNER","TABLE_NAME","COLUMN_NAME","GRANTOR","PRIVILEGE","GRANTABLE") AS 
select ue.name, u.name, o.name, c.name, ur.name, tpm.name,
       decode(mod(oa.option$,2), 1, 'YES', 'NO')
from sys.objauth$ oa, sys.obj$ o, sys.user$ u, sys.user$ ur, sys.user$ ue,
     sys.col$ c, table_privilege_map tpm
where oa.obj# = o.obj#
  and oa.grantor# = ur.user#
  and oa.grantee# = ue.user#
  and u.user# = o.owner#
  and oa.obj# = c.obj#
  and oa.col# = c.col#
  and bitand(c.property, 32) = 0 /* not hidden column */
  and oa.col# is not null
  and oa.privilege# = tpm.privilege
  and userenv('SCHEMAID') in (oa.grantor#, oa.grantee#, o.owner#);

CREATE OR REPLACE FORCE VIEW "USER_COL_PRIVS_MADE"("GRANTEE","TABLE_NAME","COLUMN_NAME","GRANTOR","PRIVILEGE","GRANTABLE") AS 
select ue.name, o.name, c.name, ur.name, tpm.name,
       decode(mod(oa.option$,2), 1, 'YES', 'NO')
from sys.objauth$ oa, sys.obj$ o, sys.user$ ue, sys.user$ ur,
     sys.col$ c, table_privilege_map tpm
where oa.obj# = o.obj#
  and oa.grantor# = ur.user#
  and oa.grantee# = ue.user#
  and oa.obj# = c.obj#
  and oa.col# = c.col#
  and bitand(c.property, 32) = 0 /* not hidden column */
  and oa.col# is not null
  and oa.privilege# = tpm.privilege
  and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_COL_PRIVS_RECD"("OWNER","TABLE_NAME","COLUMN_NAME","GRANTOR","PRIVILEGE","GRANTABLE") AS 
select u.name, o.name, c.name, ur.name, tpm.name,
       decode(mod(oa.option$,2), 1, 'YES', 'NO')
from sys.objauth$ oa, sys.obj$ o, sys.user$ u, sys.user$ ur,
     sys.col$ c, table_privilege_map tpm
where oa.obj# = o.obj#
  and oa.grantor# = ur.user#
  and u.user# = o.owner#
  and oa.obj# = c.obj#
  and oa.col# = c.col#
  and bitand(c.property, 32) = 0 /* not hidden column */
  and oa.col# is not null
  and oa.privilege# = tpm.privilege
  and oa.grantee# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_CONSTRAINTS"("OWNER","CONSTRAINT_NAME","CONSTRAINT_TYPE","TABLE_NAME","SEARCH_CONDITION","R_OWNER","R_CONSTRAINT_NAME","DELETE_RULE","STATUS","DEFERRABLE","DEFERRED","VALIDATED","GENERATED","BAD","RELY","LAST_CHANGE","INDEX_OWNER","INDEX_NAME","INVALID","VIEW_RELATED") AS 
select ou.name, oc.name,
       decode(c.type#, 1, 'C', 2, 'P', 3, 'U',
              4, 'R', 5, 'V', 6, 'O', 7,'C', '?'),
       o.name, c.condition, ru.name, rc.name,
       decode(c.type#, 4,
              decode(c.refact, 1, 'CASCADE', 2, 'SET NULL', 'NO ACTION'),
              NULL),
       decode(c.type#, 5, 'ENABLED',
              decode(c.enabled, NULL, 'DISABLED', 'ENABLED')),
       decode(bitand(c.defer, 1), 1, 'DEFERRABLE', 'NOT DEFERRABLE'),
       decode(bitand(c.defer, 2), 2, 'DEFERRED', 'IMMEDIATE'),
       decode(bitand(c.defer, 4), 4, 'VALIDATED', 'NOT VALIDATED'),
       decode(bitand(c.defer, 8), 8, 'GENERATED NAME', 'USER NAME'),
       decode(bitand(c.defer,16),16, 'BAD', null),
       decode(bitand(c.defer,32),32, 'RELY', null),
       c.mtime,
       decode(c.type#, 2, ui.name, 3, ui.name, null),
       decode(c.type#, 2, oi.name, 3, oi.name, null),
       decode(bitand(c.defer, 256), 256,
              decode(c.type#, 4,
                     case when (bitand(c.defer, 128) = 128
                                or o.status in (3, 5)
                                or ro.status in (3, 5)) then 'INVALID'
                          else null end,
                     case when (bitand(c.defer, 128) = 128
                                or o.status in (3, 5)) then 'INVALID'
                          else null end
                    ),
              null),
       decode(bitand(c.defer, 256), 256, 'DEPEND ON VIEW', null)
from sys.con$ oc, sys.con$ rc, sys.user$ ou, sys.user$ ru, sys.obj$ ro,
     sys.obj$ o, sys.cdef$ c, sys.obj$ oi, sys.user$ ui
where oc.owner# = ou.user#
  and oc.con# = c.con#
  and c.obj# = o.obj#
  and c.rcon# = rc.con#(+)
  and c.enabled = oi.obj#(+)
  and oi.owner# = ui.user#(+)
  and rc.owner# = ru.user#(+)
  and c.robj# = ro.obj#(+)
  and o.owner# = userenv('SCHEMAID')
  and c.type# != 8
  and c.type# != 12       /* don't include log groups */;

CREATE OR REPLACE FORCE VIEW "USER_CONS_COLUMNS"("OWNER","CONSTRAINT_NAME","TABLE_NAME","COLUMN_NAME","POSITION") AS 
select u.name, c.name, o.name,
       decode(ac.name, null, col.name, ac.name), cc.pos#
from sys.user$ u, sys.con$ c, sys.col$ col, sys.ccol$ cc, sys.cdef$ cd,
     sys.obj$ o, sys.attrcol$ ac
where c.owner# = u.user#
  and c.con# = cd.con#
  and cd.type# != 12       /* don't include log groups */
  and cd.con# = cc.con#
  and cc.obj# = col.obj#
  and cc.intcol# = col.intcol#
  and cc.obj# = o.obj#
  and c.owner# = userenv('SCHEMAID')
  and col.obj# = ac.obj#(+)
  and col.intcol# = ac.intcol#(+);

CREATE OR REPLACE FORCE VIEW "USER_CONS_OBJ_COLUMNS"("TABLE_NAME","COLUMN_NAME","CONS_TYPE_OWNER","CONS_TYPE_NAME","CONS_TYPE_ONLY") AS 
select oc.name, c.name, ut.name, ot.name,
       lpad(decode(bitand(sc.flags, 2), 2, 'Y', 'N'), 15)
from sys.obj$ oc, sys.col$ c, sys.user$ ut, sys.obj$ ot, sys.subcoltype$ sc
where oc.owner# = userenv('SCHEMAID')
  and bitand(sc.flags, 1) = 1      /* Type is specified in the IS OF clause */
  and oc.obj#=sc.obj#
  and oc.obj#=c.obj#
  and c.intcol#=sc.intcol#
  and sc.toid=ot.oid$
  and ot.owner#=ut.user#
  and bitand(c.property,32768) != 32768                /* not unused column */
  and not exists (select null                  /* Doesn't exist in attrcol$ */
                  from sys.attrcol$ ac
                  where ac.intcol#=sc.intcol#
                        and ac.obj#=sc.obj#)
union all
select oc.name, ac.name, ut.name, ot.name,
       lpad(decode(bitand(sc.flags, 2), 2, 'Y', 'N'), 15)
from sys.obj$ oc, sys.col$ c, sys.user$ ut, sys.obj$ ot, sys.subcoltype$ sc,
     sys.attrcol$ ac
where oc.owner# = userenv('SCHEMAID')
  and bitand(sc.flags, 1) = 1      /* Type is specified in the IS OF clause */
  and oc.obj#=sc.obj#
  and oc.obj#=c.obj#
  and oc.obj#=ac.obj#
  and c.intcol#=sc.intcol#
  and ac.intcol#=sc.intcol#
  and sc.toid=ot.oid$
  and ot.owner#=ut.user#
  and bitand(c.property,32768) != 32768                /* not unused column */;

CREATE OR REPLACE FORCE VIEW "USER_DATAPUMP_JOBS"("JOB_NAME","OPERATION","JOB_MODE","STATE","DEGREE","ATTACHED_SESSIONS") AS 
SELECT  j.job_name, j.operation, j.job_mode, j.state, j.workers,
                NVL((SELECT    COUNT(*)
                     FROM      SYS.GV$DATAPUMP_SESSION s
                     WHERE     j.job_id = s.job_id
                     GROUP BY  s.job_id), 0)
        FROM    SYS.GV$DATAPUMP_JOB j
        WHERE   j.owner_name = SYS_CONTEXT('USERENV', 'CURRENT_USER')
      UNION ALL                               /* Not Running - Master Tables */
        SELECT o.name,
               SUBSTR (c.comment$, 24, 30), SUBSTR (c.comment$, 55, 30),
               'NOT RUNNING', 0, 0
        FROM sys.obj$ o, sys.user$ u, sys.com$ c
        WHERE SUBSTR (c.comment$, 1, 22) = 'Data Pump Master Table' AND
              RTRIM (SUBSTR (c.comment$, 24, 30)) IN
                ('EXPORT','ESTIMATE','IMPORT','SQL_FILE','NETWORK') AND
              RTRIM (SUBSTR (c.comment$, 55, 30)) IN
                ('FULL','SCHEMA','TABLE','TABLESPACE','TRANSPORTABLE') AND
              o.obj# = c.obj# AND
              o.type# = 2 AND
              u.user# = o.owner# AND
              u.name = SYS_CONTEXT('USERENV', 'CURRENT_USER') AND
              NOT EXISTS (SELECT 1
                          FROM   SYS.GV$DATAPUMP_JOB
                          WHERE  owner_name = u.name AND
                                 job_name = o.name);

CREATE OR REPLACE FORCE VIEW "USER_DB_LINKS"("DB_LINK","USERNAME","PASSWORD","HOST","CREATED") AS 
select l.name, l.userid, l.password, l.host, l.ctime
from sys.link$ l
where l.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_DEPENDENCIES"("NAME","TYPE","REFERENCED_OWNER","REFERENCED_NAME","REFERENCED_TYPE","REFERENCED_LINK_NAME","SCHEMAID","DEPENDENCY_TYPE") AS 
select o.name,
       decode(o.type#, 0, 'NEXT OBJECT', 1, 'INDEX', 2, 'TABLE', 3, 'CLUSTER',
                      4, 'VIEW', 5, 'SYNONYM', 6, 'SEQUENCE', 7, 'PROCEDURE',
                      8, 'FUNCTION', 9, 'PACKAGE', 10, 'NON-EXISTENT',
                      11, 'PACKAGE BODY', 12, 'TRIGGER',
                      13, 'TYPE', 14, 'TYPE BODY', 22, 'LIBRARY',
                      28, 'JAVA SOURCE', 29, 'JAVA CLASS',
                      32, 'INDEXTYPE', 33, 'OPERATOR',
                      42, 'MATERIALIZED VIEW', 43, 'DIMENSION',
                      46, 'RULE SET', 55, 'XML SCHEMA', 56, 'JAVA DATA',
                      59, 'RULE', 62, 'EVALUATION CONTXT',
                      'UNDEFINED'),
       decode(po.linkname, null, pu.name, po.remoteowner), po.name,
       decode(po.type#, 0, 'NEXT OBJECT', 1, 'INDEX', 2, 'TABLE', 3, 'CLUSTER',
                      4, 'VIEW', 5, 'SYNONYM', 6, 'SEQUENCE', 7, 'PROCEDURE',
                      8, 'FUNCTION', 9, 'PACKAGE', 10, 'NON-EXISTENT',
                      11, 'PACKAGE BODY', 12, 'TRIGGER',
                      13, 'TYPE', 14, 'TYPE BODY', 22, 'LIBRARY',
                      28, 'JAVA SOURCE', 29, 'JAVA CLASS',
                      32, 'INDEXTYPE', 33, 'OPERATOR',
                      42, 'MATERIALIZED VIEW', 43, 'DIMENSION',
                      46, 'RULE SET', 55, 'XML SCHEMA', 56, 'JAVA DATA',
                      59, 'RULE', 62, 'EVALUATION CONTXT',
                      'UNDEFINED'),
       po.linkname, userenv('SCHEMAID'),
       decode(bitand(d.property, 3), 2, 'REF', 'HARD')
from sys.obj$ o, sys.disk_and_fixed_objects po, sys.dependency$ d, sys.user$ pu
where o.obj# = d.d_obj#
  and po.obj# = d.p_obj#
  and po.owner# = pu.user#
  and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_DIMENSIONS"("OWNER","DIMENSION_NAME","INVALID","COMPILE_STATE","REVISION") AS 
select u.name, o.name,
       decode(o.status, 5, 'Y', 'N'),
       decode(o.status, 1, 'VALID', 5, 'NEEDS_COMPILE', 'ERROR'),
       1                  /* Metadata revision number */
from sys.dim$ d, sys.obj$ o, sys.user$ u
where o.owner# = u.user#
  and o.obj# = d.obj#
  and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_DIM_ATTRIBUTES"("OWNER","DIMENSION_NAME","ATTRIBUTE_NAME","LEVEL_NAME","COLUMN_NAME","INFERRED") AS 
select u.name, o.name, da.attname, dl.levelname, c.name, 'N'
from sys.dimattr$ da, sys.obj$ o, sys.user$ u, sys.dimlevel$ dl, sys.col$ c
where da.dimobj# = o.obj#
  and o.owner# = u.user#
  and da.dimobj# = dl.dimobj#
  and da.levelid# = dl.levelid#
  and da.detailobj# = c.obj#
  and da.col# = c.intcol#
  and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_DIM_CHILD_OF"("OWNER","DIMENSION_NAME","HIERARCHY_NAME","POSITION","CHILD_LEVEL_NAME","JOIN_KEY_ID","PARENT_LEVEL_NAME") AS 
select u.name, o.name, h.hiername, chl.pos#,
       cdl.levelname,
       decode(phl.joinkeyid#, 0, NULL, phl.joinkeyid#),
       pdl.levelname
from sys.obj$ o, sys.user$ u, sys.hier$ h,
     sys.hierlevel$ phl, sys.hierlevel$ chl,
     sys.dimlevel$ pdl,  sys.dimlevel$ cdl
where phl.dimobj# = o.obj#
  and o.owner# = u.user#
  and phl.dimobj# = h.dimobj#
  and phl.hierid# = h.hierid#
  and phl.dimobj# = pdl.dimobj#
  and phl.levelid# = pdl.levelid#
  and phl.dimobj# = chl.dimobj#
  and phl.hierid# = chl.hierid#
  and phl.pos# = chl.pos# + 1
  and chl.dimobj# = cdl.dimobj#
  and chl.levelid# = cdl.levelid#
  and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_DIM_HIERARCHIES"("OWNER","DIMENSION_NAME","HIERARCHY_NAME") AS 
select u.name, o.name, h.hiername
from sys.hier$ h, sys.obj$ o, sys.user$ u
where h.dimobj# = o.obj#
  and o.owner# = u.user#
  and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_DIM_JOIN_KEY"("OWNER","DIMENSION_NAME","DIM_KEY_ID","LEVEL_NAME","KEY_POSITION","HIERARCHY_NAME","CHILD_JOIN_COLUMN") AS 
select u.name, o.name, djk.joinkeyid#, dl.levelname,
       djk.keypos#, h.hiername, c.name
from sys.dimjoinkey$ djk, sys.obj$ o, sys.user$ u,
     sys.dimlevel$ dl, sys.hier$ h, sys.col$ c
where djk.dimobj# = o.obj#
  and o.owner# = u.user#
  and djk.dimobj# = dl.dimobj#
  and djk.levelid# = dl.levelid#
  and djk.dimobj# = h.dimobj#
  and djk.hierid# = h.hierid#
  and djk.detailobj# = c.obj#
  and djk.col# = c.intcol#
  and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_DIM_LEVELS"("OWNER","DIMENSION_NAME","LEVEL_NAME","NUM_COLUMNS","DETAILOBJ_OWNER","DETAILOBJ_NAME") AS 
select u.name, o.name, dl.levelname,
       temp.num_col,
       u1.name, o1.name
from (select dlk.dimobj#, dlk.levelid#, dlk.detailobj#,
             COUNT(*) as num_col
      from sys.dimlevelkey$ dlk
      group by dlk.dimobj#, dlk.levelid#, dlk.detailobj#) temp,
      sys.dimlevel$ dl, sys.obj$ o, sys.user$ u,
      sys.obj$ o1, sys.user$ u1
where dl.dimobj# = o.obj#   and
      o.owner# = u.user#    and
      dl.dimobj# = temp.dimobj# and
      dl.levelid# = temp.levelid# and
      temp.detailobj# = o1.obj# and
      o1.owner# = u1.user# and
      o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_DIM_LEVEL_KEY"("OWNER","DIMENSION_NAME","LEVEL_NAME","KEY_POSITION","COLUMN_NAME") AS 
select u.name, o.name, dl.levelname, dlk.keypos#, c.name
from sys.dimlevelkey$ dlk, sys.obj$ o, sys.user$ u, sys.dimlevel$ dl,
     sys.col$ c
where dlk.dimobj# = o.obj#
  and o.owner# = u.user#
  and dlk.dimobj# = dl.dimobj#
  and dlk.levelid# = dl.levelid#
  and dlk.detailobj# = c.obj#
  and dlk.col# = c.intcol#
  and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_ERRORS"("NAME","TYPE","SEQUENCE","LINE","POSITION","TEXT","ATTRIBUTE","MESSAGE_NUMBER") AS 
select o.name,
decode(o.type#, 4, 'VIEW', 7, 'PROCEDURE', 8, 'FUNCTION', 9, 'PACKAGE',
               11, 'PACKAGE BODY', 12, 'TRIGGER', 13, 'TYPE', 14, 'TYPE BODY',
               22, 'LIBRARY', 28, 'JAVA SOURCE', 29, 'JAVA CLASS',
               43, 'DIMENSION', 'UNDEFINED'),
  e.sequence#, e.line, e.position#, e.text,
  decode(e.property, 0,'ERROR', 1, 'WARNING', 'UNDEFINED'), e.error#
from sys.obj$ o, sys.error$ e
where o.obj# = e.obj#
  and o.type# in (4, 7, 8, 9, 11, 12, 13, 14, 22, 28, 29, 43)
  and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_EVALUATION_CONTEXTS"("EVALUATION_CONTEXT_NAME","EVALUATION_FUNCTION","EVALUATION_CONTEXT_COMMENT") AS 
SELECT /*+ all_rows */
       o.name, ec.eval_func, ec.ec_comment
FROM   rule_ec$ ec, obj$ o
WHERE  ec.obj# = o.obj# and o.owner# = USERENV('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_EVALUATION_CONTEXT_TABLES"("EVALUATION_CONTEXT_NAME","TABLE_ALIAS","TABLE_NAME") AS 
SELECT o.name, ect.tab_alias, ect.tab_name
FROM   rec_tab$ ect, obj$ o
WHERE  ect.ec_obj# = o.obj# and o.owner# = USERENV('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_EVALUATION_CONTEXT_VARS"("EVALUATION_CONTEXT_NAME","VARIABLE_NAME","VARIABLE_TYPE","VARIABLE_VALUE_FUNCTION","VARIABLE_METHOD_FUNCTION") AS 
SELECT o.name, ecv.var_name, ecv.var_type, ecv.var_val_func, ecv.var_mthd_func
FROM   rec_var$ ecv, obj$ o
WHERE  ecv.ec_obj# = o.obj# and o.owner# = USERENV('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_EXTENTS"("SEGMENT_NAME","PARTITION_NAME","SEGMENT_TYPE","TABLESPACE_NAME","EXTENT_ID","BYTES","BLOCKS") AS 
select ds.segment_name, ds.partition_name, ds.segment_type,
       ds.tablespace_name, e.ext#, e.length * ds.blocksize, e.length
from sys.uet$ e, sys.sys_user_segs ds
where e.segfile# = ds.header_file
  and e.segblock# = ds.header_block
  and e.ts# = ds.tablespace_id
  and bitand(NVL(ds.segment_flags,0), 1) = 0
  and bitand(NVL(ds.segment_flags,0), 65536) = 0
union all
select /*+ ordered use_nl(e) */
       ds.segment_name, ds.partition_name, ds.segment_type,
       ds.tablespace_name, e.ktfbueextno, e.ktfbueblks * ds.blocksize,
       e.ktfbueblks
from sys.sys_user_segs ds, sys.x$ktfbue e
where e.ktfbuesegfno = ds.header_file
  and e.ktfbuesegbno = ds.header_block
  and e.ktfbuesegtsn = ds.tablespace_id
  and bitand(NVL(ds.segment_flags,0), 1) = 1
  and bitand(NVL(ds.segment_flags,0), 65536) = 0;

CREATE OR REPLACE FORCE VIEW "USER_EXTERNAL_LOCATIONS"("TABLE_NAME","LOCATION","DIRECTORY_OWNER","DIRECTORY_NAME") AS 
select o.name, xl.name, 'SYS', nvl(xl.dir, xt.default_dir)
from sys.external_location$ xl, sys.obj$ o, sys.external_tab$ xt
where o.owner# = userenv('SCHEMAID')
  and o.obj# = xl.obj#
  and o.obj# = xt.obj#;

CREATE OR REPLACE FORCE VIEW "USER_EXTERNAL_TABLES"("TABLE_NAME","TYPE_OWNER","TYPE_NAME","DEFAULT_DIRECTORY_OWNER","DEFAULT_DIRECTORY_NAME","REJECT_LIMIT","ACCESS_TYPE","ACCESS_PARAMETERS","PROPERTY") AS 
select o.name, 'SYS', xt.type$, 'SYS', xt.default_dir,
       decode(xt.reject_limit, 2147483647, 'UNLIMITED', xt.reject_limit),
       decode(xt.par_type, 1, 'BLOB', 2, 'CLOB',       'UNKNOWN'),
       decode(xt.par_type, 1, NULL,   2, xt.param_clob, NULL),
       decode(xt.property, 2, 'REFERENCED', 1, 'ALL',     'UNKNOWN')
from sys.external_tab$ xt, sys.obj$ o
where o.owner# = userenv('SCHEMAID')
  and o.obj# = xt.obj#;

CREATE OR REPLACE FORCE VIEW "USER_FREE_SPACE"("TABLESPACE_NAME","FILE_ID","BLOCK_ID","BYTES","BLOCKS","RELATIVE_FNO") AS 
select ts.name, fi.file#, f.block#,
       f.length * ts.blocksize, f.length, f.file#
from sys.fet$ f, sys.ts$ ts, sys.file$ fi
where f.ts# = ts.ts#
  and f.ts# = fi.ts#
  and f.file# = fi.relfile#
  and ts.bitmapped = 0
  and (ts.ts# in
         (select tsq.ts#
          from sys.tsq$ tsq
          where tsq.user# = userenv('SCHEMAID') and tsq.maxblocks != 0)
       or exists
          (select null
           from sys.v$enabledprivs
           where priv_number = -15 /* UNLIMITED TABLESPACE */)
      )
union all
select /*+ ordered use_nl(f) use_nl(fi) */
       ts.name, fi.file#, f.ktfbfebno,
       f.ktfbfeblks * ts.blocksize, f.ktfbfeblks, f.ktfbfefno
from sys.ts$ ts, sys.x$ktfbfe f, sys.file$ fi
where ts.ts# = f.ktfbfetsn
  and f.ktfbfetsn = fi.ts#
  and f.ktfbfefno = fi.relfile#
  and ts.bitmapped <> 0 and ts.online$ in (1,4) and ts.contents$ = 0
  and (ts.ts# in
         (select tsq.ts#
          from sys.tsq$ tsq
          where tsq.user# = userenv('SCHEMAID') and tsq.maxblocks != 0)
       or exists
          (select null
           from sys.v$enabledprivs
           where priv_number = -15 /* UNLIMITED TABLESPACE */)
      )
union all
select ts.name,fi.file#,u.ktfbuebno,u.ktfbueblks * ts.blocksize,
       u.ktfbueblks,u.ktfbuefno
from sys.recyclebin$ rb, sys.ts$ ts, sys.x$ktfbue u, sys.file$ fi
where ts.ts# = rb.ts#
  and rb.ts# = fi.ts#
  and rb.file# = fi.relfile#
  and u.ktfbuesegtsn = rb.ts#
  and u.ktfbuesegfno = rb.file#
  and u.ktfbuesegbno = rb.block#
  and ts.bitmapped <> 0 and ts.online$ in (1,4) and ts.contents$ = 0
  and (ts.ts# in
         (select tsq.ts#
          from sys.tsq$ tsq
          where tsq.user# = userenv('SCHEMAID') and tsq.maxblocks != 0)
       or exists
          (select null
           from sys.v$enabledprivs
           where priv_number = -15 /* UNLIMITED TABLESPACE */)
      )
union all
select ts.name, fi.file#, u.block#,
       u.length * ts.blocksize, u.length, u.file#
from sys.ts$ ts, sys.uet$ u, sys.file$ fi, sys.recyclebin$ rb
where ts.ts# = u.ts#
  and u.ts# = fi.ts#
  and u.segfile# = fi.relfile#
  and u.ts# = rb.ts#
  and u.segfile# = rb.file#
  and u.segblock# = rb.block#
  and ts.bitmapped = 0
  and (ts.ts# in
         (select tsq.ts#
          from sys.tsq$ tsq
          where tsq.user# = userenv('SCHEMAID') and tsq.maxblocks != 0)
       or exists
          (select null
           from sys.v$enabledprivs
           where priv_number = -15 /* UNLIMITED TABLESPACE */)
      );

CREATE OR REPLACE FORCE VIEW "USER_INDEXES"("INDEX_NAME","INDEX_TYPE","TABLE_OWNER","TABLE_NAME","TABLE_TYPE","UNIQUENESS","COMPRESSION","PREFIX_LENGTH","TABLESPACE_NAME","INI_TRANS","MAX_TRANS","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENTS","MAX_EXTENTS","PCT_INCREASE","PCT_THRESHOLD","INCLUDE_COLUMN","FREELISTS","FREELIST_GROUPS","PCT_FREE","LOGGING","BLEVEL","LEAF_BLOCKS","DISTINCT_KEYS","AVG_LEAF_BLOCKS_PER_KEY","AVG_DATA_BLOCKS_PER_KEY","CLUSTERING_FACTOR","STATUS","NUM_ROWS","SAMPLE_SIZE","LAST_ANALYZED","DEGREE","INSTANCES","PARTITIONED","TEMPORARY","GENERATED","SECONDARY","BUFFER_POOL","USER_STATS","DURATION","PCT_DIRECT_ACCESS","ITYP_OWNER","ITYP_NAME","PARAMETERS","GLOBAL_STATS","DOMIDX_STATUS","DOMIDX_OPSTATUS","FUNCIDX_STATUS","JOIN_INDEX","IOT_REDUNDANT_PKEY_ELIM","DROPPED") AS 
select o.name,
       decode(bitand(i.property, 16), 0, '', 'FUNCTION-BASED ') ||
        decode(i.type#, 1, 'NORMAL'||
                          decode(bitand(i.property, 4), 0, '', 4, '/REV'),
                      2, 'BITMAP', 3, 'CLUSTER', 4, 'IOT - TOP',
                      5, 'IOT - NESTED', 6, 'SECONDARY', 7, 'ANSI', 8, 'LOB',
                      9, 'DOMAIN'),
       iu.name, io.name,
       decode(io.type#, 0, 'NEXT OBJECT', 1, 'INDEX', 2, 'TABLE', 3, 'CLUSTER',
                       4, 'VIEW', 5, 'SYNONYM', 6, 'SEQUENCE', 'UNDEFINED'),
       decode(bitand(i.property, 1), 0, 'NONUNIQUE', 1, 'UNIQUE', 'UNDEFINED'),
       decode(bitand(i.flags, 32), 0, 'DISABLED', 32, 'ENABLED', null),
       i.spare2,
       decode(bitand(i.property, 34), 0,
           decode(i.type#, 9, null, ts.name), null),
       to_number(decode(bitand(i.property, 2),2, null, i.initrans)),
       to_number(decode(bitand(i.property, 2),2, null, i.maxtrans)),
       s.iniexts * ts.blocksize,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                             s.extsize * ts.blocksize),
       s.minexts, s.maxexts,
        decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                     s.extpct),
       decode(i.type#, 4, mod(i.pctthres$,256), NULL), i.trunccnt,
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
          decode(bitand(o.flags, 2), 2, 1, decode(s.lists, 0, 1, s.lists))),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
          decode(bitand(o.flags, 2), 2, 1, decode(s.groups, 0, 1, s.groups))),
       decode(bitand(i.property, 2),0,i.pctfree$,null),
       decode(bitand(i.property, 2), 2, NULL,
                decode(bitand(i.flags, 4), 0, 'YES', 'NO')),
       i.blevel, i.leafcnt, i.distkey, i.lblkkey, i.dblkkey, i.clufac,
       decode(bitand(i.property, 2), 2,
                    decode(i.type#, 9, decode(bitand(i.flags, 8),
                                        8, 'INPROGRS', 'VALID'), 'N/A'),
                     decode(bitand(i.flags, 1), 1, 'UNUSABLE',
                            decode(bitand(i.flags, 8), 8, 'INPROGRS',
                                                'VALID'))),
       rowcnt, samplesize, analyzetime,
       decode(i.degree, 32767, 'DEFAULT', nvl(i.degree,1)),
       decode(i.instances, 32767, 'DEFAULT', nvl(i.instances,1)),
       decode(bitand(i.property, 2), 2, 'YES', 'NO'),
       decode(bitand(o.flags, 2), 0, 'N', 2, 'Y', 'N'),
       decode(bitand(o.flags, 4), 0, 'N', 4, 'Y', 'N'),
       decode(bitand(o.flags, 16), 0, 'N', 16, 'Y', 'N'),
       decode(bitand(o.flags, 2), 2, 'DEFAULT',
             decode(s.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL)),
       decode(bitand(i.flags, 64), 0, 'NO', 'YES'),
       decode(bitand(o.flags, 2), 0, NULL,
          decode(bitand(i.property, 64), 64, 'SYS$SESSION', 'SYS$TRANSACTION')),
       decode(bitand(i.flags, 128), 128, mod(trunc(i.pctthres$/256),256),
              decode(i.type#, 4, mod(trunc(i.pctthres$/256),256), NULL)),
       itu.name, ito.name, i.spare4,
       decode(bitand(i.flags, 2048), 0, 'NO', 'YES'),
       decode(i.type#, 9, decode(o.status, 5, 'IDXTYP_INVLD',
                                           1, 'VALID'),  ''),
       decode(i.type#, 9, decode(bitand(i.flags, 16), 16, 'FAILED', 'VALID'), ''),
       decode(bitand(i.property, 16), 0, '',
              decode(bitand(i.flags, 1024), 0, 'ENABLED', 'DISABLED')),
       decode(bitand(i.property, 1024), 1024, 'YES', 'NO'),
       decode(bitand(i.property, 16384), 16384, 'YES', 'NO'),
       decode(bitand(o.flags, 128), 128, 'YES', 'NO')
from sys.ts$ ts, sys.seg$ s, sys.user$ iu, sys.obj$ io, sys.ind$ i, sys.obj$ o,
     sys.user$ itu, sys.obj$ ito
where o.owner# = userenv('SCHEMAID')
  and o.obj# = i.obj#
  and i.bo# = io.obj#
  and io.owner# = iu.user#
  and bitand(i.flags, 4096) = 0
  and bitand(o.flags, 128) = 0
  and i.ts# = ts.ts# (+)
  and i.file# = s.file# (+)
  and i.block# = s.block# (+)
  and i.ts# = s.ts# (+)
  and i.type# in (1, 2, 3, 4, 6, 7, 8, 9)
  and i.indmethod# = ito.obj# (+)
  and ito.owner# = itu.user# (+);

CREATE OR REPLACE FORCE VIEW "USER_INDEXTYPES"("OWNER","INDEXTYPE_NAME","IMPLEMENTATION_SCHEMA","IMPLEMENTATION_NAME","INTERFACE_VERSION","IMPLEMENTATION_VERSION","NUMBER_OF_OPERATORS","PARTITIONING","ARRAY_DML") AS 
select u.name, o.name, u1.name, o1.name, i.interface_version#, t.version#,
io.opcount, decode(bitand(i.property, 48), 0, 'NONE', 16, 'RANGE', 32, 'HASH', 48, 'HASH,RANGE'),
decode(bitand(i.property, 2), 0, 'NO', 2, 'YES')
from sys.indtypes$ i, sys.user$ u, sys.obj$ o,
sys.user$ u1, (select it.obj#, count(*) opcount from
sys.indop$ io1, sys.indtypes$ it where
io1.obj# = it.obj# and bitand(io1.property, 4) != 4
group by it.obj#) io, sys.obj$ o1,
sys.type$ t
where i.obj# = o.obj# and o.owner# = u.user# and
u1.user# = o.owner# and io.obj# = i.obj# and
o1.obj# = i.implobj# and o1.oid$ = t.toid and
o.owner# = userenv ('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_INDEXTYPE_ARRAYTYPES"("OWNER","INDEXTYPE_NAME","BASE_TYPE_SCHEMA","BASE_TYPE_NAME","BASE_TYPE","ARRAY_TYPE_SCHEMA","ARRAY_TYPE_NAME") AS 
select indtypu.name, indtypo.name,
decode(i.type, 121, (select baseu.name from user$ baseu
       where baseo.owner#=baseu.user#), null),
decode(i.type, 121, baseo.name, null),
decode(i.type,  /* DATA_TYPE */
0, null,
1, 'VARCHAR2',
2, 'NUMBER',
3, 'NATIVE INTEGER',
8, 'LONG',
9, 'VARCHAR',
11, 'ROWID',
12, 'DATE',
23, 'RAW',
24, 'LONG RAW',
29, 'BINARY_INTEGER',
69, 'ROWID',
96, 'CHAR',
100, 'BINARY_FLOAT',
101, 'BINARY_DOUBLE',
102, 'REF CURSOR',
104, 'UROWID',
105, 'MLSLABEL',
106, 'MLSLABEL',
110, 'REF',
111, 'REF',
112, 'CLOB',
113, 'BLOB', 114, 'BFILE', 115, 'CFILE',
121, 'OBJECT',
122, 'TABLE',
123, 'VARRAY',
178, 'TIME',
179, 'TIME WITH TIME ZONE',
180, 'TIMESTAMP',
181, 'TIMESTAMP WITH TIME ZONE',
231, 'TIMESTAMP WITH LOCAL TIME ZONE',
182, 'INTERVAL YEAR TO MONTH',
183, 'INTERVAL DAY TO SECOND',
250, 'PL/SQL RECORD',
251, 'PL/SQL TABLE',
252, 'PL/SQL BOOLEAN',
'UNDEFINED'),
arrayu.name, arrayo.name
from sys.user$ indtypu, sys.indarraytype$ i, sys.obj$ indtypo,
sys.obj$ baseo,  sys.obj$ arrayo, sys.user$ arrayu
where i.obj# = indtypo.obj# and  indtypu.user# = indtypo.owner# and
      i.basetypeobj# = baseo.obj#(+) and i.arraytypeobj# = arrayo.obj# and
      arrayu.user# = arrayo.owner# and indtypo.owner# = userenv ('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_INDEXTYPE_COMMENTS"("OWNER","INDEXTYPE_NAME","COMMENTS") AS 
select  u.name, o.name, c.comment$
from    sys.obj$ o, sys.user$ u, sys.indtypes$ i, sys.com$ c
where   o.obj# = i.obj# and u.user# = o.owner# and c.obj# = i.obj#
        and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_INDEXTYPE_OPERATORS"("OWNER","INDEXTYPE_NAME","OPERATOR_SCHEMA","OPERATOR_NAME","BINDING#") AS 
select u.name, o.name, u1.name, op.name, i.bind#
from sys.user$ u, sys.indop$ i, sys.obj$ o,
sys.obj$ op, sys.user$ u1
where i.obj# = o.obj# and i.oper# = op.obj# and
      u.user# = o.owner# and u1.user#=op.owner# and
      o.owner# = userenv ('SCHEMAID') and bitand(i.property, 4) != 4;

CREATE OR REPLACE FORCE VIEW "USER_IND_COLUMNS"("INDEX_NAME","TABLE_NAME","COLUMN_NAME","COLUMN_POSITION","COLUMN_LENGTH","CHAR_LENGTH","DESCEND") AS 
select idx.name, base.name,
       decode(bitand(c.property, 1024), 1024,
              (select decode(bitand(tc.property, 1), 1, ac.name, tc.name)
              from sys.col$ tc, attrcol$ ac
              where tc.intcol# = c.intcol#-1
                and tc.obj# = c.obj#
                and tc.obj# = ac.obj#(+)
                and tc.intcol# = ac.intcol#(+)),
              decode(ac.name, null, c.name, ac.name)),
       ic.pos#, c.length, c.spare3,
       decode(bitand(c.property, 131072), 131072, 'DESC', 'ASC')
from sys.col$ c, sys.obj$ idx, sys.obj$ base, sys.icol$ ic, sys.ind$ i,
       sys.attrcol$ ac
where c.obj# = base.obj#
  and ic.bo# = base.obj#
  and decode(bitand(i.property,1024),0,ic.intcol#,ic.spare2) = c.intcol#
  and base.owner# = userenv('SCHEMAID')
  and base.namespace in (1, 5) /* table or cluster namespace */
  and ic.obj# = idx.obj#
  and idx.obj# = i.obj#
  and i.type# in (1, 2, 3, 4, 6, 7, 9)
  and c.obj# = ac.obj#(+)
  and c.intcol# = ac.intcol#(+)
union all
select idx.name, base.name,
       decode(bitand(c.property, 1024), 1024,
              (select decode(bitand(tc.property, 1), 1, ac.name, tc.name)
               from sys.col$ tc, attrcol$ ac
               where tc.intcol# = c.intcol#-1
                 and tc.obj# = c.obj#
                 and tc.obj# = ac.obj#(+)
                 and tc.intcol# = ac.intcol#(+)),
              decode(ac.name, null, c.name, ac.name)),
       ic.pos#, c.length, c.spare3,
       decode(bitand(c.property, 131072), 131072, 'DESC', 'ASC')
from sys.col$ c, sys.obj$ idx, sys.obj$ base, sys.icol$ ic, sys.ind$ i,
       sys.attrcol$ ac
where c.obj# = base.obj#
  and i.bo# = base.obj#
  and base.owner# != userenv('SCHEMAID')
  and decode(bitand(i.property,1024),0,ic.intcol#,ic.spare2) = c.intcol#
  and idx.owner# = userenv('SCHEMAID')
  and idx.namespace = 4 /* index namespace */
  and ic.obj# = idx.obj#
  and idx.obj# = i.obj#
  and i.type# in (1, 2, 3, 4, 6, 7, 9)
  and c.obj# = ac.obj#(+)
  and c.intcol# = ac.intcol#(+);

CREATE OR REPLACE FORCE VIEW "USER_IND_EXPRESSIONS"("INDEX_NAME","TABLE_NAME","COLUMN_EXPRESSION","COLUMN_POSITION") AS 
select idx.name, base.name, c.default$, ic.pos#
from sys.col$ c, sys.obj$ idx, sys.obj$ base, sys.icol$ ic, sys.ind$ i
where bitand(ic.spare1,1) = 1       /* an expression */
  and (bitand(i.property,1024) = 0) /* not bmji */
  and c.obj# = base.obj#
  and ic.bo# = base.obj#
  and ic.intcol# = c.intcol#
  and base.owner# = userenv('SCHEMAID')
  and base.namespace in (1, 5)
  and ic.obj# = idx.obj#
  and idx.obj# = i.obj#
  and i.type# in (1, 2, 3, 4, 6, 7, 9)
union all
select idx.name, base.name, c.default$, ic.pos#
from sys.col$ c, sys.obj$ idx, sys.obj$ base, sys.icol$ ic, sys.ind$ i
where bitand(ic.spare1,1) = 1       /* an expression */
  and (bitand(i.property,1024) = 0) /* not bmji */
  and c.obj# = base.obj#
  and i.bo# = base.obj#
  and base.owner# != userenv('SCHEMAID')
  and ic.intcol# = c.intcol#
  and idx.owner# = userenv('SCHEMAID')
  and idx.namespace = 4 /* index namespace */
  and ic.obj# = idx.obj#
  and idx.obj# = i.obj#
  and i.type# in (1, 2, 3, 4, 6, 7, 9);

CREATE OR REPLACE FORCE VIEW "USER_IND_PARTITIONS"("INDEX_NAME","COMPOSITE","PARTITION_NAME","SUBPARTITION_COUNT","HIGH_VALUE","HIGH_VALUE_LENGTH","PARTITION_POSITION","STATUS","TABLESPACE_NAME","PCT_FREE","INI_TRANS","MAX_TRANS","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENT","MAX_EXTENT","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","LOGGING","COMPRESSION","BLEVEL","LEAF_BLOCKS","DISTINCT_KEYS","AVG_LEAF_BLOCKS_PER_KEY","AVG_DATA_BLOCKS_PER_KEY","CLUSTERING_FACTOR","NUM_ROWS","SAMPLE_SIZE","LAST_ANALYZED","BUFFER_POOL","USER_STATS","PCT_DIRECT_ACCESS","GLOBAL_STATS","DOMIDX_OPSTATUS","PARAMETERS") AS 
select io.name, 'NO', io.subname, 0,
       ip.hiboundval, ip.hiboundlen,
       ip.part#, decode(bitand(ip.flags, 1), 1, 'UNUSABLE', 'USABLE'), ts.name,
       ip.pctfree$, ip.initrans, ip.maxtrans, s.iniexts * ts.blocksize,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                               s.extsize * ts.blocksize),
       s.minexts, s.maxexts,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extpct),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
         decode(s.lists, 0, 1, s.lists)),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
         decode(s.groups, 0, 1, s.groups)),
       decode(mod(trunc(ip.flags / 4), 2), 0, 'YES', 'NO'),
       decode(bitand(ip.flags, 1024), 0, 'DISABLED', 1024, 'ENABLED', null),
       ip.blevel, ip.leafcnt, ip.distkey, ip.lblkkey, ip.dblkkey,
       ip.clufac, ip.rowcnt, ip.samplesize, ip.analyzetime,
       decode(s.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL),
       decode(bitand(ip.flags, 8), 0, 'NO', 'YES'), ip.pctthres$,
       decode(bitand(ip.flags, 16), 0, 'NO', 'YES'), '',''
from   obj$ io, indpartv$ ip, ts$ ts, sys.seg$ s
where  io.obj# = ip.obj# and ts.ts# = ip.ts# and ip.file#=s.file# and
       ip.block#=s.block# and ip.ts#=s.ts# and io.owner# = userenv('SCHEMAID')
union all
select io.name, 'YES', io.subname,icp.subpartcnt,
       icp.hiboundval, icp.hiboundlen,
       icp.part#, 'N/A', ts.name,
       icp.defpctfree, icp.definitrans, icp.defmaxtrans,
       icp.definiexts, icp.defextsize, icp.defminexts, icp.defmaxexts,
       icp.defextpct, icp.deflists, icp.defgroups,
       decode(icp.deflogging, 0, 'NONE', 1, 'YES', 2, 'NO', 'UNKNOWN'),
       decode(bitand(icp.flags, 1024), 0, 'DISABLED', 1024, 'ENABLED', null),
       icp.blevel, icp.leafcnt, icp.distkey, icp.lblkkey, icp.dblkkey,
       icp.clufac, icp.rowcnt, icp.samplesize, icp.analyzetime,
       decode(icp.defbufpool, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL),
       decode(bitand(icp.flags, 8), 0, 'NO', 'YES'), TO_NUMBER(NULL),
       decode(bitand(icp.flags, 16), 0, 'NO', 'YES'), '',''
from   obj$ io, indcompartv$ icp, ts$ ts
where  io.obj# = icp.obj# and icp.defts# = ts.ts# (+) and
       io.owner# = userenv('SCHEMAID')
union all
select io.name, 'NO', io.subname, 0,
       ip.hiboundval, ip.hiboundlen,
       ip.part#, decode(bitand(ip.flags, 1), 1, 'UNUSABLE',
               decode(bitand(ip.flags, 4096), 4096, 'INPROGRS', 'USABLE')),
       null,
       ip.pctfree$, ip.initrans, ip.maxtrans,
       0, 0, 0, 0, 0, 0, 0,
       decode(mod(trunc(ip.flags / 4), 2), 0, 'YES', 'NO'),
       decode(bitand(ip.flags, 1024), 0, 'DISABLED', 1024, 'ENABLED', null),
       ip.blevel, ip.leafcnt, ip.distkey, ip.lblkkey, ip.dblkkey,
       ip.clufac, ip.rowcnt, ip.samplesize, ip.analyzetime,
       'DEFAULT',
       decode(bitand(ip.flags, 8), 0, 'NO', 'YES'), ip.pctthres$,
       decode(bitand(ip.flags, 16), 0, 'NO', 'YES'),
       decode(i.type#,
             9, decode(bitand(ip.flags, 8192), 8192, 'FAILED', 'VALID'),
             ''),
       ipp.parameters
from   obj$ io, indpartv$ ip, indpart_param$ ipp, ind$ i
where  io.obj# = ip.obj# and ip.obj# = ipp.obj# and
       ip.bo# = i.obj# and io.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_IND_STATISTICS"("INDEX_NAME","PARTITION_NAME","PARTITION_POSITION","SUBPARTITION_NAME","SUBPARTITION_POSITION","OBJECT_TYPE","BLEVEL","LEAF_BLOCKS","DISTINCT_KEYS","AVG_LEAF_BLOCKS_PER_KEY","AVG_DATA_BLOCKS_PER_KEY","CLUSTERING_FACTOR","NUM_ROWS","AVG_CACHED_BLOCKS","AVG_CACHE_HIT_RATIO","SAMPLE_SIZE","LAST_ANALYZED","GLOBAL_STATS","USER_STATS") AS 
SELECT
    o.name, NULL,NULL, NULL, NULL, 'INDEX',
    i.blevel, i.leafcnt, i.distkey, i.lblkkey, i.dblkkey, i.clufac, i.rowcnt,
    ins.cachedblk, ins.cachehit, i.samplesize, i.analyzetime,
    decode(bitand(i.flags, 2048), 0, 'NO', 'YES'),
    decode(bitand(i.flags, 64), 0, 'NO', 'YES')
  FROM
    sys.ind$ i, sys.obj$ o, sys.ind_stats$ ins
  WHERE
      o.obj# = i.obj#
  and bitand(i.flags, 4096) = 0
  and i.type# in (1, 2, 3, 4, 6, 7, 8, 9)
  and i.obj# = ins.obj# (+)
  and o.owner# = userenv('SCHEMAID')
  UNION ALL
  SELECT
    io.name, io.subname, ip.part#, NULL, NULL, 'PARTITION',
    ip.blevel, ip.leafcnt, ip.distkey, ip.lblkkey, ip.dblkkey,
    ip.clufac, ip.rowcnt, ins.cachedblk, ins.cachehit,
    ip.samplesize, ip.analyzetime,
    decode(bitand(ip.flags, 16), 0, 'NO', 'YES'),
    decode(bitand(ip.flags, 8), 0, 'NO', 'YES')
  FROM
    sys.obj$ io, sys.indpartv$ ip, sys.ind_stats$ ins
  WHERE
      io.obj# = ip.obj#
  and ip.file# > 0
  and ip.block# > 0
  and ip.obj# = ins.obj# (+)
  and io.owner# = userenv('SCHEMAID')
  UNION ALL
  SELECT
    io.name, io.subname, icp.part#, NULL, NULL, 'PARTITION',
    icp.blevel, icp.leafcnt, icp.distkey, icp.lblkkey, icp.dblkkey,
    icp.clufac, icp.rowcnt, ins.cachedblk, ins.cachehit,
    icp.samplesize, icp.analyzetime,
    decode(bitand(icp.flags, 16), 0, 'NO', 'YES'),
    decode(bitand(icp.flags, 8), 0, 'NO', 'YES')
  FROM
    obj$ io, indcompartv$ icp, sys.ind_stats$ ins
  WHERE
      io.obj# = icp.obj#
  and io.obj# = ins.obj# (+)
  and io.owner# = userenv('SCHEMAID')
  UNION ALL
  SELECT
    io.name, io.subname, ip.part#, NULL, NULL, 'PARTITION',
    ip.blevel, ip.leafcnt, ip.distkey, ip.lblkkey, ip.dblkkey,
    ip.clufac, ip.rowcnt, ins.cachedblk, ins.cachehit,
    ip.samplesize, ip.analyzetime,
    decode(bitand(ip.flags, 16), 0, 'NO', 'YES'),
    decode(bitand(ip.flags, 8), 0, 'NO', 'YES')
  FROM
    obj$ io, indpartv$ ip, indpart_param$ ipp, sys.ind_stats$ ins
  WHERE
      io.obj# = ip.obj#
  and ip.obj# = ipp.obj#
  and ip.obj# = ins.obj# (+)
  and io.owner# = userenv('SCHEMAID')
  UNION ALL
  SELECT
    po.name, po.subname, icp.part#, so.subname, isp.subpart#,
    'SUBPARTITION',
    isp.blevel, isp.leafcnt, isp.distkey, isp.lblkkey, isp.dblkkey,
    isp.clufac, isp.rowcnt, ins.cachedblk, ins.cachehit,
    isp.samplesize, isp.analyzetime,
    decode(bitand(isp.flags, 16), 0, 'NO', 'YES'),
    decode(bitand(isp.flags, 8), 0, 'NO', 'YES')
  FROM
    obj$ so, sys.obj$ po, indcompartv$ icp, indsubpartv$ isp,
    sys.ind_stats$ ins
  WHERE
      so.obj# = isp.obj#
  and po.obj# = icp.obj#
  and icp.obj# = isp.pobj#
  and isp.file# > 0
  and isp.block# > 0
  and isp.obj# = ins.obj# (+)
  and po.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_IND_SUBPARTITIONS"("INDEX_NAME","PARTITION_NAME","SUBPARTITION_NAME","HIGH_VALUE","HIGH_VALUE_LENGTH","SUBPARTITION_POSITION","STATUS","TABLESPACE_NAME","PCT_FREE","INI_TRANS","MAX_TRANS","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENT","MAX_EXTENT","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","LOGGING","COMPRESSION","BLEVEL","LEAF_BLOCKS","DISTINCT_KEYS","AVG_LEAF_BLOCKS_PER_KEY","AVG_DATA_BLOCKS_PER_KEY","CLUSTERING_FACTOR","NUM_ROWS","SAMPLE_SIZE","LAST_ANALYZED","BUFFER_POOL","USER_STATS","GLOBAL_STATS") AS 
select po.name, po.subname, so.subname, isp.hiboundval, isp.hiboundlen,
       isp.subpart#,
       decode(bitand(isp.flags, 1), 1, 'UNUSABLE', 'USABLE'), ts.name,
       isp.pctfree$, isp.initrans, isp.maxtrans,
       s.iniexts * ts.blocksize,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extsize * ts.blocksize),
       s.minexts, s.maxexts,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extpct),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
         decode(s.lists, 0, 1, s.lists)),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
         decode(s.groups, 0, 1, s.groups)),
       decode(mod(trunc(isp.flags / 4), 2), 0, 'YES', 'NO'),
       decode(bitand(isp.flags, 1024), 0, 'DISABLED', 1024, 'ENABLED', null),
       isp.blevel, isp.leafcnt, isp.distkey, isp.lblkkey, isp.dblkkey,
       isp.clufac, isp.rowcnt, isp.samplesize, isp.analyzetime,
       decode(s.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL),
       decode(bitand(isp.flags, 8), 0, 'NO', 'YES'),
       decode(bitand(isp.flags, 16), 0, 'NO', 'YES')
from   sys.obj$ so, sys.obj$ po, sys.indsubpartv$ isp, sys.ts$ ts, sys.seg$ s
where  so.obj# = isp.obj# and po.obj# = isp.pobj# and isp.ts# = ts.ts# and
       isp.file# = s.file# and isp.block# = s.block# and isp.ts# = s.ts# and
       po.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_INTERNAL_TRIGGERS"("TABLE_NAME","INTERNAL_TRIGGER_TYPE") AS 
select o.name, 'DEFERRED RPC QUEUE'
from sys.tab$ t, sys.obj$ o
where o.owner# = userenv('SCHEMAID')
      and t.obj# = o.obj#
      and bitand(t.trigflag,1) = 1
union
select o.name, 'MVIEW LOG'
from sys.tab$ t, sys.obj$ o
where o.owner# = userenv('SCHEMAID')
      and t.obj# = o.obj#
      and bitand(t.trigflag,2) = 2
union
select o.name, 'UPDATABLE MVIEW LOG'
from sys.tab$ t, sys.obj$ o
where o.owner# = userenv('SCHEMAID')
       and t.obj# = o.obj#
       and bitand(t.trigflag,4) = 4
union
select o.name, 'CONTEXT'
from sys.tab$ t, sys.obj$ o
where o.owner# = userenv('SCHEMAID')
      and t.obj# = o.obj#
      and bitand(t.trigflag,8) = 8;

CREATE OR REPLACE FORCE VIEW "USER_JAVA_ARGUMENTS"("NAME","METHOD_INDEX","METHOD_NAME","ARGUMENT_POSITION","ARRAY_DEPTH","BASE_TYPE","ARGUMENT_CLASS") AS 
select m.kln, m.mix, m.mnm, m.aix,
       m.aad,
       decode(m.abt, 10, 'int',
                     11, 'long',
                     6, 'float',
                     7, 'double',
                     4, 'boolean',
                     8, 'byte',
                     5, 'char',
                     9, 'short',
                     2, 'class',
                     NULL),
       m.aln
from sys.obj$ o, sys.x$joxfm m
where o.obj# = m.obn
  and o.type# = 29
  and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_JAVA_CLASSES"("NAME","MAJOR","MINOR","KIND","ACCESSIBILITY","IS_INNER","IS_ABSTRACT","IS_FINAL","IS_DEBUG","SOURCE","SUPER","OUTER") AS 
select m.kln, m.maj, m.min,
       decode(BITAND(m.acc, 512), 512, 'CLASS',
                                  0, 'INTERFACE'),
       decode(BITAND(m.acc, 1), 1, 'PUBLIC',
                                0, NULL),
       decode(BITAND(m.acc, 131072), 131072, 'YES',
                                     0, 'NO'),
       decode(BITAND(m.acc, 1024), 1024, 'YES',
                                   0, 'NO'),
       decode(BITAND(m.acc, 16), 16, 'YES',
                                 0, 'NO'),
       decode(m.dbg, 1, 'YES',
                     0, 'NO'),
       m.src, m.spl, m.oln
from sys.obj$ o, sys.x$joxfm m
where o.obj# = m.obn
  and o.type# = 29
  and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_JAVA_DERIVATIONS"("SOURCE_NAME","CLASS_INDEX","CLASS_NAME","RESOURCE_INDEX","RESOURCE_NAME") AS 
select dbms_java.longname(t.joxftderivedfrom),
       t.joxftderivedclassnumber,
       dbms_java.longname(t.joxftderivedclassname),
       t.joxftderivedresourcenumber,
       dbms_java.longname(t.joxftderivedresourcename)
from sys.obj$ o, sys.x$joxft t
where o.obj# = t.joxftobn
  and o.type# = 29
  and t.joxftderivedfrom IS NOT NULL
  and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_JAVA_FIELDS"("NAME","FIELD_INDEX","FIELD_NAME","ACCESSIBILITY","IS_STATIC","IS_FINAL","IS_VOLATILE","IS_TRANSIENT","ARRAY_DEPTH","BASE_TYPE","FIELD_CLASS") AS 
select m.kln, m.fix, m.fnm,
       decode(BITAND(m.fac, 7), 1, 'PUBLIC',
                                2, 'PRIVATE',
                                4, 'PROTECTED',
                                NULL),
       decode(BITAND(m.fac, 8), 8, 'YES',
                                0, 'NO'),
       decode(BITAND(m.fac, 16), 16, 'YES',
                                 0, 'NO'),
       decode(BITAND(m.fac, 64), 64, 'YES',
                                 0, 'NO'),
       decode(BITAND(m.fac, 128), 128, 'YES',
                                  0, 'NO'),
       m.fad,
       decode(m.fbt, 10, 'int',
                     11, 'long',
                     6, 'float',
                     7, 'double',
                     4, 'boolean',
                     8, 'byte',
                     5, 'char',
                     9, 'short',
                     2, 'class',
                     NULL),
       m.fln
from sys.obj$ o, sys.x$joxfm m
where o.obj# = m.obn
  and o.type# = 29
  and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_JAVA_IMPLEMENTS"("NAME","INTERFACE_INDEX","INTERFACE_NAME") AS 
select m.kln, m.ifx, m.iln
from sys.obj$ o, sys.x$joxfm m
where o.obj# = m.obn
  and o.type# = 29
  and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_JAVA_INNERS"("NAME","INNER_INDEX","SIMPLE_NAME","FULL_NAME","ACCESSIBILITY","IS_STATIC","IS_FINAL","IS_ABSTRACT","IS_INTERFACE") AS 
select m.kln, m.nix, m.nsm, m.nln,
       decode(BITAND(m.oac, 7), 1, 'PUBLIC',
                                2, 'PRIVATE',
                                4, 'PROTECTED',
                                NULL),
       decode(BITAND(m.acc, 8), 8, 'YES',
                                0, 'NO'),
       decode(BITAND(m.acc, 16), 16, 'YES',
                                 0, 'NO'),
       decode(BITAND(m.acc, 1024), 1024, 'YES',
                                   0, 'NO'),
       decode(BITAND(m.acc, 512), 512, 'YES',
                                  0, 'NO')
from sys.obj$ o, sys.x$joxfm m
where o.obj# = m.obn
  and o.type# = 29
  and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_JAVA_LAYOUTS"("NAME","INTERFACES","INNER_CLASSES","FIELDS","STATIC_FIELDS","METHODS","STATIC_METHODS","NATIVE_METHODS") AS 
select m.kln, m.lic, m.lnc,
              m.lfc, m.lsf,
              m.lmc, m.lsm, m.jnc
from sys.obj$ o, sys.x$joxfm m
where o.obj# = m.obn
  and o.type# = 29
  and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_JAVA_METHODS"("NAME","METHOD_INDEX","METHOD_NAME","ACCESSIBILITY","IS_STATIC","IS_FINAL","IS_SYNCHRONIZED","IS_NATIVE","IS_ABSTRACT","IS_STRICT","ARGUMENTS","THROWS","ARRAY_DEPTH","BASE_TYPE","RETURN_CLASS") AS 
select m.kln, m.mix, m.mnm,
       decode(BITAND(m.mac, 7), 1, 'PUBLIC',
                                2, 'PRIVATE',
                                4, 'PROTECTED',
                                NULL),
       decode(BITAND(m.mac, 8), 8, 'YES',
                                0, 'NO'),
       decode(BITAND(m.mac, 16), 16, 'YES',
                                 0, 'NO'),
       decode(BITAND(m.mac, 32), 32, 'YES',
                                 0, 'NO'),
       decode(BITAND(m.mac, 256), 256, 'YES',
                                  0, 'NO'),
       decode(BITAND(m.mac, 1024), 1024, 'YES',
                                   0, 'NO'),
       decode(BITAND(m.mac, 2048), 2048, 'YES',
                                   0, 'NO'),
       m.agc, m.exc, m.rad,
       decode(m.rbt, 10, 'int',
                     11, 'long',
                     6,  'float',
                     7,  'double',
                     4,  'boolean',
                     8,  'byte',
                     5,  'char',
                     9,  'short',
                     2,  'class',
                     12, 'void',
                     NULL),
       m.rln
from sys.obj$ o, sys.x$joxfm m
where o.obj# = m.obn
  and o.type# = 29
  and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_JAVA_NCOMPS"("NAME","SOURCE","INITIALIZER","LIBRARYFILE","LIBRARY") AS 
select dbms_java.longname(o.name),
       t.joxftncompsource,
       t.joxftncompinitializer,
       t.joxftncomplibraryfile,
       t.joxftncomplibrary
from sys.obj$ o, sys.x$joxft t
where o.obj# = t.joxftobn
  and o.type# = 29
  and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_JAVA_POLICY"("KIND","GRANTEE_NAME","TYPE_SCHEMA","TYPE_NAME","NAME","ACTION","ENABLED","SEQ") AS 
select
  djp.kind, djp.grantee, djp.type_schema,
  djp.type_name, djp.name, djp.action, djp.enabled, djp.seq
from
  dba_java_policy djp, sys.user$ u
where
  u.name = djp.grantee and
  ( ( u.user# in ( select distinct privilege# from SYS.SYSAUTH$
               where privilege# > 0
               start with grantee# = userenv('SCHEMAID')
               connect by PRIOR  privilege# = grantee# ) )
     or u.name = 'PUBLIC'
     or u.user# = userenv('SCHEMAID') );

CREATE OR REPLACE FORCE VIEW "USER_JAVA_RESOLVERS"("NAME","TERM_INDEX","PATTERN","SCHEMA") AS 
select dbms_java.longname(o.name),
       t.joxftresolvertermnumber,
       t.joxftresolvertermpattern,
       t.joxftresolvertermschema
from sys.obj$ o, sys.x$joxft t
where o.obj# = t.joxftobn
  and o.type# = 29
  and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_JAVA_THROWS"("NAME","METHOD_INDEX","METHOD_NAME","EXCEPTION_INDEX","EXCEPTION_CLASS") AS 
select m.kln, m.mix, m.mnm, m.xix, m.xln
from sys.obj$ o, sys.x$joxfm m
where o.obj# = m.obn
  and o.type# = 29
  and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_JOBS"("JOB","LOG_USER","PRIV_USER","SCHEMA_USER","LAST_DATE","LAST_SEC","THIS_DATE","THIS_SEC","NEXT_DATE","NEXT_SEC","TOTAL_TIME","BROKEN","INTERVAL","FAILURES","WHAT","NLS_ENV","MISC_ENV","INSTANCE") AS 
select j."JOB",j."LOG_USER",j."PRIV_USER",j."SCHEMA_USER",j."LAST_DATE",j."LAST_SEC",j."THIS_DATE",j."THIS_SEC",j."NEXT_DATE",j."NEXT_SEC",j."TOTAL_TIME",j."BROKEN",j."INTERVAL",j."FAILURES",j."WHAT",j."NLS_ENV",j."MISC_ENV",j."INSTANCE" from dba_jobs j, sys.user$ u where
j.priv_user = u.name
and u.user# = USERENV('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_JOIN_IND_COLUMNS"("INDEX_NAME","INNER_TABLE_OWNER","INNER_TABLE_NAME","INNER_TABLE_COLUMN","OUTER_TABLE_OWNER","OUTER_TABLE_NAME","OUTER_TABLE_COLUMN") AS 
select
  oi.name,
  uti.name, oti.name, ci.name,
  uto.name, oto.name, co.name
from
  sys.user$ uti, sys.user$ uto,
  sys.obj$ oi, sys.obj$ oti, sys.obj$ oto,
  sys.col$ ci, sys.col$ co,
  sys.jijoin$ ji
where ji.obj# = oi.obj#
  and ji.tab1obj# = oti.obj#
  and oti.owner# = uti.user#
  and ci.obj# = oti.obj#
  and ji.tab1col# = ci.intcol#
  and ji.tab2obj# = oto.obj#
  and oto.owner# = uto.user#
  and co.obj# = oto.obj#
  and ji.tab2col# = co.intcol#
  and oi.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_LIBRARIES"("LIBRARY_NAME","FILE_SPEC","DYNAMIC","STATUS") AS 
select o.name,
       l.filespec,
       decode(bitand(l.property, 1), 0, 'Y', 1, 'N', NULL),
       decode(o.status, 0, 'N/A', 1, 'VALID', 'INVALID')
from sys.obj$ o, sys.library$ l
where o.owner# = userenv('SCHEMAID')
  and o.obj# = l.obj#;

CREATE OR REPLACE FORCE VIEW "USER_LOBS"("TABLE_NAME","COLUMN_NAME","SEGMENT_NAME","TABLESPACE_NAME","INDEX_NAME","CHUNK","PCTVERSION","RETENTION","FREEPOOLS","CACHE","LOGGING","IN_ROW","FORMAT","PARTITIONED") AS 
select o.name,
       decode(bitand(c.property, 1), 1, ac.name, c.name),
       lo.name,
       decode(bitand(l.property, 8), 8, ts1.name, ts.name), io.name,
       l.chunk * decode(bitand(l.property, 8), 8, ts1.blocksize,
                        ts.blocksize),
       decode(l.pctversion$, 101, to_number(NULL), 102, to_number(NULL),
                                   l.pctversion$),
       decode(l.retention, -1, to_number(NULL), l.retention),
       decode(l.freepools, 0, to_number(NULL), 65534, to_number(NULL),
              65535, to_number(NULL), l.freepools),
       decode(bitand(l.flags, 27), 1, 'NO', 2, 'NO', 8, 'CACHEREADS',
                                   16, 'CACHEREADS', 'YES'),
       decode(bitand(l.flags, 18), 2, 'NO', 16, 'NO', 'YES'),
       decode(bitand(l.property, 2), 2, 'YES', 'NO'),
       decode(c.type#, 113, 'NOT APPLICABLE ',
              decode(bitand(l.property, 512), 512,
                     'ENDIAN SPECIFIC', 'ENDIAN NEUTRAL ')),
       decode(bitand(ta.property, 32), 32, 'YES', 'NO')
from sys.obj$ o, sys.col$ c, sys.attrcol$ ac, sys.lob$ l, sys.obj$ lo,
     sys.obj$ io, sys.ts$ ts, sys.tab$ ta, sys.user$ ut, sys.ts$ ts1
where o.owner# = userenv('SCHEMAID')
  and o.obj# = c.obj#
  and c.obj# = l.obj#
  and c.intcol# = l.intcol#
  and l.lobj# = lo.obj#
  and l.ind# = io.obj#
  and l.ts# = ts.ts#(+)
  and o.owner# = ut.user#
  and ut.tempts# = ts1.ts#
  and c.obj# = ac.obj#(+)
  and c.intcol# = ac.intcol#(+)
  and bitand(c.property,32768) != 32768           /* not unused column */
  and o.obj# = ta.obj#
  and bitand(ta.property, 32) != 32           /* not partitioned table */
union all
select o.name,
       decode(bitand(c.property, 1), 1, ac.name, c.name),
       lo.name,
       decode(null, plob.defts#, ts2.name, ts1.name), io.name,
       plob.defchunk * (decode(null, plob.defts#,
                               ts2.blocksize, ts1.blocksize)),
       decode(plob.defpctver$, 101, to_number(NULL), 102, to_number(NULL),
                                   plob.defpctver$),
       decode(l.retention, -1, to_number(NULL), l.retention),
       decode(l.freepools, 0, to_number(NULL), 65534, to_number(NULL),
              65535, to_number(NULL), l.freepools),
       decode(bitand(plob.defflags, 27), 1, 'NO', 2, 'NO', 8, 'CACHEREADS',
                                         16, 'CACHEREADS', 'YES'),
       decode(bitand(plob.defflags,22), 0,'NONE', 4,'YES', 2,'NO',
                                        16,'NO', 'UNKNOWN'),
       decode(bitand(plob.defpro, 2), 2, 'YES', 'NO'),
       decode(c.type#, 113, 'NOT APPLICABLE ',
              decode(bitand(l.property, 512), 512,
                     'ENDIAN SPECIFIC', 'ENDIAN NEUTRAL ')),
       decode(bitand(ta.property, 32), 32, 'YES', 'NO')
from sys.obj$ o, sys.col$ c, sys.attrcol$ ac, sys.partlob$ plob,
     sys.lob$ l, sys.obj$ lo, sys.obj$ io, sys.ts$ ts1, sys.tab$ ta,
     sys.partobj$ po, sys.ts$ ts2
where o.owner# = userenv('SCHEMAID')
  and o.obj# = c.obj#
  and c.obj# = l.obj#
  and c.intcol# = l.intcol#
  and l.lobj# = lo.obj#
  and l.ind# = io.obj#
  and l.lobj# = plob.lobj#
  and plob.defts# = ts1.ts# (+)
  and c.obj# = ac.obj#(+)
  and c.intcol# = ac.intcol#(+)
  and bitand(c.property,32768) != 32768           /* not unused column */
  and o.obj# = ta.obj#
  and bitand(ta.property, 32) = 32                /* partitioned table */
  and o.obj# = po.obj#
  and po.defts# = ts2.ts#;

CREATE OR REPLACE FORCE VIEW "USER_LOB_PARTITIONS"("TABLE_NAME","COLUMN_NAME","LOB_NAME","PARTITION_NAME","LOB_PARTITION_NAME","LOB_INDPART_NAME","PARTITION_POSITION","COMPOSITE","CHUNK","PCTVERSION","CACHE","IN_ROW","TABLESPACE_NAME","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENTS","MAX_EXTENTS","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","LOGGING","BUFFER_POOL") AS 
select o.name,
       decode(bitand(c.property, 1), 1, a.name, c.name),
       lo.name,
       po.subname,
       lpo.subname,
       lipo.subname,
       lf.frag#,
       'NO',
       lf.chunk * ts.blocksize,
       lf.pctversion$,
       decode(bitand(lf.fragflags,27), 1, 'NO', 2, 'NO', 8, 'CACHEREADS',
                                       16, 'CACHEREADS', 'YES'),
       decode(lf.fragpro, 0, 'NO', 'YES'),
       ts.name,
       to_char(s.iniexts * ts.blocksize),
       to_char(decode(bitand(ts.flags, 3), 1, to_number(NULL),
            s.extsize * ts.blocksize)),
       to_char(s.minexts),
       to_char(s.maxexts),
       to_char(decode(bitand(ts.flags, 3), 1, to_number(NULL),s.extpct)),
       to_char(decode(s.lists, 0, 1, s.lists)),
       to_char(decode(s.groups, 0, 1, s.groups)),
       decode(bitand(lf.fragflags, 18), 2, 'NO', 16, 'NO', 'YES'),
       decode(s.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL)
from   sys.obj$ o, sys.col$ c,
       sys.lob$ l, sys.obj$ lo,
       sys.lobfragv$ lf, sys.obj$ lpo,
       sys.obj$ po, sys.obj$ lipo,
       sys.partobj$ pobj,
       sys.ts$ ts, sys.seg$ s, attrcol$ a
where o.owner# = userenv('SCHEMAID')
  and pobj.obj# = o.obj#
  and mod(pobj.spare2, 256) = 0
  and o.obj# = c.obj#
  and c.obj# = l.obj#
  and c.intcol# = l.intcol#
  and l.lobj# = lo.obj#
  and l.lobj# = lf.parentobj#
  and lf.tabfragobj# = po.obj#
  and lf.fragobj# = lpo.obj#
  and lf.indfragobj# = lipo.obj#
  and lf.ts# = s.ts#
  and lf.file# = s.file#
  and lf.block# = s.block#
  and lf.ts# = ts.ts#
  and bitand(c.property,32768) != 32768           /* not unused column */
  and c.obj# = a.obj#(+) and c.intcol# = a.intcol#(+)
union all
select o.name,
       decode(bitand(c.property, 1), 1, a.name, c.name),
       lo.name,
       po.subname,
       lpo.subname,
       lipo.subname,
       lcp.part#,
       'YES',
       lcp.defchunk,
       lcp.defpctver$,
       decode(bitand(lcp.defflags,27), 1, 'NO', 2, 'NO', 8, 'CACHEREADS',
                                       16, 'CACHEREADS', 'YES'),
       decode(lcp.defpro, 0, 'NO', 'YES'),
       ts.name,
       decode(lcp.definiexts, NULL, 'DEFAULT', lcp.definiexts),
       decode(lcp.defextsize, NULL, 'DEFAULT', lcp.defextsize),
       decode(lcp.defminexts, NULL, 'DEFAULT', lcp.defminexts),
       decode(lcp.defmaxexts, NULL, 'DEFAULT', lcp.defmaxexts),
       decode(lcp.defextpct,  NULL, 'DEFAULT', lcp.defextpct),
       decode(lcp.deflists,   NULL, 'DEFAULT', lcp.deflists),
       decode(lcp.defgroups,  NULL, 'DEFAULT', lcp.defgroups),
       decode(bitand(lcp.defflags,22), 0,'NONE', 4,'YES', 2,'NO', 16,'NO', 'UNKNOWN'),
       decode(lcp.defbufpool, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL)
from   sys.obj$ o, sys.col$ c,
       sys.lob$ l, sys.obj$ lo,
       sys.lobcomppartv$ lcp, sys.obj$ lpo,
       sys.obj$ po, sys.obj$ lipo,
       sys.ts$ ts, partobj$ pobj, attrcol$ a
where o.owner# = userenv('SCHEMAID')
  and pobj.obj# = o.obj#
  and mod(pobj.spare2, 256) != 0
  and o.obj# = c.obj#
  and c.obj# = l.obj#
  and c.intcol# = l.intcol#
  and l.lobj# = lo.obj#
  and l.lobj# = lcp.lobj#
  and lcp.tabpartobj# = po.obj#
  and lcp.partobj# = lpo.obj#
  and lcp.indpartobj# = lipo.obj#
  and lcp.defts# = ts.ts# (+)
  and bitand(c.property,32768) != 32768           /* not unused column */
  and c.obj# = a.obj#(+) and c.intcol# = a.intcol#(+);

CREATE OR REPLACE FORCE VIEW "USER_LOB_SUBPARTITIONS"("TABLE_NAME","COLUMN_NAME","LOB_NAME","LOB_PARTITION_NAME","SUBPARTITION_NAME","LOB_SUBPARTITION_NAME","LOB_INDSUBPART_NAME","SUBPARTITION_POSITION","CHUNK","PCTVERSION","CACHE","IN_ROW","TABLESPACE_NAME","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENTS","MAX_EXTENTS","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","LOGGING","BUFFER_POOL") AS 
select o.name,
       decode(bitand(c.property, 1), 1, a.name, c.name),
       lo.name,
       lpo.subname,
       spo.subname,
       lspo.subname,
       lispo.subname,
       lf.frag#,
       lf.chunk * ts.blocksize,
       lf.pctversion$,
       decode(bitand(lf.fragflags,27), 1, 'NO', 2, 'NO', 8, 'CACHEREADS',
                                       16, 'CACHEREADS', 'YES'),
       decode(lf.fragpro, 0, 'NO', 'YES'),
       ts.name,
       s.iniexts * ts.blocksize,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
            s.extsize * ts.blocksize),
       s.minexts,
       s.maxexts,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),s.extpct),
       decode(s.lists, 0, 1, s.lists),
       decode(s.groups, 0, 1, s.groups),
       decode(bitand(lf.fragflags, 18), 2, 'NO', 16, 'NO', 'YES'),
       decode(s.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL)
from   sys.obj$ o, sys.col$ c,
       sys.lob$ l, sys.obj$ lo,
       sys.lobcomppartv$ lcp, sys.obj$ lpo,
       sys.lobfragv$ lf, sys.obj$ lspo,
       sys.obj$ spo, sys.obj$ lispo,
       sys.partobj$ pobj,
       sys.ts$ ts, sys.seg$ s, attrcol$ a
where o.owner# = userenv('SCHEMAID')
  and pobj.obj# = o.obj#
  and mod(pobj.spare2, 256) != 0
  and o.obj# = c.obj#
  and c.obj# = l.obj#
  and c.intcol# = l.intcol#
  and l.lobj# = lo.obj#
  and l.lobj# = lcp.lobj#
  and lcp.partobj# = lpo.obj#
  and lf.parentobj# = lcp.partobj#
  and lf.tabfragobj# = spo.obj#
  and lf.fragobj# = lspo.obj#
  and lf.indfragobj# = lispo.obj#
  and lf.ts# = s.ts#
  and lf.file# = s.file#
  and lf.block# = s.block#
  and lf.ts# = ts.ts#
  and bitand(c.property,32768) != 32768           /* not unused column */
  and c.obj# = a.obj#(+) and c.intcol# = a.intcol#(+);

CREATE OR REPLACE FORCE VIEW "USER_LOB_TEMPLATES"("TABLE_NAME","LOB_COL_NAME","SUBPARTITION_NAME","LOB_SEGMENT_NAME","TABLESPACE_NAME") AS 
select o.name, decode(bitand(c.property, 1), 1, ac.name, c.name),
       st.spart_name, lst.lob_spart_name, ts.name
from sys.obj$ o, sys.defsubpart$ st, sys.defsubpartlob$ lst, sys.ts$ ts,
     sys.col$ c, sys.attrcol$ ac
where o.obj# = lst.bo# and st.bo# = lst.bo# and
      st.spart_position =  lst.spart_position and
      lst.lob_spart_ts# = ts.ts#(+) and c.obj# = lst.bo# and
      c.intcol# = lst.intcol# and o.owner# = userenv('SCHEMAID') and
      lst.intcol# = ac.intcol#(+) and lst.bo# = ac.obj#(+);

CREATE OR REPLACE FORCE VIEW "USER_LOG_GROUPS"("OWNER","LOG_GROUP_NAME","TABLE_NAME","LOG_GROUP_TYPE","ALWAYS","GENERATED") AS 
select ou.name, oc.name, o.name,
       case c.type# when 14 then 'PRIMARY KEY LOGGING'
                    when 15 then 'UNIQUE KEY LOGGING'
                    when 16 then 'FOREIGN KEY LOGGING'
                    when 17 then 'ALL COLUMN LOGGING'
                    else 'USER LOG GROUP'
       end,
       case bitand(c.defer,64) when 64 then 'ALWAYS'
                               else  'CONDITIONAL'
       end,
       case bitand(c.defer,8) when 8 then 'GENERATED NAME'
                              else  'USER NAME'
       end
from sys.con$ oc,  sys.user$ ou,
     sys.obj$ o, sys.cdef$ c
where oc.owner# = ou.user#
  and oc.con# = c.con#
  and c.obj# = o.obj#
  and o.owner# = userenv('SCHEMAID')
  and
  (c.type# = 12 or c.type# = 14 or
   c.type# = 15 or c.type# = 16 or
   c.type# = 17);

CREATE OR REPLACE FORCE VIEW "USER_LOG_GROUP_COLUMNS"("OWNER","LOG_GROUP_NAME","TABLE_NAME","COLUMN_NAME","POSITION","LOGGING_PROPERTY") AS 
select u.name, c.name, o.name,
       decode(ac.name, null, col.name, ac.name), cc.pos#,
       decode(cc.spare1, 1, 'NO LOG', 'LOG')
from sys.user$ u, sys.con$ c, sys.col$ col, sys.ccol$ cc, sys.cdef$ cd,
     sys.obj$ o, sys.attrcol$ ac
where c.owner# = u.user#
  and c.con# = cd.con#
  and cd.type# = 12
  and cd.con# = cc.con#
  and cc.obj# = col.obj#
  and cc.intcol# = col.intcol#
  and cc.obj# = o.obj#
  and c.owner# = userenv('SCHEMAID')
  and col.obj# = ac.obj#(+)
  and col.intcol# = ac.intcol#(+);

CREATE OR REPLACE FORCE VIEW "USER_METHOD_PARAMS"("TYPE_NAME","METHOD_NAME","METHOD_NO","PARAM_NAME","PARAM_NO","PARAM_MODE","PARAM_TYPE_MOD","PARAM_TYPE_OWNER","PARAM_TYPE_NAME","CHARACTER_SET_NAME") AS 
select o.name, m.name, m.method#,
       p.name, p.parameter#,
       decode(bitand(p.properties, 768), 768, 'IN OUT',
              decode(bitand(p.properties, 256), 256, 'IN',
                     decode(bitand(p.properties, 512), 512, 'OUT'))),
       decode(bitand(p.properties, 32768), 32768, 'REF',
              decode(bitand(p.properties, 16384), 16384, 'POINTER')),
       decode(bitand(pt.properties, 64), 64, null, pu.name),
       decode(pt.typecode,
              52, decode(p.charsetform, 2, 'NVARCHAR2', po.name),
              53, decode(p.charsetform, 2, 'NCHAR', po.name),
              54, decode(p.charsetform, 2, 'NCHAR VARYING', po.name),
              61, decode(p.charsetform, 2, 'NCLOB', po.name),
              po.name),
       decode(p.charsetform, 1, 'CHAR_CS',
                             2, 'NCHAR_CS',
                             3, NLS_CHARSET_NAME(p.charsetid),
                             4, 'ARG:'||p.charsetid)
from sys.obj$ o, sys.method$ m, sys.parameter$ p,
     sys.obj$ po, sys.user$ pu, sys.type$ pt
where o.owner# = userenv('SCHEMAID')
  and o.type# <> 10 -- must not be invalid
  and o.oid$ = m.toid
  and o.subname IS NULL -- get the latest version only
  and m.toid = p.toid
  and m.version# = p.version#
  and m.method# = p.method#
  and p.param_toid = po.oid$
  and po.owner# = pu.user#
  and p.param_toid = pt.toid
  and p.param_version# = pt.version#;

CREATE OR REPLACE FORCE VIEW "USER_METHOD_RESULTS"("TYPE_NAME","METHOD_NAME","METHOD_NO","RESULT_TYPE_MOD","RESULT_TYPE_OWNER","RESULT_TYPE_NAME","CHARACTER_SET_NAME") AS 
select o.name, m.name, m.method#,
       decode(bitand(r.properties, 32768), 32768, 'REF',
              decode(bitand(r.properties, 16384), 16384, 'POINTER')),
       decode(bitand(rt.properties, 64), 64, null, ru.name),
       decode(rt.typecode,
              52, decode(r.charsetform, 2, 'NVARCHAR2', ro.name),
              53, decode(r.charsetform, 2, 'NCHAR', ro.name),
              54, decode(r.charsetform, 2, 'NCHAR VARYING', ro.name),
              61, decode(r.charsetform, 2, 'NCLOB', ro.name),
              ro.name),
       decode(r.charsetform, 1, 'CHAR_CS',
                             2, 'NCHAR_CS',
                             3, NLS_CHARSET_NAME(r.charsetid),
                             4, 'ARG:'||r.charsetid)
from sys.obj$ o, sys.method$ m, sys.result$ r,
     sys.obj$ ro, sys.user$ ru, sys.type$ rt
where o.owner# = userenv('SCHEMAID')
  and o.type# <> 10 -- must not be invalid
  and o.oid$ = m.toid
  and o.subname IS NULL -- get the latest version only
  and m.toid = r.toid
  and m.version# = r.version#
  and m.method# = r.method#
  and r.result_toid = ro.oid$
  and ro.owner# = ru.user#
  and r.result_toid = rt.toid
  and r.result_version# = rt.version#;

CREATE OR REPLACE FORCE VIEW "USER_MVIEWS"("OWNER","MVIEW_NAME","CONTAINER_NAME","QUERY","QUERY_LEN","UPDATABLE","UPDATE_LOG","MASTER_ROLLBACK_SEG","MASTER_LINK","REWRITE_ENABLED","REWRITE_CAPABILITY","REFRESH_MODE","REFRESH_METHOD","BUILD_MODE","FAST_REFRESHABLE","LAST_REFRESH_TYPE","LAST_REFRESH_DATE","STALENESS","AFTER_FAST_REFRESH","UNKNOWN_PREBUILT","UNKNOWN_PLSQL_FUNC","UNKNOWN_EXTERNAL_TABLE","UNKNOWN_CONSIDER_FRESH","UNKNOWN_IMPORT","UNKNOWN_TRUSTED_FD","COMPILE_STATE","USE_NO_INDEX","STALE_SINCE") AS 
select m."OWNER",m."MVIEW_NAME",m."CONTAINER_NAME",m."QUERY",m."QUERY_LEN",m."UPDATABLE",m."UPDATE_LOG",m."MASTER_ROLLBACK_SEG",m."MASTER_LINK",m."REWRITE_ENABLED",m."REWRITE_CAPABILITY",m."REFRESH_MODE",m."REFRESH_METHOD",m."BUILD_MODE",m."FAST_REFRESHABLE",m."LAST_REFRESH_TYPE",m."LAST_REFRESH_DATE",m."STALENESS",m."AFTER_FAST_REFRESH",m."UNKNOWN_PREBUILT",m."UNKNOWN_PLSQL_FUNC",m."UNKNOWN_EXTERNAL_TABLE",m."UNKNOWN_CONSIDER_FRESH",m."UNKNOWN_IMPORT",m."UNKNOWN_TRUSTED_FD",m."COMPILE_STATE",m."USE_NO_INDEX",m."STALE_SINCE" from dba_mviews m, sys.user$ u
where u.user# = userenv('SCHEMAID')
  and m.owner = u.name;

CREATE OR REPLACE FORCE VIEW "USER_MVIEW_AGGREGATES"("OWNER","MVIEW_NAME","POSITION_IN_SELECT","CONTAINER_COLUMN","AGG_FUNCTION","DISTINCTFLAG","MEASURE") AS 
select u.name, o.name, sa.sumcolpos#, c.name,
       decode(sa.aggfunction, 15, 'AVG', 16, 'SUM', 17, 'COUNT',
                              18, 'MIN', 19, 'MAX',
                              97, 'VARIANCE', 98, 'STDDEV',
                              440, 'USER'),
       decode(sa.flags, 0, 'N', 'Y'),
       sa.aggtext
from sys.sumagg$ sa, sys.obj$ o, sys.user$ u, sys.sum$ s, sys.col$ c
where sa.sumobj# = o.obj#
  AND o.owner# = u.user#
  AND sa.sumobj# = s.obj#
  AND c.obj# = s.containerobj#
  AND c.col# = sa.containercol#
  AND o.owner# = userenv('SCHEMAID')
  AND bitand(s.xpflags, 8388608) = 0 /* NOT REWRITE EQUIVALENCE SUMMARY */;

CREATE OR REPLACE FORCE VIEW "USER_MVIEW_ANALYSIS"("OWNER","MVIEW_NAME","MVIEW_TABLE_OWNER","CONTAINER_NAME","LAST_REFRESH_SCN","LAST_REFRESH_DATE","REFRESH_METHOD","SUMMARY","FULLREFRESHTIM","INCREFRESHTIM","CONTAINS_VIEWS","UNUSABLE","RESTRICTED_SYNTAX","INC_REFRESHABLE","KNOWN_STALE","INVALID","REWRITE_ENABLED","QUERY_LEN","QUERY","REVISION") AS 
select u.name, o.name, u.name, s.containernam,
       s.lastrefreshscn, s.lastrefreshdate,
       decode (s.refreshmode, 0, 'NEVER', 1, 'FORCE', 2, 'FAST', 3,'COMPLETE'),
       decode(bitand(s.pflags, 25165824), 25165824, 'N', 'Y'),
       s.fullrefreshtim, s.increfreshtim,
       decode(bitand(s.pflags, 48), 0, 'N', 'Y'),
       decode(bitand(s.mflags, 64), 0, 'N', 'Y'), /* QSMQSUM_UNUSABLE */
       decode(bitand(s.pflags, 1294319), 0, 'Y', 'N'),
       decode(bitand(s.pflags, 236879743), 0, 'Y', 'N'),
       decode(bitand(s.mflags, 1), 0, 'N', 'Y'), /* QSMQSUM_KNOWNSTL */
       decode(o.status, 5, 'Y', 'N'),
       decode(bitand(s.mflags, 4), 0, 'Y', 'N'), /* QSMQSUM_DISABLED */
       s.sumtextlen,s.sumtext,
       s.metaversion/* Metadata revision number */
from sys.user$ u, sys.sum$ s, sys.obj$ o
where o.owner# = u.user#
  and o.obj# = s.obj#
  and o.owner# = userenv('SCHEMAID')
  and bitand(s.xpflags, 8388608) = 0 /* NOT REWRITE EQUIVALENCE SUMMARY */;

CREATE OR REPLACE FORCE VIEW "USER_MVIEW_COMMENTS"("MVIEW_NAME","COMMENTS") AS 
select o.name, c.comment$
from sys.obj$ o, sys.com$ c, sys.tab$ t
  where o.owner# = userenv('SCHEMAID')
  and o.type# = 2
  and (bitand(t.property, 67108864) = 67108864)         /*mv container table */
  and o.obj# = c.obj#(+)
  and c.col#(+) is NULL
  and o.obj# = t.obj#;

CREATE OR REPLACE FORCE VIEW "USER_MVIEW_DETAIL_RELATIONS"("OWNER","MVIEW_NAME","DETAILOBJ_OWNER","DETAILOBJ_NAME","DETAILOBJ_TYPE","DETAILOBJ_ALIAS") AS 
select u.name, o.name, du.name,  do.name,
       decode (sd.detailobjtype, 1, 'TABLE', 2, 'VIEW',
                                3, 'SNAPSHOT', 4, 'CONTAINER', 'UNDEFINED'),
       sd.detailalias
from sys.user$ u, sys.sumdetail$ sd, sys.obj$ o, sys.obj$ do,
sys.user$ du, sys.sum$ s
where o.owner# = u.user#
  and o.obj# = sd.sumobj#
  and do.obj# = sd.detailobj#
  and do.owner# = du.user#
  and o.owner# = userenv('SCHEMAID')
  and s.obj# = sd.sumobj#
  and bitand(s.xpflags, 8388608) = 0 /* NOT REWRITE EQUIVALENCE SUMMARY */;

CREATE OR REPLACE FORCE VIEW "USER_MVIEW_JOINS"("OWNER","MVIEW_NAME","DETAILOBJ1_OWNER","DETAILOBJ1_RELATION","DETAILOBJ1_COLUMN","OPERATOR","OPERATOR_TYPE","DETAILOBJ2_OWNER","DETAILOBJ2_RELATION","DETAILOBJ2_COLUMN") AS 
select u.name, o.name,
       u1.name, o1.name, c1.name, '=',
       decode(sj.flags, 0, 'I', 1, 'L', 2, 'R'),
       u2.name, o2.name, c2.name
from sys.sumjoin$ sj, sys.obj$ o, sys.user$ u,
     sys.obj$ o1, sys.user$ u1, sys.col$ c1,
     sys.obj$ o2, sys.user$ u2, sys.col$ c2,
     sys.sum$ s
where sj.sumobj# = o.obj#
  AND o.owner# = u.user#
  AND sj.tab1obj# = o1.obj#
  AND o1.owner# = u1.user#
  AND sj.tab1obj# = c1.obj#
  AND sj.tab1col# = c1.intcol#
  AND sj.tab2obj# = o2.obj#
  AND o2.owner# = u2.user#
  AND sj.tab2obj# = c2.obj#
  AND sj.tab2col# = c2.intcol#
  AND o.owner# = userenv('SCHEMAID')
  AND s.obj# = sj.sumobj#
  AND bitand(s.xpflags, 8388608) = 0 /* NOT REWRITE EQUIVALENCE SUMMARY */;

CREATE OR REPLACE FORCE VIEW "USER_MVIEW_KEYS"("OWNER","MVIEW_NAME","POSITION_IN_SELECT","CONTAINER_COLUMN","DETAILOBJ_OWNER","DETAILOBJ_NAME","DETAILOBJ_ALIAS","DETAILOBJ_TYPE","DETAILOBJ_COLUMN") AS 
select u1.name, o1.name, sk.sumcolpos#, c1.name,
       u2.name, o2.name, sd.detailalias,
       decode(sk.detailobjtype, 1, 'TABLE', 2, 'VIEW'), c2.name
from sys.sumkey$ sk, sys.obj$ o1, sys.user$ u1, sys.col$ c1, sys.sum$ s,
     sys.sumdetail$ sd, sys.obj$ o2, sys.user$ u2, sys.col$ c2
where sk.sumobj# = o1.obj#
  AND o1.owner# = u1.user#
  AND sk.sumobj# = s.obj#
  AND s.containerobj# = c1.obj#
  AND c1.col# = sk.containercol#
  AND sk.detailobj# = o2.obj#
  AND o2.owner# = u2.user#
  AND sk.sumobj# = sd.sumobj#
  AND sk.detailobj# = sd.detailobj#
  AND sk.detailobj# = c2.obj#
  AND sk.detailcol# = c2.intcol#
  AND o1.owner# = userenv('SCHEMAID')
  AND bitand(s.xpflags, 8388608) = 0 /* NOT REWRITE EQUIVALENCE SUMMARY */;

CREATE OR REPLACE FORCE VIEW "USER_MVIEW_LOGS"("LOG_OWNER","MASTER","LOG_TABLE","LOG_TRIGGER","ROWIDS","PRIMARY_KEY","OBJECT_ID","FILTER_COLUMNS","SEQUENCE","INCLUDE_NEW_VALUES") AS 
select s."LOG_OWNER",s."MASTER",s."LOG_TABLE",s."LOG_TRIGGER",s."ROWIDS",s."PRIMARY_KEY",s."OBJECT_ID",s."FILTER_COLUMNS",s."SEQUENCE",s."INCLUDE_NEW_VALUES" from dba_mview_logs s, sys.user$ u
where s.log_owner = u.name
  and u.user# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_MVIEW_REFRESH_TIMES"("OWNER","NAME","MASTER_OWNER","MASTER","LAST_REFRESH") AS 
select s."OWNER",s."NAME",s."MASTER_OWNER",s."MASTER",s."LAST_REFRESH" from dba_mview_refresh_times s, sys.user$ u
where u.user# = userenv('SCHEMAID')
  and s.owner = u.name;

CREATE OR REPLACE FORCE VIEW "USER_NESTED_TABLES"("TABLE_NAME","TABLE_TYPE_OWNER","TABLE_TYPE_NAME","PARENT_TABLE_NAME","PARENT_TABLE_COLUMN","STORAGE_SPEC","RETURN_TYPE","ELEMENT_SUBSTITUTABLE") AS 
select distinct o.name,
       nvl2(ct.synobj#, (select u.name from user$ u, obj$ o
            where o.owner#=u.user# and o.obj#=ct.synobj#), ut.name),
       nvl2(ct.synobj#, (select o.name from obj$ o
            where o.obj#=ct.synobj#), ot.name),
       op.name, ac.name,
       lpad(decode(bitand(ct.flags, 64), 64, 'USER_SPECIFIED', 'DEFAULT'), 30),
       lpad(decode(bitand(ct.flags, 32), 32, 'LOCATOR', 'VALUE'), 20),
       lpad((case when bitand(ct.flags, 5120)=0 and bitand(t.properties, 8)= 8
       then 'Y' else 'N' end), 25)
from sys.ntab$ n, sys.obj$ o, sys.obj$ op, sys.obj$ ot,
  sys.col$ c, sys.coltype$ ct, sys.user$ u, sys.user$ ut, sys.attrcol$ ac,
  sys.type$ t, sys.collection$ cl
where o.owner# = userenv('SCHEMAID')
  and op.owner# = userenv('SCHEMAID')
  and n.obj# = op.obj#
  and n.ntab# = o.obj#
  and c.obj# = op.obj#
  and n.intcol# = c.intcol#
  and c.obj# = ac.obj#
  and c.intcol# = ac.intcol#
  and op.obj# = ct.obj#
  and ct.toid = ot.oid$
  and ct.intcol#=n.intcol#
  and ot.owner# = ut.user#
  and ct.toid=cl.toid
  and cl.elem_toid=t.tvoid
  and bitand(ct.flags,4)=4
  and bitand(c.property,32768) != 32768           /* not unused column */
union all
select o.name,
       nvl2(ct.synobj#, (select u.name from user$ u, obj$ o
            where o.owner#=u.user# and o.obj#=ct.synobj#), ut.name),
       nvl2(ct.synobj#, (select o.name from obj$ o
            where o.obj#=ct.synobj#), ot.name),
       op.name, c.name,
       lpad(decode(bitand(ct.flags, 64), 64, 'USER_SPECIFIED', 'DEFAULT'), 30),
       lpad(decode(bitand(ct.flags, 32), 32, 'LOCATOR', 'VALUE'), 20),
       lpad((case when bitand(ct.flags, 5120)=0 and bitand(t.properties, 8)= 8
       then 'Y' else 'N' end), 25)
from sys.ntab$ n, sys.obj$ o, sys.obj$ op, sys.obj$ ot,
  sys.col$ c, sys.coltype$ ct, sys.user$ ut, sys.type$ t, sys.collection$ cl
where o.owner# = userenv('SCHEMAID')
  and op.owner# = userenv('SCHEMAID')
  and  n.obj# = op.obj#
  and n.ntab# = o.obj#
  and c.obj# = op.obj#
  and n.intcol# = c.intcol#
  and bitand(c.property,1)=0
  and op.obj# = ct.obj#
  and ct.toid = ot.oid$
  and ct.intcol#=n.intcol#
  and ot.owner# = ut.user#
  and ct.toid=cl.toid
  and cl.elem_toid=t.tvoid
  and bitand(ct.flags,4)=4
  and bitand(c.property,32768) != 32768           /* not unused column */;

CREATE OR REPLACE FORCE VIEW "USER_NESTED_TABLE_COLS"("TABLE_NAME","COLUMN_NAME","DATA_TYPE","DATA_TYPE_MOD","DATA_TYPE_OWNER","DATA_LENGTH","DATA_PRECISION","DATA_SCALE","NULLABLE","COLUMN_ID","DEFAULT_LENGTH","DATA_DEFAULT","NUM_DISTINCT","LOW_VALUE","HIGH_VALUE","DENSITY","NUM_NULLS","NUM_BUCKETS","LAST_ANALYZED","SAMPLE_SIZE","CHARACTER_SET_NAME","CHAR_COL_DECL_LENGTH","GLOBAL_STATS","USER_STATS","AVG_COL_LEN","CHAR_LENGTH","CHAR_USED","V80_FMT_IMAGE","DATA_UPGRADED","HIDDEN_COLUMN","VIRTUAL_COLUMN","SEGMENT_COLUMN_ID","INTERNAL_COLUMN_ID","HISTOGRAM","QUALIFIED_COL_NAME") AS 
select o.name,
       c.name,
       decode(c.type#, 1, decode(c.charsetform, 2, 'NVARCHAR2', 'VARCHAR2'),
                       2, decode(c.scale, null,
                                 decode(c.precision#, null, 'NUMBER', 'FLOAT'),
                                 'NUMBER'),
                       8, 'LONG',
                       9, decode(c.charsetform, 2, 'NCHAR VARYING', 'VARCHAR'),
                       12, 'DATE',
                       23, 'RAW', 24, 'LONG RAW',
                       58, nvl2(ac.synobj#, (select o.name from obj$ o
                                where o.obj#=ac.synobj#), ot.name),
                       69, 'ROWID',
                       96, decode(c.charsetform, 2, 'NCHAR', 'CHAR'),
                       100, 'BINARY_FLOAT',
                       101, 'BINARY_DOUBLE',
                       105, 'MLSLABEL',
                       106, 'MLSLABEL',
                       111, nvl2(ac.synobj#, (select o.name from obj$ o
                                 where o.obj#=ac.synobj#), ot.name),
                       112, decode(c.charsetform, 2, 'NCLOB', 'CLOB'),
                       113, 'BLOB', 114, 'BFILE', 115, 'CFILE',
                       121, nvl2(ac.synobj#, (select o.name from obj$ o
                                 where o.obj#=ac.synobj#), ot.name),
                       122, nvl2(ac.synobj#, (select o.name from obj$ o
                                 where o.obj#=ac.synobj#), ot.name),
                       123, nvl2(ac.synobj#, (select o.name from obj$ o
                                 where o.obj#=ac.synobj#), ot.name),
                       178, 'TIME(' ||c.scale|| ')',
                       179, 'TIME(' ||c.scale|| ')' || ' WITH TIME ZONE',
                       180, 'TIMESTAMP(' ||c.scale|| ')',
                       181, 'TIMESTAMP(' ||c.scale|| ')' || ' WITH TIME ZONE',
                       231, 'TIMESTAMP(' ||c.scale|| ')' || ' WITH LOCAL TIME ZONE',
                       182, 'INTERVAL YEAR(' ||c.precision#||') TO MONTH',
                       183, 'INTERVAL DAY(' ||c.precision#||') TO SECOND(' ||
                             c.scale || ')',
                       208, 'UROWID',
                       'UNDEFINED'),
       decode(c.type#, 111, 'REF'),
       nvl2(ac.synobj#, (select u.name from user$ u, obj$ o
            where o.owner#=u.user# and o.obj#=ac.synobj#), ut.name),
       c.length, c.precision#, c.scale,
       decode(sign(c.null$),-1,'D', 0, 'Y', 'N'),
       decode(c.col#, 0, to_number(null), c.col#), c.deflength,
       c.default$, h.distcnt, h.lowval, h.hival, h.density, h.null_cnt,
       case when h.bucket_cnt > 255 then h.row_cnt else
         decode(h.row_cnt, h.distcnt, h.row_cnt, h.bucket_cnt)
       end,
       h.timestamp#, h.sample_size,
       decode(c.charsetform, 1, 'CHAR_CS',
                             2, 'NCHAR_CS',
                             3, NLS_CHARSET_NAME(c.charsetid),
                             4, 'ARG:'||c.charsetid),
       decode(c.charsetid, 0, to_number(NULL),
                           nls_charset_decl_len(c.length, c.charsetid)),
       decode(bitand(h.spare2, 2), 2, 'YES', 'NO'),
       decode(bitand(h.spare2, 1), 1, 'YES', 'NO'),
       h.avgcln,
       c.spare3,
       decode(c.type#, 1, decode(bitand(c.property, 8388608), 0, 'B', 'C'),
                      96, decode(bitand(c.property, 8388608), 0, 'B', 'C'),
                      null),
       decode(bitand(ac.flags, 128), 128, 'YES', 'NO'),
       decode(o.status, 1, decode(bitand(ac.flags, 256), 256, 'NO', 'YES'),
                        decode(bitand(ac.flags, 2), 2, 'NO',
                               decode(bitand(ac.flags, 4), 4, 'NO',
                                      decode(bitand(ac.flags, 8), 8, 'NO',
                                             'N/A')))),
       decode(c.property, 0, 'NO', decode(bitand(c.property, 32), 32, 'YES',
                                          'NO')),
       decode(c.property, 0, 'NO', decode(bitand(c.property, 8), 8, 'YES',
                                          'NO')),
       decode(c.segcol#, 0, to_number(null), c.segcol#), c.intcol#,
       case when h.bucket_cnt > 255 then 'FREQUENCY' else
         decode(nvl(h.row_cnt, 0), 0, 'NONE',
                                   h.distcnt, 'FREQUENCY', 'HEIGHT BALANCED')
       end,
       decode(bitand(c.property, 1024), 1024,
              (select decode(bitand(cl.property, 1), 1, rc.name, cl.name)
               from sys.col$ cl, attrcol$ rc where cl.intcol# = c.intcol#-1
               and cl.obj# = c.obj# and c.obj# = rc.obj#(+) and
               cl.intcol# = rc.intcol#(+)),
              decode(bitand(c.property, 1), 0, c.name,
                     (select tc.name from sys.attrcol$ tc
                      where c.obj# = tc.obj# and c.intcol# = tc.intcol#)))
from sys.col$ c, sys.obj$ o, sys.hist_head$ h, sys.coltype$ ac, sys.obj$ ot,
     sys.user$ ut, sys.tab$ t
where o.obj# = c.obj#
  and o.owner# = userenv('SCHEMAID')
  and c.obj# = h.obj#(+) and c.intcol# = h.intcol#(+)
  and c.obj# = ac.obj#(+) and c.intcol# = ac.intcol#(+)
  and ac.toid = ot.oid$(+)
  and ot.type#(+) = 13
  and ot.owner# = ut.user#(+)
  and o.obj# = t.obj#
  and bitand(t.property, 8192) = 8192           /* nested tables */;

CREATE OR REPLACE FORCE VIEW "USER_OBJECTS"("OBJECT_NAME","SUBOBJECT_NAME","OBJECT_ID","DATA_OBJECT_ID","OBJECT_TYPE","CREATED","LAST_DDL_TIME","TIMESTAMP","STATUS","TEMPORARY","GENERATED","SECONDARY") AS 
select o.name, o.subname, o.obj#, o.dataobj#,
       decode(o.type#, 0, 'NEXT OBJECT', 1, 'INDEX', 2, 'TABLE', 3, 'CLUSTER',
                      4, 'VIEW', 5, 'SYNONYM', 6, 'SEQUENCE',
                      7, 'PROCEDURE', 8, 'FUNCTION', 9, 'PACKAGE',
                      11, 'PACKAGE BODY', 12, 'TRIGGER',
                      13, 'TYPE', 14, 'TYPE BODY',
                      19, 'TABLE PARTITION', 20, 'INDEX PARTITION', 21, 'LOB',
                      22, 'LIBRARY', 23, 'DIRECTORY',  24, 'QUEUE',
                      28, 'JAVA SOURCE', 29, 'JAVA CLASS', 30, 'JAVA RESOURCE',
                      32, 'INDEXTYPE', 33, 'OPERATOR',
                      34, 'TABLE SUBPARTITION', 35, 'INDEX SUBPARTITION',
                      40, 'LOB PARTITION', 41, 'LOB SUBPARTITION',
                      42, NVL((SELECT distinct 'REWRITE EQUIVALENCE'
                               FROM sum$ s
                               WHERE s.obj#=o.obj#
                                     and bitand(s.xpflags, 8388608) = 8388608),
                              'MATERIALIZED VIEW'),
                      43, 'DIMENSION',
                      44, 'CONTEXT', 46, 'RULE SET', 47, 'RESOURCE PLAN',
                      48, 'CONSUMER GROUP',
                      51, 'SUBSCRIPTION', 52, 'LOCATION',
                      55, 'XML SCHEMA', 56, 'JAVA DATA',
                      57, 'SECURITY PROFILE', 59, 'RULE',
                      60, 'CAPTURE', 61, 'APPLY',
                      62, 'EVALUATION CONTEXT',
                      66, 'JOB', 67, 'PROGRAM', 68, 'JOB CLASS', 69, 'WINDOW',
                      72, 'WINDOW GROUP', 74, 'SCHEDULE',
                     'UNDEFINED'),
       o.ctime, o.mtime,
       to_char(o.stime, 'YYYY-MM-DD:HH24:MI:SS'),
       decode(o.status, 0, 'N/A', 1, 'VALID', 'INVALID'),
       decode(bitand(o.flags, 2), 0, 'N', 2, 'Y', 'N'),
       decode(bitand(o.flags, 4), 0, 'N', 4, 'Y', 'N'),
       decode(bitand(o.flags, 16), 0, 'N', 16, 'Y', 'N')
from sys.obj$ o
where o.owner# = userenv('SCHEMAID')
  and o.linkname is null
  and (o.type# not in (1  /* INDEX - handled below */,
                      10 /* NON-EXISTENT */)
       or
       (o.type# = 1 and 1 = (select 1
                             from sys.ind$ i
                            where i.obj# = o.obj#
                              and i.type# in (1, 2, 3, 4, 6, 7, 9))))
  and o.name != '_NEXT_OBJECT'
  and o.name != '_default_auditing_options_'
union all
select l.name, NULL, to_number(null), to_number(null),
       'DATABASE LINK',
       l.ctime, to_date(null), NULL, 'VALID', 'N', 'N', 'N'
from sys.link$ l
where l.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_OBJECT_SIZE"("NAME","TYPE","SOURCE_SIZE","PARSED_SIZE","CODE_SIZE","ERROR_SIZE") AS 
select o.name,
  decode(o.type#, 2, 'TABLE', 4, 'VIEW', 5, 'SYNONYM', 6, 'SEQUENCE',
    7, 'PROCEDURE', 8, 'FUNCTION', 9, 'PACKAGE', 11, 'PACKAGE BODY',
    13, 'TYPE', 14, 'TYPE BODY',
    28, 'JAVA SOURCE', 29, 'JAVA CLASS', 30, 'JAVA RESOURCE', 56, 'JAVA DATA',
    'UNDEFINED'),
  nvl(s.bytes,0), nvl(p.bytes,0), nvl(c.bytes,0), nvl(e.bytes,0)
  from sys.obj$ o,
    sys.source_size s, sys.parsed_size p, sys.code_size c, sys.error_size e
  where o.type# in (2, 4, 5, 6, 7, 8, 9, 11, 28, 29, 30, 56)
    and o.owner# = userenv('SCHEMAID')
    and o.obj# = s.obj# (+)
    and o.obj# = p.obj# (+)
    and o.obj# = c.obj# (+)
    and o.obj# = e.obj# (+)
    and nvl(s.bytes,0) + nvl(p.bytes,0) + nvl(c.bytes,0) + nvl(e.bytes,0) > 0;

CREATE OR REPLACE FORCE VIEW "USER_OBJECT_TABLES"("TABLE_NAME","TABLESPACE_NAME","CLUSTER_NAME","IOT_NAME","PCT_FREE","PCT_USED","INI_TRANS","MAX_TRANS","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENTS","MAX_EXTENTS","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","LOGGING","BACKED_UP","NUM_ROWS","BLOCKS","EMPTY_BLOCKS","AVG_SPACE","CHAIN_CNT","AVG_ROW_LEN","AVG_SPACE_FREELIST_BLOCKS","NUM_FREELIST_BLOCKS","DEGREE","INSTANCES","CACHE","TABLE_LOCK","SAMPLE_SIZE","LAST_ANALYZED","PARTITIONED","IOT_TYPE","OBJECT_ID_TYPE","TABLE_TYPE_OWNER","TABLE_TYPE","TEMPORARY","SECONDARY","NESTED","BUFFER_POOL","ROW_MOVEMENT","GLOBAL_STATS","USER_STATS","DURATION","SKIP_CORRUPT","MONITORING","CLUSTER_OWNER","DEPENDENCIES","COMPRESSION","DROPPED") AS 
select o.name, decode(bitand(t.property, 2151678048), 0, ts.name, null),
       decode(bitand(t.property, 1024), 0, null, co.name),
       decode((bitand(t.property, 512)+bitand(t.flags, 536870912)),
              0, null, co.name),
       decode(bitand(t.property, 32+64), 0, mod(t.pctfree$, 100), 64, 0, null),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
          decode(bitand(t.property, 32+64), 0, t.pctused$, 64, 0, null)),
       decode(bitand(t.property, 32), 0, t.initrans, null),
       decode(bitand(t.property, 32), 0, t.maxtrans, null),
       s.iniexts * ts.blocksize,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extsize * ts.blocksize),
       s.minexts, s.maxexts,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extpct),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
         decode(bitand(o.flags, 2), 2, 1, decode(s.lists, 0, 1, s.lists))),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
         decode(bitand(o.flags, 2), 2, 1, decode(s.groups, 0, 1, s.groups))),
       decode(bitand(t.property, 32), 32, null,
                decode(bitand(t.flags, 32), 0, 'YES', 'NO')),
       decode(bitand(t.flags,1), 0, 'Y', 1, 'N', '?'),
       t.rowcnt,
       decode(bitand(t.property, 64), 0, t.blkcnt, null),
       decode(bitand(t.property, 64), 0, t.empcnt, null),
       decode(bitand(t.property, 64), 0, t.avgspc, null),
       t.chncnt, t.avgrln, t.avgspc_flb,
       decode(bitand(t.property, 64), 0, t.flbcnt, null),
       lpad(decode(t.degree, 32767, 'DEFAULT', nvl(t.degree,1)),10),
       lpad(decode(t.instances, 32767, 'DEFAULT', nvl(t.instances,1)),10),
       lpad(decode(bitand(t.flags, 8), 8, 'Y', 'N'),5),
       decode(bitand(t.flags, 6), 0, 'ENABLED', 'DISABLED'),
       t.samplesize, t.analyzetime,
       decode(bitand(t.property, 32), 32, 'YES', 'NO'),
       decode(bitand(t.property, 64), 64, 'IOT',
               decode(bitand(t.property, 512), 512, 'IOT_OVERFLOW',
               decode(bitand(t.flags, 536870912), 536870912, 'IOT_MAPPING', null))),
       decode(bitand(t.property, 4096), 4096, 'USER-DEFINED',
                                              'SYSTEM GENERATED'),
       nvl2(ac.synobj#, su.name, tu.name),
       nvl2(ac.synobj#, so.name, ty.name),
       decode(bitand(o.flags, 2), 0, 'N', 2, 'Y', 'N'),
       decode(bitand(o.flags, 16), 0, 'N', 16, 'Y', 'N'),
       decode(bitand(t.property, 8192), 8192, 'YES', 'NO'),
       decode(bitand(o.flags, 2), 2, 'DEFAULT',
             decode(s.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL)),
       decode(bitand(t.flags, 131072), 131072, 'ENABLED', 'DISABLED'),
       decode(bitand(t.flags, 512), 0, 'NO', 'YES'),
       decode(bitand(t.flags, 256), 0, 'NO', 'YES'),
       decode(bitand(o.flags, 2), 0, NULL,
          decode(bitand(t.property, 8388608), 8388608,
                 'SYS$SESSION', 'SYS$TRANSACTION')),
       decode(bitand(t.flags, 1024), 1024, 'ENABLED', 'DISABLED'),
       decode(bitand(o.flags, 2), 2, 'NO',
           decode(bitand(t.property, 2147483648), 2147483648, 'NO',
              decode(ksppcv.ksppstvl, 'TRUE', 'YES', 'NO'))),
       decode(bitand(t.property, 1024), 0, null, cu.name),
       decode(bitand(t.flags, 8388608), 8388608, 'ENABLED', 'DISABLED'),
       decode(bitand(t.property, 32), 32, null,
                decode(bitand(s.spare1, 2048), 2048, 'ENABLED', 'DISABLED')),
       decode(bitand(o.flags, 128), 128, 'YES', 'NO')
from sys.ts$ ts, sys.seg$ s, sys.obj$ co, sys.tab$ t, sys.obj$ o,
     sys.coltype$ ac, sys.obj$ ty, sys.user$ tu, sys.col$ tc,
     sys.obj$ cx, sys.user$ cu, sys.obj$ so, sys.user$ su,
     x$ksppcv ksppcv, x$ksppi ksppi
where o.owner# = userenv('SCHEMAID')
  and o.obj# = t.obj#
  and bitand(t.property, 1) = 1
  and bitand(o.flags, 128) = 0
  and t.obj# = tc.obj#
  and tc.name = 'SYS_NC_ROWINFO$'
  and tc.obj# = ac.obj#
  and tc.intcol# = ac.intcol#
  and ac.toid = ty.oid$
  and ty.type# <> 10
  and ty.owner# = tu.user#
  and t.bobj# = co.obj# (+)
  and t.ts# = ts.ts#
  and t.file# = s.file# (+)
  and t.block# = s.block# (+)
  and t.ts# = s.ts# (+)
  and t.dataobj# = cx.obj# (+)
  and cx.owner# = cu.user# (+)
  and ac.synobj# = so.obj# (+)
  and so.owner# = su.user# (+)
  and ksppi.indx = ksppcv.indx
  and ksppi.ksppinm = '_dml_monitoring_enabled';

CREATE OR REPLACE FORCE VIEW "USER_OBJ_AUDIT_OPTS"("OBJECT_NAME","OBJECT_TYPE","ALT","AUD","COM","DEL","GRA","IND","INS","LOC","REN","SEL","UPD","REF","EXE","CRE","REA","WRI","FBK") AS 
select o.name, 'TABLE',
       substr(t.audit$, 1, 1) || '/' || substr(t.audit$, 2, 1),
       substr(t.audit$, 3, 1) || '/' || substr(t.audit$, 4, 1),
       substr(t.audit$, 5, 1) || '/' || substr(t.audit$, 6, 1),
       substr(t.audit$, 7, 1) || '/' || substr(t.audit$, 8, 1),
       substr(t.audit$, 9, 1) || '/' || substr(t.audit$, 10, 1),
       substr(t.audit$, 11, 1) || '/' || substr(t.audit$, 12, 1),
       substr(t.audit$, 13, 1) || '/' || substr(t.audit$, 14, 1),
       substr(t.audit$, 15, 1) || '/' || substr(t.audit$, 16, 1),
       substr(t.audit$, 17, 1) || '/' || substr(t.audit$, 18, 1),
       substr(t.audit$, 19, 1) || '/' || substr(t.audit$, 20, 1),
       substr(t.audit$, 21, 1) || '/' || substr(t.audit$, 22, 1),
       '-/-',                                            /* dummy REF column */
       substr(t.audit$, 25, 1) || '/' || substr(t.audit$, 26, 1),
       substr(t.audit$, 27, 1) || '/' || substr(t.audit$, 28, 1),
       substr(t.audit$, 29, 1) || '/' || substr(t.audit$, 30, 1),
       substr(t.audit$, 31, 1) || '/' || substr(t.audit$, 32, 1),
       substr(t.audit$, 23, 1) || '/' || substr(t.audit$, 24, 1)
from sys.obj$ o, sys.tab$ t
where o.type# = 2
  and not (o.owner# = 0 and o.name = '_default_auditing_options_')
  and o.owner# = userenv('SCHEMAID')
  and o.obj# = t.obj#
union all
select o.name, 'VIEW',
       substr(v.audit$, 1, 1) || '/' || substr(v.audit$, 2, 1),
       substr(v.audit$, 3, 1) || '/' || substr(v.audit$, 4, 1),
       substr(v.audit$, 5, 1) || '/' || substr(v.audit$, 6, 1),
       substr(v.audit$, 7, 1) || '/' || substr(v.audit$, 8, 1),
       substr(v.audit$, 9, 1) || '/' || substr(v.audit$, 10, 1),
       substr(v.audit$, 11, 1) || '/' || substr(v.audit$, 12, 1),
       substr(v.audit$, 13, 1) || '/' || substr(v.audit$, 14, 1),
       substr(v.audit$, 15, 1) || '/' || substr(v.audit$, 16, 1),
       substr(v.audit$, 17, 1) || '/' || substr(v.audit$, 18, 1),
       substr(v.audit$, 19, 1) || '/' || substr(v.audit$, 20, 1),
       substr(v.audit$, 21, 1) || '/' || substr(v.audit$, 22, 1),
       '-/-',                                            /* dummy REF column */
       substr(v.audit$, 25, 1) || '/' || substr(v.audit$, 26, 1),
       substr(v.audit$, 27, 1) || '/' || substr(v.audit$, 28, 1),
       substr(v.audit$, 29, 1) || '/' || substr(v.audit$, 30, 1),
       substr(v.audit$, 31, 1) || '/' || substr(v.audit$, 32, 1),
       substr(v.audit$, 23, 1) || '/' || substr(v.audit$, 24, 1)
from sys.obj$ o, sys.view$ v
where o.type# = 4
  and o.owner# = userenv('SCHEMAID')
  and o.obj# = v.obj#
union all
select o.name, 'SEQUENCE',
       substr(s.audit$, 1, 1) || '/' || substr(s.audit$, 2, 1),
       substr(s.audit$, 3, 1) || '/' || substr(s.audit$, 4, 1),
       substr(s.audit$, 5, 1) || '/' || substr(s.audit$, 6, 1),
       substr(s.audit$, 7, 1) || '/' || substr(s.audit$, 8, 1),
       substr(s.audit$, 9, 1) || '/' || substr(s.audit$, 10, 1),
       substr(s.audit$, 11, 1) || '/' || substr(s.audit$, 12, 1),
       substr(s.audit$, 13, 1) || '/' || substr(s.audit$, 14, 1),
       substr(s.audit$, 15, 1) || '/' || substr(s.audit$, 16, 1),
       substr(s.audit$, 17, 1) || '/' || substr(s.audit$, 18, 1),
       substr(s.audit$, 19, 1) || '/' || substr(s.audit$, 20, 1),
       substr(s.audit$, 21, 1) || '/' || substr(s.audit$, 22, 1),
       '-/-',                                            /* dummy REF column */
       substr(s.audit$, 25, 1) || '/' || substr(s.audit$, 26, 1),
       substr(s.audit$, 27, 1) || '/' || substr(s.audit$, 28, 1),
       substr(s.audit$, 29, 1) || '/' || substr(s.audit$, 30, 1),
       substr(s.audit$, 31, 1) || '/' || substr(s.audit$, 32, 1),
       substr(s.audit$, 23, 1) || '/' || substr(s.audit$, 24, 1)
from sys.obj$ o, sys.seq$ s
where o.type# = 6
  and o.owner# = userenv('SCHEMAID')
  and o.obj# = s.obj#
union all
select o.name, 'PROCEDURE',
       substr(p.audit$, 1, 1) || '/' || substr(p.audit$, 2, 1),
       substr(p.audit$, 3, 1) || '/' || substr(p.audit$, 4, 1),
       substr(p.audit$, 5, 1) || '/' || substr(p.audit$, 6, 1),
       substr(p.audit$, 7, 1) || '/' || substr(p.audit$, 8, 1),
       substr(p.audit$, 9, 1) || '/' || substr(p.audit$, 10, 1),
       substr(p.audit$, 11, 1) || '/' || substr(p.audit$, 12, 1),
       substr(p.audit$, 13, 1) || '/' || substr(p.audit$, 14, 1),
       substr(p.audit$, 15, 1) || '/' || substr(p.audit$, 16, 1),
       substr(p.audit$, 17, 1) || '/' || substr(p.audit$, 18, 1),
       substr(p.audit$, 19, 1) || '/' || substr(p.audit$, 20, 1),
       substr(p.audit$, 21, 1) || '/' || substr(p.audit$, 22, 1),
       '-/-',                                            /* dummy REF column */
       substr(p.audit$, 25, 1) || '/' || substr(p.audit$, 26, 1),
       substr(p.audit$, 27, 1) || '/' || substr(p.audit$, 28, 1),
       substr(p.audit$, 29, 1) || '/' || substr(p.audit$, 30, 1),
       substr(p.audit$, 31, 1) || '/' || substr(p.audit$, 32, 1),
       substr(p.audit$, 23, 1) || '/' || substr(p.audit$, 24, 1)
from sys.obj$ o, sys.library$ p
where o.type# = 22
  and o.owner# = userenv('SCHEMAID')
  and o.obj# = p.obj#
union all
select o.name, 'PROCEDURE',
       substr(p.audit$, 1, 1) || '/' || substr(p.audit$, 2, 1),
       substr(p.audit$, 3, 1) || '/' || substr(p.audit$, 4, 1),
       substr(p.audit$, 5, 1) || '/' || substr(p.audit$, 6, 1),
       substr(p.audit$, 7, 1) || '/' || substr(p.audit$, 8, 1),
       substr(p.audit$, 9, 1) || '/' || substr(p.audit$, 10, 1),
       substr(p.audit$, 11, 1) || '/' || substr(p.audit$, 12, 1),
       substr(p.audit$, 13, 1) || '/' || substr(p.audit$, 14, 1),
       substr(p.audit$, 15, 1) || '/' || substr(p.audit$, 16, 1),
       substr(p.audit$, 17, 1) || '/' || substr(p.audit$, 18, 1),
       substr(p.audit$, 19, 1) || '/' || substr(p.audit$, 20, 1),
       substr(p.audit$, 21, 1) || '/' || substr(p.audit$, 22, 1),
       '-/-',                                            /* dummy REF column */
       substr(p.audit$, 25, 1) || '/' || substr(p.audit$, 26, 1),
       substr(p.audit$, 27, 1) || '/' || substr(p.audit$, 28, 1),
       substr(p.audit$, 29, 1) || '/' || substr(p.audit$, 30, 1),
       substr(p.audit$, 31, 1) || '/' || substr(p.audit$, 32, 1),
       substr(p.audit$, 23, 1) || '/' || substr(p.audit$, 24, 1)
from sys.obj$ o, sys.procedure$ p
where o.type# >= 7 and o.type# <= 9
  and o.owner# = userenv('SCHEMAID')
  and o.obj# = p.obj#
union all
select o.name, 'TYPE',
       substr(t.audit$, 1, 1) || '/' || substr(t.audit$, 2, 1),
       substr(t.audit$, 3, 1) || '/' || substr(t.audit$, 4, 1),
       substr(t.audit$, 5, 1) || '/' || substr(t.audit$, 6, 1),
       substr(t.audit$, 7, 1) || '/' || substr(t.audit$, 8, 1),
       substr(t.audit$, 9, 1) || '/' || substr(t.audit$, 10, 1),
       substr(t.audit$, 11, 1) || '/' || substr(t.audit$, 12, 1),
       substr(t.audit$, 13, 1) || '/' || substr(t.audit$, 14, 1),
       substr(t.audit$, 15, 1) || '/' || substr(t.audit$, 16, 1),
       substr(t.audit$, 17, 1) || '/' || substr(t.audit$, 18, 1),
       substr(t.audit$, 19, 1) || '/' || substr(t.audit$, 20, 1),
       substr(t.audit$, 21, 1) || '/' || substr(t.audit$, 22, 1),
       '-/-',                                            /* dummy REF column */
       substr(t.audit$, 25, 1) || '/' || substr(t.audit$, 26, 1),
       substr(t.audit$, 27, 1) || '/' || substr(t.audit$, 28, 1),
       substr(t.audit$, 29, 1) || '/' || substr(t.audit$, 30, 1),
       substr(t.audit$, 31, 1) || '/' || substr(t.audit$, 32, 1),
       substr(t.audit$, 23, 1) || '/' || substr(t.audit$, 24, 1)
from sys.obj$ o, sys.type_misc$ t
where o.type# = 13
  and o.owner# = userenv('SCHEMAID')
  and o.obj# = t.obj#
union all
select o.name, 'DIRECTORY',
       substr(t.audit$, 1, 1) || '/' || substr(t.audit$, 2, 1),
       substr(t.audit$, 3, 1) || '/' || substr(t.audit$, 4, 1),
       substr(t.audit$, 5, 1) || '/' || substr(t.audit$, 6, 1),
       substr(t.audit$, 7, 1) || '/' || substr(t.audit$, 8, 1),
       substr(t.audit$, 9, 1) || '/' || substr(t.audit$, 10, 1),
       substr(t.audit$, 11, 1) || '/' || substr(t.audit$, 12, 1),
       substr(t.audit$, 13, 1) || '/' || substr(t.audit$, 14, 1),
       substr(t.audit$, 15, 1) || '/' || substr(t.audit$, 16, 1),
       substr(t.audit$, 17, 1) || '/' || substr(t.audit$, 18, 1),
       substr(t.audit$, 19, 1) || '/' || substr(t.audit$, 20, 1),
       substr(t.audit$, 21, 1) || '/' || substr(t.audit$, 22, 1),
       '-/-',                                            /* dummy REF column */
       substr(t.audit$, 25, 1) || '/' || substr(t.audit$, 26, 1),
       substr(t.audit$, 27, 1) || '/' || substr(t.audit$, 28, 1),
       substr(t.audit$, 29, 1) || '/' || substr(t.audit$, 30, 1),
       substr(t.audit$, 31, 1) || '/' || substr(t.audit$, 32, 1),
       substr(t.audit$, 23, 1) || '/' || substr(t.audit$, 24, 1)
from sys.obj$ o, sys.dir$ t
where o.type# = 23
  and o.owner# = userenv('SCHEMAID')
  and o.obj# = t.obj#;

CREATE OR REPLACE FORCE VIEW "USER_OBJ_COLATTRS"("TABLE_NAME","COLUMN_NAME","SUBSTITUTABLE") AS 
select o.name, c.name, lpad(decode(bitand(ct.flags, 512), 512, 'Y', 'N'), 15)
from sys.coltype$ ct, sys.obj$ o, sys.col$ c
where o.owner# = userenv('SCHEMAID')
  and bitand(ct.flags, 2) = 2                                 /* ADT column */
  and o.obj#=ct.obj#
  and o.obj#=c.obj#
  and c.intcol#=ct.intcol#
  and bitand(c.property,32768) != 32768                /* not unused column */
  and not exists (select null                  /* Doesn't exist in attrcol$ */
                  from sys.attrcol$ ac
                  where ac.intcol#=ct.intcol#
                        and ac.obj#=ct.obj#)
union all
select o.name, ac.name, lpad(decode(bitand(ct.flags, 512), 512, 'Y', 'N'), 15)
from sys.coltype$ ct, sys.obj$ o, sys.attrcol$ ac, col$ c
where o.owner# = userenv('SCHEMAID')
  and bitand(ct.flags, 2) = 2                                  /* ADT column */
  and o.obj#=ct.obj#
  and o.obj#=c.obj#
  and o.obj#=ac.obj#
  and c.intcol#=ct.intcol#
  and c.intcol#=ac.intcol#
  and bitand(c.property,32768) != 32768                 /* not unused column */;

CREATE OR REPLACE FORCE VIEW "USER_OPANCILLARY"("OWNER","OPERATOR_NAME","BINDING#","PRIMOP_OWNER","PRIMOP_NAME","PRIMOP_BIND#") AS 
select distinct u.name, o.name, a.bind#, u1.name, o1.name, a1.primbind#
from   sys.user$ u, sys.obj$ o, sys.opancillary$ a, sys.user$ u1, sys.obj$ o1,
       sys.opancillary$ a1
where  a.obj#=o.obj# and o.owner#=u.user#   AND
       a1.primop#=o1.obj# and o1.owner#=u1.user# and a.obj#=a1.obj#
       and o.owner#=userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_OPARGUMENTS"("OWNER","OPERATOR_NAME","BINDING#","POSITION","ARGUMENT_TYPE") AS 
select  c.name, b.name, a.bind#, a.position, a.type
  from  sys.oparg$ a, sys.obj$ b, sys.user$ c
  where a.obj# = b.obj# and b.owner# = c.user#
  and   b.owner# = userenv ('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_OPBINDINGS"("OWNER","OPERATOR_NAME","BINDING#","FUNCTION_NAME","RETURN_SCHEMA","RETURN_TYPE","IMPLEMENTATION_TYPE_SCHEMA","IMPLEMENTATION_TYPE","PROPERTY") AS 
select  c.name, b.name, a.bind#, a.functionname, a.returnschema,
        a.returntype, a.impschema, a.imptype,
        decode(bitand(a.property,31), 1, 'WITH INDEX CONTEXT',
               3 , 'COMPUTE ANCILLARY DATA', 4 , 'ANCILLARY TO',
               16 , 'WITH COLUMN CONTEXT' ,
               17,  'WITH INDEX, COLUMN CONTEXT',
               19, 'COMPUTE ANCILLARY DATA, WITH COLUMN CONTEXT')
  from  sys.opbinding$ a, sys.obj$ b, sys.user$ c
  where a.obj# = b.obj# and b.owner# = c.user#
  and b.owner# = userenv ('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_OPERATORS"("OWNER","OPERATOR_NAME","NUMBER_OF_BINDS") AS 
select c.name, b.name, a.numbind from
  sys.operator$ a, sys.obj$ b, sys.user$ c where
  a.obj# = b.obj# and b.owner# = c.user# and
  b.owner# = userenv ('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_OPERATOR_COMMENTS"("OWNER","OPERATOR_NAME","COMMENTS") AS 
select u.name, o.name, c.comment$
from   sys.obj$ o, sys.operator$ op, sys.com$ c, sys.user$ u
where  o.obj# = op.obj# and c.obj# = op.obj# and u.user# = o.owner#
       and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_OUTLINES"("NAME","CATEGORY","USED","TIMESTAMP","VERSION","SQL_TEXT","SIGNATURE","COMPATIBLE","ENABLED","FORMAT") AS 
select ol_name, category,
  decode(bitand(flags, 1), 0, 'UNUSED', 1, 'USED'),
  timestamp, version, sql_text, signature,
  decode(bitand(flags, 2), 0, 'COMPATIBLE', 2, 'INCOMPATIBLE'),
  decode(bitand(flags, 4), 0, 'ENABLED', 4, 'DISABLED'),
  decode(bitand(flags, 8), 0, 'NORMAL', 8, 'LOCAL')
from outln.ol$, sys.user$ u
where creator = u.name
and u.user# = USERENV('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_OUTLINE_HINTS"("NAME","NODE","STAGE","JOIN_POS","HINT") AS 
select o.ol_name, h.node#, h.stage#, table_pos, h.hint_text
from outln.ol$ o, outln.ol$hints h, sys.user$ u
where o.ol_name = h.ol_name
  and o.creator = u.name
  and u.user#   = USERENV('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_PARTIAL_DROP_TABS"("TABLE_NAME") AS 
select o.name from sys.tab$ t, sys.obj$ o
where o.obj# = t.obj#
  and o.owner# = userenv('SCHEMAID')
  and bitand(t.flags, 32768) = 32768;

CREATE OR REPLACE FORCE VIEW "USER_PART_COL_STATISTICS"("TABLE_NAME","PARTITION_NAME","COLUMN_NAME","NUM_DISTINCT","LOW_VALUE","HIGH_VALUE","DENSITY","NUM_NULLS","NUM_BUCKETS","SAMPLE_SIZE","LAST_ANALYZED","GLOBAL_STATS","USER_STATS","AVG_COL_LEN","HISTOGRAM") AS 
select o.name, o.subname, tp.cname, h.distcnt, h.lowval, h.hival,
       h.density, h.null_cnt,
       case when h.bucket_cnt > 255 then h.row_cnt else
         decode(h.row_cnt, h.distcnt, h.row_cnt, h.bucket_cnt)
       end,
       h.sample_size, h.timestamp#,
       decode(bitand(h.spare2, 2), 2, 'YES', 'NO'),
       decode(bitand(h.spare2, 1), 1, 'YES', 'NO'),
       h.avgcln,
       case when h.bucket_cnt > 255 then 'FREQUENCY' else
         decode(nvl(h.row_cnt, 0), 0, 'NONE',
                                   h.distcnt, 'FREQUENCY', 'HEIGHT BALANCED')
       end
from  obj$ o, sys.hist_head$ h, tp$ tp
where o.obj# = tp.obj#
  and tp.obj# = h.obj#(+) and tp.intcol# = h.intcol#(+)
  and o.type# = 19 /* TABLE PARTITION */
  and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_PART_HISTOGRAMS"("TABLE_NAME","PARTITION_NAME","COLUMN_NAME","BUCKET_NUMBER","ENDPOINT_VALUE","ENDPOINT_ACTUAL_VALUE") AS 
select o.name, o.subname,
       tp.cname,
       h.bucket,
       h.endpoint,
       h.epvalue
from sys.obj$ o, sys.histgrm$ h, tp$ tp
where o.obj# = h.obj# and h.obj# = tp.obj#
  and tp.intcol# = h.intcol#
  and o.type# = 19 /* TABLE PARTITION */
  and o.owner# = userenv('SCHEMAID')
union
select o.name, o.subname,
       tp.cname,
       0,
       h.minimum,
       null
from sys.obj$ o, sys.hist_head$ h, tp$ tp
where o.obj# = tp.obj# and tp.obj# = h.obj#
  and tp.intcol# = h.intcol#
  and o.type# = 19 /* TABLE PARTITION */
  and h.bucket_cnt = 1
  and o.owner# = userenv('SCHEMAID')
union
select o.name, o.subname,
       tp.cname,
       1,
       h.maximum,
       null
from sys.obj$ o, sys.hist_head$ h, tp$ tp
where o.obj# = tp.obj# and tp.obj# = h.obj#
  and tp.intcol# = h.intcol#
  and o.type# = 19 /* TABLE PARTITION */
  and h.bucket_cnt = 1
  and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_PART_INDEXES"("INDEX_NAME","TABLE_NAME","PARTITIONING_TYPE","SUBPARTITIONING_TYPE","PARTITION_COUNT","DEF_SUBPARTITION_COUNT","PARTITIONING_KEY_COUNT","SUBPARTITIONING_KEY_COUNT","LOCALITY","ALIGNMENT","DEF_TABLESPACE_NAME","DEF_PCT_FREE","DEF_INI_TRANS","DEF_MAX_TRANS","DEF_INITIAL_EXTENT","DEF_NEXT_EXTENT","DEF_MIN_EXTENTS","DEF_MAX_EXTENTS","DEF_PCT_INCREASE","DEF_FREELISTS","DEF_FREELIST_GROUPS","DEF_LOGGING","DEF_BUFFER_POOL","DEF_PARAMETERS") AS 
select io.name, o.name,
        decode(po.parttype, 1, 'RANGE', 2, 'HASH', 3, 'SYSTEM', 4, 'LIST',
                                                                   'UNKNOWN'),
        decode(mod(po.spare2, 256), 0, 'NONE', 2, 'HASH', 3, 'SYSTEM',
                                      4, 'LIST', 'UNKNOWN'),
       po.partcnt, mod(trunc(po.spare2/65536), 65536),
       po.partkeycols,  mod(trunc(po.spare2/256), 256),
       decode(bitand(po.flags, 1), 1, 'LOCAL',    'GLOBAL'),
       decode(po.partkeycols, 0, 'NONE', decode(bitand(po.flags,2), 2, 'PREFIXED', 'NON_PREFIXED')),
       ts.name, po.defpctfree, po.definitrans,
       po.defmaxtrans,
       decode(po.deftiniexts, NULL, 'DEFAULT', po.deftiniexts),
       decode(po.defextsize, NULL, 'DEFAULT', po.defextsize),
       decode(po.defminexts, NULL, 'DEFAULT', po.defminexts),
       decode(po.defmaxexts, NULL, 'DEFAULT', po.defmaxexts),
       decode(po.defextpct, NULL, 'DEFAULT', po.defextpct),
       po.deflists, po.defgroups,
       decode(po.deflogging, 0, 'NONE', 1, 'YES', 2, 'NO', 'UNKNOWN'),
       decode(po.spare1, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL),
       po.parameters
from   sys.obj$ io, sys.obj$ o, sys.partobj$ po, sys.ts$ ts, sys.ind$ i
where  io.obj# = po.obj# and po.defts# = ts.ts# (+) and i.obj# = io.obj#
       and o.obj# = i.bo# and io.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_PART_KEY_COLUMNS"("NAME","OBJECT_TYPE","COLUMN_NAME","COLUMN_POSITION") AS 
select o.name, 'TABLE',
  decode(bitand(c.property, 1), 1, a.name, c.name), pc.pos#
from partcol$ pc, obj$ o, col$ c, attrcol$ a
where pc.obj# = o.obj# and pc.obj# = c.obj# and c.intcol# = pc.intcol# and
      o.owner# = userenv('SCHEMAID')
  and c.obj#    = a.obj#(+)
  and c.intcol# = a.intcol#(+)
union
select io.name, 'INDEX',
  decode(bitand(c.property, 1), 1, a.name, c.name), pc.pos#
from partcol$ pc, obj$ io, col$ c, ind$ i, attrcol$ a
where pc.obj# = i.obj# and i.obj# = io.obj# and i.bo# = c.obj# and
c.intcol# = pc.intcol# and io.owner# = userenv('SCHEMAID')
  and c.obj#    = a.obj#(+)
  and c.intcol# = a.intcol#(+);

CREATE OR REPLACE FORCE VIEW "USER_PART_LOBS"("TABLE_NAME","COLUMN_NAME","LOB_NAME","LOB_INDEX_NAME","DEF_CHUNK","DEF_PCTVERSION","DEF_CACHE","DEF_IN_ROW","DEF_TABLESPACE_NAME","DEF_INITIAL_EXTENT","DEF_NEXT_EXTENT","DEF_MIN_EXTENTS","DEF_MAX_EXTENTS","DEF_PCT_INCREASE","DEF_FREELISTS","DEF_FREELIST_GROUPS","DEF_LOGGING","DEF_BUFFER_POOL") AS 
select o.name,
       decode(bitand(c.property, 1), 1, a.name, c.name),
       lo.name,
       io.name,
       plob.defchunk,
       plob.defpctver$,
       decode(bitand(plob.defflags, 27), 1, 'NO', 2, 'NO', 8, 'CACHEREADS',
                                         16, 'CACHEREADS', 'YES'),
       decode(plob.defpro, 0, 'NO', 'YES'),
       ts.name,
       decode(plob.definiexts, NULL, 'DEFAULT', plob.definiexts),
       decode(plob.defextsize, NULL, 'DEFAULT', plob.defextsize),
       decode(plob.defminexts, NULL, 'DEFAULT', plob.defminexts),
       decode(plob.defmaxexts, NULL, 'DEFAULT', plob.defmaxexts),
       decode(plob.defextpct,  NULL, 'DEFAULT', plob.defextpct),
       decode(plob.deflists,   NULL, 'DEFAULT', plob.deflists),
       decode(plob.defgroups,  NULL, 'DEFAULT', plob.defgroups),
       decode(bitand(plob.defflags,22), 0,'NONE', 4,'YES', 2,'NO',
                                        16,'NO', 'UNKNOWN'),
       decode(plob.defbufpool, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL)
from   sys.obj$ o, sys.col$ c, sys.lob$ l, sys.partlob$ plob,
       sys.obj$ lo, sys.obj$ io, sys.ts$ ts, attrcol$ a
where o.owner# = userenv('SCHEMAID')
  and o.obj# = c.obj#
  and c.obj# = l.obj#
  and c.intcol# = l.intcol#
  and l.lobj# = lo.obj#
  and l.ind# = io.obj#
  and l.lobj# = plob.lobj#
  and plob.defts# = ts.ts# (+)
  and bitand(c.property,32768) != 32768           /* not unused column */
  and c.obj# = a.obj#(+) and c.intcol# = a.intcol#(+);

CREATE OR REPLACE FORCE VIEW "USER_PART_TABLES"("TABLE_NAME","PARTITIONING_TYPE","SUBPARTITIONING_TYPE","PARTITION_COUNT","DEF_SUBPARTITION_COUNT","PARTITIONING_KEY_COUNT","SUBPARTITIONING_KEY_COUNT","DEF_TABLESPACE_NAME","DEF_PCT_FREE","DEF_PCT_USED","DEF_INI_TRANS","DEF_MAX_TRANS","DEF_INITIAL_EXTENT","DEF_NEXT_EXTENT","DEF_MIN_EXTENTS","DEF_MAX_EXTENTS","DEF_PCT_INCREASE","DEF_FREELISTS","DEF_FREELIST_GROUPS","DEF_LOGGING","DEF_COMPRESSION","DEF_BUFFER_POOL") AS 
select o.name,
       decode(po.parttype, 1, 'RANGE', 2, 'HASH', 3, 'SYSTEM', 4, 'LIST',
                                                                  'UNKNOWN'),
       decode(mod(po.spare2, 256), 0, 'NONE', 2, 'HASH', 3, 'SYSTEM',
                                      4, 'LIST', 'UNKNOWN'),
       po.partcnt, mod(trunc(po.spare2/65536), 65536), po.partkeycols,
       mod(trunc(po.spare2/256), 256),
       ts.name, po.defpctfree,
       decode(bitand(ts.flags, 32), 32, to_number(NULL), po.defpctused),
       po.definitrans,
       po.defmaxtrans,
       decode(po.deftiniexts, NULL, 'DEFAULT', po.deftiniexts),
       decode(po.defextsize, NULL, 'DEFAULT', po.defextsize),
       decode(po.defminexts, NULL, 'DEFAULT', po.defminexts),
       decode(po.defmaxexts, NULL, 'DEFAULT', po.defmaxexts),
       decode(po.defextpct, NULL, 'DEFAULT', po.defextpct),
       po.deflists, po.defgroups,
       decode(po.deflogging, 0, 'NONE', 1, 'YES', 2, 'NO', 'UNKNOWN'),
       decode(mod(trunc(po.spare2/4294967296),256), 0, 'NONE', 1, 'ENABLED',
                     2, 'DISABLED', 'UNKNOWN'),
       decode(po.spare1, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL)
from   sys.obj$ o, sys.partobj$ po, sys.ts$ ts, sys.tab$ t
where  o.obj# = po.obj# and po.defts# = ts.ts# and t.obj# = o.obj# and
       o.owner# = userenv('SCHEMAID') and
       bitand(t.property, 64 + 128) = 0
union all -- NON-IOT and IOT
select o.name,
       decode(po.parttype, 1, 'RANGE', 2, 'HASH', 3, 'SYSTEM', 4, 'LIST',
                                                                  'UNKNOWN'),
       decode(mod(po.spare2, 256), 0, 'NONE', 2, 'HASH', 3, 'SYSTEM',
                                      4, 'LIST', 'UNKNOWN'),
       po.partcnt, mod(trunc(po.spare2/65536), 65536), po.partkeycols,
       mod(trunc(po.spare2/256), 256),
       NULL, TO_NUMBER(NULL),TO_NUMBER(NULL),TO_NUMBER(NULL),TO_NUMBER(NULL),
       NULL,--decode(po.deftiniexts, NULL, 'DEFAULT', po.deftiniexts),
       NULL,--decode(po.defextsize, NULL, 'DEFAULT', po.defextsize),
       NULL,--decode(po.defminexts, NULL, 'DEFAULT', po.defminexts),
       NULL,--decode(po.defmaxexts, NULL, 'DEFAULT', po.defmaxexts),
       NULL,--decode(po.defextpct, NULL, 'DEFAULT', po.defextpct),
       TO_NUMBER(NULL),TO_NUMBER(NULL),--po.deflists, po.defgroups,
       decode(po.deflogging, 0, 'NONE', 1, 'YES', 2, 'NO', 'UNKNOWN'),
       'N/A',
       decode(po.spare1, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL)
from   sys.obj$ o, sys.partobj$ po, sys.tab$ t
where  o.obj# = po.obj# and t.obj# = o.obj# and
       o.owner# = userenv('SCHEMAID') and
       bitand(t.property, 64 + 128) != 0;

CREATE OR REPLACE FORCE VIEW "USER_PASSWORD_LIMITS"("RESOURCE_NAME","LIMIT") AS 
select
  m.name,
  decode(u.limit#,
         2147483647, decode(u.resource#, 4, 'NULL', 'UNLIMITED'),
         -1, 0,
         0, decode(p.limit#,
                   2147483647, decode(p.resource#, 4, 'NULL', 'UNLIMITED'),
                   -1, 0,
                   decode(p.resource#,
                          4, po.name,
                          1, trunc(p.limit#/86400, 4),
                          2, trunc(p.limit#/86400, 4),
                          5, trunc(p.limit#/86400, 4),
                          6, trunc(p.limit#/86400, 4), p.limit#)),
         decode(u.resource#,
                4, uo.name,
                1, trunc(u.limit#/86400, 4),
                2, trunc(u.limit#/86400, 4),
                5, trunc(u.limit#/86400, 4),
                6, trunc(u.limit#/86400, 4),
                u.limit#))
  from sys.profile$ u, sys.profile$ p, sys.obj$ uo, sys.obj$ po,
       sys.resource_map m, sys.user$ s
  where u.resource# = m.resource#
  and p.profile# = 0
  and p.resource# = u.resource#
  and u.type# = p.type#
  and p.type# = 1
  and m.type# = 1
  and uo.obj#(+) = u.limit#
  and po.obj#(+) = p.limit#
  and s.resource$ = u.profile#
  and s.user# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_PENDING_CONV_TABLES"("TABLE_NAME") AS 
select o.name
from sys.obj$ o
  where o.type# = 2 and o.status = 5
  and bitand(o.flags, 4096) = 4096  /* type evolved flg */
  and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_PLSQL_OBJECT_SETTINGS"("NAME","TYPE","PLSQL_OPTIMIZE_LEVEL","PLSQL_CODE_TYPE","PLSQL_DEBUG","PLSQL_WARNINGS","NLS_LENGTH_SEMANTICS") AS 
select o.name,
decode(o.type#, 7, 'PROCEDURE', 8, 'FUNCTION', 9, 'PACKAGE',
                11, 'PACKAGE BODY', 12, 'TRIGGER',
                13, 'TYPE', 14, 'TYPE BODY', 'UNDEFINED'),
(select to_number(value) from settings$ s
  where s.obj# = o.obj# and param = 'plsql_optimize_level'),
(select value from settings$ s
  where s.obj# = o.obj# and param = 'plsql_code_type'),
(select value from settings$ s
  where s.obj# = o.obj# and param = 'plsql_debug'),
(select value from settings$ s
  where s.obj# = o.obj# and param = 'plsql_warnings'),
(select value from settings$ s
  where s.obj# = o.obj# and param = 'nls_length_semantics')
from sys.obj$ o
where o.owner# = userenv('SCHEMAID')
  and o.type# in (7, 8, 9, 11, 12, 13, 14);

CREATE OR REPLACE FORCE VIEW "USER_POLICIES"("OBJECT_NAME","POLICY_GROUP","POLICY_NAME","PF_OWNER","PACKAGE","FUNCTION","SEL","INS","UPD","DEL","IDX","CHK_OPTION","ENABLE","STATIC_POLICY","POLICY_TYPE","LONG_PREDICATE") AS 
SELECT OBJECT_NAME, POLICY_GROUP, POLICY_NAME, PF_OWNER, PACKAGE,
FUNCTION, SEL, INS, UPD, DEL, IDX, CHK_OPTION, ENABLE, STATIC_POLICY,
POLICY_TYPE, LONG_PREDICATE
FROM DBA_POLICIES
WHERE
OBJECT_OWNER = SYS_CONTEXT('USERENV','CURRENT_USER');

CREATE OR REPLACE FORCE VIEW "USER_POLICY_CONTEXTS"("OBJECT_NAME","NAMESPACE","ATTRIBUTE") AS 
SELECT OBJECT_NAME,NAMESPACE,ATTRIBUTE
FROM DBA_POLICY_CONTEXTS
WHERE OBJECT_OWNER = SYS_CONTEXT('USERENV','CURRENT_USER');

CREATE OR REPLACE FORCE VIEW "USER_POLICY_GROUPS"("OBJECT_NAME","POLICY_GROUP") AS 
SELECT OBJECT_NAME, POLICY_GROUP
FROM DBA_POLICY_GROUPS
WHERE OBJECT_OWNER = SYS_CONTEXT('USERENV','CURRENT_USER');

CREATE OR REPLACE FORCE VIEW "USER_PROCEDURES"("OBJECT_NAME","PROCEDURE_NAME","AGGREGATE","PIPELINED","IMPLTYPEOWNER","IMPLTYPENAME","PARALLEL","INTERFACE","DETERMINISTIC","AUTHID") AS 
select o.name, pi.procedurename,
decode(bitand(pi.properties,8),8,'YES','NO'),
decode(bitand(pi.properties,16),16,'YES','NO'),
u2.name, o2.name,
decode(bitand(pi.properties,32),32,'YES','NO'),
decode(bitand(pi.properties,512),512,'YES','NO'),
decode(bitand(pi.properties,256),256,'YES','NO'),
decode(bitand(pi.properties,1024),1024,'CURRENT_USER','DEFINER')
from sys.obj$ o, sys.procedureinfo$ pi, sys.obj$ o2, sys.user$ u2
where o.owner# = userenv('SCHEMAID') and o.obj# = pi.obj#
and pi.itypeobj# = o2.obj# (+) and o2.owner#  = u2.user# (+);

CREATE OR REPLACE FORCE VIEW "USER_PROXIES"("CLIENT","AUTHENTICATION","AUTHORIZATION_CONSTRAINT","ROLE") AS 
select u.name,
       decode(p.credential_type#, 0, 'NO',
                                  5, 'YES'),
       decode(p.flags, 0, null,
                       1, 'PROXY MAY ACTIVATE ALL CLIENT ROLES',
                       2, 'NO CLIENT ROLES MAY BE ACTIVATED',
                       4, 'PROXY MAY ACTIVATE ROLE',
                       5, 'PROXY MAY ACTIVATE ALL CLIENT ROLES',
                       8, 'PROXY MAY NOT ACTIVATE ROLE'),
       (select u.name from sys.user$ u where pr.role# = u.user#)
from sys.user$ u, sys.proxy_info$ p, sys.proxy_role_info$ pr
where u.user#  = p.client#
  and p.proxy#  = pr.proxy#(+)
  and p.client# = pr.client#(+)
  and p.proxy# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_PUBLISHED_COLUMNS"("CHANGE_SET_NAME","PUB_ID","SOURCE_SCHEMA_NAME","SOURCE_TABLE_NAME","COLUMN_NAME","DATA_TYPE","DATA_LENGTH","DATA_PRECISION","DATA_SCALE","NULLABLE") AS 
SELECT
   s.change_set_name, s.obj#, s.source_schema_name, s.source_table_name,
   c.column_name, c.data_type, c.data_length, c.data_precision, c.data_scale,
   c.nullable
  FROM sys.cdc_change_tables$ s, all_tables t, all_tab_columns c, sys.user$ u
  WHERE s.change_table_schema=t.owner AND
        s.change_table_name=t.table_name AND
        c.owner=s.change_table_schema AND
        c.table_name=s.change_table_name AND
        c.column_name NOT LIKE '%$' AND
        s.change_table_schema = u.name AND
        u.user# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_QUEUES"("NAME","QUEUE_TABLE","QID","QUEUE_TYPE","MAX_RETRIES","RETRY_DELAY","ENQUEUE_ENABLED","DEQUEUE_ENABLED","RETENTION","USER_COMMENT") AS 
select q.name NAME, t.name QUEUE_TABLE, q.eventid QID,
       decode(q.usage, 1, 'EXCEPTION_QUEUE', 2, 'NON_PERSISTENT_QUEUE',
              'NORMAL_QUEUE') QUEUE_TYPE,
       q.max_retries MAX_RETRIES, q.retry_delay RETRY_DELAY,
       decode(bitand(q.enable_flag, 1), 1 , '  YES  ', '  NO  ')ENQUEUE_ENABLED,
       decode(bitand(q.enable_flag, 2), 2 , '  YES  ', '  NO  ')DEQUEUE_ENABLED,
       decode(q.ret_time, -1, ' FOREVER', q.ret_time) RETENTION,
       substr(q.queue_comment, 1, 50) USER_COMMENT
from system.aq$_queues q, system.aq$_queue_tables t, sys.user$ u
where u.user# = USERENV('SCHEMAID')
and   u.name  = t.schema
and   q.table_objno = t.objno;

CREATE OR REPLACE FORCE VIEW "USER_QUEUE_PUBLISHERS"("QUEUE_NAME","PUBLISHER_NAME","PUBLISHER_ADDRESS","PUBLISHER_PROTOCOL","PUBLISHER_RULE","PUBLISHER_RULE_NAME","PUBLISHER_RULESET","PUBLISHER_TRANSFORMATION") AS 
select q.name QUEUE_NAME,
        p.p_name PUBLISHER_NAME, p.p_address PUBLISHER_ADDRESS,
        p.p_protocol PUBLISHER_PROTOCOL, p.p_rule PUBLISHER_RULE,
        p.p_rule_name PUBLISHER_RULE_NAME, p.p_ruleset PUBLISHER_RULESET,
        p.p_transformation PUBLISHER_TRANSFORMATION
from
 system.aq$_queue_tables t,  system.aq$_queues q,
 sys.aq$_publisher p, sys.user$ u
where
 u.user# = USERENV('SCHEMAID') and
 u.name = t.schema and q.table_objno = t.objno
 and q.eventid = p.queue_id;

CREATE OR REPLACE FORCE VIEW "USER_QUEUE_SCHEDULES"("QNAME","DESTINATION","START_DATE","START_TIME","PROPAGATION_WINDOW","NEXT_TIME","LATENCY","SCHEDULE_DISABLED","PROCESS_NAME","SESSION_ID","INSTANCE","LAST_RUN_DATE","LAST_RUN_TIME","CURRENT_START_DATE","CURRENT_START_TIME","NEXT_RUN_DATE","NEXT_RUN_TIME","TOTAL_TIME","TOTAL_NUMBER","TOTAL_BYTES","MAX_NUMBER","MAX_BYTES","AVG_NUMBER","AVG_SIZE","AVG_TIME","FAILURES","LAST_ERROR_DATE","LAST_ERROR_TIME","LAST_ERROR_MSG") AS 
select q.name QNAME,
       s.destination DESTINATION, s.start_time START_DATE,
       substr(to_char(s.start_time,'HH24:MI:SS'),1,8) START_TIME,
       to_number(s.duration) PROPAGATION_WINDOW,
       s.next_time NEXT_TIME, to_number(s.latency) LATENCY,
       s.disabled SCHEDULE_DISABLED, s.process_name PROCESS_NAME,
       decode(s.sid, NULL, NULL,
         concat(to_char(s.sid), concat(', ',to_char(s.serial)))) SESSION_ID,
       s.instance INSTANCE, s.last_run LAST_RUN_DATE,
       substr(to_char(s.last_run,'HH24:MI:SS'),1,8) LAST_RUN_TIME,
       s.cur_start_time CURRENT_START_DATE,
       substr(to_char(s.cur_start_time,'HH24:MI:SS'),1,8) CURRENT_START_TIME,
       s.next_run NEXT_RUN_DATE,
       substr(to_char(s.next_run,'HH24:MI:SS'),1,8) NEXT_RUN_TIME,
       s.total_time TOTAL_TIME, s.total_msgs TOTAL_NUMBER,
       s.total_bytes TOTAL_BYTES,
       s.max_num_per_win MAX_NUMBER, s.max_size MAX_BYTES,
       s.total_msgs/decode(s.total_windows, 0, 1, s.total_windows) AVG_NUMBER,
       s.total_bytes/decode(s.total_msgs, 0, 1, s.total_msgs) AVG_SIZE,
       s.total_time/decode(s.total_msgs, 0, 1, s.total_msgs) AVG_TIME,
       s.failures FAILURES, s.error_time LAST_ERROR_DATE,
       substr(to_char(s.error_time,'HH24:MI:SS'),1,8) LAST_ERROR_TIME,
       s.last_error_msg LAST_ERROR_MSG
from system.aq$_queues q, system.aq$_queue_tables t,
     sys.aq$_schedules s, sys.user$ u
where u.user# = USERENV('SCHEMAID')
and   u.name  = t.schema
and   s.oid  = q.oid
and   q.table_objno = t.objno;

CREATE OR REPLACE FORCE VIEW "USER_QUEUE_TABLES"("QUEUE_TABLE","TYPE","OBJECT_TYPE","SORT_ORDER","RECIPIENTS","MESSAGE_GROUPING","COMPATIBLE","PRIMARY_INSTANCE","SECONDARY_INSTANCE","OWNER_INSTANCE","USER_COMMENT","SECURE") AS 
select t.name QUEUE_TABLE,
     decode(t.udata_type, 1 , 'OBJECT', 2, 'VARIANT', 3, 'RAW') TYPE,
     tc.name || '.' || o.name OBJECT_TYPE,
     decode(t.sort_cols, 0, 'NONE', 1, 'PRIORITY', 2, 'ENQUEUE_TIME',
                               3, 'PRIORITY, ENQUEUE_TIME',
                               7, 'ENQUEUE_TIME, PRIORITY') SORT_ORDER,
     decode(bitand(t.flags, 1), 1, 'MULTIPLE', 0, 'SINGLE') RECIPIENTS,
     decode(bitand(t.flags, 2), 2, 'TRANSACTIONAL', 0, 'NONE')MESSAGE_GROUPING,
     decode(bitand(t.flags, 8), 8, '8.1.3', 0, '8.0.3')COMPATIBLE,
     aft.primary_instance PRIMARY_INSTANCE,
     aft.secondary_instance SECONDARY_INSTANCE,
     aft.owner_instance OWNER_INSTANCE,
     substr(t.table_comment, 1, 50) USER_COMMENT,
     decode(bitand(t.flags, 4096), 4096, 'YES', 0, 'NO') SECURE
from system.aq$_queue_tables t, sys.col$ c, sys.coltype$ ct, sys.obj$ o,
sys.user$ tc, sys.user$ qc, sys.aq$_queue_table_affinities aft
where c.intcol# = ct.intcol#
and c.obj# = ct.obj#
and c.name = 'USER_DATA'
and t.objno = c.obj#
and o.oid$ = ct.toid
and o.type# = 13
and o.owner# = tc.user#
and qc.user# = USERENV('SCHEMAID')
and qc.name = t.schema
and t.objno = aft.table_objno
union
select t.name QUEUE_TABLE,
     decode(t.udata_type, 1 , 'OBJECT', 2, 'VARIANT', 3, 'RAW') TYPE,
     null OBJECT_TYPE,
     decode(t.sort_cols, 0, 'NONE', 1, 'PRIORITY', 2, 'ENQUEUE_TIME',
                               3, 'PRIORITY, ENQUEUE_TIME',
                               7, 'ENQUEUE_TIME, PRIORITY') SORT_ORDER,
     decode(bitand(t.flags, 1), 1, 'MULTIPLE', 0, 'SINGLE') RECIPIENTS,
     decode(bitand(t.flags, 2), 2, 'TRANSACTIONAL', 0, 'NONE')MESSAGE_GROUPING,
     decode(bitand(t.flags, 8), 8, '8.1.3', 0, '8.0.3')COMPATIBLE,
     aft.primary_instance PRIMARY_INSTANCE,
     aft.secondary_instance SECONDARY_INSTANCE,
     aft.owner_instance OWNER_INSTANCE,
     substr(t.table_comment, 1, 50) USER_COMMENT,
     decode(bitand(t.flags, 4096), 4096, 'YES', 0, 'NO') SECURE
from system.aq$_queue_tables t, sys.user$ qc,
     sys.aq$_queue_table_affinities aft
where (t.udata_type = 2
or t.udata_type = 3)
and qc.user# = USERENV('SCHEMAID')
and qc.name  = t.schema
and t.objno = aft.table_objno;

CREATE OR REPLACE FORCE VIEW "USER_RECYCLEBIN"("OBJECT_NAME","ORIGINAL_NAME","OPERATION","TYPE","TS_NAME","CREATETIME","DROPTIME","DROPSCN","PARTITION_NAME","CAN_UNDROP","CAN_PURGE","RELATED","BASE_OBJECT","PURGE_OBJECT","SPACE") AS 
select o.name, r.original_name,
       decode(r.operation, 0, 'DROP', 1, 'TRUNCATE', 'UNDEFINED'),
       decode(r.type#, 1, 'TABLE', 2, 'INDEX', 3, 'INDEX',
                       4, 'NESTED TABLE', 5, 'LOB', 6, 'LOB INDEX',
                       7, 'DOMAIN INDEX', 8, 'IOT TOP INDEX',
                       9, 'IOT OVERFLOW SEGMENT', 10, 'IOT MAPPING TABLE',
                       11, 'TRIGGER', 12, 'CONSTRAINT', 13, 'Table Partition',
                       14, 'Table Composite Partition', 15, 'Index Partition',
                       16, 'Index Composite Partition', 17, 'LOB Partition',
                       18, 'LOB Composite Partition',
                       'UNDEFINED'),
       t.name,
       to_char(o.ctime, 'YYYY-MM-DD:HH24:MI:SS'),
       to_char(r.droptime, 'YYYY-MM-DD:HH24:MI:SS'),
       r.dropscn, r.partition_name,
       decode(bitand(r.flags, 4), 0, 'NO', 4, 'YES', 'NO'),
       decode(bitand(r.flags, 2), 0, 'NO', 2, 'YES', 'NO'),
       r.related, r.bo, r.purgeobj, r.space
from sys.obj$ o, sys.recyclebin$ r, sys.ts$ t
where r.owner# = userenv('SCHEMAID')
  and o.obj# = r.obj#
  and r.ts# = t.ts#(+);

CREATE OR REPLACE FORCE VIEW "USER_REFRESH"("ROWNER","RNAME","REFGROUP","IMPLICIT_DESTROY","PUSH_DEFERRED_RPC","REFRESH_AFTER_ERRORS","ROLLBACK_SEG","JOB","NEXT_DATE","INTERVAL","BROKEN","PURGE_OPTION","PARALLELISM","HEAP_SIZE") AS 
select d."ROWNER",d."RNAME",d."REFGROUP",d."IMPLICIT_DESTROY",d."PUSH_DEFERRED_RPC",d."REFRESH_AFTER_ERRORS",d."ROLLBACK_SEG",d."JOB",d."NEXT_DATE",d."INTERVAL",d."BROKEN",d."PURGE_OPTION",d."PARALLELISM",d."HEAP_SIZE" from dba_refresh d, sys.user$ u where
d.rowner = u.name
and u.user# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_REFRESH_CHILDREN"("OWNER","NAME","TYPE","ROWNER","RNAME","REFGROUP","IMPLICIT_DESTROY","PUSH_DEFERRED_RPC","REFRESH_AFTER_ERRORS","ROLLBACK_SEG","JOB","NEXT_DATE","INTERVAL","BROKEN","PURGE_OPTION","PARALLELISM","HEAP_SIZE") AS 
select d."OWNER",d."NAME",d."TYPE",d."ROWNER",d."RNAME",d."REFGROUP",d."IMPLICIT_DESTROY",d."PUSH_DEFERRED_RPC",d."REFRESH_AFTER_ERRORS",d."ROLLBACK_SEG",d."JOB",d."NEXT_DATE",d."INTERVAL",d."BROKEN",d."PURGE_OPTION",d."PARALLELISM",d."HEAP_SIZE" from dba_refresh_children d, sys.user$ u where
d.rowner = u.name
and u.user#  = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_REFS"("TABLE_NAME","COLUMN_NAME","WITH_ROWID","IS_SCOPED","SCOPE_TABLE_OWNER","SCOPE_TABLE_NAME","OBJECT_ID_TYPE") AS 
select distinct o.name,
       decode(bitand(c.property, 1), 1, ac.name, c.name),
       decode(bitand(rc.reftyp, 2), 2, 'YES', 'NO'),
       decode(bitand(rc.reftyp, 1), 1, 'YES', 'NO'),
       su.name, so.name,
       case
         when bitand(reftyp,4) = 4 then 'USER-DEFINED'
         when bitand(reftyp, 8) = 8 then 'SYSTEM GENERATED AND USER-DEFINED'
         else 'SYSTEM GENERATED'
       end
from sys.obj$ o, sys.col$ c, sys.refcon$ rc, sys.obj$ so, sys.user$ su,
     sys.attrcol$ ac
where o.owner# = userenv('SCHEMAID')
  and o.obj# = c.obj#
  and c.obj# = rc.obj#
  and c.col# = rc.col#
  and c.intcol# = rc.intcol#
  and rc.stabid = so.oid$(+)
  and so.owner# = su.user#(+)
  and c.obj# = ac.obj#(+)
  and c.intcol# = ac.intcol#(+)
  and bitand(c.property,32768) != 32768           /* not unused column */;

CREATE OR REPLACE FORCE VIEW "USER_REGISTERED_MVIEWS"("OWNER","NAME","MVIEW_SITE","CAN_USE_LOG","UPDATABLE","REFRESH_METHOD","MVIEW_ID","VERSION","QUERY_TXT") AS 
select "OWNER","NAME","MVIEW_SITE","CAN_USE_LOG","UPDATABLE","REFRESH_METHOD","MVIEW_ID","VERSION","QUERY_TXT" from dba_registered_mviews s
where exists (select u.mview_id from user_base_table_mviews u
                  where s.mview_id = u.mview_id);

CREATE OR REPLACE FORCE VIEW "USER_REGISTERED_SNAPSHOTS"("OWNER","NAME","SNAPSHOT_SITE","CAN_USE_LOG","UPDATABLE","REFRESH_METHOD","SNAPSHOT_ID","VERSION","QUERY_TXT") AS 
select "OWNER","NAME","SNAPSHOT_SITE","CAN_USE_LOG","UPDATABLE","REFRESH_METHOD","SNAPSHOT_ID","VERSION","QUERY_TXT" from dba_registered_snapshots s
where exists (select snapshot_id from user_snapshot_logs u
                  where s.snapshot_id = u.snapshot_id);

CREATE OR REPLACE FORCE VIEW "USER_REGISTRY"("COMP_ID","COMP_NAME","VERSION","STATUS","MODIFIED","NAMESPACE","CONTROL","SCHEMA","PROCEDURE","STARTUP","PARENT_ID") AS 
SELECT r.cid, r.cname, r.version,
       DECODE(r.status, 0, 'INVALID',
                        1, 'VALID',
                        2, 'LOADING',
                        3, 'LOADED',
                        4, 'UPGRADING',
                        5, 'UPGRADED',
                        6, 'DOWNGRADING',
                        7, 'DOWNGRADED',
                        8, 'REMOVING',
                        9, 'OPTION OFF',
                        10, 'NO SCRIPT',
                        99, 'REMOVED',
                        NULL),
       TO_CHAR(r.modified,'DD-MON-YYYY HH24:MI:SS'),
       r.namespace, i.name, s.name, r.vproc,
       DECODE(bitand(r.flags,1),1,'REQUIRED',NULL), r.pid
FROM registry$ r, user$ s, user$ i
WHERE (r.schema# = USERENV('SCHEMAID') OR r.invoker# = USERENV('SCHEMAID'))
      AND r.schema# = s.user# AND r.invoker#=i.user#;

CREATE OR REPLACE FORCE VIEW "USER_REPAUDIT_ATTRIBUTE"("ATTRIBUTE","DATA_TYPE","DATA_LENGTH","SOURCE") AS 
select
    attribute,
    decode(data_type_id,
           1, 'NUMBER',
           2, 'VARCHAR2',
           3, 'DATE',
           4, 'CHAR',
           5, 'RAW',
           6, 'NVARCHAR2',
           7, 'NCHAR',
           'UNDEFINED'),
    data_length,
    source
from  system.repcat$_audit_attribute;

CREATE OR REPLACE FORCE VIEW "USER_REPAUDIT_COLUMN"("ONAME","COLUMN_NAME","BASE_SNAME","BASE_ONAME","BASE_CONFLICT_TYPE","BASE_REFERENCE_NAME","ATTRIBUTE") AS 
select
    r.oname,
    r.column_name,
    r.base_sname,
    r.base_oname,
    decode(r.base_conflict_type_id,
           1, 'UPDATE',
           2, 'UNIQUENESS',
           3, 'DELETE',
           'UNDEFINED'),
    r.base_reference_name,
    r.attribute
from  system.repcat$_audit_column r, sys.user$ u
where r.sname = u.name
and   u.user# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_REPCAT"("SNAME","MASTER","STATUS","SCHEMA_COMMENT","GNAME","FNAME","RPC_PROCESSING_DISABLED","OWNER") AS 
select "SNAME","MASTER","STATUS","SCHEMA_COMMENT","GNAME","FNAME","RPC_PROCESSING_DISABLED","OWNER" from USER_REPGROUP;

CREATE OR REPLACE FORCE VIEW "USER_REPCATLOG"("ID","SOURCE","USERID","TIMESTAMP","ROLE","MASTER","SNAME","REQUEST","ONAME","TYPE","STATUS","MESSAGE","ERRNUM","GNAME") AS 
select r.id, r.source, r.userid, r.timestamp, r.role, r.master, r.sname,
  r.request, r.oname, r.type, r.status, r.message, r.errnum, r.gname
from repcat_repcatlog r, user_users u
where r.sname = u.username or r.userid = u.username;

CREATE OR REPLACE FORCE VIEW "USER_REPCAT_REFRESH_TEMPLATES"("REFRESH_TEMPLATE_NAME","OWNER","REFRESH_GROUP_NAME","TEMPLATE_COMMENT","PUBLIC_TEMPLATE") AS 
select refresh_template_name,owner,refresh_group_name,template_comment,
 nvl(public_template,'N') public_template
from system.repcat$_refresh_templates rt,
  system.repcat$_template_types tt
where public_template = 'Y'
and rt.template_type_id = tt.template_type_id
and bitand(rawtohex(tt.flags),1) = 1
union
select refresh_template_name,owner,refresh_group_name,template_comment,
 nvl(public_template,'N') public_template
from system.repcat$_refresh_templates rt,
  system.repcat$_user_authorizations at,
  sys.all_users au,
  system.repcat$_template_types tt
where at.refresh_template_id = rt.refresh_template_id
and au.user_id = at.user_id
and nvl(rt.public_template,'N') = 'N'
and au.user_id = userenv('SCHEMAID')
and rt.template_type_id = tt.template_type_id
and bitand(rawtohex(tt.flags),1) = 1;

CREATE OR REPLACE FORCE VIEW "USER_REPCAT_TEMPLATE_OBJECTS"("REFRESH_TEMPLATE_NAME","OBJECT_NAME","OBJECT_TYPE","DDL_NUM","DDL_TEXT","MASTER_ROLLBACK_SEGMENT","DERIVED_FROM_SNAME","DERIVED_FROM_ONAME","FLAVOR_ID") AS 
select rt.refresh_template_name,
t.object_name, ot.object_type_name object_type,
t.ddl_num, t.ddl_text,t.master_rollback_seg,
t.derived_from_sname,t.derived_from_oname,t.flavor_id
from system.repcat$_refresh_templates rt,
  system.repcat$_template_objects t,
  system.repcat$_object_types ot,
 system.repcat$_template_types tt
where t.refresh_template_id = rt.refresh_template_id
and rt.template_type_id = tt.template_type_id
and bitand(rawtohex(tt.flags),1) = 1
and ot.object_type_id = t.object_type
and rt.refresh_template_id in
  (select rt.refresh_template_id
   from system.repcat$_refresh_templates rt
   where public_template = 'Y'
   union
   select rt.refresh_template_id
   from system.repcat$_refresh_templates rt,
   system.repcat$_user_authorizations at,
   sys.all_users au
   where at.refresh_template_id = rt.refresh_template_id
   and au.user_id = at.user_id
   and nvl(rt.public_template,'N') = 'N'
   and au.user_id = userenv('SCHEMAID'));

CREATE OR REPLACE FORCE VIEW "USER_REPCAT_TEMPLATE_PARMS"("REFRESH_TEMPLATE_NAME","OWNER","REFRESH_GROUP_NAME","TEMPLATE_COMMENT","PUBLIC_TEMPLATE","PARAMETER_NAME","DEFAULT_PARM_VALUE","PROMPT_STRING","USER_OVERRIDE") AS 
select rt.refresh_template_name,rt.owner,
  rt.refresh_group_name,rt.template_comment,
  nvl(rt.public_template,'N'),tp.parameter_name,
  tp.default_parm_value, tp.prompt_string, tp.user_override
from system.repcat$_refresh_templates rt,
  system.repcat$_template_parms tp,
  system.repcat$_template_types tt
where tp.refresh_template_id = rt.refresh_template_id
and rt.template_type_id = tt.template_type_id
and bitand(rawtohex(tt.flags),1) = 1
and rt.refresh_template_id in
  (select rt.refresh_template_id
   from system.repcat$_refresh_templates rt
   where public_template = 'Y'
   union
   select rt.refresh_template_id
   from system.repcat$_refresh_templates rt,
   system.repcat$_user_authorizations at,
   sys.all_users au
   where at.refresh_template_id = rt.refresh_template_id
   and au.user_id = at.user_id
   and nvl(rt.public_template,'N') = 'N'
   and au.user_id = userenv('SCHEMAID'));

CREATE OR REPLACE FORCE VIEW "USER_REPCAT_TEMPLATE_SITES"("REFRESH_TEMPLATE_NAME","REFRESH_GROUP_NAME","TEMPLATE_OWNER","USER_NAME","SITE_NAME","REPAPI_SITE_NAME","STATUS","INSTANTIATION_DATE") AS 
select ts.refresh_template_name, ts.refresh_group_name, ts.template_owner,
  ts.user_name,ts.site_name,ss.site_name,
  decode(status,-1,'DELETED',0,'INSTALLING',1,'INSTALLED','UNDEFINED'),
  instantiation_date
from system.repcat$_template_sites ts,
  sys.snap_site$ ss,
  system.repcat$_refresh_templates rt,
  system.repcat$_template_types tt
where ts.repapi_site_id = ss.site_id (+)
and rt.refresh_template_name = ts.refresh_template_name
and rt.template_type_id = tt.template_type_id
and bitand(rawtohex(tt.flags),1) = 1
and rt.refresh_template_id in
  (select rt.refresh_template_id
   from system.repcat$_refresh_templates rt
   where public_template = 'Y'
   union
   select rt.refresh_template_id
   from system.repcat$_refresh_templates rt,
   system.repcat$_user_authorizations at,
   sys.all_users au
   where at.refresh_template_id = rt.refresh_template_id
   and au.user_id = at.user_id
   and nvl(rt.public_template,'N') = 'N'
   and au.user_id = userenv('SCHEMAID'));

CREATE OR REPLACE FORCE VIEW "USER_REPCAT_USER_AUTHORIZATION"("REFRESH_TEMPLATE_NAME","OWNER","REFRESH_GROUP_NAME","TEMPLATE_COMMENT","PUBLIC_TEMPLATE","USER_NAME") AS 
select rt.refresh_template_name,rt.owner,rt.refresh_group_name,
  rt.template_comment, nvl(rt.public_template,'N'),
  u.username
from system.repcat$_refresh_templates rt,
  all_users u,
  system.repcat$_user_authorizations ra,
  system.repcat$_template_types tt
where u.user_id = ra.user_id
and rt.template_type_id = tt.template_type_id
and bitand(rawtohex(tt.flags),1) = 1
and ra.refresh_template_id = rt.refresh_template_id
and rt.refresh_template_id in
  (select rt.refresh_template_id
   from system.repcat$_refresh_templates rt
   where public_template = 'Y'
   union
   select rt.refresh_template_id
   from system.repcat$_refresh_templates rt,
   system.repcat$_user_authorizations at,
   sys.all_users au
   where at.refresh_template_id = rt.refresh_template_id
   and au.user_id = at.user_id
   and nvl(rt.public_template,'N') = 'N'
   and au.user_id = userenv('SCHEMAID'));

CREATE OR REPLACE FORCE VIEW "USER_REPCAT_USER_PARM_VALUES"("REFRESH_TEMPLATE_NAME","OWNER","REFRESH_GROUP_NAME","TEMPLATE_COMMENT","PUBLIC_TEMPLATE","PARAMETER_NAME","DEFAULT_PARM_VALUE","PROMPT_STRING","PARM_VALUE","USER_NAME") AS 
select rt.refresh_template_name,rt.owner,
rt.refresh_group_name,rt.template_comment,
nvl(rt.public_template,'N'),tp.parameter_name,
tp.default_parm_value, tp.prompt_string, sp.parm_value,
u.username
from system.repcat$_refresh_templates rt,
  system.repcat$_template_parms tp,
  system.repcat$_user_parm_values sp,
  dba_users  u,
  system.repcat$_template_types tt
where tp.refresh_template_id = rt.refresh_template_id
and tp.template_parameter_id = sp.template_parameter_id
and rt.template_type_id = tt.template_type_id
and bitand(rawtohex(tt.flags),1) = 1
and sp.user_id = u.user_id
and rt.refresh_template_id in
  (select rt.refresh_template_id
   from system.repcat$_refresh_templates rt
   where public_template = 'Y'
   union
   select rt.refresh_template_id
   from system.repcat$_refresh_templates rt,
   system.repcat$_user_authorizations at,
   sys.all_users au
   where at.refresh_template_id = rt.refresh_template_id
   and au.user_id = at.user_id
   and nvl(rt.public_template,'N') = 'N'
   and au.user_id = userenv('SCHEMAID'));

CREATE OR REPLACE FORCE VIEW "USER_REPCOLUMN"("SNAME","ONAME","TYPE","CNAME","ID","POS","COMPARE_OLD_ON_DELETE","COMPARE_OLD_ON_UPDATE","SEND_OLD_ON_DELETE","SEND_OLD_ON_UPDATE","CTYPE","CTYPE_TOID","CTYPE_OWNER","CTYPE_HASHCODE","CTYPE_MOD","DATA_LENGTH","DATA_PRECISION","DATA_SCALE","NULLABLE","CHARACTER_SET_NAME","TOP","CHAR_LENGTH","CHAR_USED") AS 
select
 r.sname, r.oname, r.type, r.cname, r.id, r.pos, r.compare_old_on_delete,
 r.compare_old_on_update, r.send_old_on_delete, r.send_old_on_update,
 r.ctype, r.ctype_toid, r.ctype_owner, r.ctype_hashcode,
 r.ctype_mod, r.data_length, r.data_precision, r.data_scale, r.nullable,
 r.character_set_name, r.top, r.char_length, r.char_used
from user_tab_columns tc, sys.dba_repcolumn r, sys.user$ u
where r.sname = u.name
  and u.user# = userenv('SCHEMAID')
  and r.oname = tc.table_name
  and ((r.top IS NOT NULL AND r.top = tc.column_name) OR
       (r.top IS NULL AND r.cname = tc.column_name))
union
select
 r.sname, r.oname, r.type, r.cname, r.id, r.pos, r.compare_old_on_delete,
 r.compare_old_on_update, r.send_old_on_delete, r.send_old_on_update,
 r.ctype, r.ctype_toid, r.ctype_owner, r.ctype_hashcode,
 r.ctype_mod, r.data_length, r.data_precision, r.data_scale, r.nullable,
 r.character_set_name, r.top, r.char_length, r.char_used
from "_USER_REPL_NESTED_TABLE_NAMES" nt, sys.dba_repcolumn r, sys.user$ u
where r.sname = u.name
  and u.user# = userenv('SCHEMAID')
  and r.oname = nt.table_name;

CREATE OR REPLACE FORCE VIEW "USER_REPCOLUMN_GROUP"("ONAME","GROUP_NAME","GROUP_COMMENT") AS 
select
    r.oname,
    r.group_name,
    r.group_comment
from  system.repcat$_column_group r, sys.user$ u
where r.sname = u.name
and   u.user# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_REPCONFLICT"("ONAME","CONFLICT_TYPE","REFERENCE_NAME") AS 
select
    r.oname,
    decode(r.conflict_type_id,
           1, 'UPDATE',
           2, 'UNIQUENESS',
           3, 'DELETE',
           'UNDEFINED'),
    r.reference_name
from  system.repcat$_conflict r, user$ u
where r.sname = u.name
and   u.user# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_REPDDL"("LOG_ID","SOURCE","ROLE","MASTER","LINE","TEXT","DDL_NUM") AS 
select r.log_id, r.source, r.role, r.master, r.line, r.text, r.ddl_num
from system.repcat$_ddl r, user_repcatlog u
where r.log_id = u.id
  and r.source = u.source;

CREATE OR REPLACE FORCE VIEW "USER_REPFLAVORS"("FLAVOR_ID","GNAME","FNAME","CREATION_DATE","CREATED_BY","PUBLISHED","GROUP_OWNER") AS 
select f.flavor_id, f.gname, f.fname, f.creation_date,
 u.name, f.published, f.gowner
from system.repcat$_flavors f, sys.user$ u
where f.created_by = userenv('SCHEMAID')
and   f.created_by = u.user#;

CREATE OR REPLACE FORCE VIEW "USER_REPFLAVOR_COLUMNS"("FNAME","GNAME","SNAME","ONAME","CNAME","TYPE","POS","GROUP_OWNER","TYPE_TOID","TYPE_OWNER","TYPE_HASHCODE","TYPE_MOD","TOP") AS 
SELECT fc.fname, fc.gname, fc.sname, fc.oname, fc.cname, fc.type, fc.pos,
         fc.group_owner, fc.type_toid, fc.type_owner,
         fc.type_hashcode, fc.type_mod, fc.top
    FROM user_tab_columns tc, dba_repflavor_columns fc, sys.user$ u
    WHERE fc.sname = u.name
      AND u.user#  = userenv('SCHEMAID')
      AND fc.oname = tc.table_name
      AND ((fc.top IS NOT NULL AND fc.top = tc.column_name) OR
           (fc.top IS NULL AND fc.cname = tc.column_name))
UNION
  SELECT fc.fname, fc.gname, fc.sname, fc.oname, fc.cname, fc.type, fc.pos,
         fc.group_owner, fc.type_toid, fc.type_owner,
         fc.type_hashcode, fc.type_mod, fc.top
    FROM "_USER_REPL_NESTED_TABLE_NAMES" nt, dba_repflavor_columns fc,
          sys.user$ u
    WHERE fc.sname = u.name
      AND  u.user#  = userenv('SCHEMAID')
      AND fc.oname = nt.table_name;

CREATE OR REPLACE FORCE VIEW "USER_REPFLAVOR_OBJECTS"("FNAME","GNAME","SNAME","ONAME","TYPE","GROUP_OWNER") AS 
SELECT UNIQUE fo.fname, fo.gname, fo.sname, fo.oname,
       fo.type, fo.group_owner
from dba_repflavor_objects fo, user_objects o, sys.user$ u
where fo.sname = u.name
  and u.user#  = userenv('SCHEMAID')
  and fo.oname = o.object_name
  and (fo.type = o.object_type OR
       fo.type = 'SNAPSHOT' and o.object_type IN ('VIEW', 'TABLE'));

CREATE OR REPLACE FORCE VIEW "USER_REPGENERATED"("SNAME","ONAME","TYPE","BASE_SNAME","BASE_ONAME","BASE_TYPE","PACKAGE_PREFIX","PROCEDURE_PREFIX","DISTRIBUTED","REASON") AS 
select r.sname, r.oname, r.type, r.base_sname, r.base_oname, r.base_type,
  r.package_prefix, r.procedure_prefix, r.distributed, r.reason
from repcat_generated r, user_users u
where r.base_sname = u.username
and ((r.reason  = 'PROCEDURAL REPLICATION WRAPPER' and r.type != 'SYNONYM')
   or r.reason != 'PROCEDURAL REPLICATION WRAPPER');

CREATE OR REPLACE FORCE VIEW "USER_REPGENOBJECTS"("SNAME","ONAME","TYPE","BASE_SNAME","BASE_ONAME","BASE_TYPE","PACKAGE_PREFIX","PROCEDURE_PREFIX","DISTRIBUTED","REASON") AS 
select r.sname, r.oname, r.type, r.base_sname, r.base_oname, r.base_type,
  r.package_prefix, r.procedure_prefix, r.distributed, r.reason
from repcat_generated r, user_users u
where r.base_sname = u.username;

CREATE OR REPLACE FORCE VIEW "USER_REPGROUP"("SNAME","MASTER","STATUS","SCHEMA_COMMENT","GNAME","FNAME","RPC_PROCESSING_DISABLED","OWNER") AS 
select r.sname, r.master, r.status, r.schema_comment, r.sname, r.fname,
       r.rpc_processing_disabled, r.gowner
from repcat_repcat r, user_users u
where (r.sname = u.username)
   or r.gowner in
      (select name from user$
        where user# = userenv('SCHEMAID') and type# = 1);

CREATE OR REPLACE FORCE VIEW "USER_REPGROUPED_COLUMN"("ONAME","GROUP_NAME","COLUMN_NAME") AS 
select
    g.oname,
    g.group_name,
    g.column_name
from  user_tab_columns tc, sys.dba_repgrouped_column g, sys.user$ u
where g.sname = u.name
  and u.user# = userenv('SCHEMAID')
  and g.oname = tc.table_name
  and g.column_name = tc.column_name
union
select
    g.oname,
    g.group_name,
    g.column_name
from  "_USER_REPL_NESTED_TABLE_NAMES" nt, sys.dba_repgrouped_column g,
      sys.user$ u
where g.sname = u.name
  and u.user# = userenv('SCHEMAID')
  and g.oname = nt.table_name;

CREATE OR REPLACE FORCE VIEW "USER_REPGROUP_PRIVILEGES"("USERNAME","GNAME","CREATED","RECEIVER","PROXY_SNAPADMIN","OWNER") AS 
select u.username, rp.gname, rp.created,
       decode(bitand(rp.privilege, 1), 1, 'Y', 'N'),
       decode(bitand(rp.privilege, 2), 2, 'Y', 'N'),
       rp.gowner
from system.repcat$_repgroup_privs rp, all_users u
where rp.username = u.username
  and u.user_id =  userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_REPKEY_COLUMNS"("SNAME","ONAME","COL") AS 
select r.sname, r.oname, r.col
from sys.dba_repkey_columns r, user_users u
where r.sname = u.username;

CREATE OR REPLACE FORCE VIEW "USER_REPOBJECT"("SNAME","ONAME","TYPE","STATUS","GENERATION_STATUS","ID","OBJECT_COMMENT","GNAME","MIN_COMMUNICATION","REPLICATION_TRIGGER_EXISTS","INTERNAL_PACKAGE_EXISTS","GROUP_OWNER","NESTED_TABLE") AS 
select r.sname, r.oname, r.type, r.status, r.generation_status, r.id,
       r.object_comment, r.gname, r.min_communication, r.trigflag,
       r.internal_package_exists, r.gowner, r.nested_table
from repcat_repobject r, user_users u
where r.sname = u.username
  and r.type != 'INTERNAL PACKAGE';

CREATE OR REPLACE FORCE VIEW "USER_REPPARAMETER_COLUMN"("SNAME","ONAME","CONFLICT_TYPE","REFERENCE_NAME","SEQUENCE_NO","METHOD_NAME","FUNCTION_NAME","PRIORITY_GROUP","PARAMETER_TABLE_NAME","PARAMETER_COLUMN_NAME","PARAMETER_SEQUENCE_NO") AS 
select
    p.sname,
    p.oname,
    decode(p.conflict_type_id,
           1, 'UPDATE',
           2, 'UNIQUENESS',
           3, 'DELETE',
           'UNDEFINED'),
    p.reference_name,
    p.sequence_no,
    r.method_name,
    r.function_name,
    r.priority_group,
    p.parameter_table_name,
    decode(method_name, 'USER FUNCTION', NVL(rc.top, rc.lcname),
                        'USER FLAVOR FUNCTION', NVL(rc.top, rc.lcname),
           rc.lcname),
    p.parameter_sequence_no
from  system.repcat$_parameter_column p,
      system.repcat$_resolution r,
      system.repcat$_repcolumn rc,
      user_tab_columns tc,
      sys.user$ u
where p.sname = r.sname
and   p.oname = r.oname
and   p.conflict_type_id = r.conflict_type_id
and   p.reference_name = r.reference_name
and   p.sequence_no = r.sequence_no
and   p.oname = p.parameter_table_name
and   p.attribute_sequence_no = 1
and   p.sname = rc.sname
and   p.oname = rc.oname
and   p.column_pos = rc.pos
and   p.sname = u.name
and   u.user# = userenv('SCHEMAID')
and   p.oname = tc.table_name
and   ((rc.top is null and rc.lcname = tc.column_name) or
       (rc.top is not null and rc.top = tc.column_name))
union
  select p.sname, p.oname, p.conflict_type, p.reference_name, p.sequence_no,
         p.method_name, p.function_name, p.priority_group,
         p.parameter_table_name, p.parameter_column_name,
         p.parameter_sequence_no
from  "_USER_REPL_NESTED_TABLE_NAMES" nt, dba_repparameter_column p,
      sys.user$ u
where p.sname = u.name
  and u.user# = userenv('SCHEMAID')
  and p.parameter_table_name = nt.table_name
  and p.oname = p.parameter_table_name;

CREATE OR REPLACE FORCE VIEW "USER_REPPRIORITY"("PRIORITY_GROUP","PRIORITY","DATA_TYPE","FIXED_DATA_LENGTH","CHAR_VALUE","VARCHAR2_VALUE","NUMBER_VALUE","DATE_VALUE","RAW_VALUE","NCHAR_VALUE","NVARCHAR2_VALUE","LARGE_CHAR_VALUE") AS 
select
    p.priority_group,
    v.priority,
    decode(p.data_type_id,
           1, 'NUMBER',
           2, 'VARCHAR2',
           3, 'DATE',
           4, 'CHAR',
           5, 'RAW',
           6, 'NVARCHAR2',
           7, 'NCHAR',
           'UNDEFINED'),
    p.fixed_data_length,
    v.char_value,
    v.varchar2_value,
    v.number_value,
    v.date_value,
    v.raw_value,
    v.nchar_value,
    v.nvarchar2_value,
    v.large_char_value
from  system.repcat$_priority v,
      system.repcat$_priority_group p,
      sys.user$ u
where v.sname = u.name
and   p.sname = u.name
and   u.user# = userenv('SCHEMAID')
and   v.priority_group = p.priority_group;

CREATE OR REPLACE FORCE VIEW "USER_REPPRIORITY_GROUP"("PRIORITY_GROUP","DATA_TYPE","FIXED_DATA_LENGTH","PRIORITY_COMMENT") AS 
select
    r.priority_group,
    decode(r.data_type_id,
           1, 'NUMBER',
           2, 'VARCHAR2',
           3, 'DATE',
           4, 'CHAR',
           5, 'RAW',
           6, 'NVARCHAR2',
           7, 'NCHAR',
           'UNDEFINED'),
    r.fixed_data_length,
    r.priority_comment
from  system.repcat$_priority_group r, sys.user$ u
where r.sname = u.name
and   u.user# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_REPPROP"("SNAME","ONAME","TYPE","DBLINK","HOW","PROPAGATE_COMMENT") AS 
select r.sname, r.oname, r.type, r.dblink, r.how, r.propagate_comment
from repcat_repprop r, repcat_repobject ro, user_users u
where r.sname = u.username
  and r.sname = ro.sname
  and r.oname = ro.oname
  and r.type = ro.type
  and ro.type in ('PROCEDURE', 'PACKAGE', 'PACKAGE BODY', 'TABLE', 'SNAPSHOT');

CREATE OR REPLACE FORCE VIEW "USER_REPRESOLUTION"("ONAME","CONFLICT_TYPE","REFERENCE_NAME","SEQUENCE_NO","METHOD_NAME","FUNCTION_NAME","PRIORITY_GROUP","RESOLUTION_COMMENT") AS 
select
    r.oname,
    decode(r.conflict_type_id,
           1, 'UPDATE',
           2, 'UNIQUENESS',
           3, 'DELETE',
           'UNDEFINED'),
    r.reference_name,
    r.sequence_no,
    r.method_name,
    r.function_name,
    r.priority_group,
    r.resolution_comment
from  system.repcat$_resolution r, sys.user$ u
where r.sname = u.name
and   u.user# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_REPRESOLUTION_METHOD"("CONFLICT_TYPE","METHOD_NAME") AS 
select
    decode(conflict_type_id,
           1, 'UPDATE',
           2, 'UNIQUENESS',
           3, 'DELETE',
           'UNDEFINED'),
    method_name
from  system.repcat$_resolution_method;

CREATE OR REPLACE FORCE VIEW "USER_REPRESOLUTION_STATISTICS"("ONAME","CONFLICT_TYPE","REFERENCE_NAME","METHOD_NAME","FUNCTION_NAME","PRIORITY_GROUP","RESOLVED_DATE","PRIMARY_KEY_VALUE") AS 
select
    r.oname,
    decode(r.conflict_type_id,
           1, 'UPDATE',
           2, 'UNIQUENESS',
           3, 'DELETE',
           'UNDEFINED'),
    r.reference_name,
    r.method_name,
    decode(r.method_name,
           'USER FUNCTION', r.function_name,
           'USER FLAVOR FUNCTION', r.function_name,
           NULL),
    r.priority_group,
    r.resolved_date,
    r.primary_key_value
from  system.repcat$_resolution_statistics r, sys.user$ u
where r.sname = u.name
and   u.user# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_REPRESOL_STATS_CONTROL"("ONAME","CREATED","STATUS","STATUS_UPDATE_DATE","PURGED_DATE","LAST_PURGE_START_DATE","LAST_PURGE_END_DATE") AS 
select
    r.oname,
    r.created,
    decode(r.status,
           1, 'ACTIVE',
           2, 'CANCELLED',
           'UNDEFINED'),
    r.status_update_date,
    r.purged_date,
    r.last_purge_start_date,
    r.last_purge_end_date
from  system.repcat$_resol_stats_control r, sys.user$ u
where r.sname = u.name
and   u.user# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_REPSCHEMA"("SNAME","DBLINK","MASTERDEF","SNAPMASTER","MASTER_COMMENT","GNAME","MASTER","GROUP_OWNER") AS 
select r.sname, r.dblink, r.masterdef, r.snapmaster, r.master_comment, r.sname,
       r.master, r.gowner
from repcat_repschema r, user_users u
where (r.sname = u.username)
   or r.gowner in
      (select name from user$
        where user# = userenv('SCHEMAID') and type# = 1);

CREATE OR REPLACE FORCE VIEW "USER_REPSITES"("GNAME","DBLINK","MASTERDEF","SNAPMASTER","MASTER_COMMENT","MASTER","GROUP_OWNER") AS 
select r.sname, r.dblink, r.masterdef, r.snapmaster, r.master_comment,
       r.master, r.gowner
from repcat_repschema r, user_users u
where (r.sname = u.username)
   or r.gowner in
      (select name from user$
        where user# = userenv('SCHEMAID') and type# = 1);

CREATE OR REPLACE FORCE VIEW "USER_RESOURCE_LIMITS"("RESOURCE_NAME","LIMIT") AS 
select m.name,
          decode (u.limit#, 2147483647, 'UNLIMITED',
                           0, decode (p.limit#, 2147483647, 'UNLIMITED',
                                               p.limit#),
                           u.limit#)
  from sys.profile$ u, sys.profile$ p,
       sys.resource_map m, user$ s
  where u.resource# = m.resource#
  and p.profile# = 0
  and p.resource# = u.resource#
  and u.type# = p.type#
  and p.type# = 0
  and m.type# = 0
  and s.resource$ = u.profile#
  and s.user# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_RESUMABLE"("SESSION_ID","INSTANCE_ID","COORD_INSTANCE_ID","COORD_SESSION_ID","STATUS","TIMEOUT","START_TIME","SUSPEND_TIME","RESUME_TIME","NAME","SQL_TEXT","ERROR_NUMBER","ERROR_PARAMETER1","ERROR_PARAMETER2","ERROR_PARAMETER3","ERROR_PARAMETER4","ERROR_PARAMETER5","ERROR_MSG") AS 
select distinct R.SID as SESSION_ID,
       R.INST_ID as INSTANCE_ID, P.QCINST_ID, P.QCSID,
       R.STATUS, R.TIMEOUT, NVL(T.START_TIME, R.SUSPEND_TIME) as START_TIME,
       R.SUSPEND_TIME, R.RESUME_TIME, R.NAME, Q.SQL_TEXT, R.ERROR_NUMBER,
       R.ERROR_PARAMETER1, R.ERROR_PARAMETER2, R.ERROR_PARAMETER3,
       R.ERROR_PARAMETER4, R.ERROR_PARAMETER5, R.ERROR_MSG
from GV$RESUMABLE R, GV$SESSION S, GV$TRANSACTION T, GV$SQL Q, GV$PX_SESSION P
where S.SID=R.SID and S.INST_ID=R.INST_ID
      and S.SADDR=T.SES_ADDR(+) and S.INST_ID=T.INST_ID(+)
      and S.SQL_ADDRESS=Q.ADDRESS(+) and S.INST_ID=Q.INST_ID(+)
      and S.SADDR=P.SADDR(+) and S.INST_ID=P.INST_ID(+)
      and R.ENABLED='YES' and NVL(T.SPACE,'NO')='NO'
      and S.USER# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_REWRITE_EQUIVALENCES"("OWNER","NAME","SOURCE_STMT","DESTINATION_STMT","REWRITE_MODE") AS 
select m."OWNER",m."NAME",m."SOURCE_STMT",m."DESTINATION_STMT",m."REWRITE_MODE" from dba_rewrite_equivalences m, sys.user$ u
where u.name = m.owner
  and u.user# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_ROLE_PRIVS"("USERNAME","GRANTED_ROLE","ADMIN_OPTION","DEFAULT_ROLE","OS_GRANTED") AS 
select /*+ ordered */ decode(sa.grantee#, 1, 'PUBLIC', u1.name), u2.name,
       decode(min(option$), 1, 'YES', 'NO'),
       decode(min(u1.defrole), 0, 'NO', 1, 'YES',
              2, decode(min(ud.role#),null,'NO','YES'),
              3, decode(min(ud.role#),null,'YES','NO'), 'NO'), 'NO'
from sysauth$ sa, user$ u1, user$ u2, defrole$ ud
where sa.grantee# in (userenv('SCHEMAID'),1) and sa.grantee#=ud.user#(+)
  and sa.privilege#=ud.role#(+) and u1.user#=sa.grantee#
  and u2.user#=sa.privilege#
group by decode(sa.grantee#,1,'PUBLIC',u1.name),u2.name
union
select su.name,u.name,decode(kzdosadm,'A','YES','NO'),
       decode(kzdosdef,'Y','YES','NO'), 'YES'
 from sys.user$ u,x$kzdos, sys.user$ su
where u.user#=x$kzdos.kzdosrol and
      su.user#=userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_RSRC_CONSUMER_GROUP_PRIVS"("GRANTED_GROUP","GRANT_OPTION","INITIAL_GROUP") AS 
select g.name, decode(mod(o.option$,2),1,'YES','NO'),
       decode(nvl(cgm.consumer_group, 'DEFAULT_CONSUMER_GROUP'),
              g.name, 'YES', 'NO')
from sys.user$ u left outer join sys.resource_group_mapping$ cgm on
     (cgm.attribute = 'ORACLE_USER' and cgm.status = 'ACTIVE' and
      cgm.value = u.name), sys.resource_consumer_group$ g, sys.objauth$ o
where o.obj# = g.obj# and o.grantee# = u.user#
and o.grantee# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_RSRC_MANAGER_SYSTEM_PRIVS"("PRIVILEGE","ADMIN_OPTION") AS 
select spm.name,decode(min(sa.option$),1,'YES','NO')
from sys.user$ u, system_privilege_map spm, sys.sysauth$ sa
where sa.grantee# = u.user# and sa.privilege# = spm.privilege
and sa.privilege# = -227 and sa.grantee# = userenv('SCHEMAID')
group by spm.name;

CREATE OR REPLACE FORCE VIEW "USER_RULES"("RULE_NAME","RULE_CONDITION","RULE_EVALUATION_CONTEXT_OWNER","RULE_EVALUATION_CONTEXT_NAME","RULE_ACTION_CONTEXT","RULE_COMMENT") AS 
SELECT /*+ all_rows */
       o.name, r.condition, bu.name, bo.name, r.r_action, r.r_comment
FROM   rule$ r, obj$ o, obj$ bo, user$ bu
WHERE  r.obj# = o.obj# and o.owner# = USERENV('SCHEMAID') and
       r.ectx# = bo.obj#(+) and bo.owner# = bu.user#(+);

CREATE OR REPLACE FORCE VIEW "USER_RULESETS"("RULESET_NAME","RULESET_STORAGE_TABLE","BASE_TABLE","RULESET_COMMENT") AS 
SELECT rule_set_name, NULL,
       decode(rule_set_eval_context_owner, NULL, NULL,
              rule_set_eval_context_owner||'.'||rule_set_eval_context_name),
       rule_set_comment
FROM   user_rule_sets;

CREATE OR REPLACE FORCE VIEW "USER_RULE_SETS"("RULE_SET_NAME","RULE_SET_EVAL_CONTEXT_OWNER","RULE_SET_EVAL_CONTEXT_NAME","RULE_SET_COMMENT") AS 
SELECT /*+ all_rows */ o.name, bu.name, bo.name, r.rs_comment
FROM   rule_set$ r, obj$ o, obj$ bo, user$ bu
WHERE  r.obj# = o.obj# and o.owner# = USERENV('SCHEMAID')
       and r.ectx# = bo.obj#(+) and bo.owner# = bu.user#(+);

CREATE OR REPLACE FORCE VIEW "USER_RULE_SET_RULES"("RULE_SET_NAME","RULE_OWNER","RULE_NAME","RULE_SET_RULE_ENABLED","RULE_SET_RULE_EVAL_CTX_OWNER","RULE_SET_RULE_EVAL_CTX_NAME","RULE_SET_RULE_COMMENT") AS 
SELECT /*+ all_rows */
       o.name, ru.name, ro.name,
       decode(bitand(rm.property, 1), 1, 'DISABLED', 'ENABLED'),
       eu.name, eo.name, rm.rm_comment
FROM   rule_map$ rm, obj$ o, obj$ ro, user$ ru, obj$ eo, user$ eu
WHERE  rm.rs_obj# = o.obj# and o.owner# = USERENV('SCHEMAID') and
       rm.r_obj# = ro.obj# and ro.owner# = ru.user# and rm.ectx# = eo.obj#(+)
       and eo.owner# = eu.user#(+);

CREATE OR REPLACE FORCE VIEW "USER_SCHEDULER_JOBS"("JOB_NAME","JOB_CREATOR","CLIENT_ID","GLOBAL_UID","PROGRAM_OWNER","PROGRAM_NAME","JOB_TYPE","JOB_ACTION","NUMBER_OF_ARGUMENTS","SCHEDULE_OWNER","SCHEDULE_NAME","START_DATE","REPEAT_INTERVAL","END_DATE","JOB_CLASS","ENABLED","AUTO_DROP","RESTARTABLE","STATE","JOB_PRIORITY","RUN_COUNT","MAX_RUNS","FAILURE_COUNT","MAX_FAILURES","RETRY_COUNT","LAST_START_DATE","LAST_RUN_DURATION","NEXT_RUN_DATE","SCHEDULE_LIMIT","MAX_RUN_DURATION","LOGGING_LEVEL","STOP_ON_WINDOW_CLOSE","INSTANCE_STICKINESS","SYSTEM","JOB_WEIGHT","NLS_ENV","SOURCE","DESTINATION","COMMENTS","FLAGS") AS 
SELECT jo.name, j.creator, j.client_id, j.guid,
    DECODE(bitand(j.flags,4194304),4194304,
      substr(j.program_action,1,instr(j.program_action,'"')-1),NULL),
    DECODE(bitand(j.flags,4194304),4194304,
      substr(j.program_action,instr(j.program_action,'"')+1,
        length(j.program_action)-instr(j.program_action,'"')) ,NULL),
    DECODE(BITAND(j.flags,131072+262144+2097152),
      131072, 'PLSQL_BLOCK', 262144, 'STORED_PROCEDURE',
      2097152, 'EXECUTABLE', 524288, 'JOB_CHAIN', NULL),
    DECODE(bitand(j.flags,4194304),0,j.program_action,NULL), j.number_of_args,
    DECODE(bitand(j.flags,1024+4096),0,NULL,
      substr(j.schedule_expr,1,instr(j.schedule_expr,'"')-1)),
    DECODE(bitand(j.flags,1024+4096),0,NULL,
      substr(j.schedule_expr,instr(j.schedule_expr,'"') + 1,
        length(j.schedule_expr)-instr(j.schedule_expr,'"'))),
    j.start_date,
    DECODE(BITAND(j.flags,1024+4096), 0, j.schedule_expr, NULL),
    j.end_date, co.name,
    DECODE(BITAND(j.job_status,1+8388608),0,'FALSE','TRUE'),
    DECODE(BITAND(j.flags,32768),0,'TRUE','FALSE'),
    DECODE(BITAND(j.flags,65536),0,'FALSE','TRUE'),
    DECODE(BITAND(j.job_status,1+2+4+8+16+32+128),0,'DISABLED',1,
      (CASE WHEN j.retry_count>0 THEN 'RETRY SCHEDULED' ELSE 'SCHEDULED' END),
      2,'RUNNING',3,'RUNNING',4,'COMPLETED',8,'BROKEN',16,'FAILED',32,'SUCCEEDED'
      ,128,'REMOTE',NULL),
    j.priority, j.run_count, j.max_runs, j.failure_count, j.max_failures,
    j.retry_count,
    j.last_start_date,
    (CASE WHEN j.last_end_date>j.last_start_date THEN j.last_end_date-j.last_start_date
       ELSE NULL END), j.next_run_date,
    j.schedule_limit, j.max_run_duration,
    DECODE(BITAND(j.flags,32+64+128+256),32,'OFF',64,'RUNS',128,'',
      256,'FULL',NULL),
    DECODE(BITAND(j.flags,8),0,'FALSE','TRUE'),
    DECODE(BITAND(j.flags,16),0,'FALSE','TRUE'),
    DECODE(BITAND(j.flags,16777216),0,'FALSE','TRUE'),
    j.job_weight, j.nls_env,
    j.source, j.destination, j.comments, j.flags
  FROM sys.scheduler$_job j, obj$ jo, obj$ co
  WHERE j.obj# = jo.obj# AND
    j.class_oid = co.obj#(+) AND jo.owner# = USERENV('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_SCHEDULER_JOB_ARGS"("JOB_NAME","ARGUMENT_NAME","ARGUMENT_POSITION","ARGUMENT_TYPE","VALUE","ANYDATA_VALUE","OUT_ARGUMENT") AS 
SELECT o.name, b.name, t.position,
  CASE WHEN (b.user_type_num IS NULL) THEN
    DECODE(b.type_number,
0, null,
1, decode(b.flags, 512, 'NVARCHAR2', 'VARCHAR2'),
2, decode(b.flags, 512, 'FLOAT', 'NUMBER'),
3, 'NATIVE INTEGER',
8, 'LONG',
9, decode(b.flags, 512, 'NCHAR VARYING', 'VARCHAR'),
11, 'ROWID',
12, 'DATE',
23, 'RAW',
24, 'LONG RAW',
29, 'BINARY_INTEGER',
69, 'ROWID',
96, decode(b.flags, 512, 'NCHAR', 'CHAR'),
100, 'BINARY_FLOAT',
101, 'BINARY_DOUBLE',
102, 'REF CURSOR',
104, 'UROWID',
105, 'MLSLABEL',
106, 'MLSLABEL',
110, 'REF',
111, 'REF',
112, decode(b.flags, 512, 'NCLOB', 'CLOB'),
113, 'BLOB', 114, 'BFILE', 115, 'CFILE',
121, 'OBJECT',
122, 'TABLE',
123, 'VARRAY',
178, 'TIME',
179, 'TIME WITH TIME ZONE',
180, 'TIMESTAMP',
181, 'TIMESTAMP WITH TIME ZONE',
231, 'TIMESTAMP WITH LOCAL TIME ZONE',
182, 'INTERVAL YEAR TO MONTH',
183, 'INTERVAL DAY TO SECOND',
250, 'PL/SQL RECORD',
251, 'PL/SQL TABLE',
252, 'PL/SQL BOOLEAN',
'UNDEFINED')
    ELSE t_u.name ||'.'|| t_o.name END,
  dbms_scheduler.get_varchar2_value(t.value), t.value,
  DECODE(BITAND(b.flags,1),0,'FALSE',1,'TRUE')
  FROM  sys.scheduler$_program_argument b, obj$ t_o, user$ t_u,
    (SELECT a.oid job_oid, a.position position,
      j.program_oid program_oid, a.value value
    FROM sys.scheduler$_job_argument a,  sys.scheduler$_job j
    WHERE a.oid = j.obj#) t,
   obj$ o
  WHERE t.job_oid = o.obj# AND o.owner# = USERENV('SCHEMAID')
    AND b.user_type_num = t_o.obj#(+) AND t_o.owner# = t_u.user#(+)
    AND t.program_oid=b.oid(+) AND t.position=b.position(+);

CREATE OR REPLACE FORCE VIEW "USER_SCHEDULER_JOB_LOG"("LOG_ID","LOG_DATE","OWNER","JOB_NAME","JOB_CLASS","OPERATION","STATUS","USER_NAME","CLIENT_ID","GLOBAL_UID","ADDITIONAL_INFO") AS 
(SELECT
        LOG_ID, LOG_DATE, OWNER,e.NAME,co.NAME, OPERATION,e.STATUS, USER_NAME,
        CLIENT_ID, GUID, ADDITIONAL_INFO
  FROM scheduler$_event_log e, obj$ co
  WHERE e.type# = 66 and e.class_id = co.obj#(+)
  AND owner = SYS_CONTEXT('USERENV','CURRENT_SCHEMA'));

CREATE OR REPLACE FORCE VIEW "USER_SCHEDULER_JOB_RUN_DETAILS"("LOG_ID","LOG_DATE","OWNER","JOB_NAME","STATUS","ERROR#","REQ_START_DATE","ACTUAL_START_DATE","RUN_DURATION","INSTANCE_ID","SESSION_ID","SLAVE_PID","CPU_USED","ADDITIONAL_INFO") AS 
(SELECT
        j.LOG_ID, j.LOG_DATE, e.OWNER, e.NAME, e.STATUS, j.ERROR#,
        j.REQ_START_DATE, j.START_DATE, j.RUN_DURATION, j.INSTANCE_ID,
        j.SESSION_ID, j.SLAVE_PID, j.CPU_USED, j.ADDITIONAL_INFO
   FROM scheduler$_job_run_details j, scheduler$_event_log e
   WHERE j.log_id = e.log_id
   AND e.type# = 66
   AND e.owner = SYS_CONTEXT('USERENV','CURRENT_SCHEMA'));

CREATE OR REPLACE FORCE VIEW "USER_SCHEDULER_PROGRAMS"("PROGRAM_NAME","PROGRAM_TYPE","PROGRAM_ACTION","NUMBER_OF_ARGUMENTS","ENABLED","COMMENTS") AS 
SELECT po.name,
  DECODE(bitand(p.flags,2+4+8+16+32), 2,'PLSQL_BLOCK',
         4,'STORED_PROCEDURE', 32, 'EXECUTABLE', ''),
  p.action, p.number_of_args, DECODE(BITAND(p.flags,1),0,'FALSE',1,'TRUE'),
  p.comments
  FROM obj$ po, sys.scheduler$_program p
  WHERE po.owner# = USERENV('SCHEMAID') AND p.obj# = po.obj#;

CREATE OR REPLACE FORCE VIEW "USER_SCHEDULER_PROGRAM_ARGS"("PROGRAM_NAME","ARGUMENT_NAME","ARGUMENT_POSITION","ARGUMENT_TYPE","METADATA_ATTRIBUTE","DEFAULT_VALUE","DEFAULT_ANYDATA_VALUE","OUT_ARGUMENT") AS 
SELECT o.name, a.name, a.position,
  CASE WHEN (a.user_type_num IS NULL) THEN
    DECODE(a.type_number,
0, null,
1, decode(a.flags, 512, 'NVARCHAR2', 'VARCHAR2'),
2, decode(a.flags, 512, 'FLOAT', 'NUMBER'),
3, 'NATIVE INTEGER',
8, 'LONG',
9, decode(a.flags, 512, 'NCHAR VARYING', 'VARCHAR'),
11, 'ROWID',
12, 'DATE',
23, 'RAW',
24, 'LONG RAW',
29, 'BINARY_INTEGER',
69, 'ROWID',
96, decode(a.flags, 512, 'NCHAR', 'CHAR'),
100, 'BINARY_FLOAT',
101, 'BINARY_DOUBLE',
102, 'REF CURSOR',
104, 'UROWID',
105, 'MLSLABEL',
106, 'MLSLABEL',
110, 'REF',
111, 'REF',
112, decode(a.flags, 512, 'NCLOB', 'CLOB'),
113, 'BLOB', 114, 'BFILE', 115, 'CFILE',
121, 'OBJECT',
122, 'TABLE',
123, 'VARRAY',
178, 'TIME',
179, 'TIME WITH TIME ZONE',
180, 'TIMESTAMP',
181, 'TIMESTAMP WITH TIME ZONE',
231, 'TIMESTAMP WITH LOCAL TIME ZONE',
182, 'INTERVAL YEAR TO MONTH',
183, 'INTERVAL DAY TO SECOND',
250, 'PL/SQL RECORD',
251, 'PL/SQL TABLE',
252, 'PL/SQL BOOLEAN',
'UNDEFINED')
    ELSE t_u.name ||'.'|| t_o.name END,
  DECODE(bitand(a.flags,2+4+64+128+256), 2,'JOB_NAME',4,'JOB_OWNER',
         64, 'JOB_START', 128, 'WINDOW_START',
         256, 'WINDOW_END', ''),
  dbms_scheduler.get_varchar2_value(a.value), a.value,
  DECODE(BITAND(a.flags,1),0,'FALSE',1,'TRUE')
  FROM sys.scheduler$_program_argument a, obj$ t_o, user$ t_u, obj$ o
  WHERE a.oid = o.obj# AND o.owner# = USERENV('SCHEMAID')
    AND a.user_type_num = t_o.obj#(+) AND t_o.owner# = t_u.user#(+);

CREATE OR REPLACE FORCE VIEW "USER_SCHEDULER_RUNNING_JOBS"("JOB_NAME","SESSION_ID","SLAVE_PROCESS_ID","RUNNING_INSTANCE","RESOURCE_CONSUMER_GROUP","ELAPSED_TIME","CPU_USED") AS 
SELECT jo.name, rj.session_id, rj.process_id, rj.inst_id,
      vse.resource_consumer_group,
      CAST (systimestamp-j.last_start_date AS INTERVAL DAY(3) TO SECOND(2)),
      rj.session_stat_cpu
  FROM
        sys.scheduler$_job j,
        obj$ jo,
        gv$scheduler_running_jobs rj,
        gv$session vse
  WHERE
      j.obj# = jo.obj#
  AND rj.job_id = j.obj#
  AND vse.sid = rj.session_id
  AND vse.serial# = rj.session_serial_num
  AND jo.owner# = USERENV('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_SCHEDULER_SCHEDULES"("SCHEDULE_NAME","START_DATE","REPEAT_INTERVAL","END_DATE","COMMENTS") AS 
SELECT so.name, s.reference_date, s.recurrence_expr,
    s.end_date, s.comments
  FROM sys.scheduler$_schedule s, obj$ so
  WHERE s.obj# = so.obj#  AND so.owner# = USERENV('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_SECONDARY_OBJECTS"("INDEX_OWNER","INDEX_NAME","SECONDARY_OBJECT_OWNER","SECONDARY_OBJECT_NAME") AS 
select u.name, o.name, u1.name, o1.name
from   sys.user$ u, sys.obj$ o, sys.user$ u1, sys.obj$ o1, sys.secobj$ s
where  s.obj# = o.obj# and o.owner# = u.user# and
       s.secobj# = o1.obj#  and  o1.owner# = u1.user# and
       o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_SEC_RELEVANT_COLS"("OBJECT_NAME","POLICY_GROUP","POLICY_NAME","SEC_REL_COLUMN","COLUMN_OPTION") AS 
SELECT OBJECT_NAME, POLICY_GROUP, POLICY_NAME, SEC_REL_COLUMN, COLUMN_OPTION
FROM ALL_SEC_RELEVANT_COLS
WHERE
OBJECT_OWNER = SYS_CONTEXT('USERENV','CURRENT_USER');

CREATE OR REPLACE FORCE VIEW "USER_SEGMENTS"("SEGMENT_NAME","PARTITION_NAME","SEGMENT_TYPE","TABLESPACE_NAME","BYTES","BLOCKS","EXTENTS","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENTS","MAX_EXTENTS","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","BUFFER_POOL") AS 
select segment_name, partition_name, segment_type, tablespace_name,
       decode(bitand(segment_flags, 131072), 131072, blocks,
           (decode(bitand(segment_flags,1),1,
            dbms_space_admin.segment_number_blocks(tablespace_id, header_file,
            header_block, segment_type_id, buffer_pool_id, segment_flags,
            segment_objd, blocks), blocks)))*blocksize,
       decode(bitand(segment_flags, 131072), 131072, blocks,
           (decode(bitand(segment_flags,1),1,
            dbms_space_admin.segment_number_blocks(tablespace_id, header_file,
            header_block, segment_type_id, buffer_pool_id, segment_flags,
            segment_objd, blocks), blocks))),
       decode(bitand(segment_flags, 131072), 131072, extents,
           (decode(bitand(segment_flags,1),1,
           dbms_space_admin.segment_number_extents(tablespace_id, header_file,
           header_block, segment_type_id, buffer_pool_id, segment_flags,
           segment_objd, extents) , extents))),
       initial_extent, next_extent,
       min_extents, max_extents, pct_increase, freelists, freelist_groups,
       decode(buffer_pool_id, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL)
from sys_user_segs;

CREATE OR REPLACE FORCE VIEW "USER_SEQUENCES"("SEQUENCE_NAME","MIN_VALUE","MAX_VALUE","INCREMENT_BY","CYCLE_FLAG","ORDER_FLAG","CACHE_SIZE","LAST_NUMBER") AS 
select o.name,
      s.minvalue, s.maxvalue, s.increment$,
      decode (s.cycle#, 0, 'N', 1, 'Y'),
      decode (s.order$, 0, 'N', 1, 'Y'),
      s.cache, s.highwater
from sys.seq$ s, sys.obj$ o
where o.owner# = userenv('SCHEMAID')
  and o.obj# = s.obj#;

CREATE OR REPLACE FORCE VIEW "USER_SNAPSHOTS"("OWNER","NAME","TABLE_NAME","MASTER_VIEW","MASTER_OWNER","MASTER","MASTER_LINK","CAN_USE_LOG","UPDATABLE","REFRESH_METHOD","LAST_REFRESH","ERROR","FR_OPERATIONS","CR_OPERATIONS","TYPE","NEXT","START_WITH","REFRESH_GROUP","UPDATE_TRIG","UPDATE_LOG","QUERY","MASTER_ROLLBACK_SEG","STATUS","REFRESH_MODE","PREBUILT") AS 
select s."OWNER",s."NAME",s."TABLE_NAME",s."MASTER_VIEW",s."MASTER_OWNER",s."MASTER",s."MASTER_LINK",s."CAN_USE_LOG",s."UPDATABLE",s."REFRESH_METHOD",s."LAST_REFRESH",s."ERROR",s."FR_OPERATIONS",s."CR_OPERATIONS",s."TYPE",s."NEXT",s."START_WITH",s."REFRESH_GROUP",s."UPDATE_TRIG",s."UPDATE_LOG",s."QUERY",s."MASTER_ROLLBACK_SEG",s."STATUS",s."REFRESH_MODE",s."PREBUILT" from dba_snapshots s, sys.user$ u
where u.user# = userenv('SCHEMAID')
  and s.owner = u.name;

CREATE OR REPLACE FORCE VIEW "USER_SNAPSHOT_LOGS"("LOG_OWNER","MASTER","LOG_TABLE","LOG_TRIGGER","ROWIDS","PRIMARY_KEY","OBJECT_ID","FILTER_COLUMNS","SEQUENCE","INCLUDE_NEW_VALUES","CURRENT_SNAPSHOTS","SNAPSHOT_ID") AS 
select log_owner, master, log_table, log_trigger, rowids, primary_key,
       object_id, filter_columns, sequence, include_new_values,
       current_snapshots, snapshot_id
from dba_snapshot_logs s, sys.user$ u
where s.log_owner = u.name
  and u.user# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_SOURCE"("NAME","TYPE","LINE","TEXT") AS 
select o.name,
decode(o.type#, 7, 'PROCEDURE', 8, 'FUNCTION', 9, 'PACKAGE',
               11, 'PACKAGE BODY', 12, 'TRIGGER', 13, 'TYPE', 14, 'TYPE BODY',
               'UNDEFINED'),
s.line, s.source
from sys.obj$ o, sys.source$ s
where o.obj# = s.obj#
  and ( o.type# in (7, 8, 9, 11, 12, 14) OR
       ( o.type# = 13 AND o.subname is null))
  and o.owner# = userenv('SCHEMAID')
union all
select o.name, 'JAVA SOURCE', s.joxftlno, s.joxftsrc
from sys.obj$ o, x$joxfs s
where o.obj# = s.joxftobn
  and o.type# = 28
  and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_SOURCE_TABLES"("SOURCE_SCHEMA_NAME","SOURCE_TABLE_NAME") AS 
SELECT DISTINCT
   s.source_schema_name, s.source_table_name
  FROM sys.cdc_change_tables$ s, all_tables t, sys.user$ u
  WHERE s.change_table_schema=t.owner AND
        s.change_table_name=t.table_name AND
        s.change_table_schema = u.name AND
        u.user# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_SQLJ_TYPES"("TYPE_NAME","TYPE_OID","EXTERNAL_NAME","USING","TYPECODE","ATTRIBUTES","METHODS","PREDEFINED","INCOMPLETE","FINAL","INSTANTIABLE","SUPERTYPE_OWNER","SUPERTYPE_NAME","LOCAL_ATTRIBUTES","LOCAL_METHODS") AS 
select o.name, t.toid, t.externname,
       decode(t.externtype, 1, 'SQLData',
                            2, 'CustomDatum',
                            3, 'Serializable',
                            4, 'Serializable Internal',
                            5, 'ORAData',
                            'unknown'),
       decode(t.typecode, 108, 'OBJECT',
                          122, 'COLLECTION',
                          o.name),
       t.attributes, t.methods,
       decode(bitand(t.properties, 16), 16, 'YES', 0, 'NO'),
       decode(bitand(t.properties, 256), 256, 'YES', 0, 'NO'),
       decode(bitand(t.properties, 8), 8, 'NO', 'YES'),
       decode(bitand(t.properties, 65536), 65536, 'NO', 'YES'),
       su.name, so.name, t.local_attrs, t.local_methods
from sys.type$ t, sys.obj$ o, sys.obj$ so, sys.user$ su
where o.owner# = userenv('SCHEMAID')
  and o.oid$ = t.tvoid
  and o.subname IS NULL -- only latest version
  and o.type# <> 10 -- must not be invalid
  and bitand(t.properties, 2048) = 0 -- not system-generated
  and t.supertoid = so.oid$ (+) and so.owner# = su.user# (+)
  and t.externtype < 5;

CREATE OR REPLACE FORCE VIEW "USER_SQLJ_TYPE_ATTRS"("TYPE_NAME","ATTR_NAME","EXTERNAL_ATTR_NAME","ATTR_TYPE_MOD","ATTR_TYPE_OWNER","ATTR_TYPE_NAME","LENGTH","PRECISION","SCALE","CHARACTER_SET_NAME","ATTR_NO","INHERITED") AS 
select o.name, a.name, a.externname,
       decode(bitand(a.properties, 32768), 32768, 'REF',
              decode(bitand(a.properties, 16384), 16384, 'POINTER')),
       decode(bitand(at.properties, 64), 64, null, au.name),
       decode(at.typecode,
              52, decode(a.charsetform, 2, 'NVARCHAR2', ao.name),
              53, decode(a.charsetform, 2, 'NCHAR', ao.name),
              54, decode(a.charsetform, 2, 'NCHAR VARYING', ao.name),
              61, decode(a.charsetform, 2, 'NCLOB', ao.name),
              ao.name),
       a.length, a.precision#, a.scale,
       decode(a.charsetform, 1, 'CHAR_CS',
                             2, 'NCHAR_CS',
                             3, NLS_CHARSET_NAME(a.charsetid),
                             4, 'ARG:'||a.charsetid),
a.attribute#, decode(bitand(nvl(a.xflags,0), 1), 1, 'YES', 'NO')
from sys.obj$ o, sys.type$ t, sys.attribute$ a,
     sys.obj$ ao, sys.user$ au, sys.type$ at
where o.owner# = userenv('SCHEMAID')
  and o.oid$ = t.toid
  and o.subname IS NULL -- only the latest version
  and o.type# <> 10 -- must not be invalid
  and bitand(t.properties, 2048) = 0 -- not system-generated
  and t.toid = a.toid
  and t.version# = a.version#
  and a.attr_toid = ao.oid$
  and ao.owner# = au.user#
  and a.attr_toid = at.tvoid
  and a.attr_version# = at.version#
  and t.externtype < 5;

CREATE OR REPLACE FORCE VIEW "USER_SQLJ_TYPE_METHODS"("TYPE_NAME","METHOD_NAME","EXTERNAL_VAR_NAME","METHOD_NO","METHOD_TYPE","PARAMETERS","RESULTS","FINAL","INSTANTIABLE","OVERRIDING","INHERITED") AS 
select o.name, m.name, m.externVarName, m.method#,
       decode(bitand(m.properties, 512), 512, 'MAP',
              decode(bitand(m.properties, 2048), 2048, 'ORDER', 'PUBLIC')),
       m.parameters#, m.results,
       decode(bitand(m.properties, 8), 8, 'NO', 'YES'),
       decode(bitand(m.properties, 65536), 65536, 'NO', 'YES'),
       decode(bitand(m.properties, 131072), 131072, 'YES', 'NO'),
       decode(bitand(nvl(m.xflags,0), 1), 1, 'YES', 'NO')
from sys.obj$ o, sys.type$ t, sys.method$ m
where o.owner# = userenv('SCHEMAID')
  and o.oid$ = m.toid
  and o.subname IS NULL -- get the latest version only
  and o.type# <> 10 -- must not be invalid
  and bitand(t.properties, 2048) = 0 -- not system-generated
  and t.toid = m.toid
  and t.version# = m.version#
  and t.externtype < 5;

CREATE OR REPLACE FORCE VIEW "USER_SQLSET"("ID","NAME","DESCRIPTION","CREATED","LAST_MODIFIED","STATEMENT_COUNT") AS 
select ID, NAME, DESCRIPTION, CREATED, LAST_MODIFIED, STATEMENT_COUNT
  from WRI$_SQLSET_DEFINITIONS
  where owner = SYS_CONTEXT('USERENV', 'CURRENT_USER');

CREATE OR REPLACE FORCE VIEW "USER_SQLSET_BINDS"("SQLSET_ID","SQL_ID","POSITION","VALUE") AS 
select b.SQLSET_ID, b.SQL_ID, b.POSITION, b.VALUE
  from WRI$_SQLSET_DEFINITIONS d, WRI$_SQLSET_STATEMENTS s, WRI$_SQLSET_BINDS b
  where d.id=s.sqlset_id and s.sqlset_id=b.sqlset_id and
        s.sql_id = b.sql_id and
        owner = SYS_CONTEXT('USERENV', 'CURRENT_USER');

CREATE OR REPLACE FORCE VIEW "USER_SQLSET_REFERENCES"("ID","SQLSET_ID","OWNER","DESCRIPTION","CREATED") AS 
select r.id, r.sqlset_id, r.owner, r.description, r.created
  from   wri$_sqlset_definitions d, wri$_sqlset_references r
  where d.id=r.sqlset_id and d.owner = SYS_CONTEXT('USERENV', 'CURRENT_USER');

CREATE OR REPLACE FORCE VIEW "USER_SQLSET_STATEMENTS"("SQLSET_ID","SQL_ID","SQL_TEXT","PARSING_SCHEMA_ID","MODULE","ACTION","ELAPSED_TIME","CPU_TIME","BUFFER_GETS","DISK_READS","ROWS_PROCESSED","FETCHES","EXECUTIONS","END_OF_FETCH_COUNT","OPTIMIZER_COST","OPTIMIZER_ENV","PRIORITY","COMMAND_TYPE","STAT_PERIOD","ACTIVE_STAT_PERIOD") AS 
select SQLSET_ID, s.SQL_ID, SQL_TEXT,
         PARSING_SCHEMA_ID, MODULE, ACTION,ELAPSED_TIME, CPU_TIME,BUFFER_GETS,
         DISK_READS, ROWS_PROCESSED, FETCHES, EXECUTIONS,
         END_OF_FETCH_COUNT, OPTIMIZER_COST, OPTIMIZER_ENV,
         PRIORITY, s.COMMAND_TYPE, STAT_PERIOD, ACTIVE_STAT_PERIOD
  from   WRI$_SQLSET_DEFINITIONS, WRI$_SQLSET_STATEMENTS s,
         WRH$_SQLTEXT t, V$DATABASE d
  where s.sql_id = t.sql_id AND d.dbid = t.dbid AND
        id = sqlset_id and owner = SYS_CONTEXT('USERENV', 'CURRENT_USER');

CREATE OR REPLACE FORCE VIEW "USER_SQLTUNE_BINDS"("TASK_ID","OBJECT_ID","POSITION","VALUE") AS 
SELECT b.task_id, b.object_id, b.position, b.value
  FROM   wri$_adv_sqlt_binds b, wri$_adv_objects o, wri$_adv_tasks t
  WHERE  b.object_id = o.id and b.task_id = o.task_id and o.task_id = t.id and
         t.owner# = SYS_CONTEXT('USERENV', 'CURRENT_USERID');

CREATE OR REPLACE FORCE VIEW "USER_SQLTUNE_PLANS"("TASK_ID","OBJECT_ID","ATTRIBUTE","STATEMENT_ID","PLAN_HASH_VALUE","PLAN_ID","TIMESTAMP","REMARKS","OPERATION","OPTIONS","OBJECT_NODE","OBJECT_OWNER","OBJECT_NAME","OBJECT_ALIAS","OBJECT_INSTANCE","OBJECT_TYPE","OPTIMIZER","SEARCH_COLUMNS","ID","PARENT_ID","DEPTH","POSITION","COST","CARDINALITY","BYTES","OTHER_TAG","PARTITION_START","PARTITION_STOP","PARTITION_ID","OTHER","DISTRIBUTION","CPU_COST","IO_COST","TEMP_SPACE","ACCESS_PREDICATES","FILTER_PREDICATES","PROJECTION","TIME","QBLOCK_NAME") AS 
SELECT p.task_id,
         p.object_id,
         decode(p.attribute,
                0, 'Original',
                1, 'Original with adjusted cost',
                2, 'Using SQL profile',
                3, 'Using new indices') AS attribute,
         p.statement_id,
         p.plan_hash_value,
         p.plan_id,
         p.timestamp,
         p.remarks,
         p.operation,
         p.options,
         p.object_node,
         p.object_owner,
         p.object_name,
         p.object_alias,
         p.object_instance,
         p.object_type,
         p.optimizer,
         p.search_columns,
         p.id,
         p.parent_id,
         p.depth,
         p.position,
         p.cost,
         p.cardinality,
         p.bytes,
         p.other_tag,
         p.partition_start,
         p.partition_stop,
         p.partition_id,
         p.other,
         p.distribution,
         p.cpu_cost,
         p.io_cost,
         p.temp_space,
         p.access_predicates,
         p.filter_predicates,
         p.projection,
         p.time,
         p.qblock_name
  FROM   wri$_adv_sqlt_plans p, wri$_adv_objects o, wri$_adv_tasks t
  WHERE  p.object_id = o.id and p.task_id = o.task_id and o.task_id = t.id and
         t.owner# = SYS_CONTEXT('USERENV', 'CURRENT_USERID');

CREATE OR REPLACE FORCE VIEW "USER_SQLTUNE_RATIONALE_PLAN"("TASK_ID","RATIONALE_ID","OBJECT_ID","OPERATION_ID","PLAN_ATTRIBUTE") AS 
SELECT rp.task_id, rp.rtn_id AS rationale_id, rp.object_id, rp.operation_id,
    decode(rp.plan_attr,
           0, 'Original',
           1, 'Original with adjusted cost',
           2, 'Using SQL profile',
           3, 'Using new indices') AS plan_attribute
  FROM   wri$_adv_sqlt_rtn_plan rp, wri$_adv_objects o, wri$_adv_tasks t
  WHERE  rp.object_id = o.id and rp.task_id = o.task_id and
         o.task_id = t.id and
         t.owner# = SYS_CONTEXT('USERENV', 'CURRENT_USERID');

CREATE OR REPLACE FORCE VIEW "USER_SQLTUNE_STATISTICS"("TASK_ID","OBJECT_ID","PARSING_SCHEMA_ID","MODULE","ACTION","ELAPSED_TIME","CPU_TIME","BUFFER_GETS","DISK_READS","ROWS_PROCESSED","FETCHES","EXECUTIONS","END_OF_FETCH_COUNT","OPTIMIZER_COST","OPTIMIZER_ENV","COMMAND_TYPE") AS 
SELECT b.TASK_ID, b.OBJECT_ID, PARSING_SCHEMA_ID, MODULE, ACTION,ELAPSED_TIME,
         CPU_TIME, BUFFER_GETS, DISK_READS, ROWS_PROCESSED, FETCHES, EXECUTIONS,
         END_OF_FETCH_COUNT, OPTIMIZER_COST, OPTIMIZER_ENV, COMMAND_TYPE
  FROM   wri$_adv_sqlt_statistics b, wri$_adv_objects o, wri$_adv_tasks t
  WHERE  b.object_id = o.id and b.task_id = o.task_id and o.task_id = t.id and
         t.owner# = SYS_CONTEXT('USERENV', 'CURRENT_USERID');

CREATE OR REPLACE FORCE VIEW "USER_STORED_SETTINGS"("OBJECT_NAME","OBJECT_ID","OBJECT_TYPE","PARAM_NAME","PARAM_VALUE") AS 
SELECT o.name, o.obj#,
DECODE(o.type#,
        7, 'PROCEDURE',
        8, 'FUNCTION',
        9, 'PACKAGE',
       11, 'PACKAGE BODY',
       12, 'TRIGGER',
       13, 'TYPE',
       14, 'TYPE BODY',
       'UNDEFINED'),
p.param, p.value
FROM sys.obj$ o, sys.settings$ p
WHERE o.linkname is null
AND p.obj# = o.obj#
AND o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_SUBPARTITION_TEMPLATES"("TABLE_NAME","SUBPARTITION_NAME","SUBPARTITION_POSITION","TABLESPACE_NAME","HIGH_BOUND") AS 
select o.name, st.spart_name, st.spart_position + 1, ts.name, st.hiboundval
from sys.obj$ o, sys.defsubpart$ st, sys.ts$ ts
where st.bo# = o.obj# and st.ts# = ts.ts#(+) and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_SUBPART_COL_STATISTICS"("TABLE_NAME","SUBPARTITION_NAME","COLUMN_NAME","NUM_DISTINCT","LOW_VALUE","HIGH_VALUE","DENSITY","NUM_NULLS","NUM_BUCKETS","SAMPLE_SIZE","LAST_ANALYZED","GLOBAL_STATS","USER_STATS","AVG_COL_LEN","HISTOGRAM") AS 
select o.name, o.subname, tsp.cname, h.distcnt, h.lowval, h.hival,
       h.density, h.null_cnt,
       case when h.bucket_cnt > 255 then h.row_cnt else
         decode(h.row_cnt, h.distcnt, h.row_cnt, h.bucket_cnt)
       end,
       h.sample_size, h.timestamp#,
       decode(bitand(h.spare2, 2), 2, 'YES', 'NO'),
       decode(bitand(h.spare2, 1), 1, 'YES', 'NO'),
       h.avgcln,
       case when h.bucket_cnt > 255 then 'FREQUENCY' else
         decode(nvl(h.row_cnt, 0), 0, 'NONE',
                                   h.distcnt, 'FREQUENCY', 'HEIGHT BALANCED')
       end
from sys.obj$ o, sys.hist_head$ h, tsp$ tsp
where o.obj# = tsp.obj#
  and tsp.obj# = h.obj#(+) and tsp.intcol# = h.intcol#(+)
  and o.type# = 34 /* TABLE SUBPARTITION */
  and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_SUBPART_HISTOGRAMS"("TABLE_NAME","SUBPARTITION_NAME","COLUMN_NAME","BUCKET_NUMBER","ENDPOINT_VALUE","ENDPOINT_ACTUAL_VALUE") AS 
select o.name, o.subname,
       tsp.cname,
       h.bucket,
       h.endpoint,
       h.epvalue
from sys.obj$ o, sys.histgrm$ h, tsp$ tsp
where o.obj# = h.obj# and h.obj# = tsp.obj#
  and tsp.intcol# = h.intcol#
  and o.type# = 34 /* TABLE SUBPARTITION */
  and o.owner# = userenv('SCHEMAID')
union
select o.name, o.subname,
       tsp.cname,
       0,
       h.minimum,
       null
from sys.obj$ o, sys.hist_head$ h, tsp$ tsp
where o.obj# = tsp.obj# and tsp.obj# = h.obj#
  and tsp.intcol# = h.intcol#
  and o.type# = 34 /* TABLE SUBPARTITION */
  and h.bucket_cnt = 1
  and o.owner# = userenv('SCHEMAID')
union
select o.name, o.subname,
       tsp.cname,
       1,
       h.maximum,
       null
from sys.obj$ o, sys.hist_head$ h, tsp$ tsp
where o.obj# = tsp.obj# and tsp.obj# = h.obj#
  and tsp.intcol# = h.intcol#
  and o.type# = 34 /* TABLE SUBPARTITION */
  and h.bucket_cnt = 1
  and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_SUBPART_KEY_COLUMNS"("NAME","OBJECT_TYPE","COLUMN_NAME","COLUMN_POSITION") AS 
select o.name, 'TABLE',
  decode(bitand(c.property, 1), 1, a.name, c.name), spc.pos#
from   obj$ o, subpartcol$ spc, col$ c, attrcol$ a
where  spc.obj# = o.obj# and spc.obj# = c.obj#
       and c.intcol# = spc.intcol# and o.owner# = userenv('SCHEMAID')
       and c.obj# = a.obj#(+) and c.intcol# = a.intcol#(+)
union
select o.name, 'INDEX',
  decode(bitand(c.property, 1), 1, a.name, c.name), spc.pos#
from   obj$ o, subpartcol$ spc, col$ c, ind$ i, attrcol$ a
where  spc.obj# = i.obj# and i.obj# = o.obj# and i.bo# = c.obj#
       and c.intcol# = spc.intcol# and o.owner# = userenv('SCHEMAID')
       and c.obj# = a.obj#(+) and c.intcol# = a.intcol#(+);

CREATE OR REPLACE FORCE VIEW "USER_SUBSCRIBED_COLUMNS"("HANDLE","SOURCE_SCHEMA_NAME","SOURCE_TABLE_NAME","COLUMN_NAME","SUBSCRIPTION_NAME") AS 
SELECT
   s.handle, t.source_schema_name, t.source_table_name, s.column_name,
   u.subscription_name
  FROM sys.cdc_subscribed_columns$ s, sys.cdc_change_tables$ t,
       sys.cdc_subscribers$ u, sys.user$ su
  WHERE s.change_table_obj#=t.obj# AND
        s.handle=u.handle AND
        u.username = su.name AND
        su.user#   = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_SUBSCRIBED_TABLES"("HANDLE","SOURCE_SCHEMA_NAME","SOURCE_TABLE_NAME","VIEW_NAME","CHANGE_SET_NAME","SUBSCRIPTION_NAME") AS 
SELECT
   s.handle, t.source_schema_name, t.source_table_name, s.view_name,
   t.change_set_name, u.subscription_name
  FROM sys.cdc_subscribed_tables$ s, sys.cdc_change_tables$ t,
       sys.cdc_subscribers$ u, sys.user$ su
  WHERE s.change_table_obj#=t.obj# AND
        s.handle=u.handle AND
        u.username= su.name AND
        su.user#= USERENV('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_SUBSCRIPTIONS"("HANDLE","SET_NAME","USERNAME","CREATED","STATUS","EARLIEST_SCN","LATEST_SCN","DESCRIPTION","LAST_PURGED","LAST_EXTENDED","SUBSCRIPTION_NAME") AS 
SELECT
   s.handle, s.set_name, s.username, s.created, s.status, s.earliest_scn,
   s.latest_scn, s.description, s.last_purged, s.last_extended,
   s.subscription_name
  FROM sys.cdc_subscribers$ s, sys.user$ u
  WHERE s.username= u.name AND
        u.user#   = USERENV('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_SUMMARIES"("OWNER","SUMMARY_NAME","CONTAINER_OWNER","CONTAINER_NAME","LAST_REFRESH_SCN","LAST_REFRESH_DATE","REFRESH_METHOD","SUMMARY","FULLREFRESHTIM","INCREFRESHTIM","CONTAINS_VIEWS","UNUSABLE","RESTRICTED_SYNTAX","INC_REFRESHABLE","KNOWN_STALE","QUERY_LEN","QUERY") AS 
select u.name, o.name, u.name, s.containernam,
       s.lastrefreshscn, s.lastrefreshdate,
       decode (s.refreshmode, 0, 'NONE', 1, 'ANY', 2, 'INCREMENTAL', 3,'FULL'),
       decode(bitand(s.pflags, 25165824), 25165824, 'N', 'Y'),
       s.fullrefreshtim, s.increfreshtim,
       decode(bitand(s.pflags, 48), 0, 'N', 'Y'),
       decode(bitand(s.mflags, 64), 0, 'N', 'Y'), /* QSMQSUM_UNUSABLE */
       decode(bitand(s.pflags, 1294319), 0, 'Y', 'N'),
       decode(bitand(s.pflags, 236879743), 0, 'Y', 'N'),
       decode(bitand(s.mflags, 1), 0, 'N', 'Y'), /* QSMQSUM_KNOWNSTL */
       s.sumtextlen,s.sumtext
from sys.user$ u, sys.sum$ s, sys.obj$ o
where o.owner# = u.user#
  and o.obj# = s.obj#
  and bitand(s.xpflags, 8388608) = 0  /* NOT REWRITE EQUIVALENCE SUMMARY */
  and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_SUMMARY_AGGREGATES"("OWNER","SUMMARY_NAME","POSITION_IN_SELECT","CONTAINER_COLUMN","AGG_FUNCTION","DISTINCTFLAG","MEASURE") AS 
select u.name, o.name, sa.sumcolpos#, c.name,
       decode(sa.aggfunction, 15, 'AVG', 16, 'SUM', 17, 'COUNT',
                              18, 'MIN', 19, 'MAX',
                              97, 'VARIANCE', 98, 'STDDEV',
                              440, 'USER'),
       decode(sa.flags, 0, 'N', 'Y'),
       sa.aggtext
from sys.sumagg$ sa, sys.obj$ o, sys.user$ u, sys.sum$ s, sys.col$ c
where sa.sumobj# = o.obj#
  AND o.owner# = u.user#
  AND sa.sumobj# = s.obj#
  AND c.obj# = s.containerobj#
  AND c.col# = sa.containercol#
  AND o.owner# = userenv('SCHEMAID')
  AND bitand(s.xpflags, 8388608) = 0 /* NOT REWRITE EQUIVALENCE SUMMARY */;

CREATE OR REPLACE FORCE VIEW "USER_SUMMARY_DETAIL_TABLES"("OWNER","SUMMARY_NAME","DETAIL_OWNER","DETAIL_RELATION","DETAIL_TYPE","DETAIL_ALIAS") AS 
select u.name, o.name, du.name,  do.name,
       decode (sd.detailobjtype, 1, 'TABLE', 2, 'VIEW',
                                3, 'SNAPSHOT', 4, 'CONTAINER', 'UNDEFINED'),
       sd.detailalias
from sys.user$ u, sys.sumdetail$ sd, sys.obj$ o, sys.obj$ do,
sys.user$ du, sys.sum$ s
where o.owner# = u.user#
  and o.obj# = sd.sumobj#
  and do.obj# = sd.detailobj#
  and do.owner# = du.user#
  and o.owner# = userenv('SCHEMAID')
  and s.obj# = sd.sumobj#
  and bitand(s.xpflags, 8388608) = 0 /* NOT REWRITE EQUIVALENCE SUMMARY */;

CREATE OR REPLACE FORCE VIEW "USER_SUMMARY_JOINS"("OWNER","SUMMARY_NAME","DETAILOBJ1_OWNER","DETAILOBJ1_RELATION","DETAILOBJ1_COLUMN","OPERATOR","DETAILOBJ2_OWNER","DETAILOBJ2_RELATION","DETAILOBJ2_COLUMN") AS 
select u.name, o.name,
       u1.name, o1.name, c1.name, '=',
       u2.name, o2.name, c2.name
from sys.sumjoin$ sj, sys.obj$ o, sys.user$ u,
     sys.obj$ o1, sys.user$ u1, sys.col$ c1,
     sys.obj$ o2, sys.user$ u2, sys.col$ c2,
     sys.sum$ s
where sj.sumobj# = o.obj#
  AND o.owner# = u.user#
  AND sj.tab1obj# = o1.obj#
  AND o1.owner# = u1.user#
  AND sj.tab1obj# = c1.obj#
  AND sj.tab1col# = c1.intcol#
  AND sj.tab2obj# = o2.obj#
  AND o2.owner# = u2.user#
  AND sj.tab2obj# = c2.obj#
  AND sj.tab2col# = c2.intcol#
  AND o.owner# = userenv('SCHEMAID')
  AND s.obj# = sj.sumobj#
  AND bitand(s.xpflags, 8388608) = 0 /* NOT REWRITE EQUIVALENCE SUMMARY */;

CREATE OR REPLACE FORCE VIEW "USER_SUMMARY_KEYS"("OWNER","SUMMARY_NAME","POSITION_IN_SELECT","CONTAINER_COLUMN","DETAILOBJ_OWNER","DETAILOBJ_NAME","DETAILOBJ_ALIAS","DETAILOBJ_TYPE","DETAILOBJ_COLUMN") AS 
select u1.name, o1.name, sk.sumcolpos#, c1.name,
       u2.name, o2.name, sd.detailalias,
       decode(sk.detailobjtype, 1, 'TABLE', 2, 'VIEW'), c2.name
from sys.sumkey$ sk, sys.obj$ o1, sys.user$ u1, sys.col$ c1, sys.sum$ s,
     sys.sumdetail$ sd, sys.obj$ o2, sys.user$ u2, sys.col$ c2
where sk.sumobj# = o1.obj#
  AND o1.owner# = u1.user#
  AND sk.sumobj# = s.obj#
  AND s.containerobj# = c1.obj#
  AND c1.col# = sk.containercol#
  AND sk.detailobj# = o2.obj#
  AND o2.owner# = u2.user#
  AND sk.sumobj# = sd.sumobj#
  AND sk.detailobj# = sd.detailobj#
  AND sk.detailobj# = c2.obj#
  AND sk.detailcol# = c2.intcol#
  AND o1.owner# = userenv('SCHEMAID')
  AND bitand(s.xpflags, 8388608) = 0 /* NOT REWRITE EQUIVALENCE SUMMARY */;

CREATE OR REPLACE FORCE VIEW "USER_SYNONYMS"("SYNONYM_NAME","TABLE_OWNER","TABLE_NAME","DB_LINK") AS 
select o.name, s.owner, s.name, s.node
from sys.syn$ s, sys.obj$ o
where o.obj# = s.obj#
  and o.type# = 5
  and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_SYS_PRIVS"("USERNAME","PRIVILEGE","ADMIN_OPTION") AS 
select decode(sa.grantee#,1,'PUBLIC',su.name),spm.name,
       decode(min(option$),1,'YES','NO')
from  sys.system_privilege_map spm, sys.sysauth$ sa, sys.user$ su
where ((sa.grantee#=userenv('SCHEMAID') and su.user#=sa.grantee#)
       or sa.grantee#=1)
  and sa.privilege#=spm.privilege
group by decode(sa.grantee#,1,'PUBLIC',su.name),spm.name;

CREATE OR REPLACE FORCE VIEW "USER_TABLES"("TABLE_NAME","TABLESPACE_NAME","CLUSTER_NAME","IOT_NAME","PCT_FREE","PCT_USED","INI_TRANS","MAX_TRANS","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENTS","MAX_EXTENTS","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","LOGGING","BACKED_UP","NUM_ROWS","BLOCKS","EMPTY_BLOCKS","AVG_SPACE","CHAIN_CNT","AVG_ROW_LEN","AVG_SPACE_FREELIST_BLOCKS","NUM_FREELIST_BLOCKS","DEGREE","INSTANCES","CACHE","TABLE_LOCK","SAMPLE_SIZE","LAST_ANALYZED","PARTITIONED","IOT_TYPE","TEMPORARY","SECONDARY","NESTED","BUFFER_POOL","ROW_MOVEMENT","GLOBAL_STATS","USER_STATS","DURATION","SKIP_CORRUPT","MONITORING","CLUSTER_OWNER","DEPENDENCIES","COMPRESSION","DROPPED") AS 
select o.name, decode(bitand(t.property, 2151678048), 0, ts.name, null),
       decode(bitand(t.property, 1024), 0, null, co.name),
       decode((bitand(t.property, 512)+bitand(t.flags, 536870912)),
              0, null, co.name),
       decode(bitand(t.property, 32+64), 0, mod(t.pctfree$, 100), 64, 0, null),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
          decode(bitand(t.property, 32+64), 0, t.pctused$, 64, 0, null)),
       decode(bitand(t.property, 32), 0, t.initrans, null),
       decode(bitand(t.property, 32), 0, t.maxtrans, null),
       s.iniexts * ts.blocksize,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extsize * ts.blocksize),
       s.minexts, s.maxexts,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extpct),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
         decode(bitand(o.flags, 2), 2, 1, decode(s.lists, 0, 1, s.lists))),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
         decode(bitand(o.flags, 2), 2, 1, decode(s.groups, 0, 1, s.groups))),
       decode(bitand(t.property, 32+64), 0,
                decode(bitand(t.flags, 32), 0, 'YES', 'NO'), null),
       decode(bitand(t.flags,1), 0, 'Y', 1, 'N', '?'),
       t.rowcnt,
       decode(bitand(t.property, 64), 0, t.blkcnt, null),
       decode(bitand(t.property, 64), 0, t.empcnt, null),
       decode(bitand(t.property, 64), 0, t.avgspc, null),
       t.chncnt, t.avgrln, t.avgspc_flb,
       decode(bitand(t.property, 64), 0, t.flbcnt, null),
       lpad(decode(t.degree, 32767, 'DEFAULT', nvl(t.degree,1)),10),
       lpad(decode(t.instances, 32767, 'DEFAULT', nvl(t.instances,1)),10),
       lpad(decode(bitand(t.flags, 8), 8, 'Y', 'N'),5),
       decode(bitand(t.flags, 6), 0, 'ENABLED', 'DISABLED'),
       t.samplesize, t.analyzetime,
       decode(bitand(t.property, 32), 32, 'YES', 'NO'),
       decode(bitand(t.property, 64), 64, 'IOT',
               decode(bitand(t.property, 512), 512, 'IOT_OVERFLOW',
               decode(bitand(t.flags, 536870912), 536870912, 'IOT_MAPPING', null))),
       decode(bitand(o.flags, 2), 0, 'N', 2, 'Y', 'N'),
       decode(bitand(o.flags, 16), 0, 'N', 16, 'Y', 'N'),
       decode(bitand(t.property, 8192), 8192, 'YES',
              decode(bitand(t.property, 1), 0, 'NO', 'YES')),
       decode(bitand(o.flags, 2), 2, 'DEFAULT',
             decode(s.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL)),
       decode(bitand(t.flags, 131072), 131072, 'ENABLED', 'DISABLED'),
       decode(bitand(t.flags, 512), 0, 'NO', 'YES'),
       decode(bitand(t.flags, 256), 0, 'NO', 'YES'),
       decode(bitand(o.flags, 2), 0, NULL,
           decode(bitand(t.property, 8388608), 8388608,
                  'SYS$SESSION', 'SYS$TRANSACTION')),
       decode(bitand(t.flags, 1024), 1024, 'ENABLED', 'DISABLED'),
       decode(bitand(o.flags, 2), 2, 'NO',
           decode(bitand(t.property, 2147483648), 2147483648, 'NO',
              decode(ksppcv.ksppstvl, 'TRUE', 'YES', 'NO'))),
       decode(bitand(t.property, 1024), 0, null, cu.name),
       decode(bitand(t.flags, 8388608), 8388608, 'ENABLED', 'DISABLED'),
       decode(bitand(t.property, 32), 32, null,
                decode(bitand(s.spare1, 2048), 2048, 'ENABLED', 'DISABLED')),
       decode(bitand(o.flags, 128), 128, 'YES', 'NO')
from sys.ts$ ts, sys.seg$ s, sys.obj$ co, sys.tab$ t, sys.obj$ o,
     sys.obj$ cx, sys.user$ cu, x$ksppcv ksppcv, x$ksppi ksppi
where o.owner# = userenv('SCHEMAID')
  and o.obj# = t.obj#
  and bitand(t.property, 1) = 0
  and bitand(o.flags, 128) = 0
  and t.bobj# = co.obj# (+)
  and t.ts# = ts.ts#
  and t.file# = s.file# (+)
  and t.block# = s.block# (+)
  and t.ts# = s.ts# (+)
  and t.dataobj# = cx.obj# (+)
  and cx.owner# = cu.user# (+)
  and ksppi.indx = ksppcv.indx
  and ksppi.ksppinm = '_dml_monitoring_enabled';

CREATE OR REPLACE FORCE VIEW "USER_TABLESPACES"("TABLESPACE_NAME","BLOCK_SIZE","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENTS","MAX_EXTENTS","PCT_INCREASE","MIN_EXTLEN","STATUS","CONTENTS","LOGGING","FORCE_LOGGING","EXTENT_MANAGEMENT","ALLOCATION_TYPE","SEGMENT_SPACE_MANAGEMENT","DEF_TAB_COMPRESSION","RETENTION","BIGFILE") AS 
select ts.name, ts.blocksize, ts.blocksize * ts.dflinit,
          decode(bitand(ts.flags, 3), 1, to_number(NULL),
                        ts.blocksize * ts.dflincr),
          ts.dflminext,
          decode(ts.contents$, 1, to_number(NULL), ts.dflmaxext),
          decode(bitand(ts.flags, 3), 1, to_number(NULL), ts.dflextpct),
          ts.blocksize * ts.dflminlen,
          decode(ts.online$, 1, 'ONLINE', 2, 'OFFLINE',
                 4, 'READ ONLY', 'UNDEFINED'),
          decode(ts.contents$, 0, (decode(bitand(ts.flags, 16), 16, 'UNDO',
                 'PERMANENT')), 1, 'TEMPORARY'),
          decode(bitand(ts.dflogging, 1), 0, 'NOLOGGING', 1, 'LOGGING'),
          decode(bitand(ts.dflogging, 2), 0, 'NO', 2, 'YES'),
          decode(ts.bitmapped, 0, 'DICTIONARY', 'LOCAL'),
          decode(bitand(ts.flags, 3), 0, 'USER', 1, 'SYSTEM', 2, 'UNIFORM',
                 'UNDEFINED'),
          decode(bitand(ts.flags,32), 32,'AUTO', 'MANUAL'),
          decode(bitand(ts.flags,64), 64,'ENABLED', 'DISABLED'),
          decode(bitand(ts.flags,16), 16, (decode(bitand(ts.flags, 512), 512,
                 'GUARANTEE', 'NOGUARANTEE')), 'NOT APPLY'),
          decode(bitand(ts.flags,256), 256, 'YES', 'NO')
from sys.ts$ ts
where ts.online$ != 3
and bitand(flags,2048) != 2048
      and (   exists (select null from sys.tsq$ tsq
                 where tsq.ts# = ts.ts#
                   and tsq.user# = userenv('SCHEMAID') and
                   (tsq.blocks > 0 or tsq.maxblocks != 0))
           or exists
              (select null
              from sys.v$enabledprivs
              where priv_number = -15 /* UNLIMITED TABLESPACE */));

CREATE OR REPLACE FORCE VIEW "USER_TAB_COLS"("TABLE_NAME","COLUMN_NAME","DATA_TYPE","DATA_TYPE_MOD","DATA_TYPE_OWNER","DATA_LENGTH","DATA_PRECISION","DATA_SCALE","NULLABLE","COLUMN_ID","DEFAULT_LENGTH","DATA_DEFAULT","NUM_DISTINCT","LOW_VALUE","HIGH_VALUE","DENSITY","NUM_NULLS","NUM_BUCKETS","LAST_ANALYZED","SAMPLE_SIZE","CHARACTER_SET_NAME","CHAR_COL_DECL_LENGTH","GLOBAL_STATS","USER_STATS","AVG_COL_LEN","CHAR_LENGTH","CHAR_USED","V80_FMT_IMAGE","DATA_UPGRADED","HIDDEN_COLUMN","VIRTUAL_COLUMN","SEGMENT_COLUMN_ID","INTERNAL_COLUMN_ID","HISTOGRAM","QUALIFIED_COL_NAME") AS 
select o.name,
       c.name,
       decode(c.type#, 1, decode(c.charsetform, 2, 'NVARCHAR2', 'VARCHAR2'),
                       2, decode(c.scale, null,
                                 decode(c.precision#, null, 'NUMBER', 'FLOAT'),
                                 'NUMBER'),
                       8, 'LONG',
                       9, decode(c.charsetform, 2, 'NCHAR VARYING', 'VARCHAR'),
                       12, 'DATE',
                       23, 'RAW', 24, 'LONG RAW',
                       58, nvl2(ac.synobj#, (select o.name from obj$ o
                                where o.obj#=ac.synobj#), ot.name),
                       69, 'ROWID',
                       96, decode(c.charsetform, 2, 'NCHAR', 'CHAR'),
                       100, 'BINARY_FLOAT',
                       101, 'BINARY_DOUBLE',
                       105, 'MLSLABEL',
                       106, 'MLSLABEL',
                       111, nvl2(ac.synobj#, (select o.name from obj$ o
                                 where o.obj#=ac.synobj#), ot.name),
                       112, decode(c.charsetform, 2, 'NCLOB', 'CLOB'),
                       113, 'BLOB', 114, 'BFILE', 115, 'CFILE',
                       121, nvl2(ac.synobj#, (select o.name from obj$ o
                                 where o.obj#=ac.synobj#), ot.name),
                       122, nvl2(ac.synobj#, (select o.name from obj$ o
                                 where o.obj#=ac.synobj#), ot.name),
                       123, nvl2(ac.synobj#, (select o.name from obj$ o
                                 where o.obj#=ac.synobj#), ot.name),
                       178, 'TIME(' ||c.scale|| ')',
                       179, 'TIME(' ||c.scale|| ')' || ' WITH TIME ZONE',
                       180, 'TIMESTAMP(' ||c.scale|| ')',
                       181, 'TIMESTAMP(' ||c.scale|| ')' || ' WITH TIME ZONE',
                       231, 'TIMESTAMP(' ||c.scale|| ')' || ' WITH LOCAL TIME ZONE',
                       182, 'INTERVAL YEAR(' ||c.precision#||') TO MONTH',
                       183, 'INTERVAL DAY(' ||c.precision#||') TO SECOND(' ||
                             c.scale || ')',
                       208, 'UROWID',
                       'UNDEFINED'),
       decode(c.type#, 111, 'REF'),
       nvl2(ac.synobj#, (select u.name from user$ u, obj$ o
            where o.owner#=u.user# and o.obj#=ac.synobj#), ut.name),
       c.length, c.precision#, c.scale,
       decode(sign(c.null$),-1,'D', 0, 'Y', 'N'),
       decode(c.col#, 0, to_number(null), c.col#), c.deflength,
       c.default$, h.distcnt, h.lowval, h.hival, h.density, h.null_cnt,
       case when h.bucket_cnt > 255 then h.row_cnt else
         decode(h.row_cnt, h.distcnt, h.row_cnt, h.bucket_cnt)
       end,
       h.timestamp#, h.sample_size,
       decode(c.charsetform, 1, 'CHAR_CS',
                             2, 'NCHAR_CS',
                             3, NLS_CHARSET_NAME(c.charsetid),
                             4, 'ARG:'||c.charsetid),
       decode(c.charsetid, 0, to_number(NULL),
                           nls_charset_decl_len(c.length, c.charsetid)),
       decode(bitand(h.spare2, 2), 2, 'YES', 'NO'),
       decode(bitand(h.spare2, 1), 1, 'YES', 'NO'),
       h.avgcln,
       c.spare3,
       decode(c.type#, 1, decode(bitand(c.property, 8388608), 0, 'B', 'C'),
                      96, decode(bitand(c.property, 8388608), 0, 'B', 'C'),
                      null),
       decode(bitand(ac.flags, 128), 128, 'YES', 'NO'),
       decode(o.status, 1, decode(bitand(ac.flags, 256), 256, 'NO', 'YES'),
                        decode(bitand(ac.flags, 2), 2, 'NO',
                               decode(bitand(ac.flags, 4), 4, 'NO',
                                      decode(bitand(ac.flags, 8), 8, 'NO',
                                             'N/A')))),
       decode(c.property, 0, 'NO', decode(bitand(c.property, 32), 32, 'YES',
                                          'NO')),
       decode(c.property, 0, 'NO', decode(bitand(c.property, 8), 8, 'YES',
                                          'NO')),
       decode(c.segcol#, 0, to_number(null), c.segcol#), c.intcol#,
       case when h.bucket_cnt > 255 then 'FREQUENCY' else
         decode(nvl(h.row_cnt, 0), 0, 'NONE',
                                   h.distcnt, 'FREQUENCY', 'HEIGHT BALANCED')
       end,
       decode(bitand(c.property, 1024), 1024,
              (select decode(bitand(cl.property, 1), 1, rc.name, cl.name)
               from sys.col$ cl, attrcol$ rc where cl.intcol# = c.intcol#-1
               and cl.obj# = c.obj# and c.obj# = rc.obj#(+) and
               cl.intcol# = rc.intcol#(+)),
              decode(bitand(c.property, 1), 0, c.name,
                     (select tc.name from sys.attrcol$ tc
                      where c.obj# = tc.obj# and c.intcol# = tc.intcol#)))
from sys.col$ c, sys.obj$ o, sys.hist_head$ h, sys.coltype$ ac, sys.obj$ ot,
     sys.user$ ut
where o.obj# = c.obj#
  and o.owner# = userenv('SCHEMAID')
  and c.obj# = h.obj#(+) and c.intcol# = h.intcol#(+)
  and c.obj# = ac.obj#(+) and c.intcol# = ac.intcol#(+)
  and ac.toid = ot.oid$(+)
  and ot.type#(+) = 13
  and ot.owner# = ut.user#(+)
  and (o.type# in (3, 4)                                    /* cluster, view */
       or
       (o.type# = 2    /* tables, excluding iot - overflow and nested tables */
        and
        not exists (select null
                      from sys.tab$ t
                     where t.obj# = o.obj#
                       and (bitand(t.property, 512) = 512 or
                            bitand(t.property, 8192) = 8192))));

CREATE OR REPLACE FORCE VIEW "USER_TAB_COLUMNS"("TABLE_NAME","COLUMN_NAME","DATA_TYPE","DATA_TYPE_MOD","DATA_TYPE_OWNER","DATA_LENGTH","DATA_PRECISION","DATA_SCALE","NULLABLE","COLUMN_ID","DEFAULT_LENGTH","DATA_DEFAULT","NUM_DISTINCT","LOW_VALUE","HIGH_VALUE","DENSITY","NUM_NULLS","NUM_BUCKETS","LAST_ANALYZED","SAMPLE_SIZE","CHARACTER_SET_NAME","CHAR_COL_DECL_LENGTH","GLOBAL_STATS","USER_STATS","AVG_COL_LEN","CHAR_LENGTH","CHAR_USED","V80_FMT_IMAGE","DATA_UPGRADED","HISTOGRAM") AS 
select TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_TYPE_MOD, DATA_TYPE_OWNER,
       DATA_LENGTH, DATA_PRECISION, DATA_SCALE, NULLABLE, COLUMN_ID,
       DEFAULT_LENGTH, DATA_DEFAULT, NUM_DISTINCT, LOW_VALUE, HIGH_VALUE,
       DENSITY, NUM_NULLS, NUM_BUCKETS, LAST_ANALYZED, SAMPLE_SIZE,
       CHARACTER_SET_NAME, CHAR_COL_DECL_LENGTH,
       GLOBAL_STATS, USER_STATS, AVG_COL_LEN, CHAR_LENGTH, CHAR_USED,
       V80_FMT_IMAGE, DATA_UPGRADED, HISTOGRAM
  from USER_TAB_COLS
 where HIDDEN_COLUMN = 'NO';

CREATE OR REPLACE FORCE VIEW "USER_TAB_COL_STATISTICS"("TABLE_NAME","COLUMN_NAME","NUM_DISTINCT","LOW_VALUE","HIGH_VALUE","DENSITY","NUM_NULLS","NUM_BUCKETS","LAST_ANALYZED","SAMPLE_SIZE","GLOBAL_STATS","USER_STATS","AVG_COL_LEN","HISTOGRAM") AS 
select table_name, column_name, num_distinct, low_value, high_value,
       density, num_nulls, num_buckets, last_analyzed, sample_size,
       global_stats, user_stats, avg_col_len, HISTOGRAM
from user_tab_columns
where last_analyzed is not null
union all
select /* fixed table column stats */
       ft.kqftanam, c.kqfconam,
       h.distcnt, h.lowval, h.hival,
       h.density, h.null_cnt,
       case when h.bucket_cnt > 255 then h.row_cnt else
         decode(h.row_cnt, h.distcnt, h.row_cnt, h.bucket_cnt)
       end,
       h.timestamp#, h.sample_size,
       decode(bitand(h.spare2, 2), 2, 'YES', 'NO'),
       decode(bitand(h.spare2, 1), 1, 'YES', 'NO'),
       h.avgcln,
       case when h.bucket_cnt > 255 then 'FREQUENCY' else
         decode(nvl(h.row_cnt, 0), 0, 'NONE',
                                   h.distcnt, 'FREQUENCY', 'HEIGHT BALANCED')
       end
from   sys.x$kqfta ft, sys.fixed_obj$ fobj,
         sys.x$kqfco c, sys.hist_head$ h
where
       ft.kqftaobj = fobj. obj#
       and c.kqfcotob = ft.kqftaobj
       and h.obj# = ft.kqftaobj
       and h.intcol# = c.kqfcocno
       /*
        * if fobj and st are not in sync (happens when db open read only
        * after upgrade), do not display stats.
        */
       and ft.kqftaver =
             fobj.timestamp - to_date('01-01-1991', 'DD-MM-YYYY')
       and h.timestamp# is not null
       and userenv('SCHEMAID') = 0  /* SYS */;

CREATE OR REPLACE FORCE VIEW "USER_TAB_COMMENTS"("TABLE_NAME","TABLE_TYPE","COMMENTS") AS 
select o.name,
       decode(o.type#, 0, 'NEXT OBJECT', 1, 'INDEX', 2, 'TABLE', 3, 'CLUSTER',
                      4, 'VIEW', 5, 'SYNONYM', 'UNDEFINED'),
       c.comment$
from sys.obj$ o, sys.com$ c
where o.owner# = userenv('SCHEMAID')
  and (o.type# in (4)                                                /* view */
       or
       (o.type# = 2                                                /* tables */
        AND         /* excluding iot-overflow, nested or mv container tables */
        not exists (select null
                      from sys.tab$ t
                     where t.obj# = o.obj#
                       and (bitand(t.property, 512) = 512 or
                            bitand(t.property, 8192) = 8192 OR
                            bitand(t.property, 67108864) = 67108864))))
  and o.obj# = c.obj#(+)
  and c.col#(+) is null;

CREATE OR REPLACE FORCE VIEW "USER_TAB_HISTOGRAMS"("TABLE_NAME","COLUMN_NAME","ENDPOINT_NUMBER","ENDPOINT_VALUE","ENDPOINT_ACTUAL_VALUE") AS 
select /*+ ordered */ o.name,
       decode(bitand(c.property, 1), 1, a.name, c.name),
       h.bucket,
       h.endpoint,
       h.epvalue
from sys.obj$ o, sys.col$ c, sys.histgrm$ h, sys.attrcol$ a
where o.obj# = c.obj#
  and o.owner# = userenv('SCHEMAID')
  and c.obj# = h.obj# and c.intcol# = h.intcol#
  and (o.type# in (3, 4)                                     /* cluster, view */
       or
       (o.type# = 2     /* tables, excluding iot - overflow and nested tables */
        and
        not exists (select null
                      from sys.tab$ t
                     where t.obj# = o.obj#
                       and (bitand(t.property, 512) = 512 or
                            bitand(t.property, 8192) = 8192))))
  and c.obj# = a.obj#(+)
  and c.intcol# = a.intcol#(+)
union all
select /*+ ordered */ o.name,
       decode(bitand(c.property, 1), 1, a.name, c.name),
       0,
       h.minimum,
       null
from sys.obj$ o, sys.col$ c, sys.hist_head$ h, sys.attrcol$ a
where o.obj# = c.obj#
  and o.owner# = userenv('SCHEMAID')
  and c.obj# = h.obj# and c.intcol# = h.intcol#
  and (o.type# in (3, 4)                                     /* cluster, view */
       or
       (o.type# = 2     /* tables, excluding iot - overflow and nested tables */
        and
        not exists (select null
                      from sys.tab$ t
                     where t.obj# = o.obj#
                       and (bitand(t.property, 512) = 512 or
                            bitand(t.property, 8192) = 8192))))
  and h.bucket_cnt = 1
  and c.obj# = a.obj#(+)
  and c.intcol# = a.intcol#(+)
union all
select /*+ ordered */ o.name,
       decode(bitand(c.property, 1), 1, a.name, c.name),
       1,
       h.maximum,
       null
from sys.obj$ o, sys.col$ c, sys.hist_head$ h, sys.attrcol$ a
where o.obj# = c.obj#
  and o.owner# = userenv('SCHEMAID')
  and c.obj# = h.obj# and c.intcol# = h.intcol#
  and (o.type# in (3, 4)                                     /* cluster, view */
       or
       (o.type# = 2     /* tables, excluding iot - overflow and nested tables */
        and
        not exists (select null
                      from sys.tab$ t
                     where t.obj# = o.obj#
                       and (bitand(t.property, 512) = 512 or
                            bitand(t.property, 8192) = 8192))))
  and h.bucket_cnt = 1
  and c.obj# = a.obj#(+)
  and c.intcol# = a.intcol#(+)
union all
select /*+ ordered */
       ft.kqftanam,
       c.kqfconam,
       h.bucket,
       h.endpoint,
       h.epvalue
from   sys.x$kqfta ft, sys.fixed_obj$ fobj, sys.x$kqfco c, sys.histgrm$ h
where  ft.kqftaobj = fobj. obj#
  and c.kqfcotob = ft.kqftaobj
  and h.obj# = ft.kqftaobj
  and h.intcol# = c.kqfcocno
  /*
   * if fobj and st are not in sync (happens when db open read only
   * after upgrade), do not display stats.
   */
  and ft.kqftaver =
         fobj.timestamp - to_date('01-01-1991', 'DD-MM-YYYY')
  and userenv('SCHEMAID') = 0  /* SYS */;

CREATE OR REPLACE FORCE VIEW "USER_TAB_MODIFICATIONS"("TABLE_NAME","PARTITION_NAME","SUBPARTITION_NAME","INSERTS","UPDATES","DELETES","TIMESTAMP","TRUNCATED","DROP_SEGMENTS") AS 
select o.name, null, null,
       m.inserts, m.updates, m.deletes, m.timestamp,
       decode(bitand(m.flags,1),1,'YES','NO'),
       m.drop_segments
from sys.mon_mods$ m, sys.obj$ o, sys.tab$ t
where o.owner# = userenv('SCHEMAID') and o.obj# = m.obj# and o.obj# = t.obj#
union all
  select o.name, o.subname, null,
       m.inserts, m.updates, m.deletes, m.timestamp,
       decode(bitand(m.flags,1),1,'YES','NO'),
       m.drop_segments
  from sys.mon_mods$ m, sys.obj$ o
  where o.owner# = userenv('SCHEMAID') and o.obj# = m.obj# and o.type#=19
union all
select o.name, o2.subname, o.subname,
       m.inserts, m.updates, m.deletes, m.timestamp,
       decode(bitand(m.flags,1),1,'YES','NO'),
       m.drop_segments
from sys.mon_mods$ m, sys.obj$ o, sys.tabsubpart$ tsp, sys.obj$ o2
where o.owner# = userenv('SCHEMAID') and o.obj# = m.obj# and
      o.obj# = tsp.obj# and o2.obj# = tsp.pobj#;

CREATE OR REPLACE FORCE VIEW "USER_TAB_PARTITIONS"("TABLE_NAME","COMPOSITE","PARTITION_NAME","SUBPARTITION_COUNT","HIGH_VALUE","HIGH_VALUE_LENGTH","PARTITION_POSITION","TABLESPACE_NAME","PCT_FREE","PCT_USED","INI_TRANS","MAX_TRANS","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENT","MAX_EXTENT","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","LOGGING","COMPRESSION","NUM_ROWS","BLOCKS","EMPTY_BLOCKS","AVG_SPACE","CHAIN_CNT","AVG_ROW_LEN","SAMPLE_SIZE","LAST_ANALYZED","BUFFER_POOL","GLOBAL_STATS","USER_STATS") AS 
select o.name, 'NO', o.subname, 0,
       tp.hiboundval, tp.hiboundlen, tp.part#, ts.name,
       tp.pctfree$,
       decode(bitand(ts.flags, 32), 32, to_number(NULL), tp.pctused$),
       initrans, maxtrans, s.iniexts * ts.blocksize,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                               s.extsize * ts.blocksize),
       s.minexts, s.maxexts,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extpct),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
          decode(s.lists, 0, 1, s.lists)),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
          decode(s.groups, 0, 1, s.groups)),
       decode(mod(trunc(tp.flags / 4), 2), 0, 'YES', 'NO'),
       decode(bitand(s.spare1, 2048), 2048, 'ENABLED', 'DISABLED'),
       tp.rowcnt, tp.blkcnt, tp.empcnt, tp.avgspc, tp.chncnt, tp.avgrln,
       tp.samplesize, tp.analyzetime,
       decode(s.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL),
       decode(bitand(tp.flags, 16), 0, 'NO', 'YES'),
       decode(bitand(tp.flags, 8), 0, 'NO', 'YES')
from   obj$ o, tabpartv$ tp, ts$ ts, sys.seg$ s
where  o.obj# = tp.obj# and ts.ts# = tp.ts# and
       tp.file#=s.file# and tp.block#=s.block# and tp.ts#=s.ts# and
       o.owner# = userenv('SCHEMAID')
union all -- IOT Partitions
select o.name, 'NO', o.subname, 0,
       tp.hiboundval, tp.hiboundlen, tp.part#, NULL,
       TO_NUMBER(NULL),TO_NUMBER(NULL),TO_NUMBER(NULL),TO_NUMBER(NULL),
       TO_NUMBER(NULL),
       TO_NUMBER(NULL),TO_NUMBER(NULL),TO_NUMBER(NULL),TO_NUMBER(NULL),
       TO_NUMBER(NULL),TO_NUMBER(NULL),
       NULL,
       'N/A',
       tp.rowcnt, TO_NUMBER(NULL), TO_NUMBER(NULL), 0, tp.chncnt, tp.avgrln,
       tp.samplesize, tp.analyzetime, NULL,
       decode(bitand(tp.flags, 16), 0, 'NO', 'YES'),
       decode(bitand(tp.flags, 8), 0, 'NO', 'YES')
from   obj$ o, tabpartv$ tp
where  o.obj# = tp.obj# and tp.file#=0 and tp.block#=0 and
       o.owner# = userenv('SCHEMAID')
union all -- Composite Partitions
select o.name, 'YES', o.subname, tcp.subpartcnt,
       tcp.hiboundval, tcp.hiboundlen, tcp.part#, ts.name,
       tcp.defpctfree,
       decode(bitand(ts.flags, 32), 32, to_number(NULL), tcp.defpctused),
       tcp.definitrans, tcp.defmaxtrans,
       tcp.definiexts, tcp.defextsize, tcp.defminexts, tcp.defmaxexts,
       tcp.defextpct,
       decode(bitand(ts.flags, 32), 32, to_number(NULL), tcp.deflists),
       decode(bitand(ts.flags, 32), 32,  to_number(NULL),tcp.defgroups),
       decode(tcp.deflogging, 0, 'NONE', 1, 'YES', 2, 'NO', 'UNKNOWN'),
       decode(mod(tcp.spare2,256), 0, 'NONE', 1, 'ENABLED', 2, 'DISABLED',
                                      'UNKNOWN'),
       tcp.rowcnt, tcp.blkcnt, tcp.empcnt, tcp.avgspc, tcp.chncnt, tcp.avgrln,
       tcp.samplesize, tcp.analyzetime,
       decode(tcp.defbufpool, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL),
       decode(bitand(tcp.flags, 16), 0, 'NO', 'YES'),
       decode(bitand(tcp.flags, 8), 0, 'NO', 'YES')
from   obj$ o, tabcompartv$ tcp, ts$ ts
where  o.obj# = tcp.obj# and tcp.defts# = ts.ts# and
       o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_TAB_PRIVS"("GRANTEE","OWNER","TABLE_NAME","GRANTOR","PRIVILEGE","GRANTABLE","HIERARCHY") AS 
select ue.name, u.name, o.name, ur.name, tpm.name,
       decode(mod(oa.option$,2), 1, 'YES', 'NO'),
       decode(bitand(oa.option$,2), 2, 'YES', 'NO')
from sys.objauth$ oa, sys.obj$ o, sys.user$ u, sys.user$ ur, sys.user$ ue,
     table_privilege_map tpm
where oa.obj# = o.obj#
  and oa.grantor# = ur.user#
  and oa.grantee# = ue.user#
  and oa.col# is null
  and u.user# = o.owner#
  and oa.privilege# = tpm.privilege
  and userenv('SCHEMAID') in (oa.grantor#, oa.grantee#, o.owner#);

CREATE OR REPLACE FORCE VIEW "USER_TAB_PRIVS_MADE"("GRANTEE","TABLE_NAME","GRANTOR","PRIVILEGE","GRANTABLE","HIERARCHY") AS 
select ue.name, o.name, ur.name, tpm.name,
       decode(mod(oa.option$,2), 1, 'YES', 'NO'),
       decode(bitand(oa.option$,2), 2, 'YES', 'NO')
from sys.objauth$ oa, sys.obj$ o, sys.user$ ue, sys.user$ ur,
     table_privilege_map tpm
where oa.obj# = o.obj#
  and oa.grantor# = ur.user#
  and oa.grantee# = ue.user#
  and oa.col# is null
  and oa.privilege# = tpm.privilege
  and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_TAB_PRIVS_RECD"("OWNER","TABLE_NAME","GRANTOR","PRIVILEGE","GRANTABLE","HIERARCHY") AS 
select u.name, o.name, ur.name, tpm.name,
       decode(mod(oa.option$,2), 1, 'YES', 'NO'),
       decode(bitand(oa.option$,2), 2, 'YES', 'NO')
from sys.objauth$ oa, sys.obj$ o, sys.user$ u, sys.user$ ur,
     table_privilege_map tpm
where oa.obj# = o.obj#
  and oa.grantor# = ur.user#
  and u.user# = o.owner#
  and oa.col# is null
  and oa.privilege# = tpm.privilege
  and oa.grantee# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_TAB_STATISTICS"("TABLE_NAME","PARTITION_NAME","PARTITION_POSITION","SUBPARTITION_NAME","SUBPARTITION_POSITION","OBJECT_TYPE","NUM_ROWS","BLOCKS","EMPTY_BLOCKS","AVG_SPACE","CHAIN_CNT","AVG_ROW_LEN","AVG_SPACE_FREELIST_BLOCKS","NUM_FREELIST_BLOCKS","AVG_CACHED_BLOCKS","AVG_CACHE_HIT_RATIO","SAMPLE_SIZE","LAST_ANALYZED","GLOBAL_STATS","USER_STATS","STATTYPE_LOCKED") AS 
SELECT /* TABLES */
    o.name, NULL, NULL, NULL, NULL, 'TABLE', t.rowcnt,
    decode(bitand(t.property, 64), 0, t.blkcnt, TO_NUMBER(NULL)),
    decode(bitand(t.property, 64), 0, t.empcnt, TO_NUMBER(NULL)),
    decode(bitand(t.property, 64), 0, t.avgspc, TO_NUMBER(NULL)),
    t.chncnt, t.avgrln, t.avgspc_flb,
    decode(bitand(t.property, 64), 0, t.flbcnt, TO_NUMBER(NULL)),
    ts.cachedblk, ts.cachehit, t.samplesize, t.analyzetime,
    decode(bitand(t.flags, 512), 0, 'NO', 'YES'),
    decode(bitand(t.flags, 256), 0, 'NO', 'YES'),
    decode(bitand(t.trigflag, 67108864) + bitand(t.trigflag, 134217728),
           0, NULL, 67108864, 'DATA', 134217728, 'CACHE', 'ALL')
  FROM
    sys.obj$ o, sys.tab$ t, sys.tab_stats$ ts
  WHERE
        o.obj# = t.obj#
    and bitand(t.property, 1) = 0 /* not a typed table */
    and o.obj# = ts.obj# (+)
    and o.owner# = userenv('SCHEMAID')
  UNION ALL
  SELECT /* PARTITIONS,  NOT IOT */
    o.name, o.subname, tp.part#, NULL, NULL, 'PARTITION',
    tp.rowcnt, tp.blkcnt, tp.empcnt, tp.avgspc,
    tp.chncnt, tp.avgrln, TO_NUMBER(NULL), TO_NUMBER(NULL),
    ts.cachedblk, ts.cachehit, tp.samplesize, tp.analyzetime,
    decode(bitand(tp.flags, 16), 0, 'NO', 'YES'),
    decode(bitand(tp.flags, 8), 0, 'NO', 'YES'),
    decode(bitand(tab.trigflag, 67108864) + bitand(tab.trigflag, 134217728),
           0, NULL, 67108864, 'DATA', 134217728, 'CACHE', 'ALL')
  FROM
    sys.obj$ o, sys.tabpartv$ tp, sys.tab_stats$ ts, sys.tab$ tab
  WHERE
        o.obj# = tp.obj#
    and tp.bo# = tab.obj#
    and tp.file# > 0
    and tp.block# > 0
    and o.obj# = ts.obj# (+)
    and o.owner# = userenv('SCHEMAID')
  UNION ALL
  SELECT /* IOT Partitions */
    o.name, o.subname, tp.part#, NULL, NULL, 'PARTITION',
    tp.rowcnt, TO_NUMBER(NULL), TO_NUMBER(NULL), TO_NUMBER(NULL),
    tp.chncnt, tp.avgrln, TO_NUMBER(NULL), TO_NUMBER(NULL),
    TO_NUMBER(NULL), TO_NUMBER(NULL), tp.samplesize, tp.analyzetime,
    decode(bitand(tp.flags, 16), 0, 'NO', 'YES'),
    decode(bitand(tp.flags, 8), 0, 'NO', 'YES'),
    decode(bitand(tab.trigflag, 67108864) + bitand(tab.trigflag, 134217728),
           0, NULL, 67108864, 'DATA', 134217728, 'CACHE', 'ALL')
  FROM
    sys.obj$ o, sys.tabpartv$ tp, sys.tab$ tab
  WHERE
        o.obj# = tp.obj#
    and tp.bo# = tab.obj#
    and tp.file# = 0
    and tp.block# = 0
    and o.owner# = userenv('SCHEMAID')
  UNION ALL
  SELECT /* COMPOSITE PARTITIONS */
    o.name, o.subname, tcp.part#, NULL, NULL, 'PARTITION',
    tcp.rowcnt, tcp.blkcnt, tcp.empcnt, tcp.avgspc,
    tcp.chncnt, tcp.avgrln, NULL, NULL, ts.cachedblk, ts.cachehit,
    tcp.samplesize, tcp.analyzetime,
    decode(bitand(tcp.flags, 16), 0, 'NO', 'YES'),
    decode(bitand(tcp.flags, 8), 0, 'NO', 'YES'),
    decode(bitand(tab.trigflag, 67108864) + bitand(tab.trigflag, 134217728),
           0, NULL, 67108864, 'DATA', 134217728, 'CACHE', 'ALL')
  FROM
    sys.obj$ o, sys.tabcompartv$ tcp, sys.tab_stats$ ts, sys.tab$ tab
  WHERE
        o.obj# = tcp.obj#
    and tcp.bo# = tab.obj#
    and o.obj# = ts.obj# (+)
    and o.owner# = userenv('SCHEMAID')
  UNION ALL
  SELECT /* SUBPARTITIONS */
    po.name, po.subname, tcp.part#,  so.subname, tsp.subpart#,
   'SUBPARTITION', tsp.rowcnt,
    tsp.blkcnt, tsp.empcnt, tsp.avgspc,
    tsp.chncnt, tsp.avgrln, NULL, NULL,
    ts.cachedblk, ts.cachehit, tsp.samplesize, tsp.analyzetime,
    decode(bitand(tsp.flags, 16), 0, 'NO', 'YES'),
    decode(bitand(tsp.flags, 8), 0, 'NO', 'YES'),
    decode(bitand(tab.trigflag, 67108864) + bitand(tab.trigflag, 134217728),
           0, NULL, 67108864, 'DATA', 134217728, 'CACHE', 'ALL')
  FROM
    sys.obj$ po, sys.obj$ so, sys.tabcompartv$ tcp, sys.tabsubpartv$ tsp,
    sys.tab_stats$ ts, sys.tab$ tab
  WHERE
        so.obj# = tsp.obj#
    and po.obj# = tcp.obj#
    and tcp.obj# = tsp.pobj#
    and tcp.bo# = tab.obj#
    and tsp.file# > 0
    and tsp.block# > 0
    and so.obj# = ts.obj# (+)
    and po.owner# = userenv('SCHEMAID')
  UNION ALL
  SELECT /* FIXED TABLES */
    t.kqftanam, NULL, NULL, NULL, NULL, 'FIXED TABLE',
    decode(nvl(fobj.obj#, 0), 0, TO_NUMBER(NULL), st.rowcnt),
    TO_NUMBER(NULL), TO_NUMBER(NULL), TO_NUMBER(NULL), TO_NUMBER(NULL),
    decode(nvl(fobj.obj#, 0), 0, TO_NUMBER(NULL), st.avgrln),
    TO_NUMBER(NULL), TO_NUMBER(NULL), TO_NUMBER(NULL), TO_NUMBER(NULL),
    decode(nvl(fobj.obj#, 0), 0, TO_NUMBER(NULL), st.samplesize),
    decode(nvl(fobj.obj#, 0), 0, TO_DATE(NULL), st.analyzetime),
    decode(nvl(fobj.obj#, 0), 0, NULL,
           decode(nvl(st.obj#, 0), 0, NULL, 'YES')),
    decode(nvl(fobj.obj#, 0), 0, NULL,
           decode(nvl(st.obj#, 0), 0, NULL,
                  decode(bitand(st.flags, 1), 0, 'NO', 'YES'))),
    decode(nvl(fobj.obj#, 0), 0, NULL,
           decode (bitand(fobj.flags, 67108864) +
                     bitand(fobj.flags, 134217728),
                   0, NULL, 67108864, 'DATA', 134217728, 'CACHE', 'ALL'))
    from sys.x$kqfta t, sys.fixed_obj$ fobj, sys.tab_stats$ st
    where
    t.kqftaobj = fobj.obj#(+)
    /*
     * if fobj and st are not in sync (happens when db open read only
     * after upgrade), do not display stats.
     */
    and t.kqftaver = fobj.timestamp (+) - to_date('01-01-1991', 'DD-MM-YYYY')
    and t.kqftaobj = st.obj#(+)
    and userenv('SCHEMAID') = 0  /* SYS */;

CREATE OR REPLACE FORCE VIEW "USER_TAB_STATS_HISTORY"("TABLE_NAME","PARTITION_NAME","SUBPARTITION_NAME","STATS_UPDATE_TIME") AS 
select o.name, null, null, h.savtime
  from   sys.obj$ o, sys.wri$_optstat_tab_history h
  where  h.obj# = o.obj# and o.type# = 2
         and o.owner# = userenv('SCHEMAID')
  union all
  -- partitions
  select o.name, o.subname, null, h.savtime
  from   sys.obj$ o, sys.wri$_optstat_tab_history h
  where  h.obj# = o.obj# and o.type# = 19
         and o.owner# = userenv('SCHEMAID')
  union all
  -- sub partitions
  select osp.name, ocp.subname, osp.subname, h.savtime
  from  sys.obj$ osp, sys.obj$ ocp,  sys.tabsubpart$ tsp,
        sys.wri$_optstat_tab_history h
  where h.obj# = osp.obj# and osp.type# = 34 and osp.obj# = tsp.obj# and
        tsp.pobj# = ocp.obj# and osp.owner# = userenv('SCHEMAID')
  union all
  -- fixed tables
  select t.kqftanam, null, null, h.savtime
  from  sys.x$kqfta t, sys.wri$_optstat_tab_history h
  where
  t.kqftaobj = h.obj#
  and userenv('SCHEMAID') = 0  /* SYS */;

CREATE OR REPLACE FORCE VIEW "USER_TAB_SUBPARTITIONS"("TABLE_NAME","PARTITION_NAME","SUBPARTITION_NAME","HIGH_VALUE","HIGH_VALUE_LENGTH","SUBPARTITION_POSITION","TABLESPACE_NAME","PCT_FREE","PCT_USED","INI_TRANS","MAX_TRANS","INITIAL_EXTENT","NEXT_EXTENT","MIN_EXTENT","MAX_EXTENT","PCT_INCREASE","FREELISTS","FREELIST_GROUPS","LOGGING","COMPRESSION","NUM_ROWS","BLOCKS","EMPTY_BLOCKS","AVG_SPACE","CHAIN_CNT","AVG_ROW_LEN","SAMPLE_SIZE","LAST_ANALYZED","BUFFER_POOL","GLOBAL_STATS","USER_STATS") AS 
select po.name, po.subname, so.subname,
       tsp.hiboundval, tsp.hiboundlen, tsp.subpart#,
       ts.name,  tsp.pctfree$,
       decode(bitand(ts.flags, 32), 32, to_number(NULL), tsp.pctused$),
       tsp.initrans, tsp.maxtrans,
       s.iniexts * ts.blocksize,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                               s.extsize * ts.blocksize),
       s.minexts, s.maxexts,
       decode(bitand(ts.flags, 3), 1, to_number(NULL),
                                      s.extpct),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
           decode(s.lists, 0, 1, s.lists)),
       decode(bitand(ts.flags, 32), 32, to_number(NULL),
           decode(s.groups, 0, 1, s.groups)),
       decode(mod(trunc(tsp.flags / 4), 2), 0, 'YES', 'NO'),
       decode(bitand(s.spare1, 2048), 2048, 'ENABLED', 'DISABLED'),
       tsp.rowcnt, tsp.blkcnt, tsp.empcnt, tsp.avgspc, tsp.chncnt,
       tsp.avgrln, tsp.samplesize, tsp.analyzetime,
       decode(s.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL),
       decode(bitand(tsp.flags, 16), 0, 'NO', 'YES'),
       decode(bitand(tsp.flags, 8), 0, 'NO', 'YES')
from   sys.obj$ so, sys.obj$ po, sys.tabsubpartv$ tsp, sys.ts$ ts, sys.seg$ s
where  so.obj# = tsp.obj# and po.obj# = tsp.pobj# and tsp.ts# = ts.ts# and
       tsp.file# = s.file# and tsp.block# = s.block# and tsp.ts# = s.ts# and
       po.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_TRANSFORMATIONS"("TRANSFORMATION_ID","NAME","FROM_TYPE","TO_TYPE") AS 
SELECT t.transformation_id,  t.name,
       t.from_schema||'.'||t.from_type, t.to_schema||'.'||t.to_type
FROM transformations$ t, sys.user$ u
WHERE u.user# = USERENV('SCHEMAID')
and u.name = t.owner;

CREATE OR REPLACE FORCE VIEW "USER_TRIGGERS"("TRIGGER_NAME","TRIGGER_TYPE","TRIGGERING_EVENT","TABLE_OWNER","BASE_OBJECT_TYPE","TABLE_NAME","COLUMN_NAME","REFERENCING_NAMES","WHEN_CLAUSE","STATUS","DESCRIPTION","ACTION_TYPE","TRIGGER_BODY") AS 
select trigobj.name,
decode(t.type#, 0, 'BEFORE STATEMENT',
                1, 'BEFORE EACH ROW',
                2, 'AFTER STATEMENT',
                3, 'AFTER EACH ROW',
                4, 'INSTEAD OF',
                   'UNDEFINED'),
decode(t.insert$*100 + t.update$*10 + t.delete$,
                 100, 'INSERT',
                 010, 'UPDATE',
                 001, 'DELETE',
                 110, 'INSERT OR UPDATE',
                 101, 'INSERT OR DELETE',
                 011, 'UPDATE OR DELETE',
                 111, 'INSERT OR UPDATE OR DELETE',
                 'ERROR'),
u.name,
decode(bitand(t.property, 1), 1, 'VIEW',
                              0, 'TABLE',
                                 'UNDEFINED'),
tabobj.name, NULL,
'REFERENCING NEW AS '||t.refnewname||' OLD AS '||t.refoldname,
t.whenclause,decode(t.enabled, 0, 'DISABLED', 1, 'ENABLED', 'ERROR'),
t.definition,
decode(bitand(t.property, 2), 2, 'CALL',
                                 'PL/SQL     '),
t.action#
from sys.obj$ trigobj, sys.obj$ tabobj, sys.trigger$ t, sys.user$ u
where   (trigobj.obj#   = t.obj# and
         tabobj.obj# = t.baseobject and
         trigobj.owner# = userenv('SCHEMAID')
         and tabobj.owner#  = u.user#
         and bitand(t.property, 63) < 8)
union all
select trigobj.name,
decode(t.type#, 0, 'BEFORE EVENT',
                2, 'AFTER EVENT',
                   'UNDEFINED'),
decode(bitand(t.sys_evts, 1), 1, 'STARTUP ') ||
decode(bitand(t.sys_evts, 2), 2,
       decode(sign(bitand(t.sys_evts, 1)), 1, 'OR SHUTDOWN ',
                                               'SHUTDOWN ')) ||
decode(bitand(t.sys_evts, 4), 4,
       decode(sign(bitand(t.sys_evts, 3)), 1, 'OR ERROR ',
                                              'ERROR ')) ||
decode(bitand(t.sys_evts, 8), 8,
       decode(sign(bitand(t.sys_evts, 7)), 1, 'OR LOGON ',
                                              'LOGON ')) ||
decode(bitand(t.sys_evts, 16), 16,
       decode(sign(bitand(t.sys_evts, 15)), 1, 'OR LOGOFF ',
                                               'LOGOFF ')) ||
decode(bitand(t.sys_evts, 262176), 32,
       decode(sign(bitand(t.sys_evts, 31)), 1, 'OR CREATE ',
                                               'CREATE ')) ||
decode(bitand(t.sys_evts, 262208), 64,
       decode(sign(bitand(t.sys_evts, 63)), 1, 'OR ALTER ',
                                               'ALTER ')) ||
decode(bitand(t.sys_evts, 262272), 128,
       decode(sign(bitand(t.sys_evts, 127)), 1, 'OR DROP ',
                                                'DROP ')) ||
decode (bitand(t.sys_evts, 262400), 256,
        decode(sign(bitand(t.sys_evts, 255)), 1, 'OR ANALYZE ',
                                                 'ANALYZE ')) ||
decode (bitand(t.sys_evts, 262656), 512,
        decode(sign(bitand(t.sys_evts, 511)), 1, 'OR COMMENT ',
                                                 'COMMENT ')) ||
decode (bitand(t.sys_evts, 263168), 1024,
        decode(sign(bitand(t.sys_evts, 1023)), 1, 'OR GRANT ',
                                                  'GRANT ')) ||
decode (bitand(t.sys_evts, 264192), 2048,
        decode(sign(bitand(t.sys_evts, 2047)), 1, 'OR REVOKE ',
                                                  'REVOKE ')) ||
decode (bitand(t.sys_evts, 266240), 4096,
        decode(sign(bitand(t.sys_evts, 4095)), 1, 'OR TRUNCATE ',
                                                  'TRUNCATE ')) ||
decode (bitand(t.sys_evts, 270336), 8192,
        decode(sign(bitand(t.sys_evts, 8191)), 1, 'OR RENAME ',
                                                  'RENAME ')) ||
decode (bitand(t.sys_evts, 278528), 16384,
        decode(sign(bitand(t.sys_evts, 16383)), 1, 'OR ASSOCIATE STATISTICS ',
                                                   'ASSOCIATE STATISTICS ')) ||
decode (bitand(t.sys_evts, 294912), 32768,
        decode(sign(bitand(t.sys_evts, 32767)), 1, 'OR AUDIT ',
                                                   'AUDIT ')) ||
decode (bitand(t.sys_evts, 327680), 65536,
        decode(sign(bitand(t.sys_evts, 65535)), 1,
               'OR DISASSOCIATE STATISTICS ', 'DISASSOCIATE STATISTICS ')) ||
decode (bitand(t.sys_evts, 393216), 131072,
        decode(sign(bitand(t.sys_evts, 131071)), 1, 'OR NOAUDIT ',
                                                    'NOAUDIT ')) ||
decode (bitand(t.sys_evts, 262144), 262144,
        decode(sign(bitand(t.sys_evts, 31)), 1, 'OR DDL ',
                                                   'DDL ')) ||
decode (bitand(t.sys_evts, 8388608), 8388608,
        decode(sign(bitand(t.sys_evts, 8388607)), 1, 'OR SUSPEND ',
                                                     'SUSPEND ')),
'SYS',
'DATABASE        ',
NULL,
NULL,
'REFERENCING NEW AS '||t.refnewname||' OLD AS '||t.refoldname,
t.whenclause,decode(t.enabled, 0, 'DISABLED', 1, 'ENABLED', 'ERROR'),
t.definition,
decode(bitand(t.property, 2), 2, 'CALL',
                                 'PL/SQL     '),
t.action#
from sys.obj$ trigobj, sys.trigger$ t
where   (trigobj.obj#   = t.obj# and
         trigobj.owner# = userenv('SCHEMAID') and
         bitand(t.property, 63) >= 8 and bitand(t.property, 63) < 16)
union all
select trigobj.name,
decode(t.type#, 0, 'BEFORE EVENT',
                2, 'AFTER EVENT',
                   'UNDEFINED'),
decode(bitand(t.sys_evts, 1), 1, 'STARTUP ') ||
decode(bitand(t.sys_evts, 2), 2,
       decode(sign(bitand(t.sys_evts, 1)), 1, 'OR SHUTDOWN ',
                                               'SHUTDOWN ')) ||
decode(bitand(t.sys_evts, 4), 4,
       decode(sign(bitand(t.sys_evts, 3)), 1, 'OR ERROR ',
                                              'ERROR ')) ||
decode(bitand(t.sys_evts, 8), 8,
       decode(sign(bitand(t.sys_evts, 7)), 1, 'OR LOGON ',
                                              'LOGON ')) ||
decode(bitand(t.sys_evts, 16), 16,
       decode(sign(bitand(t.sys_evts, 15)), 1, 'OR LOGOFF ',
                                               'LOGOFF ')) ||
decode(bitand(t.sys_evts, 262176), 32,
       decode(sign(bitand(t.sys_evts, 31)), 1, 'OR CREATE ',
                                               'CREATE ')) ||
decode(bitand(t.sys_evts, 262208), 64,
       decode(sign(bitand(t.sys_evts, 63)), 1, 'OR ALTER ',
                                               'ALTER ')) ||
decode(bitand(t.sys_evts, 262272), 128,
       decode(sign(bitand(t.sys_evts, 127)), 1, 'OR DROP ',
                                                'DROP ')) ||
decode (bitand(t.sys_evts, 262400), 256,
        decode(sign(bitand(t.sys_evts, 255)), 1, 'OR ANALYZE ',
                                                 'ANALYZE ')) ||
decode (bitand(t.sys_evts, 262656), 512,
        decode(sign(bitand(t.sys_evts, 511)), 1, 'OR COMMENT ',
                                                 'COMMENT ')) ||
decode (bitand(t.sys_evts, 263168), 1024,
        decode(sign(bitand(t.sys_evts, 1023)), 1, 'OR GRANT ',
                                                  'GRANT ')) ||
decode (bitand(t.sys_evts, 264192), 2048,
        decode(sign(bitand(t.sys_evts, 2047)), 1, 'OR REVOKE ',
                                                  'REVOKE ')) ||
decode (bitand(t.sys_evts, 266240), 4096,
        decode(sign(bitand(t.sys_evts, 4095)), 1, 'OR TRUNCATE ',
                                                  'TRUNCATE ')) ||
decode (bitand(t.sys_evts, 270336), 8192,
        decode(sign(bitand(t.sys_evts, 8191)), 1, 'OR RENAME ',
                                                  'RENAME ')) ||
decode (bitand(t.sys_evts, 278528), 16384,
        decode(sign(bitand(t.sys_evts, 16383)), 1, 'OR ASSOCIATE STATISTICS ',
                                                   'ASSOCIATE STATISTICS ')) ||
decode (bitand(t.sys_evts, 294912), 32768,
        decode(sign(bitand(t.sys_evts, 32767)), 1, 'OR AUDIT ',
                                                   'AUDIT ')) ||
decode (bitand(t.sys_evts, 327680), 65536,
        decode(sign(bitand(t.sys_evts, 65535)), 1,
               'OR DISASSOCIATE STATISTICS ', 'DISASSOCIATE STATISTICS ')) ||
decode (bitand(t.sys_evts, 393216), 131072,
        decode(sign(bitand(t.sys_evts, 131071)), 1, 'OR NOAUDIT ',
                                                    'NOAUDIT ')) ||
decode (bitand(t.sys_evts, 262144), 262144,
        decode(sign(bitand(t.sys_evts, 31)), 1, 'OR DDL ',
                                                   'DDL ')) ||
decode (bitand(t.sys_evts, 8388608), 8388608,
        decode(sign(bitand(t.sys_evts, 8388607)), 1, 'OR SUSPEND ',
                                                     'SUSPEND ')),
u.name,
'SCHEMA',
NULL,
NULL,
'REFERENCING NEW AS '||t.refnewname||' OLD AS '||t.refoldname,
t.whenclause,decode(t.enabled, 0, 'DISABLED', 1, 'ENABLED', 'ERROR'),
t.definition,
decode(bitand(t.property, 2), 2, 'CALL',
                                 'PL/SQL     '),
t.action#
from sys.obj$ trigobj, sys.trigger$ t, sys.user$ u
where   (trigobj.obj#   = t.obj# and
         trigobj.owner# = userenv('SCHEMAID') and
         bitand(t.property, 63) >= 16 and bitand(t.property, 63) < 32 and
         u.user# = t.baseobject)
union all
select trigobj.name,
decode(t.type#, 0, 'BEFORE STATEMENT',
               1, 'BEFORE EACH ROW',
               2, 'AFTER STATEMENT',
               3, 'AFTER EACH ROW',
               4, 'INSTEAD OF',
               'UNDEFINED'),
decode(t.insert$*100 + t.update$*10 + t.delete$,
                 100, 'INSERT',
                 010, 'UPDATE',
                 001, 'DELETE',
                 110, 'INSERT OR UPDATE',
                 101, 'INSERT OR DELETE',
                 011, 'UPDATE OR DELETE',
                 111, 'INSERT OR UPDATE OR DELETE',
                 'ERROR'),
u.name,
decode(bitand(t.property, 1), 1, 'VIEW',
                              0, 'TABLE',
                                 'UNDEFINED'),
tabobj.name,  ntcol.name,
'REFERENCING NEW AS '||t.refnewname||' OLD AS '||t.refoldname
  || ' PARENT AS ' || t.refprtname,
t.whenclause,decode(t.enabled, 0, 'DISABLED', 1, 'ENABLED', 'ERROR'),
t.definition,
decode(bitand(t.property, 2), 2, 'CALL',
                                 'PL/SQL     '),
t.action#
from sys.obj$ trigobj, sys.obj$ tabobj, sys.trigger$ t, sys.user$ u,
     sys.viewtrcol$ ntcol
where   (trigobj.obj#   = t.obj# and
         tabobj.obj# = t.baseobject and
         trigobj.owner# = userenv('SCHEMAID')
         and tabobj.owner#  = u.user#
         and bitand(t.property, 63) >= 32
         and t.nttrigcol = ntcol.intcol#
         and t.nttrigatt = ntcol.attribute#
         and t.baseobject = ntcol.obj#);

CREATE OR REPLACE FORCE VIEW "USER_TRIGGER_COLS"("TRIGGER_OWNER","TRIGGER_NAME","TABLE_OWNER","TABLE_NAME","COLUMN_NAME","COLUMN_LIST","COLUMN_USAGE") AS 
select /*+ ORDERED NOCOST */ u.name, o.name, u2.name, o2.name,c.name,
   max(decode(tc.type#,0,'YES','NO')) COLUMN_LIST,
   decode(sum(decode(tc.type#,5,  1, -- one occurrence of new in
                              6,  2, -- one occurrence of old in
                              9,  4, -- one occurrence of new out
                             10,  8, -- one occurrence of old out (impossible)
                             13,  5, -- one occurrence of new in out
                             14, 10, -- one occurrence of old in out (imp.)
                             20, 16, -- one occurrence of parent in
                             24, 32, -- one occurrence of parent out (imp)
                             28, 64, -- one occurrence of parent in out (imp)
                              null)
                ), -- result in the following combinations across occurrences
           1, 'NEW IN',
           2, 'OLD IN',
           3, 'NEW IN OLD IN',
           4, 'NEW OUT',
           5, 'NEW IN OUT',
           6, 'NEW OUT OLD IN',
           7, 'NEW IN OUT OLD IN',
          16, 'PARENT IN',
          'NONE')
from sys.trigger$ t, sys.obj$ o, sys.user$ u, sys.user$ u2,
     sys.col$ c, sys.obj$ o2, sys.triggercol$ tc
where t.obj# = tc.obj#                -- find corresponding trigger definition
  and o.obj# = t.obj#                --    and corresponding trigger name
  and c.obj# = t.baseobject         -- and corresponding row in COL$ of
  and c.intcol# = tc.intcol#    -- the referenced column
  and bitand(c.property,32768) != 32768   -- not unused columns
  and o2.obj# = t.baseobject        -- and name of the table containing the trigger
  and u2.user# = o2.owner#        -- and name of the user who owns the table
  and u.user# = o.owner#        -- and name of user who owns the trigger
  and bitand(c.property,1) <> 1 -- and it is not an adt column
  and (bitand(t.property,32) <> 32 -- and it is not a nested table col
       or
      bitand(tc.type#,16) = 16) -- or it is a PARENT type column
  and ((o.owner# = userenv('SCHEMAID') and u.user# = userenv('SCHEMAID')) -- triggers owned by the current user
      or
       (o2.owner# = userenv('SCHEMAID') and u2.user# = userenv('SCHEMAID'))) -- on the current user's tables
group by u.name, o.name, u2.name, o2.name,c.name
union all
select /*+ ORDERED NOCOST */ u.name, o.name, u2.name, o2.name,ac.name,
   max(decode(tc.type#,0,'YES','NO')) COLUMN_LIST,
   decode(sum(decode(tc.type#,5,  1, -- one occurrence of new in
                              6,  2, -- one occurrence of old in
                              9,  4, -- one occurrence of new out
                             10,  8, -- one occurrence of old out (impossible)
                             13,  5, -- one occurrence of new in out
                             14, 10, -- one occurrence of old in out (imp.)
                             20, 16, -- one occurrence of parent in
                             24, 32, -- one occurrence of parent out (imp)
                             28, 64, -- one occurrence of parent in out (imp)
                              null)
                ), -- result in the following combinations across occurrences
           1, 'NEW IN',
           2, 'OLD IN',
           3, 'NEW IN OLD IN',
           4, 'NEW OUT',
           5, 'NEW IN OUT',
           6, 'NEW OUT OLD IN',
           7, 'NEW IN OUT OLD IN',
          16, 'PARENT IN',
          'NONE')
from sys.trigger$ t, sys.obj$ o, sys.user$ u, sys.user$ u2,
     sys.col$ c, sys.obj$ o2, sys.triggercol$ tc, sys.attrcol$ ac
where t.obj# = tc.obj#                -- find corresponding trigger definition
  and o.obj# = t.obj#                --    and corresponding trigger name
  and c.obj# = t.baseobject         -- and corresponding row in COL$ of
  and c.intcol# = tc.intcol#    -- the referenced column
  and bitand(c.property,32768) != 32768   -- not unused columns
  and o2.obj# = t.baseobject        -- and name of the table containing the trigger
  and u2.user# = o2.owner#        -- and name of the user who owns the table
  and u.user# = o.owner#        -- and name of user who owns the trigger
  and bitand(c.property,1) = 1  -- and it is an adt column
  and (bitand(t.property,32) <> 32 -- and it is not a nested table col
       or
      bitand(tc.type#,16) = 16) -- or it is a PARENT type column
  and ac.intcol# = c.intcol#
  and ac.obj# = c.obj#
  and ((o.owner# = userenv('SCHEMAID') and u.user# = userenv('SCHEMAID')) -- triggers owned by the current user
      or
       (o2.owner# = userenv('SCHEMAID') and u2.user# = userenv('SCHEMAID'))) -- on the current user's tables
group by u.name, o.name, u2.name, o2.name,ac.name
union all
select /*+ ORDERED NOCOST */ u.name, o.name, u2.name, o2.name, attr.name,
   max(decode(tc.type#,0,'YES','NO')) COLUMN_LIST,
   decode(sum(decode(tc.type#,5,  1, -- one occurrence of new in
                              6,  2, -- one occurrence of old in
                              9,  4, -- one occurrence of new out
                             10,  8, -- one occurrence of old out (impossible)
                             13,  5, -- one occurrence of new in out
                             14, 10, -- one occurrence of old in out (imp.)
                              null)
                ), -- result in the following combinations across occurrences
           1, 'NEW IN',
           2, 'OLD IN',
           3, 'NEW IN OLD IN',
           4, 'NEW OUT',
           5, 'NEW IN OUT',
           6, 'NEW OUT OLD IN',
           7, 'NEW IN OUT OLD IN',
          'NONE')
from sys.trigger$ t, sys.obj$ o, sys.user$ u, sys.user$ u2,
     sys.obj$ o2, sys.triggercol$ tc,
     sys.collection$ coll, sys.coltype$ ctyp, sys.attribute$ attr
where t.obj# = tc.obj#                -- find corresponding trigger definition
  and o.obj# = t.obj#                --    and corresponding trigger name
  and o2.obj# = t.baseobject        -- and name of the table containing the trigger
  and u2.user# = o2.owner#        -- and name of the user who owns the table
  and u.user# = o.owner#        -- and name of user who owns the trigger
  and bitand(t.property,32) = 32 -- and it is not a nested table col
  and bitand(tc.type#,16) <> 16  -- and it is not a PARENT type column
  and ctyp.obj# = t.baseobject   -- find corresponding column type definition
  and ctyp.intcol# = t.nttrigcol -- and get the column type for the nested table
  and ctyp.toid = coll.toid      -- get the collection toid
  and ctyp.version# = coll.version# -- get the collection version
  and attr.attribute# = tc.intcol#  -- get the attribute number
  and attr.toid  = coll.elem_toid  -- get the attribute toid
  and attr.version# = coll.version#  -- get the attribute version
  and ((o.owner# = userenv('SCHEMAID') and u.user# = userenv('SCHEMAID')) -- triggers owned by the current user
      or
       (o2.owner# = userenv('SCHEMAID') and u2.user# = userenv('SCHEMAID'))) -- on the current user's tables
group by u.name, o.name, u2.name, o2.name,attr.name
union all
select /*+ ORDERED NOCOST */ u.name, o.name, u2.name, o2.name, 'COLUMN_VALUE',
   max(decode(tc.type#,0,'YES','NO')) COLUMN_LIST,
   decode(sum(decode(tc.type#,5,  1, -- one occurrence of new in
                              6,  2, -- one occurrence of old in
                              9,  4, -- one occurrence of new out
                             10,  8, -- one occurrence of old out (impossible)
                             13,  5, -- one occurrence of new in out
                             14, 10, -- one occurrence of old in out (imp.)
                              null)
                ), -- result in the following combinations across occurrences
           1, 'NEW IN',
           2, 'OLD IN',
           3, 'NEW IN OLD IN',
           4, 'NEW OUT',
           5, 'NEW IN OUT',
           6, 'NEW OUT OLD IN',
           7, 'NEW IN OUT OLD IN',
          'NONE')
from sys.trigger$ t, sys.obj$ o, sys.user$ u, sys.user$ u2, sys.obj$ o2,
     sys.triggercol$ tc
where t.obj# = tc.obj#                -- find corresponding trigger definition
  and o.obj# = t.obj#                --    and corresponding trigger name
  and o2.obj# = t.baseobject        -- and name of the table containing the trigger
  and u2.user# = o2.owner#        -- and name of the user who owns the table
  and u.user# = o.owner#        -- and name of user who owns the trigger
  and bitand(t.property,32) = 32 -- and it is not a nested table col
  and bitand(tc.type#,16) <> 16  -- and it is not a PARENT type column
  and tc.intcol# = 0
  and ((o.owner# = userenv('SCHEMAID') and u.user# = userenv('SCHEMAID')) -- triggers owned by the current user
      or
       (o2.owner# = userenv('SCHEMAID') and u2.user# = userenv('SCHEMAID'))) -- on the current user's tables
group by u.name, o.name, u2.name, o2.name,'COLUMN_VALUE';

CREATE OR REPLACE FORCE VIEW "USER_TS_QUOTAS"("TABLESPACE_NAME","BYTES","MAX_BYTES","BLOCKS","MAX_BLOCKS") AS 
select ts.name, q.blocks * ts.blocksize,
       decode(q.maxblocks, -1, -1, q.maxblocks * ts.blocksize),
       q.blocks, q.maxblocks
from sys.tsq$ q, sys.ts$ ts
where q.ts# = ts.ts#
  and q.user# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_TUNE_MVIEW"("TASK_NAME","ACTION_ID","SCRIPT_TYPE","STATEMENT") AS 
SELECT t.name, a.id,
         decode(a.command, 3, 'IMPLEMENTATION', 4, 'IMPLEMENTATION',
                           18, 'UNDO', 23, 'IMPLEMENTATION',
                           24, 'UNDO', 25, 'IMPLEMENTATION',
                           26, 'UNDO', 27, 'IMPLEMENTATION',
                           'UNKNOWN'),
         decode(a.command,
                3,  'CREATE MATERIALIZED VIEW ' || a.attr1 ||
                    ' ' || a.attr6 || ' ' || a.attr3 || ' ' ||
                    a.attr4 || ' AS ' || a.attr5,
                4,  'CREATE MATERIALIZED VIEW LOG ON ' || a.attr1 ||
                    ' WITH ' || a.attr3 || ' ' || a.attr5 || ' ' ||
                    a.attr4,
                18, 'DROP MATERIALIZED VIEW ' || a.attr1 || ' ' || a.attr5,
                23, 'CREATE MATERIALIZED VIEW ' || a.attr1 ||
                    ' ' || a.attr6 || ' ' || a.attr3 || ' ' ||
                    a.attr4 || ' AS ' || a.attr5,
                24, 'DROP MATERIALIZED VIEW ' || a.attr1 || ' ' || a.attr5,
                25, 'DBMS_ADVANCED_REWRITE.BUILD_SAFE_REWRITE_EQUIVALENCE (''' ||
                    a.attr1 || ''',''' || a.attr5 || ''',''' || a.attr6 ||
                    ''',' || a.attr2 || ')',
                26, 'DBMS_ADVANCED_REWRITE.DROP_REWRITE_EQUIVALENCE(''' ||
                    a.attr1 || ''')' || a.attr5,
                27, 'ALTER MATERIALIZED VIEW LOG FORCE ON ' || a.attr1 ||
                    ' ADD ' || a.attr3 || ' ' || a.attr5 || ' ' ||
                    a.attr4,
                    a.attr5)
    FROM sys.wri$_adv_actions a, sys.wri$_adv_tasks t
    WHERE a.task_id = t.id
    AND t.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_TYPES"("TYPE_NAME","TYPE_OID","TYPECODE","ATTRIBUTES","METHODS","PREDEFINED","INCOMPLETE","FINAL","INSTANTIABLE","SUPERTYPE_OWNER","SUPERTYPE_NAME","LOCAL_ATTRIBUTES","LOCAL_METHODS","TYPEID") AS 
select o.name, t.toid,
       decode(t.typecode, 108, 'OBJECT',
                          122, 'COLLECTION',
                          o.name),
       t.attributes, t.methods,
       decode(bitand(t.properties, 16), 16, 'YES', 0, 'NO'),
       decode(bitand(t.properties, 256), 256, 'YES', 0, 'NO'),
       decode(bitand(t.properties, 8), 8, 'NO', 'YES'),
       decode(bitand(t.properties, 65536), 65536, 'NO', 'YES'),
       su.name, so.name, t.local_attrs, t.local_methods, t.typeid
from sys.type$ t, sys.obj$ o, sys.obj$ so, sys.user$ su
where o.owner# = userenv('SCHEMAID')
  and o.oid$ = t.tvoid
  and o.subname IS NULL -- only the most recent version
  and o.type# <> 10 -- must not be invalid
  and bitand(t.properties, 2048) = 0 -- not system-generated
  and t.supertoid = so.oid$ (+) and so.owner# = su.user# (+);

CREATE OR REPLACE FORCE VIEW "USER_TYPE_ATTRS"("TYPE_NAME","ATTR_NAME","ATTR_TYPE_MOD","ATTR_TYPE_OWNER","ATTR_TYPE_NAME","LENGTH","PRECISION","SCALE","CHARACTER_SET_NAME","ATTR_NO","INHERITED") AS 
select o.name, a.name,
       decode(bitand(a.properties, 32768), 32768, 'REF',
              decode(bitand(a.properties, 16384), 16384, 'POINTER')),
       nvl2(a.synobj#, (select u.name from user$ u, obj$ o
            where o.owner#=u.user# and o.obj#=a.synobj#),
            decode(bitand(at.properties, 64), 64, null, au.name)),
       nvl2(a.synobj#, (select o.name from obj$ o where o.obj#=a.synobj#),
            decode(at.typecode,
                   52, decode(a.charsetform, 2, 'NVARCHAR2', ao.name),
                   53, decode(a.charsetform, 2, 'NCHAR', ao.name),
                   54, decode(a.charsetform, 2, 'NCHAR VARYING', ao.name),
                   61, decode(a.charsetform, 2, 'NCLOB', ao.name),
                   ao.name)),
       a.length, a.precision#, a.scale,
       decode(a.charsetform, 1, 'CHAR_CS',
                             2, 'NCHAR_CS',
                             3, NLS_CHARSET_NAME(a.charsetid),
                             4, 'ARG:'||a.charsetid),
a.attribute#, decode(bitand(nvl(a.xflags,0), 1), 1, 'YES', 'NO')
from sys.obj$ o, sys.type$ t, sys.attribute$ a,
     sys.obj$ ao, sys.user$ au, sys.type$ at
where o.owner# = userenv('SCHEMAID')
  and o.oid$ = t.toid
  and o.subname IS NULL -- only the latest version
  and o.type# <> 10 -- must not be invalid
  and bitand(t.properties, 2048) = 0 -- not system-generated
  and t.toid = a.toid
  and t.version# = a.version#
  and a.attr_toid = ao.oid$
  and ao.owner# = au.user#
  and a.attr_toid = at.tvoid;

CREATE OR REPLACE FORCE VIEW "USER_TYPE_METHODS"("TYPE_NAME","METHOD_NAME","METHOD_NO","METHOD_TYPE","PARAMETERS","RESULTS","FINAL","INSTANTIABLE","OVERRIDING","INHERITED") AS 
select o.name, m.name, m.method#,
       decode(bitand(m.properties, 512), 512, 'MAP',
              decode(bitand(m.properties, 2048), 2048, 'ORDER', 'PUBLIC')),
       m.parameters#, m.results,
       decode(bitand(m.properties, 8), 8, 'NO', 'YES'),
       decode(bitand(m.properties, 65536), 65536, 'NO', 'YES'),
       decode(bitand(m.properties, 131072), 131072, 'YES', 'NO'),
       decode(bitand(nvl(m.xflags,0), 1), 1, 'YES', 'NO')
from sys.obj$ o, sys.method$ m
where o.owner# = userenv('SCHEMAID')
  and o.type# <> 10 -- must not be invalid
  and o.oid$ = m.toid
  and o.subname IS NULL -- get the latest version only;

CREATE OR REPLACE FORCE VIEW "USER_TYPE_VERSIONS"("TYPE_NAME","VERSION#","TYPECODE","STATUS","LINE","TEXT","HASHCODE") AS 
select o.name, t.version#,
       decode(t.typecode, 108, 'OBJECT',
                          122, 'COLLECTION',
                          o.name),
       decode(o.status, 0, 'N/A', 1, 'VALID', 'INVALID'),
       s.line, s.source,
       t.hashcode
from sys.obj$ o, sys.source$ s, sys.type$ t
  where o.obj# = s.obj# and o.oid$ = t.tvoid and o.type# = 13
  and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_UNUSED_COL_TABS"("TABLE_NAME","COUNT") AS 
select o.name, count(*)
from sys.col$ c, sys.obj$ o
where o.obj# = c.obj#
  and o.owner# = userenv('SCHEMAID')
  and bitand(c.property, 32768) = 32768             -- is unused columns
  and bitand(c.property, 1) != 1                    -- not ADT attribute col
  and bitand(c.property, 1024) != 1024              -- not NTAB's setid col
  group by o.name;

CREATE OR REPLACE FORCE VIEW "USER_UPDATABLE_COLUMNS"("OWNER","TABLE_NAME","COLUMN_NAME","UPDATABLE","INSERTABLE","DELETABLE") AS 
select u.name, o.name, c.name,
       decode(bitand(c.fixedstorage,2),
              2, decode(bitand(v.flags,8192), 8192, 'YES', 'NO'),
              decode(bitand(c.property,4096),4096,'NO','YES')),
       decode(bitand(c.fixedstorage,2),
              2, decode(bitand(v.flags,4096), 4096, 'YES', 'NO'),
              decode(bitand(c.property,2048),2048,'NO','YES')),
       decode(bitand(c.fixedstorage,2),
              2, decode(bitand(v.flags,16384), 16384, 'YES', 'NO'),
              decode(bitand(c.property,8192),8192,'NO','YES'))
from sys.obj$ o, sys.user$ u, sys.col$ c, sys.view$ v
where u.user# = o.owner#
  and c.obj#  = o.obj#
  and c.obj#  = v.obj#(+)
  and u.user# = userenv('SCHEMAID')
  and bitand(c.property, 32) = 0 /* not hidden column */;

CREATE OR REPLACE FORCE VIEW "USER_USERS"("USERNAME","USER_ID","ACCOUNT_STATUS","LOCK_DATE","EXPIRY_DATE","DEFAULT_TABLESPACE","TEMPORARY_TABLESPACE","CREATED","INITIAL_RSRC_CONSUMER_GROUP","EXTERNAL_NAME") AS 
select u.name, u.user#,
       m.status,
       decode(u.astatus, 4, u.ltime,
                         5, u.ltime,
                         6, u.ltime,
                         8, u.ltime,
                         9, u.ltime,
                         10, u.ltime, to_date(NULL)),
       decode(u.astatus,
              1, u.exptime,
              2, u.exptime,
              5, u.exptime,
              6, u.exptime,
              9, u.exptime,
              10, u.exptime,
              decode(u.ptime, '', to_date(NULL),
                decode(p.limit#, 2147483647, to_date(NULL),
                 decode(p.limit#, 0,
                   decode(dp.limit#, 2147483647, to_date(NULL), u.ptime +
                     dp.limit#/86400),
                   u.ptime + p.limit#/86400)))),
       dts.name, tts.name, u.ctime,
       nvl(cgm.consumer_group, 'DEFAULT_CONSUMER_GROUP'),
       u.ext_username
from sys.user$ u left outer join sys.resource_group_mapping$ cgm
     on (cgm.attribute = 'ORACLE_USER' and cgm.status = 'ACTIVE' and
         cgm.value = u.name),
     sys.ts$ dts, sys.ts$ tts, sys.user_astatus_map m,
     profile$ p, profile$ dp
where u.datats# = dts.ts#
  and u.tempts# = tts.ts#
  and u.astatus = m.status#
  and u.type# = 1
  and u.user# = userenv('SCHEMAID')
  and u.resource$ = p.profile#
  and dp.profile# = 0
  and dp.type# = 1
  and dp.resource# = 1
  and p.type# = 1
  and p.resource# = 1;

CREATE OR REPLACE FORCE VIEW "USER_USTATS"("OBJECT_OWNER","OBJECT_NAME","PARTITION_NAME","OBJECT_TYPE","ASSOCIATION","COLUMN_NAME","STATSTYPE_SCHEMA","STATSTYPE_NAME","STATISTICS") AS 
select u.name, o.name, o.subname,
         decode (bitand(s.property, 3), 1, 'INDEX', 2, 'COLUMN'),
         decode (bitand(s.property, 12), 8, 'DIRECT', 4, 'IMPLICIT'),
         c.name, u1.name, o1.name, s.statistics
  from   sys.user$ u, sys.obj$ o, sys.col$ c, sys.ustats$ s,
         sys.user$ u1, sys.obj$ o1
  where  bitand(s.property, 3)=2 and s.obj#=o.obj# and o.owner#=u.user#
  and    s.intcol#=c.intcol# and s.statstype#=o1.obj#
  and    o1.owner#=u1.user# and c.obj#=s.obj#
  and    o.owner#=userenv('SCHEMAID')
union all    -- partition case
  select u.name, o.name, o.subname,
         decode (bitand(s.property, 3), 1, 'INDEX', 2, 'COLUMN'),
         decode (bitand(s.property, 12), 8, 'DIRECT', 4, 'IMPLICIT'),
         c.name, u1.name, o1.name, s.statistics
  from   sys.user$ u, sys.user$ u1, sys.obj$ o, sys.obj$ o1, sys.col$ c,
         sys.ustats$ s, sys.tabpart$ t, sys.obj$ o2
  where  bitand(s.property, 3)=2 and s.obj# = o.obj#
  and    s.obj# = t.obj# and t.bo# = o2.obj# and o2.owner# = u.user#
  and    s.intcol# = c.intcol# and s.statstype#=o1.obj# and o1.owner#=u1.user#
  and    t.bo#=c.obj#  and o.owner#=userenv('SCHEMAID')
union all
  select u.name, o.name, o.subname,
         decode (bitand(s.property, 3), 1, 'INDEX', 2, 'COLUMN'),
         decode (bitand(s.property, 12), 8, 'DIRECT', 4, 'IMPLICIT'),
          NULL, u1.name, o1.name, s.statistics
  from   sys.user$ u, sys.obj$ o, sys.ustats$ s,
         sys.user$ u1, sys.obj$ o1
  where  bitand(s.property, 3)=1 and s.obj#=o.obj# and o.owner#=u.user#
  and    s.statstype#=o1.obj# and o1.owner#=u1.user# and o.type#=1
  and    o.owner#= userenv('SCHEMAID')
union all -- index partition
  select u.name, o.name, o.subname,
         decode (bitand(s.property, 3), 1, 'INDEX', 2, 'COLUMN'),
         decode (bitand(s.property, 12), 8, 'DIRECT', 4, 'IMPLICIT'),
         NULL, u1.name, o1.name, s.statistics
  from   sys.user$ u, sys.user$ u1, sys.obj$ o, sys.obj$ o1,
         sys.ustats$ s, sys.indpart$ i, sys.obj$ o2
  where  bitand(s.property, 3)=1 and s.obj# = o.obj#
  and    s.obj# = i.obj# and i.bo# = o2.obj# and o2.owner# = u.user#
  and    s.statstype#=o1.obj# and o1.owner#=u1.user#
  and    o.owner#=userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_VARRAYS"("PARENT_TABLE_NAME","PARENT_TABLE_COLUMN","TYPE_OWNER","TYPE_NAME","LOB_NAME","STORAGE_SPEC","RETURN_TYPE","ELEMENT_SUBSTITUTABLE") AS 
select distinct op.name, ac.name,
       nvl2(ct.synobj#, (select u.name from user$ u, obj$ o
            where o.owner#=u.user# and o.obj#=ct.synobj#), ut.name),
       nvl2(ct.synobj#, (select o.name from obj$ o
            where o.obj#=ct.synobj#), ot.name),
       NULL,
       lpad(decode(bitand(ct.flags, 64), 64, 'USER_SPECIFIED', 'DEFAULT'), 30),
       lpad(decode(bitand(ct.flags, 32), 32, 'LOCATOR', 'VALUE'), 20),
       lpad((case when bitand(ct.flags, 5120)=0 and bitand(t.properties, 8)= 8
       then 'Y' else 'N' end), 25)
from sys.obj$ op, sys.obj$ ot, sys.col$ c, sys.coltype$ ct, sys.user$ u,
  sys.user$ ut, sys.attrcol$ ac, sys.type$ t, sys.collection$ cl
where op.owner# = userenv('SCHEMAID')
  and c.obj# = op.obj#
  and c.obj# = ac.obj#
  and c.intcol# = ac.intcol#
  and op.obj# = ct.obj#
  and ct.toid = ot.oid$
  and ct.intcol# = c.intcol#
  and ot.owner# = ut.user#
  and ct.toid=cl.toid
  and cl.elem_toid=t.tvoid
  and bitand(ct.flags,8) = 8
  and bitand(c.property, 128) != 128
  and bitand(c.property,32768) != 32768           /* not unused column */
union all
select distinct op.name, ac.name,
       nvl2(ct.synobj#, (select u.name from user$ u, obj$ o
            where o.owner#=u.user# and o.obj#=ct.synobj#), ut.name),
       nvl2(ct.synobj#, (select o.name from obj$ o
            where o.obj#=ct.synobj#), ot.name),
       o.name,
       lpad(decode(bitand(ct.flags, 64), 64, 'USER_SPECIFIED', 'DEFAULT'), 30),
       lpad(decode(bitand(ct.flags, 32), 32, 'LOCATOR', 'VALUE'), 20),
       lpad((case when bitand(ct.flags, 5120)=0 and bitand(t.properties, 8)= 8
       then 'Y' else 'N' end), 25)
from sys.lob$ l, sys.obj$ o, sys.obj$ op, sys.obj$ ot, sys.col$ c,
  sys.coltype$ ct, sys.user$ u, sys.user$ ut, sys.attrcol$ ac, sys.type$ t,
  sys.collection$ cl
where o.owner# = userenv('SCHEMAID')
  and l.obj# = op.obj#
  and l.lobj# = o.obj#
  and c.obj# = op.obj#
  and l.intcol# = c.intcol#
  and c.obj# = ac.obj#
  and c.intcol# = ac.intcol#
  and op.obj# = ct.obj#
  and ct.toid = ot.oid$
  and ct.intcol#=l.intcol#
  and ot.owner# = ut.user#
  and ct.toid=cl.toid
  and cl.elem_toid=t.tvoid
  and bitand(ct.flags,8) = 8
  and bitand(c.property, 128) = 128
  and bitand(c.property,32768) != 32768           /* not unused column */
union all
select op.name, c.name,
       nvl2(ct.synobj#, (select u.name from user$ u, obj$ o
            where o.owner#=u.user# and o.obj#=ct.synobj#), ut.name),
       nvl2(ct.synobj#, (select o.name from obj$ o
            where o.obj#=ct.synobj#), ot.name),
       NULL,
       lpad(decode(bitand(ct.flags, 64), 64, 'USER_SPECIFIED', 'DEFAULT'), 30),
       lpad(decode(bitand(ct.flags, 32), 32, 'LOCATOR', 'VALUE'), 20),
       lpad((case when bitand(ct.flags, 5120)=0 and bitand(t.properties, 8)= 8
       then 'Y' else 'N' end), 25)
from sys.obj$ op, sys.obj$ ot, sys.col$ c, sys.coltype$ ct, sys.user$ ut,
  sys.type$ t, sys.collection$ cl
where op.owner# = userenv('SCHEMAID')
  and c.obj# = op.obj#
  and bitand(c.property,1)=0
  and op.obj# = ct.obj#
  and ct.toid = ot.oid$
  and ct.intcol# = c.intcol#
  and ot.owner# = ut.user#
  and ct.toid=cl.toid
  and cl.elem_toid=t.tvoid
  and bitand(ct.flags,8)=8
  and bitand(c.property, 128) != 128
  and bitand(c.property,32768) != 32768           /* not unused column */
union all
select op.name, c.name,
       nvl2(ct.synobj#, (select u.name from user$ u, obj$ o
            where o.owner#=u.user# and o.obj#=ct.synobj#), ut.name),
       nvl2(ct.synobj#, (select o.name from obj$ o
            where o.obj#=ct.synobj#), ot.name),
       o.name,
       lpad(decode(bitand(ct.flags, 64), 64, 'USER_SPECIFIED', 'DEFAULT'), 30),
       lpad(decode(bitand(ct.flags, 32), 32, 'LOCATOR', 'VALUE'), 20),
       lpad((case when bitand(ct.flags, 5120)=0 and bitand(t.properties, 8)= 8
       then 'Y' else 'N' end), 25)
from sys.lob$ l, sys.obj$ o, sys.obj$ op, sys.obj$ ot,
  sys.col$ c, sys.coltype$ ct, sys.user$ ut, sys.type$ t, sys.collection$ cl
where o.owner# = userenv('SCHEMAID')
  and l.obj# = op.obj#
  and l.lobj# = o.obj#
  and c.obj# = op.obj#
  and l.intcol# = c.intcol#
  and bitand(c.property,1)=0
  and op.obj# = ct.obj#
  and ct.toid = ot.oid$
  and ct.intcol#=l.intcol#
  and ot.owner# = ut.user#
  and ct.toid=cl.toid
  and cl.elem_toid=t.tvoid
  and bitand(ct.flags,8)=8
  and bitand(c.property, 128) = 128
  and bitand(c.property,32768) != 32768           /* not unused column */;

CREATE OR REPLACE FORCE VIEW "USER_VIEWS"("VIEW_NAME","TEXT_LENGTH","TEXT","TYPE_TEXT_LENGTH","TYPE_TEXT","OID_TEXT_LENGTH","OID_TEXT","VIEW_TYPE_OWNER","VIEW_TYPE","SUPERVIEW_NAME") AS 
select o.name, v.textlength, v.text, t.typetextlength, t.typetext,
       t.oidtextlength, t.oidtext, t.typeowner, t.typename,
       decode(bitand(v.property, 134217728), 134217728,
              (select sv.name from superobj$ h, obj$ sv
              where h.subobj# = o.obj# and h.superobj# = sv.obj#), null)
from sys.obj$ o, sys.view$ v, sys.typed_view$ t
where o.obj# = v.obj#
  and o.obj# = t.obj#(+)
  and o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_WARNING_SETTINGS"("OBJECT_NAME","OBJECT_ID","OBJECT_TYPE","WARNING","SETTING") AS 
SELECT o.name, o.obj#,
         DECODE(o.type#,
                 7, 'PROCEDURE',
                 8, 'FUNCTION',
                 9, 'PACKAGE',
                11, 'PACKAGE BODY',
                12, 'TRIGGER',
                13, 'TYPE',
                14, 'TYPE BODY',
                    'UNDEFINED'),
         DECODE(w.warning,
                -1, 'INFORMATIONAL',
                -2, 'PERFORMANCE',
                -3, 'SEVERE',
                -4, 'ALL',
                w.warning),
         DECODE(w.setting,
                0, 'DISABLE',
                1, 'ENABLE',
                2, 'ERROR',
                   'INVALID')
    FROM sys.obj$ o,
    TABLE(dbms_warning_internal.show_warning_settings(o.obj#)) w
    WHERE o.linkname IS NULL
    AND o.obj# = w.obj_no
    AND o.type# IN (7, 8, 9, 11, 12, 13, 14)
    AND o.owner# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_WORKSPACES"("WORKSPACE","PARENT_WORKSPACE","PARENT_SAVEPOINT","OWNER","CREATETIME","DESCRIPTION","FREEZE_STATUS","FREEZE_MODE","FREEZE_WRITER","FREEZE_OWNER","SESSION_DURATION","CURRENT_SESSION","RESOLVE_STATUS","RESOLVE_USER","CONTINUALLY_REFRESHED","WORKSPACE_LOCKMODE","WORKSPACE_LOCKMODE_OVERRIDE","MP_ROOT_WORKSPACE") AS 
select st.workspace, st.parent_workspace, ssp.savepoint parent_savepoint,
       st.owner, st.createTime, st.description,
       decode(st.freeze_status,'LOCKED','FROZEN',
                              'UNLOCKED','UNFROZEN') freeze_status,
       decode(st.oper_status, null, st.freeze_mode,'INTERNAL') freeze_mode,
       decode(st.freeze_mode, '1WRITER_SESSION', s.username, st.freeze_writer) freeze_writer,
       decode(st.session_duration, 0, st.freeze_owner, s.username) freeze_owner,
       decode(st.freeze_status, 'UNLOCKED', null, decode(st.session_duration, 1, 'YES', 'NO')) session_duration,
       decode(st.session_duration, 1,
                     decode((select 1 from dual
                             where s.sid=sys_context('lt_ctx', 'cid') and s.serial#=sys_context('lt_ctx', 'serial#')),
                           1, 'YES', 'NO'),
             null) current_session,
       decode(rst.workspace,null,'INACTIVE','ACTIVE') resolve_status,
       rst.resolve_user,
       decode(st.isRefreshed, 1, 'YES', 'NO') continually_refreshed,
       decode(substr(st.wm_lockmode, 1, 1),
              'S', 'SHARED',
              'E', 'EXCLUSIVE',
              'C', 'CARRY', NULL) workspace_lockmode,
       decode(substr(st.wm_lockmode, 3, 1), 'Y', 'YES', 'N', 'NO', NULL) workspace_lockmode_override,
       mp_root mp_root_workspace
from   wmsys.wm$workspaces_table st, wmsys.wm$workspace_savepoints_table ssp,
       wmsys.wm$resolve_workspaces_table  rst, V$session s
where  st.owner = USER and ((ssp.position is null) or ( ssp.position =
	(select min(position) from wmsys.wm$workspace_savepoints_table where version=ssp.version) )) and
       st.parent_version = ssp.version (+) and
       st.workspace = rst.workspace (+) and
       to_char(s.sid(+)) = substr(st.freeze_owner, 1, instr(st.freeze_owner, ',')-1)  and
       to_char(s.serial#(+)) = substr(st.freeze_owner, instr(st.freeze_owner, ',')+1)
WITH READ ONLY;

CREATE OR REPLACE FORCE VIEW "USER_XML_SCHEMAS"("SCHEMA_URL","LOCAL","SCHEMA","INT_OBJNAME","QUAL_SCHEMA_URL") AS 
select s.xmldata.schema_url,
          case when bitand(to_number(s.xmldata.flags,'xxxxxxxx'), 16) = 16
               then 'NO' else 'YES' end,
          value(s),
          xdb.xdb$Extname2Intname(s.xmldata.schema_url,s.xmldata.schema_owner),
          case when bitand(to_number(s.xmldata.flags,'xxxxxxxx'), 16) = 16
               then s.xmldata.schema_url
               else 'http://xmlns.oracle.com/xdb/schemas/' ||
                    s.xmldata.schema_owner || '/' ||
                    case when substr(s.xmldata.schema_url, 1, 7) = 'http://'
                         then substr(s.xmldata.schema_url, 8)
                         else s.xmldata.schema_url
                    end
          end
    from user$ u, xdb.xdb$schema s
    where u.name = s.xmldata.schema_owner
    and u.user# = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "USER_XML_TABLES"("TABLE_NAME","XMLSCHEMA","SCHEMA_OWNER","ELEMENT_NAME","STORAGE_TYPE") AS 
select o.name, null, null, null,
    decode(bitand(opq.flags,5),1,'OBJECT-RELATIONAL','CLOB')
from sys.opqtype$ opq, sys.tab$ t, sys.obj$ o, sys.coltype$ ac, sys.col$ tc
where o.owner# = userenv('SCHEMAID')
  and o.obj# = t.obj#
  and bitand(t.property, 1) = 1
  and t.obj# = tc.obj#
  and tc.name = 'SYS_NC_ROWINFO$'
  and tc.obj# = ac.obj#
  and tc.intcol# = ac.intcol#
  and ac.toid = '00000000000000000000000000020100'
  and tc.intcol# =  opq.intcol#
  and tc.obj# =  opq.obj#
  and bitand(opq.flags,2) = 0
 union all
  select o.name, schm.xmldata.schema_url, schm.xmldata.schema_owner,
decode(xel.xmldata.property.name, null,
        xel.xmldata.property.propref_name.name, xel.xmldata.property.name),
  decode(bitand(opq.flags,5),1,'OBJECT-RELATIONAL','CLOB')
from xdb.xdb$element xel, xdb.xdb$schema schm, sys.opqtype$ opq,
      sys.tab$ t, sys.obj$ o, sys.coltype$ ac, sys.col$ tc
where o.owner# = userenv('SCHEMAID')
  and o.obj# = t.obj#
  and bitand(t.property, 1) = 1
  and t.obj# = tc.obj#
  and tc.name = 'SYS_NC_ROWINFO$'
  and tc.obj# = ac.obj#
  and tc.intcol# = ac.intcol#
  and ac.toid = '00000000000000000000000000020100'
  and tc.intcol# =  opq.intcol#
  and tc.obj# =  opq.obj#
  and opq.schemaoid =  schm.sys_nc_oid$
  and bitand(opq.flags,2) = 2
  and ref(schm) =  xel.xmldata.property.parent_schema
  and opq.elemnum =  xel.xmldata.property.prop_number;

CREATE OR REPLACE FORCE VIEW "USER_XML_TAB_COLS"("TABLE_NAME","COLUMN_NAME","XMLSCHEMA","SCHEMA_OWNER","ELEMENT_NAME","STORAGE_TYPE") AS 
select o.name,
   decode(bitand(tc.property, 1), 1, attr.name, tc.name),null, null, null,
   decode(bitand(opq.flags,5),1,'OBJECT-RELATIONAL','CLOB')
from  sys.opqtype$ opq,
      sys.tab$ t, sys.obj$ o, sys.coltype$ ac, sys.col$ tc,
      sys.attrcol$ attr
where o.owner# = userenv('SCHEMAID')
  and o.obj# = t.obj#
  and t.obj# = tc.obj#
  and tc.obj# = ac.obj#
  and tc.intcol# = ac.intcol#
  and ac.toid = '00000000000000000000000000020100'
  and tc.intcol# =  opq.intcol#
  and tc.obj# =  opq.obj#
  and tc.obj#    = attr.obj#(+)
  and tc.intcol# = attr.intcol#(+)
  and tc.name != 'SYS_NC_ROWINFO$'
  and bitand(opq.flags,2) = 0
  union all
 select o.name,
   decode(bitand(tc.property, 1), 1, attr.name, tc.name),
   schm.xmldata.schema_url, schm.xmldata.schema_owner,
decode(xel.xmldata.property.name, null,
        xel.xmldata.property.propref_name.name, xel.xmldata.property.name),
    decode(bitand(opq.flags,5),1,'OBJECT-RELATIONAL','CLOB')
 from xdb.xdb$element xel, xdb.xdb$schema schm, sys.opqtype$ opq,
      sys.tab$ t, sys.obj$ o, sys.coltype$ ac, sys.col$ tc,
      sys.attrcol$ attr
 where o.owner# = userenv('SCHEMAID')
  and o.obj# = t.obj#
  and t.obj# = tc.obj#
  and tc.obj# = ac.obj#
  and tc.intcol# = ac.intcol#
  and ac.toid = '00000000000000000000000000020100'
  and tc.intcol# =  opq.intcol#
  and tc.obj# =  opq.obj#
  and tc.obj#    = attr.obj#(+)
  and tc.intcol# = attr.intcol#(+)
  and bitand(opq.flags,2) = 2
  and opq.schemaoid =  schm.sys_nc_oid$
  and ref(schm) =  xel.xmldata.property.parent_schema
  and opq.elemnum =  xel.xmldata.property.prop_number;

CREATE OR REPLACE FORCE VIEW "USER_XML_VIEWS"("VIEW_NAME","XMLSCHEMA","SCHEMA_OWNER","ELEMENT_NAME") AS 
select o.name, null, null, null
from sys.opqtype$ opq,
      sys.view$ v, sys.obj$ o, sys.coltype$ ac, sys.col$ tc
where o.owner# = userenv('SCHEMAID')
  and o.obj# = v.obj#
  and bitand(v.property, 1) = 1
  and v.obj# = tc.obj#
  and tc.name = 'SYS_NC_ROWINFO$'
  and tc.obj# = ac.obj#
  and tc.intcol# = ac.intcol#
  and ac.toid = '00000000000000000000000000020100'
  and tc.intcol# =  opq.intcol#
  and tc.obj# =  opq.obj#
  and bitand(opq.flags,2) = 0
union all
 select o.name, schm.xmldata.schema_url, schm.xmldata.schema_owner,
decode(xel.xmldata.property.name, null,
        xel.xmldata.property.propref_name.name, xel.xmldata.property.name)
from xdb.xdb$element xel, xdb.xdb$schema schm, sys.opqtype$ opq,
      sys.view$ v, sys.obj$ o, sys.coltype$ ac, sys.col$ tc
where o.owner# = userenv('SCHEMAID')
  and o.obj# = v.obj#
  and bitand(v.property, 1) = 1
  and v.obj# = tc.obj#
  and tc.name = 'SYS_NC_ROWINFO$'
  and tc.obj# = ac.obj#
  and tc.intcol# = ac.intcol#
  and ac.toid = '00000000000000000000000000020100'
  and tc.intcol# =  opq.intcol#
  and tc.obj# =  opq.obj#
  and opq.schemaoid =  schm.sys_nc_oid$
  and ref(schm) =  xel.xmldata.property.parent_schema
  and opq.elemnum =  xel.xmldata.property.prop_number;

CREATE OR REPLACE FORCE VIEW "USER_XML_VIEW_COLS"("VIEW_NAME","COLUMN_NAME","XMLSCHEMA","SCHEMA_OWNER","ELEMENT_NAME") AS 
select o.name,
   decode(bitand(tc.property, 1), 1, attr.name, tc.name),
   null, null, null
from  sys.opqtype$ opq,
      sys.view$ v, sys.obj$ o, sys.coltype$ ac, sys.col$ tc,
      sys.attrcol$ attr
where o.owner# = userenv('SCHEMAID')
  and o.obj# = v.obj#
  and bitand(v.property, 1) = 1
  and v.obj# = tc.obj#
  and tc.obj# = ac.obj#
  and tc.intcol# = ac.intcol#
  and ac.toid = '00000000000000000000000000020100'
  and tc.intcol# =  opq.intcol#
  and tc.obj# =  opq.obj#
  and tc.obj#    = attr.obj#(+)
  and tc.intcol# = attr.intcol#(+)
  and bitand(opq.flags,2) = 0
union all
select o.name,
   decode(bitand(tc.property, 1), 1, attr.name, tc.name),
   schm.xmldata.schema_url, schm.xmldata.schema_owner,
decode(xel.xmldata.property.name, null,
        xel.xmldata.property.propref_name.name, xel.xmldata.property.name)
from xdb.xdb$element xel, xdb.xdb$schema schm, sys.opqtype$ opq,
      sys.view$ v, sys.obj$ o, sys.coltype$ ac, sys.col$ tc,
      sys.attrcol$ attr
where o.owner# = userenv('SCHEMAID')
  and o.obj# = v.obj#
  and bitand(v.property, 1) = 1
  and v.obj# = tc.obj#
  and tc.obj# = ac.obj#
  and tc.intcol# = ac.intcol#
  and ac.toid = '00000000000000000000000000020100'
  and tc.intcol# =  opq.intcol#
  and tc.obj# =  opq.obj#
  and tc.obj#    = attr.obj#(+)
  and tc.intcol# = attr.intcol#(+)
  and opq.schemaoid =  schm.sys_nc_oid$
  and ref(schm) =  xel.xmldata.property.parent_schema
  and opq.elemnum =  xel.xmldata.property.prop_number;

CREATE OR REPLACE FORCE VIEW "UTL_ALL_IND_COMPS"("CTYPE","INDEX_NAME","COMPONENT_NAME","TABLE_ID","TAB_OWNER_ID","IDX_ID","IND_OWNER_ID","IND_OWNER_NAME","COMP_ID","TCOMP_ID","CCOMP_ID","TCCOMP_ID","STATUS","LOCALITY","DEGREE","ROWCNT") AS 
SELECT "CTYPE","INDEX_NAME","COMPONENT_NAME","TABLE_ID","TAB_OWNER_ID","IDX_ID","IND_OWNER_ID","IND_OWNER_NAME","COMP_ID","TCOMP_ID","CCOMP_ID","TCCOMP_ID","STATUS","LOCALITY","DEGREE","ROWCNT" FROM "_utl$_gnp_ind" WHERE (tab_owner_id = userenv('SCHEMAID')
       OR ind_owner_id = userenv('SCHEMAID')
       OR EXISTS (SELECT NULL FROM sys.v$enabledprivs
                  WHERE priv_number = -72 /* ALTER ANY INDEX  */))
UNION ALL
SELECT "CTYPE","INDEX_NAME","COMPONENT_NAME","TABLE_ID","TAB_OWNER_ID","IDX_ID","IND_OWNER_ID","IND_OWNER_NAME","COMP_ID","TCOMP_ID","CCOMP_ID","TCCOMP_ID","STATUS","LOCALITY","DEGREE","ROWCNT" FROM "_utl$_gp_ind_parts" WHERE (tab_owner_id = userenv('SCHEMAID')
       OR ind_owner_id = userenv('SCHEMAID')
       OR EXISTS (SELECT NULL FROM sys.v$enabledprivs
                  WHERE priv_number = -72 /* ALTER ANY INDEX  */))
UNION ALL
SELECT "CTYPE","INDEX_NAME","COMPONENT_NAME","TABLE_ID","TAB_OWNER_ID","IDX_ID","IND_OWNER_ID","IND_OWNER_NAME","COMP_ID","TCOMP_ID","CCOMP_ID","TCCOMP_ID","STATUS","LOCALITY","DEGREE","ROWCNT" FROM "_utl$_lnc_ind_parts" WHERE (tab_owner_id = userenv('SCHEMAID')
       OR ind_owner_id = userenv('SCHEMAID')
       OR EXISTS (SELECT NULL FROM sys.v$enabledprivs
                  WHERE priv_number = -72 /* ALTER ANY INDEX  */))
UNION ALL
SELECT "CTYPE","INDEX_NAME","COMPONENT_NAME","TABLE_ID","TAB_OWNER_ID","IDX_ID","IND_OWNER_ID","IND_OWNER_NAME","COMP_ID","TCOMP_ID","CCOMP_ID","TCCOMP_ID","STATUS","LOCALITY","DEGREE","ROWCNT" FROM "_utl$_lc_ind_subs" WHERE (tab_owner_id = userenv('SCHEMAID')
       OR ind_owner_id = userenv('SCHEMAID')
       OR EXISTS (SELECT NULL FROM sys.v$enabledprivs
                  WHERE priv_number = -72 /* ALTER ANY INDEX  */));

CREATE OR REPLACE FORCE VIEW "UTL_RECOMP_INVALID_ALL"("OBJ#","OWNER","OBJNAME","TYPE#","NAMESPACE") AS 
SELECT "OBJ#","OWNER","OBJNAME","TYPE#","NAMESPACE" FROM utl_recomp_invalid_db
      WHERE obj# NOT IN (SELECT obj# from utl_recomp_compiled);

CREATE OR REPLACE FORCE VIEW "UTL_RECOMP_INVALID_DB"("OBJ#","OWNER","OBJNAME","TYPE#","NAMESPACE") AS 
SELECT o.obj#, u.name owner, o.name objname, o.type#, o.namespace
   FROM obj$ o, user$ u
   WHERE     o.owner# = u.user#
         AND o.remoteowner IS NULL
         AND o.status in (4, 5, 6)
         AND (   o.type# IN (1, 2, 4, 5, 7, 8, 9, 11, 12, 14,
                             22, 24, 29, 32, 33, 42, 43, 46, 59, 62)
              OR (o.type# = 13 AND o.subname IS NULL AND
                  NOT REGEXP_LIKE(o.name, 'SYS_PLSQL_[0-9]+_[0-9]+_[12]')))
         AND (BITAND(o.flags, 128) = 0);

CREATE OR REPLACE FORCE VIEW "UTL_RECOMP_INVALID_JAVA_SYN"("OBJ#","OWNER","OBJNAME","TYPE#","NAMESPACE") AS 
SELECT "OBJ#","OWNER","OBJNAME","TYPE#","NAMESPACE" FROM utl_recomp_invalid_db
   WHERE type# = 5 AND
         obj# IN (SELECT d.d_obj# FROM obj$ o, dependency$ d
                  WHERE o.obj# = d.p_obj# and o.type# = 29);

CREATE OR REPLACE FORCE VIEW "UTL_RECOMP_INVALID_PARALLEL"("OBJ#","OWNER","OBJNAME","TYPE#","NAMESPACE") AS 
SELECT "OBJ#","OWNER","OBJNAME","TYPE#","NAMESPACE" FROM utl_recomp_invalid_all WHERE type# NOT IN (29, 42);

CREATE OR REPLACE FORCE VIEW "UTL_RECOMP_INVALID_SEQ"("OBJ#","OWNER","OBJNAME","TYPE#","NAMESPACE") AS 
SELECT "OBJ#","OWNER","OBJNAME","TYPE#","NAMESPACE" FROM utl_recomp_invalid_all WHERE type# IN (29, 42);

CREATE OR REPLACE FORCE VIEW "V$OBJECT_USAGE"("INDEX_NAME","TABLE_NAME","MONITORING","USED","START_MONITORING","END_MONITORING") AS 
select io.name, t.name,
       decode(bitand(i.flags, 65536), 0, 'NO', 'YES'),
       decode(bitand(ou.flags, 1), 0, 'NO', 'YES'),
       ou.start_monitoring,
       ou.end_monitoring
from sys.obj$ io, sys.obj$ t, sys.ind$ i, sys.object_usage ou
where io.owner# = userenv('SCHEMAID')
  and i.obj# = ou.obj#
  and io.obj# = ou.obj#
  and t.obj# = i.bo#;

CREATE OR REPLACE FORCE VIEW "V_$ACCESS"("SID","OWNER","OBJECT","TYPE") AS 
select "SID","OWNER","OBJECT","TYPE" from v$access;

CREATE OR REPLACE FORCE VIEW "V_$ACTIVE_INSTANCES"("INST_NUMBER","INST_NAME") AS 
select "INST_NUMBER","INST_NAME" from v$active_instances;

CREATE OR REPLACE FORCE VIEW "V_$ACTIVE_SERVICES"("SERVICE_ID","NAME","NAME_HASH","NETWORK_NAME","CREATION_DATE","CREATION_DATE_HASH") AS 
select "SERVICE_ID","NAME","NAME_HASH","NETWORK_NAME","CREATION_DATE","CREATION_DATE_HASH" from v$active_services;

CREATE OR REPLACE FORCE VIEW "V_$ACTIVE_SESSION_HISTORY"("SAMPLE_ID","SAMPLE_TIME","SESSION_ID","SESSION_SERIAL#","USER_ID","SQL_ID","SQL_CHILD_NUMBER","SQL_PLAN_HASH_VALUE","SQL_OPCODE","SERVICE_HASH","SESSION_TYPE","SESSION_STATE","QC_SESSION_ID","QC_INSTANCE_ID","EVENT","EVENT_ID","EVENT#","SEQ#","P1","P2","P3","WAIT_TIME","TIME_WAITED","CURRENT_OBJ#","CURRENT_FILE#","CURRENT_BLOCK#","PROGRAM","MODULE","ACTION","CLIENT_ID") AS 
select "SAMPLE_ID","SAMPLE_TIME","SESSION_ID","SESSION_SERIAL#","USER_ID","SQL_ID","SQL_CHILD_NUMBER","SQL_PLAN_HASH_VALUE","SQL_OPCODE","SERVICE_HASH","SESSION_TYPE","SESSION_STATE","QC_SESSION_ID","QC_INSTANCE_ID","EVENT","EVENT_ID","EVENT#","SEQ#","P1","P2","P3","WAIT_TIME","TIME_WAITED","CURRENT_OBJ#","CURRENT_FILE#","CURRENT_BLOCK#","PROGRAM","MODULE","ACTION","CLIENT_ID" from v$active_session_history;

CREATE OR REPLACE FORCE VIEW "V_$ACTIVE_SESS_POOL_MTH"("NAME") AS 
select "NAME" from v$active_sess_pool_mth;

CREATE OR REPLACE FORCE VIEW "V_$ADVISOR_PROGRESS"("SID","SERIAL#","USERNAME","OPNAME","TASK_ID","TARGET","TARGET_DESC","SOFAR","TOTALWORK","UNITS","FINDINGS","START_TIME","LAST_UPDATE_TIME","TIME_REMAINING","ELAPSED_SECONDS","INFO1_DESC","INFO1","INFO2_DESC","INFO2","INFO3_DESC","INFO3","INFO4_DESC","INFO4") AS 
select "SID","SERIAL#","USERNAME","OPNAME","TASK_ID","TARGET","TARGET_DESC","SOFAR","TOTALWORK","UNITS","FINDINGS","START_TIME","LAST_UPDATE_TIME","TIME_REMAINING","ELAPSED_SECONDS","INFO1_DESC","INFO1","INFO2_DESC","INFO2","INFO3_DESC","INFO3","INFO4_DESC","INFO4" from v$advisor_progress;

CREATE OR REPLACE FORCE VIEW "V_$ALERT_TYPES"("REASON_ID","OBJECT_TYPE","TYPE","GROUP_NAME","SCOPE","INTERNAL_METRIC_CATEGORY","INTERNAL_METRIC_NAME") AS 
SELECT "REASON_ID","OBJECT_TYPE","TYPE","GROUP_NAME","SCOPE","INTERNAL_METRIC_CATEGORY","INTERNAL_METRIC_NAME" FROM v$alert_types;

CREATE OR REPLACE FORCE VIEW "V_$AQ"("QID","WAITING","READY","EXPIRED","TOTAL_WAIT","AVERAGE_WAIT") AS 
select QID, WAITING, READY, EXPIRED, TOTAL_WAIT,
         AVERAGE_WAIT from v$aq1;

CREATE OR REPLACE FORCE VIEW "V_$AQ1"("QID","WAITING","READY","EXPIRED","TOTAL_CONSUMERS","TOTAL_WAIT","AVERAGE_WAIT") AS 
select "QID","WAITING","READY","EXPIRED","TOTAL_CONSUMERS","TOTAL_WAIT","AVERAGE_WAIT" from v$aq1;

CREATE OR REPLACE FORCE VIEW "V_$ARCHIVE"("GROUP#","THREAD#","SEQUENCE#","ISCURRENT","CURRENT","FIRST_CHANGE#") AS 
select "GROUP#","THREAD#","SEQUENCE#","ISCURRENT","CURRENT","FIRST_CHANGE#" from v$archive;

CREATE OR REPLACE FORCE VIEW "V_$ARCHIVED_LOG"("RECID","STAMP","NAME","DEST_ID","THREAD#","SEQUENCE#","RESETLOGS_CHANGE#","RESETLOGS_TIME","RESETLOGS_ID","FIRST_CHANGE#","FIRST_TIME","NEXT_CHANGE#","NEXT_TIME","BLOCKS","BLOCK_SIZE","CREATOR","REGISTRAR","STANDBY_DEST","ARCHIVED","APPLIED","DELETED","STATUS","COMPLETION_TIME","DICTIONARY_BEGIN","DICTIONARY_END","END_OF_REDO","BACKUP_COUNT","ARCHIVAL_THREAD#","ACTIVATION#","IS_RECOVERY_DEST_FILE","COMPRESSED","FAL") AS 
select "RECID","STAMP","NAME","DEST_ID","THREAD#","SEQUENCE#","RESETLOGS_CHANGE#","RESETLOGS_TIME","RESETLOGS_ID","FIRST_CHANGE#","FIRST_TIME","NEXT_CHANGE#","NEXT_TIME","BLOCKS","BLOCK_SIZE","CREATOR","REGISTRAR","STANDBY_DEST","ARCHIVED","APPLIED","DELETED","STATUS","COMPLETION_TIME","DICTIONARY_BEGIN","DICTIONARY_END","END_OF_REDO","BACKUP_COUNT","ARCHIVAL_THREAD#","ACTIVATION#","IS_RECOVERY_DEST_FILE","COMPRESSED","FAL" from v$archived_log;

CREATE OR REPLACE FORCE VIEW "V_$ARCHIVE_DEST"("DEST_ID","DEST_NAME","STATUS","BINDING","NAME_SPACE","TARGET","ARCHIVER","SCHEDULE","DESTINATION","LOG_SEQUENCE","REOPEN_SECS","DELAY_MINS","NET_TIMEOUT","PROCESS","REGISTER","FAIL_DATE","FAIL_SEQUENCE","FAIL_BLOCK","FAILURE_COUNT","MAX_FAILURE","ERROR","ALTERNATE","DEPENDENCY","REMOTE_TEMPLATE","QUOTA_SIZE","QUOTA_USED","MOUNTID","TRANSMIT_MODE","ASYNC_BLOCKS","AFFIRM","TYPE","VALID_NOW","VALID_TYPE","VALID_ROLE","DB_UNIQUE_NAME","VERIFY","EXPEDITE") AS 
select "DEST_ID","DEST_NAME","STATUS","BINDING","NAME_SPACE","TARGET","ARCHIVER","SCHEDULE","DESTINATION","LOG_SEQUENCE","REOPEN_SECS","DELAY_MINS","NET_TIMEOUT","PROCESS","REGISTER","FAIL_DATE","FAIL_SEQUENCE","FAIL_BLOCK","FAILURE_COUNT","MAX_FAILURE","ERROR","ALTERNATE","DEPENDENCY","REMOTE_TEMPLATE","QUOTA_SIZE","QUOTA_USED","MOUNTID","TRANSMIT_MODE","ASYNC_BLOCKS","AFFIRM","TYPE","VALID_NOW","VALID_TYPE","VALID_ROLE","DB_UNIQUE_NAME","VERIFY","EXPEDITE" from v$archive_dest;

CREATE OR REPLACE FORCE VIEW "V_$ARCHIVE_DEST_STATUS"("DEST_ID","DEST_NAME","STATUS","TYPE","DATABASE_MODE","RECOVERY_MODE","PROTECTION_MODE","DESTINATION","STANDBY_LOGFILE_COUNT","STANDBY_LOGFILE_ACTIVE","ARCHIVED_THREAD#","ARCHIVED_SEQ#","APPLIED_THREAD#","APPLIED_SEQ#","ERROR","SRL","DB_UNIQUE_NAME") AS 
select "DEST_ID","DEST_NAME","STATUS","TYPE","DATABASE_MODE","RECOVERY_MODE","PROTECTION_MODE","DESTINATION","STANDBY_LOGFILE_COUNT","STANDBY_LOGFILE_ACTIVE","ARCHIVED_THREAD#","ARCHIVED_SEQ#","APPLIED_THREAD#","APPLIED_SEQ#","ERROR","SRL","DB_UNIQUE_NAME" from v$archive_dest_status;

CREATE OR REPLACE FORCE VIEW "V_$ARCHIVE_GAP"("THREAD#","LOW_SEQUENCE#","HIGH_SEQUENCE#") AS 
select "THREAD#","LOW_SEQUENCE#","HIGH_SEQUENCE#" from v$archive_gap;

CREATE OR REPLACE FORCE VIEW "V_$ARCHIVE_PROCESSES"("PROCESS","STATUS","LOG_SEQUENCE","STATE") AS 
select "PROCESS","STATUS","LOG_SEQUENCE","STATE" from v$archive_processes;

CREATE OR REPLACE FORCE VIEW "V_$ASM_ALIAS"("NAME","GROUP_NUMBER","FILE_NUMBER","FILE_INCARNATION","ALIAS_INDEX","ALIAS_INCARNATION","PARENT_INDEX","REFERENCE_INDEX","ALIAS_DIRECTORY","SYSTEM_CREATED") AS 
SELECT "NAME","GROUP_NUMBER","FILE_NUMBER","FILE_INCARNATION","ALIAS_INDEX","ALIAS_INCARNATION","PARENT_INDEX","REFERENCE_INDEX","ALIAS_DIRECTORY","SYSTEM_CREATED" FROM v$asm_alias;

CREATE OR REPLACE FORCE VIEW "V_$ASM_CLIENT"("GROUP_NUMBER","INSTANCE_NAME","DB_NAME","STATUS") AS 
SELECT "GROUP_NUMBER","INSTANCE_NAME","DB_NAME","STATUS" FROM v$asm_client;

CREATE OR REPLACE FORCE VIEW "V_$ASM_DISK"("GROUP_NUMBER","DISK_NUMBER","COMPOUND_INDEX","INCARNATION","MOUNT_STATUS","HEADER_STATUS","MODE_STATUS","STATE","REDUNDANCY","LIBRARY","TOTAL_MB","FREE_MB","NAME","FAILGROUP","LABEL","PATH","UDID","CREATE_DATE","MOUNT_DATE","REPAIR_TIMER","READS","WRITES","READ_ERRS","WRITE_ERRS","READ_TIME","WRITE_TIME","BYTES_READ","BYTES_WRITTEN") AS 
SELECT "GROUP_NUMBER","DISK_NUMBER","COMPOUND_INDEX","INCARNATION","MOUNT_STATUS","HEADER_STATUS","MODE_STATUS","STATE","REDUNDANCY","LIBRARY","TOTAL_MB","FREE_MB","NAME","FAILGROUP","LABEL","PATH","UDID","CREATE_DATE","MOUNT_DATE","REPAIR_TIMER","READS","WRITES","READ_ERRS","WRITE_ERRS","READ_TIME","WRITE_TIME","BYTES_READ","BYTES_WRITTEN" FROM v$asm_disk;

CREATE OR REPLACE FORCE VIEW "V_$ASM_DISKGROUP"("GROUP_NUMBER","NAME","SECTOR_SIZE","BLOCK_SIZE","ALLOCATION_UNIT_SIZE","STATE","TYPE","TOTAL_MB","FREE_MB") AS 
SELECT "GROUP_NUMBER","NAME","SECTOR_SIZE","BLOCK_SIZE","ALLOCATION_UNIT_SIZE","STATE","TYPE","TOTAL_MB","FREE_MB" FROM v$asm_diskgroup;

CREATE OR REPLACE FORCE VIEW "V_$ASM_FILE"("GROUP_NUMBER","FILE_NUMBER","COMPOUND_INDEX","INCARNATION","BLOCK_SIZE","BLOCKS","BYTES","SPACE","TYPE","REDUNDANCY","STRIPED","CREATION_DATE","MODIFICATION_DATE") AS 
SELECT "GROUP_NUMBER","FILE_NUMBER","COMPOUND_INDEX","INCARNATION","BLOCK_SIZE","BLOCKS","BYTES","SPACE","TYPE","REDUNDANCY","STRIPED","CREATION_DATE","MODIFICATION_DATE" FROM v$asm_file;

CREATE OR REPLACE FORCE VIEW "V_$ASM_OPERATION"("GROUP_NUMBER","OPERATION","STATE","POWER","ACTUAL","SOFAR","EST_WORK","EST_RATE","EST_MINUTES") AS 
SELECT "GROUP_NUMBER","OPERATION","STATE","POWER","ACTUAL","SOFAR","EST_WORK","EST_RATE","EST_MINUTES" FROM v$asm_operation;

CREATE OR REPLACE FORCE VIEW "V_$ASM_TEMPLATE"("GROUP_NUMBER","ENTRY_NUMBER","REDUNDANCY","STRIPE","SYSTEM","NAME") AS 
SELECT "GROUP_NUMBER","ENTRY_NUMBER","REDUNDANCY","STRIPE","SYSTEM","NAME" FROM v$asm_template;

CREATE OR REPLACE FORCE VIEW "V_$AW_AGGREGATE_OP"("NAME","LONGNAME","DEFAULT_WEIGHT") AS 
select "NAME","LONGNAME","DEFAULT_WEIGHT" from v$aw_aggregate_op;

CREATE OR REPLACE FORCE VIEW "V_$AW_ALLOCATE_OP"("NAME","LONGNAME") AS 
select "NAME","LONGNAME" from v$aw_allocate_op;

CREATE OR REPLACE FORCE VIEW "V_$AW_CALC"("SESSION_ID","AGGREGATE_CACHE_HITS","AGGREGATE_CACHE_MISSES","SESSION_CACHE_HITS","SESSION_CACHE_MISSES","POOL_HITS","POOL_MISSES","POOL_NEW_PAGES","POOL_RECLAIMED_PAGES","CACHE_WRITES","POOL_SIZE","CURR_DML_COMMAND","PREV_DML_COMMAND","AGGR_FUNC_LOGICAL_NA","AGGR_FUNC_PRECOMPUTE","AGGR_FUNC_CALCS") AS 
select "SESSION_ID","AGGREGATE_CACHE_HITS","AGGREGATE_CACHE_MISSES","SESSION_CACHE_HITS","SESSION_CACHE_MISSES","POOL_HITS","POOL_MISSES","POOL_NEW_PAGES","POOL_RECLAIMED_PAGES","CACHE_WRITES","POOL_SIZE","CURR_DML_COMMAND","PREV_DML_COMMAND","AGGR_FUNC_LOGICAL_NA","AGGR_FUNC_PRECOMPUTE","AGGR_FUNC_CALCS" from v$aw_calc;

CREATE OR REPLACE FORCE VIEW "V_$AW_LONGOPS"("SESSION_ID","CURSOR_NAME","COMMAND","STATUS","ROWS_PROCESSED","START_TIME") AS 
select "SESSION_ID","CURSOR_NAME","COMMAND","STATUS","ROWS_PROCESSED","START_TIME" from v$aw_longops;

CREATE OR REPLACE FORCE VIEW "V_$AW_OLAP"("SESSION_ID","AW_NUMBER","ATTACH_MODE","GENERATION","TEMP_SPACE_PAGES","TEMP_SPACE_READS","LOB_READS","POOL_CHANGED_PAGES","POOL_UNCHANGED_PAGES") AS 
select "SESSION_ID","AW_NUMBER","ATTACH_MODE","GENERATION","TEMP_SPACE_PAGES","TEMP_SPACE_READS","LOB_READS","POOL_CHANGED_PAGES","POOL_UNCHANGED_PAGES" from v$aw_olap;

CREATE OR REPLACE FORCE VIEW "V_$AW_SESSION_INFO"("SESSION_ID","CLIENT_TYPE","SESSION_STATE","SESSION_HANDLE","USERID","TOTAL_TRANSACTION","TOTAL_TRANSACTION_TIME","AVERAGE_TRANSACTION_TIME","TRANSACTION_CPU_TIME","TOTAL_TRANSACTION_CPU_TIME","AVERAGE_TRANSACTION_CPU_TIME") AS 
select "SESSION_ID","CLIENT_TYPE","SESSION_STATE","SESSION_HANDLE","USERID","TOTAL_TRANSACTION","TOTAL_TRANSACTION_TIME","AVERAGE_TRANSACTION_TIME","TRANSACTION_CPU_TIME","TOTAL_TRANSACTION_CPU_TIME","AVERAGE_TRANSACTION_CPU_TIME" from v$aw_session_info;

CREATE OR REPLACE FORCE VIEW "V_$BACKUP"("FILE#","STATUS","CHANGE#","TIME") AS 
select "FILE#","STATUS","CHANGE#","TIME" from v$backup;

CREATE OR REPLACE FORCE VIEW "V_$BACKUP_ASYNC_IO"("SID","SERIAL","USE_COUNT","RMAN_STATUS_RECID","RMAN_STATUS_STAMP","DEVICE_TYPE","TYPE","STATUS","FILENAME","SET_COUNT","SET_STAMP","BUFFER_SIZE","BUFFER_COUNT","TOTAL_BYTES","OPEN_TIME","CLOSE_TIME","ELAPSED_TIME","MAXOPENFILES","BYTES","EFFECTIVE_BYTES_PER_SECOND","IO_COUNT","READY","SHORT_WAITS","SHORT_WAIT_TIME_TOTAL","SHORT_WAIT_TIME_MAX","LONG_WAITS","LONG_WAIT_TIME_TOTAL","LONG_WAIT_TIME_MAX") AS 
select "SID","SERIAL","USE_COUNT","RMAN_STATUS_RECID","RMAN_STATUS_STAMP","DEVICE_TYPE","TYPE","STATUS","FILENAME","SET_COUNT","SET_STAMP","BUFFER_SIZE","BUFFER_COUNT","TOTAL_BYTES","OPEN_TIME","CLOSE_TIME","ELAPSED_TIME","MAXOPENFILES","BYTES","EFFECTIVE_BYTES_PER_SECOND","IO_COUNT","READY","SHORT_WAITS","SHORT_WAIT_TIME_TOTAL","SHORT_WAIT_TIME_MAX","LONG_WAITS","LONG_WAIT_TIME_TOTAL","LONG_WAIT_TIME_MAX" from v$backup_async_io;

CREATE OR REPLACE FORCE VIEW "V_$BACKUP_CORRUPTION"("RECID","STAMP","SET_STAMP","SET_COUNT","PIECE#","FILE#","BLOCK#","BLOCKS","CORRUPTION_CHANGE#","MARKED_CORRUPT","CORRUPTION_TYPE") AS 
select "RECID","STAMP","SET_STAMP","SET_COUNT","PIECE#","FILE#","BLOCK#","BLOCKS","CORRUPTION_CHANGE#","MARKED_CORRUPT","CORRUPTION_TYPE" from v$backup_corruption;

CREATE OR REPLACE FORCE VIEW "V_$BACKUP_DATAFILE"("RECID","STAMP","SET_STAMP","SET_COUNT","FILE#","CREATION_CHANGE#","CREATION_TIME","RESETLOGS_CHANGE#","RESETLOGS_TIME","INCREMENTAL_LEVEL","INCREMENTAL_CHANGE#","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","ABSOLUTE_FUZZY_CHANGE#","MARKED_CORRUPT","MEDIA_CORRUPT","LOGICALLY_CORRUPT","DATAFILE_BLOCKS","BLOCKS","BLOCK_SIZE","OLDEST_OFFLINE_RANGE","COMPLETION_TIME","CONTROLFILE_TYPE","USED_CHANGE_TRACKING","BLOCKS_READ") AS 
select "RECID","STAMP","SET_STAMP","SET_COUNT","FILE#","CREATION_CHANGE#","CREATION_TIME","RESETLOGS_CHANGE#","RESETLOGS_TIME","INCREMENTAL_LEVEL","INCREMENTAL_CHANGE#","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","ABSOLUTE_FUZZY_CHANGE#","MARKED_CORRUPT","MEDIA_CORRUPT","LOGICALLY_CORRUPT","DATAFILE_BLOCKS","BLOCKS","BLOCK_SIZE","OLDEST_OFFLINE_RANGE","COMPLETION_TIME","CONTROLFILE_TYPE","USED_CHANGE_TRACKING","BLOCKS_READ" from v$backup_datafile;

CREATE OR REPLACE FORCE VIEW "V_$BACKUP_DEVICE"("DEVICE_TYPE","DEVICE_NAME") AS 
select "DEVICE_TYPE","DEVICE_NAME" from v$backup_device;

CREATE OR REPLACE FORCE VIEW "V_$BACKUP_FILES"("PKEY","BACKUP_TYPE","FILE_TYPE","KEEP","KEEP_UNTIL","KEEP_OPTIONS","STATUS","FNAME","TAG","MEDIA","RECID","STAMP","DEVICE_TYPE","BLOCK_SIZE","COMPLETION_TIME","COMPRESSED","OBSOLETE","BYTES","BS_KEY","BS_COUNT","BS_STAMP","BS_TYPE","BS_INCR_TYPE","BS_PIECES","BS_COPIES","BS_COMPLETION_TIME","BS_STATUS","BS_BYTES","BS_COMPRESSED","BS_TAG","BS_DEVICE_TYPE","BP_PIECE#","BP_COPY#","DF_FILE#","DF_TABLESPACE","DF_RESETLOGS_CHANGE#","DF_CREATION_CHANGE#","DF_CHECKPOINT_CHANGE#","DF_CKP_MOD_TIME","RL_THREAD#","RL_SEQUENCE#","RL_RESETLOGS_CHANGE#","RL_FIRST_CHANGE#","RL_FIRST_TIME","RL_NEXT_CHANGE#","RL_NEXT_TIME") AS 
select pkey,
                 backup_type,
                 file_type,
                 keep,
                 keep_until,
                 keep_options,
                 status,
                 fname,
                 tag,
                 media,
                 recid,
                 stamp,
                 device_type,
                 block_size,
                 completion_time,
                 compressed,
                 obsolete,
                 bytes,
                 bs_key,
                 bs_count,
                 bs_stamp,
                 bs_type,
                 bs_incr_type,
                 bs_pieces,
                 bs_copies,
                 bs_completion_time,
                 bs_status,
                 bs_bytes,
                 bs_compressed,
                 bs_tag,
                 bs_device_type,
                 bp_piece#,
                 bp_copy#,
                 df_file#,
                 df_tablespace,
                 df_resetlogs_change#,
                 df_creation_change#,
                 df_checkpoint_change#,
                 df_ckp_mod_time,
                 rl_thread#,
                 rl_sequence#,
                 rl_resetlogs_change#,
                 rl_first_change#,
                 rl_first_time,
                 rl_next_change#,
                 rl_next_time
            from table(sys.dbms_rcvman.listBackupPipe);

CREATE OR REPLACE FORCE VIEW "V_$BACKUP_PIECE"("RECID","STAMP","SET_STAMP","SET_COUNT","PIECE#","COPY#","DEVICE_TYPE","HANDLE","COMMENTS","MEDIA","MEDIA_POOL","CONCUR","TAG","STATUS","START_TIME","COMPLETION_TIME","ELAPSED_SECONDS","DELETED","BYTES","IS_RECOVERY_DEST_FILE","RMAN_STATUS_RECID","RMAN_STATUS_STAMP","COMPRESSED") AS 
select "RECID","STAMP","SET_STAMP","SET_COUNT","PIECE#","COPY#","DEVICE_TYPE","HANDLE","COMMENTS","MEDIA","MEDIA_POOL","CONCUR","TAG","STATUS","START_TIME","COMPLETION_TIME","ELAPSED_SECONDS","DELETED","BYTES","IS_RECOVERY_DEST_FILE","RMAN_STATUS_RECID","RMAN_STATUS_STAMP","COMPRESSED" from v$backup_piece;

CREATE OR REPLACE FORCE VIEW "V_$BACKUP_REDOLOG"("RECID","STAMP","SET_STAMP","SET_COUNT","THREAD#","SEQUENCE#","RESETLOGS_CHANGE#","RESETLOGS_TIME","FIRST_CHANGE#","FIRST_TIME","NEXT_CHANGE#","NEXT_TIME","BLOCKS","BLOCK_SIZE") AS 
select "RECID","STAMP","SET_STAMP","SET_COUNT","THREAD#","SEQUENCE#","RESETLOGS_CHANGE#","RESETLOGS_TIME","FIRST_CHANGE#","FIRST_TIME","NEXT_CHANGE#","NEXT_TIME","BLOCKS","BLOCK_SIZE" from v$backup_redolog;

CREATE OR REPLACE FORCE VIEW "V_$BACKUP_SET"("RECID","STAMP","SET_STAMP","SET_COUNT","BACKUP_TYPE","CONTROLFILE_INCLUDED","INCREMENTAL_LEVEL","PIECES","START_TIME","COMPLETION_TIME","ELAPSED_SECONDS","BLOCK_SIZE","INPUT_FILE_SCAN_ONLY","KEEP","KEEP_UNTIL","KEEP_OPTIONS") AS 
select "RECID","STAMP","SET_STAMP","SET_COUNT","BACKUP_TYPE","CONTROLFILE_INCLUDED","INCREMENTAL_LEVEL","PIECES","START_TIME","COMPLETION_TIME","ELAPSED_SECONDS","BLOCK_SIZE","INPUT_FILE_SCAN_ONLY","KEEP","KEEP_UNTIL","KEEP_OPTIONS" from v$backup_set;

CREATE OR REPLACE FORCE VIEW "V_$BACKUP_SPFILE"("RECID","STAMP","SET_STAMP","SET_COUNT","MODIFICATION_TIME","BYTES","COMPLETION_TIME") AS 
select "RECID","STAMP","SET_STAMP","SET_COUNT","MODIFICATION_TIME","BYTES","COMPLETION_TIME" from v$backup_spfile;

CREATE OR REPLACE FORCE VIEW "V_$BACKUP_SYNC_IO"("SID","SERIAL","USE_COUNT","RMAN_STATUS_RECID","RMAN_STATUS_STAMP","DEVICE_TYPE","TYPE","STATUS","FILENAME","SET_COUNT","SET_STAMP","BUFFER_SIZE","BUFFER_COUNT","TOTAL_BYTES","OPEN_TIME","CLOSE_TIME","ELAPSED_TIME","MAXOPENFILES","BYTES","EFFECTIVE_BYTES_PER_SECOND","IO_COUNT","IO_TIME_TOTAL","IO_TIME_MAX","DISCRETE_BYTES_PER_SECOND") AS 
select "SID","SERIAL","USE_COUNT","RMAN_STATUS_RECID","RMAN_STATUS_STAMP","DEVICE_TYPE","TYPE","STATUS","FILENAME","SET_COUNT","SET_STAMP","BUFFER_SIZE","BUFFER_COUNT","TOTAL_BYTES","OPEN_TIME","CLOSE_TIME","ELAPSED_TIME","MAXOPENFILES","BYTES","EFFECTIVE_BYTES_PER_SECOND","IO_COUNT","IO_TIME_TOTAL","IO_TIME_MAX","DISCRETE_BYTES_PER_SECOND" from v$backup_sync_io;

CREATE OR REPLACE FORCE VIEW "V_$BGPROCESS"("PADDR","PSERIAL#","NAME","DESCRIPTION","ERROR") AS 
select "PADDR","PSERIAL#","NAME","DESCRIPTION","ERROR" from v$bgprocess;

CREATE OR REPLACE FORCE VIEW "V_$BH"("FILE#","BLOCK#","CLASS#","STATUS","XNC","FORCED_READS","FORCED_WRITES","LOCK_ELEMENT_ADDR","LOCK_ELEMENT_NAME","LOCK_ELEMENT_CLASS","DIRTY","TEMP","PING","STALE","DIRECT","NEW","OBJD","TS#") AS 
select "FILE#","BLOCK#","CLASS#","STATUS","XNC","FORCED_READS","FORCED_WRITES","LOCK_ELEMENT_ADDR","LOCK_ELEMENT_NAME","LOCK_ELEMENT_CLASS","DIRTY","TEMP","PING","STALE","DIRECT","NEW","OBJD","TS#" from v$bh;

CREATE OR REPLACE FORCE VIEW "V_$BLOCK_CHANGE_TRACKING"("STATUS","FILENAME","BYTES") AS 
select "STATUS","FILENAME","BYTES" from v$block_change_tracking;

CREATE OR REPLACE FORCE VIEW "V_$BSP"("CR_REQUESTS","CURRENT_REQUESTS","DATA_REQUESTS","UNDO_REQUESTS","TX_REQUESTS","CURRENT_RESULTS","PRIVATE_RESULTS","ZERO_RESULTS","DISK_READ_RESULTS","FAIL_RESULTS","FAIRNESS_DOWN_CONVERTS","FAIRNESS_CLEARS","FREE_LOCK_ELEMENTS","FLUSHES","FLUSHES_QUEUED","FLUSH_QUEUE_FULL","FLUSH_MAX_TIME","LIGHT_WORKS","ERRORS") AS 
select "CR_REQUESTS","CURRENT_REQUESTS","DATA_REQUESTS","UNDO_REQUESTS","TX_REQUESTS","CURRENT_RESULTS","PRIVATE_RESULTS","ZERO_RESULTS","DISK_READ_RESULTS","FAIL_RESULTS","FAIRNESS_DOWN_CONVERTS","FAIRNESS_CLEARS","FREE_LOCK_ELEMENTS","FLUSHES","FLUSHES_QUEUED","FLUSH_QUEUE_FULL","FLUSH_MAX_TIME","LIGHT_WORKS","ERRORS" from v$bsp;

CREATE OR REPLACE FORCE VIEW "V_$BUFFERED_PUBLISHERS"("QUEUE_ID","QUEUE_SCHEMA","QUEUE_NAME","SENDER_NAME","SENDER_ADDRESS","SENDER_PROTOCOL","NUM_MSGS","CNUM_MSGS","LAST_ENQUEUED_MSG") AS 
select "QUEUE_ID","QUEUE_SCHEMA","QUEUE_NAME","SENDER_NAME","SENDER_ADDRESS","SENDER_PROTOCOL","NUM_MSGS","CNUM_MSGS","LAST_ENQUEUED_MSG" from v$buffered_publishers;

CREATE OR REPLACE FORCE VIEW "V_$BUFFERED_QUEUES"("QUEUE_ID","QUEUE_SCHEMA","QUEUE_NAME","STARTUP_TIME","NUM_MSGS","SPILL_MSGS","CNUM_MSGS","CSPILL_MSGS") AS 
select "QUEUE_ID","QUEUE_SCHEMA","QUEUE_NAME","STARTUP_TIME","NUM_MSGS","SPILL_MSGS","CNUM_MSGS","CSPILL_MSGS" from v$buffered_queues;

CREATE OR REPLACE FORCE VIEW "V_$BUFFERED_SUBSCRIBERS"("QUEUE_ID","QUEUE_SCHEMA","QUEUE_NAME","SUBSCRIBER_ID","SUBSCRIBER_NAME","SUBSCRIBER_ADDRESS","PROTOCOL","SUBSCRIBER_TYPE","STARTUP_TIME","LAST_BROWSED_SEQ","LAST_BROWSED_NUM","LAST_DEQUEUED_SEQ","LAST_DEQUEUED_NUM","CURRENT_ENQ_SEQ","NUM_MSGS","CNUM_MSGS","TOTAL_DEQUEUED_MSG","TOTAL_SPILLED_MSG") AS 
select "QUEUE_ID","QUEUE_SCHEMA","QUEUE_NAME","SUBSCRIBER_ID","SUBSCRIBER_NAME","SUBSCRIBER_ADDRESS","PROTOCOL","SUBSCRIBER_TYPE","STARTUP_TIME","LAST_BROWSED_SEQ","LAST_BROWSED_NUM","LAST_DEQUEUED_SEQ","LAST_DEQUEUED_NUM","CURRENT_ENQ_SEQ","NUM_MSGS","CNUM_MSGS","TOTAL_DEQUEUED_MSG","TOTAL_SPILLED_MSG" from v$buffered_subscribers;

CREATE OR REPLACE FORCE VIEW "V_$BUFFER_POOL"("ID","NAME","BLOCK_SIZE","RESIZE_STATE","CURRENT_SIZE","BUFFERS","TARGET_SIZE","TARGET_BUFFERS","PREV_SIZE","PREV_BUFFERS","LO_BNUM","HI_BNUM","LO_SETID","HI_SETID","SET_COUNT") AS 
select "ID","NAME","BLOCK_SIZE","RESIZE_STATE","CURRENT_SIZE","BUFFERS","TARGET_SIZE","TARGET_BUFFERS","PREV_SIZE","PREV_BUFFERS","LO_BNUM","HI_BNUM","LO_SETID","HI_SETID","SET_COUNT" from v$buffer_pool;

CREATE OR REPLACE FORCE VIEW "V_$BUFFER_POOL_STATISTICS"("ID","NAME","BLOCK_SIZE","SET_MSIZE","CNUM_REPL","CNUM_WRITE","CNUM_SET","BUF_GOT","SUM_WRITE","SUM_SCAN","FREE_BUFFER_WAIT","WRITE_COMPLETE_WAIT","BUFFER_BUSY_WAIT","FREE_BUFFER_INSPECTED","DIRTY_BUFFERS_INSPECTED","DB_BLOCK_CHANGE","DB_BLOCK_GETS","CONSISTENT_GETS","PHYSICAL_READS","PHYSICAL_WRITES") AS 
select "ID","NAME","BLOCK_SIZE","SET_MSIZE","CNUM_REPL","CNUM_WRITE","CNUM_SET","BUF_GOT","SUM_WRITE","SUM_SCAN","FREE_BUFFER_WAIT","WRITE_COMPLETE_WAIT","BUFFER_BUSY_WAIT","FREE_BUFFER_INSPECTED","DIRTY_BUFFERS_INSPECTED","DB_BLOCK_CHANGE","DB_BLOCK_GETS","CONSISTENT_GETS","PHYSICAL_READS","PHYSICAL_WRITES" from v$buffer_pool_statistics;

CREATE OR REPLACE FORCE VIEW "V_$CIRCUIT"("CIRCUIT","DISPATCHER","SERVER","WAITER","SADDR","STATUS","QUEUE","MESSAGE0","MESSAGE1","MESSAGE2","MESSAGE3","MESSAGES","BYTES","BREAKS","PRESENTATION","PCIRCUIT") AS 
select "CIRCUIT","DISPATCHER","SERVER","WAITER","SADDR","STATUS","QUEUE","MESSAGE0","MESSAGE1","MESSAGE2","MESSAGE3","MESSAGES","BYTES","BREAKS","PRESENTATION","PCIRCUIT" from v$circuit;

CREATE OR REPLACE FORCE VIEW "V_$CLASS_CACHE_TRANSFER"("CLASS","X_2_NULL","X_2_NULL_FORCED_WRITE","X_2_NULL_FORCED_STALE","X_2_S","X_2_S_FORCED_WRITE","S_2_NULL","S_2_NULL_FORCED_STALE","NULL_2_X","S_2_X","NULL_2_S","CR_TRANSFER","CURRENT_TRANSFER") AS 
select "CLASS","X_2_NULL","X_2_NULL_FORCED_WRITE","X_2_NULL_FORCED_STALE","X_2_S","X_2_S_FORCED_WRITE","S_2_NULL","S_2_NULL_FORCED_STALE","NULL_2_X","S_2_X","NULL_2_S","CR_TRANSFER","CURRENT_TRANSFER" from v$class_cache_transfer;

CREATE OR REPLACE FORCE VIEW "V_$CLASS_PING"("CLASS","X_2_NULL","X_2_NULL_FORCED_WRITE","X_2_NULL_FORCED_STALE","X_2_S","X_2_S_FORCED_WRITE","X_2_SSX","X_2_SSX_FORCED_WRITE","S_2_NULL","S_2_NULL_FORCED_STALE","SS_2_NULL","SS_2_RLS","OP_2_SS","NULL_2_X","S_2_X","SSX_2_X","NULL_2_S","NULL_2_SS") AS 
select "CLASS","X_2_NULL","X_2_NULL_FORCED_WRITE","X_2_NULL_FORCED_STALE","X_2_S","X_2_S_FORCED_WRITE","X_2_SSX","X_2_SSX_FORCED_WRITE","S_2_NULL","S_2_NULL_FORCED_STALE","SS_2_NULL","SS_2_RLS","OP_2_SS","NULL_2_X","S_2_X","SSX_2_X","NULL_2_S","NULL_2_SS" from v$class_ping;

CREATE OR REPLACE FORCE VIEW "V_$CLIENT_STATS"("CLIENT_IDENTIFIER","STAT_ID","STAT_NAME","VALUE") AS 
select "CLIENT_IDENTIFIER","STAT_ID","STAT_NAME","VALUE" from v$client_stats;

CREATE OR REPLACE FORCE VIEW "V_$CONTEXT"("NAMESPACE","ATTRIBUTE","VALUE") AS 
select SUBSTR(namespace,1,30) "NAMESPACE",
         SUBSTR(attribute,1,30) "ATTRIBUTE",
         value "VALUE" from v$context;

CREATE OR REPLACE FORCE VIEW "V_$CONTROLFILE"("STATUS","NAME","IS_RECOVERY_DEST_FILE") AS 
select "STATUS","NAME","IS_RECOVERY_DEST_FILE" from v$controlfile;

CREATE OR REPLACE FORCE VIEW "V_$CONTROLFILE_RECORD_SECTION"("TYPE","RECORD_SIZE","RECORDS_TOTAL","RECORDS_USED","FIRST_INDEX","LAST_INDEX","LAST_RECID") AS 
select "TYPE","RECORD_SIZE","RECORDS_TOTAL","RECORDS_USED","FIRST_INDEX","LAST_INDEX","LAST_RECID" from v$controlfile_record_section;

CREATE OR REPLACE FORCE VIEW "V_$COPY_CORRUPTION"("RECID","STAMP","COPY_RECID","COPY_STAMP","FILE#","BLOCK#","BLOCKS","CORRUPTION_CHANGE#","MARKED_CORRUPT","CORRUPTION_TYPE") AS 
select "RECID","STAMP","COPY_RECID","COPY_STAMP","FILE#","BLOCK#","BLOCKS","CORRUPTION_CHANGE#","MARKED_CORRUPT","CORRUPTION_TYPE" from v$copy_corruption;

CREATE OR REPLACE FORCE VIEW "V_$CR_BLOCK_SERVER"("CR_REQUESTS","CURRENT_REQUESTS","DATA_REQUESTS","UNDO_REQUESTS","TX_REQUESTS","CURRENT_RESULTS","PRIVATE_RESULTS","ZERO_RESULTS","DISK_READ_RESULTS","FAIL_RESULTS","FAIRNESS_DOWN_CONVERTS","FAIRNESS_CLEARS","FREE_GC_ELEMENTS","FLUSHES","FLUSHES_QUEUED","FLUSH_QUEUE_FULL","FLUSH_MAX_TIME","LIGHT_WORKS","ERRORS") AS 
select "CR_REQUESTS","CURRENT_REQUESTS","DATA_REQUESTS","UNDO_REQUESTS","TX_REQUESTS","CURRENT_RESULTS","PRIVATE_RESULTS","ZERO_RESULTS","DISK_READ_RESULTS","FAIL_RESULTS","FAIRNESS_DOWN_CONVERTS","FAIRNESS_CLEARS","FREE_GC_ELEMENTS","FLUSHES","FLUSHES_QUEUED","FLUSH_QUEUE_FULL","FLUSH_MAX_TIME","LIGHT_WORKS","ERRORS" from v$cr_block_server;

CREATE OR REPLACE FORCE VIEW "V_$CURRENT_BLOCK_SERVER"("PIN1","PIN10","PIN100","PIN1000","PIN10000","FLUSH1","FLUSH10","FLUSH100","FLUSH1000","FLUSH10000","WRITE1","WRITE10","WRITE100","WRITE1000","WRITE10000") AS 
select "PIN1","PIN10","PIN100","PIN1000","PIN10000","FLUSH1","FLUSH10","FLUSH100","FLUSH1000","FLUSH10000","WRITE1","WRITE10","WRITE100","WRITE1000","WRITE10000" from v$current_block_server;

CREATE OR REPLACE FORCE VIEW "V_$DATABASE"("DBID","NAME","CREATED","RESETLOGS_CHANGE#","RESETLOGS_TIME","PRIOR_RESETLOGS_CHANGE#","PRIOR_RESETLOGS_TIME","LOG_MODE","CHECKPOINT_CHANGE#","ARCHIVE_CHANGE#","CONTROLFILE_TYPE","CONTROLFILE_CREATED","CONTROLFILE_SEQUENCE#","CONTROLFILE_CHANGE#","CONTROLFILE_TIME","OPEN_RESETLOGS","VERSION_TIME","OPEN_MODE","PROTECTION_MODE","PROTECTION_LEVEL","REMOTE_ARCHIVE","ACTIVATION#","SWITCHOVER#","DATABASE_ROLE","ARCHIVELOG_CHANGE#","ARCHIVELOG_COMPRESSION","SWITCHOVER_STATUS","DATAGUARD_BROKER","GUARD_STATUS","SUPPLEMENTAL_LOG_DATA_MIN","SUPPLEMENTAL_LOG_DATA_PK","SUPPLEMENTAL_LOG_DATA_UI","FORCE_LOGGING","PLATFORM_ID","PLATFORM_NAME","RECOVERY_TARGET_INCARNATION#","LAST_OPEN_INCARNATION#","CURRENT_SCN","FLASHBACK_ON","SUPPLEMENTAL_LOG_DATA_FK","SUPPLEMENTAL_LOG_DATA_ALL","DB_UNIQUE_NAME","STANDBY_BECAME_PRIMARY_SCN") AS 
select "DBID","NAME","CREATED","RESETLOGS_CHANGE#","RESETLOGS_TIME","PRIOR_RESETLOGS_CHANGE#","PRIOR_RESETLOGS_TIME","LOG_MODE","CHECKPOINT_CHANGE#","ARCHIVE_CHANGE#","CONTROLFILE_TYPE","CONTROLFILE_CREATED","CONTROLFILE_SEQUENCE#","CONTROLFILE_CHANGE#","CONTROLFILE_TIME","OPEN_RESETLOGS","VERSION_TIME","OPEN_MODE","PROTECTION_MODE","PROTECTION_LEVEL","REMOTE_ARCHIVE","ACTIVATION#","SWITCHOVER#","DATABASE_ROLE","ARCHIVELOG_CHANGE#","ARCHIVELOG_COMPRESSION","SWITCHOVER_STATUS","DATAGUARD_BROKER","GUARD_STATUS","SUPPLEMENTAL_LOG_DATA_MIN","SUPPLEMENTAL_LOG_DATA_PK","SUPPLEMENTAL_LOG_DATA_UI","FORCE_LOGGING","PLATFORM_ID","PLATFORM_NAME","RECOVERY_TARGET_INCARNATION#","LAST_OPEN_INCARNATION#","CURRENT_SCN","FLASHBACK_ON","SUPPLEMENTAL_LOG_DATA_FK","SUPPLEMENTAL_LOG_DATA_ALL","DB_UNIQUE_NAME","STANDBY_BECAME_PRIMARY_SCN" from v$database;

CREATE OR REPLACE FORCE VIEW "V_$DATABASE_BLOCK_CORRUPTION"("FILE#","BLOCK#","BLOCKS","CORRUPTION_CHANGE#","CORRUPTION_TYPE") AS 
select "FILE#","BLOCK#","BLOCKS","CORRUPTION_CHANGE#","CORRUPTION_TYPE" from
   v$database_block_corruption;

CREATE OR REPLACE FORCE VIEW "V_$DATABASE_INCARNATION"("INCARNATION#","RESETLOGS_CHANGE#","RESETLOGS_TIME","PRIOR_RESETLOGS_CHANGE#","PRIOR_RESETLOGS_TIME","STATUS","RESETLOGS_ID","PRIOR_INCARNATION#") AS 
select "INCARNATION#","RESETLOGS_CHANGE#","RESETLOGS_TIME","PRIOR_RESETLOGS_CHANGE#","PRIOR_RESETLOGS_TIME","STATUS","RESETLOGS_ID","PRIOR_INCARNATION#" from
   v$database_incarnation;

CREATE OR REPLACE FORCE VIEW "V_$DATAFILE"("FILE#","CREATION_CHANGE#","CREATION_TIME","TS#","RFILE#","STATUS","ENABLED","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","UNRECOVERABLE_CHANGE#","UNRECOVERABLE_TIME","LAST_CHANGE#","LAST_TIME","OFFLINE_CHANGE#","ONLINE_CHANGE#","ONLINE_TIME","BYTES","BLOCKS","CREATE_BYTES","BLOCK_SIZE","NAME","PLUGGED_IN","BLOCK1_OFFSET","AUX_NAME") AS 
select "FILE#","CREATION_CHANGE#","CREATION_TIME","TS#","RFILE#","STATUS","ENABLED","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","UNRECOVERABLE_CHANGE#","UNRECOVERABLE_TIME","LAST_CHANGE#","LAST_TIME","OFFLINE_CHANGE#","ONLINE_CHANGE#","ONLINE_TIME","BYTES","BLOCKS","CREATE_BYTES","BLOCK_SIZE","NAME","PLUGGED_IN","BLOCK1_OFFSET","AUX_NAME" from v$datafile;

CREATE OR REPLACE FORCE VIEW "V_$DATAFILE_COPY"("RECID","STAMP","NAME","TAG","FILE#","RFILE#","CREATION_CHANGE#","CREATION_TIME","RESETLOGS_CHANGE#","RESETLOGS_TIME","INCREMENTAL_LEVEL","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","ABSOLUTE_FUZZY_CHANGE#","RECOVERY_FUZZY_CHANGE#","RECOVERY_FUZZY_TIME","ONLINE_FUZZY","BACKUP_FUZZY","MARKED_CORRUPT","MEDIA_CORRUPT","LOGICALLY_CORRUPT","BLOCKS","BLOCK_SIZE","OLDEST_OFFLINE_RANGE","DELETED","STATUS","COMPLETION_TIME","CONTROLFILE_TYPE","KEEP","KEEP_UNTIL","KEEP_OPTIONS","SCANNED","IS_RECOVERY_DEST_FILE","RMAN_STATUS_RECID","RMAN_STATUS_STAMP") AS 
select "RECID","STAMP","NAME","TAG","FILE#","RFILE#","CREATION_CHANGE#","CREATION_TIME","RESETLOGS_CHANGE#","RESETLOGS_TIME","INCREMENTAL_LEVEL","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","ABSOLUTE_FUZZY_CHANGE#","RECOVERY_FUZZY_CHANGE#","RECOVERY_FUZZY_TIME","ONLINE_FUZZY","BACKUP_FUZZY","MARKED_CORRUPT","MEDIA_CORRUPT","LOGICALLY_CORRUPT","BLOCKS","BLOCK_SIZE","OLDEST_OFFLINE_RANGE","DELETED","STATUS","COMPLETION_TIME","CONTROLFILE_TYPE","KEEP","KEEP_UNTIL","KEEP_OPTIONS","SCANNED","IS_RECOVERY_DEST_FILE","RMAN_STATUS_RECID","RMAN_STATUS_STAMP" from v$datafile_copy;

CREATE OR REPLACE FORCE VIEW "V_$DATAFILE_HEADER"("FILE#","STATUS","ERROR","FORMAT","RECOVER","FUZZY","CREATION_CHANGE#","CREATION_TIME","TABLESPACE_NAME","TS#","RFILE#","RESETLOGS_CHANGE#","RESETLOGS_TIME","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","CHECKPOINT_COUNT","BYTES","BLOCKS","NAME") AS 
select "FILE#","STATUS","ERROR","FORMAT","RECOVER","FUZZY","CREATION_CHANGE#","CREATION_TIME","TABLESPACE_NAME","TS#","RFILE#","RESETLOGS_CHANGE#","RESETLOGS_TIME","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","CHECKPOINT_COUNT","BYTES","BLOCKS","NAME" from v$datafile_header;

CREATE OR REPLACE FORCE VIEW "V_$DATAGUARD_CONFIG"("DB_UNIQUE_NAME") AS 
select "DB_UNIQUE_NAME" from v$dataguard_config;

CREATE OR REPLACE FORCE VIEW "V_$DATAGUARD_STATUS"("FACILITY","SEVERITY","DEST_ID","MESSAGE_NUM","ERROR_CODE","CALLOUT","TIMESTAMP","MESSAGE") AS 
select "FACILITY","SEVERITY","DEST_ID","MESSAGE_NUM","ERROR_CODE","CALLOUT","TIMESTAMP","MESSAGE" from v$dataguard_status;

CREATE OR REPLACE FORCE VIEW "V_$DATAPUMP_JOB"("JOB_ID","JOB_NAME","OWNER_NAME","MSG_CTRL_QUEUE","STATUS_QUEUE","OPERATION","JOB_MODE","MASTER_ID","STATE","WORKERS","FLAGS") AS 
SELECT "JOB_ID","JOB_NAME","OWNER_NAME","MSG_CTRL_QUEUE","STATUS_QUEUE","OPERATION","JOB_MODE","MASTER_ID","STATE","WORKERS","FLAGS" FROM SYS.V$DATAPUMP_JOB;

CREATE OR REPLACE FORCE VIEW "V_$DATAPUMP_SESSION"("ATTACH_ID","JOB_ID","SADDR") AS 
SELECT "ATTACH_ID","JOB_ID","SADDR" FROM SYS.V$DATAPUMP_SESSION;

CREATE OR REPLACE FORCE VIEW "V_$DBFILE"("FILE#","NAME") AS 
select "FILE#","NAME" from v$dbfile;

CREATE OR REPLACE FORCE VIEW "V_$DBLINK"("DB_LINK","OWNER_ID","LOGGED_ON","HETEROGENEOUS","PROTOCOL","OPEN_CURSORS","IN_TRANSACTION","UPDATE_SENT","COMMIT_POINT_STRENGTH") AS 
select "DB_LINK","OWNER_ID","LOGGED_ON","HETEROGENEOUS","PROTOCOL","OPEN_CURSORS","IN_TRANSACTION","UPDATE_SENT","COMMIT_POINT_STRENGTH" from v$dblink;

CREATE OR REPLACE FORCE VIEW "V_$DB_CACHE_ADVICE"("ID","NAME","BLOCK_SIZE","ADVICE_STATUS","SIZE_FOR_ESTIMATE","SIZE_FACTOR","BUFFERS_FOR_ESTIMATE","ESTD_PHYSICAL_READ_FACTOR","ESTD_PHYSICAL_READS","ESTD_PHYSICAL_READ_TIME","ESTD_PCT_OF_DB_TIME_FOR_READS") AS 
select "ID","NAME","BLOCK_SIZE","ADVICE_STATUS","SIZE_FOR_ESTIMATE","SIZE_FACTOR","BUFFERS_FOR_ESTIMATE","ESTD_PHYSICAL_READ_FACTOR","ESTD_PHYSICAL_READS","ESTD_PHYSICAL_READ_TIME","ESTD_PCT_OF_DB_TIME_FOR_READS" from v$db_cache_advice;

CREATE OR REPLACE FORCE VIEW "V_$DB_OBJECT_CACHE"("OWNER","NAME","DB_LINK","NAMESPACE","TYPE","SHARABLE_MEM","LOADS","EXECUTIONS","LOCKS","PINS","KEPT","CHILD_LATCH") AS 
select "OWNER","NAME","DB_LINK","NAMESPACE","TYPE","SHARABLE_MEM","LOADS","EXECUTIONS","LOCKS","PINS","KEPT","CHILD_LATCH" from v$db_object_cache;

CREATE OR REPLACE FORCE VIEW "V_$DB_PIPES"("OWNERID","NAME","TYPE","PIPE_SIZE") AS 
select "OWNERID","NAME","TYPE","PIPE_SIZE" from v$db_pipes;

CREATE OR REPLACE FORCE VIEW "V_$DELETED_OBJECT"("RECID","STAMP","TYPE","OBJECT_RECID","OBJECT_STAMP","OBJECT_DATA") AS 
select "RECID","STAMP","TYPE","OBJECT_RECID","OBJECT_STAMP","OBJECT_DATA" from v$deleted_object;

CREATE OR REPLACE FORCE VIEW "V_$DISPATCHER"("NAME","NETWORK","PADDR","STATUS","ACCEPT","MESSAGES","BYTES","BREAKS","OWNED","CREATED","IDLE","BUSY","LISTENER","CONF_INDX") AS 
select "NAME","NETWORK","PADDR","STATUS","ACCEPT","MESSAGES","BYTES","BREAKS","OWNED","CREATED","IDLE","BUSY","LISTENER","CONF_INDX" from v$dispatcher;

CREATE OR REPLACE FORCE VIEW "V_$DISPATCHER_CONFIG"("CONF_INDX","NETWORK","DISPATCHERS","CONNECTIONS","SESSIONS","POOL","TICKS","INBD_TIMOUT","OUTBD_TIMOUT","MULTIPLEX","LISTENER","SERVICE") AS 
select "CONF_INDX","NETWORK","DISPATCHERS","CONNECTIONS","SESSIONS","POOL","TICKS","INBD_TIMOUT","OUTBD_TIMOUT","MULTIPLEX","LISTENER","SERVICE" from v$dispatcher_config;

CREATE OR REPLACE FORCE VIEW "V_$DISPATCHER_RATE"("NAME","PADDR","CUR_LOOP_RATE","CUR_EVENT_RATE","CUR_EVENTS_PER_LOOP","CUR_MSG_RATE","CUR_SVR_BUF_RATE","CUR_SVR_BYTE_RATE","CUR_SVR_BYTE_PER_BUF","CUR_CLT_BUF_RATE","CUR_CLT_BYTE_RATE","CUR_CLT_BYTE_PER_BUF","CUR_BUF_RATE","CUR_BYTE_RATE","CUR_BYTE_PER_BUF","CUR_IN_CONNECT_RATE","CUR_OUT_CONNECT_RATE","CUR_RECONNECT_RATE","MAX_LOOP_RATE","MAX_EVENT_RATE","MAX_EVENTS_PER_LOOP","MAX_MSG_RATE","MAX_SVR_BUF_RATE","MAX_SVR_BYTE_RATE","MAX_SVR_BYTE_PER_BUF","MAX_CLT_BUF_RATE","MAX_CLT_BYTE_RATE","MAX_CLT_BYTE_PER_BUF","MAX_BUF_RATE","MAX_BYTE_RATE","MAX_BYTE_PER_BUF","MAX_IN_CONNECT_RATE","MAX_OUT_CONNECT_RATE","MAX_RECONNECT_RATE","AVG_LOOP_RATE","AVG_EVENT_RATE","AVG_EVENTS_PER_LOOP","AVG_MSG_RATE","AVG_SVR_BUF_RATE","AVG_SVR_BYTE_RATE","AVG_SVR_BYTE_PER_BUF","AVG_CLT_BUF_RATE","AVG_CLT_BYTE_RATE","AVG_CLT_BYTE_PER_BUF","AVG_BUF_RATE","AVG_BYTE_RATE","AVG_BYTE_PER_BUF","AVG_IN_CONNECT_RATE","AVG_OUT_CONNECT_RATE","AVG_RECONNECT_RATE","TTL_LOOPS","TTL_MSG","TTL_SVR_BUF","TTL_CLT_BUF","TTL_BUF","TTL_IN_CONNECT","TTL_OUT_CONNECT","TTL_RECONNECT","SCALE_LOOPS","SCALE_MSG","SCALE_SVR_BUF","SCALE_CLT_BUF","SCALE_BUF","SCALE_IN_CONNECT","SCALE_OUT_CONNECT","SCALE_RECONNECT") AS 
select "NAME","PADDR","CUR_LOOP_RATE","CUR_EVENT_RATE","CUR_EVENTS_PER_LOOP","CUR_MSG_RATE","CUR_SVR_BUF_RATE","CUR_SVR_BYTE_RATE","CUR_SVR_BYTE_PER_BUF","CUR_CLT_BUF_RATE","CUR_CLT_BYTE_RATE","CUR_CLT_BYTE_PER_BUF","CUR_BUF_RATE","CUR_BYTE_RATE","CUR_BYTE_PER_BUF","CUR_IN_CONNECT_RATE","CUR_OUT_CONNECT_RATE","CUR_RECONNECT_RATE","MAX_LOOP_RATE","MAX_EVENT_RATE","MAX_EVENTS_PER_LOOP","MAX_MSG_RATE","MAX_SVR_BUF_RATE","MAX_SVR_BYTE_RATE","MAX_SVR_BYTE_PER_BUF","MAX_CLT_BUF_RATE","MAX_CLT_BYTE_RATE","MAX_CLT_BYTE_PER_BUF","MAX_BUF_RATE","MAX_BYTE_RATE","MAX_BYTE_PER_BUF","MAX_IN_CONNECT_RATE","MAX_OUT_CONNECT_RATE","MAX_RECONNECT_RATE","AVG_LOOP_RATE","AVG_EVENT_RATE","AVG_EVENTS_PER_LOOP","AVG_MSG_RATE","AVG_SVR_BUF_RATE","AVG_SVR_BYTE_RATE","AVG_SVR_BYTE_PER_BUF","AVG_CLT_BUF_RATE","AVG_CLT_BYTE_RATE","AVG_CLT_BYTE_PER_BUF","AVG_BUF_RATE","AVG_BYTE_RATE","AVG_BYTE_PER_BUF","AVG_IN_CONNECT_RATE","AVG_OUT_CONNECT_RATE","AVG_RECONNECT_RATE","TTL_LOOPS","TTL_MSG","TTL_SVR_BUF","TTL_CLT_BUF","TTL_BUF","TTL_IN_CONNECT","TTL_OUT_CONNECT","TTL_RECONNECT","SCALE_LOOPS","SCALE_MSG","SCALE_SVR_BUF","SCALE_CLT_BUF","SCALE_BUF","SCALE_IN_CONNECT","SCALE_OUT_CONNECT","SCALE_RECONNECT" from v$dispatcher_rate;

CREATE OR REPLACE FORCE VIEW "V_$DLM_ALL_LOCKS"("LOCKP","GRANT_LEVEL","REQUEST_LEVEL","RESOURCE_NAME1","RESOURCE_NAME2","PID","TRANSACTION_ID0","TRANSACTION_ID1","GROUP_ID","OPEN_OPT_DEADLOCK","OPEN_OPT_PERSISTENT","OPEN_OPT_PROCESS_OWNED","OPEN_OPT_NO_XID","CONVERT_OPT_GETVALUE","CONVERT_OPT_PUTVALUE","CONVERT_OPT_NOVALUE","CONVERT_OPT_DUBVALUE","CONVERT_OPT_NOQUEUE","CONVERT_OPT_EXPRESS","CONVERT_OPT_NODEADLOCKWAIT","CONVERT_OPT_NODEADLOCKBLOCK","WHICH_QUEUE","LOCKSTATE","AST_EVENT0","OWNER_NODE","BLOCKED","BLOCKER") AS 
select "LOCKP","GRANT_LEVEL","REQUEST_LEVEL","RESOURCE_NAME1","RESOURCE_NAME2","PID","TRANSACTION_ID0","TRANSACTION_ID1","GROUP_ID","OPEN_OPT_DEADLOCK","OPEN_OPT_PERSISTENT","OPEN_OPT_PROCESS_OWNED","OPEN_OPT_NO_XID","CONVERT_OPT_GETVALUE","CONVERT_OPT_PUTVALUE","CONVERT_OPT_NOVALUE","CONVERT_OPT_DUBVALUE","CONVERT_OPT_NOQUEUE","CONVERT_OPT_EXPRESS","CONVERT_OPT_NODEADLOCKWAIT","CONVERT_OPT_NODEADLOCKBLOCK","WHICH_QUEUE","LOCKSTATE","AST_EVENT0","OWNER_NODE","BLOCKED","BLOCKER" from v$dlm_all_locks;

CREATE OR REPLACE FORCE VIEW "V_$DLM_CONVERT_LOCAL"("INST_ID","CONVERT_TYPE","AVERAGE_CONVERT_TIME","CONVERT_COUNT") AS 
select "INST_ID","CONVERT_TYPE","AVERAGE_CONVERT_TIME","CONVERT_COUNT" from v$dlm_convert_local;

CREATE OR REPLACE FORCE VIEW "V_$DLM_CONVERT_REMOTE"("INST_ID","CONVERT_TYPE","AVERAGE_CONVERT_TIME","CONVERT_COUNT") AS 
select "INST_ID","CONVERT_TYPE","AVERAGE_CONVERT_TIME","CONVERT_COUNT" from v$dlm_convert_remote;

CREATE OR REPLACE FORCE VIEW "V_$DLM_LATCH"("ADDR","LATCH#","LEVEL#","NAME","GETS","MISSES","SLEEPS","IMMEDIATE_GETS","IMMEDIATE_MISSES","WAITERS_WOKEN","WAITS_HOLDING_LATCH","SPIN_GETS","SLEEP1","SLEEP2","SLEEP3","SLEEP4","SLEEP5","SLEEP6","SLEEP7","SLEEP8","SLEEP9","SLEEP10","SLEEP11","WAIT_TIME") AS 
select "ADDR","LATCH#","LEVEL#","NAME","GETS","MISSES","SLEEPS","IMMEDIATE_GETS","IMMEDIATE_MISSES","WAITERS_WOKEN","WAITS_HOLDING_LATCH","SPIN_GETS","SLEEP1","SLEEP2","SLEEP3","SLEEP4","SLEEP5","SLEEP6","SLEEP7","SLEEP8","SLEEP9","SLEEP10","SLEEP11","WAIT_TIME" from v$dlm_latch;

CREATE OR REPLACE FORCE VIEW "V_$DLM_LOCKS"("LOCKP","GRANT_LEVEL","REQUEST_LEVEL","RESOURCE_NAME1","RESOURCE_NAME2","PID","TRANSACTION_ID0","TRANSACTION_ID1","GROUP_ID","OPEN_OPT_DEADLOCK","OPEN_OPT_PERSISTENT","OPEN_OPT_PROCESS_OWNED","OPEN_OPT_NO_XID","CONVERT_OPT_GETVALUE","CONVERT_OPT_PUTVALUE","CONVERT_OPT_NOVALUE","CONVERT_OPT_DUBVALUE","CONVERT_OPT_NOQUEUE","CONVERT_OPT_EXPRESS","CONVERT_OPT_NODEADLOCKWAIT","CONVERT_OPT_NODEADLOCKBLOCK","WHICH_QUEUE","LOCKSTATE","AST_EVENT0","OWNER_NODE","BLOCKED","BLOCKER") AS 
select "LOCKP","GRANT_LEVEL","REQUEST_LEVEL","RESOURCE_NAME1","RESOURCE_NAME2","PID","TRANSACTION_ID0","TRANSACTION_ID1","GROUP_ID","OPEN_OPT_DEADLOCK","OPEN_OPT_PERSISTENT","OPEN_OPT_PROCESS_OWNED","OPEN_OPT_NO_XID","CONVERT_OPT_GETVALUE","CONVERT_OPT_PUTVALUE","CONVERT_OPT_NOVALUE","CONVERT_OPT_DUBVALUE","CONVERT_OPT_NOQUEUE","CONVERT_OPT_EXPRESS","CONVERT_OPT_NODEADLOCKWAIT","CONVERT_OPT_NODEADLOCKBLOCK","WHICH_QUEUE","LOCKSTATE","AST_EVENT0","OWNER_NODE","BLOCKED","BLOCKER" from v$dlm_locks;

CREATE OR REPLACE FORCE VIEW "V_$DLM_MISC"("STATISTIC#","NAME","VALUE") AS 
select "STATISTIC#","NAME","VALUE" from v$dlm_misc;

CREATE OR REPLACE FORCE VIEW "V_$DLM_RESS"("RESP","RESOURCE_NAME","ON_CONVERT_Q","ON_GRANT_Q","PERSISTENT_RES","MASTER_NODE","NEXT_CVT_LEVEL","VALUE_BLK_STATE","VALUE_BLK") AS 
select "RESP","RESOURCE_NAME","ON_CONVERT_Q","ON_GRANT_Q","PERSISTENT_RES","MASTER_NODE","NEXT_CVT_LEVEL","VALUE_BLK_STATE","VALUE_BLK" from v$dlm_ress;

CREATE OR REPLACE FORCE VIEW "V_$DLM_TRAFFIC_CONTROLLER"("LOCAL_NID","REMOTE_NID","REMOTE_RID","REMOTE_INC","TCKT_AVAIL","TCKT_LIMIT","TCKT_RCVD","TCKT_WAIT","SND_SEQ_NO","RCV_SEQ_NO","SND_Q_LEN","SND_Q_MAX","SND_Q_TOT","SND_Q_TM_BASE","SND_Q_TM_WRAP","STATUS","SND_PROXY") AS 
select "LOCAL_NID","REMOTE_NID","REMOTE_RID","REMOTE_INC","TCKT_AVAIL","TCKT_LIMIT","TCKT_RCVD","TCKT_WAIT","SND_SEQ_NO","RCV_SEQ_NO","SND_Q_LEN","SND_Q_MAX","SND_Q_TOT","SND_Q_TM_BASE","SND_Q_TM_WRAP","STATUS","SND_PROXY" from v$dlm_traffic_controller;

CREATE OR REPLACE FORCE VIEW "V_$ENABLEDPRIVS"("PRIV_NUMBER") AS 
select "PRIV_NUMBER" from v$enabledprivs;

CREATE OR REPLACE FORCE VIEW "V_$ENQUEUE_LOCK"("ADDR","KADDR","SID","TYPE","ID1","ID2","LMODE","REQUEST","CTIME","BLOCK") AS 
select "ADDR","KADDR","SID","TYPE","ID1","ID2","LMODE","REQUEST","CTIME","BLOCK" from v$enqueue_lock;

CREATE OR REPLACE FORCE VIEW "V_$ENQUEUE_STAT"("INST_ID","EQ_TYPE","TOTAL_REQ#","TOTAL_WAIT#","SUCC_REQ#","FAILED_REQ#","CUM_WAIT_TIME") AS 
select "INST_ID","EQ_TYPE","TOTAL_REQ#","TOTAL_WAIT#","SUCC_REQ#","FAILED_REQ#","CUM_WAIT_TIME" from v$enqueue_stat;

CREATE OR REPLACE FORCE VIEW "V_$ENQUEUE_STATISTICS"("EQ_NAME","EQ_TYPE","REQ_REASON","TOTAL_REQ#","TOTAL_WAIT#","SUCC_REQ#","FAILED_REQ#","CUM_WAIT_TIME","REQ_DESCRIPTION","EVENT#") AS 
select "EQ_NAME","EQ_TYPE","REQ_REASON","TOTAL_REQ#","TOTAL_WAIT#","SUCC_REQ#","FAILED_REQ#","CUM_WAIT_TIME","REQ_DESCRIPTION","EVENT#" from v$enqueue_statistics;

CREATE OR REPLACE FORCE VIEW "V_$EVENTMETRIC"("BEGIN_TIME","END_TIME","INTSIZE_CSEC","EVENT#","EVENT_ID","NUM_SESS_WAITING","TIME_WAITED","WAIT_COUNT") AS 
select "BEGIN_TIME","END_TIME","INTSIZE_CSEC","EVENT#","EVENT_ID","NUM_SESS_WAITING","TIME_WAITED","WAIT_COUNT" from v$eventmetric;

CREATE OR REPLACE FORCE VIEW "V_$EVENT_HISTOGRAM"("EVENT#","EVENT","WAIT_TIME_MILLI","WAIT_COUNT") AS 
select "EVENT#","EVENT","WAIT_TIME_MILLI","WAIT_COUNT" from v$event_histogram;

CREATE OR REPLACE FORCE VIEW "V_$EVENT_NAME"("EVENT#","EVENT_ID","NAME","PARAMETER1","PARAMETER2","PARAMETER3","WAIT_CLASS_ID","WAIT_CLASS#","WAIT_CLASS") AS 
select "EVENT#","EVENT_ID","NAME","PARAMETER1","PARAMETER2","PARAMETER3","WAIT_CLASS_ID","WAIT_CLASS#","WAIT_CLASS" from v$event_name;

CREATE OR REPLACE FORCE VIEW "V_$EXECUTION"("PID","DEPTH","FUNCTION","TYPE","NVALS","VAL1","VAL2","SEQH","SEQL") AS 
select "PID","DEPTH","FUNCTION","TYPE","NVALS","VAL1","VAL2","SEQH","SEQL" from v$execution;

CREATE OR REPLACE FORCE VIEW "V_$FAST_START_SERVERS"("STATE","UNDOBLOCKSDONE","PID","XID") AS 
select "STATE","UNDOBLOCKSDONE","PID","XID" from v$fast_start_servers;

CREATE OR REPLACE FORCE VIEW "V_$FAST_START_TRANSACTIONS"("USN","SLT","SEQ","STATE","UNDOBLOCKSDONE","UNDOBLOCKSTOTAL","PID","CPUTIME","PARENTUSN","PARENTSLT","PARENTSEQ","XID","PXID","RCVSERVERS") AS 
select "USN","SLT","SEQ","STATE","UNDOBLOCKSDONE","UNDOBLOCKSTOTAL","PID","CPUTIME","PARENTUSN","PARENTSLT","PARENTSEQ","XID","PXID","RCVSERVERS" from v$fast_start_transactions;

CREATE OR REPLACE FORCE VIEW "V_$FILEMETRIC"("BEGIN_TIME","END_TIME","INTSIZE_CSEC","FILE_ID","CREATION_TIME","AVERAGE_READ_TIME","AVERAGE_WRITE_TIME","PHYSICAL_READS","PHYSICAL_WRITES","PHYSICAL_BLOCK_READS","PHYSICAL_BLOCK_WRITES") AS 
select "BEGIN_TIME","END_TIME","INTSIZE_CSEC","FILE_ID","CREATION_TIME","AVERAGE_READ_TIME","AVERAGE_WRITE_TIME","PHYSICAL_READS","PHYSICAL_WRITES","PHYSICAL_BLOCK_READS","PHYSICAL_BLOCK_WRITES" from v$filemetric;

CREATE OR REPLACE FORCE VIEW "V_$FILEMETRIC_HISTORY"("BEGIN_TIME","END_TIME","INTSIZE_CSEC","FILE_ID","CREATION_TIME","AVERAGE_READ_TIME","AVERAGE_WRITE_TIME","PHYSICAL_READS","PHYSICAL_WRITES","PHYSICAL_BLOCK_READS","PHYSICAL_BLOCK_WRITES") AS 
select "BEGIN_TIME","END_TIME","INTSIZE_CSEC","FILE_ID","CREATION_TIME","AVERAGE_READ_TIME","AVERAGE_WRITE_TIME","PHYSICAL_READS","PHYSICAL_WRITES","PHYSICAL_BLOCK_READS","PHYSICAL_BLOCK_WRITES" from v$filemetric_history;

CREATE OR REPLACE FORCE VIEW "V_$FILESPACE_USAGE"("TABLESPACE_ID","RFNO","ALLOCATED_SPACE","FILE_SIZE","FILE_MAXSIZE","CHANGESCN_BASE","CHANGESCN_WRAP","FLAG") AS 
select "TABLESPACE_ID","RFNO","ALLOCATED_SPACE","FILE_SIZE","FILE_MAXSIZE","CHANGESCN_BASE","CHANGESCN_WRAP","FLAG" from v$filespace_usage;

CREATE OR REPLACE FORCE VIEW "V_$FILESTAT"("FILE#","PHYRDS","PHYWRTS","PHYBLKRD","PHYBLKWRT","SINGLEBLKRDS","READTIM","WRITETIM","SINGLEBLKRDTIM","AVGIOTIM","LSTIOTIM","MINIOTIM","MAXIORTM","MAXIOWTM") AS 
select "FILE#","PHYRDS","PHYWRTS","PHYBLKRD","PHYBLKWRT","SINGLEBLKRDS","READTIM","WRITETIM","SINGLEBLKRDTIM","AVGIOTIM","LSTIOTIM","MINIOTIM","MAXIORTM","MAXIOWTM" from v$filestat;

CREATE OR REPLACE FORCE VIEW "V_$FILESTATXS"("TSNAME","FILENAME","PHYRDS","PHYWRTS","READTIM","WRITETIM","PHYBLKRD","PHYBLKWRT","WAIT_COUNT","TIME") AS 
select ts.name      tsname
     , df.name	    filename
     , fs.phyrds
     , fs.phywrts
     , fs.readtim
     , fs.writetim
     , fs.phyblkrd
     , fs.phyblkwrt
     , fw.count     wait_count
     , fw.time      time
  from x$kcbfwait   fw
     , v$filestat   fs
     , v$tablespace ts
     , v$datafile   df
 where ts.ts#    = df.ts#
   and fs.file#  = df.file#
   and fw.indx+1 = df.file#;

CREATE OR REPLACE FORCE VIEW "V_$FILE_CACHE_TRANSFER"("FILE_NUMBER","X_2_NULL","X_2_NULL_FORCED_WRITE","X_2_NULL_FORCED_STALE","X_2_S","X_2_S_FORCED_WRITE","S_2_NULL","S_2_NULL_FORCED_STALE","RBR","RBR_FORCED_WRITE","RBR_FORCED_STALE","NULL_2_X","S_2_X","NULL_2_S","CR_TRANSFERS","CUR_TRANSFERS") AS 
select "FILE_NUMBER","X_2_NULL","X_2_NULL_FORCED_WRITE","X_2_NULL_FORCED_STALE","X_2_S","X_2_S_FORCED_WRITE","S_2_NULL","S_2_NULL_FORCED_STALE","RBR","RBR_FORCED_WRITE","RBR_FORCED_STALE","NULL_2_X","S_2_X","NULL_2_S","CR_TRANSFERS","CUR_TRANSFERS" from v$file_cache_transfer;

CREATE OR REPLACE FORCE VIEW "V_$FILE_HISTOGRAM"("FILE#","SINGLEBLKRDTIM_MILLI","SINGLEBLKRDS") AS 
select "FILE#","SINGLEBLKRDTIM_MILLI","SINGLEBLKRDS" from v$file_histogram;

CREATE OR REPLACE FORCE VIEW "V_$FILE_PING"("FILE_NUMBER","FREQUENCY","X_2_NULL","X_2_NULL_FORCED_WRITE","X_2_NULL_FORCED_STALE","X_2_S","X_2_S_FORCED_WRITE","X_2_SSX","X_2_SSX_FORCED_WRITE","S_2_NULL","S_2_NULL_FORCED_STALE","SS_2_NULL","SS_2_RLS","WRB","WRB_FORCED_WRITE","RBR","RBR_FORCED_WRITE","RBR_FORCED_STALE","CBR","CBR_FORCED_WRITE","NULL_2_X","S_2_X","SSX_2_X","NULL_2_S","NULL_2_SS","OP_2_SS") AS 
select "FILE_NUMBER","FREQUENCY","X_2_NULL","X_2_NULL_FORCED_WRITE","X_2_NULL_FORCED_STALE","X_2_S","X_2_S_FORCED_WRITE","X_2_SSX","X_2_SSX_FORCED_WRITE","S_2_NULL","S_2_NULL_FORCED_STALE","SS_2_NULL","SS_2_RLS","WRB","WRB_FORCED_WRITE","RBR","RBR_FORCED_WRITE","RBR_FORCED_STALE","CBR","CBR_FORCED_WRITE","NULL_2_X","S_2_X","SSX_2_X","NULL_2_S","NULL_2_SS","OP_2_SS" from v$file_ping;

CREATE OR REPLACE FORCE VIEW "V_$FIXED_TABLE"("NAME","OBJECT_ID","TYPE","TABLE_NUM") AS 
select "NAME","OBJECT_ID","TYPE","TABLE_NUM" from v$fixed_table;

CREATE OR REPLACE FORCE VIEW "V_$FIXED_VIEW_DEFINITION"("VIEW_NAME","VIEW_DEFINITION") AS 
select "VIEW_NAME","VIEW_DEFINITION" from v$fixed_view_definition;

CREATE OR REPLACE FORCE VIEW "V_$FLASHBACK_DATABASE_LOG"("OLDEST_FLASHBACK_SCN","OLDEST_FLASHBACK_TIME","RETENTION_TARGET","FLASHBACK_SIZE","ESTIMATED_FLASHBACK_SIZE") AS 
select "OLDEST_FLASHBACK_SCN","OLDEST_FLASHBACK_TIME","RETENTION_TARGET","FLASHBACK_SIZE","ESTIMATED_FLASHBACK_SIZE" from v$flashback_database_log;

CREATE OR REPLACE FORCE VIEW "V_$FLASHBACK_DATABASE_LOGFILE"("NAME","LOG#","THREAD#","SEQUENCE#","BYTES","FIRST_CHANGE#","FIRST_TIME") AS 
select "NAME","LOG#","THREAD#","SEQUENCE#","BYTES","FIRST_CHANGE#","FIRST_TIME" from v$flashback_database_logfile;

CREATE OR REPLACE FORCE VIEW "V_$FLASHBACK_DATABASE_STAT"("BEGIN_TIME","END_TIME","FLASHBACK_DATA","DB_DATA","REDO_DATA","ESTIMATED_FLASHBACK_SIZE") AS 
select "BEGIN_TIME","END_TIME","FLASHBACK_DATA","DB_DATA","REDO_DATA","ESTIMATED_FLASHBACK_SIZE" from v$flashback_database_stat;

CREATE OR REPLACE FORCE VIEW "V_$GCSHVMASTER_INFO"("HV_ID","CURRENT_MASTER","PREVIOUS_MASTER","REMASTER_CNT") AS 
select "HV_ID","CURRENT_MASTER","PREVIOUS_MASTER","REMASTER_CNT" from v$gcshvmaster_info;

CREATE OR REPLACE FORCE VIEW "V_$GCSPFMASTER_INFO"("FILE_ID","CURRENT_MASTER","PREVIOUS_MASTER","REMASTER_CNT") AS 
select "FILE_ID","CURRENT_MASTER","PREVIOUS_MASTER","REMASTER_CNT" from v$gcspfmaster_info;

CREATE OR REPLACE FORCE VIEW "V_$GC_ELEMENT"("GC_ELEMENT_ADDR","INDX","CLASS","GC_ELEMENT_NAME","MODE_HELD","BLOCK_COUNT","RELEASING","ACQUIRING","WRITING","RECOVERING","LOCAL","FLAGS") AS 
select "GC_ELEMENT_ADDR","INDX","CLASS","GC_ELEMENT_NAME","MODE_HELD","BLOCK_COUNT","RELEASING","ACQUIRING","WRITING","RECOVERING","LOCAL","FLAGS" from v$gc_element;

CREATE OR REPLACE FORCE VIEW "V_$GC_ELEMENTS_W_COLLISIONS"("GC_ELEMENT_ADDR") AS 
select "GC_ELEMENT_ADDR" from v$gc_elements_with_collisions;

CREATE OR REPLACE FORCE VIEW "V_$GES_BLOCKING_ENQUEUE"("HANDLE","GRANT_LEVEL","REQUEST_LEVEL","RESOURCE_NAME1","RESOURCE_NAME2","PID","TRANSACTION_ID0","TRANSACTION_ID1","GROUP_ID","OPEN_OPT_DEADLOCK","OPEN_OPT_PERSISTENT","OPEN_OPT_PROCESS_OWNED","OPEN_OPT_NO_XID","CONVERT_OPT_GETVALUE","CONVERT_OPT_PUTVALUE","CONVERT_OPT_NOVALUE","CONVERT_OPT_DUBVALUE","CONVERT_OPT_NOQUEUE","CONVERT_OPT_EXPRESS","CONVERT_OPT_NODEADLOCKWAIT","CONVERT_OPT_NODEADLOCKBLOCK","WHICH_QUEUE","STATE","AST_EVENT0","OWNER_NODE","BLOCKED","BLOCKER") AS 
select "HANDLE","GRANT_LEVEL","REQUEST_LEVEL","RESOURCE_NAME1","RESOURCE_NAME2","PID","TRANSACTION_ID0","TRANSACTION_ID1","GROUP_ID","OPEN_OPT_DEADLOCK","OPEN_OPT_PERSISTENT","OPEN_OPT_PROCESS_OWNED","OPEN_OPT_NO_XID","CONVERT_OPT_GETVALUE","CONVERT_OPT_PUTVALUE","CONVERT_OPT_NOVALUE","CONVERT_OPT_DUBVALUE","CONVERT_OPT_NOQUEUE","CONVERT_OPT_EXPRESS","CONVERT_OPT_NODEADLOCKWAIT","CONVERT_OPT_NODEADLOCKBLOCK","WHICH_QUEUE","STATE","AST_EVENT0","OWNER_NODE","BLOCKED","BLOCKER" from v$ges_blocking_enqueue;

CREATE OR REPLACE FORCE VIEW "V_$GES_ENQUEUE"("HANDLE","GRANT_LEVEL","REQUEST_LEVEL","RESOURCE_NAME1","RESOURCE_NAME2","PID","TRANSACTION_ID0","TRANSACTION_ID1","GROUP_ID","OPEN_OPT_DEADLOCK","OPEN_OPT_PERSISTENT","OPEN_OPT_PROCESS_OWNED","OPEN_OPT_NO_XID","CONVERT_OPT_GETVALUE","CONVERT_OPT_PUTVALUE","CONVERT_OPT_NOVALUE","CONVERT_OPT_DUBVALUE","CONVERT_OPT_NOQUEUE","CONVERT_OPT_EXPRESS","CONVERT_OPT_NODEADLOCKWAIT","CONVERT_OPT_NODEADLOCKBLOCK","WHICH_QUEUE","STATE","AST_EVENT0","OWNER_NODE","BLOCKED","BLOCKER") AS 
select "HANDLE","GRANT_LEVEL","REQUEST_LEVEL","RESOURCE_NAME1","RESOURCE_NAME2","PID","TRANSACTION_ID0","TRANSACTION_ID1","GROUP_ID","OPEN_OPT_DEADLOCK","OPEN_OPT_PERSISTENT","OPEN_OPT_PROCESS_OWNED","OPEN_OPT_NO_XID","CONVERT_OPT_GETVALUE","CONVERT_OPT_PUTVALUE","CONVERT_OPT_NOVALUE","CONVERT_OPT_DUBVALUE","CONVERT_OPT_NOQUEUE","CONVERT_OPT_EXPRESS","CONVERT_OPT_NODEADLOCKWAIT","CONVERT_OPT_NODEADLOCKBLOCK","WHICH_QUEUE","STATE","AST_EVENT0","OWNER_NODE","BLOCKED","BLOCKER" from v$ges_enqueue;

CREATE OR REPLACE FORCE VIEW "V_$GLOBALCONTEXT"("NAMESPACE","ATTRIBUTE","VALUE","USERNAME","CLIENT_IDENTIFIER") AS 
select SUBSTR(namespace,1,30) "NAMESPACE",
         SUBSTR(attribute,1,30) "ATTRIBUTE",
         value "VALUE",
         SUBSTR(username,1,30) "USERNAME",
         clientidentifier "CLIENT_IDENTIFIER"
         from v$globalcontext;

CREATE OR REPLACE FORCE VIEW "V_$GLOBAL_BLOCKED_LOCKS"("ADDR","KADDR","SID","TYPE","ID1","ID2","LMODE","REQUEST","CTIME") AS 
select "ADDR","KADDR","SID","TYPE","ID1","ID2","LMODE","REQUEST","CTIME" from v$global_blocked_locks;

CREATE OR REPLACE FORCE VIEW "V_$GLOBAL_TRANSACTION"("FORMATID","GLOBALID","BRANCHID","BRANCHES","REFCOUNT","PREPARECOUNT","STATE","FLAGS","COUPLING") AS 
select "FORMATID","GLOBALID","BRANCHID","BRANCHES","REFCOUNT","PREPARECOUNT","STATE","FLAGS","COUPLING" from v$global_transaction;

CREATE OR REPLACE FORCE VIEW "V_$HS_AGENT"("AGENT_ID","MACHINE","PROCESS","PROGRAM","OSUSER","STARTTIME","AGENT_TYPE","FDS_CLASS_ID","FDS_INST_ID") AS 
select "AGENT_ID","MACHINE","PROCESS","PROGRAM","OSUSER","STARTTIME","AGENT_TYPE","FDS_CLASS_ID","FDS_INST_ID" from v$hs_agent;

CREATE OR REPLACE FORCE VIEW "V_$HS_PARAMETER"("HS_SESSION_ID","PARAMETER","VALUE","SOURCE","ENV") AS 
select "HS_SESSION_ID","PARAMETER","VALUE","SOURCE","ENV" from v$hs_parameter;

CREATE OR REPLACE FORCE VIEW "V_$HS_SESSION"("HS_SESSION_ID","AGENT_ID","SID","DB_LINK","DB_LINK_OWNER","STARTTIME") AS 
select "HS_SESSION_ID","AGENT_ID","SID","DB_LINK","DB_LINK_OWNER","STARTTIME" from v$hs_session;

CREATE OR REPLACE FORCE VIEW "V_$HVMASTER_INFO"("HV_ID","CURRENT_MASTER","PREVIOUS_MASTER","REMASTER_CNT") AS 
select "HV_ID","CURRENT_MASTER","PREVIOUS_MASTER","REMASTER_CNT" from v$hvmaster_info;

CREATE OR REPLACE FORCE VIEW "V_$INDEXED_FIXED_COLUMN"("TABLE_NAME","INDEX_NUMBER","COLUMN_NAME","COLUMN_POSITION") AS 
select "TABLE_NAME","INDEX_NUMBER","COLUMN_NAME","COLUMN_POSITION" from v$indexed_fixed_column;

CREATE OR REPLACE FORCE VIEW "V_$INSTANCE"("INSTANCE_NUMBER","INSTANCE_NAME","HOST_NAME","VERSION","STARTUP_TIME","STATUS","PARALLEL","THREAD#","ARCHIVER","LOG_SWITCH_WAIT","LOGINS","SHUTDOWN_PENDING","DATABASE_STATUS","INSTANCE_ROLE","ACTIVE_STATE") AS 
select "INSTANCE_NUMBER","INSTANCE_NAME","HOST_NAME","VERSION","STARTUP_TIME","STATUS","PARALLEL","THREAD#","ARCHIVER","LOG_SWITCH_WAIT","LOGINS","SHUTDOWN_PENDING","DATABASE_STATUS","INSTANCE_ROLE","ACTIVE_STATE" from v$instance;

CREATE OR REPLACE FORCE VIEW "V_$INSTANCE_CACHE_TRANSFER"("INSTANCE","CLASS","CR_BLOCK","CR_BUSY","CR_CONGESTED","CURRENT_BLOCK","CURRENT_BUSY","CURRENT_CONGESTED") AS 
select "INSTANCE","CLASS","CR_BLOCK","CR_BUSY","CR_CONGESTED","CURRENT_BLOCK","CURRENT_BUSY","CURRENT_CONGESTED" from v$instance_cache_transfer;

CREATE OR REPLACE FORCE VIEW "V_$INSTANCE_LOG_GROUP"("THREAD#","STATUS","ENABLED","GROUPS","INSTANCE","OPEN_TIME","CURRENT_GROUP#","SEQUENCE#","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","ENABLE_CHANGE#","ENABLE_TIME","DISABLE_CHANGE#","DISABLE_TIME") AS 
select "THREAD#","STATUS","ENABLED","GROUPS","INSTANCE","OPEN_TIME","CURRENT_GROUP#","SEQUENCE#","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","ENABLE_CHANGE#","ENABLE_TIME","DISABLE_CHANGE#","DISABLE_TIME" from v$instance_log_group;

CREATE OR REPLACE FORCE VIEW "V_$INSTANCE_RECOVERY"("RECOVERY_ESTIMATED_IOS","ACTUAL_REDO_BLKS","TARGET_REDO_BLKS","LOG_FILE_SIZE_REDO_BLKS","LOG_CHKPT_TIMEOUT_REDO_BLKS","LOG_CHKPT_INTERVAL_REDO_BLKS","FAST_START_IO_TARGET_REDO_BLKS","TARGET_MTTR","ESTIMATED_MTTR","CKPT_BLOCK_WRITES","OPTIMAL_LOGFILE_SIZE","ESTD_CLUSTER_AVAILABLE_TIME","WRITES_MTTR","WRITES_LOGFILE_SIZE","WRITES_LOG_CHECKPOINT_SETTINGS","WRITES_OTHER_SETTINGS","WRITES_AUTOTUNE","WRITES_FULL_THREAD_CKPT") AS 
select "RECOVERY_ESTIMATED_IOS","ACTUAL_REDO_BLKS","TARGET_REDO_BLKS","LOG_FILE_SIZE_REDO_BLKS","LOG_CHKPT_TIMEOUT_REDO_BLKS","LOG_CHKPT_INTERVAL_REDO_BLKS","FAST_START_IO_TARGET_REDO_BLKS","TARGET_MTTR","ESTIMATED_MTTR","CKPT_BLOCK_WRITES","OPTIMAL_LOGFILE_SIZE","ESTD_CLUSTER_AVAILABLE_TIME","WRITES_MTTR","WRITES_LOGFILE_SIZE","WRITES_LOG_CHECKPOINT_SETTINGS","WRITES_OTHER_SETTINGS","WRITES_AUTOTUNE","WRITES_FULL_THREAD_CKPT" from v$instance_recovery;

CREATE OR REPLACE FORCE VIEW "V_$JAVAPOOL"("CATEGORY","MEMUSED") AS 
select "CATEGORY","MEMUSED" from v$javapool;

CREATE OR REPLACE FORCE VIEW "V_$JAVA_LIBRARY_CACHE_MEMORY"("LC_NAMESPACE","LC_INUSE_MEMORY_OBJECTS","LC_INUSE_MEMORY_SIZE","LC_FREEABLE_MEMORY_OBJECTS","LC_FREEABLE_MEMORY_SIZE") AS 
select "LC_NAMESPACE","LC_INUSE_MEMORY_OBJECTS","LC_INUSE_MEMORY_SIZE","LC_FREEABLE_MEMORY_OBJECTS","LC_FREEABLE_MEMORY_SIZE" from v$java_library_cache_memory;

CREATE OR REPLACE FORCE VIEW "V_$JAVA_POOL_ADVICE"("JAVA_POOL_SIZE_FOR_ESTIMATE","JAVA_POOL_SIZE_FACTOR","ESTD_LC_SIZE","ESTD_LC_MEMORY_OBJECTS","ESTD_LC_TIME_SAVED","ESTD_LC_TIME_SAVED_FACTOR","ESTD_LC_LOAD_TIME","ESTD_LC_LOAD_TIME_FACTOR","ESTD_LC_MEMORY_OBJECT_HITS") AS 
select "JAVA_POOL_SIZE_FOR_ESTIMATE","JAVA_POOL_SIZE_FACTOR","ESTD_LC_SIZE","ESTD_LC_MEMORY_OBJECTS","ESTD_LC_TIME_SAVED","ESTD_LC_TIME_SAVED_FACTOR","ESTD_LC_LOAD_TIME","ESTD_LC_LOAD_TIME_FACTOR","ESTD_LC_MEMORY_OBJECT_HITS" from v$java_pool_advice;

CREATE OR REPLACE FORCE VIEW "V_$KCCDI"("ADDR","INDX","INST_ID","DIDFV","DIDFC","DICTS","DIDBN","DIRDB","DICCT","DIFLG","DIIRS","DIRLS","DIRLC","DIRLC_I","DIPRS","DIPRC","DIPRC_I","DIRDV","DIRDC","DINDF","DINOF","DICPT","DISCN","DINET","DINOT","DIOTH","DIOTT","DIETB","DIMLM","DIMDM","DIARH","DIART","DIPRT","DIFAS","DICKP_SCN","DICKP_TIM","DICSQ","DIDBI","DISSC_SCN","DISSC_TIM","DISFP","DIBSC","DIPOFB","DIPNFB","DICOFB","DICNFB","DIVTS","DICID","DIDOR","DISLH","DISLT","DIRAE","DIACID","DIARS","DISOS","DIDGD","DIMLA","DIPDB","DIFL2","DIPLID","DIPLN","DICUR_SCN","DIDBUN") AS 
SELECT "ADDR","INDX","INST_ID","DIDFV","DIDFC","DICTS","DIDBN","DIRDB","DICCT","DIFLG","DIIRS","DIRLS","DIRLC","DIRLC_I","DIPRS","DIPRC","DIPRC_I","DIRDV","DIRDC","DINDF","DINOF","DICPT","DISCN","DINET","DINOT","DIOTH","DIOTT","DIETB","DIMLM","DIMDM","DIARH","DIART","DIPRT","DIFAS","DICKP_SCN","DICKP_TIM","DICSQ","DIDBI","DISSC_SCN","DISSC_TIM","DISFP","DIBSC","DIPOFB","DIPNFB","DICOFB","DICNFB","DIVTS","DICID","DIDOR","DISLH","DISLT","DIRAE","DIACID","DIARS","DISOS","DIDGD","DIMLA","DIPDB","DIFL2","DIPLID","DIPLN","DICUR_SCN","DIDBUN" FROM x$kccdi;

CREATE OR REPLACE FORCE VIEW "V_$KCCFE"("ADDR","INDX","INST_ID","FENUM","FECSZ","FEBSZ","FESTA","FECRC_SCN","FECRC_TIM","FECRC_THR","FECRC_RBA_SEQ","FECRC_RBA_BNO","FECRC_RBA_BOF","FECRC_ETB","FECPS","FECPT","FECPC","FESTS","FESTT","FEBSC","FEFNH","FEFNT","FEDUP","FEURS","FEURT","FEOFS","FEONC_SCN","FEONC_TIM","FEONC_THR","FEONC_RBA_SEQ","FEONC_RBA_BNO","FEONC_RBA_BOF","FEONC_ETB","FEPOR","FETSN","FETSI","FERFN","FEPFT","FEDOR","FEPDI","FEFDB","FEPLG_SCN","FEPAX","FEFLG") AS 
SELECT "ADDR","INDX","INST_ID","FENUM","FECSZ","FEBSZ","FESTA","FECRC_SCN","FECRC_TIM","FECRC_THR","FECRC_RBA_SEQ","FECRC_RBA_BNO","FECRC_RBA_BOF","FECRC_ETB","FECPS","FECPT","FECPC","FESTS","FESTT","FEBSC","FEFNH","FEFNT","FEDUP","FEURS","FEURT","FEOFS","FEONC_SCN","FEONC_TIM","FEONC_THR","FEONC_RBA_SEQ","FEONC_RBA_BNO","FEONC_RBA_BOF","FEONC_ETB","FEPOR","FETSN","FETSI","FERFN","FEPFT","FEDOR","FEPDI","FEFDB","FEPLG_SCN","FEPAX","FEFLG" FROM x$kccfe;

CREATE OR REPLACE FORCE VIEW "V_$LATCH"("ADDR","LATCH#","LEVEL#","NAME","HASH","GETS","MISSES","SLEEPS","IMMEDIATE_GETS","IMMEDIATE_MISSES","WAITERS_WOKEN","WAITS_HOLDING_LATCH","SPIN_GETS","SLEEP1","SLEEP2","SLEEP3","SLEEP4","SLEEP5","SLEEP6","SLEEP7","SLEEP8","SLEEP9","SLEEP10","SLEEP11","WAIT_TIME") AS 
select "ADDR","LATCH#","LEVEL#","NAME","HASH","GETS","MISSES","SLEEPS","IMMEDIATE_GETS","IMMEDIATE_MISSES","WAITERS_WOKEN","WAITS_HOLDING_LATCH","SPIN_GETS","SLEEP1","SLEEP2","SLEEP3","SLEEP4","SLEEP5","SLEEP6","SLEEP7","SLEEP8","SLEEP9","SLEEP10","SLEEP11","WAIT_TIME" from v$latch;

CREATE OR REPLACE FORCE VIEW "V_$LATCHHOLDER"("PID","SID","LADDR","NAME") AS 
select "PID","SID","LADDR","NAME" from v$latchholder;

CREATE OR REPLACE FORCE VIEW "V_$LATCHNAME"("LATCH#","NAME","HASH") AS 
select "LATCH#","NAME","HASH" from v$latchname;

CREATE OR REPLACE FORCE VIEW "V_$LATCH_CHILDREN"("ADDR","LATCH#","CHILD#","LEVEL#","NAME","HASH","GETS","MISSES","SLEEPS","IMMEDIATE_GETS","IMMEDIATE_MISSES","WAITERS_WOKEN","WAITS_HOLDING_LATCH","SPIN_GETS","SLEEP1","SLEEP2","SLEEP3","SLEEP4","SLEEP5","SLEEP6","SLEEP7","SLEEP8","SLEEP9","SLEEP10","SLEEP11","WAIT_TIME") AS 
select "ADDR","LATCH#","CHILD#","LEVEL#","NAME","HASH","GETS","MISSES","SLEEPS","IMMEDIATE_GETS","IMMEDIATE_MISSES","WAITERS_WOKEN","WAITS_HOLDING_LATCH","SPIN_GETS","SLEEP1","SLEEP2","SLEEP3","SLEEP4","SLEEP5","SLEEP6","SLEEP7","SLEEP8","SLEEP9","SLEEP10","SLEEP11","WAIT_TIME" from v$latch_children;

CREATE OR REPLACE FORCE VIEW "V_$LATCH_MISSES"("PARENT_NAME","WHERE","NWFAIL_COUNT","SLEEP_COUNT","WTR_SLP_COUNT","LONGHOLD_COUNT","LOCATION") AS 
select "PARENT_NAME","WHERE","NWFAIL_COUNT","SLEEP_COUNT","WTR_SLP_COUNT","LONGHOLD_COUNT","LOCATION" from v$latch_misses;

CREATE OR REPLACE FORCE VIEW "V_$LATCH_PARENT"("ADDR","LATCH#","LEVEL#","NAME","HASH","GETS","MISSES","SLEEPS","IMMEDIATE_GETS","IMMEDIATE_MISSES","WAITERS_WOKEN","WAITS_HOLDING_LATCH","SPIN_GETS","SLEEP1","SLEEP2","SLEEP3","SLEEP4","SLEEP5","SLEEP6","SLEEP7","SLEEP8","SLEEP9","SLEEP10","SLEEP11","WAIT_TIME") AS 
select "ADDR","LATCH#","LEVEL#","NAME","HASH","GETS","MISSES","SLEEPS","IMMEDIATE_GETS","IMMEDIATE_MISSES","WAITERS_WOKEN","WAITS_HOLDING_LATCH","SPIN_GETS","SLEEP1","SLEEP2","SLEEP3","SLEEP4","SLEEP5","SLEEP6","SLEEP7","SLEEP8","SLEEP9","SLEEP10","SLEEP11","WAIT_TIME" from v$latch_parent;

CREATE OR REPLACE FORCE VIEW "V_$LIBRARYCACHE"("NAMESPACE","GETS","GETHITS","GETHITRATIO","PINS","PINHITS","PINHITRATIO","RELOADS","INVALIDATIONS","DLM_LOCK_REQUESTS","DLM_PIN_REQUESTS","DLM_PIN_RELEASES","DLM_INVALIDATION_REQUESTS","DLM_INVALIDATIONS") AS 
select "NAMESPACE","GETS","GETHITS","GETHITRATIO","PINS","PINHITS","PINHITRATIO","RELOADS","INVALIDATIONS","DLM_LOCK_REQUESTS","DLM_PIN_REQUESTS","DLM_PIN_RELEASES","DLM_INVALIDATION_REQUESTS","DLM_INVALIDATIONS" from v$librarycache;

CREATE OR REPLACE FORCE VIEW "V_$LIBRARY_CACHE_MEMORY"("LC_NAMESPACE","LC_INUSE_MEMORY_OBJECTS","LC_INUSE_MEMORY_SIZE","LC_FREEABLE_MEMORY_OBJECTS","LC_FREEABLE_MEMORY_SIZE") AS 
select "LC_NAMESPACE","LC_INUSE_MEMORY_OBJECTS","LC_INUSE_MEMORY_SIZE","LC_FREEABLE_MEMORY_OBJECTS","LC_FREEABLE_MEMORY_SIZE" from v$library_cache_memory;

CREATE OR REPLACE FORCE VIEW "V_$LICENSE"("SESSIONS_MAX","SESSIONS_WARNING","SESSIONS_CURRENT","SESSIONS_HIGHWATER","USERS_MAX","CPU_COUNT_CURRENT","CPU_COUNT_HIGHWATER") AS 
select "SESSIONS_MAX","SESSIONS_WARNING","SESSIONS_CURRENT","SESSIONS_HIGHWATER","USERS_MAX","CPU_COUNT_CURRENT","CPU_COUNT_HIGHWATER" from v$license;

CREATE OR REPLACE FORCE VIEW "V_$LOADISTAT"("OWNER","TABNAME","INDEXNAME","SUBNAME","MESSAGE_NUM","MESSAGE") AS 
select "OWNER","TABNAME","INDEXNAME","SUBNAME","MESSAGE_NUM","MESSAGE" from v$loadistat;

CREATE OR REPLACE FORCE VIEW "V_$LOADPSTAT"("OWNER","TABNAME","PARTNAME","LOADED") AS 
select "OWNER","TABNAME","PARTNAME","LOADED" from v$loadpstat;

CREATE OR REPLACE FORCE VIEW "V_$LOCK"("ADDR","KADDR","SID","TYPE","ID1","ID2","LMODE","REQUEST","CTIME","BLOCK") AS 
select "ADDR","KADDR","SID","TYPE","ID1","ID2","LMODE","REQUEST","CTIME","BLOCK" from v$lock;

CREATE OR REPLACE FORCE VIEW "V_$LOCKED_OBJECT"("XIDUSN","XIDSLOT","XIDSQN","OBJECT_ID","SESSION_ID","ORACLE_USERNAME","OS_USER_NAME","PROCESS","LOCKED_MODE") AS 
select "XIDUSN","XIDSLOT","XIDSQN","OBJECT_ID","SESSION_ID","ORACLE_USERNAME","OS_USER_NAME","PROCESS","LOCKED_MODE" from v$locked_object;

CREATE OR REPLACE FORCE VIEW "V_$LOCKS_WITH_COLLISIONS"("LOCK_ELEMENT_ADDR") AS 
select "LOCK_ELEMENT_ADDR" from v$locks_with_collisions;

CREATE OR REPLACE FORCE VIEW "V_$LOCK_ACTIVITY"("FROM_VAL","TO_VAL","ACTION_VAL","COUNTER") AS 
select "FROM_VAL","TO_VAL","ACTION_VAL","COUNTER" from v$lock_activity;

CREATE OR REPLACE FORCE VIEW "V_$LOCK_ELEMENT"("LOCK_ELEMENT_ADDR","INDX","CLASS","LOCK_ELEMENT_NAME","MODE_HELD","BLOCK_COUNT","RELEASING","ACQUIRING","INVALID","FLAGS") AS 
select "LOCK_ELEMENT_ADDR","INDX","CLASS","LOCK_ELEMENT_NAME","MODE_HELD","BLOCK_COUNT","RELEASING","ACQUIRING","INVALID","FLAGS" from v$lock_element;

CREATE OR REPLACE FORCE VIEW "V_$LOCK_TYPE"("TYPE","NAME","ID1_TAG","ID2_TAG","IS_USER","DESCRIPTION") AS 
select "TYPE","NAME","ID1_TAG","ID2_TAG","IS_USER","DESCRIPTION" from v$lock_type;

CREATE OR REPLACE FORCE VIEW "V_$LOG"("GROUP#","THREAD#","SEQUENCE#","BYTES","MEMBERS","ARCHIVED","STATUS","FIRST_CHANGE#","FIRST_TIME") AS 
select "GROUP#","THREAD#","SEQUENCE#","BYTES","MEMBERS","ARCHIVED","STATUS","FIRST_CHANGE#","FIRST_TIME" from v$log;

CREATE OR REPLACE FORCE VIEW "V_$LOGFILE"("GROUP#","STATUS","TYPE","MEMBER","IS_RECOVERY_DEST_FILE") AS 
select "GROUP#","STATUS","TYPE","MEMBER","IS_RECOVERY_DEST_FILE" from v$logfile;

CREATE OR REPLACE FORCE VIEW "V_$LOGHIST"("THREAD#","SEQUENCE#","FIRST_CHANGE#","FIRST_TIME","SWITCH_CHANGE#") AS 
select "THREAD#","SEQUENCE#","FIRST_CHANGE#","FIRST_TIME","SWITCH_CHANGE#" from v$loghist;

CREATE OR REPLACE FORCE VIEW "V_$LOGMNR_CALLBACK"("STATE","TYPE","CAPABILITY") AS 
select "STATE","TYPE","CAPABILITY" from v$logmnr_callback;

CREATE OR REPLACE FORCE VIEW "V_$LOGMNR_CONTENTS"("SCN","CSCN","TIMESTAMP","COMMIT_TIMESTAMP","THREAD#","LOG_ID","XIDUSN","XIDSLT","XIDSQN","PXIDUSN","PXIDSLT","PXIDSQN","RBASQN","RBABLK","RBABYTE","UBAFIL","UBABLK","UBAREC","UBASQN","ABS_FILE#","REL_FILE#","DATA_BLK#","DATA_OBJ#","DATA_OBJD#","SEG_OWNER","SEG_NAME","TABLE_NAME","SEG_TYPE","SEG_TYPE_NAME","TABLE_SPACE","ROW_ID","SESSION#","SERIAL#","USERNAME","SESSION_INFO","TX_NAME","ROLLBACK","OPERATION","OPERATION_CODE","SQL_REDO","SQL_UNDO","RS_ID","SEQUENCE#","SSN","CSF","INFO","STATUS","REDO_VALUE","UNDO_VALUE","SQL_COLUMN_TYPE","SQL_COLUMN_NAME","REDO_LENGTH","REDO_OFFSET","UNDO_LENGTH","UNDO_OFFSET","DATA_OBJV#","SAFE_RESUME_SCN","XID","PXID","AUDIT_SESSIONID") AS 
select "SCN","CSCN","TIMESTAMP","COMMIT_TIMESTAMP","THREAD#","LOG_ID","XIDUSN","XIDSLT","XIDSQN","PXIDUSN","PXIDSLT","PXIDSQN","RBASQN","RBABLK","RBABYTE","UBAFIL","UBABLK","UBAREC","UBASQN","ABS_FILE#","REL_FILE#","DATA_BLK#","DATA_OBJ#","DATA_OBJD#","SEG_OWNER","SEG_NAME","TABLE_NAME","SEG_TYPE","SEG_TYPE_NAME","TABLE_SPACE","ROW_ID","SESSION#","SERIAL#","USERNAME","SESSION_INFO","TX_NAME","ROLLBACK","OPERATION","OPERATION_CODE","SQL_REDO","SQL_UNDO","RS_ID","SEQUENCE#","SSN","CSF","INFO","STATUS","REDO_VALUE","UNDO_VALUE","SQL_COLUMN_TYPE","SQL_COLUMN_NAME","REDO_LENGTH","REDO_OFFSET","UNDO_LENGTH","UNDO_OFFSET","DATA_OBJV#","SAFE_RESUME_SCN","XID","PXID","AUDIT_SESSIONID" from v$logmnr_contents;

CREATE OR REPLACE FORCE VIEW "V_$LOGMNR_DICTIONARY"("DB_NAME","DB_ID","DB_CREATED","TIMESTAMP","RESET_SCN","RESET_SCN_TIME","DB_VERSION_TIME","DB_CHARACTER_SET","DB_VERSION","DB_STATUS","DICTIONARY_SCN","ENABLED_THREAD_MAP","DB_TXN_SCN","FILENAME","INFO","STATUS") AS 
select "DB_NAME","DB_ID","DB_CREATED","TIMESTAMP","RESET_SCN","RESET_SCN_TIME","DB_VERSION_TIME","DB_CHARACTER_SET","DB_VERSION","DB_STATUS","DICTIONARY_SCN","ENABLED_THREAD_MAP","DB_TXN_SCN","FILENAME","INFO","STATUS" from v$logmnr_dictionary;

CREATE OR REPLACE FORCE VIEW "V_$LOGMNR_LATCH"("SESSION_ID","NAME","CHILD_ADDR","STATE") AS 
select "SESSION_ID","NAME","CHILD_ADDR","STATE" from v$logmnr_latch;

CREATE OR REPLACE FORCE VIEW "V_$LOGMNR_LOGFILE"("LOG_ID","FILENAME","LOW_TIME","NEXT_TIME","DB_ID","DB_NAME","RESET_SCNWRP","RESET_SCNBAS","RESET_SCN_TIME","THREAD_ID","THREAD_SQN","LOW_SCNWRP","LOW_SCNBAS","NEXT_SCNWRP","NEXT_SCNBAS","FILE_STATE") AS 
select "LOG_ID","FILENAME","LOW_TIME","NEXT_TIME","DB_ID","DB_NAME","RESET_SCNWRP","RESET_SCNBAS","RESET_SCN_TIME","THREAD_ID","THREAD_SQN","LOW_SCNWRP","LOW_SCNBAS","NEXT_SCNWRP","NEXT_SCNBAS","FILE_STATE" from v$logmnr_logfile;

CREATE OR REPLACE FORCE VIEW "V_$LOGMNR_LOGS"("LOG_ID","FILENAME","LOW_TIME","HIGH_TIME","DB_ID","DB_NAME","RESET_SCN","RESET_SCN_TIME","THREAD_ID","THREAD_SQN","LOW_SCN","NEXT_SCN","DICTIONARY_BEGIN","DICTIONARY_END","TYPE","BLOCKSIZE","FILESIZE","INFO","STATUS") AS 
select "LOG_ID","FILENAME","LOW_TIME","HIGH_TIME","DB_ID","DB_NAME","RESET_SCN","RESET_SCN_TIME","THREAD_ID","THREAD_SQN","LOW_SCN","NEXT_SCN","DICTIONARY_BEGIN","DICTIONARY_END","TYPE","BLOCKSIZE","FILESIZE","INFO","STATUS" from v$logmnr_logs;

CREATE OR REPLACE FORCE VIEW "V_$LOGMNR_PARAMETERS"("START_DATE","REQUIRED_START_DATE","END_DATE","START_SCN","REQUIRED_START_SCN","END_SCN","OPTIONS","INFO","STATUS") AS 
select "START_DATE","REQUIRED_START_DATE","END_DATE","START_SCN","REQUIRED_START_SCN","END_SCN","OPTIONS","INFO","STATUS" from v$logmnr_parameters;

CREATE OR REPLACE FORCE VIEW "V_$LOGMNR_PROCESS"("SESSION_ID","PID","SPID","ROLE","USERNAME","SID","SERIAL#","LATCHWAIT","LATCHSPIN","WORK_MICROSEC","OVERHEAD_MICROSEC") AS 
select "SESSION_ID","PID","SPID","ROLE","USERNAME","SID","SERIAL#","LATCHWAIT","LATCHSPIN","WORK_MICROSEC","OVERHEAD_MICROSEC" from v$logmnr_process;

CREATE OR REPLACE FORCE VIEW "V_$LOGMNR_REGION"("MEMSTATE","STATE","OWNING_PROCESS") AS 
select "MEMSTATE","STATE","OWNING_PROCESS" from v$logmnr_region;

CREATE OR REPLACE FORCE VIEW "V_$LOGMNR_SESSION"("SESSION_ID","SESSION_NAME","SESSION_STATE","DB_NAME","DB_ID","RESET_SCN","RESET_TIMESTAMP","NUM_PROCESS","CHUNK_SIZE","START_SCN","END_SCN","SPILL_SCN","PROCESSED_SCN","PREPARED_SCN","READ_SCN","LOW_MARK_SCN","CONSUMED_SCN","MAX_MEMORY_SIZE","USED_MEMORY_SIZE","PREPARED_WORK_SIZE","AVAILABLE_WORK_SIZE","AVAILABLE_TXN","AVAILABLE_COMMITTED_TXN","DELIVERED_TXN","DELIVERED_COMMITTED_TXN","PINNED_TXN","PINNED_COMMITTED_TXN") AS 
select "SESSION_ID","SESSION_NAME","SESSION_STATE","DB_NAME","DB_ID","RESET_SCN","RESET_TIMESTAMP","NUM_PROCESS","CHUNK_SIZE","START_SCN","END_SCN","SPILL_SCN","PROCESSED_SCN","PREPARED_SCN","READ_SCN","LOW_MARK_SCN","CONSUMED_SCN","MAX_MEMORY_SIZE","USED_MEMORY_SIZE","PREPARED_WORK_SIZE","AVAILABLE_WORK_SIZE","AVAILABLE_TXN","AVAILABLE_COMMITTED_TXN","DELIVERED_TXN","DELIVERED_COMMITTED_TXN","PINNED_TXN","PINNED_COMMITTED_TXN" from v$logmnr_session;

CREATE OR REPLACE FORCE VIEW "V_$LOGMNR_STATS"("SESSION_ID","NAME","VALUE") AS 
select "SESSION_ID","NAME","VALUE" from v$logmnr_stats;

CREATE OR REPLACE FORCE VIEW "V_$LOGMNR_TRANSACTION"("XIDUSN","XIDSLT","XIDSQN","COMMIT_SCNWRP","COMMIT_SCNBAS","NUM_CHANGE_RECORD","FLAGS","CHUNK_INDEX","TOTAL_CHUNKS") AS 
select "XIDUSN","XIDSLT","XIDSQN","COMMIT_SCNWRP","COMMIT_SCNBAS","NUM_CHANGE_RECORD","FLAGS","CHUNK_INDEX","TOTAL_CHUNKS" from v$logmnr_transaction;

CREATE OR REPLACE FORCE VIEW "V_$LOGSTDBY"("SERIAL#","LOGSTDBY_ID","PID","TYPE","STATUS_CODE","STATUS","HIGH_SCN") AS 
select "SERIAL#","LOGSTDBY_ID","PID","TYPE","STATUS_CODE","STATUS","HIGH_SCN" from v$logstdby;

CREATE OR REPLACE FORCE VIEW "V_$LOGSTDBY_STATS"("NAME","VALUE") AS 
select "NAME","VALUE" from v$logstdby_stats;

CREATE OR REPLACE FORCE VIEW "V_$LOG_HISTORY"("RECID","STAMP","THREAD#","SEQUENCE#","FIRST_CHANGE#","FIRST_TIME","NEXT_CHANGE#","RESETLOGS_CHANGE#","RESETLOGS_TIME") AS 
select "RECID","STAMP","THREAD#","SEQUENCE#","FIRST_CHANGE#","FIRST_TIME","NEXT_CHANGE#","RESETLOGS_CHANGE#","RESETLOGS_TIME" from v$log_history;

CREATE OR REPLACE FORCE VIEW "V_$MANAGED_STANDBY"("PROCESS","PID","STATUS","CLIENT_PROCESS","CLIENT_PID","CLIENT_DBID","GROUP#","RESETLOG_ID","THREAD#","SEQUENCE#","BLOCK#","BLOCKS","DELAY_MINS","KNOWN_AGENTS","ACTIVE_AGENTS") AS 
select "PROCESS","PID","STATUS","CLIENT_PROCESS","CLIENT_PID","CLIENT_DBID","GROUP#","RESETLOG_ID","THREAD#","SEQUENCE#","BLOCK#","BLOCKS","DELAY_MINS","KNOWN_AGENTS","ACTIVE_AGENTS" from v$managed_standby;

CREATE OR REPLACE FORCE VIEW "V_$MAP_COMP_LIST"("ELEM_IDX","NUM_COMP","COMP1_NAME","COMP1_VAL","COMP2_NAME","COMP2_VAL","COMP3_NAME","COMP3_VAL","COMP4_NAME","COMP4_VAL","COMP5_NAME","COMP5_VAL") AS 
select "ELEM_IDX","NUM_COMP","COMP1_NAME","COMP1_VAL","COMP2_NAME","COMP2_VAL","COMP3_NAME","COMP3_VAL","COMP4_NAME","COMP4_VAL","COMP5_NAME","COMP5_VAL" from v$map_comp_list;

CREATE OR REPLACE FORCE VIEW "V_$MAP_ELEMENT"("ELEM_NAME","ELEM_IDX","ELEM_CFGID","ELEM_TYPE","ELEM_SIZE","ELEM_NSUBELEM","ELEM_DESCR","STRIPE_SIZE","LIB_IDX") AS 
select "ELEM_NAME","ELEM_IDX","ELEM_CFGID","ELEM_TYPE","ELEM_SIZE","ELEM_NSUBELEM","ELEM_DESCR","STRIPE_SIZE","LIB_IDX" from v$map_element;

CREATE OR REPLACE FORCE VIEW "V_$MAP_EXT_ELEMENT"("ELEM_IDX","NUM_ATTRB","ATTRB1_NAME","ATTRB1_VAL","ATTRB2_NAME","ATTRB2_VAL","ATTRB3_NAME","ATTRB3_VAL","ATTRB4_NAME","ATTRB4_VAL","ATTRB5_NAME","ATTRB5_VAL") AS 
select "ELEM_IDX","NUM_ATTRB","ATTRB1_NAME","ATTRB1_VAL","ATTRB2_NAME","ATTRB2_VAL","ATTRB3_NAME","ATTRB3_VAL","ATTRB4_NAME","ATTRB4_VAL","ATTRB5_NAME","ATTRB5_VAL" from v$map_ext_element;

CREATE OR REPLACE FORCE VIEW "V_$MAP_FILE"("FILE_MAP_IDX","FILE_CFGID","FILE_STATUS","FILE_NAME","FILE_TYPE","FILE_STRUCTURE","FILE_SIZE","FILE_NEXTS","LIB_IDX") AS 
select "FILE_MAP_IDX","FILE_CFGID","FILE_STATUS","FILE_NAME","FILE_TYPE","FILE_STRUCTURE","FILE_SIZE","FILE_NEXTS","LIB_IDX" from v$map_file;

CREATE OR REPLACE FORCE VIEW "V_$MAP_FILE_EXTENT"("FILE_MAP_IDX","EXT_NUM","EXT_ELEM_OFF","EXT_SIZE","EXT_FILE_OFF","EXT_TYPE","ELEM_IDX") AS 
select "FILE_MAP_IDX","EXT_NUM","EXT_ELEM_OFF","EXT_SIZE","EXT_FILE_OFF","EXT_TYPE","ELEM_IDX" from v$map_file_extent;

CREATE OR REPLACE FORCE VIEW "V_$MAP_FILE_IO_STACK"("FILE_MAP_IDX","DEPTH","ELEM_IDX","CU_SIZE","STRIDE","NUM_CU","ELEM_OFFSET","FILE_OFFSET","DATA_TYPE","PARITY_POS","PARITY_PERIOD","ID","PARENT_ID") AS 
select "FILE_MAP_IDX","DEPTH","ELEM_IDX","CU_SIZE","STRIDE","NUM_CU","ELEM_OFFSET","FILE_OFFSET","DATA_TYPE","PARITY_POS","PARITY_PERIOD","ID","PARENT_ID" from v$map_file_io_stack;

CREATE OR REPLACE FORCE VIEW "V_$MAP_LIBRARY"("LIB_IDX","LIB_NAME","VENDOR_NAME","PROTOCOL_NUM","VERSION_NUM","PATH_NAME","MAP_FILE","FILE_CFGID","MAP_ELEM","ELEM_CFGID","MAP_SYNC") AS 
select "LIB_IDX","LIB_NAME","VENDOR_NAME","PROTOCOL_NUM","VERSION_NUM","PATH_NAME","MAP_FILE","FILE_CFGID","MAP_ELEM","ELEM_CFGID","MAP_SYNC" from v$map_library;

CREATE OR REPLACE FORCE VIEW "V_$MAP_SUBELEMENT"("CHILD_IDX","PARENT_IDX","SUB_NUM","SUB_SIZE","ELEM_OFFSET","SUB_FLAGS") AS 
select "CHILD_IDX","PARENT_IDX","SUB_NUM","SUB_SIZE","ELEM_OFFSET","SUB_FLAGS" from v$map_subelement;

CREATE OR REPLACE FORCE VIEW "V_$MAX_ACTIVE_SESS_TARGET_MTH"("NAME") AS 
select "NAME" from v$max_active_sess_target_mth;

CREATE OR REPLACE FORCE VIEW "V_$METRIC"("BEGIN_TIME","END_TIME","INTSIZE_CSEC","GROUP_ID","ENTITY_ID","ENTITY_SEQUENCE","METRIC_ID","METRIC_NAME","VALUE","METRIC_UNIT") AS 
select "BEGIN_TIME","END_TIME","INTSIZE_CSEC","GROUP_ID","ENTITY_ID","ENTITY_SEQUENCE","METRIC_ID","METRIC_NAME","VALUE","METRIC_UNIT" from v$metric;

CREATE OR REPLACE FORCE VIEW "V_$METRICGROUP"("GROUP_ID","NAME","INTERVAL_SIZE","MAX_INTERVAL") AS 
select "GROUP_ID","NAME","INTERVAL_SIZE","MAX_INTERVAL" from v$metricgroup;

CREATE OR REPLACE FORCE VIEW "V_$METRICNAME"("GROUP_ID","GROUP_NAME","METRIC_ID","METRIC_NAME","METRIC_UNIT") AS 
select "GROUP_ID","GROUP_NAME","METRIC_ID","METRIC_NAME","METRIC_UNIT" from v$metricname;

CREATE OR REPLACE FORCE VIEW "V_$METRIC_HISTORY"("BEGIN_TIME","END_TIME","INTSIZE_CSEC","GROUP_ID","ENTITY_ID","ENTITY_SEQUENCE","METRIC_ID","METRIC_NAME","VALUE","METRIC_UNIT") AS 
select "BEGIN_TIME","END_TIME","INTSIZE_CSEC","GROUP_ID","ENTITY_ID","ENTITY_SEQUENCE","METRIC_ID","METRIC_NAME","VALUE","METRIC_UNIT" from v$metric_history;

CREATE OR REPLACE FORCE VIEW "V_$MTTR_TARGET_ADVICE"("MTTR_TARGET_FOR_ESTIMATE","ADVICE_STATUS","DIRTY_LIMIT","ESTD_CACHE_WRITES","ESTD_CACHE_WRITE_FACTOR","ESTD_TOTAL_WRITES","ESTD_TOTAL_WRITE_FACTOR","ESTD_TOTAL_IOS","ESTD_TOTAL_IO_FACTOR") AS 
select "MTTR_TARGET_FOR_ESTIMATE","ADVICE_STATUS","DIRTY_LIMIT","ESTD_CACHE_WRITES","ESTD_CACHE_WRITE_FACTOR","ESTD_TOTAL_WRITES","ESTD_TOTAL_WRITE_FACTOR","ESTD_TOTAL_IOS","ESTD_TOTAL_IO_FACTOR" from
   v$mttr_target_advice;

CREATE OR REPLACE FORCE VIEW "V_$MVREFRESH"("SID","SERIAL#","CURRMVOWNER","CURRMVNAME") AS 
select "SID","SERIAL#","CURRMVOWNER","CURRMVNAME" from v$mvrefresh;

CREATE OR REPLACE FORCE VIEW "V_$MYSTAT"("SID","STATISTIC#","VALUE") AS 
select "SID","STATISTIC#","VALUE" from v$mystat;

CREATE OR REPLACE FORCE VIEW "V_$NLS_PARAMETERS"("PARAMETER","VALUE") AS 
select "PARAMETER","VALUE" from v$nls_parameters;

CREATE OR REPLACE FORCE VIEW "V_$NLS_VALID_VALUES"("PARAMETER","VALUE") AS 
select "PARAMETER","VALUE" from v$nls_valid_values;

CREATE OR REPLACE FORCE VIEW "V_$OBJECT_DEPENDENCY"("FROM_ADDRESS","FROM_HASH","TO_OWNER","TO_NAME","TO_ADDRESS","TO_HASH","TO_TYPE") AS 
select "FROM_ADDRESS","FROM_HASH","TO_OWNER","TO_NAME","TO_ADDRESS","TO_HASH","TO_TYPE" from v$object_dependency;

CREATE OR REPLACE FORCE VIEW "V_$OBSOLETE_PARAMETER"("NAME","ISSPECIFIED") AS 
select "NAME","ISSPECIFIED" from v$obsolete_parameter;

CREATE OR REPLACE FORCE VIEW "V_$OFFLINE_RANGE"("RECID","STAMP","FILE#","OFFLINE_CHANGE#","ONLINE_CHANGE#","ONLINE_TIME","RESETLOGS_CHANGE#","RESETLOGS_TIME") AS 
select "RECID","STAMP","FILE#","OFFLINE_CHANGE#","ONLINE_CHANGE#","ONLINE_TIME","RESETLOGS_CHANGE#","RESETLOGS_TIME" from v$offline_range;

CREATE OR REPLACE FORCE VIEW "V_$OPEN_CURSOR"("SADDR","SID","USER_NAME","ADDRESS","HASH_VALUE","SQL_ID","SQL_TEXT") AS 
select "SADDR","SID","USER_NAME","ADDRESS","HASH_VALUE","SQL_ID","SQL_TEXT" from v$open_cursor;

CREATE OR REPLACE FORCE VIEW "V_$OPTION"("PARAMETER","VALUE") AS 
select "PARAMETER","VALUE" from v$option;

CREATE OR REPLACE FORCE VIEW "V_$OSSTAT"("STAT_NAME","VALUE","OSSTAT_ID") AS 
select "STAT_NAME","VALUE","OSSTAT_ID" from v$osstat;

CREATE OR REPLACE FORCE VIEW "V_$PARALLEL_DEGREE_LIMIT_MTH"("NAME") AS 
select "NAME" from v$parallel_degree_limit_mth;

CREATE OR REPLACE FORCE VIEW "V_$PARAMETER"("NUM","NAME","TYPE","VALUE","DISPLAY_VALUE","ISDEFAULT","ISSES_MODIFIABLE","ISSYS_MODIFIABLE","ISINSTANCE_MODIFIABLE","ISMODIFIED","ISADJUSTED","ISDEPRECATED","DESCRIPTION","UPDATE_COMMENT","HASH") AS 
select "NUM","NAME","TYPE","VALUE","DISPLAY_VALUE","ISDEFAULT","ISSES_MODIFIABLE","ISSYS_MODIFIABLE","ISINSTANCE_MODIFIABLE","ISMODIFIED","ISADJUSTED","ISDEPRECATED","DESCRIPTION","UPDATE_COMMENT","HASH" from v$parameter;

CREATE OR REPLACE FORCE VIEW "V_$PARAMETER2"("NUM","NAME","TYPE","VALUE","DISPLAY_VALUE","ISDEFAULT","ISSES_MODIFIABLE","ISSYS_MODIFIABLE","ISINSTANCE_MODIFIABLE","ISMODIFIED","ISADJUSTED","ISDEPRECATED","DESCRIPTION","ORDINAL","UPDATE_COMMENT") AS 
select "NUM","NAME","TYPE","VALUE","DISPLAY_VALUE","ISDEFAULT","ISSES_MODIFIABLE","ISSYS_MODIFIABLE","ISINSTANCE_MODIFIABLE","ISMODIFIED","ISADJUSTED","ISDEPRECATED","DESCRIPTION","ORDINAL","UPDATE_COMMENT" from v$parameter2;

CREATE OR REPLACE FORCE VIEW "V_$PGASTAT"("NAME","VALUE","UNIT") AS 
select "NAME","VALUE","UNIT" from v$pgastat;

CREATE OR REPLACE FORCE VIEW "V_$PGA_TARGET_ADVICE"("PGA_TARGET_FOR_ESTIMATE","PGA_TARGET_FACTOR","ADVICE_STATUS","BYTES_PROCESSED","ESTD_EXTRA_BYTES_RW","ESTD_PGA_CACHE_HIT_PERCENTAGE","ESTD_OVERALLOC_COUNT") AS 
select "PGA_TARGET_FOR_ESTIMATE","PGA_TARGET_FACTOR","ADVICE_STATUS","BYTES_PROCESSED","ESTD_EXTRA_BYTES_RW","ESTD_PGA_CACHE_HIT_PERCENTAGE","ESTD_OVERALLOC_COUNT" from v$pga_target_advice;

CREATE OR REPLACE FORCE VIEW "V_$PGA_TARGET_ADVICE_HISTOGRAM"("PGA_TARGET_FOR_ESTIMATE","PGA_TARGET_FACTOR","ADVICE_STATUS","LOW_OPTIMAL_SIZE","HIGH_OPTIMAL_SIZE","ESTD_OPTIMAL_EXECUTIONS","ESTD_ONEPASS_EXECUTIONS","ESTD_MULTIPASSES_EXECUTIONS","ESTD_TOTAL_EXECUTIONS","IGNORED_WORKAREAS_COUNT") AS 
select "PGA_TARGET_FOR_ESTIMATE","PGA_TARGET_FACTOR","ADVICE_STATUS","LOW_OPTIMAL_SIZE","HIGH_OPTIMAL_SIZE","ESTD_OPTIMAL_EXECUTIONS","ESTD_ONEPASS_EXECUTIONS","ESTD_MULTIPASSES_EXECUTIONS","ESTD_TOTAL_EXECUTIONS","IGNORED_WORKAREAS_COUNT" from v$pga_target_advice_histogram;

CREATE OR REPLACE FORCE VIEW "V_$PQ_SESSTAT"("STATISTIC","LAST_QUERY","SESSION_TOTAL") AS 
select "STATISTIC","LAST_QUERY","SESSION_TOTAL" from v$pq_sesstat;

CREATE OR REPLACE FORCE VIEW "V_$PQ_SLAVE"("SLAVE_NAME","STATUS","SESSIONS","IDLE_TIME_CUR","BUSY_TIME_CUR","CPU_SECS_CUR","MSGS_SENT_CUR","MSGS_RCVD_CUR","IDLE_TIME_TOTAL","BUSY_TIME_TOTAL","CPU_SECS_TOTAL","MSGS_SENT_TOTAL","MSGS_RCVD_TOTAL") AS 
select "SLAVE_NAME","STATUS","SESSIONS","IDLE_TIME_CUR","BUSY_TIME_CUR","CPU_SECS_CUR","MSGS_SENT_CUR","MSGS_RCVD_CUR","IDLE_TIME_TOTAL","BUSY_TIME_TOTAL","CPU_SECS_TOTAL","MSGS_SENT_TOTAL","MSGS_RCVD_TOTAL" from v$pq_slave;

CREATE OR REPLACE FORCE VIEW "V_$PQ_SYSSTAT"("STATISTIC","VALUE") AS 
select "STATISTIC","VALUE" from v$pq_sysstat;

CREATE OR REPLACE FORCE VIEW "V_$PQ_TQSTAT"("DFO_NUMBER","TQ_ID","SERVER_TYPE","NUM_ROWS","BYTES","OPEN_TIME","AVG_LATENCY","WAITS","TIMEOUTS","PROCESS","INSTANCE") AS 
select "DFO_NUMBER","TQ_ID","SERVER_TYPE","NUM_ROWS","BYTES","OPEN_TIME","AVG_LATENCY","WAITS","TIMEOUTS","PROCESS","INSTANCE" from v$pq_tqstat;

CREATE OR REPLACE FORCE VIEW "V_$PROCESS"("ADDR","PID","SPID","USERNAME","SERIAL#","TERMINAL","PROGRAM","TRACEID","BACKGROUND","LATCHWAIT","LATCHSPIN","PGA_USED_MEM","PGA_ALLOC_MEM","PGA_FREEABLE_MEM","PGA_MAX_MEM") AS 
select "ADDR","PID","SPID","USERNAME","SERIAL#","TERMINAL","PROGRAM","TRACEID","BACKGROUND","LATCHWAIT","LATCHSPIN","PGA_USED_MEM","PGA_ALLOC_MEM","PGA_FREEABLE_MEM","PGA_MAX_MEM" from v$process;

CREATE OR REPLACE FORCE VIEW "V_$PROPAGATION_RECEIVER"("SRC_QUEUE_NAME","SRC_DBNAME","STARTUP_TIME","HIGH_WATER_MARK","ACKNOWLEDGEMENT","ELAPSED_UNPICKLE_TIME","ELAPSED_RULE_TIME","ELAPSED_ENQUEUE_TIME") AS 
select "SRC_QUEUE_NAME","SRC_DBNAME","STARTUP_TIME","HIGH_WATER_MARK","ACKNOWLEDGEMENT","ELAPSED_UNPICKLE_TIME","ELAPSED_RULE_TIME","ELAPSED_ENQUEUE_TIME" from v$propagation_receiver;

CREATE OR REPLACE FORCE VIEW "V_$PROPAGATION_SENDER"("QUEUE_ID","QUEUE_SCHEMA","QUEUE_NAME","DBLINK","HIGH_WATER_MARK","ACKNOWLEDGEMENT","SCHEDULE_STATUS","TOTAL_MSGS","TOTAL_BYTES","ELAPSED_DEQUEUE_TIME","ELAPSED_PICKLE_TIME","ELAPSED_PROPAGATION_TIME") AS 
select "QUEUE_ID","QUEUE_SCHEMA","QUEUE_NAME","DBLINK","HIGH_WATER_MARK","ACKNOWLEDGEMENT","SCHEDULE_STATUS","TOTAL_MSGS","TOTAL_BYTES","ELAPSED_DEQUEUE_TIME","ELAPSED_PICKLE_TIME","ELAPSED_PROPAGATION_TIME" from v$propagation_sender;

CREATE OR REPLACE FORCE VIEW "V_$PROXY_ARCHIVEDLOG"("RECID","STAMP","DEVICE_TYPE","HANDLE","COMMENTS","MEDIA","MEDIA_POOL","TAG","STATUS","DELETED","THREAD#","SEQUENCE#","RESETLOGS_CHANGE#","RESETLOGS_TIME","FIRST_CHANGE#","FIRST_TIME","NEXT_CHANGE#","NEXT_TIME","BLOCKS","BLOCK_SIZE","START_TIME","COMPLETION_TIME","ELAPSED_SECONDS","RMAN_STATUS_RECID","RMAN_STATUS_STAMP") AS 
select "RECID","STAMP","DEVICE_TYPE","HANDLE","COMMENTS","MEDIA","MEDIA_POOL","TAG","STATUS","DELETED","THREAD#","SEQUENCE#","RESETLOGS_CHANGE#","RESETLOGS_TIME","FIRST_CHANGE#","FIRST_TIME","NEXT_CHANGE#","NEXT_TIME","BLOCKS","BLOCK_SIZE","START_TIME","COMPLETION_TIME","ELAPSED_SECONDS","RMAN_STATUS_RECID","RMAN_STATUS_STAMP" from v$proxy_archivedlog;

CREATE OR REPLACE FORCE VIEW "V_$PROXY_DATAFILE"("RECID","STAMP","DEVICE_TYPE","HANDLE","COMMENTS","MEDIA","MEDIA_POOL","TAG","STATUS","DELETED","FILE#","CREATION_CHANGE#","CREATION_TIME","RESETLOGS_CHANGE#","RESETLOGS_TIME","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","ABSOLUTE_FUZZY_CHANGE#","RECOVERY_FUZZY_CHANGE#","RECOVERY_FUZZY_TIME","INCREMENTAL_LEVEL","ONLINE_FUZZY","BACKUP_FUZZY","BLOCKS","BLOCK_SIZE","OLDEST_OFFLINE_RANGE","START_TIME","COMPLETION_TIME","ELAPSED_SECONDS","CONTROLFILE_TYPE","KEEP","KEEP_UNTIL","KEEP_OPTIONS","RMAN_STATUS_RECID","RMAN_STATUS_STAMP") AS 
select "RECID","STAMP","DEVICE_TYPE","HANDLE","COMMENTS","MEDIA","MEDIA_POOL","TAG","STATUS","DELETED","FILE#","CREATION_CHANGE#","CREATION_TIME","RESETLOGS_CHANGE#","RESETLOGS_TIME","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","ABSOLUTE_FUZZY_CHANGE#","RECOVERY_FUZZY_CHANGE#","RECOVERY_FUZZY_TIME","INCREMENTAL_LEVEL","ONLINE_FUZZY","BACKUP_FUZZY","BLOCKS","BLOCK_SIZE","OLDEST_OFFLINE_RANGE","START_TIME","COMPLETION_TIME","ELAPSED_SECONDS","CONTROLFILE_TYPE","KEEP","KEEP_UNTIL","KEEP_OPTIONS","RMAN_STATUS_RECID","RMAN_STATUS_STAMP" from v$proxy_datafile;

CREATE OR REPLACE FORCE VIEW "V_$PWFILE_USERS"("USERNAME","SYSDBA","SYSOPER") AS 
select "USERNAME","SYSDBA","SYSOPER" from v$pwfile_users;

CREATE OR REPLACE FORCE VIEW "V_$PX_BUFFER_ADVICE"("STATISTIC","VALUE") AS 
select "STATISTIC","VALUE" from v$px_buffer_advice;

CREATE OR REPLACE FORCE VIEW "V_$PX_PROCESS"("SERVER_NAME","STATUS","PID","SPID","SID","SERIAL#") AS 
select "SERVER_NAME","STATUS","PID","SPID","SID","SERIAL#" from v$px_process;

CREATE OR REPLACE FORCE VIEW "V_$PX_PROCESS_SYSSTAT"("STATISTIC","VALUE") AS 
select "STATISTIC","VALUE" from v$px_process_sysstat;

CREATE OR REPLACE FORCE VIEW "V_$PX_SESSION"("SADDR","SID","SERIAL#","QCSID","QCSERIAL#","QCINST_ID","SERVER_GROUP","SERVER_SET","SERVER#","DEGREE","REQ_DEGREE") AS 
select "SADDR","SID","SERIAL#","QCSID","QCSERIAL#","QCINST_ID","SERVER_GROUP","SERVER_SET","SERVER#","DEGREE","REQ_DEGREE" from v$px_session;

CREATE OR REPLACE FORCE VIEW "V_$PX_SESSTAT"("SADDR","SID","SERIAL#","QCSID","QCSERIAL#","QCINST_ID","SERVER_GROUP","SERVER_SET","SERVER#","DEGREE","REQ_DEGREE","STATISTIC#","VALUE") AS 
select "SADDR","SID","SERIAL#","QCSID","QCSERIAL#","QCINST_ID","SERVER_GROUP","SERVER_SET","SERVER#","DEGREE","REQ_DEGREE","STATISTIC#","VALUE" from v$px_sesstat;

CREATE OR REPLACE FORCE VIEW "V_$QUEUE"("PADDR","TYPE","QUEUED","WAIT","TOTALQ") AS 
select "PADDR","TYPE","QUEUED","WAIT","TOTALQ" from v$queue;

CREATE OR REPLACE FORCE VIEW "V_$QUEUEING_MTH"("NAME") AS 
select "NAME" from v$queueing_mth;

CREATE OR REPLACE FORCE VIEW "V_$RECOVERY_FILE_DEST"("NAME","SPACE_LIMIT","SPACE_USED","SPACE_RECLAIMABLE","NUMBER_OF_FILES") AS 
select "NAME","SPACE_LIMIT","SPACE_USED","SPACE_RECLAIMABLE","NUMBER_OF_FILES" from
   v$recovery_file_dest;

CREATE OR REPLACE FORCE VIEW "V_$RECOVERY_FILE_STATUS"("FILENUM","FILENAME","STATUS") AS 
select "FILENUM","FILENAME","STATUS" from v$recovery_file_status;

CREATE OR REPLACE FORCE VIEW "V_$RECOVERY_LOG"("THREAD#","SEQUENCE#","TIME","ARCHIVE_NAME") AS 
select "THREAD#","SEQUENCE#","TIME","ARCHIVE_NAME" from v$recovery_log;

CREATE OR REPLACE FORCE VIEW "V_$RECOVERY_PROGRESS"("TYPE","ITEM","SOFAR","TOTAL") AS 
select "TYPE","ITEM","SOFAR","TOTAL" from v$recovery_progress;

CREATE OR REPLACE FORCE VIEW "V_$RECOVERY_STATUS"("RECOVERY_CHECKPOINT","THREAD","SEQUENCE_NEEDED","SCN_NEEDED","TIME_NEEDED","PREVIOUS_LOG_NAME","PREVIOUS_LOG_STATUS","REASON") AS 
select "RECOVERY_CHECKPOINT","THREAD","SEQUENCE_NEEDED","SCN_NEEDED","TIME_NEEDED","PREVIOUS_LOG_NAME","PREVIOUS_LOG_STATUS","REASON" from v$recovery_status;

CREATE OR REPLACE FORCE VIEW "V_$RECOVER_FILE"("FILE#","ONLINE","ONLINE_STATUS","ERROR","CHANGE#","TIME") AS 
select "FILE#","ONLINE","ONLINE_STATUS","ERROR","CHANGE#","TIME" from v$recover_file;

CREATE OR REPLACE FORCE VIEW "V_$REPLPROP"("SID","SERIAL#","NAME","DBLINK","STATE","XID","SEQUENCE") AS 
select "SID","SERIAL#","NAME","DBLINK","STATE","XID","SEQUENCE" from v$replprop;

CREATE OR REPLACE FORCE VIEW "V_$REPLQUEUE"("TXNS_ENQUEUED","CALLS_ENQUEUED","TXNS_PURGED","LAST_ENQUEUE_TIME","LAST_PURGE_TIME") AS 
select "TXNS_ENQUEUED","CALLS_ENQUEUED","TXNS_PURGED","LAST_ENQUEUE_TIME","LAST_PURGE_TIME" from v$replqueue;

CREATE OR REPLACE FORCE VIEW "V_$REQDIST"("BUCKET","COUNT") AS 
select "BUCKET","COUNT" from v$reqdist;

CREATE OR REPLACE FORCE VIEW "V_$RESERVED_WORDS"("KEYWORD","LENGTH") AS 
select "KEYWORD","LENGTH" from v$reserved_words;

CREATE OR REPLACE FORCE VIEW "V_$RESOURCE"("ADDR","TYPE","ID1","ID2") AS 
select "ADDR","TYPE","ID1","ID2" from v$resource;

CREATE OR REPLACE FORCE VIEW "V_$RESOURCE_LIMIT"("RESOURCE_NAME","CURRENT_UTILIZATION","MAX_UTILIZATION","INITIAL_ALLOCATION","LIMIT_VALUE") AS 
select "RESOURCE_NAME","CURRENT_UTILIZATION","MAX_UTILIZATION","INITIAL_ALLOCATION","LIMIT_VALUE" from v$resource_limit;

CREATE OR REPLACE FORCE VIEW "V_$RESUMABLE"("ADDR","SID","ENABLED","STATUS","TIMEOUT","SUSPEND_TIME","RESUME_TIME","NAME","ERROR_NUMBER","ERROR_PARAMETER1","ERROR_PARAMETER2","ERROR_PARAMETER3","ERROR_PARAMETER4","ERROR_PARAMETER5","ERROR_MSG") AS 
select "ADDR","SID","ENABLED","STATUS","TIMEOUT","SUSPEND_TIME","RESUME_TIME","NAME","ERROR_NUMBER","ERROR_PARAMETER1","ERROR_PARAMETER2","ERROR_PARAMETER3","ERROR_PARAMETER4","ERROR_PARAMETER5","ERROR_MSG" from v$resumable;

CREATE OR REPLACE FORCE VIEW "V_$RMAN_CONFIGURATION"("CONF#","NAME","VALUE") AS 
select "CONF#","NAME","VALUE" from v$rman_configuration;

CREATE OR REPLACE FORCE VIEW "V_$RMAN_OUTPUT"("SID","RECID","STAMP","SESSION_RECID","SESSION_STAMP","OUTPUT") AS 
select "SID","RECID","STAMP","SESSION_RECID","SESSION_STAMP","OUTPUT" from v$rman_output;

CREATE OR REPLACE FORCE VIEW "V_$RMAN_STATUS"("SID","RECID","STAMP","PARENT_RECID","PARENT_STAMP","SESSION_RECID","SESSION_STAMP","ROW_LEVEL","ROW_TYPE","COMMAND_ID","OPERATION","STATUS","MBYTES_PROCESSED","START_TIME","END_TIME") AS 
select "SID","RECID","STAMP","PARENT_RECID","PARENT_STAMP","SESSION_RECID","SESSION_STAMP","ROW_LEVEL","ROW_TYPE","COMMAND_ID","OPERATION","STATUS","MBYTES_PROCESSED","START_TIME","END_TIME" from v$rman_status;

CREATE OR REPLACE FORCE VIEW "V_$ROLLNAME"("USN","NAME") AS 
select x$kturd.kturdusn usn,undo$.name
   from x$kturd, undo$
   where x$kturd.kturdusn=undo$.us# and x$kturd.kturdsiz!=0;

CREATE OR REPLACE FORCE VIEW "V_$ROLLSTAT"("USN","LATCH","EXTENTS","RSSIZE","WRITES","XACTS","GETS","WAITS","OPTSIZE","HWMSIZE","SHRINKS","WRAPS","EXTENDS","AVESHRINK","AVEACTIVE","STATUS","CUREXT","CURBLK") AS 
select "USN","LATCH","EXTENTS","RSSIZE","WRITES","XACTS","GETS","WAITS","OPTSIZE","HWMSIZE","SHRINKS","WRAPS","EXTENDS","AVESHRINK","AVEACTIVE","STATUS","CUREXT","CURBLK" from v$rollstat;

CREATE OR REPLACE FORCE VIEW "V_$ROWCACHE"("CACHE#","TYPE","SUBORDINATE#","PARAMETER","COUNT","USAGE","FIXED","GETS","GETMISSES","SCANS","SCANMISSES","SCANCOMPLETES","MODIFICATIONS","FLUSHES","DLM_REQUESTS","DLM_CONFLICTS","DLM_RELEASES") AS 
select "CACHE#","TYPE","SUBORDINATE#","PARAMETER","COUNT","USAGE","FIXED","GETS","GETMISSES","SCANS","SCANMISSES","SCANCOMPLETES","MODIFICATIONS","FLUSHES","DLM_REQUESTS","DLM_CONFLICTS","DLM_RELEASES" from v$rowcache;

CREATE OR REPLACE FORCE VIEW "V_$ROWCACHE_PARENT"("INDX","HASH","ADDRESS","CACHE#","CACHE_NAME","EXISTENT","LOCK_MODE","LOCK_REQUEST","TXN","SADDR","INST_LOCK_REQUEST","INST_LOCK_RELEASE","INST_LOCK_TYPE","INST_LOCK_ID1","INST_LOCK_ID2","KEY") AS 
select "INDX","HASH","ADDRESS","CACHE#","CACHE_NAME","EXISTENT","LOCK_MODE","LOCK_REQUEST","TXN","SADDR","INST_LOCK_REQUEST","INST_LOCK_RELEASE","INST_LOCK_TYPE","INST_LOCK_ID1","INST_LOCK_ID2","KEY" from v$rowcache_parent;

CREATE OR REPLACE FORCE VIEW "V_$ROWCACHE_SUBORDINATE"("INDX","HASH","ADDRESS","CACHE#","SUBCACHE#","SUBCACHE_NAME","EXISTENT","PARENT","KEY") AS 
select "INDX","HASH","ADDRESS","CACHE#","SUBCACHE#","SUBCACHE_NAME","EXISTENT","PARENT","KEY" from v$rowcache_subordinate;

CREATE OR REPLACE FORCE VIEW "V_$RSRC_CONSUMER_GROUP"("NAME","ACTIVE_SESSIONS","EXECUTION_WAITERS","REQUESTS","CPU_WAIT_TIME","CPU_WAITS","CONSUMED_CPU_TIME","YIELDS","QUEUE_LENGTH","CURRENT_UNDO_CONSUMPTION") AS 
select "NAME","ACTIVE_SESSIONS","EXECUTION_WAITERS","REQUESTS","CPU_WAIT_TIME","CPU_WAITS","CONSUMED_CPU_TIME","YIELDS","QUEUE_LENGTH","CURRENT_UNDO_CONSUMPTION" from v$rsrc_consumer_group;

CREATE OR REPLACE FORCE VIEW "V_$RSRC_CONSUMER_GROUP_CPU_MTH"("NAME") AS 
select "NAME" from v$rsrc_consumer_group_cpu_mth;

CREATE OR REPLACE FORCE VIEW "V_$RSRC_PLAN"("NAME","IS_TOP_PLAN") AS 
select "NAME","IS_TOP_PLAN" from v$rsrc_plan;

CREATE OR REPLACE FORCE VIEW "V_$RSRC_PLAN_CPU_MTH"("NAME") AS 
select "NAME" from v$rsrc_plan_cpu_mth;

CREATE OR REPLACE FORCE VIEW "V_$RULE"("RULE_SET_OBJECT_ID","EVALUATION_CONTEXT_OBJECT_ID","RULE_OWNER","RULE_NAME","RULE_CONDITION","TRUE_HITS","MAYBE_HITS","SQL_EVALUATIONS") AS 
select "RULE_SET_OBJECT_ID","EVALUATION_CONTEXT_OBJECT_ID","RULE_OWNER","RULE_NAME","RULE_CONDITION","TRUE_HITS","MAYBE_HITS","SQL_EVALUATIONS" from v$rule;

CREATE OR REPLACE FORCE VIEW "V_$RULE_SET"("OWNER","NAME","CPU_TIME","ELAPSED_TIME","FIRST_LOAD_TIME","LAST_LOAD_TIME","LAST_LOADING_TIME","SHARABLE_MEM","RELOADS","INVALIDATIONS","EVALUATIONS","FIRST_HIT_EVALUATIONS","SIMPLE_RULES_ONLY_EVALUATIONS","SQL_FREE_EVALUATIONS","SQL_EXECUTIONS","CONDITIONS_PROCESSED","TRUE_RULES","MAYBE_RULES","VARIABLE_VALUE_FUNCTION_CALLS","VARIABLE_METHOD_FUNCTION_CALLS","EVALUATION_FUNCTION_CALLS") AS 
select "OWNER","NAME","CPU_TIME","ELAPSED_TIME","FIRST_LOAD_TIME","LAST_LOAD_TIME","LAST_LOADING_TIME","SHARABLE_MEM","RELOADS","INVALIDATIONS","EVALUATIONS","FIRST_HIT_EVALUATIONS","SIMPLE_RULES_ONLY_EVALUATIONS","SQL_FREE_EVALUATIONS","SQL_EXECUTIONS","CONDITIONS_PROCESSED","TRUE_RULES","MAYBE_RULES","VARIABLE_VALUE_FUNCTION_CALLS","VARIABLE_METHOD_FUNCTION_CALLS","EVALUATION_FUNCTION_CALLS" from v$rule_set;

CREATE OR REPLACE FORCE VIEW "V_$RULE_SET_AGGREGATE_STATS"("NAME","VALUE") AS 
select "NAME","VALUE" from v$rule_set_aggregate_stats;

CREATE OR REPLACE FORCE VIEW "V_$SCHEDULER_RUNNING_JOBS"("SESSION_ID","SESSION_SERIAL_NUM","JOB_ID","PROCESS_ID","SESSION_STAT_CPU") AS 
select "SESSION_ID","SESSION_SERIAL_NUM","JOB_ID","PROCESS_ID","SESSION_STAT_CPU" from v$scheduler_running_jobs;

CREATE OR REPLACE FORCE VIEW "V_$SEGMENT_STATISTICS"("OWNER","OBJECT_NAME","SUBOBJECT_NAME","TABLESPACE_NAME","TS#","OBJ#","DATAOBJ#","OBJECT_TYPE","STATISTIC_NAME","STATISTIC#","VALUE") AS 
select "OWNER","OBJECT_NAME","SUBOBJECT_NAME","TABLESPACE_NAME","TS#","OBJ#","DATAOBJ#","OBJECT_TYPE","STATISTIC_NAME","STATISTIC#","VALUE" from v$segment_statistics;

CREATE OR REPLACE FORCE VIEW "V_$SEGSTAT"("TS#","OBJ#","DATAOBJ#","STATISTIC_NAME","STATISTIC#","VALUE") AS 
select "TS#","OBJ#","DATAOBJ#","STATISTIC_NAME","STATISTIC#","VALUE" from v$segstat;

CREATE OR REPLACE FORCE VIEW "V_$SEGSTAT_NAME"("STATISTIC#","NAME","SAMPLED") AS 
select "STATISTIC#","NAME","SAMPLED" from v$segstat_name;

CREATE OR REPLACE FORCE VIEW "V_$SERVICEMETRIC"("BEGIN_TIME","END_TIME","INTSIZE_CSEC","GROUP_ID","SERVICE_NAME_HASH","SERVICE_NAME","CTMHASH","ELAPSEDPERCALL","CPUPERCALL") AS 
select "BEGIN_TIME","END_TIME","INTSIZE_CSEC","GROUP_ID","SERVICE_NAME_HASH","SERVICE_NAME","CTMHASH","ELAPSEDPERCALL","CPUPERCALL" from v$servicemetric;

CREATE OR REPLACE FORCE VIEW "V_$SERVICEMETRIC_HISTORY"("BEGIN_TIME","END_TIME","INTSIZE_CSEC","GROUP_ID","SERVICE_NAME_HASH","SERVICE_NAME","CTMHASH","ELAPSEDPERCALL","CPUPERCALL") AS 
select "BEGIN_TIME","END_TIME","INTSIZE_CSEC","GROUP_ID","SERVICE_NAME_HASH","SERVICE_NAME","CTMHASH","ELAPSEDPERCALL","CPUPERCALL" from v$servicemetric_history;

CREATE OR REPLACE FORCE VIEW "V_$SERVICES"("SERVICE_ID","NAME","NAME_HASH","NETWORK_NAME","CREATION_DATE","CREATION_DATE_HASH") AS 
select "SERVICE_ID","NAME","NAME_HASH","NETWORK_NAME","CREATION_DATE","CREATION_DATE_HASH" from v$services;

CREATE OR REPLACE FORCE VIEW "V_$SERVICE_EVENT"("SERVICE_NAME","SERVICE_NAME_HASH","EVENT","EVENT_ID","TOTAL_WAITS","TOTAL_TIMEOUTS","TIME_WAITED","AVERAGE_WAIT","MAX_WAIT","TIME_WAITED_MICRO") AS 
select "SERVICE_NAME","SERVICE_NAME_HASH","EVENT","EVENT_ID","TOTAL_WAITS","TOTAL_TIMEOUTS","TIME_WAITED","AVERAGE_WAIT","MAX_WAIT","TIME_WAITED_MICRO" from v$service_event;

CREATE OR REPLACE FORCE VIEW "V_$SERVICE_STATS"("SERVICE_NAME_HASH","SERVICE_NAME","STAT_ID","STAT_NAME","VALUE") AS 
select "SERVICE_NAME_HASH","SERVICE_NAME","STAT_ID","STAT_NAME","VALUE" from
   v$service_stats;

CREATE OR REPLACE FORCE VIEW "V_$SERVICE_WAIT_CLASS"("SERVICE_NAME","SERVICE_NAME_HASH","WAIT_CLASS_ID","WAIT_CLASS#","WAIT_CLASS","TOTAL_WAITS","TIME_WAITED") AS 
select "SERVICE_NAME","SERVICE_NAME_HASH","WAIT_CLASS_ID","WAIT_CLASS#","WAIT_CLASS","TOTAL_WAITS","TIME_WAITED" from v$service_wait_class;

CREATE OR REPLACE FORCE VIEW "V_$SERV_MOD_ACT_STATS"("AGGREGATION_TYPE","SERVICE_NAME","MODULE","ACTION","STAT_ID","STAT_NAME","VALUE") AS 
select "AGGREGATION_TYPE","SERVICE_NAME","MODULE","ACTION","STAT_ID","STAT_NAME","VALUE" from
   v$serv_mod_act_stats;

CREATE OR REPLACE FORCE VIEW "V_$SESSION"("SADDR","SID","SERIAL#","AUDSID","PADDR","USER#","USERNAME","COMMAND","OWNERID","TADDR","LOCKWAIT","STATUS","SERVER","SCHEMA#","SCHEMANAME","OSUSER","PROCESS","MACHINE","TERMINAL","PROGRAM","TYPE","SQL_ADDRESS","SQL_HASH_VALUE","SQL_ID","SQL_CHILD_NUMBER","PREV_SQL_ADDR","PREV_HASH_VALUE","PREV_SQL_ID","PREV_CHILD_NUMBER","MODULE","MODULE_HASH","ACTION","ACTION_HASH","CLIENT_INFO","FIXED_TABLE_SEQUENCE","ROW_WAIT_OBJ#","ROW_WAIT_FILE#","ROW_WAIT_BLOCK#","ROW_WAIT_ROW#","LOGON_TIME","LAST_CALL_ET","PDML_ENABLED","FAILOVER_TYPE","FAILOVER_METHOD","FAILED_OVER","RESOURCE_CONSUMER_GROUP","PDML_STATUS","PDDL_STATUS","PQ_STATUS","CURRENT_QUEUE_DURATION","CLIENT_IDENTIFIER","BLOCKING_SESSION_STATUS","BLOCKING_SESSION","SEQ#","EVENT#","EVENT","P1TEXT","P1","P1RAW","P2TEXT","P2","P2RAW","P3TEXT","P3","P3RAW","WAIT_CLASS_ID","WAIT_CLASS#","WAIT_CLASS","WAIT_TIME","SECONDS_IN_WAIT","STATE","SERVICE_NAME") AS 
select "SADDR","SID","SERIAL#","AUDSID","PADDR","USER#","USERNAME","COMMAND","OWNERID","TADDR","LOCKWAIT","STATUS","SERVER","SCHEMA#","SCHEMANAME","OSUSER","PROCESS","MACHINE","TERMINAL","PROGRAM","TYPE","SQL_ADDRESS","SQL_HASH_VALUE","SQL_ID","SQL_CHILD_NUMBER","PREV_SQL_ADDR","PREV_HASH_VALUE","PREV_SQL_ID","PREV_CHILD_NUMBER","MODULE","MODULE_HASH","ACTION","ACTION_HASH","CLIENT_INFO","FIXED_TABLE_SEQUENCE","ROW_WAIT_OBJ#","ROW_WAIT_FILE#","ROW_WAIT_BLOCK#","ROW_WAIT_ROW#","LOGON_TIME","LAST_CALL_ET","PDML_ENABLED","FAILOVER_TYPE","FAILOVER_METHOD","FAILED_OVER","RESOURCE_CONSUMER_GROUP","PDML_STATUS","PDDL_STATUS","PQ_STATUS","CURRENT_QUEUE_DURATION","CLIENT_IDENTIFIER","BLOCKING_SESSION_STATUS","BLOCKING_SESSION","SEQ#","EVENT#","EVENT","P1TEXT","P1","P1RAW","P2TEXT","P2","P2RAW","P3TEXT","P3","P3RAW","WAIT_CLASS_ID","WAIT_CLASS#","WAIT_CLASS","WAIT_TIME","SECONDS_IN_WAIT","STATE","SERVICE_NAME" from v$session;

CREATE OR REPLACE FORCE VIEW "V_$SESSION_CONNECT_INFO"("SID","AUTHENTICATION_TYPE","OSUSER","NETWORK_SERVICE_BANNER") AS 
select "SID","AUTHENTICATION_TYPE","OSUSER","NETWORK_SERVICE_BANNER" from v$session_connect_info;

CREATE OR REPLACE FORCE VIEW "V_$SESSION_CURSOR_CACHE"("MAXIMUM","COUNT","OPENED_ONCE","OPEN","OPENS","HITS","HIT_RATIO") AS 
select "MAXIMUM","COUNT","OPENED_ONCE","OPEN","OPENS","HITS","HIT_RATIO" from v$session_cursor_cache;

CREATE OR REPLACE FORCE VIEW "V_$SESSION_EVENT"("SID","EVENT","TOTAL_WAITS","TOTAL_TIMEOUTS","TIME_WAITED","AVERAGE_WAIT","MAX_WAIT","TIME_WAITED_MICRO","EVENT_ID") AS 
select "SID","EVENT","TOTAL_WAITS","TOTAL_TIMEOUTS","TIME_WAITED","AVERAGE_WAIT","MAX_WAIT","TIME_WAITED_MICRO","EVENT_ID" from v$session_event;

CREATE OR REPLACE FORCE VIEW "V_$SESSION_LONGOPS"("SID","SERIAL#","OPNAME","TARGET","TARGET_DESC","SOFAR","TOTALWORK","UNITS","START_TIME","LAST_UPDATE_TIME","TIME_REMAINING","ELAPSED_SECONDS","CONTEXT","MESSAGE","USERNAME","SQL_ADDRESS","SQL_HASH_VALUE","SQL_ID","QCSID") AS 
select "SID","SERIAL#","OPNAME","TARGET","TARGET_DESC","SOFAR","TOTALWORK","UNITS","START_TIME","LAST_UPDATE_TIME","TIME_REMAINING","ELAPSED_SECONDS","CONTEXT","MESSAGE","USERNAME","SQL_ADDRESS","SQL_HASH_VALUE","SQL_ID","QCSID" from v$session_longops;

CREATE OR REPLACE FORCE VIEW "V_$SESSION_OBJECT_CACHE"("PINS","HITS","TRUE_HITS","HIT_RATIO","TRUE_HIT_RATIO","OBJECT_REFRESHES","CACHE_REFRESHES","OBJECT_FLUSHES","CACHE_FLUSHES","CACHE_SHRINKS","CACHED_OBJECTS","PINNED_OBJECTS","CACHE_SIZE","OPTIMAL_SIZE","MAXIMUM_SIZE") AS 
select "PINS","HITS","TRUE_HITS","HIT_RATIO","TRUE_HIT_RATIO","OBJECT_REFRESHES","CACHE_REFRESHES","OBJECT_FLUSHES","CACHE_FLUSHES","CACHE_SHRINKS","CACHED_OBJECTS","PINNED_OBJECTS","CACHE_SIZE","OPTIMAL_SIZE","MAXIMUM_SIZE" from v$session_object_cache;

CREATE OR REPLACE FORCE VIEW "V_$SESSION_WAIT"("SID","SEQ#","EVENT","P1TEXT","P1","P1RAW","P2TEXT","P2","P2RAW","P3TEXT","P3","P3RAW","WAIT_CLASS_ID","WAIT_CLASS#","WAIT_CLASS","WAIT_TIME","SECONDS_IN_WAIT","STATE") AS 
select "SID","SEQ#","EVENT","P1TEXT","P1","P1RAW","P2TEXT","P2","P2RAW","P3TEXT","P3","P3RAW","WAIT_CLASS_ID","WAIT_CLASS#","WAIT_CLASS","WAIT_TIME","SECONDS_IN_WAIT","STATE" from v$session_wait;

CREATE OR REPLACE FORCE VIEW "V_$SESSION_WAIT_CLASS"("SID","SERIAL#","WAIT_CLASS_ID","WAIT_CLASS#","WAIT_CLASS","TOTAL_WAITS","TIME_WAITED") AS 
select "SID","SERIAL#","WAIT_CLASS_ID","WAIT_CLASS#","WAIT_CLASS","TOTAL_WAITS","TIME_WAITED" from v$session_wait_class;

CREATE OR REPLACE FORCE VIEW "V_$SESSION_WAIT_HISTORY"("SID","SEQ#","EVENT#","EVENT","P1TEXT","P1","P2TEXT","P2","P3TEXT","P3","WAIT_TIME","WAIT_COUNT") AS 
select "SID","SEQ#","EVENT#","EVENT","P1TEXT","P1","P2TEXT","P2","P3TEXT","P3","WAIT_TIME","WAIT_COUNT" from v$session_wait_history;

CREATE OR REPLACE FORCE VIEW "V_$SESSMETRIC"("BEGIN_TIME","END_TIME","INTSIZE_CSEC","SESSION_ID","SESSION_SERIAL_NUM","CPU","PHYSICAL_READS","PGA_MEMORY","HARD_PARSES","SOFT_PARSES","PHYSICAL_READ_PCT","LOGICAL_READ_PCT") AS 
select "BEGIN_TIME","END_TIME","INTSIZE_CSEC","SESSION_ID","SESSION_SERIAL_NUM","CPU","PHYSICAL_READS","PGA_MEMORY","HARD_PARSES","SOFT_PARSES","PHYSICAL_READ_PCT","LOGICAL_READ_PCT" from v$sessmetric;

CREATE OR REPLACE FORCE VIEW "V_$SESSTAT"("SID","STATISTIC#","VALUE") AS 
select "SID","STATISTIC#","VALUE" from v$sesstat;

CREATE OR REPLACE FORCE VIEW "V_$SESS_IO"("SID","BLOCK_GETS","CONSISTENT_GETS","PHYSICAL_READS","BLOCK_CHANGES","CONSISTENT_CHANGES") AS 
select "SID","BLOCK_GETS","CONSISTENT_GETS","PHYSICAL_READS","BLOCK_CHANGES","CONSISTENT_CHANGES" from sys.v$sess_io;

CREATE OR REPLACE FORCE VIEW "V_$SESS_TIME_MODEL"("SID","STAT_ID","STAT_NAME","VALUE") AS 
select "SID","STAT_ID","STAT_NAME","VALUE" from v$sess_time_model;

CREATE OR REPLACE FORCE VIEW "V_$SES_OPTIMIZER_ENV"("SID","ID","NAME","ISDEFAULT","VALUE") AS 
select "SID","ID","NAME","ISDEFAULT","VALUE" from v$ses_optimizer_env;

CREATE OR REPLACE FORCE VIEW "V_$SGA"("NAME","VALUE") AS 
select "NAME","VALUE" from v$sga;

CREATE OR REPLACE FORCE VIEW "V_$SGAINFO"("NAME","BYTES","RESIZEABLE") AS 
select "NAME","BYTES","RESIZEABLE" from v$sgainfo;

CREATE OR REPLACE FORCE VIEW "V_$SGASTAT"("POOL","NAME","BYTES") AS 
select "POOL","NAME","BYTES" from v$sgastat;

CREATE OR REPLACE FORCE VIEW "V_$SGA_CURRENT_RESIZE_OPS"("COMPONENT","OPER_TYPE","OPER_MODE","PARAMETER","INITIAL_SIZE","TARGET_SIZE","CURRENT_SIZE","START_TIME","LAST_UPDATE_TIME") AS 
select "COMPONENT","OPER_TYPE","OPER_MODE","PARAMETER","INITIAL_SIZE","TARGET_SIZE","CURRENT_SIZE","START_TIME","LAST_UPDATE_TIME" from v$sga_current_resize_ops;

CREATE OR REPLACE FORCE VIEW "V_$SGA_DYNAMIC_COMPONENTS"("COMPONENT","CURRENT_SIZE","MIN_SIZE","MAX_SIZE","USER_SPECIFIED_SIZE","OPER_COUNT","LAST_OPER_TYPE","LAST_OPER_MODE","LAST_OPER_TIME","GRANULE_SIZE") AS 
select "COMPONENT","CURRENT_SIZE","MIN_SIZE","MAX_SIZE","USER_SPECIFIED_SIZE","OPER_COUNT","LAST_OPER_TYPE","LAST_OPER_MODE","LAST_OPER_TIME","GRANULE_SIZE" from v$sga_dynamic_components;

CREATE OR REPLACE FORCE VIEW "V_$SGA_DYNAMIC_FREE_MEMORY"("CURRENT_SIZE") AS 
select "CURRENT_SIZE" from v$sga_dynamic_free_memory;

CREATE OR REPLACE FORCE VIEW "V_$SGA_RESIZE_OPS"("COMPONENT","OPER_TYPE","OPER_MODE","PARAMETER","INITIAL_SIZE","TARGET_SIZE","FINAL_SIZE","STATUS","START_TIME","END_TIME") AS 
select "COMPONENT","OPER_TYPE","OPER_MODE","PARAMETER","INITIAL_SIZE","TARGET_SIZE","FINAL_SIZE","STATUS","START_TIME","END_TIME" from v$sga_resize_ops;

CREATE OR REPLACE FORCE VIEW "V_$SHARED_POOL_ADVICE"("SHARED_POOL_SIZE_FOR_ESTIMATE","SHARED_POOL_SIZE_FACTOR","ESTD_LC_SIZE","ESTD_LC_MEMORY_OBJECTS","ESTD_LC_TIME_SAVED","ESTD_LC_TIME_SAVED_FACTOR","ESTD_LC_LOAD_TIME","ESTD_LC_LOAD_TIME_FACTOR","ESTD_LC_MEMORY_OBJECT_HITS") AS 
select "SHARED_POOL_SIZE_FOR_ESTIMATE","SHARED_POOL_SIZE_FACTOR","ESTD_LC_SIZE","ESTD_LC_MEMORY_OBJECTS","ESTD_LC_TIME_SAVED","ESTD_LC_TIME_SAVED_FACTOR","ESTD_LC_LOAD_TIME","ESTD_LC_LOAD_TIME_FACTOR","ESTD_LC_MEMORY_OBJECT_HITS" from v$shared_pool_advice;

CREATE OR REPLACE FORCE VIEW "V_$SHARED_POOL_RESERVED"("FREE_SPACE","AVG_FREE_SIZE","FREE_COUNT","MAX_FREE_SIZE","USED_SPACE","AVG_USED_SIZE","USED_COUNT","MAX_USED_SIZE","REQUESTS","REQUEST_MISSES","LAST_MISS_SIZE","MAX_MISS_SIZE","REQUEST_FAILURES","LAST_FAILURE_SIZE","ABORTED_REQUEST_THRESHOLD","ABORTED_REQUESTS","LAST_ABORTED_SIZE") AS 
select "FREE_SPACE","AVG_FREE_SIZE","FREE_COUNT","MAX_FREE_SIZE","USED_SPACE","AVG_USED_SIZE","USED_COUNT","MAX_USED_SIZE","REQUESTS","REQUEST_MISSES","LAST_MISS_SIZE","MAX_MISS_SIZE","REQUEST_FAILURES","LAST_FAILURE_SIZE","ABORTED_REQUEST_THRESHOLD","ABORTED_REQUESTS","LAST_ABORTED_SIZE" from v$shared_pool_reserved;

CREATE OR REPLACE FORCE VIEW "V_$SHARED_SERVER"("NAME","PADDR","STATUS","MESSAGES","BYTES","BREAKS","CIRCUIT","IDLE","BUSY","REQUESTS") AS 
select "NAME","PADDR","STATUS","MESSAGES","BYTES","BREAKS","CIRCUIT","IDLE","BUSY","REQUESTS" from v$shared_server;

CREATE OR REPLACE FORCE VIEW "V_$SHARED_SERVER_MONITOR"("MAXIMUM_CONNECTIONS","MAXIMUM_SESSIONS","SERVERS_STARTED","SERVERS_TERMINATED","SERVERS_HIGHWATER") AS 
select "MAXIMUM_CONNECTIONS","MAXIMUM_SESSIONS","SERVERS_STARTED","SERVERS_TERMINATED","SERVERS_HIGHWATER" from v$shared_server_monitor;

CREATE OR REPLACE FORCE VIEW "V_$SORT_SEGMENT"("TABLESPACE_NAME","SEGMENT_FILE","SEGMENT_BLOCK","EXTENT_SIZE","CURRENT_USERS","TOTAL_EXTENTS","TOTAL_BLOCKS","USED_EXTENTS","USED_BLOCKS","FREE_EXTENTS","FREE_BLOCKS","ADDED_EXTENTS","EXTENT_HITS","FREED_EXTENTS","FREE_REQUESTS","MAX_SIZE","MAX_BLOCKS","MAX_USED_SIZE","MAX_USED_BLOCKS","MAX_SORT_SIZE","MAX_SORT_BLOCKS","RELATIVE_FNO") AS 
select "TABLESPACE_NAME","SEGMENT_FILE","SEGMENT_BLOCK","EXTENT_SIZE","CURRENT_USERS","TOTAL_EXTENTS","TOTAL_BLOCKS","USED_EXTENTS","USED_BLOCKS","FREE_EXTENTS","FREE_BLOCKS","ADDED_EXTENTS","EXTENT_HITS","FREED_EXTENTS","FREE_REQUESTS","MAX_SIZE","MAX_BLOCKS","MAX_USED_SIZE","MAX_USED_BLOCKS","MAX_SORT_SIZE","MAX_SORT_BLOCKS","RELATIVE_FNO" from v$sort_segment;

CREATE OR REPLACE FORCE VIEW "V_$SORT_USAGE"("USERNAME","USER","SESSION_ADDR","SESSION_NUM","SQLADDR","SQLHASH","SQL_ID","TABLESPACE","CONTENTS","SEGTYPE","SEGFILE#","SEGBLK#","EXTENTS","BLOCKS","SEGRFNO#") AS 
select "USERNAME","USER","SESSION_ADDR","SESSION_NUM","SQLADDR","SQLHASH","SQL_ID","TABLESPACE","CONTENTS","SEGTYPE","SEGFILE#","SEGBLK#","EXTENTS","BLOCKS","SEGRFNO#" from v$sort_usage;

CREATE OR REPLACE FORCE VIEW "V_$SPPARAMETER"("SID","NAME","VALUE","DISPLAY_VALUE","ISSPECIFIED","ORDINAL","UPDATE_COMMENT") AS 
select "SID","NAME","VALUE","DISPLAY_VALUE","ISSPECIFIED","ORDINAL","UPDATE_COMMENT" from v$spparameter;

CREATE OR REPLACE FORCE VIEW "V_$SQL"("SQL_TEXT","SQL_FULLTEXT","SQL_ID","SHARABLE_MEM","PERSISTENT_MEM","RUNTIME_MEM","SORTS","LOADED_VERSIONS","OPEN_VERSIONS","USERS_OPENING","FETCHES","EXECUTIONS","END_OF_FETCH_COUNT","USERS_EXECUTING","LOADS","FIRST_LOAD_TIME","INVALIDATIONS","PARSE_CALLS","DISK_READS","DIRECT_WRITES","BUFFER_GETS","APPLICATION_WAIT_TIME","CONCURRENCY_WAIT_TIME","CLUSTER_WAIT_TIME","USER_IO_WAIT_TIME","PLSQL_EXEC_TIME","JAVA_EXEC_TIME","ROWS_PROCESSED","COMMAND_TYPE","OPTIMIZER_MODE","OPTIMIZER_COST","OPTIMIZER_ENV","OPTIMIZER_ENV_HASH_VALUE","PARSING_USER_ID","PARSING_SCHEMA_ID","KEPT_VERSIONS","ADDRESS","TYPE_CHK_HEAP","HASH_VALUE","OLD_HASH_VALUE","PLAN_HASH_VALUE","CHILD_NUMBER","MODULE","MODULE_HASH","ACTION","ACTION_HASH","SERIALIZABLE_ABORTS","OUTLINE_CATEGORY","CPU_TIME","ELAPSED_TIME","OUTLINE_SID","CHILD_ADDRESS","SQLTYPE","REMOTE","OBJECT_STATUS","LITERAL_HASH_VALUE","LAST_LOAD_TIME","IS_OBSOLETE","CHILD_LATCH","SQL_PROFILE","PROGRAM_ID","PROGRAM_LINE#") AS 
select "SQL_TEXT","SQL_FULLTEXT","SQL_ID","SHARABLE_MEM","PERSISTENT_MEM","RUNTIME_MEM","SORTS","LOADED_VERSIONS","OPEN_VERSIONS","USERS_OPENING","FETCHES","EXECUTIONS","END_OF_FETCH_COUNT","USERS_EXECUTING","LOADS","FIRST_LOAD_TIME","INVALIDATIONS","PARSE_CALLS","DISK_READS","DIRECT_WRITES","BUFFER_GETS","APPLICATION_WAIT_TIME","CONCURRENCY_WAIT_TIME","CLUSTER_WAIT_TIME","USER_IO_WAIT_TIME","PLSQL_EXEC_TIME","JAVA_EXEC_TIME","ROWS_PROCESSED","COMMAND_TYPE","OPTIMIZER_MODE","OPTIMIZER_COST","OPTIMIZER_ENV","OPTIMIZER_ENV_HASH_VALUE","PARSING_USER_ID","PARSING_SCHEMA_ID","KEPT_VERSIONS","ADDRESS","TYPE_CHK_HEAP","HASH_VALUE","OLD_HASH_VALUE","PLAN_HASH_VALUE","CHILD_NUMBER","MODULE","MODULE_HASH","ACTION","ACTION_HASH","SERIALIZABLE_ABORTS","OUTLINE_CATEGORY","CPU_TIME","ELAPSED_TIME","OUTLINE_SID","CHILD_ADDRESS","SQLTYPE","REMOTE","OBJECT_STATUS","LITERAL_HASH_VALUE","LAST_LOAD_TIME","IS_OBSOLETE","CHILD_LATCH","SQL_PROFILE","PROGRAM_ID","PROGRAM_LINE#" from v$sql;

CREATE OR REPLACE FORCE VIEW "V_$SQLAREA"("SQL_TEXT","SQL_ID","SHARABLE_MEM","PERSISTENT_MEM","RUNTIME_MEM","SORTS","VERSION_COUNT","LOADED_VERSIONS","OPEN_VERSIONS","USERS_OPENING","FETCHES","EXECUTIONS","END_OF_FETCH_COUNT","USERS_EXECUTING","LOADS","FIRST_LOAD_TIME","INVALIDATIONS","PARSE_CALLS","DISK_READS","DIRECT_WRITES","BUFFER_GETS","APPLICATION_WAIT_TIME","CONCURRENCY_WAIT_TIME","CLUSTER_WAIT_TIME","USER_IO_WAIT_TIME","PLSQL_EXEC_TIME","JAVA_EXEC_TIME","ROWS_PROCESSED","COMMAND_TYPE","OPTIMIZER_MODE","PARSING_USER_ID","PARSING_SCHEMA_ID","KEPT_VERSIONS","ADDRESS","HASH_VALUE","OLD_HASH_VALUE","MODULE","MODULE_HASH","ACTION","ACTION_HASH","SERIALIZABLE_ABORTS","CPU_TIME","ELAPSED_TIME","IS_OBSOLETE","CHILD_LATCH","PROGRAM_ID") AS 
select "SQL_TEXT","SQL_ID","SHARABLE_MEM","PERSISTENT_MEM","RUNTIME_MEM","SORTS","VERSION_COUNT","LOADED_VERSIONS","OPEN_VERSIONS","USERS_OPENING","FETCHES","EXECUTIONS","END_OF_FETCH_COUNT","USERS_EXECUTING","LOADS","FIRST_LOAD_TIME","INVALIDATIONS","PARSE_CALLS","DISK_READS","DIRECT_WRITES","BUFFER_GETS","APPLICATION_WAIT_TIME","CONCURRENCY_WAIT_TIME","CLUSTER_WAIT_TIME","USER_IO_WAIT_TIME","PLSQL_EXEC_TIME","JAVA_EXEC_TIME","ROWS_PROCESSED","COMMAND_TYPE","OPTIMIZER_MODE","PARSING_USER_ID","PARSING_SCHEMA_ID","KEPT_VERSIONS","ADDRESS","HASH_VALUE","OLD_HASH_VALUE","MODULE","MODULE_HASH","ACTION","ACTION_HASH","SERIALIZABLE_ABORTS","CPU_TIME","ELAPSED_TIME","IS_OBSOLETE","CHILD_LATCH","PROGRAM_ID" from v$sqlarea;

CREATE OR REPLACE FORCE VIEW "V_$SQLTEXT"("ADDRESS","HASH_VALUE","SQL_ID","COMMAND_TYPE","PIECE","SQL_TEXT") AS 
select "ADDRESS","HASH_VALUE","SQL_ID","COMMAND_TYPE","PIECE","SQL_TEXT" from v$sqltext;

CREATE OR REPLACE FORCE VIEW "V_$SQLTEXT_WITH_NEWLINES"("ADDRESS","HASH_VALUE","SQL_ID","COMMAND_TYPE","PIECE","SQL_TEXT") AS 
select "ADDRESS","HASH_VALUE","SQL_ID","COMMAND_TYPE","PIECE","SQL_TEXT" from v$sqltext_with_newlines;

CREATE OR REPLACE FORCE VIEW "V_$SQLXS"("SQL_TEXT","SHARABLE_MEM","SORTS","MODULE","LOADED_VERSIONS","EXECUTIONS","LOADS","INVALIDATIONS","PARSE_CALLS","DISK_READS","BUFFER_GETS","ROWS_PROCESSED","ADDRESS","HASH_VALUE","VERSION_COUNT") AS 
select max(sql_text)        sql_text
     , sum(sharable_mem)    sharable_mem
     , sum(sorts)           sorts
     , min(module)          module
     , sum(loaded_versions) loaded_versions
     , sum(executions)      executions
     , sum(loads)           loads
     , sum(invalidations)   invalidations
     , sum(parse_calls)     parse_calls
     , sum(disk_reads)      disk_reads
     , sum(buffer_gets)     buffer_gets
     , sum(rows_processed)  rows_processed
     , address              address
     , hash_value           hash_value
     , count(1)             version_count
  from v$sql
  group by hash_value, address;

CREATE OR REPLACE FORCE VIEW "V_$SQL_BIND_CAPTURE"("ADDRESS","HASH_VALUE","SQL_ID","CHILD_ADDRESS","CHILD_NUMBER","NAME","POSITION","DUP_POSITION","DATATYPE","DATATYPE_STRING","CHARACTER_SID","PRECISION","SCALE","MAX_LENGTH","WAS_CAPTURED","LAST_CAPTURED","VALUE_STRING","VALUE_ANYDATA") AS 
select "ADDRESS","HASH_VALUE","SQL_ID","CHILD_ADDRESS","CHILD_NUMBER","NAME","POSITION","DUP_POSITION","DATATYPE","DATATYPE_STRING","CHARACTER_SID","PRECISION","SCALE","MAX_LENGTH","WAS_CAPTURED","LAST_CAPTURED","VALUE_STRING","VALUE_ANYDATA" from o$sql_bind_capture;

CREATE OR REPLACE FORCE VIEW "V_$SQL_BIND_DATA"("CURSOR_NUM","POSITION","DATATYPE","SHARED_MAX_LEN","PRIVATE_MAX_LEN","ARRAY_SIZE","PRECISION","SCALE","SHARED_FLAG","SHARED_FLAG2","BUF_ADDRESS","BUF_LENGTH","VAL_LENGTH","BUF_FLAG","INDICATOR","VALUE") AS 
select "CURSOR_NUM","POSITION","DATATYPE","SHARED_MAX_LEN","PRIVATE_MAX_LEN","ARRAY_SIZE","PRECISION","SCALE","SHARED_FLAG","SHARED_FLAG2","BUF_ADDRESS","BUF_LENGTH","VAL_LENGTH","BUF_FLAG","INDICATOR","VALUE" from v$sql_bind_data;

CREATE OR REPLACE FORCE VIEW "V_$SQL_BIND_METADATA"("ADDRESS","POSITION","DATATYPE","MAX_LENGTH","ARRAY_LEN","BIND_NAME") AS 
select "ADDRESS","POSITION","DATATYPE","MAX_LENGTH","ARRAY_LEN","BIND_NAME" from v$sql_bind_metadata;

CREATE OR REPLACE FORCE VIEW "V_$SQL_CURSOR"("CURNO","FLAG","STATUS","PARENT_HANDLE","PARENT_LOCK","CHILD_LOCK","CHILD_PIN","PERS_HEAP_MEM","WORK_HEAP_MEM","BIND_VARS","DEFINE_VARS","BIND_MEM_LOC","INST_FLAG","INST_FLAG2") AS 
select "CURNO","FLAG","STATUS","PARENT_HANDLE","PARENT_LOCK","CHILD_LOCK","CHILD_PIN","PERS_HEAP_MEM","WORK_HEAP_MEM","BIND_VARS","DEFINE_VARS","BIND_MEM_LOC","INST_FLAG","INST_FLAG2" from v$sql_cursor;

CREATE OR REPLACE FORCE VIEW "V_$SQL_OPTIMIZER_ENV"("ADDRESS","HASH_VALUE","SQL_ID","CHILD_ADDRESS","CHILD_NUMBER","ID","NAME","ISDEFAULT","VALUE") AS 
select "ADDRESS","HASH_VALUE","SQL_ID","CHILD_ADDRESS","CHILD_NUMBER","ID","NAME","ISDEFAULT","VALUE" from v$sql_optimizer_env;

CREATE OR REPLACE FORCE VIEW "V_$SQL_PLAN"("ADDRESS","HASH_VALUE","SQL_ID","PLAN_HASH_VALUE","CHILD_NUMBER","OPERATION","OPTIONS","OBJECT_NODE","OBJECT#","OBJECT_OWNER","OBJECT_NAME","OBJECT_ALIAS","OBJECT_TYPE","OPTIMIZER","ID","PARENT_ID","DEPTH","POSITION","SEARCH_COLUMNS","COST","CARDINALITY","BYTES","OTHER_TAG","PARTITION_START","PARTITION_STOP","PARTITION_ID","OTHER","DISTRIBUTION","CPU_COST","IO_COST","TEMP_SPACE","ACCESS_PREDICATES","FILTER_PREDICATES","PROJECTION","TIME","QBLOCK_NAME","REMARKS") AS 
select "ADDRESS","HASH_VALUE","SQL_ID","PLAN_HASH_VALUE","CHILD_NUMBER","OPERATION","OPTIONS","OBJECT_NODE","OBJECT#","OBJECT_OWNER","OBJECT_NAME","OBJECT_ALIAS","OBJECT_TYPE","OPTIMIZER","ID","PARENT_ID","DEPTH","POSITION","SEARCH_COLUMNS","COST","CARDINALITY","BYTES","OTHER_TAG","PARTITION_START","PARTITION_STOP","PARTITION_ID","OTHER","DISTRIBUTION","CPU_COST","IO_COST","TEMP_SPACE","ACCESS_PREDICATES","FILTER_PREDICATES","PROJECTION","TIME","QBLOCK_NAME","REMARKS" from v$sql_plan;

CREATE OR REPLACE FORCE VIEW "V_$SQL_PLAN_STATISTICS"("ADDRESS","HASH_VALUE","SQL_ID","PLAN_HASH_VALUE","CHILD_NUMBER","OPERATION_ID","EXECUTIONS","LAST_STARTS","STARTS","LAST_OUTPUT_ROWS","OUTPUT_ROWS","LAST_CR_BUFFER_GETS","CR_BUFFER_GETS","LAST_CU_BUFFER_GETS","CU_BUFFER_GETS","LAST_DISK_READS","DISK_READS","LAST_DISK_WRITES","DISK_WRITES","LAST_ELAPSED_TIME","ELAPSED_TIME") AS 
select "ADDRESS","HASH_VALUE","SQL_ID","PLAN_HASH_VALUE","CHILD_NUMBER","OPERATION_ID","EXECUTIONS","LAST_STARTS","STARTS","LAST_OUTPUT_ROWS","OUTPUT_ROWS","LAST_CR_BUFFER_GETS","CR_BUFFER_GETS","LAST_CU_BUFFER_GETS","CU_BUFFER_GETS","LAST_DISK_READS","DISK_READS","LAST_DISK_WRITES","DISK_WRITES","LAST_ELAPSED_TIME","ELAPSED_TIME" from v$sql_plan_statistics;

CREATE OR REPLACE FORCE VIEW "V_$SQL_PLAN_STATISTICS_ALL"("ADDRESS","HASH_VALUE","SQL_ID","PLAN_HASH_VALUE","CHILD_NUMBER","OPERATION","OPTIONS","OBJECT_NODE","OBJECT#","OBJECT_OWNER","OBJECT_NAME","OBJECT_ALIAS","OBJECT_TYPE","OPTIMIZER","ID","PARENT_ID","DEPTH","POSITION","SEARCH_COLUMNS","COST","CARDINALITY","BYTES","OTHER_TAG","PARTITION_START","PARTITION_STOP","PARTITION_ID","OTHER","DISTRIBUTION","CPU_COST","IO_COST","TEMP_SPACE","ACCESS_PREDICATES","FILTER_PREDICATES","PROJECTION","TIME","QBLOCK_NAME","REMARKS","EXECUTIONS","LAST_STARTS","STARTS","LAST_OUTPUT_ROWS","OUTPUT_ROWS","LAST_CR_BUFFER_GETS","CR_BUFFER_GETS","LAST_CU_BUFFER_GETS","CU_BUFFER_GETS","LAST_DISK_READS","DISK_READS","LAST_DISK_WRITES","DISK_WRITES","LAST_ELAPSED_TIME","ELAPSED_TIME","POLICY","ESTIMATED_OPTIMAL_SIZE","ESTIMATED_ONEPASS_SIZE","LAST_MEMORY_USED","LAST_EXECUTION","LAST_DEGREE","TOTAL_EXECUTIONS","OPTIMAL_EXECUTIONS","ONEPASS_EXECUTIONS","MULTIPASSES_EXECUTIONS","ACTIVE_TIME","MAX_TEMPSEG_SIZE","LAST_TEMPSEG_SIZE") AS 
select "ADDRESS","HASH_VALUE","SQL_ID","PLAN_HASH_VALUE","CHILD_NUMBER","OPERATION","OPTIONS","OBJECT_NODE","OBJECT#","OBJECT_OWNER","OBJECT_NAME","OBJECT_ALIAS","OBJECT_TYPE","OPTIMIZER","ID","PARENT_ID","DEPTH","POSITION","SEARCH_COLUMNS","COST","CARDINALITY","BYTES","OTHER_TAG","PARTITION_START","PARTITION_STOP","PARTITION_ID","OTHER","DISTRIBUTION","CPU_COST","IO_COST","TEMP_SPACE","ACCESS_PREDICATES","FILTER_PREDICATES","PROJECTION","TIME","QBLOCK_NAME","REMARKS","EXECUTIONS","LAST_STARTS","STARTS","LAST_OUTPUT_ROWS","OUTPUT_ROWS","LAST_CR_BUFFER_GETS","CR_BUFFER_GETS","LAST_CU_BUFFER_GETS","CU_BUFFER_GETS","LAST_DISK_READS","DISK_READS","LAST_DISK_WRITES","DISK_WRITES","LAST_ELAPSED_TIME","ELAPSED_TIME","POLICY","ESTIMATED_OPTIMAL_SIZE","ESTIMATED_ONEPASS_SIZE","LAST_MEMORY_USED","LAST_EXECUTION","LAST_DEGREE","TOTAL_EXECUTIONS","OPTIMAL_EXECUTIONS","ONEPASS_EXECUTIONS","MULTIPASSES_EXECUTIONS","ACTIVE_TIME","MAX_TEMPSEG_SIZE","LAST_TEMPSEG_SIZE" from v$sql_plan_statistics_all;

CREATE OR REPLACE FORCE VIEW "V_$SQL_REDIRECTION"("ADDRESS","PARENT_HANDLE","HASH_VALUE","SQL_ID","CHILD_NUMBER","PARSING_USER_ID","PARSING_SCHEMA_ID","COMMAND_TYPE","REASON","ERROR_CODE","POSITION","SQL_TEXT_PIECE","ERROR_MESSAGE") AS 
select "ADDRESS","PARENT_HANDLE","HASH_VALUE","SQL_ID","CHILD_NUMBER","PARSING_USER_ID","PARSING_SCHEMA_ID","COMMAND_TYPE","REASON","ERROR_CODE","POSITION","SQL_TEXT_PIECE","ERROR_MESSAGE" from v$sql_redirection;

CREATE OR REPLACE FORCE VIEW "V_$SQL_SHARED_CURSOR"("SQL_ID","ADDRESS","CHILD_ADDRESS","CHILD_NUMBER","UNBOUND_CURSOR","SQL_TYPE_MISMATCH","OPTIMIZER_MISMATCH","OUTLINE_MISMATCH","STATS_ROW_MISMATCH","LITERAL_MISMATCH","SEC_DEPTH_MISMATCH","EXPLAIN_PLAN_CURSOR","BUFFERED_DML_MISMATCH","PDML_ENV_MISMATCH","INST_DRTLD_MISMATCH","SLAVE_QC_MISMATCH","TYPECHECK_MISMATCH","AUTH_CHECK_MISMATCH","BIND_MISMATCH","DESCRIBE_MISMATCH","LANGUAGE_MISMATCH","TRANSLATION_MISMATCH","ROW_LEVEL_SEC_MISMATCH","INSUFF_PRIVS","INSUFF_PRIVS_REM","REMOTE_TRANS_MISMATCH","LOGMINER_SESSION_MISMATCH","INCOMP_LTRL_MISMATCH","OVERLAP_TIME_MISMATCH","SQL_REDIRECT_MISMATCH","MV_QUERY_GEN_MISMATCH","USER_BIND_PEEK_MISMATCH","TYPCHK_DEP_MISMATCH","NO_TRIGGER_MISMATCH","FLASHBACK_CURSOR","ANYDATA_TRANSFORMATION","INCOMPLETE_CURSOR","TOP_LEVEL_RPI_CURSOR","DIFFERENT_LONG_LENGTH","LOGICAL_STANDBY_APPLY","DIFF_CALL_DURN","BIND_UACS_DIFF","PLSQL_CMP_SWITCHS_DIFF") AS 
select "SQL_ID","ADDRESS","CHILD_ADDRESS","CHILD_NUMBER","UNBOUND_CURSOR","SQL_TYPE_MISMATCH","OPTIMIZER_MISMATCH","OUTLINE_MISMATCH","STATS_ROW_MISMATCH","LITERAL_MISMATCH","SEC_DEPTH_MISMATCH","EXPLAIN_PLAN_CURSOR","BUFFERED_DML_MISMATCH","PDML_ENV_MISMATCH","INST_DRTLD_MISMATCH","SLAVE_QC_MISMATCH","TYPECHECK_MISMATCH","AUTH_CHECK_MISMATCH","BIND_MISMATCH","DESCRIBE_MISMATCH","LANGUAGE_MISMATCH","TRANSLATION_MISMATCH","ROW_LEVEL_SEC_MISMATCH","INSUFF_PRIVS","INSUFF_PRIVS_REM","REMOTE_TRANS_MISMATCH","LOGMINER_SESSION_MISMATCH","INCOMP_LTRL_MISMATCH","OVERLAP_TIME_MISMATCH","SQL_REDIRECT_MISMATCH","MV_QUERY_GEN_MISMATCH","USER_BIND_PEEK_MISMATCH","TYPCHK_DEP_MISMATCH","NO_TRIGGER_MISMATCH","FLASHBACK_CURSOR","ANYDATA_TRANSFORMATION","INCOMPLETE_CURSOR","TOP_LEVEL_RPI_CURSOR","DIFFERENT_LONG_LENGTH","LOGICAL_STANDBY_APPLY","DIFF_CALL_DURN","BIND_UACS_DIFF","PLSQL_CMP_SWITCHS_DIFF" from v$sql_shared_cursor;

CREATE OR REPLACE FORCE VIEW "V_$SQL_SHARED_MEMORY"("SQL_TEXT","SQL_FULLTEXT","HASH_VALUE","SQL_ID","HEAP_DESC","STRUCTURE","FUNCTION","CHUNK_COM","CHUNK_PTR","CHUNK_SIZE","ALLOC_CLASS","CHUNK_TYPE","SUBHEAP_DESC") AS 
select "SQL_TEXT","SQL_FULLTEXT","HASH_VALUE","SQL_ID","HEAP_DESC","STRUCTURE","FUNCTION","CHUNK_COM","CHUNK_PTR","CHUNK_SIZE","ALLOC_CLASS","CHUNK_TYPE","SUBHEAP_DESC" from v$sql_shared_memory;

CREATE OR REPLACE FORCE VIEW "V_$SQL_WORKAREA"("ADDRESS","HASH_VALUE","SQL_ID","CHILD_NUMBER","WORKAREA_ADDRESS","OPERATION_TYPE","OPERATION_ID","POLICY","ESTIMATED_OPTIMAL_SIZE","ESTIMATED_ONEPASS_SIZE","LAST_MEMORY_USED","LAST_EXECUTION","LAST_DEGREE","TOTAL_EXECUTIONS","OPTIMAL_EXECUTIONS","ONEPASS_EXECUTIONS","MULTIPASSES_EXECUTIONS","ACTIVE_TIME","MAX_TEMPSEG_SIZE","LAST_TEMPSEG_SIZE") AS 
select "ADDRESS","HASH_VALUE","SQL_ID","CHILD_NUMBER","WORKAREA_ADDRESS","OPERATION_TYPE","OPERATION_ID","POLICY","ESTIMATED_OPTIMAL_SIZE","ESTIMATED_ONEPASS_SIZE","LAST_MEMORY_USED","LAST_EXECUTION","LAST_DEGREE","TOTAL_EXECUTIONS","OPTIMAL_EXECUTIONS","ONEPASS_EXECUTIONS","MULTIPASSES_EXECUTIONS","ACTIVE_TIME","MAX_TEMPSEG_SIZE","LAST_TEMPSEG_SIZE" from v$sql_workarea;

CREATE OR REPLACE FORCE VIEW "V_$SQL_WORKAREA_ACTIVE"("SQL_HASH_VALUE","SQL_ID","WORKAREA_ADDRESS","OPERATION_TYPE","OPERATION_ID","POLICY","SID","QCINST_ID","QCSID","ACTIVE_TIME","WORK_AREA_SIZE","EXPECTED_SIZE","ACTUAL_MEM_USED","MAX_MEM_USED","NUMBER_PASSES","TEMPSEG_SIZE","TABLESPACE","SEGRFNO#","SEGBLK#") AS 
select "SQL_HASH_VALUE","SQL_ID","WORKAREA_ADDRESS","OPERATION_TYPE","OPERATION_ID","POLICY","SID","QCINST_ID","QCSID","ACTIVE_TIME","WORK_AREA_SIZE","EXPECTED_SIZE","ACTUAL_MEM_USED","MAX_MEM_USED","NUMBER_PASSES","TEMPSEG_SIZE","TABLESPACE","SEGRFNO#","SEGBLK#" from v$sql_workarea_active;

CREATE OR REPLACE FORCE VIEW "V_$SQL_WORKAREA_HISTOGRAM"("LOW_OPTIMAL_SIZE","HIGH_OPTIMAL_SIZE","OPTIMAL_EXECUTIONS","ONEPASS_EXECUTIONS","MULTIPASSES_EXECUTIONS","TOTAL_EXECUTIONS") AS 
select "LOW_OPTIMAL_SIZE","HIGH_OPTIMAL_SIZE","OPTIMAL_EXECUTIONS","ONEPASS_EXECUTIONS","MULTIPASSES_EXECUTIONS","TOTAL_EXECUTIONS" from v$sql_workarea_histogram;

CREATE OR REPLACE FORCE VIEW "V_$STANDBY_LOG"("GROUP#","DBID","THREAD#","SEQUENCE#","BYTES","USED","ARCHIVED","STATUS","FIRST_CHANGE#","FIRST_TIME","LAST_CHANGE#","LAST_TIME") AS 
select "GROUP#","DBID","THREAD#","SEQUENCE#","BYTES","USED","ARCHIVED","STATUS","FIRST_CHANGE#","FIRST_TIME","LAST_CHANGE#","LAST_TIME" from v$standby_log;

CREATE OR REPLACE FORCE VIEW "V_$STATISTICS_LEVEL"("STATISTICS_NAME","DESCRIPTION","SESSION_STATUS","SYSTEM_STATUS","ACTIVATION_LEVEL","STATISTICS_VIEW_NAME","SESSION_SETTABLE") AS 
select "STATISTICS_NAME","DESCRIPTION","SESSION_STATUS","SYSTEM_STATUS","ACTIVATION_LEVEL","STATISTICS_VIEW_NAME","SESSION_SETTABLE" from
   v$statistics_level;

CREATE OR REPLACE FORCE VIEW "V_$STATNAME"("STATISTIC#","NAME","CLASS","STAT_ID") AS 
select "STATISTIC#","NAME","CLASS","STAT_ID" from v$statname;

CREATE OR REPLACE FORCE VIEW "V_$STREAMS_APPLY_COORDINATOR"("SID","SERIAL#","STATE","APPLY#","APPLY_NAME","TOTAL_APPLIED","TOTAL_WAIT_DEPS","TOTAL_WAIT_COMMITS","TOTAL_ADMIN","TOTAL_ASSIGNED","TOTAL_RECEIVED","TOTAL_IGNORED","TOTAL_ROLLBACKS","TOTAL_ERRORS","LWM_TIME","LWM_MESSAGE_NUMBER","LWM_MESSAGE_CREATE_TIME","HWM_TIME","HWM_MESSAGE_NUMBER","HWM_MESSAGE_CREATE_TIME","STARTUP_TIME","ELAPSED_SCHEDULE_TIME") AS 
select "SID","SERIAL#","STATE","APPLY#","APPLY_NAME","TOTAL_APPLIED","TOTAL_WAIT_DEPS","TOTAL_WAIT_COMMITS","TOTAL_ADMIN","TOTAL_ASSIGNED","TOTAL_RECEIVED","TOTAL_IGNORED","TOTAL_ROLLBACKS","TOTAL_ERRORS","LWM_TIME","LWM_MESSAGE_NUMBER","LWM_MESSAGE_CREATE_TIME","HWM_TIME","HWM_MESSAGE_NUMBER","HWM_MESSAGE_CREATE_TIME","STARTUP_TIME","ELAPSED_SCHEDULE_TIME" from v$streams_apply_coordinator;

CREATE OR REPLACE FORCE VIEW "V_$STREAMS_APPLY_READER"("SID","SERIAL#","APPLY#","APPLY_NAME","STATE","TOTAL_MESSAGES_DEQUEUED","DEQUEUE_TIME","DEQUEUED_MESSAGE_NUMBER","DEQUEUED_MESSAGE_CREATE_TIME","SGA_USED","ELAPSED_DEQUEUE_TIME","ELAPSED_SCHEDULE_TIME","LAST_BROWSE_NUM","OLDEST_SCN_NUM","LAST_BROWSE_SEQ","LAST_DEQ_SEQ") AS 
select "SID","SERIAL#","APPLY#","APPLY_NAME","STATE","TOTAL_MESSAGES_DEQUEUED","DEQUEUE_TIME","DEQUEUED_MESSAGE_NUMBER","DEQUEUED_MESSAGE_CREATE_TIME","SGA_USED","ELAPSED_DEQUEUE_TIME","ELAPSED_SCHEDULE_TIME","LAST_BROWSE_NUM","OLDEST_SCN_NUM","LAST_BROWSE_SEQ","LAST_DEQ_SEQ" from v$streams_apply_reader;

CREATE OR REPLACE FORCE VIEW "V_$STREAMS_APPLY_SERVER"("SID","SERIAL#","APPLY#","APPLY_NAME","SERVER_ID","STATE","XIDUSN","XIDSLT","XIDSQN","COMMITSCN","DEP_XIDUSN","DEP_XIDSLT","DEP_XIDSQN","DEP_COMMITSCN","MESSAGE_SEQUENCE","TOTAL_ASSIGNED","TOTAL_ADMIN","TOTAL_ROLLBACKS","TOTAL_MESSAGES_APPLIED","APPLY_TIME","APPLIED_MESSAGE_NUMBER","APPLIED_MESSAGE_CREATE_TIME","ELAPSED_DEQUEUE_TIME","ELAPSED_APPLY_TIME") AS 
select "SID","SERIAL#","APPLY#","APPLY_NAME","SERVER_ID","STATE","XIDUSN","XIDSLT","XIDSQN","COMMITSCN","DEP_XIDUSN","DEP_XIDSLT","DEP_XIDSQN","DEP_COMMITSCN","MESSAGE_SEQUENCE","TOTAL_ASSIGNED","TOTAL_ADMIN","TOTAL_ROLLBACKS","TOTAL_MESSAGES_APPLIED","APPLY_TIME","APPLIED_MESSAGE_NUMBER","APPLIED_MESSAGE_CREATE_TIME","ELAPSED_DEQUEUE_TIME","ELAPSED_APPLY_TIME" from v$streams_apply_server;

CREATE OR REPLACE FORCE VIEW "V_$STREAMS_CAPTURE"("SID","SERIAL#","CAPTURE#","CAPTURE_NAME","LOGMINER_ID","STARTUP_TIME","STATE","TOTAL_PREFILTER_DISCARDED","TOTAL_PREFILTER_KEPT","TOTAL_PREFILTER_EVALUATIONS","TOTAL_MESSAGES_CAPTURED","CAPTURE_TIME","CAPTURE_MESSAGE_NUMBER","CAPTURE_MESSAGE_CREATE_TIME","TOTAL_MESSAGES_CREATED","TOTAL_FULL_EVALUATIONS","TOTAL_MESSAGES_ENQUEUED","ENQUEUE_TIME","ENQUEUE_MESSAGE_NUMBER","ENQUEUE_MESSAGE_CREATE_TIME","AVAILABLE_MESSAGE_NUMBER","AVAILABLE_MESSAGE_CREATE_TIME","ELAPSED_CAPTURE_TIME","ELAPSED_RULE_TIME","ELAPSED_ENQUEUE_TIME","ELAPSED_LCR_TIME","ELAPSED_REDO_WAIT_TIME","ELAPSED_PAUSE_TIME") AS 
select "SID","SERIAL#","CAPTURE#","CAPTURE_NAME","LOGMINER_ID","STARTUP_TIME","STATE","TOTAL_PREFILTER_DISCARDED","TOTAL_PREFILTER_KEPT","TOTAL_PREFILTER_EVALUATIONS","TOTAL_MESSAGES_CAPTURED","CAPTURE_TIME","CAPTURE_MESSAGE_NUMBER","CAPTURE_MESSAGE_CREATE_TIME","TOTAL_MESSAGES_CREATED","TOTAL_FULL_EVALUATIONS","TOTAL_MESSAGES_ENQUEUED","ENQUEUE_TIME","ENQUEUE_MESSAGE_NUMBER","ENQUEUE_MESSAGE_CREATE_TIME","AVAILABLE_MESSAGE_NUMBER","AVAILABLE_MESSAGE_CREATE_TIME","ELAPSED_CAPTURE_TIME","ELAPSED_RULE_TIME","ELAPSED_ENQUEUE_TIME","ELAPSED_LCR_TIME","ELAPSED_REDO_WAIT_TIME","ELAPSED_PAUSE_TIME" from v$streams_capture;

CREATE OR REPLACE FORCE VIEW "V_$SUBCACHE"("OWNER_NAME","NAME","TYPE","HEAP_NUM","CACHE_ID","CACHE_CNT","HEAP_SZ","HEAP_ALOC","HEAP_USED") AS 
select "OWNER_NAME","NAME","TYPE","HEAP_NUM","CACHE_ID","CACHE_CNT","HEAP_SZ","HEAP_ALOC","HEAP_USED" from v$subcache;

CREATE OR REPLACE FORCE VIEW "V_$SYSAUX_OCCUPANTS"("OCCUPANT_NAME","OCCUPANT_DESC","SCHEMA_NAME","MOVE_PROCEDURE","MOVE_PROCEDURE_DESC","SPACE_USAGE_KBYTES") AS 
select "OCCUPANT_NAME","OCCUPANT_DESC","SCHEMA_NAME","MOVE_PROCEDURE","MOVE_PROCEDURE_DESC","SPACE_USAGE_KBYTES" from v$sysaux_occupants;

CREATE OR REPLACE FORCE VIEW "V_$SYSMETRIC"("BEGIN_TIME","END_TIME","INTSIZE_CSEC","GROUP_ID","METRIC_ID","METRIC_NAME","VALUE","METRIC_UNIT") AS 
select "BEGIN_TIME","END_TIME","INTSIZE_CSEC","GROUP_ID","METRIC_ID","METRIC_NAME","VALUE","METRIC_UNIT" from v$sysmetric;

CREATE OR REPLACE FORCE VIEW "V_$SYSMETRIC_HISTORY"("BEGIN_TIME","END_TIME","INTSIZE_CSEC","GROUP_ID","METRIC_ID","METRIC_NAME","VALUE","METRIC_UNIT") AS 
select "BEGIN_TIME","END_TIME","INTSIZE_CSEC","GROUP_ID","METRIC_ID","METRIC_NAME","VALUE","METRIC_UNIT" from v$sysmetric_history;

CREATE OR REPLACE FORCE VIEW "V_$SYSMETRIC_SUMMARY"("BEGIN_TIME","END_TIME","INTSIZE_CSEC","GROUP_ID","METRIC_ID","METRIC_NAME","NUM_INTERVAL","MAXVAL","MINVAL","AVERAGE","STANDARD_DEVIATION","METRIC_UNIT") AS 
select "BEGIN_TIME","END_TIME","INTSIZE_CSEC","GROUP_ID","METRIC_ID","METRIC_NAME","NUM_INTERVAL","MAXVAL","MINVAL","AVERAGE","STANDARD_DEVIATION","METRIC_UNIT" from v$sysmetric_summary;

CREATE OR REPLACE FORCE VIEW "V_$SYSSTAT"("STATISTIC#","NAME","CLASS","VALUE","STAT_ID") AS 
select "STATISTIC#","NAME","CLASS","VALUE","STAT_ID" from v$sysstat;

CREATE OR REPLACE FORCE VIEW "V_$SYSTEM_CURSOR_CACHE"("OPENS","HITS","HIT_RATIO") AS 
select "OPENS","HITS","HIT_RATIO" from v$system_cursor_cache;

CREATE OR REPLACE FORCE VIEW "V_$SYSTEM_EVENT"("EVENT","TOTAL_WAITS","TOTAL_TIMEOUTS","TIME_WAITED","AVERAGE_WAIT","TIME_WAITED_MICRO","EVENT_ID") AS 
select "EVENT","TOTAL_WAITS","TOTAL_TIMEOUTS","TIME_WAITED","AVERAGE_WAIT","TIME_WAITED_MICRO","EVENT_ID" from v$system_event;

CREATE OR REPLACE FORCE VIEW "V_$SYSTEM_PARAMETER"("NUM","NAME","TYPE","VALUE","DISPLAY_VALUE","ISDEFAULT","ISSES_MODIFIABLE","ISSYS_MODIFIABLE","ISINSTANCE_MODIFIABLE","ISMODIFIED","ISADJUSTED","ISDEPRECATED","DESCRIPTION","UPDATE_COMMENT","HASH") AS 
select "NUM","NAME","TYPE","VALUE","DISPLAY_VALUE","ISDEFAULT","ISSES_MODIFIABLE","ISSYS_MODIFIABLE","ISINSTANCE_MODIFIABLE","ISMODIFIED","ISADJUSTED","ISDEPRECATED","DESCRIPTION","UPDATE_COMMENT","HASH" from v$system_parameter;

CREATE OR REPLACE FORCE VIEW "V_$SYSTEM_PARAMETER2"("NUM","NAME","TYPE","VALUE","DISPLAY_VALUE","ISDEFAULT","ISSES_MODIFIABLE","ISSYS_MODIFIABLE","ISINSTANCE_MODIFIABLE","ISMODIFIED","ISADJUSTED","ISDEPRECATED","DESCRIPTION","ORDINAL","UPDATE_COMMENT") AS 
select "NUM","NAME","TYPE","VALUE","DISPLAY_VALUE","ISDEFAULT","ISSES_MODIFIABLE","ISSYS_MODIFIABLE","ISINSTANCE_MODIFIABLE","ISMODIFIED","ISADJUSTED","ISDEPRECATED","DESCRIPTION","ORDINAL","UPDATE_COMMENT" from v$system_parameter2;

CREATE OR REPLACE FORCE VIEW "V_$SYSTEM_WAIT_CLASS"("WAIT_CLASS_ID","WAIT_CLASS#","WAIT_CLASS","TOTAL_WAITS","TIME_WAITED") AS 
select "WAIT_CLASS_ID","WAIT_CLASS#","WAIT_CLASS","TOTAL_WAITS","TIME_WAITED" from v$system_wait_class;

CREATE OR REPLACE FORCE VIEW "V_$SYS_OPTIMIZER_ENV"("ID","NAME","ISDEFAULT","VALUE","DEFAULT_VALUE") AS 
select "ID","NAME","ISDEFAULT","VALUE","DEFAULT_VALUE" from v$sys_optimizer_env;

CREATE OR REPLACE FORCE VIEW "V_$SYS_TIME_MODEL"("STAT_ID","STAT_NAME","VALUE") AS 
select "STAT_ID","STAT_NAME","VALUE" from v$sys_time_model;

CREATE OR REPLACE FORCE VIEW "V_$TABLESPACE"("TS#","NAME","INCLUDED_IN_DATABASE_BACKUP","BIGFILE","FLASHBACK_ON") AS 
select "TS#","NAME","INCLUDED_IN_DATABASE_BACKUP","BIGFILE","FLASHBACK_ON" from v$tablespace;

CREATE OR REPLACE FORCE VIEW "V_$TEMPFILE"("FILE#","CREATION_CHANGE#","CREATION_TIME","TS#","RFILE#","STATUS","ENABLED","BYTES","BLOCKS","CREATE_BYTES","BLOCK_SIZE","NAME") AS 
select "FILE#","CREATION_CHANGE#","CREATION_TIME","TS#","RFILE#","STATUS","ENABLED","BYTES","BLOCKS","CREATE_BYTES","BLOCK_SIZE","NAME" from v$tempfile;

CREATE OR REPLACE FORCE VIEW "V_$TEMPORARY_LOBS"("SID","CACHE_LOBS","NOCACHE_LOBS","ABSTRACT_LOBS") AS 
select "SID","CACHE_LOBS","NOCACHE_LOBS","ABSTRACT_LOBS" from v$temporary_lobs;

CREATE OR REPLACE FORCE VIEW "V_$TEMPSTAT"("FILE#","PHYRDS","PHYWRTS","PHYBLKRD","PHYBLKWRT","SINGLEBLKRDS","READTIM","WRITETIM","SINGLEBLKRDTIM","AVGIOTIM","LSTIOTIM","MINIOTIM","MAXIORTM","MAXIOWTM") AS 
select "FILE#","PHYRDS","PHYWRTS","PHYBLKRD","PHYBLKWRT","SINGLEBLKRDS","READTIM","WRITETIM","SINGLEBLKRDTIM","AVGIOTIM","LSTIOTIM","MINIOTIM","MAXIORTM","MAXIOWTM" from v$tempstat;

CREATE OR REPLACE FORCE VIEW "V_$TEMPSTATXS"("TSNAME","FILENAME","PHYRDS","PHYWRTS","READTIM","WRITETIM","PHYBLKRD","PHYBLKWRT","WAIT_COUNT","TIME") AS 
select ts.name      tsname
     , tf.name	    filename
     , tm.phyrds
     , tm.phywrts
     , tm.readtim
     , tm.writetim
     , tm.phyblkrd
     , tm.phyblkwrt
     , fw.count     wait_count
     , fw.time      time
  from x$kcbfwait   fw
     , v$tempstat   tm
     , v$tablespace ts
     , v$tempfile   tf
 where ts.ts#     = tf.ts#
   and tm.file#   = tf.file#
   and fw.indx+1  = tf.file#;

CREATE OR REPLACE FORCE VIEW "V_$TEMP_CACHE_TRANSFER"("FILE_NUMBER","X_2_NULL","X_2_NULL_FORCED_WRITE","X_2_NULL_FORCED_STALE","X_2_S","X_2_S_FORCED_WRITE","S_2_NULL","S_2_NULL_FORCED_STALE","RBR","RBR_FORCED_WRITE","NULL_2_X","S_2_X","NULL_2_S") AS 
select "FILE_NUMBER","X_2_NULL","X_2_NULL_FORCED_WRITE","X_2_NULL_FORCED_STALE","X_2_S","X_2_S_FORCED_WRITE","S_2_NULL","S_2_NULL_FORCED_STALE","RBR","RBR_FORCED_WRITE","NULL_2_X","S_2_X","NULL_2_S" from v$temp_cache_transfer;

CREATE OR REPLACE FORCE VIEW "V_$TEMP_EXTENT_MAP"("TABLESPACE_NAME","FILE_ID","BLOCK_ID","BYTES","BLOCKS","OWNER","RELATIVE_FNO") AS 
select "TABLESPACE_NAME","FILE_ID","BLOCK_ID","BYTES","BLOCKS","OWNER","RELATIVE_FNO" from v$temp_extent_map;

CREATE OR REPLACE FORCE VIEW "V_$TEMP_EXTENT_POOL"("TABLESPACE_NAME","FILE_ID","EXTENTS_CACHED","EXTENTS_USED","BLOCKS_CACHED","BLOCKS_USED","BYTES_CACHED","BYTES_USED","RELATIVE_FNO") AS 
select "TABLESPACE_NAME","FILE_ID","EXTENTS_CACHED","EXTENTS_USED","BLOCKS_CACHED","BLOCKS_USED","BYTES_CACHED","BYTES_USED","RELATIVE_FNO" from v$temp_extent_pool;

CREATE OR REPLACE FORCE VIEW "V_$TEMP_HISTOGRAM"("FILE#","SINGLEBLKRDTIM_MILLI","SINGLEBLKRDS") AS 
select "FILE#","SINGLEBLKRDTIM_MILLI","SINGLEBLKRDS" from v$temp_histogram;

CREATE OR REPLACE FORCE VIEW "V_$TEMP_PING"("FILE_NUMBER","FREQUENCY","X_2_NULL","X_2_NULL_FORCED_WRITE","X_2_NULL_FORCED_STALE","X_2_S","X_2_S_FORCED_WRITE","X_2_SSX","X_2_SSX_FORCED_WRITE","S_2_NULL","S_2_NULL_FORCED_STALE","SS_2_NULL","SS_2_RLS","WRB","WRB_FORCED_WRITE","RBR","RBR_FORCED_WRITE","RBR_FORCED_STALE","CBR","CBR_FORCED_WRITE","NULL_2_X","S_2_X","SSX_2_X","NULL_2_S","NULL_2_SS","OP_2_SS") AS 
select "FILE_NUMBER","FREQUENCY","X_2_NULL","X_2_NULL_FORCED_WRITE","X_2_NULL_FORCED_STALE","X_2_S","X_2_S_FORCED_WRITE","X_2_SSX","X_2_SSX_FORCED_WRITE","S_2_NULL","S_2_NULL_FORCED_STALE","SS_2_NULL","SS_2_RLS","WRB","WRB_FORCED_WRITE","RBR","RBR_FORCED_WRITE","RBR_FORCED_STALE","CBR","CBR_FORCED_WRITE","NULL_2_X","S_2_X","SSX_2_X","NULL_2_S","NULL_2_SS","OP_2_SS" from v$temp_ping;

CREATE OR REPLACE FORCE VIEW "V_$TEMP_SPACE_HEADER"("TABLESPACE_NAME","FILE_ID","BYTES_USED","BLOCKS_USED","BYTES_FREE","BLOCKS_FREE","RELATIVE_FNO") AS 
select "TABLESPACE_NAME","FILE_ID","BYTES_USED","BLOCKS_USED","BYTES_FREE","BLOCKS_FREE","RELATIVE_FNO" from v$temp_space_header;

CREATE OR REPLACE FORCE VIEW "V_$THREAD"("THREAD#","STATUS","ENABLED","GROUPS","INSTANCE","OPEN_TIME","CURRENT_GROUP#","SEQUENCE#","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","ENABLE_CHANGE#","ENABLE_TIME","DISABLE_CHANGE#","DISABLE_TIME") AS 
select "THREAD#","STATUS","ENABLED","GROUPS","INSTANCE","OPEN_TIME","CURRENT_GROUP#","SEQUENCE#","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","ENABLE_CHANGE#","ENABLE_TIME","DISABLE_CHANGE#","DISABLE_TIME" from v$thread;

CREATE OR REPLACE FORCE VIEW "V_$THRESHOLD_TYPES"("METRICS_ID","METRICS_GROUP_ID","OPERATOR_MASK","OBJECT_TYPE","ALERT_REASON_ID") AS 
SELECT "METRICS_ID","METRICS_GROUP_ID","OPERATOR_MASK","OBJECT_TYPE","ALERT_REASON_ID" FROM v$threshold_types;

CREATE OR REPLACE FORCE VIEW "V_$TIMER"("HSECS") AS 
select "HSECS" from v$timer;

CREATE OR REPLACE FORCE VIEW "V_$TIMEZONE_FILE"("FILENAME","VERSION") AS 
select "FILENAME","VERSION" from v$timezone_file;

CREATE OR REPLACE FORCE VIEW "V_$TIMEZONE_NAMES"("TZNAME","TZABBREV") AS 
select "TZNAME","TZABBREV" from v$timezone_names;

CREATE OR REPLACE FORCE VIEW "V_$TRANSACTION"("ADDR","XIDUSN","XIDSLOT","XIDSQN","UBAFIL","UBABLK","UBASQN","UBAREC","STATUS","START_TIME","START_SCNB","START_SCNW","START_UEXT","START_UBAFIL","START_UBABLK","START_UBASQN","START_UBAREC","SES_ADDR","FLAG","SPACE","RECURSIVE","NOUNDO","PTX","NAME","PRV_XIDUSN","PRV_XIDSLT","PRV_XIDSQN","PTX_XIDUSN","PTX_XIDSLT","PTX_XIDSQN","DSCN-B","DSCN-W","USED_UBLK","USED_UREC","LOG_IO","PHY_IO","CR_GET","CR_CHANGE","START_DATE","DSCN_BASE","DSCN_WRAP","START_SCN","DEPENDENT_SCN","XID","PRV_XID","PTX_XID") AS 
select "ADDR","XIDUSN","XIDSLOT","XIDSQN","UBAFIL","UBABLK","UBASQN","UBAREC","STATUS","START_TIME","START_SCNB","START_SCNW","START_UEXT","START_UBAFIL","START_UBABLK","START_UBASQN","START_UBAREC","SES_ADDR","FLAG","SPACE","RECURSIVE","NOUNDO","PTX","NAME","PRV_XIDUSN","PRV_XIDSLT","PRV_XIDSQN","PTX_XIDUSN","PTX_XIDSLT","PTX_XIDSQN","DSCN-B","DSCN-W","USED_UBLK","USED_UREC","LOG_IO","PHY_IO","CR_GET","CR_CHANGE","START_DATE","DSCN_BASE","DSCN_WRAP","START_SCN","DEPENDENT_SCN","XID","PRV_XID","PTX_XID" from v$transaction;

CREATE OR REPLACE FORCE VIEW "V_$TRANSACTION_ENQUEUE"("ADDR","KADDR","SID","TYPE","ID1","ID2","LMODE","REQUEST","CTIME","BLOCK") AS 
select "ADDR","KADDR","SID","TYPE","ID1","ID2","LMODE","REQUEST","CTIME","BLOCK" from v$transaction_enqueue;

CREATE OR REPLACE FORCE VIEW "V_$TRANSPORTABLE_PLATFORM"("PLATFORM_ID","PLATFORM_NAME","ENDIAN_FORMAT") AS 
select "PLATFORM_ID","PLATFORM_NAME","ENDIAN_FORMAT" from V$TRANSPORTABLE_PLATFORM;

CREATE OR REPLACE FORCE VIEW "V_$TYPE_SIZE"("COMPONENT","TYPE","DESCRIPTION","TYPE_SIZE") AS 
select "COMPONENT","TYPE","DESCRIPTION","TYPE_SIZE" from v$type_size;

CREATE OR REPLACE FORCE VIEW "V_$UNDOSTAT"("BEGIN_TIME","END_TIME","UNDOTSN","UNDOBLKS","TXNCOUNT","MAXQUERYLEN","MAXQUERYID","MAXCONCURRENCY","UNXPSTEALCNT","UNXPBLKRELCNT","UNXPBLKREUCNT","EXPSTEALCNT","EXPBLKRELCNT","EXPBLKREUCNT","SSOLDERRCNT","NOSPACEERRCNT","ACTIVEBLKS","UNEXPIREDBLKS","EXPIREDBLKS","TUNED_UNDORETENTION") AS 
select "BEGIN_TIME","END_TIME","UNDOTSN","UNDOBLKS","TXNCOUNT","MAXQUERYLEN","MAXQUERYID","MAXCONCURRENCY","UNXPSTEALCNT","UNXPBLKRELCNT","UNXPBLKREUCNT","EXPSTEALCNT","EXPBLKRELCNT","EXPBLKREUCNT","SSOLDERRCNT","NOSPACEERRCNT","ACTIVEBLKS","UNEXPIREDBLKS","EXPIREDBLKS","TUNED_UNDORETENTION" from v$undostat;

CREATE OR REPLACE FORCE VIEW "V_$VERSION"("BANNER") AS 
select "BANNER" from v$version;

CREATE OR REPLACE FORCE VIEW "V_$VPD_POLICY"("ADDRESS","PARADDR","SQL_HASH","SQL_ID","CHILD_NUMBER","OBJECT_OWNER","OBJECT_NAME","POLICY_GROUP","POLICY","POLICY_FUNCTION_OWNER","PREDICATE") AS 
select "ADDRESS","PARADDR","SQL_HASH","SQL_ID","CHILD_NUMBER","OBJECT_OWNER","OBJECT_NAME","POLICY_GROUP","POLICY","POLICY_FUNCTION_OWNER","PREDICATE" from v$vpd_policy;

CREATE OR REPLACE FORCE VIEW "V_$WAITCLASSMETRIC"("BEGIN_TIME","END_TIME","INTSIZE_CSEC","WAIT_CLASS#","WAIT_CLASS_ID","AVERAGE_WAITER_COUNT","DBTIME_IN_WAIT","TIME_WAITED","WAIT_COUNT") AS 
select "BEGIN_TIME","END_TIME","INTSIZE_CSEC","WAIT_CLASS#","WAIT_CLASS_ID","AVERAGE_WAITER_COUNT","DBTIME_IN_WAIT","TIME_WAITED","WAIT_COUNT" from v$waitclassmetric;

CREATE OR REPLACE FORCE VIEW "V_$WAITCLASSMETRIC_HISTORY"("BEGIN_TIME","END_TIME","INTSIZE_CSEC","WAIT_CLASS#","WAIT_CLASS_ID","AVERAGE_WAITER_COUNT","DBTIME_IN_WAIT","TIME_WAITED","WAIT_COUNT") AS 
select "BEGIN_TIME","END_TIME","INTSIZE_CSEC","WAIT_CLASS#","WAIT_CLASS_ID","AVERAGE_WAITER_COUNT","DBTIME_IN_WAIT","TIME_WAITED","WAIT_COUNT" from v$waitclassmetric_history;

CREATE OR REPLACE FORCE VIEW "V_$WAITSTAT"("CLASS","COUNT","TIME") AS 
select "CLASS","COUNT","TIME" from v$waitstat;

CREATE OR REPLACE FORCE VIEW "V_$_LOCK"("LADDR","KADDR","SADDR","RADDR","LMODE","REQUEST","CTIME","BLOCK") AS 
select "LADDR","KADDR","SADDR","RADDR","LMODE","REQUEST","CTIME","BLOCK" from v$_lock;

CREATE OR REPLACE FORCE VIEW "WM$WORKSPACE_SESSIONS_VIEW"("USERNAME","WORKSPACE","SID","SADDR") AS 
select st.username, wt.workspace, st.sid, st.saddr
from   v$lock dl,
       wmsys.wm$workspaces_table wt,
       sys.v$session st
where  dl.type    = 'UL' and
       dl.id1 + 1 = wt.workspace_lock_id and
       dl.sid     = st.sid;

CREATE OR REPLACE FORCE VIEW "WM_COMPRESS_BATCH_SIZES"("OWNER","TABLE_NAME","BATCH_SIZE","NUM_BATCHES") AS 
select /*+ RULE */ vt.owner, vt.table_name,
decode(dt.data_type,
'CHAR',decode(dt.num_buckets,null,'TABLE',0,'TABLE',1,'TABLE','TABLE/PRIMARY_KEY_RANGE'),
'VARCHAR2',decode(dt.num_buckets,null,'TABLE',0,'TABLE',1,'TABLE','TABLE/PRIMARY_KEY_RANGE'),
'NUMBER',decode(dt.num_buckets,null,'TABLE',0,'TABLE','TABLE/PRIMARY_KEY_RANGE'),
'DATE',decode(dt.num_buckets,null,'TABLE',0,'TABLE','TABLE/PRIMARY_KEY_RANGE'),
'TIMESTAMP',decode(dt.num_buckets,null,'TABLE',0,'TABLE','TABLE/PRIMARY_KEY_RANGE'),
'TABLE') BATCH_SIZE ,
decode(dt.data_type,
'CHAR',decode(dt.num_buckets,null,1,0,1,1,1,dt.num_buckets),
'VARCHAR2',decode(dt.num_buckets,null,1,0,1,1,1,dt.num_buckets),
'NUMBER',decode(dt.num_buckets,null,1,0,1,1,(sys.ltadm.GetSystemParameter('NUMBER_OF_COMPRESS_BATCHES')),dt.num_buckets),
'DATE',decode(dt.num_buckets,null,1,0,1,1,(sys.ltadm.GetSystemParameter('NUMBER_OF_COMPRESS_BATCHES')),dt.num_buckets),
'TIMESTAMP',decode(dt.num_buckets,null,1,0,1,1,(sys.ltadm.GetSystemParameter('NUMBER_OF_COMPRESS_BATCHES')),dt.num_buckets),
1) NUM_BATCHES
from wmsys.wm$versioned_tables vt, dba_ind_columns di, dba_tab_columns dt
where di.table_owner = vt.owner
and   di.table_name = vt.table_name || '_LT'
and   di.index_name = vt.table_name || '_PKI$'
and   di.column_position = 1
and   dt.owner = vt.owner
and   dt.table_name = vt.table_name || '_LT'
and   dt.column_name = di.column_name ;

CREATE OR REPLACE FORCE VIEW "WM_INSTALLATION"("NAME","VALUE") AS 
select "NAME","VALUE" from WMSYS.WM$ENV_VARS union
       select name,value from wmsys.wm$sysparam_all_values sv where isdefault = 'YES' and
         not exists (select 1 from wmsys.wm$env_vars ev where ev.name = sv.name)  WITH READ ONLY;

CREATE OR REPLACE FORCE VIEW "X_$KCBFWAIT"("ADDR","INDX","INST_ID","COUNT","TIME") AS 
select "ADDR","INDX","INST_ID","COUNT","TIME" from  X$KCBFWAIT;

CREATE OR REPLACE FORCE VIEW "X_$KSLLT"("ADDR","INDX","INST_ID","KSLLTNUM","KSLLTNGT","KSLLTNFA","KSLLTWGT","KSLLTWFF","KSLLTWKC","KSLLTWSL","KSLLTWTH","KSLLTMSX","KSLLTMXS","KSLLTMSW","KSLLTWSX","KSLLTWXS","KSLLTWSW","KSLLTHST0","KSLLTHST1","KSLLTHST2","KSLLTHST3","KSLLTHST4","KSLLTHST5","KSLLTHST6","KSLLTHST7","KSLLTHST8","KSLLTHST9","KSLLTHST10","KSLLTHST11","KSLLTCNM","KSLLTWHR","KSLLTWHY","KSLLTWTT","KSLLTHDT","KSLLTDNT","KSLLTWTW","YIELDS_KSLLT","MISSES_WL_KSLLT","YIELDS_WL_KSLLT","SLEEPS_WL_KSLLT","CLASS_KSLLT") AS 
select "ADDR","INDX","INST_ID","KSLLTNUM","KSLLTNGT","KSLLTNFA","KSLLTWGT","KSLLTWFF","KSLLTWKC","KSLLTWSL","KSLLTWTH","KSLLTMSX","KSLLTMXS","KSLLTMSW","KSLLTWSX","KSLLTWXS","KSLLTWSW","KSLLTHST0","KSLLTHST1","KSLLTHST2","KSLLTHST3","KSLLTHST4","KSLLTHST5","KSLLTHST6","KSLLTHST7","KSLLTHST8","KSLLTHST9","KSLLTHST10","KSLLTHST11","KSLLTCNM","KSLLTWHR","KSLLTWHY","KSLLTWTT","KSLLTHDT","KSLLTDNT","KSLLTWTW","YIELDS_KSLLT","MISSES_WL_KSLLT","YIELDS_WL_KSLLT","SLEEPS_WL_KSLLT","CLASS_KSLLT" from X$KSLLT;

CREATE OR REPLACE FORCE VIEW "X_$KSPPI"("ADDR","INDX","INST_ID","KSPPINM","KSPPITY","KSPPDESC","KSPPIFLG","KSPPILRMFLG","KSPPIHASH") AS 
select "ADDR","INDX","INST_ID","KSPPINM","KSPPITY","KSPPDESC","KSPPIFLG","KSPPILRMFLG","KSPPIHASH" from  X$KSPPI;

CREATE OR REPLACE FORCE VIEW "X_$KSPPSV"("ADDR","INDX","INST_ID","KSPPSTVL","KSPPSTDVL","KSPPSTDF","KSPPSTVF","KSPPSTCMNT") AS 
select "ADDR","INDX","INST_ID","KSPPSTVL","KSPPSTDVL","KSPPSTDF","KSPPSTVF","KSPPSTCMNT" from  X$KSPPSV;

CREATE OR REPLACE FORCE VIEW "X_$KSQST"("ADDR","INDX","INST_ID","KSQSTTYP","KSQSTREQ","KSQSTWAT","KSQSTSGT","KSQSTFGT","KSQSTWTM","KSQSTRSN","KSQSTEXPL","KSQSTEVIDX") AS 
select "ADDR","INDX","INST_ID","KSQSTTYP","KSQSTREQ","KSQSTWAT","KSQSTSGT","KSQSTFGT","KSQSTWTM","KSQSTRSN","KSQSTEXPL","KSQSTEVIDX" from  X$KSQST;

CREATE OR REPLACE FORCE VIEW "_ALL_INSTANTIATION_DDL"("REFRESH_TEMPLATE_ID","DDL_TEXT","DDL_NUM","PHASE") AS 
select refresh_template_id, ddl_text, ddl_num, phase
from system.repcat$_instantiation_ddl;

CREATE OR REPLACE FORCE VIEW "_ALL_REPCOLUMN"("SNAME","ONAME","TYPE","LONG_CNAME","ID","POS","FLAG","CTYPE","DATA_LENGTH","DATA_PRECISION","DATA_SCALE","NULL$","CHARSETID","CHARSETFORM","CNAME","CTYPE_TOID","CTYPE_OWNER","CTYPE_NAME","CTYPE_VERSION#","CTYPE_HASHCODE","TOP","PROPERTY","CHAR_LENGTH") AS 
select r.sname, r.oname, r.type, r.lcname, r.id, r.pos, r.flag, r.ctype,
  r.length, r.precision#, r.scale, r.null$, r.charsetid, r.charsetform,
  r.cname, r.toid, r.ctype_owner, r.ctype_name, r.version#, r.hashcode,
  r.top, r.property, r.clength
from all_tab_columns tc, system.repcat$_repcolumn r
where r.sname = tc.owner
  and r.oname = tc.table_name
  and ((NVL(r.top, r.cname) = tc.column_name) OR
       (r.top IS NULL AND r.cname = 'SYS_NC_OID$' AND
        -- sOID column
        utl_raw.bit_and(utl_raw.substr(r.property, 1, 1), '10') = '10'))
union
select
  r.sname, r.oname, r.type, r.lcname, r.id, r.pos, r.flag, r.ctype,
  r.length, r.precision#, r.scale, r.null$, r.charsetid, r.charsetform,
  r.cname, r.toid, r.ctype_owner, r.ctype_name, r.version#, r.hashcode,
  r.top, r.property, r.clength
from "_ALL_REPL_NESTED_TABLE_NAMES" nt, system.repcat$_repcolumn r
where r.sname = nt.owner
  and r.oname = nt.table_name;

CREATE OR REPLACE FORCE VIEW "_ALL_REPCOLUMN_GROUP"("SNAME","ONAME","GROUP_NAME","GROUP_COMMENT") AS 
select distinct cg.sname, cg.oname, cg.group_name, cg.group_comment
  from all_repcolumn_group cg, "_ALL_REPGROUPED_COLUMN" rcgcol
 where cg.group_name = rcgcol.group_name;

CREATE OR REPLACE FORCE VIEW "_ALL_REPCONFLICT"("SNAME","ONAME","CONFLICT_TYPE","REFERENCE_NAME","CONFLICT_TYPE_ID") AS 
select rc.sname, rc.oname, rc.conflict_type, rc.reference_name,
  decode(rc.conflict_type,
         'UPDATE',1,
         'UNIQUENESS',2,
         'DELETE',3, -1)
from all_repconflict rc
where rc.conflict_type in ('UNIQUENESS', 'DELETE')
union
select rc.sname, rc.oname, rc.conflict_type, rc.reference_name,
  decode(rc.conflict_type,
         'UPDATE',1,
         'UNIQUENESS',2,
         'DELETE',3, -1)
from all_repconflict rc, all_represolution resol
where rc.sname = resol.sname and
       rc.oname = resol.oname and
       rc.conflict_type = resol.conflict_type and
       resol.method_name in ('OVERWRITE', 'DISCARD', 'USER FUNCTION',
                             'USER FLAVOR FUNCTION')
union
select rc.sname, rc.oname, rc.conflict_type, rc.reference_name,
  decode(rc.conflict_type,
         'UPDATE',1,
         'UNIQUENESS',2,
         'DELETE',3, -1)
from all_repconflict rc, "_ALL_REPPARAMETER_COLUMN" rpcol
where rc.reference_name = rpcol.reference_name;

CREATE OR REPLACE FORCE VIEW "_ALL_REPEXTENSIONS"("EXTENSION_ID","REQUEST","MASTERDEF","EXPORT_REQUIRED","REPCATLOG_ID","EXTENSION_STATUS","FLASHBACK_SCN","BREAK_TRANS_TO_MASTERDEF","BREAK_TRANS_TO_NEW_MASTERS","PERCENTAGE_FOR_CATCHUP_MDEF","CYCLE_SECONDS_MDEF","PERCENTAGE_FOR_CATCHUP_NEW","CYCLE_SECONDS_NEW") AS 
select
  r.extension_id,
  r.request,
  r.masterdef,
  r.export_required,
  r.repcatlog_id,
  r.extension_status,
  r.flashback_scn,
  r.break_trans_to_masterdef,
  r.break_trans_to_new_masters,
  r.percentage_for_catchup_mdef,
  r.cycle_seconds_mdef,
  r.percentage_for_catchup_new,
  r.cycle_seconds_new
from dba_repextensions r;

CREATE OR REPLACE FORCE VIEW "_ALL_REPFLAVOR_OBJECTS"("FLAVOR_ID","GNAME","SNAME","ONAME","TYPE","COLUMNS_PRESENT","PUBLISHED","FLAG","GOWNER","VERSION#","HASHCODE") AS 
SELECT fo.flavor_id, fo.gname, fo.sname, fo.oname, fo.type, fo.columns_present,
       fl.published, ro.flag, fo.gowner, fo.version#, fo.hashcode
from system.repcat$_flavor_objects fo, all_objects o,
     system.repcat$_flavors fl, system.repcat$_repobject ro
where fo.gname     = fl.gname
  and fo.gowner    = fl.gowner
  and fo.flavor_id = fl.flavor_id
  and fo.sname     = ro.sname
  and fo.oname     = ro.oname
  and fo.type      = ro.type
  and fo.sname     = o.owner
  and fo.oname     = o.object_name
  and ro.id        = o.object_id
  and ((fo.type = -1 and o.object_type in ('VIEW', 'TABLE'))
       or
       (fo.type > 0 and o.object_type =
       DECODE (fo.type,
        1, 'INDEX',
        2, 'TABLE',
        4, 'VIEW',
        5, 'SYNONYM',
        6, 'SEQUENCE',
        7, 'PROCEDURE',
        8, 'FUNCTION',
        9, 'PACKAGE',
       11, 'PACKAGE BODY',
       12, 'TRIGGER',
       13, 'TYPE',
       14, 'TYPE BODY',
       32, 'INDEXTYPE',
       33, 'OPERATOR',
           'UNDEFINED')));

CREATE OR REPLACE FORCE VIEW "_ALL_REPGROUPED_COLUMN"("SNAME","ONAME","GROUP_NAME","COLUMN_NAME","POS") AS 
select
  gc.sname, gc.oname, gc.group_name,
  gc.column_name,
  gc.pos
from all_tab_columns tc, system.repcat$_grouped_column gc
where gc.sname = tc.owner
  and gc.oname = tc.table_name
  and (gc.column_name = tc.column_name OR
       (gc.column_name = 'SYS_NC_OID$' AND
        -- sOID column
        exists (select 1 from system.repcat$_repcolumn rc
                  where rc.sname = gc.sname
                    and rc.oname = gc.oname
                    and rc.cname = 'SYS_NC_OID$'
                    and utl_raw.bit_and(utl_raw.substr(rc.property, 1, 1),
                          '10') = '10')))
union
select
  gc.sname, gc.oname, gc.group_name,
  gc.column_name,
  gc.pos
from "_ALL_REPL_NESTED_TABLE_NAMES" nt, system.repcat$_grouped_column gc
where gc.sname = nt.owner
  and gc.oname = nt.table_name;

CREATE OR REPLACE FORCE VIEW "_ALL_REPL_NESTED_TABLE_NAMES"("OWNER","TABLE_NAME") AS 
select nt.owner, nt.table_name
from "_DBA_REPL_NESTED_TABLE_NAMES" nt, all_objects o
where nt.owner=o.owner and nt.table_name=o.object_name;

CREATE OR REPLACE FORCE VIEW "_ALL_REPPARAMETER_COLUMN"("SNAME","ONAME","CONFLICT_TYPE","REFERENCE_NAME","SEQUENCE_NO","METHOD_NAME","FUNCTION_NAME","PRIORITY_GROUP","PARAMETER_TABLE_NAME","PARAMETER_COLUMN_NAME","PARAMETER_SEQUENCE_NO","COLUMN_POS","ATTRIBUTE_SEQUENCE_NO") AS 
select
    p.sname,
    p.oname,
    decode(p.conflict_type_id,
           1, 'UPDATE',
           2, 'UNIQUENESS',
           3, 'DELETE',
           'UNDEFINED'),
    p.reference_name,
    p.sequence_no,
    r.method_name,
    r.function_name,
    r.priority_group,
    p.parameter_table_name,
    p.parameter_column_name,
    p.parameter_sequence_no,
    p.column_pos,
    p.attribute_sequence_no
from  system.repcat$_parameter_column p, all_tab_columns tc,
      system.repcat$_resolution r, system.repcat$_repcolumn rc
where p.sname = tc.owner
  and p.oname = tc.table_name
  and p.sname = rc.sname
  and p.oname = rc.oname
  and p.column_pos = rc.pos
  and ( (NVL(rc.top, rc.lcname) = tc.column_name) or
         -- SOID column
        (utl_raw.bit_and(utl_raw.substr(rc.property, 1, 1), '10') = '10') )
  and p.oname = p.parameter_table_name
  and p.sname = r.sname
  and p.oname = r.oname
  and p.conflict_type_id = r.conflict_type_id
  and p.reference_name = r.reference_name
  and p.sequence_no = r.sequence_no
union
select
    p.sname,
    p.oname,
    decode(p.conflict_type_id,
           1, 'UPDATE',
           2, 'UNIQUENESS',
           3, 'DELETE',
           'UNDEFINED'),
    p.reference_name,
    p.sequence_no,
    r.method_name,
    r.function_name,
    r.priority_group,
    p.parameter_table_name,
    p.parameter_column_name,
    p.parameter_sequence_no,
    p.column_pos,
    p.attribute_sequence_no
from  system.repcat$_parameter_column p, "_ALL_REPL_NESTED_TABLE_NAMES" nt,
      system.repcat$_resolution r
where p.sname = nt.owner
  and p.parameter_table_name = nt.table_name
  and p.oname = p.parameter_table_name
  and p.sname = r.sname
  and p.oname = r.oname
  and p.conflict_type_id = r.conflict_type_id
  and p.reference_name = r.reference_name
  and p.sequence_no = r.sequence_no;

CREATE OR REPLACE FORCE VIEW "_ALL_REPRESOLUTION"("SNAME","ONAME","CONFLICT_TYPE","REFERENCE_NAME","SEQUENCE_NO","METHOD_NAME","FUNCTION_NAME","PRIORITY_GROUP","RESOLUTION_COMMENT","CONFLICT_TYPE_ID") AS 
select  sname,
        oname,
        conflict_type,
        reference_name,
        sequence_no,
        method_name,
        function_name,
        priority_group,
        resolution_comment,
        decode(conflict_type,
               'UPDATE',1,
               'UNIQUENESS',2,
               'DELETE',3,
               -1)
  from all_represolution
 where conflict_type in ('UNIQUENESS', 'DELETE', 'UNDEFINED')
union
select  resol.sname,
        resol.oname,
        resol.conflict_type,
        resol.reference_name,
        resol.sequence_no,
        resol.method_name,
        resol.function_name,
        resol.priority_group,
        resol.resolution_comment,
        decode(resol.conflict_type,
               'UPDATE',1,
               'UNIQUENESS',2,
               'DELETE',3,
               -1)
  from all_represolution resol, "_ALL_REPCOLUMN_GROUP" rg
 where conflict_type = 'UPDATE'
   and resol.reference_name = rg.group_name;

CREATE OR REPLACE FORCE VIEW "_ALL_REPSITES_NEW"("EXTENSION_ID","GOWNER","GNAME","DBLINK","FULL_INSTANTIATION","MASTER_STATUS") AS 
select
  r.extension_id,
  r.gowner,
  r.gname,
  r.dblink,
  r.full_instantiation,
  r.master_status
from dba_repsites_new r;

CREATE OR REPLACE FORCE VIEW "_ALL_STREAMS_PROCESSES"("STREAMS_TYPE","STREAMS_NAME","RULE_SET_OWNER","RULE_SET_NAME","NEGATIVE_RULE_SET_OWNER","NEGATIVE_RULE_SET_NAME") AS 
select 'CAPTURE', capture_name, rule_set_owner, rule_set_name,
       negative_rule_set_owner, negative_rule_set_name
  from all_capture
union all
select 'APPLY', apply_name, rule_set_owner, rule_set_name,
       negative_rule_set_owner, negative_rule_set_name
  from all_apply
union all
select 'PROPAGATION', propagation_name, rule_set_owner, rule_set_name,
       negative_rule_set_owner, negative_rule_set_name
  from all_propagation
union all
select 'DEQUEUE', streams_name, rule_set_owner, rule_set_name,
       negative_rule_set_owner, negative_rule_set_name
  from all_streams_message_consumers;

CREATE OR REPLACE FORCE VIEW "_DBA_APPLY"("APPLY#","APPLY_NAME","QUEUE_OID","QUEUE_OWNER","QUEUE_NAME","STATUS","FLAGS","RULESET_OWNER","RULESET_NAME","MESSAGE_HANDLER","DDL_HANDLER","PRECOMMIT_HANDLER","APPLY_USERID","APPLY_DBLINK","APPLY_TAG","START_DATE","END_DATE","NEGATIVE_RULESET_OWNER","NEGATIVE_RULESET_NAME","SPARE1","SPARE2","SPARE3","STATUS_CHANGE_TIME","ERROR_NUMBER","ERROR_MESSAGE") AS 
select
  apply#, apply_name, queue_oid, queue_owner, queue_name, status, flags,
  ruleset_owner, ruleset_name, message_handler, ddl_handler, precommit_handler,
  apply_userid, apply_dblink, apply_tag, start_date, end_date,
  negative_ruleset_owner, negative_ruleset_name, spare1, spare2, spare3,
  status_change_time, error_number, error_message
from sys.streams$_apply_process;

CREATE OR REPLACE FORCE VIEW "_DBA_APPLY_CONF_HDLR_COLUMNS"("OBJECT_NUMBER","RESOLUTION_ID","COLUMN_NAME","SPARE1") AS 
select
  object_number, resolution_id, column_name, spare1
from sys.apply$_conf_hdlr_columns;

CREATE OR REPLACE FORCE VIEW "_DBA_APPLY_CONSTRAINT_COLUMNS"("CONSTRAINT_NAME","OBJECT_OWNER","OBJECT_NAME","COLUMN_NAME","COLUMN_POSITION") AS 
select constraint_name, owner object_owner, name object_name,
       cname column_name, cpos column_position
  from sys.apply$_constraint_columns;

CREATE OR REPLACE FORCE VIEW "_DBA_APPLY_ERROR"("LOCAL_TRANSACTION_ID","SOURCE_TRANSACTION_ID","SOURCE_DATABASE","QUEUE_OWNER","QUEUE_NAME","APPLY#","MESSAGE_NUMBER","MESSAGE_COUNT","MIN_STEP_NO","RECIPIENT_ID","RECIPIENT_NAME","SOURCE_COMMIT_SCN","ERROR_NUMBER","ERROR_MESSAGE","AQ_TRANSACTION_ID","SPARE1","SPARE2","SPARE3") AS 
select
  local_transaction_id, source_transaction_id, source_database,
  queue_owner, queue_name, apply#, message_number, message_count,
  min_step_no, recipient_id, recipient_name, source_commit_scn,
  error_number, error_message, aq_transaction_id,
  spare1, spare2, spare3
from sys.apply$_error;

CREATE OR REPLACE FORCE VIEW "_DBA_APPLY_ERROR_HANDLER"("OBJECT_NUMBER","METHOD_NAME","RESOLUTION_COLUMN","RESOLUTION_ID","SPARE1","LINKNAME") AS 
select
  eh.object_number, eh.method_name, eh.resolution_column, eh.resolution_id,
  eh.spare1, o.linkname
from sys.obj$ o, sys.apply$_error_handler eh
where eh.object_number = o.obj#;

CREATE OR REPLACE FORCE VIEW "_DBA_APPLY_MILESTONE"("APPLY#","SOURCE_DB_NAME","OLDEST_SCN","COMMIT_SCN","SYNCH_SCN","EPOCH","PROCESSED_SCN","APPLY_TIME","APPLIED_MESSAGE_CREATE_TIME","SPARE1","START_SCN") AS 
select
  apply#, source_db_name, oldest_scn, commit_scn, synch_scn, epoch,
  processed_scn, apply_time, applied_message_create_time, spare1, start_scn
from sys.streams$_apply_milestone;

CREATE OR REPLACE FORCE VIEW "_DBA_APPLY_OBJECTS"("OBJECT_OWNER","OBJECT_NAME","PROPERTY","APPLY_DATABASE_LINK","SPARE1","SPARE2","SPARE3","SPARE4") AS 
select
u.name, o.name, do.property, do.dblink, do.spare1, do.spare2,
do.spare3, do.spare4
from sys.streams$_dest_objs do, sys.obj$ o, sys.user$ u
  where o.obj# = do.object_number
   and o.owner# = u.user#;

CREATE OR REPLACE FORCE VIEW "_DBA_APPLY_OBJECT_CONSTRAINTS"("OBJECT_OWNER","OBJECT_NAME","PARENT_OBJECT_OWNER","PARENT_OBJECT_NAME") AS 
select owner object_owner, name object_name,
       powner parent_object_owner, pname parent_object_name
  from sys.apply$_virtual_obj_cons;

CREATE OR REPLACE FORCE VIEW "_DBA_APPLY_PROGRESS"("APPLY#","SOURCE_DB_NAME","XIDUSN","XIDSLT","XIDSQN","COMMIT_SCN","SPARE1") AS 
select
  apply#, source_db_name, xidusn, xidslt, xidsqn, commit_scn, spare1
from sys.streams$_apply_progress;

CREATE OR REPLACE FORCE VIEW "_DBA_APPLY_SOURCE_OBJ"("ID","OWNER","NAME","TYPE","SOURCE_DB_NAME","DBLINK","INST_SCN","IGNORE_SCN","SPARE1") AS 
select
  id, owner, name, decode(type, 2, 'TABLE', 'UNSUPPORTED') type,
  source_db_name, dblink, inst_scn, ignore_scn,
  spare1
from sys.apply$_source_obj;

CREATE OR REPLACE FORCE VIEW "_DBA_APPLY_SOURCE_SCHEMA"("SOURCE_DB_NAME","GLOBAL_FLAG","NAME","DBLINK","INST_SCN","SPARE1") AS 
select
  source_db_name, global_flag, name, dblink, inst_scn, spare1
from sys.apply$_source_schema;

CREATE OR REPLACE FORCE VIEW "_DBA_APPLY_TABLE_COLUMNS"("OBJECT_NUMBER","COLUMN_NAME","FLAG","DBLINK","SPARE1","SPARE2") AS 
select
  object_number, column_name, flag, dblink, spare1, spare2
from sys.streams$_dest_obj_cols;

CREATE OR REPLACE FORCE VIEW "_DBA_APPLY_TABLE_COLUMNS_H"("OBJECT_OWNER","OBJECT_NAME","COLUMN_NAME","APPLY_DATABASE_LINK") AS 
(select u.name, o.name, c.name, do.dblink
  from sys.user$ u, sys.obj$ o, sys.col$ c, sys.streams$_dest_objs do
 where do.object_number = o.obj#
   and o.obj# = c.obj#
   and o.owner# = u.user#
   and ((do.dblink = o.linkname) or (do.dblink is null and o.linkname is null))
minus
-- omit the pk constraint columns from the list of columns
select u.name, o.name, decode(ac.name, null, col.name, ac.name), do.dblink
  from sys.user$ u, sys.con$ c, sys.col$ col, sys.ccol$ cc, sys.cdef$ cd,
       sys.obj$ o, sys.attrcol$ ac, sys.streams$_dest_objs do
 where c.owner# = u.user#
   and o.obj# = do.object_number
   and c.con# = cd.con#
   and cd.type# = 2
   and cd.con# = cc.con#
   and cc.obj# = col.obj#
   and cc.intcol# = col.intcol#
   and cc.obj# = o.obj#
   and col.obj# = ac.obj#(+)
   and col.intcol# = ac.intcol#(+)
   and ((do.dblink = o.linkname) or (do.dblink is null and o.linkname is null))
minus
-- omit columns designated as key columns
select kc.sname, kc.oname, kc.cname, do.dblink
  from sys.streams$_key_columns kc, sys.streams$_dest_objs do,
       sys.obj$ o, sys.user$ u
 where kc.sname = u.name
   and u.user# = o.owner#
   and o.name = kc.oname
   and o.obj# = do.object_number
   and ((kc.dblink = do.dblink) or (kc.dblink is null and do.dblink is null))
   and ((do.dblink = o.linkname) or (do.dblink is null and o.linkname is null))
minus
-- omit the columns which are in sys.streams$_dest_obj_cols
-- These may have a different setting than the one mentioned in
-- streams$_dest_objs. These columns will be included seperately later.
select u.name, o.name, doc.column_name, do.dblink
  from sys.streams$_dest_objs do, sys.streams$_dest_obj_cols doc,
       sys.obj$ o, sys.user$ u
 where do.object_number = doc.object_number
   and doc.object_number = o.obj#
   and ((do.dblink = doc.dblink) or (do.dblink is null and doc.dblink is null))
   and ((do.dblink = o.linkname) or (do.dblink is null and o.linkname is null))
   and o.owner# = u.user#);

CREATE OR REPLACE FORCE VIEW "_DBA_CAPTURE"("QUEUE_OID","QUEUE_OWNER","QUEUE_NAME","CAPTURE#","CAPTURE_NAME","STATUS","RULESET_OWNER","RULESET_NAME","LOGMNR_SID","PREDUMPSCN","DUMPSEQBEG","DUMPSEQEND","POSTDUMPSCN","FLAGS","START_SCN","CAPTURE_USERID","SPARE1","SPARE2","SPARE3","USE_DBLINK","FIRST_SCN","SOURCE_DBNAME","SPARE4","SPARE5","SPARE6","SPARE7","NEGATIVE_RULESET_OWNER","NEGATIVE_RULESET_NAME","START_DATE","END_DATE","STATUS_CHANGE_TIME","ERROR_NUMBER","ERROR_MESSAGE","VERSION") AS 
select
  queue_oid, queue_owner, queue_name, capture#, capture_name,
  status, ruleset_owner, ruleset_name, logmnr_sid, predumpscn,
  dumpseqbeg, dumpseqend, postdumpscn, flags, start_scn, capture_userid,
  spare1, spare2, spare3, use_dblink, first_scn, source_dbname,
  spare4, spare5, spare6, spare7, negative_ruleset_owner,
  negative_ruleset_name, start_date, end_date, status_change_time,
  error_number, error_message, version
from sys.streams$_capture_process;

CREATE OR REPLACE FORCE VIEW "_DBA_REPL_NESTED_TABLE_NAMES"("OWNER","TABLE_NAME") AS 
select u.name, o.name from sys.user$ u, sys.obj$ o, sys.tab$ t
where u.user# = o.owner#
  and o.obj# = t.obj#
  and bitand(t.property, 8192) = 8192;

CREATE OR REPLACE FORCE VIEW "_DBA_STREAMS_MESSAGE_CONSUMERS"("STREAMS_NAME","QUEUE_OID","QUEUE_OWNER","QUEUE_NAME","RSET_OWNER","RSET_NAME","NEG_RSET_OWNER","NEG_RSET_NAME","SPARE1","SPARE2","SPARE3","SPARE4","SPARE5") AS 
select "STREAMS_NAME","QUEUE_OID","QUEUE_OWNER","QUEUE_NAME","RSET_OWNER","RSET_NAME","NEG_RSET_OWNER","NEG_RSET_NAME","SPARE1","SPARE2","SPARE3","SPARE4","SPARE5" from sys.streams$_message_consumers;

CREATE OR REPLACE FORCE VIEW "_DBA_STREAMS_MESSAGE_RULES"("STREAMS_NAME","STREAMS_TYPE","MSG_TYPE_OWNER","MSG_TYPE_NAME","MSG_RULE_VAR","RULE_OWNER","RULE_NAME","RULE_CONDITION","SPARE1","SPARE2","SPARE3","SPARE4","SPARE5") AS 
select "STREAMS_NAME","STREAMS_TYPE","MSG_TYPE_OWNER","MSG_TYPE_NAME","MSG_RULE_VAR","RULE_OWNER","RULE_NAME","RULE_CONDITION","SPARE1","SPARE2","SPARE3","SPARE4","SPARE5" from sys.streams$_message_rules;

CREATE OR REPLACE FORCE VIEW "_DBA_STREAMS_MSG_NOTIFICATIONS"("STREAMS_NAME","QUEUE_NAME","QUEUE_OWNER","RULE_SET_NAME","RULE_SET_OWNER","NEGATIVE_RULE_SET_NAME","NEGATIVE_RULE_SET_OWNER","NOTIFICATION_TYPE","NOTIFICATION_ACTION","USER_CONTEXT","CONTEXT_SIZE","ANY_CONTEXT","CONTEXT_TYPE") AS 
select c.streams_name, c.queue_name, c.queue_owner, c.rset_name, c.rset_owner,
       c.neg_rset_name, c.neg_rset_owner,
       decode(UPPER(substr(r.location_name,1,instr(r.location_name,'://') -1)),
              'PLSQL', 'PROCEDURE',
              'MAILTO', 'MAIL',
              'HTTP', 'HTTP'),
       substr(r.location_name, instr(r.location_name, '://') + 3),
       r.user_context, r.context_size, r.any_context, r.context_type
  from sys."_DBA_STREAMS_MESSAGE_CONSUMERS" c, sys.reg$ r
 where c.queue_owner||'.'||c.queue_name||':'||c.streams_name
       = r.subscription_name (+)
   and NVL(r.namespace, 1) = 1;

CREATE OR REPLACE FORCE VIEW "_DBA_STREAMS_NEWLY_SUPTED_10_1"("OWNER","TABLE_NAME","REASON","COMPATIBLE") AS 
select owner, table_name, reason, '10.1'
    from "_DBA_STREAMS_UNSUPPORTED_9_2" o
    where not exists
      (select 1 from "_DBA_STREAMS_UNSUPPORTED_10_1" i
         where i.owner = o.owner
           and i.table_name = o.table_name);

CREATE OR REPLACE FORCE VIEW "_DBA_STREAMS_PRIVILEGED_USER"("USER#","PRIVS") AS 
select "USER#","PRIVS" from sys.streams$_privileged_user;

CREATE OR REPLACE FORCE VIEW "_DBA_STREAMS_PROCESSES"("STREAMS_TYPE","STREAMS_NAME","RULE_SET_OWNER","RULE_SET_NAME","RULE_SET_TYPE") AS 
select 1 streams_type, c.capture_name streams_name,
       c.ruleset_owner, c.ruleset_name, 'POSITIVE'
  from streams$_capture_process c
union all
select 1 streams_type, c.capture_name streams_name,
       c.negative_ruleset_owner, c.negative_ruleset_name, 'NEGATIVE'
  from streams$_capture_process c
union all
select 2 streams_type, p.propagation_name streams_name,
       p.ruleset_schema, p.ruleset, 'POSITIVE'
  from streams$_propagation_process p
union all
select 2 streams_type, p.propagation_name streams_name,
       p.negative_ruleset_schema, p.negative_ruleset, 'NEGATIVE'
  from streams$_propagation_process p
union all
select 3 streams_type, a.apply_name streams_name,
       a.ruleset_owner, a.ruleset_name, 'POSITIVE'
  from streams$_apply_process a
union all
select 3 streams_type, a.apply_name streams_name,
       a.negative_ruleset_owner, a.negative_ruleset_name, 'NEGATIVE'
  from streams$_apply_process a
union all
select 4 streams_type, d.streams_name,
       d.rset_owner, d.rset_name, 'POSITIVE'
  from streams$_message_consumers d
union all
select 4 streams_type, d.streams_name,
       d.neg_rset_owner, d.neg_rset_name, 'NEGATIVE'
  from streams$_message_consumers d;

CREATE OR REPLACE FORCE VIEW "_DBA_STREAMS_QUEUES"("QUEUE_OWNER","QUEUE_NAME") AS 
select c.queue_owner queue_owner, c.queue_name queue_name
  from streams$_capture_process c
union
select p.source_queue_schema queue_owner, p.source_queue queue_name
  from streams$_propagation_process p
union
select a.queue_owner queue_owner, a.queue_name queue_name
  from streams$_apply_process a
union
select d.queue_owner queue_owner, d.queue_name queue_name
  from streams$_message_consumers d;

CREATE OR REPLACE FORCE VIEW "_DBA_STREAMS_RULES"("STREAMS_NAME","STREAMS_TYPE","RULE_TYPE","INCLUDE_TAGGED_LCR","SOURCE_DATABASE","RULE_OWNER","RULE_NAME","RULE_CONDITION","DML_CONDITION","SUBSETTING_OPERATION","SCHEMA_NAME","OBJECT_NAME","OBJECT_TYPE","SPARE1","SPARE2","SPARE3") AS 
select
  streams_name, streams_type, rule_type, include_tagged_lcr,
  source_database, rule_owner, rule_name, rule_condition, dml_condition,
  subsetting_operation, schema_name, object_name, object_type,
  spare1, spare2, spare3
from sys.streams$_rules;

CREATE OR REPLACE FORCE VIEW "_DBA_STREAMS_RULES_H"("STREAMS_TYPE","STREAMS_NAME","RULE_SET_TYPE","RULE_SET_OWNER","RULE_SET_NAME","RULE_OWNER","RULE_NAME","RULE_CONDITION") AS 
select sp.streams_type, sp.streams_name, sp.rule_set_type,
       sp.rule_set_owner, sp.rule_set_name,
       ru.name rule_owner, ro.name rule_name,
       r.condition
  from "_DBA_STREAMS_PROCESSES" sp, obj$ rso, user$ rsu,
       rule$ r, obj$ ro, user$ ru, rule_map$ rm
  where sp.rule_set_owner = rsu.name
    and sp.rule_set_name = rso.name
    and rso.owner# = rsu.user#
    and rso.obj# = rm.rs_obj#
    and r.obj# = rm.r_obj#
    and ro.obj# = rm.r_obj#
    and ru.user# = ro.owner#;

CREATE OR REPLACE FORCE VIEW "_DBA_STREAMS_UNSUPPORTED_10_1"("OWNER","TABLE_NAME","TPROPERTY","TTRIGFLAG","OFLAGS","TFLAGS","REASON","COMPATIBLE","AUTO_FILTERED") AS 
select
    distinct u.name, o.name,
             t.property, t.trigflag, o.flags, t.flags,
    (case
      when bitand(t.property, 128 + 512 ) != 0             /* 0x080 + 0x200 */
        then 'IOT with overflow'
      when bitand(t.property, 262208) = 262208                   /* 0x40040 */
        then 'IOT with LOB'                                     /* user lob */
      when bitand(t.flags, 268435456) = 268435456             /* 0x10000000 */
        then 'IOT with physical Rowid mapping'
      when bitand(t.flags, 536870912) = 536870912             /* 0x20000000 */
        then 'mapping table for physical rowid of IOT'
      when bitand(t.property, 2112) = 2112 /* 0x40+0x800 IOT + internal LOB */
        then 'IOT with LOB'                                 /* internal lob */
      when (bitand(t.property, 64) = 64 and
            bitand(t.flags, 131072) = 131072)
        then 'IOT with row movement'                             /* 0x20000 */
      when bitand(t.property,
                  1                                           /* typed table */
                + 2                                           /* ADT columns */
                + 4                                  /* nested table columns */
                + 8                                           /* REF columns */
                + 16                                        /* array columns */
                + 4096                                             /* pk OID */
                + 8192       /* 0x2000 storage table for nested table column */
                + 65536                                      /* 0x10000 sOID */
               ) != 0
        then 'column with user-defined type'
      when (exists
            (select 1 from sys.col$ c
             where t.obj# = c.obj#
               and
               ( (bitand(c.property, 32) = 32                      /* hidden */
                 ) or
                 (c.type# not in (
                     1,                                          /* varchar2 */
                     2,                                            /* number */
                     8,                                              /* long */
                     12,                                             /* date */
                     24,                                         /* long raw */
                     96,                                             /* char */
                     100,                                    /* binary float */
                     101,                                   /* binary double */
                     112,                                  /* clob and nclob */
                     113,                                            /* blob */
                     180,                                  /* timestamp (..) */
                     181,                    /* timestamp(..) with time zone */
                     182,                      /* interval year(..) to month */
                     183,                  /* interval day(..) to second(..) */
                     208,                                          /* urowid */
                     231)              /* timestamp(..) with local time zone */
                   and (c.type# != 23                     /* raw not raw oid */
                     or (c.type# = 23 and bitand(c.property, 2) = 2))
                 ) or
                 (bitand(c.property, 2) = 2                    /* OID column */
                 )
               )
             )
          )
        then 'unsupported column exists'
      when bitand(t.property, 1) = 1
        then 'object table'
      when bitand(t.property, 131072) = 131072
        then 'AQ queue table'
      /* x00400000 + 0x00800000 */
      when bitand(t.property, 4194304 + 8388608) != 0
        then 'temporary table'
      when bitand(t.property, 134217728) = 134217728          /* 0x08000000 */
        then 'sub object'
      when bitand(t.property, 2147483648) = 2147483648        /* 0x80000000 */
        then 'external table'
      when bitand(t.property, 32768) = 32768     /* 0x8000 has FILE columns */
        then 'FILE column exists'
      when
        (exists  /* TO DO: add some bit to tab$.property */
          (select 1
           from   sys.mlog$ ml
           where  ml.mowner = u.name and ml.log = o.name)
        )
        then 'materialized view log'
      when bitand(t.trigflag, 268435456) = 268435456
        then 'streams unsupported object'
      when bitand(o.flags, 16) = 16
        then 'domain index'
      else null end) reason,
      100,                                                     /* compatible */
    (case
      when bitand(t.trigflag, 268435456) = 268435456  /* streams unsupported */
        then 'YES'
      /* x00400000 + 0x00800000  : Temp table */
      when bitand(t.property, 4194304 + 8388608) != 0
        then 'YES'
      when bitand(o.flags, 16) = 16                          /* domain index */
        then 'YES'
      else 'NO' end) auto_filtered
  from sys.obj$ o, sys.user$ u, sys.tab$ t --, sys.seg$ s
    where t.obj# = o.obj#
      and o.owner# = u.user#
      and u.name not in ('SYS', 'SYSTEM', 'CTXSYS')
      and bitand(o.flags,
                  2                                      /* temporary object */
                + 4                               /* system generated object */
                + 32                                 /* in-memory temp table */
                + 128                          /* dropped table (RecycleBin) */
                  ) = 0
      and
      (  (bitand(t.property,
                128         /* 0x00000080              IOT with row overflow */
              + 256         /* 0x00000100            IOT with row clustering */
              + 512         /* 0x00000200               iot OVeRflow segment */
             ) != 0
          ) or
          (bitand(t.flags,
                268435456    /* 0x10000000   IOT with Phys Rowid/mapping tab */
              + 536870912    /* 0x20000000 Mapping Tab for Phys rowid of IOT */
             ) != 0
          ) or
          (bitand(t.property, 262208) = 262208  /* 0x40+0x40000 IOT+user LOB */
          ) or
          (bitand(t.property, 2112) = 2112  /* 0x40+0x800 IOT + internal LOB */
          ) or
          (bitand(t.property, 64) != 0 and
             bitand(t.flags, 131072) != 0
          ) or                                    /* IOT with "Row Movement" */
          (bitand(t.property,
                  1                                           /* typed table */
                + 2                                           /* ADT columns */
                + 4                                  /* nested table columns */
                + 8                                           /* REF columns */
                + 16                                        /* array columns */
                + 4096                                             /* pk OID */
                + 8192       /* 0x2000 storage table for nested table column */
                + 65536                                      /* 0x10000 sOID */
               ) != 0
          ) or
          (exists                                      /* unsupported column */
            (select 1 from sys.col$ c
             where t.obj# = c.obj#
               and
               ( (bitand(c.property, 32) = 32 and                  /* hidden */
                   /* not function-based index */
                   (not exists (select 1 from sys.ind$ i
                                  where i.bo# = t.obj#
                                    and bitand(i.property, 16) = 16)) and
                   /* not descending index */
                   (bitand(c.property, 131072) != 131072)         /* 0x20000 */
                 ) or
                 (c.type# not in (
                     1,                                          /* varchar2 */
                     2,                                            /* number */
                     8,                                              /* long */
                     12,                                             /* date */
                     24,                                         /* long raw */
                     96,                                             /* char */
                     100,                                    /* binary float */
                     101,                                   /* binary double */
                     112,                                  /* clob and nclob */
                     113,                                            /* blob */
                     180,                                  /* timestamp (..) */
                     181,                    /* timestamp(..) with time zone */
                     182,                      /* interval year(..) to month */
                     183,                  /* interval day(..) to second(..) */
                     208,                                          /* urowid */
                     231)              /* timestamp(..) with local time zone */
                   and (c.type# != 23                     /* raw not raw oid */
                     or (c.type# = 23 and bitand(c.property, 2) = 2))
                 ) or
                 (bitand(c.property, 2) = 2                    /* OID column */
                 )
               )
             )
          ) or
          (bitand(t.property, 1) = 1                         /* object table */
          ) or
          (bitand(t.property,
                131072      /* 0x00020000 table is used as an AQ queue table */
              + 4194304     /* 0x00400000             global temporary table */
              + 8388608     /* 0x00800000   session-specific temporary table */
              + 134217728   /* 0x08000000                    Is a Sub object */
              + 2147483648   /* 0x80000000                    eXternal TaBle */
             ) != 0
          ) or
          (bitand(t.property, 32768) = 32768      /* 0x8000 has FILE columns */
          ) or
          (bitand(t.trigflag, 268435456) = 268435456/* 0x10000000 strm unsup */
          ) or
          (exists /* TO DO: add some bit to tab$.property */
            (select 1
             from sys.mlog$ ml where ml.mowner = u.name and ml.log = o.name
            )
          )
        );

CREATE OR REPLACE FORCE VIEW "_DBA_STREAMS_UNSUPPORTED_9_2"("OWNER","TABLE_NAME","TPROPERTY","TTRIGFLAG","OFLAGS","TFLAGS","REASON","COMPATIBLE","AUTO_FILTERED") AS 
select
    distinct u.name, o.name,
             t.property, t.trigflag, o.flags, t.flags,
    (case
      when
        ( (bitand(t.property,
                64                                                    /* IOT */
              + 128         /* 0x00000080              IOT with row overflow */
              + 256         /* 0x00000100            IOT with row clustering */
              + 512         /* 0x00000200               iot OVeRflow segment */
             ) != 0
          ) or
          (bitand(t.flags,
                268435456    /* 0x10000000   IOT with Phys Rowid/mapping tab */
              + 536870912    /* 0x20000000 Mapping Tab for Phys rowid of IOT */
             ) != 0
          ) or
          (bitand(t.property, 262208) = 262208  /* 0x40+0x40000 IOT+user LOB */
          ) or
          (bitand(t.property, 2112) = 2112  /* 0x40+0x800 IOT + internal LOB */
          ) or
          (bitand(t.property, 64) != 0 and                           /* 0x40 */
             bitand(t.flags, 131072) != 0                         /* 0x20000 */
          )
        )
        then 'IOT'
      when bitand(t.property,
                  1                                           /* typed table */
                + 2                                           /* ADT columns */
                + 4                                  /* nested table columns */
                + 8                                           /* REF columns */
                + 16                                        /* array columns */
                + 4096                                             /* pk OID */
                + 8192              /* storage table for nested table column */
                + 65536                                              /* sOID */
               ) != 0
         then 'column with user-defined type'
      when (exists
            (select 1
             from   sys.col$ c
             where  t.obj# = c.obj#
               and
               ( (bitand(c.property, 32) = 32                      /* hidden */
                 ) or
                 (c.type# not in (
                     1,                                          /* varchar2 */
                     2,                                            /* number */
                     12,                                             /* date */
                     96,                                             /* char */
                     100,                                    /* binary float */
                     101,                                   /* binary double */
                     112,                                  /* clob and nclob */
                     113,                                            /* blob */
                     180,                                  /* timestamp (..) */
                     181,                    /* timestamp(..) with time zone */
                     182,                      /* interval year(..) to month */
                     183,                  /* interval day(..) to second(..) */
                     231)              /* timestamp(..) with local time zone */
                   and (c.type# != 23                     /* raw not raw oid */
                     or (c.type# = 23 and bitand(c.property, 2) = 2))
                 ) or
                 (c.segcol# = 0             /* virtual column: not supported */
                 ) or
                 (bitand(c.property, 2) = 2                    /* OID column */
                 ) or
                 (c.type# = 112 and c.charsetform = 2               /* NCLOB */
                 ) or
                 (c.type# = 112 and c.charsetform = 1 and
                  /* discussed with JIYANG, varying width CLOB */
                  c.charsetid >= 800
                 )
               )
             )
          )
         then 'unsupported column exists'
      when bitand(t.property, 1) = 1
        then 'object table'
      when bitand(t.property, 131072) = 131072
        then 'AQ queue table'
      /* x00400000 + 0x00800000 */
      when bitand(t.property, 4194304 + 8388608) != 0
        then 'temporary table'
      when bitand(t.property, 134217728) = 134217728          /* 0x08000000 */
        then 'sub object'
      when bitand(t.property, 2147483648) = 2147483648
        then 'external table'
      when bitand(t.property, 33554432 + 67108864) != 0
        then 'materialized view'
      when bitand(t.property, 32768) = 32768     /* 0x8000 has FILE columns */
        then 'FILE column exists'
      when
        (exists
          (select 1
           from sys.mlog$ ml where ml.mowner = u.name and ml.log = o.name
          )
        )
        then 'materialized view log'
      when bitand(t.flags, 262144) = 262144
        then 'materalized view container table'
      when bitand(t.trigflag, 268435456) = 268435456
        then 'streams unsupported object'
      when bitand(o.flags, 16) = 16
        then 'domain index'
      else null end) reason,
      92,                                                      /* compatible */
      'NO'                                                  /* auto filtered */
  from sys.obj$ o, sys.user$ u, sys.tab$ t
  where t.obj# = o.obj#
    and o.owner# = u.user#
    and u.name not in ('SYS', 'SYSTEM', 'CTXSYS')
    and bitand(o.flags,
                  2                                      /* temporary object */
                + 4                               /* system generated object */
                + 32                                 /* in-memory temp table */
                + 128                          /* dropped table (RecycleBin) */
                  ) = 0
    and
      (  (bitand(t.property,
                64                                                    /* IOT */
              + 128         /* 0x00000080              IOT with row overflow */
              + 256         /* 0x00000100            IOT with row clustering */
              + 512         /* 0x00000200               iot OVeRflow segment */
             ) != 0
          ) or
          (bitand(t.flags,
                268435456    /* 0x10000000   IOT with Phys Rowid/mapping tab */
              + 536870912    /* 0x20000000 Mapping Tab for Phys rowid of IOT */
             ) != 0
          ) or
          (bitand(t.property, 262208) = 262208  /* 0x40+0x40000 IOT+user LOB */
          ) or
          (bitand(t.property, 2112) = 2112  /* 0x40+0x800 IOT + internal LOB */
          ) or
          (bitand(t.property, 64) != 0 and                           /* 0x40 */
             bitand(t.flags, 131072) != 0                         /* 0x20000 */
          ) or                                    /* IOT with "Row Movement" */
          (bitand(t.property,
                  1                                           /* typed table */
                + 2                                           /* ADT columns */
                + 4                                  /* nested table columns */
                + 8                                           /* REF columns */
                + 16                                        /* array columns */
                + 4096                                             /* pk OID */
                + 8192              /* storage table for nested table column */
                + 65536                                              /* sOID */
               ) != 0
          ) or
          (exists                                      /* unsupported column */
            (select 1 from sys.col$ c
             where t.obj# = c.obj#
               and
               ( (bitand(c.property, 32) = 32                      /* hidden */
                 ) or
                 (c.type# not in (
                     1,                                          /* varchar2 */
                     2,                                            /* number */
                     12,                                             /* date */
                     96,                                             /* char */
                     112,                                  /* clob and nclob */
                     113,                                            /* blob */
                     180,                                  /* timestamp (..) */
                     181,                    /* timestamp(..) with time zone */
                     182,                      /* interval year(..) to month */
                     183,                  /* interval day(..) to second(..) */
                     231)              /* timestamp(..) with local time zone */
                   and (c.type# != 23                     /* raw not raw oid */
                     or (c.type# = 23 and bitand(c.property, 2) = 2))
                 ) or
                 (c.segcol# = 0             /* virtual column: not supported */
                 ) or
                 (bitand(c.property, 2) = 2                    /* OID column */
                 ) or
                 (c.type# = 112 and c.charsetform = 2               /* NCLOB */
                 ) or
                 (c.type# = 112 and c.charsetform = 1 and
                  /* discussed with JIYANG, varying width CLOB */
                  c.charsetid >= 800
                 )
               )
             )
          ) or
          (bitand(t.property, 1) = 1                         /* object table */
          ) or
          (bitand(t.property,
                131072      /* 0x00020000 table is used as an AQ queue table */
              + 4194304     /* 0x00400000             global temporary table */
              + 8388608     /* 0x00800000   session-specific temporary table */
              + 33554432    /* 0x02000000        Read Only Materialized View */
              + 67108864    /* 0x04000000            Materialized View table */
              + 134217728   /* 0x08000000                    Is a Sub object */
              + 2147483648   /* 0x80000000                    eXternal TaBle */
             ) != 0
          ) or
          (bitand(t.flags,
                  262144              /* 0x00040000   MV Container Table, MV */
                 ) = 262144
          ) or
          (bitand(t.property, 32768) = 32768      /* 0x8000 has FILE columns */
          ) or
          (bitand(t.trigflag, 268435456) = 268435456/* 0x10000000 strm unsup */
          ) or
          (exists
            (select 1
             from sys.mlog$ ml where ml.mowner = u.name and ml.log = o.name
            )
          )
        );

CREATE OR REPLACE FORCE VIEW "_DEFSCHEDULE"("DBLINK","JOB","INTERVAL","NEXT_DATE","LAST_DATE","DISABLED","LAST_TXN_COUNT","LAST_ERROR_NUMBER","LAST_ERROR_MESSAGE","CATCHUP","TOTAL_TXN_COUNT","AVG_THROUGHPUT","AVG_LATENCY","TOTAL_BYTES_SENT","TOTAL_BYTES_RECEIVED","TOTAL_ROUND_TRIPS","TOTAL_ADMIN_COUNT","TOTAL_ERROR_COUNT","TOTAL_SLEEP_TIME","DISABLED_INTERNALLY_SET","PROPAGATION_WAS_ENABLED") AS 
SELECT s.dblink, s.job, j.interval# interval, next_date,
         j.last_date, s.disabled, s.last_txn_count, s.last_error_number,
         s.last_error_message, s.catchup,
         s.total_txn_count,
         to_number(decode(s.total_prop_time_throughput, 0, NULL,
         s.total_txn_count/s.total_prop_time_throughput)) avg_throughput,
         to_number(decode(s.total_txn_count, 0, NULL,
         s.total_prop_time_latency/s.total_txn_count)) avg_latency,
         s.to_communication_size total_bytes_sent,
         s.from_communication_size total_bytes_received,
         s.spare1 total_round_trips,
         s.spare2 total_admin_count,
         s.spare3 total_error_count,
         s.spare4 total_sleep_time,
         DECODE(utl_raw.bit_and(utl_raw.substr(s.flag, 1, 1), '02'),
               '00', 'N', 'Y') disabled_internally_set,
         DECODE(utl_raw.bit_and(utl_raw.substr(s.flag, 1, 1), '01'),
               '00', 'N', 'Y') propagation_was_enabled
    FROM system.def$_destination s, sys.job$ j where s.job = j.job(+);

CREATE OR REPLACE FORCE VIEW "_DEFTRANDEST"("DEFERRED_TRAN_ID","DELIVERY_ORDER","DBLINK","CATCHUP") AS 
select C.enq_tid deferred_tran_id, C.cscn delivery_order, D.dblink,
         D.catchup
    from system.def$_aqcall C, system.def$_destination D
    where C.cscn IS NOT NULL
      AND C.cscn >= D.last_delivered
      AND (C.cscn > D.last_delivered
          OR
          (C.cscn = D.last_delivered
           AND (C.enq_tid > D.last_enq_tid)))
      and (( C.recipient_key = 0
            AND EXISTS (
              select /*+ index(CD def$_calldest_primary) */ NULL
                from system.def$_calldest CD
                where  CD.enq_tid=C.enq_tid
                  AND  CD.dblink = D.dblink
                  AND  CD.catchup = D.catchup ))
          OR ( C.recipient_key > 0
            AND ( (EXISTS (
                     SELECT NULL
                       FROM system.repcat$_repprop p
                         WHERE D.dblink = P.dblink
                           AND D.catchup = P.extension_id
                           AND P.how = 1
                           AND P.recipient_key = C.recipient_key
                           AND ((P.delivery_order is NULL)
                              OR (P.delivery_order < C.cscn))))
               OR (EXISTS (
                     SELECT NULL
                       from system.def$_aqcall C2, system.repcat$_repprop P
                       WHERE C2.enq_tid=C.enq_tid
                         AND C2.cscn IS NULL
                         AND D.dblink = P.dblink
                         AND D.catchup = P.extension_id
                         AND P.how = 1
                         AND P.recipient_key = C2.recipient_key
                         AND ((P.delivery_order is NULL) OR
                              (P.delivery_order < C.cscn)))))));

CREATE OR REPLACE FORCE VIEW "_USER_REPL_NESTED_TABLE_NAMES"("TABLE_NAME") AS 
select nt.table_name
from "_DBA_REPL_NESTED_TABLE_NAMES" nt, sys.user$ u
where nt.owner = u.name
and   u.user#  = userenv('SCHEMAID');

CREATE OR REPLACE FORCE VIEW "_utl$_gnp_ind"("CTYPE","INDEX_NAME","COMPONENT_NAME","TABLE_ID","TAB_OWNER_ID","IDX_ID","IND_OWNER_ID","IND_OWNER_NAME","COMP_ID","TCOMP_ID","CCOMP_ID","TCCOMP_ID","STATUS","LOCALITY","DEGREE","ROWCNT") AS 
SELECT 'G', Obj_Idx.name, NULL, Obj_Tab.obj#, Obj_Tab.owner#,
       Obj_Idx.obj#, Obj_Idx.owner#, Usr.name, NULL, NULL, NULL, NULL,
       DECODE(bitand(Ind.flags, 1), 1, 'U', 'V'),
       'G', Ind.degree,
       CASE WHEN Tab.rowcnt IS NOT NULL THEN Tab.rowcnt
            WHEN Seg.file# IS NULL THEN 1000000000
            ELSE CEIL((dbms_space_admin.segment_number_blocks(TSpc.ts#,
              Seg.file#, Seg.block#, Seg.type#, Seg.cachehint,
              NVL(Seg.spare1, 0), Tab.dataobj#, Seg.blocks) *
              TSpc.blocksize) / 100) END
FROM
     sys.obj$ Obj_Idx,
     sys.user$ Usr,
     sys.ind$ Ind,
     sys.obj$ Obj_Tab,
     sys.ts$ TSpc,
     sys.tab$ Tab
LEFT OUTER JOIN
     sys.seg$ Seg
ON Seg.file# = Tab.file#
  AND Seg.block# = Tab.block#
  AND Seg.ts# = Tab.ts#
  AND Seg.type# = 5
WHERE Obj_Idx.owner# = Usr.user#
  AND Obj_Tab.obj# = Ind.bo#
  AND Ind.obj# = Obj_Idx.obj#
  AND NOT (bitand(Ind.property, 2) = 2) -- 0x02 = Partitioned Index
  AND Tab.obj# = Obj_Tab.obj#
  AND Tab.ts# = TSpc.ts#;

CREATE OR REPLACE FORCE VIEW "_utl$_gp_ind_parts"("CTYPE","INDEX_NAME","COMPONENT_NAME","TABLE_ID","TAB_OWNER_ID","IDX_ID","IND_OWNER_ID","IND_OWNER_NAME","COMP_ID","TCOMP_ID","CCOMP_ID","TCCOMP_ID","STATUS","LOCALITY","DEGREE","ROWCNT") AS 
SELECT 'P', Obj_IdxPart.name, Obj_IdxPart.subname, Obj_Tab.obj#,
       Obj_Tab.owner#, Obj_Idx.obj#, Obj_Idx.owner#,
       Usr.name, Obj_IdxPart.obj#, NULL, NULL, NULL,
       DECODE(bitand(IndPart.flags, 1), 1, 'U', 'V'),
       'G', Ind.degree,
       CASE WHEN Tab.rowcnt IS NOT NULL THEN Tab.rowcnt / PartObj.partcnt
            WHEN Seg.file# IS NULL THEN 1000000000
            ELSE CEIL((dbms_space_admin.segment_number_blocks(TSpc.ts#,
              Seg.file#, Seg.block#, Seg.type#, Seg.cachehint,
              NVL(Seg.spare1, 0), Tab.dataobj#, Seg.blocks) *
              TSpc.blocksize) / (100 * PartObj.partcnt)) END
FROM
     sys.user$ Usr,
     sys.obj$ Obj_Idx,
     sys.obj$ Obj_Tab,
     sys.partobj$ PartObj,
     sys.ind$ Ind,
     sys.obj$ Obj_IdxPart,
     sys.indpart$ IndPart,
     sys.ts$ TSpc,
     sys.tab$ Tab
LEFT OUTER JOIN
     sys.seg$ Seg
ON Seg.file# = Tab.file#
  AND Seg.block# = Tab.block#
  AND Seg.ts# = Tab.ts#
  AND Seg.type# = 5
WHERE IndPart.bo# = Ind.obj#
  AND Ind.bo# = Obj_Tab.obj#
  AND IndPart.obj# = Obj_IdxPart.obj#
  AND Ind.obj# = Obj_Idx.obj#
  AND PartObj.obj# = Ind.obj#
  AND bitand(PartObj.flags, 1) = 0 -- 0x01 = Local index
  AND Obj_Idx.owner# = Usr.user#
  AND Tab.obj# = Obj_Tab.obj#
  AND Tab.ts# = TSpc.ts#;

CREATE OR REPLACE FORCE VIEW "_utl$_lc_ind_subs"("CTYPE","INDEX_NAME","COMPONENT_NAME","TABLE_ID","TAB_OWNER_ID","IDX_ID","IND_OWNER_ID","IND_OWNER_NAME","COMP_ID","TCOMP_ID","CCOMP_ID","TCCOMP_ID","STATUS","LOCALITY","DEGREE","ROWCNT") AS 
SELECT 'C', Obj_IdxSubPart.name, Obj_IdxSubPart.subname,
       Obj_Tab.obj#, Obj_Tab.owner#, Obj_Idx.obj#, Obj_Idx.owner#,
       Usr.name, Obj_IdxSubPart.obj#, TabSubPart.obj#,
       IndComPart.obj#, TabComPart.obj#,
       DECODE(bitand(IndSubPart.flags, 1), 1, 'U', 'V'),
       'L', Ind.degree,
       CASE WHEN TabSubPart.rowcnt IS NOT NULL THEN TabSubPart.rowcnt
            WHEN Seg.file# IS NULL THEN 1000000000
            ELSE CEIL((dbms_space_admin.segment_number_blocks(TSpc.ts#,
              Seg.file#, Seg.block#, Seg.type#, Seg.cachehint,
              NVL(Seg.spare1, 0), TabSubPart.dataobj#, Seg.blocks) *
              TSpc.blocksize) / 100) END
FROM
     sys.obj$ Obj_IdxSubPart,
     sys.indsubpart$ IndSubPart,
     sys.indcompart$ IndComPart,
     sys.user$ Usr,
     sys.obj$ Obj_Idx,
     sys.Ind$ Ind,
     sys.obj$ Obj_Tab,
     sys.partobj$ PartObj,
     sys.tabcompart$ TabComPart,
     sys.tab$ Tab,
     sys.ts$ TSpc,
     sys.tabsubpart$ TabSubPart
LEFT OUTER JOIN
     sys.seg$ Seg
ON   Seg.file# = TabSubPart.file#
  AND Seg.block# = TabSubPart.block#
  AND Seg.ts# = TabSubPart.ts#
  AND Seg.type# = 5
WHERE IndComPart.obj# = IndSubPart.pobj#
  AND IndComPart.bo# = Ind.obj#
  AND Ind.bo# = Obj_Tab.obj#
  AND Obj_IdxSubPart.obj# = IndSubPart.obj#
  AND Obj_Idx.owner# = Usr.user#
  AND Ind.obj# = Obj_Idx.obj#
  AND PartObj.obj# = Ind.obj#
  AND TabComPart.bo# = Obj_Tab.obj#
  AND TabComPart.part# = IndComPart.part#
  AND TabComPart.obj# = TabSubPart.pobj#
  AND TabSubPart.subpart# = IndSubPart.subpart#
  AND Tab.obj# = Obj_Tab.obj#
  AND TabSubPart.ts# = TSpc.ts#;

CREATE OR REPLACE FORCE VIEW "_utl$_lnc_ind_parts"("CTYPE","INDEX_NAME","COMPONENT_NAME","TABLE_ID","TAB_OWNER_ID","IDX_ID","IND_OWNER_ID","IND_OWNER_NAME","COMP_ID","TCOMP_ID","CCOMP_ID","TCCOMP_ID","STATUS","LOCALITY","DEGREE","ROWCNT") AS 
SELECT 'L', Obj_IdxPart.name, Obj_IdxPart.subname, Obj_Tab.obj#,
       Obj_Tab.owner#, Obj_Idx.obj#, Obj_Idx.owner#,
       Usr.name, Obj_IdxPart.obj#, TabPart.obj#, NULL, NULL,
       DECODE(bitand(IndPart.flags, 1), 1, 'U', 'V'),
       'L', Ind.degree,
       CASE WHEN TabPart.rowcnt IS NOT NULL THEN TabPart.rowcnt
            WHEN Seg.file# IS NULL THEN 1000000000
            ELSE CEIL((dbms_space_admin.segment_number_blocks(TSpc.ts#,
             Seg.file#, Seg.block#, Seg.type#, Seg.cachehint,
             NVL(Seg.spare1, 0), TabPart.dataobj#, Seg.blocks) *
             TSpc.blocksize) / 100) END
FROM
     sys.obj$ Obj_Idx,
     sys.user$ Usr,
     sys.partobj$ PartObj,
     sys.ind$ Ind,
     sys.obj$ Obj_IdxPart,
     sys.indpart$ IndPart,
     sys.obj$ Obj_Tab,
     sys.tab$ Tab,
     sys.ts$ TSpc,
     sys.tabpart$ TabPart
LEFT OUTER JOIN
     sys.seg$ Seg
ON Seg.file# = TabPart.file#
  AND Seg.block# = TabPart.block#
  AND Seg.ts# = TabPart.ts#
  AND Seg.type# = 5
WHERE Obj_Tab.obj# = Ind.bo#
  AND Ind.obj# = IndPart.bo#
  AND PartObj.obj# = Ind.obj#
  AND IndPart.obj# = Obj_IdxPart.obj#
  AND Ind.obj# = Obj_Idx.obj#
  AND bitand(PartObj.flags, 1) = 1 -- 0x01 = local index
  AND Obj_Idx.owner# = Usr.user#
  AND TabPart.bo# = Obj_Tab.obj#
  AND TabPart.part# = IndPart.part#
  AND Tab.obj# = Obj_Tab.obj#
  AND TabPart.ts# = TSpc.ts#;

spool off

rem set echo off
set termout on

rem Unloaded 2647 views.
rem Quantity checking OK. Views found equal unloaded.

rem Unload begun at: 01-11-2005 18:32:44
rem Unload end at  : 01-11-2005 18:32:50
rem TOTAL TIME: 0 hours 0 minutes 6 seconds

prompt Loading complete.

exit
